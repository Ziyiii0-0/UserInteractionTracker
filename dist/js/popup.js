/*! For license information please see popup.js.LICENSE.txt */
(()=>{var e={393:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var o=n(354),r=n.n(o),i=n(314),s=n.n(i)()(r());s.push([e.id,"body{width:300px;font-family:Arial,sans-serif;background-color:#fff;padding:5px;border-radius:10px;display:flex;flex-direction:column;align-items:center}.popup-container{width:100%}.input-container{margin:5px 0;width:100%}.recording-status{width:100%;margin-bottom:20px;border:none;background-color:rgba(0,0,0,0);color:#333;vertical-align:middle}.recording-status:empty{display:none}.user-id-label{font-size:14px;color:#333;margin-bottom:3px}.user-id-input{width:100%;padding:10px;box-sizing:border-box;border-radius:8px;border:1px solid #ccc;margin-bottom:5px;font-size:14px}.user-id-container{margin-top:5px;display:flex;align-items:center;justify-content:space-between;width:100%}.user-id-display{display:flex;font-size:14px;align-items:center}.button-container{display:flex;justify-content:space-between;gap:10px;width:100%}.confirm-button{width:100%;margin-top:5px;padding:8px;font-size:12px;cursor:pointer;border:none;border-radius:8px;background-color:#76b1ef;color:#fff;transition:background-color .3s}.edit-button{margin-left:auto;font-size:14px;cursor:pointer;border:none;background-color:rgba(0,0,0,0);color:#97d3e7}.edit-button:hover{color:#78c2f4}.action-button{padding:12px 40px;font-size:12px;cursor:pointer;border:none;background-color:rgba(0,0,0,0);color:#97d3e7;transition:background-color .3s}.action-button:hover{background-color:#0056b3}.divider{border-color:#78c2f4;width:100%;margin-top:15px}.info-text{max-height:100px;overflow-y:auto;font-size:12px;background-color:#eef8fb;margin:5px 0;padding:0 2px;border-radius:1px;width:100%}.info-text:empty{display:none}.output-container{max-height:100px;overflow-y:auto;font-size:12px;background-color:rgba(0,0,0,0);border-radius:3px;width:100%;display:flex;justify-content:space-between;border:none;color:#676565}.output-container:empty{display:none}.output-item{margin:0 0}h3{text-align:center;color:#78c2f4;font-size:24px;margin-top:10px;margin-bottom:10px}","",{version:3,sources:["webpack://./src/popup.vue"],names:[],mappings:"AACA,KACE,WAAA,CACA,4BAAA,CACA,qBAAA,CACA,WAAA,CACA,kBAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CAGF,iBACE,UAAA,CAGF,iBACE,YAAA,CACA,UAAA,CAGF,kBACE,UAAA,CACA,kBAAA,CACA,WAAA,CACA,8BAAA,CACA,UAAA,CACA,qBAAA,CAEA,wBACE,YAAA,CAIJ,eACE,cAAA,CACA,UAAA,CACA,iBAAA,CAGF,eACE,UAAA,CACA,YAAA,CACA,qBAAA,CACA,iBAAA,CACA,qBAAA,CACA,iBAAA,CACA,cAAA,CAGF,mBACE,cAAA,CACA,YAAA,CACA,kBAAA,CACA,6BAAA,CACA,UAAA,CAGF,iBACE,YAAA,CACA,cAAA,CACA,kBAAA,CAGF,kBACE,YAAA,CACA,6BAAA,CACA,QAAA,CACA,UAAA,CAGF,gBACE,UAAA,CACA,cAAA,CACA,WAAA,CACA,cAAA,CACA,cAAA,CACA,WAAA,CACA,iBAAA,CACA,wBAAA,CACA,UAAA,CACA,+BAAA,CAGF,aACE,gBAAA,CACA,cAAA,CACA,cAAA,CACA,WAAA,CACA,8BAAA,CACA,aAAA,CAEA,mBACE,aAAA,CAIJ,eACE,iBAAA,CACA,cAAA,CACA,cAAA,CACA,WAAA,CACA,8BAAA,CACA,aAAA,CACA,+BAAA,CAEA,qBACE,wBAAA,CAIJ,SACE,oBAAA,CACA,UAAA,CACA,eAAA,CAGF,WACE,gBAAA,CACA,eAAA,CACA,cAAA,CACA,wBAAA,CACA,YAAA,CACA,aAAA,CACA,iBAAA,CACA,UAAA,CAEA,iBACE,YAAA,CAIJ,kBACE,gBAAA,CACA,eAAA,CACA,cAAA,CACA,8BAAA,CAEA,iBAAA,CACA,UAAA,CACA,YAAA,CACA,6BAAA,CACA,WAAA,CACA,aAAA,CAEA,wBACE,YAAA,CAIJ,aACE,UAAA,CAGF,GACE,iBAAA,CACA,aAAA,CACA,cAAA,CACA,eAAA,CACA,kBAAA",sourcesContent:["\nbody {\n  width: 300px;\n  font-family: Arial, sans-serif;\n  background-color: #ffffff;\n  padding: 5px;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.popup-container {\n  width: 100%;\n}\n\n.input-container {\n  margin: 5px 0;\n  width: 100%;\n}\n\n.recording-status {\n  width: 100%;\n  margin-bottom: 20px;\n  border: none;\n  background-color: transparent;\n  color: #333;\n  vertical-align: middle;\n\n  &:empty {\n    display: none;\n  }\n}\n\n.user-id-label {\n  font-size: 14px;\n  color: #333;\n  margin-bottom: 3px;\n}\n\n.user-id-input {\n  width: 100%;\n  padding: 10px;\n  box-sizing: border-box;\n  border-radius: 8px;\n  border: 1px solid #ccc;\n  margin-bottom: 5px;\n  font-size: 14px;\n}\n\n.user-id-container {\n  margin-top: 5px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n}\n\n.user-id-display {\n  display: flex;\n  font-size: 14px;\n  align-items: center;\n}\n\n.button-container {\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n  width: 100%;\n}\n\n.confirm-button {\n  width: 100%;\n  margin-top: 5px;\n  padding: 8px;\n  font-size: 12px;\n  cursor: pointer;\n  border: none;\n  border-radius: 8px;\n  background-color: #76b1ef;\n  color: white;\n  transition: background-color 0.3s;\n}\n\n.edit-button {\n  margin-left: auto;\n  font-size: 14px;\n  cursor: pointer;\n  border: none;\n  background-color: transparent;\n  color: #97d3e7;\n\n  &:hover {\n    color: #78c2f4;\n  }\n}\n\n.action-button {\n  padding: 12px 40px;\n  font-size: 12px;\n  cursor: pointer;\n  border: none;\n  background-color: transparent;\n  color: #97d3e7;\n  transition: background-color 0.3s;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n}\n\n.divider {\n  border-color: #78c2f4;\n  width: 100%;\n  margin-top: 15px;\n}\n\n.info-text {\n  max-height: 100px;\n  overflow-y: auto;\n  font-size: 12px;\n  background-color: #eef8fb;\n  margin: 5px 0;\n  padding: 0 2px;\n  border-radius: 1px;\n  width: 100%;\n\n  &:empty {\n    display: none;\n  }\n}\n\n.output-container {\n  max-height: 100px;\n  overflow-y: auto;\n  font-size: 12px;\n  background-color: transparent;\n  // margin-top: 5px;\n  border-radius: 3px;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  border: none;\n  color: #676565;\n\n  &:empty {\n    display: none;\n  }\n}\n\n.output-item {\n  margin: 0 0;\n}\n\nh3 {\n  text-align: center;\n  color: #78c2f4;\n  font-size: 24px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n"],sourceRoot:""}]);const l=s},314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(o)for(var l=0;l<this.length;l++){var a=this[l][0];null!=a&&(s[a]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);o&&s[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),t.push(u))}},t}},354:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},474:(e,t,n)=>{var o=n(393);o.__esModule&&(o=o.default),"string"==typeof o&&(o=[[e.id,o,""]]),o.locals&&(e.exports=o.locals),(0,n(534).A)("587763d0",o,!1,{})},534:(e,t,n)=>{"use strict";function o(e,t){for(var n=[],o={},r=0;r<t.length;r++){var i=t[r],s=i[0],l={id:e+":"+r,css:i[1],media:i[2],sourceMap:i[3]};o[s]?o[s].parts.push(l):n.push(o[s]={id:s,parts:[l]})}return n}n.d(t,{A:()=>h});var r="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!r)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var i={},s=r&&(document.head||document.getElementsByTagName("head")[0]),l=null,a=0,c=!1,u=function(){},d=null,p="data-vue-ssr-id",f="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function h(e,t,n,r){c=n,d=r||{};var s=o(e,t);return v(s),function(t){for(var n=[],r=0;r<s.length;r++){var l=s[r];(a=i[l.id]).refs--,n.push(a)}for(t?v(s=o(e,t)):s=[],r=0;r<n.length;r++){var a;if(0===(a=n[r]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete i[a.id]}}}}function v(e){for(var t=0;t<e.length;t++){var n=e[t],o=i[n.id];if(o){o.refs++;for(var r=0;r<o.parts.length;r++)o.parts[r](n.parts[r]);for(;r<n.parts.length;r++)o.parts.push(m(n.parts[r]));o.parts.length>n.parts.length&&(o.parts.length=n.parts.length)}else{var s=[];for(r=0;r<n.parts.length;r++)s.push(m(n.parts[r]));i[n.id]={id:n.id,refs:1,parts:s}}}}function g(){var e=document.createElement("style");return e.type="text/css",s.appendChild(e),e}function m(e){var t,n,o=document.querySelector("style["+p+'~="'+e.id+'"]');if(o){if(c)return u;o.parentNode.removeChild(o)}if(f){var r=a++;o=l||(l=g()),t=x.bind(null,o,r,!1),n=x.bind(null,o,r,!0)}else o=g(),t=_.bind(null,o),n=function(){o.parentNode.removeChild(o)};return t(e),function(o){if(o){if(o.css===e.css&&o.media===e.media&&o.sourceMap===e.sourceMap)return;t(e=o)}else n()}}var b,y=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function x(e,t,n,o){var r=n?"":o.css;if(e.styleSheet)e.styleSheet.cssText=y(t,r);else{var i=document.createTextNode(r),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(i,s[t]):e.appendChild(i)}}function _(e,t){var n=t.css,o=t.media,r=t.sourceMap;if(o&&e.setAttribute("media",o),d.ssrId&&e.setAttribute(p,t.id),r&&(n+="\n/*# sourceURL="+r.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";function e(e){const t=Object.create(null);for(const n of e.split(","))t[n]=1;return e=>e in t}const t={},o=[],r=()=>{},i=()=>!1,s=e=>111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&(e.charCodeAt(2)>122||e.charCodeAt(2)<97),l=e=>e.startsWith("onUpdate:"),a=Object.assign,c=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},u=Object.prototype.hasOwnProperty,d=(e,t)=>u.call(e,t),p=Array.isArray,f=e=>"[object Map]"===_(e),h=e=>"[object Set]"===_(e),v=e=>"function"==typeof e,g=e=>"string"==typeof e,m=e=>"symbol"==typeof e,b=e=>null!==e&&"object"==typeof e,y=e=>(b(e)||v(e))&&v(e.then)&&v(e.catch),x=Object.prototype.toString,_=e=>x.call(e),C=e=>_(e).slice(8,-1),A=e=>"[object Object]"===_(e),w=e=>g(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,S=e(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),$=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},E=/-(\w)/g,O=$((e=>e.replace(E,((e,t)=>t?t.toUpperCase():"")))),P=/\B([A-Z])/g,T=$((e=>e.replace(P,"-$1").toLowerCase())),k=$((e=>e.charAt(0).toUpperCase()+e.slice(1))),j=$((e=>e?`on${k(e)}`:"")),F=(e,t)=>!Object.is(e,t),D=(e,...t)=>{for(let n=0;n<e.length;n++)e[n](...t)},B=(e,t,n,o=!1)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,writable:o,value:n})},R=e=>{const t=parseFloat(e);return isNaN(t)?e:t},z=e=>{const t=g(e)?Number(e):NaN;return isNaN(t)?e:t};let I;const M=()=>I||(I="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:{});function L(e){if(p(e)){const t={};for(let n=0;n<e.length;n++){const o=e[n],r=g(o)?N(o):L(o);if(r)for(const e in r)t[e]=r[e]}return t}if(g(e)||b(e))return e}const H=/;(?![^(]*\))/g,U=/:([^]+)/,V=/\/\*[^]*?\*\//g;function N(e){const t={};return e.replace(V,"").split(H).forEach((e=>{if(e){const n=e.split(U);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}function W(e){let t="";if(g(e))t=e;else if(p(e))for(let n=0;n<e.length;n++){const o=W(e[n]);o&&(t+=o+" ")}else if(b(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}const G=e("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function q(e){return!!e||""===e}const Y=e=>!(!e||!0!==e.__v_isRef),K=e=>g(e)?e:null==e?"":p(e)||b(e)&&(e.toString===x||!v(e.toString))?Y(e)?K(e.value):JSON.stringify(e,J,2):String(e),J=(e,t)=>Y(t)?J(e,t.value):f(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,n],o)=>(e[Q(t,o)+" =>"]=n,e)),{})}:h(t)?{[`Set(${t.size})`]:[...t.values()].map((e=>Q(e)))}:m(t)?Q(t):!b(t)||p(t)||A(t)?t:String(t),Q=(e,t="")=>{var n;return m(e)?`Symbol(${null!=(n=e.description)?n:t})`:e};let X,Z;class ee{constructor(e=!1){this.detached=e,this._active=!0,this.effects=[],this.cleanups=[],this._isPaused=!1,this.parent=X,!e&&X&&(this.index=(X.scopes||(X.scopes=[])).push(this)-1)}get active(){return this._active}pause(){if(this._active){let e,t;if(this._isPaused=!0,this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].pause();for(e=0,t=this.effects.length;e<t;e++)this.effects[e].pause()}}resume(){if(this._active&&this._isPaused){let e,t;if(this._isPaused=!1,this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].resume();for(e=0,t=this.effects.length;e<t;e++)this.effects[e].resume()}}run(e){if(this._active){const t=X;try{return X=this,e()}finally{X=t}}}on(){X=this}off(){X=this.parent}stop(e){if(this._active){let t,n;for(this._active=!1,t=0,n=this.effects.length;t<n;t++)this.effects[t].stop();for(this.effects.length=0,t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.cleanups.length=0,this.scopes){for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);this.scopes.length=0}if(!this.detached&&this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.parent=void 0}}}const te=new WeakSet;class ne{constructor(e){this.fn=e,this.deps=void 0,this.depsTail=void 0,this.flags=5,this.next=void 0,this.cleanup=void 0,this.scheduler=void 0,X&&X.active&&X.effects.push(this)}pause(){this.flags|=64}resume(){64&this.flags&&(this.flags&=-65,te.has(this)&&(te.delete(this),this.trigger()))}notify(){2&this.flags&&!(32&this.flags)||8&this.flags||se(this)}run(){if(!(1&this.flags))return this.fn();this.flags|=2,ye(this),ce(this);const e=Z,t=ve;Z=this,ve=!0;try{return this.fn()}finally{ue(this),Z=e,ve=t,this.flags&=-3}}stop(){if(1&this.flags){for(let e=this.deps;e;e=e.nextDep)fe(e);this.deps=this.depsTail=void 0,ye(this),this.onStop&&this.onStop(),this.flags&=-2}}trigger(){64&this.flags?te.add(this):this.scheduler?this.scheduler():this.runIfDirty()}runIfDirty(){de(this)&&this.run()}get dirty(){return de(this)}}let oe,re,ie=0;function se(e,t=!1){if(e.flags|=8,t)return e.next=re,void(re=e);e.next=oe,oe=e}function le(){ie++}function ae(){if(--ie>0)return;if(re){let e=re;for(re=void 0;e;){const t=e.next;e.next=void 0,e.flags&=-9,e=t}}let e;for(;oe;){let t=oe;for(oe=void 0;t;){const n=t.next;if(t.next=void 0,t.flags&=-9,1&t.flags)try{t.trigger()}catch(t){e||(e=t)}t=n}}if(e)throw e}function ce(e){for(let t=e.deps;t;t=t.nextDep)t.version=-1,t.prevActiveLink=t.dep.activeLink,t.dep.activeLink=t}function ue(e){let t,n=e.depsTail,o=n;for(;o;){const e=o.prevDep;-1===o.version?(o===n&&(n=e),fe(o),he(o)):t=o,o.dep.activeLink=o.prevActiveLink,o.prevActiveLink=void 0,o=e}e.deps=t,e.depsTail=n}function de(e){for(let t=e.deps;t;t=t.nextDep)if(t.dep.version!==t.version||t.dep.computed&&(pe(t.dep.computed)||t.dep.version!==t.version))return!0;return!!e._dirty}function pe(e){if(4&e.flags&&!(16&e.flags))return;if(e.flags&=-17,e.globalVersion===xe)return;e.globalVersion=xe;const t=e.dep;if(e.flags|=2,t.version>0&&!e.isSSR&&e.deps&&!de(e))return void(e.flags&=-3);const n=Z,o=ve;Z=e,ve=!0;try{ce(e);const n=e.fn(e._value);(0===t.version||F(n,e._value))&&(e._value=n,t.version++)}catch(e){throw t.version++,e}finally{Z=n,ve=o,ue(e),e.flags&=-3}}function fe(e,t=!1){const{dep:n,prevSub:o,nextSub:r}=e;if(o&&(o.nextSub=r,e.prevSub=void 0),r&&(r.prevSub=o,e.nextSub=void 0),n.subs===e&&(n.subs=o,!o&&n.computed)){n.computed.flags&=-5;for(let e=n.computed.deps;e;e=e.nextDep)fe(e,!0)}t||--n.sc||!n.map||n.map.delete(n.key)}function he(e){const{prevDep:t,nextDep:n}=e;t&&(t.nextDep=n,e.prevDep=void 0),n&&(n.prevDep=t,e.nextDep=void 0)}let ve=!0;const ge=[];function me(){ge.push(ve),ve=!1}function be(){const e=ge.pop();ve=void 0===e||e}function ye(e){const{cleanup:t}=e;if(e.cleanup=void 0,t){const e=Z;Z=void 0;try{t()}finally{Z=e}}}let xe=0;class _e{constructor(e,t){this.sub=e,this.dep=t,this.version=t.version,this.nextDep=this.prevDep=this.nextSub=this.prevSub=this.prevActiveLink=void 0}}class Ce{constructor(e){this.computed=e,this.version=0,this.activeLink=void 0,this.subs=void 0,this.map=void 0,this.key=void 0,this.sc=0}track(e){if(!Z||!ve||Z===this.computed)return;let t=this.activeLink;if(void 0===t||t.sub!==Z)t=this.activeLink=new _e(Z,this),Z.deps?(t.prevDep=Z.depsTail,Z.depsTail.nextDep=t,Z.depsTail=t):Z.deps=Z.depsTail=t,Ae(t);else if(-1===t.version&&(t.version=this.version,t.nextDep)){const e=t.nextDep;e.prevDep=t.prevDep,t.prevDep&&(t.prevDep.nextDep=e),t.prevDep=Z.depsTail,t.nextDep=void 0,Z.depsTail.nextDep=t,Z.depsTail=t,Z.deps===t&&(Z.deps=e)}return t}trigger(e){this.version++,xe++,this.notify(e)}notify(e){le();try{for(let e=this.subs;e;e=e.prevSub)e.sub.notify()&&e.sub.dep.notify()}finally{ae()}}}function Ae(e){if(e.dep.sc++,4&e.sub.flags){const t=e.dep.computed;if(t&&!e.dep.subs){t.flags|=20;for(let e=t.deps;e;e=e.nextDep)Ae(e)}const n=e.dep.subs;n!==e&&(e.prevSub=n,n&&(n.nextSub=e)),e.dep.subs=e}}const we=new WeakMap,Se=Symbol(""),$e=Symbol(""),Ee=Symbol("");function Oe(e,t,n){if(ve&&Z){let t=we.get(e);t||we.set(e,t=new Map);let o=t.get(n);o||(t.set(n,o=new Ce),o.map=t,o.key=n),o.track()}}function Pe(e,t,n,o,r,i){const s=we.get(e);if(!s)return void xe++;const l=e=>{e&&e.trigger()};if(le(),"clear"===t)s.forEach(l);else{const r=p(e),i=r&&w(n);if(r&&"length"===n){const e=Number(o);s.forEach(((t,n)=>{("length"===n||n===Ee||!m(n)&&n>=e)&&l(t)}))}else switch((void 0!==n||s.has(void 0))&&l(s.get(n)),i&&l(s.get(Ee)),t){case"add":r?i&&l(s.get("length")):(l(s.get(Se)),f(e)&&l(s.get($e)));break;case"delete":r||(l(s.get(Se)),f(e)&&l(s.get($e)));break;case"set":f(e)&&l(s.get(Se))}}ae()}function Te(e){const t=pt(e);return t===e?t:(Oe(t,0,Ee),ut(e)?t:t.map(ft))}function ke(e){return Oe(e=pt(e),0,Ee),e}const je={__proto__:null,[Symbol.iterator](){return Fe(this,Symbol.iterator,ft)},concat(...e){return Te(this).concat(...e.map((e=>p(e)?Te(e):e)))},entries(){return Fe(this,"entries",(e=>(e[1]=ft(e[1]),e)))},every(e,t){return Be(this,"every",e,t,void 0,arguments)},filter(e,t){return Be(this,"filter",e,t,(e=>e.map(ft)),arguments)},find(e,t){return Be(this,"find",e,t,ft,arguments)},findIndex(e,t){return Be(this,"findIndex",e,t,void 0,arguments)},findLast(e,t){return Be(this,"findLast",e,t,ft,arguments)},findLastIndex(e,t){return Be(this,"findLastIndex",e,t,void 0,arguments)},forEach(e,t){return Be(this,"forEach",e,t,void 0,arguments)},includes(...e){return ze(this,"includes",e)},indexOf(...e){return ze(this,"indexOf",e)},join(e){return Te(this).join(e)},lastIndexOf(...e){return ze(this,"lastIndexOf",e)},map(e,t){return Be(this,"map",e,t,void 0,arguments)},pop(){return Ie(this,"pop")},push(...e){return Ie(this,"push",e)},reduce(e,...t){return Re(this,"reduce",e,t)},reduceRight(e,...t){return Re(this,"reduceRight",e,t)},shift(){return Ie(this,"shift")},some(e,t){return Be(this,"some",e,t,void 0,arguments)},splice(...e){return Ie(this,"splice",e)},toReversed(){return Te(this).toReversed()},toSorted(e){return Te(this).toSorted(e)},toSpliced(...e){return Te(this).toSpliced(...e)},unshift(...e){return Ie(this,"unshift",e)},values(){return Fe(this,"values",ft)}};function Fe(e,t,n){const o=ke(e),r=o[t]();return o===e||ut(e)||(r._next=r.next,r.next=()=>{const e=r._next();return e.value&&(e.value=n(e.value)),e}),r}const De=Array.prototype;function Be(e,t,n,o,r,i){const s=ke(e),l=s!==e&&!ut(e),a=s[t];if(a!==De[t]){const t=a.apply(e,i);return l?ft(t):t}let c=n;s!==e&&(l?c=function(t,o){return n.call(this,ft(t),o,e)}:n.length>2&&(c=function(t,o){return n.call(this,t,o,e)}));const u=a.call(s,c,o);return l&&r?r(u):u}function Re(e,t,n,o){const r=ke(e);let i=n;return r!==e&&(ut(e)?n.length>3&&(i=function(t,o,r){return n.call(this,t,o,r,e)}):i=function(t,o,r){return n.call(this,t,ft(o),r,e)}),r[t](i,...o)}function ze(e,t,n){const o=pt(e);Oe(o,0,Ee);const r=o[t](...n);return-1!==r&&!1!==r||!dt(n[0])?r:(n[0]=pt(n[0]),o[t](...n))}function Ie(e,t,n=[]){me(),le();const o=pt(e)[t].apply(e,n);return ae(),be(),o}const Me=e("__proto__,__v_isRef,__isVue"),Le=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(m));function He(e){m(e)||(e=String(e));const t=pt(this);return Oe(t,0,e),t.hasOwnProperty(e)}class Ue{constructor(e=!1,t=!1){this._isReadonly=e,this._isShallow=t}get(e,t,n){if("__v_skip"===t)return e.__v_skip;const o=this._isReadonly,r=this._isShallow;if("__v_isReactive"===t)return!o;if("__v_isReadonly"===t)return o;if("__v_isShallow"===t)return r;if("__v_raw"===t)return n===(o?r?rt:ot:r?nt:tt).get(e)||Object.getPrototypeOf(e)===Object.getPrototypeOf(n)?e:void 0;const i=p(e);if(!o){let e;if(i&&(e=je[t]))return e;if("hasOwnProperty"===t)return He}const s=Reflect.get(e,t,vt(e)?e:n);return(m(t)?Le.has(t):Me(t))?s:(o||Oe(e,0,t),r?s:vt(s)?i&&w(t)?s:s.value:b(s)?o?st(s):it(s):s)}}class Ve extends Ue{constructor(e=!1){super(!1,e)}set(e,t,n,o){let r=e[t];if(!this._isShallow){const t=ct(r);if(ut(n)||ct(n)||(r=pt(r),n=pt(n)),!p(e)&&vt(r)&&!vt(n))return!t&&(r.value=n,!0)}const i=p(e)&&w(t)?Number(t)<e.length:d(e,t),s=Reflect.set(e,t,n,vt(e)?e:o);return e===pt(o)&&(i?F(n,r)&&Pe(e,"set",t,n):Pe(e,"add",t,n)),s}deleteProperty(e,t){const n=d(e,t),o=(e[t],Reflect.deleteProperty(e,t));return o&&n&&Pe(e,"delete",t,void 0),o}has(e,t){const n=Reflect.has(e,t);return m(t)&&Le.has(t)||Oe(e,0,t),n}ownKeys(e){return Oe(e,0,p(e)?"length":Se),Reflect.ownKeys(e)}}class Ne extends Ue{constructor(e=!1){super(!0,e)}set(e,t){return!0}deleteProperty(e,t){return!0}}const We=new Ve,Ge=new Ne,qe=new Ve(!0),Ye=e=>e,Ke=e=>Reflect.getPrototypeOf(e);function Je(e){return function(...t){return"delete"!==e&&("clear"===e?void 0:this)}}function Qe(e,t){const n=function(e,t){const n={get(n){const o=this.__v_raw,r=pt(o),i=pt(n);e||(F(n,i)&&Oe(r,0,n),Oe(r,0,i));const{has:s}=Ke(r),l=t?Ye:e?ht:ft;return s.call(r,n)?l(o.get(n)):s.call(r,i)?l(o.get(i)):void(o!==r&&o.get(n))},get size(){const t=this.__v_raw;return!e&&Oe(pt(t),0,Se),Reflect.get(t,"size",t)},has(t){const n=this.__v_raw,o=pt(n),r=pt(t);return e||(F(t,r)&&Oe(o,0,t),Oe(o,0,r)),t===r?n.has(t):n.has(t)||n.has(r)},forEach(n,o){const r=this,i=r.__v_raw,s=pt(i),l=t?Ye:e?ht:ft;return!e&&Oe(s,0,Se),i.forEach(((e,t)=>n.call(o,l(e),l(t),r)))}};return a(n,e?{add:Je("add"),set:Je("set"),delete:Je("delete"),clear:Je("clear")}:{add(e){t||ut(e)||ct(e)||(e=pt(e));const n=pt(this);return Ke(n).has.call(n,e)||(n.add(e),Pe(n,"add",e,e)),this},set(e,n){t||ut(n)||ct(n)||(n=pt(n));const o=pt(this),{has:r,get:i}=Ke(o);let s=r.call(o,e);s||(e=pt(e),s=r.call(o,e));const l=i.call(o,e);return o.set(e,n),s?F(n,l)&&Pe(o,"set",e,n):Pe(o,"add",e,n),this},delete(e){const t=pt(this),{has:n,get:o}=Ke(t);let r=n.call(t,e);r||(e=pt(e),r=n.call(t,e)),o&&o.call(t,e);const i=t.delete(e);return r&&Pe(t,"delete",e,void 0),i},clear(){const e=pt(this),t=0!==e.size,n=e.clear();return t&&Pe(e,"clear",void 0,void 0),n}}),["keys","values","entries",Symbol.iterator].forEach((o=>{n[o]=function(e,t,n){return function(...o){const r=this.__v_raw,i=pt(r),s=f(i),l="entries"===e||e===Symbol.iterator&&s,a="keys"===e&&s,c=r[e](...o),u=n?Ye:t?ht:ft;return!t&&Oe(i,0,a?$e:Se),{next(){const{value:e,done:t}=c.next();return t?{value:e,done:t}:{value:l?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}(o,e,t)})),n}(e,t);return(t,o,r)=>"__v_isReactive"===o?!e:"__v_isReadonly"===o?e:"__v_raw"===o?t:Reflect.get(d(n,o)&&o in t?n:t,o,r)}const Xe={get:Qe(!1,!1)},Ze={get:Qe(!1,!0)},et={get:Qe(!0,!1)},tt=new WeakMap,nt=new WeakMap,ot=new WeakMap,rt=new WeakMap;function it(e){return ct(e)?e:lt(e,!1,We,Xe,tt)}function st(e){return lt(e,!0,Ge,et,ot)}function lt(e,t,n,o,r){if(!b(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const i=r.get(e);if(i)return i;const s=(l=e).__v_skip||!Object.isExtensible(l)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}(C(l));var l;if(0===s)return e;const a=new Proxy(e,2===s?o:n);return r.set(e,a),a}function at(e){return ct(e)?at(e.__v_raw):!(!e||!e.__v_isReactive)}function ct(e){return!(!e||!e.__v_isReadonly)}function ut(e){return!(!e||!e.__v_isShallow)}function dt(e){return!!e&&!!e.__v_raw}function pt(e){const t=e&&e.__v_raw;return t?pt(t):e}const ft=e=>b(e)?it(e):e,ht=e=>b(e)?st(e):e;function vt(e){return!!e&&!0===e.__v_isRef}function gt(e){return mt(e,!1)}function mt(e,t){return vt(e)?e:new bt(e,t)}class bt{constructor(e,t){this.dep=new Ce,this.__v_isRef=!0,this.__v_isShallow=!1,this._rawValue=t?e:pt(e),this._value=t?e:ft(e),this.__v_isShallow=t}get value(){return this.dep.track(),this._value}set value(e){const t=this._rawValue,n=this.__v_isShallow||ut(e)||ct(e);e=n?e:pt(e),F(e,t)&&(this._rawValue=e,this._value=n?e:ft(e),this.dep.trigger())}}function yt(e){return vt(e)?e.value:e}const xt={get:(e,t,n)=>"__v_raw"===t?e:yt(Reflect.get(e,t,n)),set:(e,t,n,o)=>{const r=e[t];return vt(r)&&!vt(n)?(r.value=n,!0):Reflect.set(e,t,n,o)}};function _t(e){return at(e)?e:new Proxy(e,xt)}class Ct{constructor(e,t,n){this._object=e,this._key=t,this._defaultValue=n,this.__v_isRef=!0,this._value=void 0}get value(){const e=this._object[this._key];return this._value=void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}get dep(){return function(e,t){const n=we.get(e);return n&&n.get(t)}(pt(this._object),this._key)}}class At{constructor(e){this._getter=e,this.__v_isRef=!0,this.__v_isReadonly=!0,this._value=void 0}get value(){return this._value=this._getter()}}function wt(e,t,n){return vt(e)?e:v(e)?new At(e):b(e)&&arguments.length>1?function(e,t,n){const o=e[t];return vt(o)?o:new Ct(e,t,n)}(e,t,n):gt(e)}class St{constructor(e,t,n){this.fn=e,this.setter=t,this._value=void 0,this.dep=new Ce(this),this.__v_isRef=!0,this.deps=void 0,this.depsTail=void 0,this.flags=16,this.globalVersion=xe-1,this.next=void 0,this.effect=this,this.__v_isReadonly=!t,this.isSSR=n}notify(){if(this.flags|=16,!(8&this.flags||Z===this))return se(this,!0),!0}get value(){const e=this.dep.track();return pe(this),e&&(e.version=this.dep.version),this._value}set value(e){this.setter&&this.setter(e)}}const $t={},Et=new WeakMap;let Ot;function Pt(e,t=1/0,n){if(t<=0||!b(e)||e.__v_skip)return e;if((n=n||new Set).has(e))return e;if(n.add(e),t--,vt(e))Pt(e.value,t,n);else if(p(e))for(let o=0;o<e.length;o++)Pt(e[o],t,n);else if(h(e)||f(e))e.forEach((e=>{Pt(e,t,n)}));else if(A(e)){for(const o in e)Pt(e[o],t,n);for(const o of Object.getOwnPropertySymbols(e))Object.prototype.propertyIsEnumerable.call(e,o)&&Pt(e[o],t,n)}return e}function Tt(e,t,n,o){try{return o?e(...o):e()}catch(e){jt(e,t,n)}}function kt(e,t,n,o){if(v(e)){const r=Tt(e,t,n,o);return r&&y(r)&&r.catch((e=>{jt(e,t,n)})),r}if(p(e)){const r=[];for(let i=0;i<e.length;i++)r.push(kt(e[i],t,n,o));return r}}function jt(e,n,o,r=!0){n&&n.vnode;const{errorHandler:i,throwUnhandledErrorInProduction:s}=n&&n.appContext.config||t;if(n){let t=n.parent;const r=n.proxy,s=`https://vuejs.org/error-reference/#runtime-${o}`;for(;t;){const n=t.ec;if(n)for(let t=0;t<n.length;t++)if(!1===n[t](e,r,s))return;t=t.parent}if(i)return me(),Tt(i,null,10,[e,r,s]),void be()}!function(e,t,n,o=!0,r=!1){if(r)throw e;console.error(e)}(e,0,0,r,s)}const Ft=[];let Dt=-1;const Bt=[];let Rt=null,zt=0;const It=Promise.resolve();let Mt=null;function Lt(e){const t=Mt||It;return e?t.then(this?e.bind(this):e):t}function Ht(e){if(!(1&e.flags)){const t=Wt(e),n=Ft[Ft.length-1];!n||!(2&e.flags)&&t>=Wt(n)?Ft.push(e):Ft.splice(function(e){let t=Dt+1,n=Ft.length;for(;t<n;){const o=t+n>>>1,r=Ft[o],i=Wt(r);i<e||i===e&&2&r.flags?t=o+1:n=o}return t}(t),0,e),e.flags|=1,Ut()}}function Ut(){Mt||(Mt=It.then(Gt))}function Vt(e,t,n=Dt+1){for(;n<Ft.length;n++){const t=Ft[n];if(t&&2&t.flags){if(e&&t.id!==e.uid)continue;Ft.splice(n,1),n--,4&t.flags&&(t.flags&=-2),t(),4&t.flags||(t.flags&=-2)}}}function Nt(e){if(Bt.length){const e=[...new Set(Bt)].sort(((e,t)=>Wt(e)-Wt(t)));if(Bt.length=0,Rt)return void Rt.push(...e);for(Rt=e,zt=0;zt<Rt.length;zt++){const e=Rt[zt];4&e.flags&&(e.flags&=-2),8&e.flags||e(),e.flags&=-2}Rt=null,zt=0}}const Wt=e=>null==e.id?2&e.flags?-1:1/0:e.id;function Gt(e){try{for(Dt=0;Dt<Ft.length;Dt++){const e=Ft[Dt];!e||8&e.flags||(4&e.flags&&(e.flags&=-2),Tt(e,e.i,e.i?15:14),4&e.flags||(e.flags&=-2))}}finally{for(;Dt<Ft.length;Dt++){const e=Ft[Dt];e&&(e.flags&=-2)}Dt=-1,Ft.length=0,Nt(),Mt=null,(Ft.length||Bt.length)&&Gt(e)}}let qt,Yt=[],Kt=!1;function Jt(e,...t){qt?qt.emit(e,...t):Kt||Yt.push({event:e,args:t})}function Qt(e,t){var n,o;qt=e,qt?(qt.enabled=!0,Yt.forEach((({event:e,args:t})=>qt.emit(e,...t))),Yt=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null==(o=null==(n=window.navigator)?void 0:n.userAgent)?void 0:o.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{Qt(e,t)})),setTimeout((()=>{qt||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,Kt=!0,Yt=[])}),3e3)):(Kt=!0,Yt=[])}const Xt=nn("component:added"),Zt=nn("component:updated"),en=nn("component:removed"),tn=e=>{qt&&"function"==typeof qt.cleanupBuffer&&!qt.cleanupBuffer(e)&&en(e)};function nn(e){return t=>{Jt(e,t.appContext.app,t.uid,t.parent?t.parent.uid:void 0,t)}}let on=null,rn=null;function sn(e){const t=on;return on=e,rn=e&&e.type.__scopeId||null,t}function ln(e,t=on,n){if(!t)return e;if(e._n)return e;const o=(...n)=>{o._d&&ur(-1);const r=sn(t);let i;try{i=e(...n)}finally{sn(r),o._d&&ur(1)}return __VUE_PROD_DEVTOOLS__&&Zt(t),i};return o._n=!0,o._c=!0,o._d=!0,o}function an(e,n){if(null===on)return e;const o=Ur(on),r=e.dirs||(e.dirs=[]);for(let e=0;e<n.length;e++){let[i,s,l,a=t]=n[e];i&&(v(i)&&(i={mounted:i,updated:i}),i.deep&&Pt(s),r.push({dir:i,instance:o,value:s,oldValue:void 0,arg:l,modifiers:a}))}return e}function cn(e,t,n,o){const r=e.dirs,i=t&&t.dirs;for(let s=0;s<r.length;s++){const l=r[s];i&&(l.oldValue=i[s].value);let a=l.dir[o];a&&(me(),kt(a,n,8,[e.el,l,e,t]),be())}}const un=Symbol("_vte"),dn=e=>e.__isTeleport,pn=Symbol("_leaveCb"),fn=Symbol("_enterCb");function hn(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return In((()=>{e.isMounted=!0})),Hn((()=>{e.isUnmounting=!0})),e}const vn=[Function,Array],gn={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:vn,onEnter:vn,onAfterEnter:vn,onEnterCancelled:vn,onBeforeLeave:vn,onLeave:vn,onAfterLeave:vn,onLeaveCancelled:vn,onBeforeAppear:vn,onAppear:vn,onAfterAppear:vn,onAppearCancelled:vn},mn=e=>{const t=e.subTree;return t.component?mn(t.component):t};function bn(e){let t=e[0];if(e.length>1){let n=!1;for(const o of e)if(o.type!==rr){t=o,n=!0;break}}return t}const yn={name:"BaseTransition",props:gn,setup(e,{slots:t}){const n=Tr(),o=hn();return()=>{const r=t.default&&Sn(t.default(),!0);if(!r||!r.length)return;const i=bn(r),s=pt(e),{mode:l}=s;if(o.isLeaving)return Cn(i);const a=An(i);if(!a)return Cn(i);let c=_n(a,s,o,n,(e=>c=e));a.type!==rr&&wn(a,c);let u=n.subTree&&An(n.subTree);if(u&&u.type!==rr&&!vr(a,u)&&mn(n).type!==rr){let e=_n(u,s,o,n);if(wn(u,e),"out-in"===l&&a.type!==rr)return o.isLeaving=!0,e.afterLeave=()=>{o.isLeaving=!1,8&n.job.flags||n.update(),delete e.afterLeave,u=void 0},Cn(i);"in-out"===l&&a.type!==rr?e.delayLeave=(e,t,n)=>{xn(o,u)[String(u.key)]=u,e[pn]=()=>{t(),e[pn]=void 0,delete c.delayedLeave,u=void 0},c.delayedLeave=()=>{n(),delete c.delayedLeave,u=void 0}}:u=void 0}else u&&(u=void 0);return i}}};function xn(e,t){const{leavingVNodes:n}=e;let o=n.get(t.type);return o||(o=Object.create(null),n.set(t.type,o)),o}function _n(e,t,n,o,r){const{appear:i,mode:s,persisted:l=!1,onBeforeEnter:a,onEnter:c,onAfterEnter:u,onEnterCancelled:d,onBeforeLeave:f,onLeave:h,onAfterLeave:v,onLeaveCancelled:g,onBeforeAppear:m,onAppear:b,onAfterAppear:y,onAppearCancelled:x}=t,_=String(e.key),C=xn(n,e),A=(e,t)=>{e&&kt(e,o,9,t)},w=(e,t)=>{const n=t[1];A(e,t),p(e)?e.every((e=>e.length<=1))&&n():e.length<=1&&n()},S={mode:s,persisted:l,beforeEnter(t){let o=a;if(!n.isMounted){if(!i)return;o=m||a}t[pn]&&t[pn](!0);const r=C[_];r&&vr(e,r)&&r.el[pn]&&r.el[pn](),A(o,[t])},enter(e){let t=c,o=u,r=d;if(!n.isMounted){if(!i)return;t=b||c,o=y||u,r=x||d}let s=!1;const l=e[fn]=t=>{s||(s=!0,A(t?r:o,[e]),S.delayedLeave&&S.delayedLeave(),e[fn]=void 0)};t?w(t,[e,l]):l()},leave(t,o){const r=String(e.key);if(t[fn]&&t[fn](!0),n.isUnmounting)return o();A(f,[t]);let i=!1;const s=t[pn]=n=>{i||(i=!0,o(),A(n?g:v,[t]),t[pn]=void 0,C[r]===e&&delete C[r])};C[r]=e,h?w(h,[t,s]):s()},clone(e){const i=_n(e,t,n,o,r);return r&&r(i),i}};return S}function Cn(e){if(Tn(e))return(e=xr(e)).children=null,e}function An(e){if(!Tn(e))return dn(e.type)&&e.children?bn(e.children):e;const{shapeFlag:t,children:n}=e;if(n){if(16&t)return n[0];if(32&t&&v(n.default))return n.default()}}function wn(e,t){6&e.shapeFlag&&e.component?(e.transition=t,wn(e.component.subTree,t)):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Sn(e,t=!1,n){let o=[],r=0;for(let i=0;i<e.length;i++){let s=e[i];const l=null==n?s.key:String(n)+String(null!=s.key?s.key:i);s.type===nr?(128&s.patchFlag&&r++,o=o.concat(Sn(s.children,t,l))):(t||s.type!==rr)&&o.push(null!=l?xr(s,{key:l}):s)}if(r>1)for(let e=0;e<o.length;e++)o[e].patchFlag=-2;return o}function $n(e,t){return v(e)?(()=>a({name:e.name},t,{setup:e}))():e}function En(e){e.ids=[e.ids[0]+e.ids[2]+++"-",0,0]}function On(e,n,o,r,i=!1){if(p(e))return void e.forEach(((e,t)=>On(e,n&&(p(n)?n[t]:n),o,r,i)));if(Pn(r)&&!i)return void(512&r.shapeFlag&&r.type.__asyncResolved&&r.component.subTree.component&&On(e,n,o,r.component.subTree));const s=4&r.shapeFlag?Ur(r.component):r.el,l=i?null:s,{i:a,r:u}=e,f=n&&n.r,h=a.refs===t?a.refs={}:a.refs,m=a.setupState,b=pt(m),y=m===t?()=>!1:e=>d(b,e);if(null!=f&&f!==u&&(g(f)?(h[f]=null,y(f)&&(m[f]=null)):vt(f)&&(f.value=null)),v(u))Tt(u,a,12,[l,h]);else{const t=g(u),n=vt(u);if(t||n){const r=()=>{if(e.f){const n=t?y(u)?m[u]:h[u]:u.value;i?p(n)&&c(n,s):p(n)?n.includes(s)||n.push(s):t?(h[u]=[s],y(u)&&(m[u]=h[u])):(u.value=[s],e.k&&(h[e.k]=u.value))}else t?(h[u]=l,y(u)&&(m[u]=l)):n&&(u.value=l,e.k&&(h[e.k]=l))};l?(r.id=-1,Fo(r,o)):r()}}}M().requestIdleCallback,M().cancelIdleCallback;const Pn=e=>!!e.type.__asyncLoader,Tn=e=>e.type.__isKeepAlive;function kn(e,t){Fn(e,"a",t)}function jn(e,t){Fn(e,"da",t)}function Fn(e,t,n=Pr){const o=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(Bn(t,o,n),n){let e=n.parent;for(;e&&e.parent;)Tn(e.parent.vnode)&&Dn(o,t,n,e),e=e.parent}}function Dn(e,t,n,o){const r=Bn(t,e,o,!0);Un((()=>{c(o[t],r)}),n)}function Bn(e,t,n=Pr,o=!1){if(n){const r=n[e]||(n[e]=[]),i=t.__weh||(t.__weh=(...o)=>{me();const r=Fr(n),i=kt(t,n,e,o);return r(),be(),i});return o?r.unshift(i):r.push(i),i}}RegExp,RegExp;const Rn=e=>(t,n=Pr)=>{Ir&&"sp"!==e||Bn(e,((...e)=>t(...e)),n)},zn=Rn("bm"),In=Rn("m"),Mn=Rn("bu"),Ln=Rn("u"),Hn=Rn("bum"),Un=Rn("um"),Vn=Rn("sp"),Nn=Rn("rtg"),Wn=Rn("rtc");function Gn(e,t=Pr){Bn("ec",e,t)}const qn=Symbol.for("v-ndc"),Yn=e=>e?Br(e)?Ur(e):Yn(e.parent):null,Kn=a(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Yn(e.parent),$root:e=>Yn(e.root),$host:e=>e.ce,$emit:e=>e.emit,$options:e=>__VUE_OPTIONS_API__?no(e):e.type,$forceUpdate:e=>e.f||(e.f=()=>{Ht(e.update)}),$nextTick:e=>e.n||(e.n=Lt.bind(e.proxy)),$watch:e=>__VUE_OPTIONS_API__?Wo.bind(e):r}),Jn=(e,n)=>e!==t&&!e.__isScriptSetup&&d(e,n),Qn={get({_:e},n){if("__v_skip"===n)return!0;const{ctx:o,setupState:r,data:i,props:s,accessCache:l,type:a,appContext:c}=e;let u;if("$"!==n[0]){const a=l[n];if(void 0!==a)switch(a){case 1:return r[n];case 2:return i[n];case 4:return o[n];case 3:return s[n]}else{if(Jn(r,n))return l[n]=1,r[n];if(i!==t&&d(i,n))return l[n]=2,i[n];if((u=e.propsOptions[0])&&d(u,n))return l[n]=3,s[n];if(o!==t&&d(o,n))return l[n]=4,o[n];__VUE_OPTIONS_API__&&!Zn||(l[n]=0)}}const p=Kn[n];let f,h;return p?("$attrs"===n&&Oe(e.attrs,0,""),p(e)):(f=a.__cssModules)&&(f=f[n])?f:o!==t&&d(o,n)?(l[n]=4,o[n]):(h=c.config.globalProperties,d(h,n)?h[n]:void 0)},set({_:e},n,o){const{data:r,setupState:i,ctx:s}=e;return Jn(i,n)?(i[n]=o,!0):r!==t&&d(r,n)?(r[n]=o,!0):!(d(e.props,n)||"$"===n[0]&&n.slice(1)in e||(s[n]=o,0))},has({_:{data:e,setupState:n,accessCache:o,ctx:r,appContext:i,propsOptions:s}},l){let a;return!!o[l]||e!==t&&d(e,l)||Jn(n,l)||(a=s[0])&&d(a,l)||d(r,l)||d(Kn,l)||d(i.config.globalProperties,l)},defineProperty(e,t,n){return null!=n.get?e._.accessCache[t]=0:d(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)}};function Xn(e){return p(e)?e.reduce(((e,t)=>(e[t]=null,e)),{}):e}let Zn=!0;function eo(e,t,n){kt(p(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,n)}function to(e,t,n,o){let r=o.includes(".")?Go(n,o):()=>n[o];if(g(e)){const n=t[e];v(n)&&Vo(r,n)}else if(v(e))Vo(r,e.bind(n));else if(b(e))if(p(e))e.forEach((e=>to(e,t,n,o)));else{const o=v(e.handler)?e.handler.bind(n):t[e.handler];v(o)&&Vo(r,o,e)}}function no(e){const t=e.type,{mixins:n,extends:o}=t,{mixins:r,optionsCache:i,config:{optionMergeStrategies:s}}=e.appContext,l=i.get(t);let a;return l?a=l:r.length||n||o?(a={},r.length&&r.forEach((e=>oo(a,e,s,!0))),oo(a,t,s)):a=t,b(t)&&i.set(t,a),a}function oo(e,t,n,o=!1){const{mixins:r,extends:i}=t;i&&oo(e,i,n,!0),r&&r.forEach((t=>oo(e,t,n,!0)));for(const r in t)if(o&&"expose"===r);else{const o=ro[r]||n&&n[r];e[r]=o?o(e[r],t[r]):t[r]}return e}const ro={data:io,props:co,emits:co,methods:ao,computed:ao,beforeCreate:lo,created:lo,beforeMount:lo,mounted:lo,beforeUpdate:lo,updated:lo,beforeDestroy:lo,beforeUnmount:lo,destroyed:lo,unmounted:lo,activated:lo,deactivated:lo,errorCaptured:lo,serverPrefetch:lo,components:ao,directives:ao,watch:function(e,t){if(!e)return t;if(!t)return e;const n=a(Object.create(null),e);for(const o in t)n[o]=lo(e[o],t[o]);return n},provide:io,inject:function(e,t){return ao(so(e),so(t))}};function io(e,t){return t?e?function(){return a(v(e)?e.call(this,this):e,v(t)?t.call(this,this):t)}:t:e}function so(e){if(p(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function lo(e,t){return e?[...new Set([].concat(e,t))]:t}function ao(e,t){return e?a(Object.create(null),e,t):t}function co(e,t){return e?p(e)&&p(t)?[...new Set([...e,...t])]:a(Object.create(null),Xn(e),Xn(null!=t?t:{})):t}function uo(){return{app:null,config:{isNativeTag:i,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let po=0;function fo(e,t){return function(n,o=null){v(n)||(n=a({},n)),null==o||b(o)||(o=null);const r=uo(),i=new WeakSet,s=[];let l=!1;const c=r.app={_uid:po++,_component:n,_props:o,_container:null,_context:r,_instance:null,version:Wr,get config(){return r.config},set config(e){},use:(e,...t)=>(i.has(e)||(e&&v(e.install)?(i.add(e),e.install(c,...t)):v(e)&&(i.add(e),e(c,...t))),c),mixin:e=>(__VUE_OPTIONS_API__&&(r.mixins.includes(e)||r.mixins.push(e)),c),component:(e,t)=>t?(r.components[e]=t,c):r.components[e],directive:(e,t)=>t?(r.directives[e]=t,c):r.directives[e],mount(i,s,a){if(!l){const u=c._ceVNode||yr(n,o);return u.appContext=r,!0===a?a="svg":!1===a&&(a=void 0),s&&t?t(u,i):e(u,i,a),l=!0,c._container=i,i.__vue_app__=c,__VUE_PROD_DEVTOOLS__&&(c._instance=u.component,function(e,t){Jt("app:init",e,t,{Fragment:nr,Text:or,Comment:rr,Static:ir})}(c,Wr)),Ur(u.component)}},onUnmount(e){s.push(e)},unmount(){l&&(kt(s,c._instance,16),e(null,c._container),__VUE_PROD_DEVTOOLS__&&(c._instance=null,function(e){Jt("app:unmount",e)}(c)),delete c._container.__vue_app__)},provide:(e,t)=>(r.provides[e]=t,c),runWithContext(e){const t=ho;ho=c;try{return e()}finally{ho=t}}};return c}}let ho=null;function vo(e,t){if(Pr){let n=Pr.provides;const o=Pr.parent&&Pr.parent.provides;o===n&&(n=Pr.provides=Object.create(o)),n[e]=t}}function go(e,t,n=!1){const o=Pr||on;if(o||ho){const r=ho?ho._context.provides:o?null==o.parent?o.vnode.appContext&&o.vnode.appContext.provides:o.parent.provides:void 0;if(r&&e in r)return r[e];if(arguments.length>1)return n&&v(t)?t.call(o&&o.proxy):t}}const mo={},bo=()=>Object.create(mo),yo=e=>Object.getPrototypeOf(e)===mo;function xo(e,n,o,r){const[i,s]=e.propsOptions;let l,a=!1;if(n)for(let t in n){if(S(t))continue;const c=n[t];let u;i&&d(i,u=O(t))?s&&s.includes(u)?(l||(l={}))[u]=c:o[u]=c:Jo(e.emitsOptions,t)||t in r&&c===r[t]||(r[t]=c,a=!0)}if(s){const n=pt(o),r=l||t;for(let t=0;t<s.length;t++){const l=s[t];o[l]=_o(i,n,l,r[l],e,!d(r,l))}}return a}function _o(e,t,n,o,r,i){const s=e[n];if(null!=s){const e=d(s,"default");if(e&&void 0===o){const e=s.default;if(s.type!==Function&&!s.skipFactory&&v(e)){const{propsDefaults:i}=r;if(n in i)o=i[n];else{const s=Fr(r);o=i[n]=e.call(null,t),s()}}else o=e;r.ce&&r.ce._setProp(n,o)}s[0]&&(i&&!e?o=!1:!s[1]||""!==o&&o!==T(n)||(o=!0))}return o}const Co=new WeakMap;function Ao(e,n,r=!1){const i=__VUE_OPTIONS_API__&&r?Co:n.propsCache,s=i.get(e);if(s)return s;const l=e.props,c={},u=[];let f=!1;if(__VUE_OPTIONS_API__&&!v(e)){const t=e=>{f=!0;const[t,o]=Ao(e,n,!0);a(c,t),o&&u.push(...o)};!r&&n.mixins.length&&n.mixins.forEach(t),e.extends&&t(e.extends),e.mixins&&e.mixins.forEach(t)}if(!l&&!f)return b(e)&&i.set(e,o),o;if(p(l))for(let e=0;e<l.length;e++){const n=O(l[e]);wo(n)&&(c[n]=t)}else if(l)for(const e in l){const t=O(e);if(wo(t)){const n=l[e],o=c[t]=p(n)||v(n)?{type:n}:a({},n),r=o.type;let i=!1,s=!0;if(p(r))for(let e=0;e<r.length;++e){const t=r[e],n=v(t)&&t.name;if("Boolean"===n){i=!0;break}"String"===n&&(s=!1)}else i=v(r)&&"Boolean"===r.name;o[0]=i,o[1]=s,(i||d(o,"default"))&&u.push(t)}}const h=[c,u];return b(e)&&i.set(e,h),h}function wo(e){return"$"!==e[0]&&!S(e)}const So=e=>"_"===e[0]||"$stable"===e,$o=e=>p(e)?e.map(Ar):[Ar(e)],Eo=(e,t,n)=>{if(t._n)return t;const o=ln(((...e)=>$o(t(...e))),n);return o._c=!1,o},Oo=(e,t,n)=>{const o=e._ctx;for(const n in e){if(So(n))continue;const r=e[n];if(v(r))t[n]=Eo(0,r,o);else if(null!=r){const e=$o(r);t[n]=()=>e}}},Po=(e,t)=>{const n=$o(t);e.slots.default=()=>n},To=(e,t,n)=>{for(const o in t)(n||"_"!==o)&&(e[o]=t[o])},ko=(e,t,n)=>{const o=e.slots=bo();if(32&e.vnode.shapeFlag){const e=t._;e?(To(o,t,n),n&&B(o,"_",e,!0)):Oo(t,o)}else t&&Po(e,t)},jo=(e,n,o)=>{const{vnode:r,slots:i}=e;let s=!0,l=t;if(32&r.shapeFlag){const e=n._;e?o&&1===e?s=!1:To(i,n,o):(s=!n.$stable,Oo(n,i)),l=n}else n&&(Po(e,n),l={default:1});if(s)for(const e in i)So(e)||null!=l[e]||delete i[e]},Fo=function(e,t){t&&t.pendingBranch?p(e)?t.effects.push(...e):t.effects.push(e):(n=e,p(n)?Bt.push(...n):Rt&&-1===n.id?Rt.splice(zt+1,0,n):1&n.flags||(Bt.push(n),n.flags|=1),Ut());var n};function Do(e,n){"boolean"!=typeof __VUE_OPTIONS_API__&&(M().__VUE_OPTIONS_API__=!0),"boolean"!=typeof __VUE_PROD_DEVTOOLS__&&(M().__VUE_PROD_DEVTOOLS__=!1),"boolean"!=typeof __VUE_PROD_HYDRATION_MISMATCH_DETAILS__&&(M().__VUE_PROD_HYDRATION_MISMATCH_DETAILS__=!1);const i=M();i.__VUE__=!0,__VUE_PROD_DEVTOOLS__&&Qt(i.__VUE_DEVTOOLS_GLOBAL_HOOK__,i);const{insert:s,remove:l,patchProp:a,createElement:c,createText:u,createComment:p,setText:f,setElementText:h,parentNode:v,nextSibling:g,setScopeId:m=r,insertStaticContent:b}=e,x=(e,t,n,o=null,r=null,i=null,s=void 0,l=null,a=!!t.dynamicChildren)=>{if(e===t)return;e&&!vr(e,t)&&(o=X(e),q(e,r,i,!0),e=null),-2===t.patchFlag&&(a=!1,t.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=t;switch(c){case or:_(e,t,n,o);break;case rr:C(e,t,n,o);break;case ir:null==e&&A(t,n,o,s);break;case nr:R(e,t,n,o,r,i,s,l,a);break;default:1&d?w(e,t,n,o,r,i,s,l,a):6&d?z(e,t,n,o,r,i,s,l,a):(64&d||128&d)&&c.process(e,t,n,o,r,i,s,l,a,oe)}null!=u&&r&&On(u,e&&e.ref,i,t||e,!t)},_=(e,t,n,o)=>{if(null==e)s(t.el=u(t.children),n,o);else{const n=t.el=e.el;t.children!==e.children&&f(n,t.children)}},C=(e,t,n,o)=>{null==e?s(t.el=p(t.children||""),n,o):t.el=e.el},A=(e,t,n,o)=>{[e.el,e.anchor]=b(e.children,t,n,o,e.el,e.anchor)},w=(e,t,n,o,r,i,s,l,a)=>{"svg"===t.type?s="svg":"math"===t.type&&(s="mathml"),null==e?$(t,n,o,r,i,s,l,a):k(e,t,r,i,s,l,a)},$=(e,t,n,o,r,i,l,u)=>{let d,p;const{props:f,shapeFlag:v,transition:g,dirs:m}=e;if(d=e.el=c(e.type,i,f&&f.is,f),8&v?h(d,e.children):16&v&&P(e.children,d,null,o,r,Bo(e,i),l,u),m&&cn(e,null,o,"created"),E(d,e,e.scopeId,l,o),f){for(const e in f)"value"===e||S(e)||a(d,e,null,f[e],i,o);"value"in f&&a(d,"value",null,f.value,i),(p=f.onVnodeBeforeMount)&&$r(p,o,e)}__VUE_PROD_DEVTOOLS__&&(B(d,"__vnode",e,!0),B(d,"__vueParentComponent",o,!0)),m&&cn(e,null,o,"beforeMount");const b=function(e,t){return(!e||e&&!e.pendingBranch)&&t&&!t.persisted}(r,g);b&&g.beforeEnter(d),s(d,t,n),((p=f&&f.onVnodeMounted)||b||m)&&Fo((()=>{p&&$r(p,o,e),b&&g.enter(d),m&&cn(e,null,o,"mounted")}),r)},E=(e,t,n,o,r)=>{if(n&&m(e,n),o)for(let t=0;t<o.length;t++)m(e,o[t]);if(r){let n=r.subTree;if(t===n||tr(n.type)&&(n.ssContent===t||n.ssFallback===t)){const t=r.vnode;E(e,t,t.scopeId,t.slotScopeIds,r.parent)}}},P=(e,t,n,o,r,i,s,l,a=0)=>{for(let c=a;c<e.length;c++){const a=e[c]=l?wr(e[c]):Ar(e[c]);x(null,a,t,n,o,r,i,s,l)}},k=(e,n,o,r,i,s,l)=>{const c=n.el=e.el;__VUE_PROD_DEVTOOLS__&&(c.__vnode=n);let{patchFlag:u,dynamicChildren:d,dirs:p}=n;u|=16&e.patchFlag;const f=e.props||t,v=n.props||t;let g;if(o&&Ro(o,!1),(g=v.onVnodeBeforeUpdate)&&$r(g,o,n,e),p&&cn(n,e,o,"beforeUpdate"),o&&Ro(o,!0),(f.innerHTML&&null==v.innerHTML||f.textContent&&null==v.textContent)&&h(c,""),d?j(e.dynamicChildren,d,c,o,r,Bo(n,i),s):l||V(e,n,c,null,o,r,Bo(n,i),s,!1),u>0){if(16&u)F(c,f,v,o,i);else if(2&u&&f.class!==v.class&&a(c,"class",null,v.class,i),4&u&&a(c,"style",f.style,v.style,i),8&u){const e=n.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t],r=f[n],s=v[n];s===r&&"value"!==n||a(c,n,r,s,i,o)}}1&u&&e.children!==n.children&&h(c,n.children)}else l||null!=d||F(c,f,v,o,i);((g=v.onVnodeUpdated)||p)&&Fo((()=>{g&&$r(g,o,n,e),p&&cn(n,e,o,"updated")}),r)},j=(e,t,n,o,r,i,s)=>{for(let l=0;l<t.length;l++){const a=e[l],c=t[l],u=a.el&&(a.type===nr||!vr(a,c)||70&a.shapeFlag)?v(a.el):n;x(a,c,u,null,o,r,i,s,!0)}},F=(e,n,o,r,i)=>{if(n!==o){if(n!==t)for(const t in n)S(t)||t in o||a(e,t,n[t],null,i,r);for(const t in o){if(S(t))continue;const s=o[t],l=n[t];s!==l&&"value"!==t&&a(e,t,l,s,i,r)}"value"in o&&a(e,"value",n.value,o.value,i)}},R=(e,t,n,o,r,i,l,a,c)=>{const d=t.el=e?e.el:u(""),p=t.anchor=e?e.anchor:u("");let{patchFlag:f,dynamicChildren:h,slotScopeIds:v}=t;v&&(a=a?a.concat(v):v),null==e?(s(d,n,o),s(p,n,o),P(t.children||[],n,p,r,i,l,a,c)):f>0&&64&f&&h&&e.dynamicChildren?(j(e.dynamicChildren,h,n,r,i,l,a),(null!=t.key||r&&t===r.subTree)&&zo(e,t,!0)):V(e,t,n,p,r,i,l,a,c)},z=(e,t,n,o,r,i,s,l,a)=>{t.slotScopeIds=l,null==e?512&t.shapeFlag?r.ctx.activate(t,n,o,s,a):I(t,n,o,r,i,s,a):L(e,t,a)},I=(e,n,o,r,i,s,l)=>{const a=e.component=function(e,n,o){const r=e.type,i=(n?n.appContext:e.appContext)||Er,s={uid:Or++,vnode:e,type:r,parent:n,appContext:i,root:null,next:null,subTree:null,effect:null,update:null,job:null,scope:new ee(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:n?n.provides:Object.create(i.provides),ids:n?n.ids:["",0,0],accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Ao(r,i),emitsOptions:Ko(r,i),emit:null,emitted:null,propsDefaults:t,inheritAttrs:r.inheritAttrs,ctx:t,data:t,props:t,attrs:t,slots:t,refs:t,setupState:t,setupContext:null,suspense:o,suspenseId:o?o.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return s.ctx={_:s},s.root=n?n.root:s,s.emit=Yo.bind(null,s),e.ce&&e.ce(s),s}(e,r,i);if(Tn(e)&&(a.ctx.renderer=oe),function(e,t=!1,n=!1){t&&jr(t);const{props:o,children:r}=e.vnode,i=Br(e);(function(e,t,n,o=!1){const r={},i=bo();e.propsDefaults=Object.create(null),xo(e,t,r,i);for(const t in e.propsOptions[0])t in r||(r[t]=void 0);n?e.props=o?r:lt(r,!1,qe,Ze,nt):e.type.props?e.props=r:e.props=i,e.attrs=i})(e,o,i,t),ko(e,r,n);const s=i?function(e,t){const n=e.type;e.accessCache=Object.create(null),e.proxy=new Proxy(e.ctx,Qn);const{setup:o}=n;if(o){me();const n=e.setupContext=o.length>1?function(e){const t=t=>{e.exposed=t||{}};return{attrs:new Proxy(e.attrs,Hr),slots:e.slots,emit:e.emit,expose:t}}(e):null,r=Fr(e),i=Tt(o,e,0,[e.props,n]),s=y(i);if(be(),r(),!s&&!e.sp||Pn(e)||En(e),s){if(i.then(Dr,Dr),t)return i.then((n=>{Mr(e,n,t)})).catch((t=>{jt(t,e,0)}));e.asyncDep=i}else Mr(e,i,t)}else Lr(e,t)}(e,t):void 0;t&&jr(!1)}(a,!1,l),a.asyncDep){if(i&&i.registerDep(a,H,l),!e.el){const e=a.subTree=yr(rr);C(null,e,n,o)}}else H(a,e,n,o,i,s,l)},L=(e,t,n)=>{const o=t.component=e.component;if(function(e,t,n){const{props:o,children:r,component:i}=e,{props:s,children:l,patchFlag:a}=t,c=i.emitsOptions;if(t.dirs||t.transition)return!0;if(!(n&&a>=0))return!(!r&&!l||l&&l.$stable)||o!==s&&(o?!s||er(o,s,c):!!s);if(1024&a)return!0;if(16&a)return o?er(o,s,c):!!s;if(8&a){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(s[n]!==o[n]&&!Jo(c,n))return!0}}return!1}(e,t,n)){if(o.asyncDep&&!o.asyncResolved)return void U(o,t,n);o.next=t,o.update()}else t.el=e.el,o.vnode=t},H=(e,t,n,o,r,i,s)=>{const l=()=>{if(e.isMounted){let{next:t,bu:n,u:o,parent:a,vnode:c}=e;{const n=Io(e);if(n)return t&&(t.el=c.el,U(e,t,s)),void n.asyncDep.then((()=>{e.isUnmounted||l()}))}let u,d=t;Ro(e,!1),t?(t.el=c.el,U(e,t,s)):t=c,n&&D(n),(u=t.props&&t.props.onVnodeBeforeUpdate)&&$r(u,a,t,c),Ro(e,!0);const p=Qo(e),f=e.subTree;e.subTree=p,x(f,p,v(f.el),X(f),e,r,i),t.el=p.el,null===d&&function({vnode:e,parent:t},n){for(;t;){const o=t.subTree;if(o.suspense&&o.suspense.activeBranch===e&&(o.el=e.el),o!==e)break;(e=t.vnode).el=n,t=t.parent}}(e,p.el),o&&Fo(o,r),(u=t.props&&t.props.onVnodeUpdated)&&Fo((()=>$r(u,a,t,c)),r),__VUE_PROD_DEVTOOLS__&&Zt(e)}else{let s;const{el:l,props:a}=t,{bm:c,m:u,parent:d,root:p,type:f}=e,h=Pn(t);if(Ro(e,!1),c&&D(c),!h&&(s=a&&a.onVnodeBeforeMount)&&$r(s,d,t),Ro(e,!0),l&&ie){const t=()=>{e.subTree=Qo(e),ie(l,e.subTree,e,r,null)};h&&f.__asyncHydrate?f.__asyncHydrate(l,e,t):t()}else{p.ce&&p.ce._injectChildStyle(f);const s=e.subTree=Qo(e);x(null,s,n,o,e,r,i),t.el=s.el}if(u&&Fo(u,r),!h&&(s=a&&a.onVnodeMounted)){const e=t;Fo((()=>$r(s,d,e)),r)}(256&t.shapeFlag||d&&Pn(d.vnode)&&256&d.vnode.shapeFlag)&&e.a&&Fo(e.a,r),e.isMounted=!0,__VUE_PROD_DEVTOOLS__&&Xt(e),t=n=o=null}};e.scope.on();const a=e.effect=new ne(l);e.scope.off();const c=e.update=a.run.bind(a),u=e.job=a.runIfDirty.bind(a);u.i=e,u.id=e.uid,a.scheduler=()=>Ht(u),Ro(e,!0),c()},U=(e,t,n)=>{t.component=e;const o=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,o){const{props:r,attrs:i,vnode:{patchFlag:s}}=e,l=pt(r),[a]=e.propsOptions;let c=!1;if(!(o||s>0)||16&s){let o;xo(e,t,r,i)&&(c=!0);for(const i in l)t&&(d(t,i)||(o=T(i))!==i&&d(t,o))||(a?!n||void 0===n[i]&&void 0===n[o]||(r[i]=_o(a,l,i,void 0,e,!0)):delete r[i]);if(i!==l)for(const e in i)t&&d(t,e)||(delete i[e],c=!0)}else if(8&s){const n=e.vnode.dynamicProps;for(let o=0;o<n.length;o++){let s=n[o];if(Jo(e.emitsOptions,s))continue;const u=t[s];if(a)if(d(i,s))u!==i[s]&&(i[s]=u,c=!0);else{const t=O(s);r[t]=_o(a,l,t,u,e,!1)}else u!==i[s]&&(i[s]=u,c=!0)}}c&&Pe(e.attrs,"set","")}(e,t.props,o,n),jo(e,t.children,n),me(),Vt(e),be()},V=(e,t,n,o,r,i,s,l,a=!1)=>{const c=e&&e.children,u=e?e.shapeFlag:0,d=t.children,{patchFlag:p,shapeFlag:f}=t;if(p>0){if(128&p)return void W(c,d,n,o,r,i,s,l,a);if(256&p)return void N(c,d,n,o,r,i,s,l,a)}8&f?(16&u&&Q(c,r,i),d!==c&&h(n,d)):16&u?16&f?W(c,d,n,o,r,i,s,l,a):Q(c,r,i,!0):(8&u&&h(n,""),16&f&&P(d,n,o,r,i,s,l,a))},N=(e,t,n,r,i,s,l,a,c)=>{t=t||o;const u=(e=e||o).length,d=t.length,p=Math.min(u,d);let f;for(f=0;f<p;f++){const o=t[f]=c?wr(t[f]):Ar(t[f]);x(e[f],o,n,null,i,s,l,a,c)}u>d?Q(e,i,s,!0,!1,p):P(t,n,r,i,s,l,a,c,p)},W=(e,t,n,r,i,s,l,a,c)=>{let u=0;const d=t.length;let p=e.length-1,f=d-1;for(;u<=p&&u<=f;){const o=e[u],r=t[u]=c?wr(t[u]):Ar(t[u]);if(!vr(o,r))break;x(o,r,n,null,i,s,l,a,c),u++}for(;u<=p&&u<=f;){const o=e[p],r=t[f]=c?wr(t[f]):Ar(t[f]);if(!vr(o,r))break;x(o,r,n,null,i,s,l,a,c),p--,f--}if(u>p){if(u<=f){const e=f+1,o=e<d?t[e].el:r;for(;u<=f;)x(null,t[u]=c?wr(t[u]):Ar(t[u]),n,o,i,s,l,a,c),u++}}else if(u>f)for(;u<=p;)q(e[u],i,s,!0),u++;else{const h=u,v=u,g=new Map;for(u=v;u<=f;u++){const e=t[u]=c?wr(t[u]):Ar(t[u]);null!=e.key&&g.set(e.key,u)}let m,b=0;const y=f-v+1;let _=!1,C=0;const A=new Array(y);for(u=0;u<y;u++)A[u]=0;for(u=h;u<=p;u++){const o=e[u];if(b>=y){q(o,i,s,!0);continue}let r;if(null!=o.key)r=g.get(o.key);else for(m=v;m<=f;m++)if(0===A[m-v]&&vr(o,t[m])){r=m;break}void 0===r?q(o,i,s,!0):(A[r-v]=u+1,r>=C?C=r:_=!0,x(o,t[r],n,null,i,s,l,a,c),b++)}const w=_?function(e){const t=e.slice(),n=[0];let o,r,i,s,l;const a=e.length;for(o=0;o<a;o++){const a=e[o];if(0!==a){if(r=n[n.length-1],e[r]<a){t[o]=r,n.push(o);continue}for(i=0,s=n.length-1;i<s;)l=i+s>>1,e[n[l]]<a?i=l+1:s=l;a<e[n[i]]&&(i>0&&(t[o]=n[i-1]),n[i]=o)}}for(i=n.length,s=n[i-1];i-- >0;)n[i]=s,s=t[s];return n}(A):o;for(m=w.length-1,u=y-1;u>=0;u--){const e=v+u,o=t[e],p=e+1<d?t[e+1].el:r;0===A[u]?x(null,o,n,p,i,s,l,a,c):_&&(m<0||u!==w[m]?G(o,n,p,2):m--)}}},G=(e,t,n,o,r=null)=>{const{el:i,type:l,transition:a,children:c,shapeFlag:u}=e;if(6&u)G(e.component.subTree,t,n,o);else if(128&u)e.suspense.move(t,n,o);else if(64&u)l.move(e,t,n,oe);else if(l!==nr)if(l!==ir)if(2!==o&&1&u&&a)if(0===o)a.beforeEnter(i),s(i,t,n),Fo((()=>a.enter(i)),r);else{const{leave:e,delayLeave:o,afterLeave:r}=a,l=()=>s(i,t,n),c=()=>{e(i,(()=>{l(),r&&r()}))};o?o(i,l,c):c()}else s(i,t,n);else(({el:e,anchor:t},n,o)=>{let r;for(;e&&e!==t;)r=g(e),s(e,n,o),e=r;s(t,n,o)})(e,t,n);else{s(i,t,n);for(let e=0;e<c.length;e++)G(c[e],t,n,o);s(e.anchor,t,n)}},q=(e,t,n,o=!1,r=!1)=>{const{type:i,props:s,ref:l,children:a,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:p,cacheIndex:f}=e;if(-2===d&&(r=!1),null!=l&&On(l,null,n,e,!0),null!=f&&(t.renderCache[f]=void 0),256&u)return void t.ctx.deactivate(e);const h=1&u&&p,v=!Pn(e);let g;if(v&&(g=s&&s.onVnodeBeforeUnmount)&&$r(g,t,e),6&u)J(e.component,n,o);else{if(128&u)return void e.suspense.unmount(n,o);h&&cn(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,n,oe,o):c&&!c.hasOnce&&(i!==nr||d>0&&64&d)?Q(c,t,n,!1,!0):(i===nr&&384&d||!r&&16&u)&&Q(a,t,n),o&&Y(e)}(v&&(g=s&&s.onVnodeUnmounted)||h)&&Fo((()=>{g&&$r(g,t,e),h&&cn(e,null,t,"unmounted")}),n)},Y=e=>{const{type:t,el:n,anchor:o,transition:r}=e;if(t===nr)return void K(n,o);if(t===ir)return void(({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=g(e),l(e),e=n;l(t)})(e);const i=()=>{l(n),r&&!r.persisted&&r.afterLeave&&r.afterLeave()};if(1&e.shapeFlag&&r&&!r.persisted){const{leave:t,delayLeave:o}=r,s=()=>t(n,i);o?o(e.el,i,s):s()}else i()},K=(e,t)=>{let n;for(;e!==t;)n=g(e),l(e),e=n;l(t)},J=(e,t,n)=>{const{bum:o,scope:r,job:i,subTree:s,um:l,m:a,a:c}=e;Mo(a),Mo(c),o&&D(o),r.stop(),i&&(i.flags|=8,q(s,e,t,n)),l&&Fo(l,t),Fo((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve()),__VUE_PROD_DEVTOOLS__&&tn(e)},Q=(e,t,n,o=!1,r=!1,i=0)=>{for(let s=i;s<e.length;s++)q(e[s],t,n,o,r)},X=e=>{if(6&e.shapeFlag)return X(e.component.subTree);if(128&e.shapeFlag)return e.suspense.next();const t=g(e.anchor||e.el),n=t&&t[un];return n?g(n):t};let Z=!1;const te=(e,t,n)=>{null==e?t._vnode&&q(t._vnode,null,null,!0):x(t._vnode||null,e,t,null,null,null,n),t._vnode=e,Z||(Z=!0,Vt(),Nt(),Z=!1)},oe={p:x,um:q,m:G,r:Y,mt:I,mc:P,pc:V,pbc:j,n:X,o:e};let re,ie;return n&&([re,ie]=n(oe)),{render:te,hydrate:re,createApp:fo(te,re)}}function Bo({type:e,props:t},n){return"svg"===n&&"foreignObject"===e||"mathml"===n&&"annotation-xml"===e&&t&&t.encoding&&t.encoding.includes("html")?void 0:n}function Ro({effect:e,job:t},n){n?(e.flags|=32,t.flags|=4):(e.flags&=-33,t.flags&=-5)}function zo(e,t,n=!1){const o=e.children,r=t.children;if(p(o)&&p(r))for(let e=0;e<o.length;e++){const t=o[e];let i=r[e];1&i.shapeFlag&&!i.dynamicChildren&&((i.patchFlag<=0||32===i.patchFlag)&&(i=r[e]=wr(r[e]),i.el=t.el),n||-2===i.patchFlag||zo(t,i)),i.type===or&&(i.el=t.el)}}function Io(e){const t=e.subTree.component;if(t)return t.asyncDep&&!t.asyncResolved?t:Io(t)}function Mo(e){if(e)for(let t=0;t<e.length;t++)e[t].flags|=8}const Lo=Symbol.for("v-scx"),Ho=()=>go(Lo);function Uo(e,t){return No(e,null,t)}function Vo(e,t,n){return No(e,t,n)}function No(e,n,o=t){const{immediate:i,deep:s,flush:l,once:u}=o,d=a({},o),f=n&&i||!n&&"post"!==l;let h;if(Ir)if("sync"===l){const e=Ho();h=e.__watcherHandles||(e.__watcherHandles=[])}else if(!f){const e=()=>{};return e.stop=r,e.resume=r,e.pause=r,e}const g=Pr;d.call=(e,t,n)=>kt(e,g,t,n);let m=!1;"post"===l?d.scheduler=e=>{Fo(e,g&&g.suspense)}:"sync"!==l&&(m=!0,d.scheduler=(e,t)=>{t?e():Ht(e)}),d.augmentJob=e=>{n&&(e.flags|=4),m&&(e.flags|=2,g&&(e.id=g.uid,e.i=g))};const b=function(e,n,o=t){const{immediate:i,deep:s,once:l,scheduler:a,augmentJob:u,call:d}=o,f=e=>s?e:ut(e)||!1===s||0===s?Pt(e,1):Pt(e);let h,g,m,b,y=!1,x=!1;if(vt(e)?(g=()=>e.value,y=ut(e)):at(e)?(g=()=>f(e),y=!0):p(e)?(x=!0,y=e.some((e=>at(e)||ut(e))),g=()=>e.map((e=>vt(e)?e.value:at(e)?f(e):v(e)?d?d(e,2):e():void 0))):g=v(e)?n?d?()=>d(e,2):e:()=>{if(m){me();try{m()}finally{be()}}const t=Ot;Ot=h;try{return d?d(e,3,[b]):e(b)}finally{Ot=t}}:r,n&&s){const e=g,t=!0===s?1/0:s;g=()=>Pt(e(),t)}const _=X,C=()=>{h.stop(),_&&_.active&&c(_.effects,h)};if(l&&n){const e=n;n=(...t)=>{e(...t),C()}}let A=x?new Array(e.length).fill($t):$t;const w=e=>{if(1&h.flags&&(h.dirty||e))if(n){const e=h.run();if(s||y||(x?e.some(((e,t)=>F(e,A[t]))):F(e,A))){m&&m();const t=Ot;Ot=h;try{const t=[e,A===$t?void 0:x&&A[0]===$t?[]:A,b];d?d(n,3,t):n(...t),A=e}finally{Ot=t}}}else h.run()};return u&&u(w),h=new ne(g),h.scheduler=a?()=>a(w,!1):w,b=e=>function(e,t=!1,n=Ot){if(n){let t=Et.get(n);t||Et.set(n,t=[]),t.push(e)}}(e,!1,h),m=h.onStop=()=>{const e=Et.get(h);if(e){if(d)d(e,4);else for(const t of e)t();Et.delete(h)}},n?i?w(!0):A=h.run():a?a(w.bind(null,!0),!0):h.run(),C.pause=h.pause.bind(h),C.resume=h.resume.bind(h),C.stop=C,C}(e,n,d);return Ir&&(h?h.push(b):f&&b()),b}function Wo(e,t,n){const o=this.proxy,r=g(e)?e.includes(".")?Go(o,e):()=>o[e]:e.bind(o,o);let i;v(t)?i=t:(i=t.handler,n=t);const s=Fr(this),l=No(r,i.bind(o),n);return s(),l}function Go(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}const qo=(e,t)=>"modelValue"===t||"model-value"===t?e.modelModifiers:e[`${t}Modifiers`]||e[`${O(t)}Modifiers`]||e[`${T(t)}Modifiers`];function Yo(e,n,...o){if(e.isUnmounted)return;const r=e.vnode.props||t;let i=o;const s=n.startsWith("update:"),l=s&&qo(r,n.slice(7));let a;l&&(l.trim&&(i=o.map((e=>g(e)?e.trim():e))),l.number&&(i=o.map(R))),__VUE_PROD_DEVTOOLS__&&function(e,t,n){Jt("component:emit",e.appContext.app,e,t,n)}(e,n,i);let c=r[a=j(n)]||r[a=j(O(n))];!c&&s&&(c=r[a=j(T(n))]),c&&kt(c,e,6,i);const u=r[a+"Once"];if(u){if(e.emitted){if(e.emitted[a])return}else e.emitted={};e.emitted[a]=!0,kt(u,e,6,i)}}function Ko(e,t,n=!1){const o=t.emitsCache,r=o.get(e);if(void 0!==r)return r;const i=e.emits;let s={},l=!1;if(__VUE_OPTIONS_API__&&!v(e)){const o=e=>{const n=Ko(e,t,!0);n&&(l=!0,a(s,n))};!n&&t.mixins.length&&t.mixins.forEach(o),e.extends&&o(e.extends),e.mixins&&e.mixins.forEach(o)}return i||l?(p(i)?i.forEach((e=>s[e]=null)):a(s,i),b(e)&&o.set(e,s),s):(b(e)&&o.set(e,null),null)}function Jo(e,t){return!(!e||!s(t))&&(t=t.slice(2).replace(/Once$/,""),d(e,t[0].toLowerCase()+t.slice(1))||d(e,T(t))||d(e,t))}function Qo(e){const{type:t,vnode:n,proxy:o,withProxy:r,propsOptions:[i],slots:s,attrs:a,emit:c,render:u,renderCache:d,props:p,data:f,setupState:h,ctx:v,inheritAttrs:g}=e,m=sn(e);let b,y;try{if(4&n.shapeFlag){const e=r||o,t=e;b=Ar(u.call(t,e,d,p,h,f,v)),y=a}else{const e=t;b=Ar(e.length>1?e(p,{attrs:a,slots:s,emit:c}):e(p,null)),y=t.props?a:Xo(a)}}catch(t){sr.length=0,jt(t,e,1),b=yr(rr)}let x=b;if(y&&!1!==g){const e=Object.keys(y),{shapeFlag:t}=x;e.length&&7&t&&(i&&e.some(l)&&(y=Zo(y,i)),x=xr(x,y,!1,!0))}return n.dirs&&(x=xr(x,null,!1,!0),x.dirs=x.dirs?x.dirs.concat(n.dirs):n.dirs),n.transition&&wn(x,n.transition),b=x,sn(m),b}const Xo=e=>{let t;for(const n in e)("class"===n||"style"===n||s(n))&&((t||(t={}))[n]=e[n]);return t},Zo=(e,t)=>{const n={};for(const o in e)l(o)&&o.slice(9)in t||(n[o]=e[o]);return n};function er(e,t,n){const o=Object.keys(t);if(o.length!==Object.keys(e).length)return!0;for(let r=0;r<o.length;r++){const i=o[r];if(t[i]!==e[i]&&!Jo(n,i))return!0}return!1}const tr=e=>e.__isSuspense;const nr=Symbol.for("v-fgt"),or=Symbol.for("v-txt"),rr=Symbol.for("v-cmt"),ir=Symbol.for("v-stc"),sr=[];let lr=null;function ar(e=!1){sr.push(lr=e?null:[])}let cr=1;function ur(e,t=!1){cr+=e,e<0&&lr&&t&&(lr.hasOnce=!0)}function dr(e){return e.dynamicChildren=cr>0?lr||o:null,sr.pop(),lr=sr[sr.length-1]||null,cr>0&&lr&&lr.push(e),e}function pr(e,t,n,o,r,i){return dr(br(e,t,n,o,r,i,!0))}function fr(e,t,n,o,r){return dr(yr(e,t,n,o,r,!0))}function hr(e){return!!e&&!0===e.__v_isVNode}function vr(e,t){return e.type===t.type&&e.key===t.key}const gr=({key:e})=>null!=e?e:null,mr=({ref:e,ref_key:t,ref_for:n})=>("number"==typeof e&&(e=""+e),null!=e?g(e)||vt(e)||v(e)?{i:on,r:e,k:t,f:!!n}:e:null);function br(e,t=null,n=null,o=0,r=null,i=(e===nr?0:1),s=!1,l=!1){const a={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&gr(t),ref:t&&mr(t),scopeId:rn,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetStart:null,targetAnchor:null,staticCount:0,shapeFlag:i,patchFlag:o,dynamicProps:r,dynamicChildren:null,appContext:null,ctx:on};return l?(Sr(a,n),128&i&&e.normalize(a)):n&&(a.shapeFlag|=g(n)?8:16),cr>0&&!s&&lr&&(a.patchFlag>0||6&i)&&32!==a.patchFlag&&lr.push(a),a}const yr=function(e,t=null,n=null,o=0,r=null,i=!1){if(e&&e!==qn||(e=rr),hr(e)){const o=xr(e,t,!0);return n&&Sr(o,n),cr>0&&!i&&lr&&(6&o.shapeFlag?lr[lr.indexOf(e)]=o:lr.push(o)),o.patchFlag=-2,o}if(s=e,v(s)&&"__vccOpts"in s&&(e=e.__vccOpts),t){t=function(e){return e?dt(e)||yo(e)?a({},e):e:null}(t);let{class:e,style:n}=t;e&&!g(e)&&(t.class=W(e)),b(n)&&(dt(n)&&!p(n)&&(n=a({},n)),t.style=L(n))}var s;return br(e,t,n,o,r,g(e)?1:tr(e)?128:dn(e)?64:b(e)?4:v(e)?2:0,i,!0)};function xr(e,t,n=!1,o=!1){const{props:r,ref:i,patchFlag:l,children:a,transition:c}=e,u=t?function(...e){const t={};for(let n=0;n<e.length;n++){const o=e[n];for(const e in o)if("class"===e)t.class!==o.class&&(t.class=W([t.class,o.class]));else if("style"===e)t.style=L([t.style,o.style]);else if(s(e)){const n=t[e],r=o[e];!r||n===r||p(n)&&n.includes(r)||(t[e]=n?[].concat(n,r):r)}else""!==e&&(t[e]=o[e])}return t}(r||{},t):r,d={__v_isVNode:!0,__v_skip:!0,type:e.type,props:u,key:u&&gr(u),ref:t&&t.ref?n&&i?p(i)?i.concat(mr(t)):[i,mr(t)]:mr(t):i,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:a,target:e.target,targetStart:e.targetStart,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==nr?-1===l?16:16|l:l,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:c,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&xr(e.ssContent),ssFallback:e.ssFallback&&xr(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce};return c&&o&&wn(d,c.clone(d)),d}function _r(e=" ",t=0){return yr(or,null,e,t)}function Cr(e="",t=!1){return t?(ar(),fr(rr,null,e)):yr(rr,null,e)}function Ar(e){return null==e||"boolean"==typeof e?yr(rr):p(e)?yr(nr,null,e.slice()):hr(e)?wr(e):yr(or,null,String(e))}function wr(e){return null===e.el&&-1!==e.patchFlag||e.memo?e:xr(e)}function Sr(e,t){let n=0;const{shapeFlag:o}=e;if(null==t)t=null;else if(p(t))n=16;else if("object"==typeof t){if(65&o){const n=t.default;return void(n&&(n._c&&(n._d=!1),Sr(e,n()),n._c&&(n._d=!0)))}{n=32;const o=t._;o||yo(t)?3===o&&on&&(1===on.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=on}}else v(t)?(t={default:t,_ctx:on},n=32):(t=String(t),64&o?(n=16,t=[_r(t)]):n=8);e.children=t,e.shapeFlag|=n}function $r(e,t,n,o=null){kt(e,t,7,[n,o])}const Er=uo();let Or=0;let Pr=null;const Tr=()=>Pr||on;let kr,jr;{const e=M(),t=(t,n)=>{let o;return(o=e[t])||(o=e[t]=[]),o.push(n),e=>{o.length>1?o.forEach((t=>t(e))):o[0](e)}};kr=t("__VUE_INSTANCE_SETTERS__",(e=>Pr=e)),jr=t("__VUE_SSR_SETTERS__",(e=>Ir=e))}const Fr=e=>{const t=Pr;return kr(e),e.scope.on(),()=>{e.scope.off(),kr(t)}},Dr=()=>{Pr&&Pr.scope.off(),kr(null)};function Br(e){return 4&e.vnode.shapeFlag}let Rr,zr,Ir=!1;function Mr(e,t,n){v(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:b(t)&&(__VUE_PROD_DEVTOOLS__&&(e.devtoolsRawSetupState=t),e.setupState=_t(t)),Lr(e,n)}function Lr(e,t,n){const o=e.type;if(!e.render){if(!t&&Rr&&!o.render){const t=o.template||__VUE_OPTIONS_API__&&no(e).template;if(t){const{isCustomElement:n,compilerOptions:r}=e.appContext.config,{delimiters:i,compilerOptions:s}=o,l=a(a({isCustomElement:n,delimiters:i},r),s);o.render=Rr(t,l)}}e.render=o.render||r,zr&&zr(e)}if(__VUE_OPTIONS_API__){const t=Fr(e);me();try{!function(e){const t=no(e),n=e.proxy,o=e.ctx;Zn=!1,t.beforeCreate&&eo(t.beforeCreate,e,"bc");const{data:i,computed:s,methods:l,watch:a,provide:c,inject:u,created:d,beforeMount:f,mounted:h,beforeUpdate:g,updated:m,activated:y,deactivated:x,beforeDestroy:_,beforeUnmount:C,destroyed:A,unmounted:w,render:S,renderTracked:$,renderTriggered:E,errorCaptured:O,serverPrefetch:P,expose:T,inheritAttrs:k,components:j,directives:F,filters:D}=t;if(u&&function(e,t){p(e)&&(e=so(e));for(const n in e){const o=e[n];let r;r=b(o)?"default"in o?go(o.from||n,o.default,!0):go(o.from||n):go(o),vt(r)?Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>r.value,set:e=>r.value=e}):t[n]=r}}(u,o),l)for(const e in l){const t=l[e];v(t)&&(o[e]=t.bind(n))}if(i){const t=i.call(n,n);b(t)&&(e.data=it(t))}if(Zn=!0,s)for(const e in s){const t=s[e],i=v(t)?t.bind(n,n):v(t.get)?t.get.bind(n,n):r,l=!v(t)&&v(t.set)?t.set.bind(n):r,a=Vr({get:i,set:l});Object.defineProperty(o,e,{enumerable:!0,configurable:!0,get:()=>a.value,set:e=>a.value=e})}if(a)for(const e in a)to(a[e],o,n,e);if(c){const e=v(c)?c.call(n):c;Reflect.ownKeys(e).forEach((t=>{vo(t,e[t])}))}function B(e,t){p(t)?t.forEach((t=>e(t.bind(n)))):t&&e(t.bind(n))}if(d&&eo(d,e,"c"),B(zn,f),B(In,h),B(Mn,g),B(Ln,m),B(kn,y),B(jn,x),B(Gn,O),B(Wn,$),B(Nn,E),B(Hn,C),B(Un,w),B(Vn,P),p(T))if(T.length){const t=e.exposed||(e.exposed={});T.forEach((e=>{Object.defineProperty(t,e,{get:()=>n[e],set:t=>n[e]=t})}))}else e.exposed||(e.exposed={});S&&e.render===r&&(e.render=S),null!=k&&(e.inheritAttrs=k),j&&(e.components=j),F&&(e.directives=F),P&&En(e)}(e)}finally{be(),t()}}}const Hr={get:(e,t)=>(Oe(e,0,""),e[t])};function Ur(e){return e.exposed?e.exposeProxy||(e.exposeProxy=new Proxy(_t((t=e.exposed,!d(t,"__v_skip")&&Object.isExtensible(t)&&B(t,"__v_skip",!0),t)),{get:(t,n)=>n in t?t[n]:n in Kn?Kn[n](e):void 0,has:(e,t)=>t in e||t in Kn})):e.proxy;var t}const Vr=(e,t)=>{const n=function(e,t,n=!1){let o,r;return v(e)?o=e:(o=e.get,r=e.set),new St(o,r,n)}(e,0,Ir);return n};function Nr(e,t,n){const o=arguments.length;return 2===o?b(t)&&!p(t)?hr(t)?yr(e,null,[t]):yr(e,t):yr(e,null,t):(o>3?n=Array.prototype.slice.call(arguments,2):3===o&&hr(n)&&(n=[n]),yr(e,t,n))}const Wr="3.5.13";let Gr;const qr="undefined"!=typeof window&&window.trustedTypes;if(qr)try{Gr=qr.createPolicy("vue",{createHTML:e=>e})}catch(e){}const Yr=Gr?e=>Gr.createHTML(e):e=>e,Kr="undefined"!=typeof document?document:null,Jr=Kr&&Kr.createElement("template"),Qr={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,o)=>{const r="svg"===t?Kr.createElementNS("http://www.w3.org/2000/svg",e):"mathml"===t?Kr.createElementNS("http://www.w3.org/1998/Math/MathML",e):n?Kr.createElement(e,{is:n}):Kr.createElement(e);return"select"===e&&o&&null!=o.multiple&&r.setAttribute("multiple",o.multiple),r},createText:e=>Kr.createTextNode(e),createComment:e=>Kr.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Kr.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,n,o,r,i){const s=n?n.previousSibling:t.lastChild;if(r&&(r===i||r.nextSibling))for(;t.insertBefore(r.cloneNode(!0),n),r!==i&&(r=r.nextSibling););else{Jr.innerHTML=Yr("svg"===o?`<svg>${e}</svg>`:"mathml"===o?`<math>${e}</math>`:e);const r=Jr.content;if("svg"===o||"mathml"===o){const e=r.firstChild;for(;e.firstChild;)r.appendChild(e.firstChild);r.removeChild(e)}t.insertBefore(r,n)}return[s?s.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},Xr="transition",Zr="animation",ei=Symbol("_vtc"),ti={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},ni=a({},gn,ti),oi=(e=>(e.displayName="Transition",e.props=ni,e))(((e,{slots:t})=>Nr(yn,si(e),t))),ri=(e,t=[])=>{p(e)?e.forEach((e=>e(...t))):e&&e(...t)},ii=e=>!!e&&(p(e)?e.some((e=>e.length>1)):e.length>1);function si(e){const t={};for(const n in e)n in ti||(t[n]=e[n]);if(!1===e.css)return t;const{name:n="v",type:o,duration:r,enterFromClass:i=`${n}-enter-from`,enterActiveClass:s=`${n}-enter-active`,enterToClass:l=`${n}-enter-to`,appearFromClass:c=i,appearActiveClass:u=s,appearToClass:d=l,leaveFromClass:p=`${n}-leave-from`,leaveActiveClass:f=`${n}-leave-active`,leaveToClass:h=`${n}-leave-to`}=e,v=function(e){if(null==e)return null;if(b(e))return[li(e.enter),li(e.leave)];{const t=li(e);return[t,t]}}(r),g=v&&v[0],m=v&&v[1],{onBeforeEnter:y,onEnter:x,onEnterCancelled:_,onLeave:C,onLeaveCancelled:A,onBeforeAppear:w=y,onAppear:S=x,onAppearCancelled:$=_}=t,E=(e,t,n,o)=>{e._enterCancelled=o,ci(e,t?d:l),ci(e,t?u:s),n&&n()},O=(e,t)=>{e._isLeaving=!1,ci(e,p),ci(e,h),ci(e,f),t&&t()},P=e=>(t,n)=>{const r=e?S:x,s=()=>E(t,e,n);ri(r,[t,s]),ui((()=>{ci(t,e?c:i),ai(t,e?d:l),ii(r)||pi(t,o,g,s)}))};return a(t,{onBeforeEnter(e){ri(y,[e]),ai(e,i),ai(e,s)},onBeforeAppear(e){ri(w,[e]),ai(e,c),ai(e,u)},onEnter:P(!1),onAppear:P(!0),onLeave(e,t){e._isLeaving=!0;const n=()=>O(e,t);ai(e,p),e._enterCancelled?(ai(e,f),gi()):(gi(),ai(e,f)),ui((()=>{e._isLeaving&&(ci(e,p),ai(e,h),ii(C)||pi(e,o,m,n))})),ri(C,[e,n])},onEnterCancelled(e){E(e,!1,void 0,!0),ri(_,[e])},onAppearCancelled(e){E(e,!0,void 0,!0),ri($,[e])},onLeaveCancelled(e){O(e),ri(A,[e])}})}function li(e){return z(e)}function ai(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e[ei]||(e[ei]=new Set)).add(t)}function ci(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const n=e[ei];n&&(n.delete(t),n.size||(e[ei]=void 0))}function ui(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let di=0;function pi(e,t,n,o){const r=e._endId=++di,i=()=>{r===e._endId&&o()};if(null!=n)return setTimeout(i,n);const{type:s,timeout:l,propCount:a}=fi(e,t);if(!s)return o();const c=s+"end";let u=0;const d=()=>{e.removeEventListener(c,p),i()},p=t=>{t.target===e&&++u>=a&&d()};setTimeout((()=>{u<a&&d()}),l+1),e.addEventListener(c,p)}function fi(e,t){const n=window.getComputedStyle(e),o=e=>(n[e]||"").split(", "),r=o(`${Xr}Delay`),i=o(`${Xr}Duration`),s=hi(r,i),l=o(`${Zr}Delay`),a=o(`${Zr}Duration`),c=hi(l,a);let u=null,d=0,p=0;return t===Xr?s>0&&(u=Xr,d=s,p=i.length):t===Zr?c>0&&(u=Zr,d=c,p=a.length):(d=Math.max(s,c),u=d>0?s>c?Xr:Zr:null,p=u?u===Xr?i.length:a.length:0),{type:u,timeout:d,propCount:p,hasTransform:u===Xr&&/\b(transform|all)(,|$)/.test(o(`${Xr}Property`).toString())}}function hi(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,n)=>vi(t)+vi(e[n]))))}function vi(e){return"auto"===e?0:1e3*Number(e.slice(0,-1).replace(",","."))}function gi(){return document.body.offsetHeight}const mi=Symbol("_vod"),bi=Symbol("_vsh"),yi=Symbol(""),xi=/(^|;)\s*display\s*:/,_i=/\s*!important$/;function Ci(e,t,n){if(p(n))n.forEach((n=>Ci(e,t,n)));else if(null==n&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const o=function(e,t){const n=wi[t];if(n)return n;let o=O(t);if("filter"!==o&&o in e)return wi[t]=o;o=k(o);for(let n=0;n<Ai.length;n++){const r=Ai[n]+o;if(r in e)return wi[t]=r}return t}(e,t);_i.test(n)?e.setProperty(T(o),n.replace(_i,""),"important"):e[o]=n}}const Ai=["Webkit","Moz","ms"],wi={},Si="http://www.w3.org/1999/xlink";function $i(e,t,n,o,r,i=G(t)){o&&t.startsWith("xlink:")?null==n?e.removeAttributeNS(Si,t.slice(6,t.length)):e.setAttributeNS(Si,t,n):null==n||i&&!q(n)?e.removeAttribute(t):e.setAttribute(t,i?"":m(n)?String(n):n)}function Ei(e,t,n,o,r){if("innerHTML"===t||"textContent"===t)return void(null!=n&&(e[t]="innerHTML"===t?Yr(n):n));const i=e.tagName;if("value"===t&&"PROGRESS"!==i&&!i.includes("-")){const o="OPTION"===i?e.getAttribute("value")||"":e.value,r=null==n?"checkbox"===e.type?"on":"":String(n);return o===r&&"_value"in e||(e.value=r),null==n&&e.removeAttribute(t),void(e._value=n)}let s=!1;if(""===n||null==n){const o=typeof e[t];"boolean"===o?n=q(n):null==n&&"string"===o?(n="",s=!0):"number"===o&&(n=0,s=!0)}try{e[t]=n}catch(e){}s&&e.removeAttribute(r||t)}function Oi(e,t,n,o){e.addEventListener(t,n,o)}const Pi=Symbol("_vei");const Ti=/(?:Once|Passive|Capture)$/;let ki=0;const ji=Promise.resolve(),Fi=()=>ki||(ji.then((()=>ki=0)),ki=Date.now()),Di=e=>111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)>96&&e.charCodeAt(2)<123;"undefined"!=typeof HTMLElement&&HTMLElement;const Bi=new WeakMap,Ri=new WeakMap,zi=Symbol("_moveCb"),Ii=Symbol("_enterCb"),Mi=(e=>(delete e.props.mode,e))({name:"TransitionGroup",props:a({},ni,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=Tr(),o=hn();let r,i;return Ln((()=>{if(!r.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){const o=e.cloneNode(),r=e[ei];r&&r.forEach((e=>{e.split(/\s+/).forEach((e=>e&&o.classList.remove(e)))})),n.split(/\s+/).forEach((e=>e&&o.classList.add(e))),o.style.display="none";const i=1===t.nodeType?t:t.parentNode;i.appendChild(o);const{hasTransform:s}=fi(o);return i.removeChild(o),s}(r[0].el,n.vnode.el,t))return;r.forEach(Li),r.forEach(Hi);const o=r.filter(Ui);gi(),o.forEach((e=>{const n=e.el,o=n.style;ai(n,t),o.transform=o.webkitTransform=o.transitionDuration="";const r=n[zi]=e=>{e&&e.target!==n||e&&!/transform$/.test(e.propertyName)||(n.removeEventListener("transitionend",r),n[zi]=null,ci(n,t))};n.addEventListener("transitionend",r)}))})),()=>{const s=pt(e),l=si(s);let a=s.tag||nr;if(r=[],i)for(let e=0;e<i.length;e++){const t=i[e];t.el&&t.el instanceof Element&&(r.push(t),wn(t,_n(t,l,o,n)),Bi.set(t,t.el.getBoundingClientRect()))}i=t.default?Sn(t.default()):[];for(let e=0;e<i.length;e++){const t=i[e];null!=t.key&&wn(t,_n(t,l,o,n))}return yr(a,null,i)}}});function Li(e){const t=e.el;t[zi]&&t[zi](),t[Ii]&&t[Ii]()}function Hi(e){Ri.set(e,e.el.getBoundingClientRect())}function Ui(e){const t=Bi.get(e),n=Ri.get(e),o=t.left-n.left,r=t.top-n.top;if(o||r){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${o}px,${r}px)`,t.transitionDuration="0s",e}}const Vi=e=>{const t=e.props["onUpdate:modelValue"]||!1;return p(t)?e=>D(t,e):t};function Ni(e){e.target.composing=!0}function Wi(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Gi=Symbol("_assign"),qi={created(e,{modifiers:{lazy:t,trim:n,number:o}},r){e[Gi]=Vi(r);const i=o||r.props&&"number"===r.props.type;Oi(e,t?"change":"input",(t=>{if(t.target.composing)return;let o=e.value;n&&(o=o.trim()),i&&(o=R(o)),e[Gi](o)})),n&&Oi(e,"change",(()=>{e.value=e.value.trim()})),t||(Oi(e,"compositionstart",Ni),Oi(e,"compositionend",Wi),Oi(e,"change",Wi))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,oldValue:n,modifiers:{lazy:o,trim:r,number:i}},s){if(e[Gi]=Vi(s),e.composing)return;const l=null==t?"":t;if((!i&&"number"!==e.type||/^0\d/.test(e.value)?e.value:R(e.value))!==l){if(document.activeElement===e&&"range"!==e.type){if(o&&t===n)return;if(r&&e.value.trim()===l)return}e.value=l}}},Yi=a({patchProp:(e,t,n,o,r,i)=>{const a="svg"===r;"class"===t?function(e,t,n){const o=e[ei];o&&(t=(t?[t,...o]:[...o]).join(" ")),null==t?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}(e,o,a):"style"===t?function(e,t,n){const o=e.style,r=g(n);let i=!1;if(n&&!r){if(t)if(g(t))for(const e of t.split(";")){const t=e.slice(0,e.indexOf(":")).trim();null==n[t]&&Ci(o,t,"")}else for(const e in t)null==n[e]&&Ci(o,e,"");for(const e in n)"display"===e&&(i=!0),Ci(o,e,n[e])}else if(r){if(t!==n){const e=o[yi];e&&(n+=";"+e),o.cssText=n,i=xi.test(n)}}else t&&e.removeAttribute("style");mi in e&&(e[mi]=i?o.display:"",e[bi]&&(o.display="none"))}(e,n,o):s(t)?l(t)||function(e,t,n,o,r=null){const i=e[Pi]||(e[Pi]={}),s=i[t];if(o&&s)s.value=o;else{const[n,l]=function(e){let t;if(Ti.test(e)){let n;for(t={};n=e.match(Ti);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[":"===e[2]?e.slice(3):T(e.slice(2)),t]}(t);if(o){const s=i[t]=function(e,t){const n=e=>{if(e._vts){if(e._vts<=n.attached)return}else e._vts=Date.now();kt(function(e,t){if(p(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=Fi(),n}(o,r);Oi(e,n,s,l)}else s&&(function(e,t,n,o){e.removeEventListener(t,n,o)}(e,n,s,l),i[t]=void 0)}}(e,t,0,o,i):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,n,o){if(o)return"innerHTML"===t||"textContent"===t||!!(t in e&&Di(t)&&v(n));if("spellcheck"===t||"draggable"===t||"translate"===t)return!1;if("form"===t)return!1;if("list"===t&&"INPUT"===e.tagName)return!1;if("type"===t&&"TEXTAREA"===e.tagName)return!1;if("width"===t||"height"===t){const t=e.tagName;if("IMG"===t||"VIDEO"===t||"CANVAS"===t||"SOURCE"===t)return!1}return(!Di(t)||!g(n))&&t in e}(e,t,o,a))?(Ei(e,t,o),e.tagName.includes("-")||"value"!==t&&"checked"!==t&&"selected"!==t||$i(e,t,o,a,0,"value"!==t)):!e._isVueCE||!/[A-Z]/.test(t)&&g(o)?("true-value"===t?e._trueValue=o:"false-value"===t&&(e._falseValue=o),$i(e,t,o,a)):Ei(e,O(t),o,0,t)}},Qr);let Ki;const Ji="hailab",Qi=["www.amazon.com"],Xi=["https://www.amazon.com/checkout/","https://www.amazon.com/gp/buy/","https://www.amazon.com/a/addresses","https://www.amazon.com/cpe/yourpayments/","https://www.amazon.com/ap/signin","https://www.amazon.com/ap/cvf/","https://www.amazon.com/ap/profile/","https://www.amazon.com/ax/account/","https://www.amazon.com/gp/product/handle-buy-box/","https://www.amazon.com/gp/checkoutportal/","https://www.amazon.com/gp/cart/desktop/","https://www.amazon.com/gp/primecentral/editPaymentPreference"];function Zi(e,t=!1){return n=this,o=void 0,i=function*(){if(!t)if(chrome.storage){if(!(yield chrome.storage.local.get("userId")).userId)return console.log("no user id"),!0}else if(!(yield new Promise((e=>{const t=n=>{"GET_USER_ID_RESPONSE"===n.data.type&&(window.removeEventListener("message",t),e(n.data.userId))};window.addEventListener("message",t),window.postMessage({type:"GET_USER_ID"},"*")}))))return!0;return!e||!Qi.some((t=>e.includes(t)))||Xi.some((t=>e.includes(t)))},new((r=void 0)||(r=Promise))((function(e,t){function s(e){try{a(i.next(e))}catch(e){t(e)}}function l(e){try{a(i.throw(e))}catch(e){t(e)}}function a(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(s,l)}a((i=i.apply(n,o||[])).next())}));var n,o,r,i}const es={black:"#000",silver:"#C0C0C0",gray:"#808080",white:"#FFF",maroon:"#800000",red:"#F00",purple:"#800080",fuchsia:"#F0F",green:"#008000",lime:"#0F0",olive:"#808000",yellow:"#FF0",navy:"#000080",blue:"#00F",teal:"#008080",aqua:"#0FF",transparent:"#0000"},ts="^\\s*",ns="\\s*$",os="\\s*((\\.\\d+)|(\\d+(\\.\\d*)?))%\\s*",rs="\\s*((\\.\\d+)|(\\d+(\\.\\d*)?))\\s*",is="([0-9A-Fa-f])",ss="([0-9A-Fa-f]{2})",ls=(new RegExp(`${ts}hsl\\s*\\(${rs},${os},${os}\\)${ns}`),new RegExp(`${ts}hsv\\s*\\(${rs},${os},${os}\\)${ns}`),new RegExp(`${ts}hsla\\s*\\(${rs},${os},${os},${rs}\\)${ns}`),new RegExp(`${ts}hsva\\s*\\(${rs},${os},${os},${rs}\\)${ns}`),new RegExp(`${ts}rgb\\s*\\(${rs},${rs},${rs}\\)${ns}`)),as=new RegExp(`${ts}rgba\\s*\\(${rs},${rs},${rs},${rs}\\)${ns}`),cs=new RegExp(`${ts}#${is}${is}${is}${ns}`),us=new RegExp(`${ts}#${ss}${ss}${ss}${ns}`),ds=new RegExp(`${ts}#${is}${is}${is}${is}${ns}`),ps=new RegExp(`${ts}#${ss}${ss}${ss}${ss}${ns}`);function fs(e){return parseInt(e,16)}function hs(e){try{let t;if(t=us.exec(e))return[fs(t[1]),fs(t[2]),fs(t[3]),1];if(t=ls.exec(e))return[_s(t[1]),_s(t[5]),_s(t[9]),1];if(t=as.exec(e))return[_s(t[1]),_s(t[5]),_s(t[9]),xs(t[13])];if(t=cs.exec(e))return[fs(t[1]+t[1]),fs(t[2]+t[2]),fs(t[3]+t[3]),1];if(t=ps.exec(e))return[fs(t[1]),fs(t[2]),fs(t[3]),xs(fs(t[4])/255)];if(t=ds.exec(e))return[fs(t[1]+t[1]),fs(t[2]+t[2]),fs(t[3]+t[3]),xs(fs(t[4]+t[4])/255)];if(e in es)return hs(es[e]);throw new Error(`[seemly/rgba]: Invalid color value ${e}.`)}catch(e){throw e}}function vs(e,t,n,o){return`rgba(${_s(e)}, ${_s(t)}, ${_s(n)}, ${r=o,r>1?1:r<0?0:r})`;var r}function gs(e,t,n,o,r){return _s((e*t*(1-o)+n*o)/r)}function ms(e,t){Array.isArray(e)||(e=hs(e)),Array.isArray(t)||(t=hs(t));const n=e[3],o=t[3],r=xs(n+o-n*o);return vs(gs(e[0],n,t[0],o,r),gs(e[1],n,t[1],o,r),gs(e[2],n,t[2],o,r),r)}function bs(e,t){const[n,o,r,i=1]=Array.isArray(e)?e:hs(e);return t.alpha?vs(n,o,r,t.alpha):vs(n,o,r,i)}function ys(e,t){const[n,o,r,i=1]=Array.isArray(e)?e:hs(e),{lightness:s=1,alpha:l=1}=t;return function(e){const[t,n,o]=e;return 3 in e?`rgba(${_s(t)}, ${_s(n)}, ${_s(o)}, ${xs(e[3])})`:`rgba(${_s(t)}, ${_s(n)}, ${_s(o)}, 1)`}([n*s,o*s,r*s,i*l])}function xs(e){const t=Math.round(100*Number(e))/100;return t>1?1:t<0?0:t}function _s(e){const t=Math.round(Number(e));return t>255?255:t<0?0:t}const Cs=$n({name:"FadeInExpandTransition",props:{appear:Boolean,group:Boolean,mode:String,onLeave:Function,onAfterLeave:Function,onAfterEnter:Function,width:Boolean,reverse:Boolean},setup(e,{slots:t}){function n(t){e.width?t.style.maxWidth=`${t.offsetWidth}px`:t.style.maxHeight=`${t.offsetHeight}px`,t.offsetWidth}function o(t){e.width?t.style.maxWidth="0":t.style.maxHeight="0",t.offsetWidth;const{onLeave:n}=e;n&&n()}function r(t){e.width?t.style.maxWidth="":t.style.maxHeight="";const{onAfterLeave:n}=e;n&&n()}function i(t){if(t.style.transition="none",e.width){const e=t.offsetWidth;t.style.maxWidth="0",t.offsetWidth,t.style.transition="",t.style.maxWidth=`${e}px`}else if(e.reverse)t.style.maxHeight=`${t.offsetHeight}px`,t.offsetHeight,t.style.transition="",t.style.maxHeight="0";else{const e=t.offsetHeight;t.style.maxHeight="0",t.offsetWidth,t.style.transition="",t.style.maxHeight=`${e}px`}t.offsetWidth}function s(t){var n;e.width?t.style.maxWidth="":e.reverse||(t.style.maxHeight=""),null===(n=e.onAfterEnter)||void 0===n||n.call(e)}return()=>{const{group:l,width:a,appear:c,mode:u}=e,d=l?Mi:oi,p={name:a?"fade-in-width-expand-transition":"fade-in-height-expand-transition",appear:c,onEnter:i,onAfterEnter:s,onBeforeLeave:n,onLeave:o,onAfterLeave:r};return l||(p.mode=u),Nr(d,p,t)}}}),As=$n({name:"BaseIconSwitchTransition",setup(e,{slots:t}){const n=function(){const e=gt(!1);return In((()=>{e.value=!0})),st(e)}();return()=>Nr(oi,{name:"icon-switch-transition",appear:n.value},t)}}),ws="@css-render/vue3-ssr",Ss="undefined"!=typeof document;function $s(){if(Ss)return;const e=go(ws,null);return null!==e?{adapter:(t,n)=>function(e,t,n){const{styles:o,ids:r}=n;r.has(e)||null!==o&&(r.add(e),o.push(function(e,t){return`<style cssr-id="${e}">\n${t}\n</style>`}(e,t)))}(t,n,e),context:e}:void 0}const Es=/\s*,(?![^(]*\))\s*/g,Os=/\s+/g;function Ps(e){if(!e)return;const t=e.parentElement;t&&t.removeChild(e)}function Ts(e,t){return(null!=t?t:document.head).querySelector(`style[cssr-id="${e}"]`)}function ks(e){return!!e&&/^\s*@(s|m)/.test(e)}const js=/[A-Z]/g;function Fs(e){return e.replace(js,(e=>"-"+e.toLowerCase()))}function Ds(e,t,n,o){if(!t)return"";const r=function(e,t,n){return"function"==typeof e?e({context:t.context,props:n}):e}(t,n,o);if(!r)return"";if("string"==typeof r)return`${e} {\n${r}\n}`;const i=Object.keys(r);if(0===i.length)return n.config.keepEmptyBlock?e+" {\n}":"";const s=e?[e+" {"]:[];return i.forEach((e=>{const t=r[e];"raw"!==e?(e=Fs(e),null!=t&&s.push(`  ${e}${function(e,t="  "){return"object"==typeof e&&null!==e?" {\n"+Object.entries(e).map((e=>t+`  ${Fs(e[0])}: ${e[1]};`)).join("\n")+"\n"+t+"}":`: ${e};`}(t)}`)):s.push("\n"+t+"\n")})),e&&s.push("}"),s.join("\n")}function Bs(e,t,n){e&&e.forEach((e=>{if(Array.isArray(e))Bs(e,t,n);else if("function"==typeof e){const o=e(t);Array.isArray(o)?Bs(o,t,n):o&&n(o)}else e&&n(e)}))}function Rs(e,t,n,o,r){const i=e.$;let s="";if(i&&"string"!=typeof i)if("function"==typeof i){const e=i({context:o.context,props:r});ks(e)?s=e:t.push(e)}else if(i.before&&i.before(o.context),i.$&&"string"!=typeof i.$){if(i.$){const e=i.$({context:o.context,props:r});ks(e)?s=e:t.push(e)}}else ks(i.$)?s=i.$:t.push(i.$);else ks(i)?s=i:t.push(i);const l=function(e){let t=[""];return e.forEach((e=>{(e=e&&e.trim())&&(t=e.includes("&")?function(e,t){const n=[];return t.split(Es).forEach((t=>{let o=function(e){let t=0;for(let n=0;n<e.length;++n)"&"===e[n]&&++t;return t}(t);if(!o)return void e.forEach((e=>{n.push((e&&e+" ")+t)}));if(1===o)return void e.forEach((e=>{n.push(t.replace("&",e))}));let r=[t];for(;o--;){const t=[];r.forEach((n=>{e.forEach((e=>{t.push(n.replace("&",e))}))})),r=t}r.forEach((e=>n.push(e)))})),n}(t,e):function(e,t){const n=[];return t.split(Es).forEach((t=>{e.forEach((e=>{n.push((e&&e+" ")+t)}))})),n}(t,e))})),t.join(", ").replace(Os," ")}(t),a=Ds(l,e.props,o,r);s?n.push(`${s} {`):a.length&&n.push(a),e.children&&Bs(e.children,{context:o.context,props:r},(e=>{if("string"==typeof e){const t=Ds(l,{raw:e},o,r);n.push(t)}else Rs(e,t,n,o,r)})),t.pop(),s&&n.push("}"),i&&i.after&&i.after(o.context)}const zs=function(e){for(var t,n=0,o=0,r=e.length;r>=4;++o,r-=4)t=1540483477*(65535&(t=255&e.charCodeAt(o)|(255&e.charCodeAt(++o))<<8|(255&e.charCodeAt(++o))<<16|(255&e.charCodeAt(++o))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(r){case 3:n^=(255&e.charCodeAt(o+2))<<16;case 2:n^=(255&e.charCodeAt(o+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(o)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)};function Is(e,t){e.push(t)}function Ms(e){return function(e,t,n){const o=[];return Rs(e,[],o,t,n),o.join("\n\n")}(this,this.instance,e)}function Ls(e={}){const{id:t,ssr:n,props:o,head:r=!1,force:i=!1,anchorMetaName:s,parent:l}=e;return function(e,t,n,o,r,i,s,l,a){let c;if(void 0===n&&(c=t.render(o),n=zs(c)),a)return void a.adapter(n,null!=c?c:t.render(o));void 0===l&&(l=document.head);const u=Ts(n,l);if(null!==u&&!i)return u;const d=null!=u?u:function(e){const t=document.createElement("style");return t.setAttribute("cssr-id",e),t}(n);if(void 0===c&&(c=t.render(o)),d.textContent=c,null!==u)return u;if(s){const e=l.querySelector(`meta[name="${s}"]`);if(e)return l.insertBefore(d,e),Is(t.els,d),d}return r?l.insertBefore(d,l.querySelector("style, link")):l.appendChild(d),Is(t.els,d),d}(this.instance,this,t,o,r,i,s,l,n)}function Hs(e={}){const{id:t,parent:n}=e;!function(e,t,n,o){const{els:r}=t;if(void 0===n)r.forEach(Ps),t.els=[];else{const e=Ts(n,o);e&&r.includes(e)&&(Ps(e),t.els=r.filter((t=>t!==e)))}}(this.instance,this,t,n)}"undefined"!=typeof window&&(window.__cssrContext={});const Us=function(e,t,n,o){return{instance:e,$:t,props:n,children:o,els:[],render:Ms,mount:Ls,unmount:Hs}},Vs=function(e={}){const t={c:(...e)=>function(e,t,n,o){return Array.isArray(t)?Us(e,{$:null},null,t):Array.isArray(n)?Us(e,t,null,n):Array.isArray(o)?Us(e,t,n,o):Us(e,t,n,null)}(t,...e),use:(e,...n)=>e.install(t,...n),find:Ts,context:{},config:e};return t}(),Ns=function(e){let t,n=".",o="__",r="--";if(e){let t=e.blockPrefix;t&&(n=t),t=e.elementPrefix,t&&(o=t),t=e.modifierPrefix,t&&(r=t)}const i={install(e){t=e.c;const n=e.context;n.bem={},n.bem.b=null,n.bem.els=null}};return Object.assign(i,{cB:(...e)=>t(function(e){let t,o;return{before(e){t=e.bem.b,o=e.bem.els,e.bem.els=null},after(e){e.bem.b=t,e.bem.els=o},$:({context:t,props:o})=>(e="string"==typeof e?e:e({context:t,props:o}),t.bem.b=e,`${(null==o?void 0:o.bPrefix)||n}${t.bem.b}`)}}(e[0]),e[1],e[2]),cE:(...e)=>t(function(e){let t;return{before(e){t=e.bem.els},after(e){e.bem.els=t},$:({context:t,props:r})=>(e="string"==typeof e?e:e({context:t,props:r}),t.bem.els=e.split(",").map((e=>e.trim())),t.bem.els.map((e=>`${(null==r?void 0:r.bPrefix)||n}${t.bem.b}${o}${e}`)).join(", "))}}(e[0]),e[1],e[2]),cM:(...e)=>{return t((i=e[0],{$({context:e,props:t}){const s=(i="string"==typeof i?i:i({context:e,props:t})).split(",").map((e=>e.trim()));function l(i){return s.map((s=>`&${(null==t?void 0:t.bPrefix)||n}${e.bem.b}${void 0!==i?`${o}${i}`:""}${r}${s}`)).join(", ")}const a=e.bem.els;return null!==a?l(a[0]):l()}}),e[1],e[2]);var i},cNotM:(...e)=>{return t((i=e[0],{$({context:e,props:t}){i="string"==typeof i?i:i({context:e,props:t});const s=e.bem.els;return`&:not(${(null==t?void 0:t.bPrefix)||n}${e.bem.b}${null!==s&&s.length>0?`${o}${s[0]}`:""}${r}${i})`}}),e[1],e[2]);var i}}),i}({blockPrefix:".n-",elementPrefix:"__",modifierPrefix:"--"});Vs.use(Ns);const{c:Ws,find:Gs}=Vs,{cB:qs,cE:Ys,cM:Ks,cNotM:Js}=Ns;function Qs(e,t){return e+("default"===t?"":t.replace(/^[a-z]/,(e=>e.toUpperCase())))}const Xs={fontFamily:'v-sans, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',fontFamilyMono:"v-mono, SFMono-Regular, Menlo, Consolas, Courier, monospace",fontWeight:"400",fontWeightStrong:"500",cubicBezierEaseInOut:"cubic-bezier(.4, 0, .2, 1)",cubicBezierEaseOut:"cubic-bezier(0, 0, .2, 1)",cubicBezierEaseIn:"cubic-bezier(.4, 0, 1, 1)",borderRadius:"3px",borderRadiusSmall:"2px",fontSize:"14px",fontSizeMini:"12px",fontSizeTiny:"12px",fontSizeSmall:"14px",fontSizeMedium:"14px",fontSizeLarge:"15px",fontSizeHuge:"16px",lineHeight:"1.6",heightMini:"16px",heightTiny:"22px",heightSmall:"28px",heightMedium:"34px",heightLarge:"40px",heightHuge:"46px"},{fontSize:Zs,fontFamily:el,lineHeight:tl}=Xs,nl=Ws("body",`\n margin: 0;\n font-size: ${Zs};\n font-family: ${el};\n line-height: ${tl};\n -webkit-text-size-adjust: 100%;\n -webkit-tap-highlight-color: transparent;\n`,[Ws("input","\n font-family: inherit;\n font-size: inherit;\n ")]),ol="n-config-provider",rl="naive-ui-style";function il(e,t,n){if(!t)return;const o=$s(),r=go(ol,null),i=()=>{const i=n.value;t.mount({id:void 0===i?e:i+e,head:!0,anchorMetaName:rl,props:{bPrefix:i?`.${i}-`:void 0},ssr:o,parent:null==r?void 0:r.styleMountTarget}),(null==r?void 0:r.preflightStyleDisabled)||nl.mount({id:"n-global",head:!0,anchorMetaName:rl,ssr:o,parent:null==r?void 0:r.styleMountTarget})};o?i():zn(i)}const{cubicBezierEaseInOut:sl}=Xs;function ll({originalTransform:e="",left:t=0,top:n=0,transition:o=`all .3s ${sl} !important`}={}){return[Ws("&.icon-switch-transition-enter-from, &.icon-switch-transition-leave-to",{transform:`${e} scale(0.75)`,left:t,top:n,opacity:0}),Ws("&.icon-switch-transition-enter-to, &.icon-switch-transition-leave-from",{transform:`scale(1) ${e}`,left:t,top:n,opacity:1}),Ws("&.icon-switch-transition-enter-active, &.icon-switch-transition-leave-active",{transformOrigin:"center",position:"absolute",left:t,top:n,transition:o})]}const al=Ws([Ws("@keyframes rotator","\n 0% {\n -webkit-transform: rotate(0deg);\n transform: rotate(0deg);\n }\n 100% {\n -webkit-transform: rotate(360deg);\n transform: rotate(360deg);\n }"),qs("base-loading","\n position: relative;\n line-height: 0;\n width: 1em;\n height: 1em;\n ",[Ys("transition-wrapper","\n position: absolute;\n width: 100%;\n height: 100%;\n ",[ll()]),Ys("placeholder","\n position: absolute;\n left: 50%;\n top: 50%;\n transform: translateX(-50%) translateY(-50%);\n ",[ll({left:"50%",top:"50%",originalTransform:"translateX(-50%) translateY(-50%)"})]),Ys("container","\n animation: rotator 3s linear infinite both;\n ",[Ys("icon","\n height: 1em;\n width: 1em;\n ")])])]),cl="1.6s",ul={strokeWidth:{type:Number,default:28},stroke:{type:String,default:void 0}},dl=$n({name:"BaseLoading",props:Object.assign({clsPrefix:{type:String,required:!0},show:{type:Boolean,default:!0},scale:{type:Number,default:1},radius:{type:Number,default:100}},ul),setup(e){il("-base-loading",al,wt(e,"clsPrefix"))},render(){const{clsPrefix:e,radius:t,strokeWidth:n,stroke:o,scale:r}=this,i=t/r;return Nr("div",{class:`${e}-base-loading`,role:"img","aria-label":"loading"},Nr(As,null,{default:()=>this.show?Nr("div",{key:"icon",class:`${e}-base-loading__transition-wrapper`},Nr("div",{class:`${e}-base-loading__container`},Nr("svg",{class:`${e}-base-loading__icon`,viewBox:`0 0 ${2*i} ${2*i}`,xmlns:"http://www.w3.org/2000/svg",style:{color:o}},Nr("g",null,Nr("animateTransform",{attributeName:"transform",type:"rotate",values:`0 ${i} ${i};270 ${i} ${i}`,begin:"0s",dur:cl,fill:"freeze",repeatCount:"indefinite"}),Nr("circle",{class:`${e}-base-loading__icon`,fill:"none",stroke:"currentColor","stroke-width":n,"stroke-linecap":"round",cx:i,cy:i,r:t-n/2,"stroke-dasharray":5.67*t,"stroke-dashoffset":18.48*t},Nr("animateTransform",{attributeName:"transform",type:"rotate",values:`0 ${i} ${i};135 ${i} ${i};450 ${i} ${i}`,begin:"0s",dur:cl,fill:"freeze",repeatCount:"indefinite"}),Nr("animate",{attributeName:"stroke-dashoffset",values:`${5.67*t};${1.42*t};${5.67*t}`,begin:"0s",dur:cl,fill:"freeze",repeatCount:"indefinite"})))))):Nr("div",{key:"placeholder",class:`${e}-base-loading__placeholder`},this.$slots)}))}}),pl=qs("base-wave","\n position: absolute;\n left: 0;\n right: 0;\n top: 0;\n bottom: 0;\n border-radius: inherit;\n"),fl=$n({name:"BaseWave",props:{clsPrefix:{type:String,required:!0}},setup(e){il("-base-wave",pl,wt(e,"clsPrefix"));const t=gt(null),n=gt(!1);let o=null;return Hn((()=>{null!==o&&window.clearTimeout(o)})),{active:n,selfRef:t,play(){null!==o&&(window.clearTimeout(o),n.value=!1,o=null),Lt((()=>{var e;null===(e=t.value)||void 0===e||e.offsetHeight,n.value=!0,o=window.setTimeout((()=>{n.value=!1,o=null}),1e3)}))}}},render(){const{clsPrefix:e}=this;return Nr("div",{ref:"selfRef","aria-hidden":!0,class:[`${e}-base-wave`,this.active&&`${e}-base-wave--active`]})}}),hl=function(e,t){return e===t||e!=e&&t!=t},vl=function(e,t){for(var n=e.length;n--;)if(hl(e[n][0],t))return n;return-1};var gl=Array.prototype.splice;function ml(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var o=e[t];this.set(o[0],o[1])}}ml.prototype.clear=function(){this.__data__=[],this.size=0},ml.prototype.delete=function(e){var t=this.__data__,n=vl(t,e);return!(n<0||(n==t.length-1?t.pop():gl.call(t,n,1),--this.size,0))},ml.prototype.get=function(e){var t=this.__data__,n=vl(t,e);return n<0?void 0:t[n][1]},ml.prototype.has=function(e){return vl(this.__data__,e)>-1},ml.prototype.set=function(e,t){var n=this.__data__,o=vl(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this};const bl=ml,yl="object"==typeof global&&global&&global.Object===Object&&global;var xl="object"==typeof self&&self&&self.Object===Object&&self;const _l=yl||xl||Function("return this")(),Cl=_l.Symbol;var Al=Object.prototype,wl=Al.hasOwnProperty,Sl=Al.toString,$l=Cl?Cl.toStringTag:void 0;var El=Object.prototype.toString;var Ol=Cl?Cl.toStringTag:void 0;const Pl=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":Ol&&Ol in Object(e)?function(e){var t=wl.call(e,$l),n=e[$l];try{e[$l]=void 0;var o=!0}catch(e){}var r=Sl.call(e);return o&&(t?e[$l]=n:delete e[$l]),r}(e):function(e){return El.call(e)}(e)},Tl=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)},kl=function(e){if(!Tl(e))return!1;var t=Pl(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t},jl=_l["__core-js_shared__"];var Fl=function(){var e=/[^.]+$/.exec(jl&&jl.keys&&jl.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}();var Dl=Function.prototype.toString;var Bl=/^\[object .+?Constructor\]$/,Rl=Function.prototype,zl=Object.prototype,Il=Rl.toString,Ml=zl.hasOwnProperty,Ll=RegExp("^"+Il.call(Ml).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");const Hl=function(e){return!(!Tl(e)||(t=e,Fl&&Fl in t))&&(kl(e)?Ll:Bl).test(function(e){if(null!=e){try{return Dl.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e));var t},Ul=function(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Hl(n)?n:void 0},Vl=Ul(_l,"Map"),Nl=Ul(Object,"create");var Wl=Object.prototype.hasOwnProperty;var Gl=Object.prototype.hasOwnProperty;function ql(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var o=e[t];this.set(o[0],o[1])}}ql.prototype.clear=function(){this.__data__=Nl?Nl(null):{},this.size=0},ql.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},ql.prototype.get=function(e){var t=this.__data__;if(Nl){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return Wl.call(t,e)?t[e]:void 0},ql.prototype.has=function(e){var t=this.__data__;return Nl?void 0!==t[e]:Gl.call(t,e)},ql.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=Nl&&void 0===t?"__lodash_hash_undefined__":t,this};const Yl=ql,Kl=function(e,t){var n,o,r=e.__data__;return("string"==(o=typeof(n=t))||"number"==o||"symbol"==o||"boolean"==o?"__proto__"!==n:null===n)?r["string"==typeof t?"string":"hash"]:r.map};function Jl(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var o=e[t];this.set(o[0],o[1])}}Jl.prototype.clear=function(){this.size=0,this.__data__={hash:new Yl,map:new(Vl||bl),string:new Yl}},Jl.prototype.delete=function(e){var t=Kl(this,e).delete(e);return this.size-=t?1:0,t},Jl.prototype.get=function(e){return Kl(this,e).get(e)},Jl.prototype.has=function(e){return Kl(this,e).has(e)},Jl.prototype.set=function(e,t){var n=Kl(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this};const Ql=Jl;function Xl(e){var t=this.__data__=new bl(e);this.size=t.size}Xl.prototype.clear=function(){this.__data__=new bl,this.size=0},Xl.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Xl.prototype.get=function(e){return this.__data__.get(e)},Xl.prototype.has=function(e){return this.__data__.has(e)},Xl.prototype.set=function(e,t){var n=this.__data__;if(n instanceof bl){var o=n.__data__;if(!Vl||o.length<199)return o.push([e,t]),this.size=++n.size,this;n=this.__data__=new Ql(o)}return n.set(e,t),this.size=n.size,this};const Zl=Xl,ea=function(){try{var e=Ul(Object,"defineProperty");return e({},"",{}),e}catch(e){}}(),ta=function(e,t,n){"__proto__"==t&&ea?ea(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n},na=function(e,t,n){(void 0!==n&&!hl(e[t],n)||void 0===n&&!(t in e))&&ta(e,t,n)},oa=function(e,t,n){for(var o=-1,r=Object(e),i=n(e),s=i.length;s--;){var l=i[++o];if(!1===t(r[l],l,r))break}return e};var ra="object"==typeof exports&&exports&&!exports.nodeType&&exports,ia=ra&&"object"==typeof module&&module&&!module.nodeType&&module,sa=ia&&ia.exports===ra?_l.Buffer:void 0,la=sa?sa.allocUnsafe:void 0;const aa=_l.Uint8Array,ca=function(e,t){var n,o,r=t?(n=e.buffer,o=new n.constructor(n.byteLength),new aa(o).set(new aa(n)),o):e.buffer;return new e.constructor(r,e.byteOffset,e.length)};var ua=Object.create;const da=function(){function e(){}return function(t){if(!Tl(t))return{};if(ua)return ua(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}(),pa=(fa=Object.getPrototypeOf,ha=Object,function(e){return fa(ha(e))});var fa,ha,va=Object.prototype;const ga=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||va)},ma=function(e){return null!=e&&"object"==typeof e},ba=function(e){return ma(e)&&"[object Arguments]"==Pl(e)};var ya=Object.prototype,xa=ya.hasOwnProperty,_a=ya.propertyIsEnumerable;const Ca=ba(function(){return arguments}())?ba:function(e){return ma(e)&&xa.call(e,"callee")&&!_a.call(e,"callee")},Aa=Array.isArray,wa=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991},Sa=function(e){return null!=e&&wa(e.length)&&!kl(e)};var $a="object"==typeof exports&&exports&&!exports.nodeType&&exports,Ea=$a&&"object"==typeof module&&module&&!module.nodeType&&module,Oa=Ea&&Ea.exports===$a?_l.Buffer:void 0;const Pa=(Oa?Oa.isBuffer:void 0)||function(){return!1};var Ta=Function.prototype,ka=Object.prototype,ja=Ta.toString,Fa=ka.hasOwnProperty,Da=ja.call(Object);var Ba={};Ba["[object Float32Array]"]=Ba["[object Float64Array]"]=Ba["[object Int8Array]"]=Ba["[object Int16Array]"]=Ba["[object Int32Array]"]=Ba["[object Uint8Array]"]=Ba["[object Uint8ClampedArray]"]=Ba["[object Uint16Array]"]=Ba["[object Uint32Array]"]=!0,Ba["[object Arguments]"]=Ba["[object Array]"]=Ba["[object ArrayBuffer]"]=Ba["[object Boolean]"]=Ba["[object DataView]"]=Ba["[object Date]"]=Ba["[object Error]"]=Ba["[object Function]"]=Ba["[object Map]"]=Ba["[object Number]"]=Ba["[object Object]"]=Ba["[object RegExp]"]=Ba["[object Set]"]=Ba["[object String]"]=Ba["[object WeakMap]"]=!1;var Ra="object"==typeof exports&&exports&&!exports.nodeType&&exports,za=Ra&&"object"==typeof module&&module&&!module.nodeType&&module,Ia=za&&za.exports===Ra&&yl.process,Ma=function(){try{return za&&za.require&&za.require("util").types||Ia&&Ia.binding&&Ia.binding("util")}catch(e){}}(),La=Ma&&Ma.isTypedArray;const Ha=La?function(e){return function(t){return e(t)}}(La):function(e){return ma(e)&&wa(e.length)&&!!Ba[Pl(e)]},Ua=function(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]};var Va=Object.prototype.hasOwnProperty;const Na=function(e,t,n){var o=e[t];Va.call(e,t)&&hl(o,n)&&(void 0!==n||t in e)||ta(e,t,n)};var Wa=/^(?:0|[1-9]\d*)$/;const Ga=function(e,t){var n=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==n||"symbol"!=n&&Wa.test(e))&&e>-1&&e%1==0&&e<t};var qa=Object.prototype.hasOwnProperty;const Ya=function(e,t){var n=Aa(e),o=!n&&Ca(e),r=!n&&!o&&Pa(e),i=!n&&!o&&!r&&Ha(e),s=n||o||r||i,l=s?function(e,t){for(var n=-1,o=Array(e);++n<e;)o[n]=t(n);return o}(e.length,String):[],a=l.length;for(var c in e)!t&&!qa.call(e,c)||s&&("length"==c||r&&("offset"==c||"parent"==c)||i&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Ga(c,a))||l.push(c);return l};var Ka=Object.prototype.hasOwnProperty;const Ja=function(e){if(!Tl(e))return function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}(e);var t=ga(e),n=[];for(var o in e)("constructor"!=o||!t&&Ka.call(e,o))&&n.push(o);return n},Qa=function(e){return Sa(e)?Ya(e,!0):Ja(e)},Xa=function(e){return function(e,t,n,o){var r=!n;n||(n={});for(var i=-1,s=t.length;++i<s;){var l=t[i],a=o?o(n[l],e[l],l,n,e):void 0;void 0===a&&(a=e[l]),r?ta(n,l,a):Na(n,l,a)}return n}(e,Qa(e))},Za=function(e,t,n,o,r,i,s){var l,a=Ua(e,n),c=Ua(t,n),u=s.get(c);if(u)na(e,n,u);else{var d=i?i(a,c,n+"",e,t,s):void 0,p=void 0===d;if(p){var f=Aa(c),h=!f&&Pa(c),v=!f&&!h&&Ha(c);d=c,f||h||v?Aa(a)?d=a:ma(l=a)&&Sa(l)?d=function(e,t){var n=-1,o=e.length;for(t||(t=Array(o));++n<o;)t[n]=e[n];return t}(a):h?(p=!1,d=function(e,t){if(t)return e.slice();var n=e.length,o=la?la(n):new e.constructor(n);return e.copy(o),o}(c,!0)):v?(p=!1,d=ca(c,!0)):d=[]:function(e){if(!ma(e)||"[object Object]"!=Pl(e))return!1;var t=pa(e);if(null===t)return!0;var n=Fa.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&ja.call(n)==Da}(c)||Ca(c)?(d=a,Ca(a)?d=Xa(a):Tl(a)&&!kl(a)||(d=function(e){return"function"!=typeof e.constructor||ga(e)?{}:da(pa(e))}(c))):p=!1}p&&(s.set(c,d),r(d,c,o,i,s),s.delete(c)),na(e,n,d)}},ec=function e(t,n,o,r,i){t!==n&&oa(n,(function(s,l){if(i||(i=new Zl),Tl(s))Za(t,n,l,o,e,r,i);else{var a=r?r(Ua(t,l),s,l+"",t,n,i):void 0;void 0===a&&(a=s),na(t,l,a)}}),Qa)},tc=function(e){return e};var nc=Math.max;const oc=ea?function(e,t){return ea(e,"toString",{configurable:!0,enumerable:!1,value:(n=t,function(){return n}),writable:!0});var n}:tc;var rc=Date.now;const ic=function(e){var t=0,n=0;return function(){var o=rc(),r=16-(o-n);if(n=o,r>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}(oc),sc=function(e,t){return ic(function(e,t,n){return t=nc(void 0===t?e.length-1:t,0),function(){for(var o=arguments,r=-1,i=nc(o.length-t,0),s=Array(i);++r<i;)s[r]=o[t+r];r=-1;for(var l=Array(t+1);++r<t;)l[r]=o[r];return l[t]=n(s),function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}(e,this,l)}}(e,t,tc),e+"")},lc=(ac=function(e,t,n){ec(e,t,n)},sc((function(e,t){var n=-1,o=t.length,r=o>1?t[o-1]:void 0,i=o>2?t[2]:void 0;for(r=ac.length>3&&"function"==typeof r?(o--,r):void 0,i&&function(e,t,n){if(!Tl(n))return!1;var o=typeof t;return!!("number"==o?Sa(n)&&Ga(t,n.length):"string"==o&&t in n)&&hl(n[t],e)}(t[0],t[1],i)&&(r=o<3?void 0:r,o=1),e=Object(e);++n<o;){var s=t[n];s&&ac(e,s,n)}return e})));var ac;function cc(e,t,n,o,r,i){const s=$s(),l=go(ol,null);if(n){const e=()=>{const e=null==i?void 0:i.value;n.mount({id:void 0===e?t:e+t,head:!0,props:{bPrefix:e?`.${e}-`:void 0},anchorMetaName:rl,ssr:s,parent:null==l?void 0:l.styleMountTarget}),(null==l?void 0:l.preflightStyleDisabled)||nl.mount({id:"n-global",head:!0,anchorMetaName:rl,ssr:s,parent:null==l?void 0:l.styleMountTarget})};s?e():zn(e)}return Vr((()=>{var t;const{theme:{common:n,self:i,peers:s={}}={},themeOverrides:a={},builtinThemeOverrides:c={}}=r,{common:u,peers:d}=a,{common:p,[e]:{common:f,self:h,peers:v={}}={}}=(null==l?void 0:l.mergedThemeRef.value)||{},{common:g,[e]:m={}}=(null==l?void 0:l.mergedThemeOverridesRef.value)||{},{common:b,peers:y={}}=m,x=lc({},n||f||p||o.common,g,b,u);return{common:x,self:lc(null===(t=i||h||o.self)||void 0===t?void 0:t(x),c,m,a),peers:lc({},o.peers,v,s),peerOverrides:lc({},c.peers,y,d)}}))}cc.props={theme:Object,themeOverrides:Object,builtinThemeOverrides:Object};const uc=cc,dc="n-form-item";function pc(e={},t={defaultBordered:!0}){const n=go(ol,null);return{inlineThemeDisabled:null==n?void 0:n.inlineThemeDisabled,mergedRtlRef:null==n?void 0:n.mergedRtlRef,mergedComponentPropsRef:null==n?void 0:n.mergedComponentPropsRef,mergedBreakpointsRef:null==n?void 0:n.mergedBreakpointsRef,mergedBorderedRef:Vr((()=>{var o,r;const{bordered:i}=e;return void 0!==i?i:null===(r=null!==(o=null==n?void 0:n.mergedBorderedRef.value)&&void 0!==o?o:t.defaultBordered)||void 0===r||r})),mergedClsPrefixRef:n?n.mergedClsPrefixRef:mt("n",!0),namespaceRef:Vr((()=>null==n?void 0:n.mergedNamespaceRef.value))}}function fc(e,t,n,o){n||function(){throw new Error("[naive/useThemeClass]: cssVarsRef is not passed")}();const r=go(ol,null),i=null==r?void 0:r.mergedThemeHashRef,s=null==r?void 0:r.styleMountTarget,l=gt(""),a=$s();let c;const u=`__${e}`;return Uo((()=>{(()=>{let e=u;const r=t?t.value:void 0,d=null==i?void 0:i.value;d&&(e+=`-${d}`),r&&(e+=`-${r}`);const{themeOverrides:p,builtinThemeOverrides:f}=o;p&&(e+=`-${zs(JSON.stringify(p))}`),f&&(e+=`-${zs(JSON.stringify(f))}`),l.value=e,c=()=>{const t=n.value;let o="";for(const e in t)o+=`${e}: ${t[e]};`;Ws(`.${e}`,o).mount({id:e,ssr:a,parent:s}),c=void 0}})()})),{themeClass:l,onRender:()=>{null==c||c()}}}function hc(e,...t){if(!Array.isArray(e))return e(...t);e.forEach((e=>hc(e,...t)))}function vc(e){return e.replace(/#|\(|\)|,|\s|\./g,"_")}function gc(e){return e.some((e=>!hr(e)||e.type!==rr&&!(e.type===nr&&!gc(e.children))))?e:null}function mc(e,t){return t(e&&gc(e())||null)}function bc(e){return ms(e,[255,255,255,.16])}function yc(e){return ms(e,[0,0,0,.12])}new Set;const xc="undefined"!=typeof document&&"undefined"!=typeof window,_c=xc&&"chrome"in window,Cc=(xc&&navigator.userAgent.includes("Firefox"),xc&&navigator.userAgent.includes("Safari")&&!_c),Ac="#FFF",wc="#fff",Sc="0.24",$c="0.18",Ec="0.6",Oc=hs(Ac),Pc=hs("#000"),Tc=`rgba(${Pc.slice(0,3).join(", ")}, `;function kc(e){return`${Tc+String(e)})`}function jc(e){const t=Array.from(Pc);return t[3]=Number(e),ms(Oc,t)}const Fc=Object.assign(Object.assign({name:"common"},Xs),{baseColor:Ac,primaryColor:"#18a058",primaryColorHover:"#36ad6a",primaryColorPressed:"#0c7a43",primaryColorSuppl:"#36ad6a",infoColor:"#2080f0",infoColorHover:"#4098fc",infoColorPressed:"#1060c9",infoColorSuppl:"#4098fc",successColor:"#18a058",successColorHover:"#36ad6a",successColorPressed:"#0c7a43",successColorSuppl:"#36ad6a",warningColor:"#f0a020",warningColorHover:"#fcb040",warningColorPressed:"#c97c10",warningColorSuppl:"#fcb040",errorColor:"#d03050",errorColorHover:"#de576d",errorColorPressed:"#ab1f3f",errorColorSuppl:"#de576d",textColorBase:"#000",textColor1:"rgb(31, 34, 37)",textColor2:"rgb(51, 54, 57)",textColor3:"rgb(118, 124, 130)",textColorDisabled:jc(Sc),placeholderColor:jc(Sc),placeholderColorDisabled:jc($c),iconColor:jc(Sc),iconColorHover:ys(jc(Sc),{lightness:.75}),iconColorPressed:ys(jc(Sc),{lightness:.9}),iconColorDisabled:jc($c),opacity1:"0.82",opacity2:"0.72",opacity3:"0.38",opacity4:Sc,opacity5:$c,dividerColor:"rgb(239, 239, 245)",borderColor:"rgb(224, 224, 230)",closeIconColor:jc(Number(Ec)),closeIconColorHover:jc(Number(Ec)),closeIconColorPressed:jc(Number(Ec)),closeColorHover:"rgba(0, 0, 0, .09)",closeColorPressed:"rgba(0, 0, 0, .13)",clearColor:jc(Sc),clearColorHover:ys(jc(Sc),{lightness:.75}),clearColorPressed:ys(jc(Sc),{lightness:.9}),scrollbarColor:kc("0.25"),scrollbarColorHover:kc("0.4"),scrollbarWidth:"5px",scrollbarHeight:"5px",scrollbarBorderRadius:"5px",progressRailColor:jc(".08"),railColor:"rgb(219, 219, 223)",popoverColor:"#fff",tableColor:wc,cardColor:wc,modalColor:"#fff",bodyColor:"#fff",tagColor:"#eee",avatarColor:jc("0.2"),invertedColor:"rgb(0, 20, 40)",inputColor:jc("0"),codeColor:"rgb(244, 244, 248)",tabColor:"rgb(247, 247, 250)",actionColor:"rgb(250, 250, 252)",tableHeaderColor:"rgb(250, 250, 252)",hoverColor:"rgb(243, 243, 245)",tableColorHover:"rgba(0, 0, 100, 0.03)",tableColorStriped:"rgba(0, 0, 100, 0.02)",pressedColor:"rgb(237, 237, 239)",opacityDisabled:"0.5",inputColorDisabled:"rgb(250, 250, 252)",buttonColor2:"rgba(46, 51, 56, .05)",buttonColor2Hover:"rgba(46, 51, 56, .09)",buttonColor2Pressed:"rgba(46, 51, 56, .13)",boxShadow1:"0 1px 2px -2px rgba(0, 0, 0, .08), 0 3px 6px 0 rgba(0, 0, 0, .06), 0 5px 12px 4px rgba(0, 0, 0, .04)",boxShadow2:"0 3px 6px -4px rgba(0, 0, 0, .12), 0 6px 16px 0 rgba(0, 0, 0, .08), 0 9px 28px 8px rgba(0, 0, 0, .05)",boxShadow3:"0 6px 16px -9px rgba(0, 0, 0, .08), 0 9px 28px 0 rgba(0, 0, 0, .05), 0 12px 48px 16px rgba(0, 0, 0, .03)"}),Dc={paddingTiny:"0 6px",paddingSmall:"0 10px",paddingMedium:"0 14px",paddingLarge:"0 18px",paddingRoundTiny:"0 10px",paddingRoundSmall:"0 14px",paddingRoundMedium:"0 18px",paddingRoundLarge:"0 22px",iconMarginTiny:"6px",iconMarginSmall:"6px",iconMarginMedium:"6px",iconMarginLarge:"6px",iconSizeTiny:"14px",iconSizeSmall:"18px",iconSizeMedium:"18px",iconSizeLarge:"20px",rippleDuration:".6s"},Bc={name:"Button",common:Fc,self:function(e){const{heightTiny:t,heightSmall:n,heightMedium:o,heightLarge:r,borderRadius:i,fontSizeTiny:s,fontSizeSmall:l,fontSizeMedium:a,fontSizeLarge:c,opacityDisabled:u,textColor2:d,textColor3:p,primaryColorHover:f,primaryColorPressed:h,borderColor:v,primaryColor:g,baseColor:m,infoColor:b,infoColorHover:y,infoColorPressed:x,successColor:_,successColorHover:C,successColorPressed:A,warningColor:w,warningColorHover:S,warningColorPressed:$,errorColor:E,errorColorHover:O,errorColorPressed:P,fontWeight:T,buttonColor2:k,buttonColor2Hover:j,buttonColor2Pressed:F,fontWeightStrong:D}=e;return Object.assign(Object.assign({},Dc),{heightTiny:t,heightSmall:n,heightMedium:o,heightLarge:r,borderRadiusTiny:i,borderRadiusSmall:i,borderRadiusMedium:i,borderRadiusLarge:i,fontSizeTiny:s,fontSizeSmall:l,fontSizeMedium:a,fontSizeLarge:c,opacityDisabled:u,colorOpacitySecondary:"0.16",colorOpacitySecondaryHover:"0.22",colorOpacitySecondaryPressed:"0.28",colorSecondary:k,colorSecondaryHover:j,colorSecondaryPressed:F,colorTertiary:k,colorTertiaryHover:j,colorTertiaryPressed:F,colorQuaternary:"#0000",colorQuaternaryHover:j,colorQuaternaryPressed:F,color:"#0000",colorHover:"#0000",colorPressed:"#0000",colorFocus:"#0000",colorDisabled:"#0000",textColor:d,textColorTertiary:p,textColorHover:f,textColorPressed:h,textColorFocus:f,textColorDisabled:d,textColorText:d,textColorTextHover:f,textColorTextPressed:h,textColorTextFocus:f,textColorTextDisabled:d,textColorGhost:d,textColorGhostHover:f,textColorGhostPressed:h,textColorGhostFocus:f,textColorGhostDisabled:d,border:`1px solid ${v}`,borderHover:`1px solid ${f}`,borderPressed:`1px solid ${h}`,borderFocus:`1px solid ${f}`,borderDisabled:`1px solid ${v}`,rippleColor:g,colorPrimary:g,colorHoverPrimary:f,colorPressedPrimary:h,colorFocusPrimary:f,colorDisabledPrimary:g,textColorPrimary:m,textColorHoverPrimary:m,textColorPressedPrimary:m,textColorFocusPrimary:m,textColorDisabledPrimary:m,textColorTextPrimary:g,textColorTextHoverPrimary:f,textColorTextPressedPrimary:h,textColorTextFocusPrimary:f,textColorTextDisabledPrimary:d,textColorGhostPrimary:g,textColorGhostHoverPrimary:f,textColorGhostPressedPrimary:h,textColorGhostFocusPrimary:f,textColorGhostDisabledPrimary:g,borderPrimary:`1px solid ${g}`,borderHoverPrimary:`1px solid ${f}`,borderPressedPrimary:`1px solid ${h}`,borderFocusPrimary:`1px solid ${f}`,borderDisabledPrimary:`1px solid ${g}`,rippleColorPrimary:g,colorInfo:b,colorHoverInfo:y,colorPressedInfo:x,colorFocusInfo:y,colorDisabledInfo:b,textColorInfo:m,textColorHoverInfo:m,textColorPressedInfo:m,textColorFocusInfo:m,textColorDisabledInfo:m,textColorTextInfo:b,textColorTextHoverInfo:y,textColorTextPressedInfo:x,textColorTextFocusInfo:y,textColorTextDisabledInfo:d,textColorGhostInfo:b,textColorGhostHoverInfo:y,textColorGhostPressedInfo:x,textColorGhostFocusInfo:y,textColorGhostDisabledInfo:b,borderInfo:`1px solid ${b}`,borderHoverInfo:`1px solid ${y}`,borderPressedInfo:`1px solid ${x}`,borderFocusInfo:`1px solid ${y}`,borderDisabledInfo:`1px solid ${b}`,rippleColorInfo:b,colorSuccess:_,colorHoverSuccess:C,colorPressedSuccess:A,colorFocusSuccess:C,colorDisabledSuccess:_,textColorSuccess:m,textColorHoverSuccess:m,textColorPressedSuccess:m,textColorFocusSuccess:m,textColorDisabledSuccess:m,textColorTextSuccess:_,textColorTextHoverSuccess:C,textColorTextPressedSuccess:A,textColorTextFocusSuccess:C,textColorTextDisabledSuccess:d,textColorGhostSuccess:_,textColorGhostHoverSuccess:C,textColorGhostPressedSuccess:A,textColorGhostFocusSuccess:C,textColorGhostDisabledSuccess:_,borderSuccess:`1px solid ${_}`,borderHoverSuccess:`1px solid ${C}`,borderPressedSuccess:`1px solid ${A}`,borderFocusSuccess:`1px solid ${C}`,borderDisabledSuccess:`1px solid ${_}`,rippleColorSuccess:_,colorWarning:w,colorHoverWarning:S,colorPressedWarning:$,colorFocusWarning:S,colorDisabledWarning:w,textColorWarning:m,textColorHoverWarning:m,textColorPressedWarning:m,textColorFocusWarning:m,textColorDisabledWarning:m,textColorTextWarning:w,textColorTextHoverWarning:S,textColorTextPressedWarning:$,textColorTextFocusWarning:S,textColorTextDisabledWarning:d,textColorGhostWarning:w,textColorGhostHoverWarning:S,textColorGhostPressedWarning:$,textColorGhostFocusWarning:S,textColorGhostDisabledWarning:w,borderWarning:`1px solid ${w}`,borderHoverWarning:`1px solid ${S}`,borderPressedWarning:`1px solid ${$}`,borderFocusWarning:`1px solid ${S}`,borderDisabledWarning:`1px solid ${w}`,rippleColorWarning:w,colorError:E,colorHoverError:O,colorPressedError:P,colorFocusError:O,colorDisabledError:E,textColorError:m,textColorHoverError:m,textColorPressedError:m,textColorFocusError:m,textColorDisabledError:m,textColorTextError:E,textColorTextHoverError:O,textColorTextPressedError:P,textColorTextFocusError:O,textColorTextDisabledError:d,textColorGhostError:E,textColorGhostHoverError:O,textColorGhostPressedError:P,textColorGhostFocusError:O,textColorGhostDisabledError:E,borderError:`1px solid ${E}`,borderHoverError:`1px solid ${O}`,borderPressedError:`1px solid ${P}`,borderFocusError:`1px solid ${O}`,borderDisabledError:`1px solid ${E}`,rippleColorError:E,waveOpacity:"0.6",fontWeight:T,fontWeightStrong:D})}},{cubicBezierEaseInOut:Rc}=Xs,zc=Ws([qs("button","\n margin: 0;\n font-weight: var(--n-font-weight);\n line-height: 1;\n font-family: inherit;\n padding: var(--n-padding);\n height: var(--n-height);\n font-size: var(--n-font-size);\n border-radius: var(--n-border-radius);\n color: var(--n-text-color);\n background-color: var(--n-color);\n width: var(--n-width);\n white-space: nowrap;\n outline: none;\n position: relative;\n z-index: auto;\n border: none;\n display: inline-flex;\n flex-wrap: nowrap;\n flex-shrink: 0;\n align-items: center;\n justify-content: center;\n user-select: none;\n -webkit-user-select: none;\n text-align: center;\n cursor: pointer;\n text-decoration: none;\n transition:\n color .3s var(--n-bezier),\n background-color .3s var(--n-bezier),\n opacity .3s var(--n-bezier),\n border-color .3s var(--n-bezier);\n ",[Ks("color",[Ys("border",{borderColor:"var(--n-border-color)"}),Ks("disabled",[Ys("border",{borderColor:"var(--n-border-color-disabled)"})]),Js("disabled",[Ws("&:focus",[Ys("state-border",{borderColor:"var(--n-border-color-focus)"})]),Ws("&:hover",[Ys("state-border",{borderColor:"var(--n-border-color-hover)"})]),Ws("&:active",[Ys("state-border",{borderColor:"var(--n-border-color-pressed)"})]),Ks("pressed",[Ys("state-border",{borderColor:"var(--n-border-color-pressed)"})])])]),Ks("disabled",{backgroundColor:"var(--n-color-disabled)",color:"var(--n-text-color-disabled)"},[Ys("border",{border:"var(--n-border-disabled)"})]),Js("disabled",[Ws("&:focus",{backgroundColor:"var(--n-color-focus)",color:"var(--n-text-color-focus)"},[Ys("state-border",{border:"var(--n-border-focus)"})]),Ws("&:hover",{backgroundColor:"var(--n-color-hover)",color:"var(--n-text-color-hover)"},[Ys("state-border",{border:"var(--n-border-hover)"})]),Ws("&:active",{backgroundColor:"var(--n-color-pressed)",color:"var(--n-text-color-pressed)"},[Ys("state-border",{border:"var(--n-border-pressed)"})]),Ks("pressed",{backgroundColor:"var(--n-color-pressed)",color:"var(--n-text-color-pressed)"},[Ys("state-border",{border:"var(--n-border-pressed)"})])]),Ks("loading","cursor: wait;"),qs("base-wave","\n pointer-events: none;\n top: 0;\n right: 0;\n bottom: 0;\n left: 0;\n animation-iteration-count: 1;\n animation-duration: var(--n-ripple-duration);\n animation-timing-function: var(--n-bezier-ease-out), var(--n-bezier-ease-out);\n ",[Ks("active",{zIndex:1,animationName:"button-wave-spread, button-wave-opacity"})]),xc&&"MozBoxSizing"in document.createElement("div").style?Ws("&::moz-focus-inner",{border:0}):null,Ys("border, state-border","\n position: absolute;\n left: 0;\n top: 0;\n right: 0;\n bottom: 0;\n border-radius: inherit;\n transition: border-color .3s var(--n-bezier);\n pointer-events: none;\n "),Ys("border",{border:"var(--n-border)"}),Ys("state-border",{border:"var(--n-border)",borderColor:"#0000",zIndex:1}),Ys("icon","\n margin: var(--n-icon-margin);\n margin-left: 0;\n height: var(--n-icon-size);\n width: var(--n-icon-size);\n max-width: var(--n-icon-size);\n font-size: var(--n-icon-size);\n position: relative;\n flex-shrink: 0;\n ",[qs("icon-slot","\n height: var(--n-icon-size);\n width: var(--n-icon-size);\n position: absolute;\n left: 0;\n top: 50%;\n transform: translateY(-50%);\n display: flex;\n align-items: center;\n justify-content: center;\n ",[ll({top:"50%",originalTransform:"translateY(-50%)"})]),function({duration:e=".2s",delay:t=".1s"}={}){return[Ws("&.fade-in-width-expand-transition-leave-from, &.fade-in-width-expand-transition-enter-to",{opacity:1}),Ws("&.fade-in-width-expand-transition-leave-to, &.fade-in-width-expand-transition-enter-from","\n opacity: 0!important;\n margin-left: 0!important;\n margin-right: 0!important;\n "),Ws("&.fade-in-width-expand-transition-leave-active",`\n overflow: hidden;\n transition:\n opacity ${e} ${Rc},\n max-width ${e} ${Rc} ${t},\n margin-left ${e} ${Rc} ${t},\n margin-right ${e} ${Rc} ${t};\n `),Ws("&.fade-in-width-expand-transition-enter-active",`\n overflow: hidden;\n transition:\n opacity ${e} ${Rc} ${t},\n max-width ${e} ${Rc},\n margin-left ${e} ${Rc},\n margin-right ${e} ${Rc};\n `)]}()]),Ys("content","\n display: flex;\n align-items: center;\n flex-wrap: nowrap;\n min-width: 0;\n ",[Ws("~",[Ys("icon",{margin:"var(--n-icon-margin)",marginRight:0})])]),Ks("block","\n display: flex;\n width: 100%;\n "),Ks("dashed",[Ys("border, state-border",{borderStyle:"dashed !important"})]),Ks("disabled",{cursor:"not-allowed",opacity:"var(--n-opacity-disabled)"})]),Ws("@keyframes button-wave-spread",{from:{boxShadow:"0 0 0.5px 0 var(--n-ripple-color)"},to:{boxShadow:"0 0 0.5px 4.5px var(--n-ripple-color)"}}),Ws("@keyframes button-wave-opacity",{from:{opacity:"var(--n-wave-opacity)"},to:{opacity:0}})]),Ic=$n({name:"Button",props:Object.assign(Object.assign({},uc.props),{color:String,textColor:String,text:Boolean,block:Boolean,loading:Boolean,disabled:Boolean,circle:Boolean,size:String,ghost:Boolean,round:Boolean,secondary:Boolean,tertiary:Boolean,quaternary:Boolean,strong:Boolean,focusable:{type:Boolean,default:!0},keyboard:{type:Boolean,default:!0},tag:{type:String,default:"button"},type:{type:String,default:"default"},dashed:Boolean,renderIcon:Function,iconPlacement:{type:String,default:"left"},attrType:{type:String,default:"button"},bordered:{type:Boolean,default:!0},onClick:[Function,Array],nativeFocusBehavior:{type:Boolean,default:!Cc}}),slots:Object,setup(e){const t=gt(null),n=gt(null),o=gt(!1),r=function(e){const t=Vr(e),n=gt(t.value);return Vo(t,(e=>{n.value=e})),"function"==typeof e?n:{__v_isRef:!0,get value(){return n.value},set value(t){e.set(t)}}}((()=>!e.quaternary&&!e.tertiary&&!e.secondary&&!e.text&&(!e.color||e.ghost||e.dashed)&&e.bordered)),i=go("n-button-group",{}),{mergedSizeRef:s}=function(e,{defaultSize:t="medium",mergedSize:n,mergedDisabled:o}={}){const r=go(dc,null);vo(dc,null);const i=Vr(n?()=>n(r):()=>{const{size:n}=e;if(n)return n;if(r){const{mergedSize:e}=r;if(void 0!==e.value)return e.value}return t}),s=Vr(o?()=>o(r):()=>{const{disabled:t}=e;return void 0!==t?t:!!r&&r.disabled.value}),l=Vr((()=>{const{status:t}=e;return t||(null==r?void 0:r.mergedValidationStatus.value)}));return Hn((()=>{r&&r.restoreValidation()})),{mergedSizeRef:i,mergedDisabledRef:s,mergedStatusRef:l,nTriggerFormBlur(){r&&r.handleContentBlur()},nTriggerFormChange(){r&&r.handleContentChange()},nTriggerFormFocus(){r&&r.handleContentFocus()},nTriggerFormInput(){r&&r.handleContentInput()}}}({},{defaultSize:"medium",mergedSize:t=>{const{size:n}=e;if(n)return n;const{size:o}=i;if(o)return o;const{mergedSize:r}=t||{};return r?r.value:"medium"}}),l=Vr((()=>e.focusable&&!e.disabled)),{inlineThemeDisabled:a,mergedClsPrefixRef:c,mergedRtlRef:u}=pc(e),d=uc("Button","-button",zc,Bc,e,c),p=function(e,t,n){if(!t)return;const o=$s(),r=Vr((()=>{const{value:n}=t;if(n)return n[e]||void 0})),i=go(ol,null),s=()=>{Uo((()=>{const{value:t}=n,s=`${t}${e}Rtl`;if(function(e,t){if(void 0===e)return!1;if(t){const{context:{ids:n}}=t;return n.has(e)}return null!==Ts(e)}(s,o))return;const{value:l}=r;l&&l.style.mount({id:s,head:!0,anchorMetaName:rl,props:{bPrefix:t?`.${t}-`:void 0},ssr:o,parent:null==i?void 0:i.styleMountTarget})}))};return o?s():zn(s),r}("Button",u,c),f=Vr((()=>{const t=d.value,{common:{cubicBezierEaseInOut:n,cubicBezierEaseOut:o},self:r}=t,{rippleDuration:i,opacityDisabled:l,fontWeight:a,fontWeightStrong:c}=r,u=s.value,{dashed:p,type:f,ghost:h,text:v,color:g,round:m,circle:b,textColor:y,secondary:x,tertiary:_,quaternary:C,strong:A}=e,w={"--n-font-weight":A?c:a};let S={"--n-color":"initial","--n-color-hover":"initial","--n-color-pressed":"initial","--n-color-focus":"initial","--n-color-disabled":"initial","--n-ripple-color":"initial","--n-text-color":"initial","--n-text-color-hover":"initial","--n-text-color-pressed":"initial","--n-text-color-focus":"initial","--n-text-color-disabled":"initial"};const $="tertiary"===f,E="default"===f,O=$?"default":f;if(v){const e=y||g;S={"--n-color":"#0000","--n-color-hover":"#0000","--n-color-pressed":"#0000","--n-color-focus":"#0000","--n-color-disabled":"#0000","--n-ripple-color":"#0000","--n-text-color":e||r[Qs("textColorText",O)],"--n-text-color-hover":e?bc(e):r[Qs("textColorTextHover",O)],"--n-text-color-pressed":e?yc(e):r[Qs("textColorTextPressed",O)],"--n-text-color-focus":e?bc(e):r[Qs("textColorTextHover",O)],"--n-text-color-disabled":e||r[Qs("textColorTextDisabled",O)]}}else if(h||p){const e=y||g;S={"--n-color":"#0000","--n-color-hover":"#0000","--n-color-pressed":"#0000","--n-color-focus":"#0000","--n-color-disabled":"#0000","--n-ripple-color":g||r[Qs("rippleColor",O)],"--n-text-color":e||r[Qs("textColorGhost",O)],"--n-text-color-hover":e?bc(e):r[Qs("textColorGhostHover",O)],"--n-text-color-pressed":e?yc(e):r[Qs("textColorGhostPressed",O)],"--n-text-color-focus":e?bc(e):r[Qs("textColorGhostHover",O)],"--n-text-color-disabled":e||r[Qs("textColorGhostDisabled",O)]}}else if(x){const e=E?r.textColor:$?r.textColorTertiary:r[Qs("color",O)],t=g||e,n="default"!==f&&"tertiary"!==f;S={"--n-color":n?bs(t,{alpha:Number(r.colorOpacitySecondary)}):r.colorSecondary,"--n-color-hover":n?bs(t,{alpha:Number(r.colorOpacitySecondaryHover)}):r.colorSecondaryHover,"--n-color-pressed":n?bs(t,{alpha:Number(r.colorOpacitySecondaryPressed)}):r.colorSecondaryPressed,"--n-color-focus":n?bs(t,{alpha:Number(r.colorOpacitySecondaryHover)}):r.colorSecondaryHover,"--n-color-disabled":r.colorSecondary,"--n-ripple-color":"#0000","--n-text-color":t,"--n-text-color-hover":t,"--n-text-color-pressed":t,"--n-text-color-focus":t,"--n-text-color-disabled":t}}else if(_||C){const e=E?r.textColor:$?r.textColorTertiary:r[Qs("color",O)],t=g||e;_?(S["--n-color"]=r.colorTertiary,S["--n-color-hover"]=r.colorTertiaryHover,S["--n-color-pressed"]=r.colorTertiaryPressed,S["--n-color-focus"]=r.colorSecondaryHover,S["--n-color-disabled"]=r.colorTertiary):(S["--n-color"]=r.colorQuaternary,S["--n-color-hover"]=r.colorQuaternaryHover,S["--n-color-pressed"]=r.colorQuaternaryPressed,S["--n-color-focus"]=r.colorQuaternaryHover,S["--n-color-disabled"]=r.colorQuaternary),S["--n-ripple-color"]="#0000",S["--n-text-color"]=t,S["--n-text-color-hover"]=t,S["--n-text-color-pressed"]=t,S["--n-text-color-focus"]=t,S["--n-text-color-disabled"]=t}else S={"--n-color":g||r[Qs("color",O)],"--n-color-hover":g?bc(g):r[Qs("colorHover",O)],"--n-color-pressed":g?yc(g):r[Qs("colorPressed",O)],"--n-color-focus":g?bc(g):r[Qs("colorFocus",O)],"--n-color-disabled":g||r[Qs("colorDisabled",O)],"--n-ripple-color":g||r[Qs("rippleColor",O)],"--n-text-color":y||(g?r.textColorPrimary:$?r.textColorTertiary:r[Qs("textColor",O)]),"--n-text-color-hover":y||(g?r.textColorHoverPrimary:r[Qs("textColorHover",O)]),"--n-text-color-pressed":y||(g?r.textColorPressedPrimary:r[Qs("textColorPressed",O)]),"--n-text-color-focus":y||(g?r.textColorFocusPrimary:r[Qs("textColorFocus",O)]),"--n-text-color-disabled":y||(g?r.textColorDisabledPrimary:r[Qs("textColorDisabled",O)])};let P={"--n-border":"initial","--n-border-hover":"initial","--n-border-pressed":"initial","--n-border-focus":"initial","--n-border-disabled":"initial"};P=v?{"--n-border":"none","--n-border-hover":"none","--n-border-pressed":"none","--n-border-focus":"none","--n-border-disabled":"none"}:{"--n-border":r[Qs("border",O)],"--n-border-hover":r[Qs("borderHover",O)],"--n-border-pressed":r[Qs("borderPressed",O)],"--n-border-focus":r[Qs("borderFocus",O)],"--n-border-disabled":r[Qs("borderDisabled",O)]};const{[Qs("height",u)]:T,[Qs("fontSize",u)]:k,[Qs("padding",u)]:j,[Qs("paddingRound",u)]:F,[Qs("iconSize",u)]:D,[Qs("borderRadius",u)]:B,[Qs("iconMargin",u)]:R,waveOpacity:z}=r,I={"--n-width":b&&!v?T:"initial","--n-height":v?"initial":T,"--n-font-size":k,"--n-padding":b||v?"initial":m?F:j,"--n-icon-size":D,"--n-icon-margin":R,"--n-border-radius":v?"initial":b||m?T:B};return Object.assign(Object.assign(Object.assign(Object.assign({"--n-bezier":n,"--n-bezier-ease-out":o,"--n-ripple-duration":i,"--n-opacity-disabled":l,"--n-wave-opacity":z},w),S),P),I)})),h=a?fc("button",Vr((()=>{let t="";const{dashed:n,type:o,ghost:r,text:i,color:l,round:a,circle:c,textColor:u,secondary:d,tertiary:p,quaternary:f,strong:h}=e;n&&(t+="a"),r&&(t+="b"),i&&(t+="c"),a&&(t+="d"),c&&(t+="e"),d&&(t+="f"),p&&(t+="g"),f&&(t+="h"),h&&(t+="i"),l&&(t+=`j${vc(l)}`),u&&(t+=`k${vc(u)}`);const{value:v}=s;return t+=`l${v[0]}`,t+=`m${o[0]}`,t})),f,e):void 0;return{selfElRef:t,waveElRef:n,mergedClsPrefix:c,mergedFocusable:l,mergedSize:s,showBorder:r,enterPressed:o,rtlEnabled:p,handleMousedown:n=>{var o;l.value||n.preventDefault(),e.nativeFocusBehavior||(n.preventDefault(),e.disabled||l.value&&(null===(o=t.value)||void 0===o||o.focus({preventScroll:!0})))},handleKeydown:t=>{if("Enter"===t.key){if(!e.keyboard||e.loading)return void t.preventDefault();o.value=!0}},handleBlur:()=>{o.value=!1},handleKeyup:t=>{if("Enter"===t.key){if(!e.keyboard)return;o.value=!1}},handleClick:t=>{var o;if(!e.disabled&&!e.loading){const{onClick:r}=e;r&&hc(r,t),e.text||null===(o=n.value)||void 0===o||o.play()}},customColorCssVars:Vr((()=>{const{color:t}=e;if(!t)return null;const n=bc(t);return{"--n-border-color":t,"--n-border-color-hover":n,"--n-border-color-pressed":yc(t),"--n-border-color-focus":n,"--n-border-color-disabled":t}})),cssVars:a?void 0:f,themeClass:null==h?void 0:h.themeClass,onRender:null==h?void 0:h.onRender}},render(){const{mergedClsPrefix:e,tag:t,onRender:n}=this;null==n||n();const o=mc(this.$slots.default,(t=>t&&Nr("span",{class:`${e}-button__content`},t)));return Nr(t,{ref:"selfElRef",class:[this.themeClass,`${e}-button`,`${e}-button--${this.type}-type`,`${e}-button--${this.mergedSize}-type`,this.rtlEnabled&&`${e}-button--rtl`,this.disabled&&`${e}-button--disabled`,this.block&&`${e}-button--block`,this.enterPressed&&`${e}-button--pressed`,!this.text&&this.dashed&&`${e}-button--dashed`,this.color&&`${e}-button--color`,this.secondary&&`${e}-button--secondary`,this.loading&&`${e}-button--loading`,this.ghost&&`${e}-button--ghost`],tabindex:this.mergedFocusable?0:-1,type:this.attrType,style:this.cssVars,disabled:this.disabled,onClick:this.handleClick,onBlur:this.handleBlur,onMousedown:this.handleMousedown,onKeyup:this.handleKeyup,onKeydown:this.handleKeydown},"right"===this.iconPlacement&&o,Nr(Cs,{width:!0},{default:()=>mc(this.$slots.icon,(t=>{return(this.loading||this.renderIcon||t)&&Nr("span",{class:`${e}-button__icon`,style:{margin:(n=this.$slots.default,n&&gc(n())?"":"0")}},Nr(As,null,{default:()=>this.loading?Nr(dl,{clsPrefix:e,key:"loading",class:`${e}-icon-slot`,strokeWidth:20}):Nr("div",{key:"icon",class:`${e}-icon-slot`,role:"none"},this.renderIcon?this.renderIcon():t)}));var n}))}),"left"===this.iconPlacement&&o,this.text?null:Nr(fl,{ref:"waveElRef",clsPrefix:e}),this.showBorder?Nr("div",{"aria-hidden":!0,class:`${e}-button__border`,style:this.customColorCssVars}):null,this.showBorder?Nr("div",{"aria-hidden":!0,class:`${e}-button__state-border`,style:this.customColorCssVars}):null)}}),Mc=Ic,Lc={name:"Divider",common:Fc,self:function(e){const{textColor1:t,dividerColor:n,fontWeightStrong:o}=e;return{textColor:t,color:n,fontWeight:o}}},Hc=qs("divider","\n position: relative;\n display: flex;\n width: 100%;\n box-sizing: border-box;\n font-size: 16px;\n color: var(--n-text-color);\n transition:\n color .3s var(--n-bezier),\n background-color .3s var(--n-bezier);\n",[Js("vertical","\n margin-top: 24px;\n margin-bottom: 24px;\n ",[Js("no-title","\n display: flex;\n align-items: center;\n ")]),Ys("title","\n display: flex;\n align-items: center;\n margin-left: 12px;\n margin-right: 12px;\n white-space: nowrap;\n font-weight: var(--n-font-weight);\n "),Ks("title-position-left",[Ys("line",[Ks("left",{width:"28px"})])]),Ks("title-position-right",[Ys("line",[Ks("right",{width:"28px"})])]),Ks("dashed",[Ys("line","\n background-color: #0000;\n height: 0px;\n width: 100%;\n border-style: dashed;\n border-width: 1px 0 0;\n ")]),Ks("vertical","\n display: inline-block;\n height: 1em;\n margin: 0 8px;\n vertical-align: middle;\n width: 1px;\n "),Ys("line","\n border: none;\n transition: background-color .3s var(--n-bezier), border-color .3s var(--n-bezier);\n height: 1px;\n width: 100%;\n margin: 0;\n "),Js("dashed",[Ys("line",{backgroundColor:"var(--n-color)"})]),Ks("dashed",[Ys("line",{borderColor:"var(--n-color)"})]),Ks("vertical",{backgroundColor:"var(--n-color)"})]),Uc=$n({name:"Divider",props:Object.assign(Object.assign({},uc.props),{titlePlacement:{type:String,default:"center"},dashed:Boolean,vertical:Boolean}),setup(e){const{mergedClsPrefixRef:t,inlineThemeDisabled:n}=pc(e),o=uc("Divider","-divider",Hc,Lc,e,t),r=Vr((()=>{const{common:{cubicBezierEaseInOut:e},self:{color:t,textColor:n,fontWeight:r}}=o.value;return{"--n-bezier":e,"--n-color":t,"--n-text-color":n,"--n-font-weight":r}})),i=n?fc("divider",void 0,r,e):void 0;return{mergedClsPrefix:t,cssVars:n?void 0:r,themeClass:null==i?void 0:i.themeClass,onRender:null==i?void 0:i.onRender}},render(){var e;const{$slots:t,titlePlacement:n,vertical:o,dashed:r,cssVars:i,mergedClsPrefix:s}=this;return null===(e=this.onRender)||void 0===e||e.call(this),Nr("div",{role:"separator",class:[`${s}-divider`,this.themeClass,{[`${s}-divider--vertical`]:o,[`${s}-divider--no-title`]:!t.default,[`${s}-divider--dashed`]:r,[`${s}-divider--title-position-${n}`]:t.default&&n}],style:i},o?null:Nr("div",{class:`${s}-divider__line ${s}-divider__line--left`}),!o&&t.default?Nr(nr,null,Nr("div",{class:`${s}-divider__title`},this.$slots),Nr("div",{class:`${s}-divider__line ${s}-divider__line--right`})):null)}});var Vc=function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{a(o.next(e))}catch(e){i(e)}}function l(e){try{a(o.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,l)}a((o=o.apply(e,t||[])).next())}))};const Nc={class:"popup-container"},Wc={class:"input-container"},Gc=["innerHTML"],qc={key:0,class:"user-id-label"},Yc={key:2,class:"user-id-container"},Kc={class:"user-id-display"},Jc={key:0,class:"button-container"},Qc={class:"info-text"},Xc={class:"output-container"},Zc={class:"output-item"},eu={class:"output-item"},tu=$n({__name:"popup",setup(e){gt(0);const t=gt(""),n=gt(!0),o=gt(!1),r=gt(""),i=gt(""),s=gt({total:0,today:0}),l=gt(!1),a=e=>Vc(this,void 0,void 0,(function*(){try{const t=yield fetch(`http://userdatacollect.hailab.io/interactions_record_status?user_id=${e}`,{method:"GET"});if(t.ok){const e=yield t.json();s.value={total:e.all_time,today:e.on_date}}else i.value=`Failed to fetch stats: ${data.error||"Unknown error"}`}catch(e){i.value=`Error: ${e.message}`}})),c=()=>Vc(this,void 0,void 0,(function*(){try{const e=(yield chrome.tabs.query({active:!0,currentWindow:!0}))[0].url,t=yield Zi(e);r.value=t?'<img src="inactive_icon.png" style="width: 12px; height: 12px; display: inline-block; vertical-align: middle;" /> Actions on this page will <b>not be recorded</b>':'<img src="icon.png" style="width: 12px; height: 12px; display: inline-block; vertical-align: middle;" /> Actions on this page will <b>be recorded</b>'}catch(e){console.error("Error updating recording status:",e)}})),u=()=>{chrome.storage.local.set({userId:t.value},(()=>{i.value="User ID saved."})),n.value=!1,o.value=!0,l.value=t.value.includes(Ji),c(),a(t.value)},d=()=>{n.value=!0,o.value=!1},p=()=>Vc(this,void 0,void 0,(function*(){try{const e=yield chrome.runtime.sendMessage({action:"downloadData",userId:t.value});i.value=e.success?"Data downloaded successfully.":`Failed to download data: ${e.error||"Unknown error"}`}catch(e){i.value=`Error: ${e.message}`}})),f=()=>{try{chrome.storage.local.remove(["user_interaction_tracker_last_timestamp","lastuploadTimestamp"]),chrome.runtime.sendMessage({action:"clearMemoryCache"},(()=>{i.value="Cache cleared successfully."}))}catch(e){i.value=`Error: ${e.message}`}};return In((()=>Vc(this,void 0,void 0,(function*(){c();const e=yield chrome.storage.local.get(["userId"]);e.userId&&(t.value=e.userId,n.value=!1,o.value=!0,l.value=e.userId.includes(Ji),yield a(e.userId))})))),(e,o)=>(ar(),pr("div",Nc,[Cr(' <h1>Hello World</h1>\n    {{ count }}\n    <NButton @click="handleClick">Click me</NButton> '),o[7]||(o[7]=br("h3",null,"Data Collector",-1)),br("div",Wc,[br("div",{innerHTML:r.value,class:"recording-status"},null,8,Gc),n.value?(ar(),pr("div",qc,"User ID:")):Cr("v-if",!0),n.value?an((ar(),pr("input",{key:1,"onUpdate:modelValue":o[0]||(o[0]=e=>t.value=e),type:"text",placeholder:"Enter UserID",class:"user-id-input"},null,512)),[[qi,t.value]]):(ar(),pr("div",Yc,[br("span",Kc,"User ID: "+K(t.value),1),yr(yt(Mc),{onClick:d,class:"edit-button"},{default:ln((()=>o[1]||(o[1]=[_r("Edit")]))),_:1})])),n.value?(ar(),fr(yt(Mc),{key:3,onClick:u,class:"confirm-button"},{default:ln((()=>o[2]||(o[2]=[_r(" Confirm ")]))),_:1})):Cr("v-if",!0)]),l.value?(ar(),pr("div",Jc,[yr(yt(Mc),{onClick:p,class:"action-button"},{default:ln((()=>o[3]||(o[3]=[_r("Download")]))),_:1}),yr(yt(Mc),{onClick:f,class:"action-button"},{default:ln((()=>o[4]||(o[4]=[_r("Clear Data")]))),_:1})])):Cr("v-if",!0),yr(yt(Uc),{class:"divider"}),br("div",Qc,K(i.value),1),br("div",Xc,[br("div",Zc,[o[5]||(o[5]=_r(" Total uploads: ")),br("b",null,K(s.value.total),1)]),br("div",eu,[o[6]||(o[6]=_r(" Today's uploads: ")),br("b",null,K(s.value.today),1)])])]))}});n(474);const nu=tu;console.log(nu),((...e)=>{const t=(Ki||(Ki=Do(Yi))).createApp(...e),{mount:n}=t;return t.mount=e=>{const o=function(e){if(g(e))return document.querySelector(e);return e}(e);if(!o)return;const r=t._component;v(r)||r.render||r.template||(r.template=o.innerHTML),1===o.nodeType&&(o.textContent="");const i=n(o,!1,function(e){return e instanceof SVGElement?"svg":"function"==typeof MathMLElement&&e instanceof MathMLElement?"mathml":void 0}(o));return o instanceof Element&&(o.removeAttribute("v-cloak"),o.setAttribute("data-v-app","")),i},t})(nu).mount("#app")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
