/*! For license information please see injected.js.LICENSE.txt */
(()=>{"use strict";var t="http://userdatacollect.hailab.io",e=["amazon.com","127.0.0.1:8000"],n=("".concat(t,"/interactions_record_status"),"".concat(t,"/check_user_id"),["https://www.amazon.com/checkout/","https://www.amazon.com/gp/buy/","https://www.amazon.com/a/addresses","https://www.amazon.com/cpe/yourpayments/"]);function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function o(){o=function(){return e};var t,e={},n=Object.prototype,a=n.hasOwnProperty,i=Object.defineProperty||function(t,e,n){t[e]=n.value},c="function"==typeof Symbol?Symbol:{},u=c.iterator||"@@iterator",s=c.asyncIterator||"@@asyncIterator",l=c.toStringTag||"@@toStringTag";function f(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{f({},"")}catch(t){f=function(t,e,n){return t[e]=n}}function h(t,e,n,r){var o=e&&e.prototype instanceof w?e:w,a=Object.create(o.prototype),c=new A(r||[]);return i(a,"_invoke",{value:N(t,n,c)}),a}function d(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var p="suspendedStart",m="suspendedYield",y="executing",v="completed",g={};function w(){}function b(){}function E(){}var L={};f(L,u,(function(){return this}));var x=Object.getPrototypeOf,_=x&&x(x(I([])));_&&_!==n&&a.call(_,u)&&(L=_);var k=E.prototype=w.prototype=Object.create(L);function S(t){["next","throw","return"].forEach((function(e){f(t,e,(function(t){return this._invoke(e,t)}))}))}function T(t,e){function n(o,i,c,u){var s=d(t[o],t,i);if("throw"!==s.type){var l=s.arg,f=l.value;return f&&"object"==r(f)&&a.call(f,"__await")?e.resolve(f.__await).then((function(t){n("next",t,c,u)}),(function(t){n("throw",t,c,u)})):e.resolve(f).then((function(t){l.value=t,c(l)}),(function(t){return n("throw",t,c,u)}))}u(s.arg)}var o;i(this,"_invoke",{value:function(t,r){function a(){return new e((function(e,o){n(t,r,e,o)}))}return o=o?o.then(a,a):a()}})}function N(e,n,r){var o=p;return function(a,i){if(o===y)throw Error("Generator is already running");if(o===v){if("throw"===a)throw i;return{value:t,done:!0}}for(r.method=a,r.arg=i;;){var c=r.delegate;if(c){var u=O(c,r);if(u){if(u===g)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===p)throw o=v,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=y;var s=d(e,n,r);if("normal"===s.type){if(o=r.done?v:m,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=v,r.method="throw",r.arg=s.arg)}}}function O(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,O(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var a=d(o,e.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,g;var i=a.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function C(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function P(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function A(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(C,this),this.reset(!0)}function I(e){if(e||""===e){var n=e[u];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(a.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}throw new TypeError(r(e)+" is not iterable")}return b.prototype=E,i(k,"constructor",{value:E,configurable:!0}),i(E,"constructor",{value:b,configurable:!0}),b.displayName=f(E,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===b||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,E):(t.__proto__=E,f(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(T.prototype),f(T.prototype,s,(function(){return this})),e.AsyncIterator=T,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new T(h(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},S(k),f(k,l,"Generator"),f(k,u,(function(){return this})),f(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=I,A.prototype={constructor:A,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(P),!e)for(var n in this)"t"===n.charAt(0)&&a.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(r,o){return c.type="throw",c.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],c=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var u=a.call(i,"catchLoc"),s=a.call(i,"finallyLoc");if(u&&s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&a.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=t,i.arg=e,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),P(n),g}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;P(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:I(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),g}},e}function a(t,e,n,r,o,a,i){try{var c=t[a](i),u=c.value}catch(t){return void n(t)}c.done?e(u):Promise.resolve(u).then(r,o)}function i(t){return null!==t.closest("#reason-modal")}function c(t){return u.apply(this,arguments)}function u(){return t=o().mark((function t(r){var a=arguments;return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(a.length>1&&void 0!==a[1]&&a[1]){t.next=16;break}if(!chrome.storage){t.next=11;break}return t.next=5,chrome.storage.local.get("userId");case 5:if(t.sent.userId){t.next=9;break}return console.log("no user id"),t.abrupt("return",!0);case 9:t.next=16;break;case 11:return t.next=13,new Promise((function(t){var e=function(n){"GET_USER_ID_RESPONSE"===n.data.type&&(window.removeEventListener("message",e),t(n.data.userId))};window.addEventListener("message",e),window.postMessage({type:"GET_USER_ID"},"*")}));case 13:if(t.sent){t.next=16;break}return t.abrupt("return",!0);case 16:if(r){t.next=18;break}return t.abrupt("return",!0);case 18:return t.abrupt("return",!e.some((function(t){return r.includes(t)}))||n.some((function(t){return r.includes(t)})));case 19:case"end":return t.stop()}}),t)})),u=function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function c(t){a(i,r,o,c,u,"next",t)}function u(t){a(i,r,o,c,u,"throw",t)}c(void 0)}))},u.apply(this,arguments);var t}const s={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let l;const f=new Uint8Array(16);function h(){if(!l){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");l=crypto.getRandomValues.bind(crypto)}return l(f)}const d=[];for(let t=0;t<256;++t)d.push((t+256).toString(16).slice(1));const p=function(t,e,n){if(s.randomUUID&&!e&&!t)return s.randomUUID();const r=(t=t||{}).random||(t.rng||h)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,e){n=n||0;for(let t=0;t<16;++t)e[n+t]=r[t];return e}return function(t,e=0){return(d[t[e+0]]+d[t[e+1]]+d[t[e+2]]+d[t[e+3]]+"-"+d[t[e+4]]+d[t[e+5]]+"-"+d[t[e+6]]+d[t[e+7]]+"-"+d[t[e+8]]+d[t[e+9]]+"-"+d[t[e+10]]+d[t[e+11]]+d[t[e+12]]+d[t[e+13]]+d[t[e+14]]+d[t[e+15]]).toLowerCase()}(r)},m=new Set(["role","name","aria-label","rel","href"]);function y(t,e){let n=m.has(t);n||=t.startsWith("data-")&&E(t);let r=E(e)&&e.length<100;return r||=e.startsWith("#")&&E(e.slice(1)),n&&r}function v(t){return E(t)}function g(t){return E(t)}function w(t){return!0}function b(t,e){if(t.nodeType!==Node.ELEMENT_NODE)throw new Error("Can't generate CSS selector for non-element node type.");if("html"===t.tagName.toLowerCase())return"html";const n={root:document.body,idName:v,className:g,tagName:w,attr:y,timeoutMs:1e3,seedMinLength:3,optimizedMinLength:2,maxNumberOfPathChecks:1/0},r=new Date,o={...n,...e},a=function(t,e){return t.nodeType===Node.DOCUMENT_NODE?t:t===e.root?t.ownerDocument:t}(o.root,n);let i,c=0;for(const e of function*(t,e,n){const r=[];let o=[],a=t,i=0;for(;a&&a!==n;){const t=L(a,e);for(const e of t)e.level=i;if(r.push(t),a=a.parentElement,i++,o.push(...C(r)),i>=e.seedMinLength){o.sort(k);for(const t of o)yield t;o=[]}}o.sort(k);for(const t of o)yield t}(t,o,a)){if((new Date).getTime()-r.getTime()>o.timeoutMs||c>=o.maxNumberOfPathChecks){const e=T(t,a);if(!e)throw new Error(`Timeout: Can't find a unique selector after ${o.timeoutMs}ms`);return x(e)}if(c++,P(e,a)){i=e;break}}if(!i)throw new Error("Selector was not found.");const u=[...A(i,t,o,a,r)];return u.sort(k),u.length>0?x(u[0]):x(i)}function E(t){if(/^[a-z\-]{3,}$/i.test(t)){const e=t.split(/-|[A-Z]/);for(const t of e){if(t.length<=2)return!1;if(/[^aeiou]{4,}/i.test(t))return!1}return!0}return!1}function L(t,e){const n=[],r=t.getAttribute("id");r&&e.idName(r)&&n.push({name:"#"+CSS.escape(r),penalty:0});for(let r=0;r<t.classList.length;r++){const o=t.classList[r];e.className(o)&&n.push({name:"."+CSS.escape(o),penalty:1})}for(let r=0;r<t.attributes.length;r++){const o=t.attributes[r];e.attr(o.name,o.value)&&n.push({name:`[${CSS.escape(o.name)}="${CSS.escape(o.value)}"]`,penalty:2})}const o=t.tagName.toLowerCase();if(e.tagName(o)){n.push({name:o,penalty:5});const e=S(t,o);void 0!==e&&n.push({name:O(o,e),penalty:10})}const a=S(t);return void 0!==a&&n.push({name:N(o,a),penalty:50}),n}function x(t){let e=t[0],n=e.name;for(let r=1;r<t.length;r++){const o=t[r].level||0;n=e.level===o-1?`${t[r].name} > ${n}`:`${t[r].name} ${n}`,e=t[r]}return n}function _(t){return t.map((t=>t.penalty)).reduce(((t,e)=>t+e),0)}function k(t,e){return _(t)-_(e)}function S(t,e){const n=t.parentNode;if(!n)return;let r=n.firstChild;if(!r)return;let o=0;for(;r&&(r.nodeType!==Node.ELEMENT_NODE||void 0!==e&&r.tagName.toLowerCase()!==e||o++,r!==t);)r=r.nextSibling;return o}function T(t,e){let n=0,r=t;const o=[];for(;r&&r!==e;){const t=r.tagName.toLowerCase(),e=S(r,t);if(void 0===e)return;o.push({name:O(t,e),penalty:NaN,level:n}),r=r.parentElement,n++}if(P(o,e))return o}function N(t,e){return"html"===t?"html":`${t}:nth-child(${e})`}function O(t,e){return"html"===t?"html":`${t}:nth-of-type(${e})`}function*C(t,e=[]){if(t.length>0)for(let n of t[0])yield*C(t.slice(1,t.length),e.concat(n));else yield e}function P(t,e){const n=x(t);switch(e.querySelectorAll(n).length){case 0:throw new Error(`Can't select any node with this selector: ${n}`);case 1:return!0;default:return!1}}function*A(t,e,n,r,o){if(t.length>2&&t.length>n.optimizedMinLength)for(let a=1;a<t.length-1;a++){if((new Date).getTime()-o.getTime()>n.timeoutMs)return;const i=[...t];i.splice(a,1),P(i,r)&&r.querySelector(x(i))===e&&(yield i,yield*A(i,e,n,r,o))}}function I(t){return I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},I(t)}function M(){M=function(){return e};var t,e={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(t,e,n){t[e]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",c=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function s(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,n){return t[e]=n}}function l(t,e,n,r){var a=e&&e.prototype instanceof v?e:v,i=Object.create(a.prototype),c=new C(r||[]);return o(i,"_invoke",{value:S(t,n,c)}),i}function f(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=l;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function w(){}var b={};s(b,i,(function(){return this}));var E=Object.getPrototypeOf,L=E&&E(E(P([])));L&&L!==n&&r.call(L,i)&&(b=L);var x=w.prototype=v.prototype=Object.create(b);function _(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function k(t,e){function n(o,a,i,c){var u=f(t[o],t,a);if("throw"!==u.type){var s=u.arg,l=s.value;return l&&"object"==I(l)&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,i,c)}),(function(t){n("throw",t,i,c)})):e.resolve(l).then((function(t){s.value=t,i(s)}),(function(t){return n("throw",t,i,c)}))}c(u.arg)}var a;o(this,"_invoke",{value:function(t,r){function o(){return new e((function(e,o){n(t,r,e,o)}))}return a=a?a.then(o,o):o()}})}function S(e,n,r){var o=h;return function(a,i){if(o===p)throw Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:t,done:!0}}for(r.method=a,r.arg=i;;){var c=r.delegate;if(c){var u=T(c,r);if(u){if(u===y)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var s=f(e,n,r);if("normal"===s.type){if(o=r.done?m:d,s.arg===y)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=m,r.method="throw",r.arg=s.arg)}}}function T(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,T(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,e.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function N(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function C(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(N,this),this.reset(!0)}function P(e){if(e||""===e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return a.next=a}}throw new TypeError(I(e)+" is not iterable")}return g.prototype=w,o(x,"constructor",{value:w,configurable:!0}),o(w,"constructor",{value:g,configurable:!0}),g.displayName=s(w,u,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,s(t,u,"GeneratorFunction")),t.prototype=Object.create(x),t},e.awrap=function(t){return{__await:t}},_(k.prototype),s(k.prototype,c,(function(){return this})),e.AsyncIterator=k,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new k(l(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},_(x),s(x,u,"Generator"),s(x,i,(function(){return this})),s(x,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=P,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(O),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return c.type="throw",c.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],c=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(u&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=t,i.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:P(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),y}},e}function j(t,e,n,r,o,a,i){try{var c=t[a](i),u=c.value}catch(t){return void n(t)}c.done?e(u):Promise.resolve(u).then(r,o)}function D(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var a=t.apply(e,n);function i(t){j(a,r,o,i,c,"next",t)}function c(t){j(a,r,o,i,c,"throw",t)}i(void 0)}))}}var R=function(){window.monkeyPatched||function(){window.monkeyPatched=!0;var t=EventTarget.prototype.addEventListener,e=0,n=3e4;function r(t,e,n,r,o,a){var i,c,u,s=(i=document.querySelectorAll("[data-element-meta-name]"),c={},i.forEach((function(t){var e=t.getAttribute("data-element-meta-name"),n=t.getAttribute("data-element-meta-data");c[e]||(c[e]=[]),c[e].push(JSON.parse(n))})),c),l=function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return!e||n>=15?r:(e.hasAttribute("data-clickable-id")&&(r["data-clickable-id"]=e.getAttribute("data-clickable-id")||""),e.hasAttribute("data-element-meta-name")&&(r["data-element-meta-name"]=e.getAttribute("data-element-meta-name")||""),e.hasAttribute("data-element-meta-data")&&(r["data-element-meta-data"]=e.getAttribute("data-element-meta-data")||""),t(e.parentElement,n+1,r))}(e),f=function(t){var e=window.location.href,n=(new Date).toISOString();return"html_".concat(function(t){for(var e=0,n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return console.log("Hash value before return:",e),e.toString()}(e),"_").concat(n,"_").concat(t)}(a),h={tagName:e.tagName,className:e.className,id:e.id,innerText:e.innerText||e.value||"",outerHTML:e.outerHTML},d=((u=document.cloneNode(!0)).querySelectorAll('a, button, [onclick], input[type="button"], input[type="submit"]').forEach((function(t){var e=t.getBoundingClientRect();e.top>=0&&e.left>=0&&e.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&e.right<=(window.innerWidth||document.documentElement.clientWidth)&&t.setAttribute("visible-clickable-element-marker","true")})),u);return{uuid:a,eventType:t,timestamp:n,target:h,htmlSnapshotId:f,selector:r||"","data-semantic-id":l["data-clickable-id"]||"","element-meta-name":l["data-element-meta-name"]||"","element-meta-data":l["data-element-meta-data"]||"","page-meta":s||"",url:o||"",htmlContent:d.documentElement.outerHTML}}var o={},a={},c=function(t){return new Promise((function(e,n){t.aborted?e(void 0):t.addEventListener("abort",(function(){return e(void 0)}),{once:!0})}))},u=function(t){var e=t.target;return!!e.closest("a")||"input"===e.tagName.toLowerCase()&&"submit"===e.type};EventTarget.prototype.addEventListener=function(s,l){var f=this,h=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(h&&h.skip_monkey_patch)return t.call(this,s,l,h);var d=function(t){"function"==typeof l?l.call(f,t):l&&"function"==typeof l.handleEvent&&l.handleEvent.call(l,t)};if("click"===s&&l){var m=function(){var t=D(M().mark((function t(s){var f,h,m,y,v,g,w,E,L,x,_,k,S,T;return M().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!window.shouldExclude){t.next=4;break}return console.log("should exclude"),d(s),t.abrupt("return");case 4:if(!i(f=s.target)){t.next=8;break}return d(s),t.abrupt("return");case 8:if(!s.just_for_default){t.next=11;break}return console.log("skip monkey patch"),t.abrupt("return");case 11:if(!((h=Date.now())-e<150)){t.next=26;break}if(m=new AbortController,a[e].push(m),!o[e]){t.next=22;break}return y=o[e].signal,t.next=19,c(y);case 19:console.log("[Monkey Patch] Debouncing click event, unblocking"),t.next=23;break;case 22:console.log("[Monkey Patch] Debouncing click event, no block signal");case 23:return"function"==typeof l?l.call(this,s):l&&"function"==typeof l.handleEvent&&l.handleEvent.call(l,s),m.abort(),t.abrupt("return");case 26:if(o[e=h]=new AbortController,a[e]=[],console.log("[Monkey Patch] Click detected on:",s.target),console.log(s.target),v=(new Date).toISOString(),console.log(s.target),!u(s)){t.next=68;break}return console.log("[Monkey Patch] Click on cancelable"),s.preventDefault(),s.preventDefault=function(){s.my_default_prevented=!0},s.my_default_prevented=!1,console.log("after patch event",s),g=p(),t.prev=40,w=new Promise((function(t,e){function r(n){"SCREENSHOT_COMPLETE"===n.data.type&&n.data.timestamp===v&&(window.removeEventListener("message",r),n.data.success?t(void 0):e(new Error(n.data.error||"Screenshot failed")))}window.addEventListener("message",r),setTimeout((function(){window.removeEventListener("message",r),e(new Error("Screenshot timeout"))}),n)})),E=new Promise((function(t,e){function r(n){"INTERACTION_COMPLETE"===n.data.type&&n.data.timestamp===v&&(window.removeEventListener("message",r),n.data.success?t(void 0):e(new Error(n.data.error||"Interaction failed")))}window.addEventListener("message",r),setTimeout((function(){window.removeEventListener("message",r),e(new Error("Interaction timeout"))}),n)})),L=r("click_a",s.target,v,b(s.target),window.location.href,g),window.postMessage({type:"CAPTURE_SCREENSHOT",timestamp:v,uuid:g},"*"),window.postMessage({type:"SAVE_INTERACTION_DATA",data:L,uuid:g},"*"),t.next=48,w;case 48:return t.next=50,E;case 50:t.next=55;break;case 52:t.prev=52,t.t0=t.catch(40),console.error("Error:",t.t0);case 55:return t.prev=55,console.log("running original listener"),console.log(l),console.log(s),o[e].abort(),t.next=62,Promise.all(a[e].map((function(t){return c(t.signal)})));case 62:return d(s),console.log("event",s),console.log("re-dispatch the event if its not prevented, 2"),s.my_default_prevented||((x=new MouseEvent(s.type,{bubbles:s.bubbles,cancelable:!1,composed:s.composed,view:s.view,detail:s.detail,screenX:s.screenX,screenY:s.screenY,clientX:s.clientX,clientY:s.clientY,ctrlKey:s.ctrlKey,altKey:s.altKey,shiftKey:s.shiftKey,metaKey:s.metaKey,button:s.button,buttons:s.buttons,relatedTarget:s.relatedTarget})).just_for_default=!0,f.dispatchEvent(x)),t.finish(55);case 67:return t.abrupt("return");case 68:return _=p(),t.prev=69,k=new Promise((function(t,e){function r(n){"SCREENSHOT_COMPLETE"===n.data.type&&n.data.timestamp===v&&(window.removeEventListener("message",r),n.data.success?t(void 0):e(new Error(n.data.error||"Screenshot failed")))}window.addEventListener("message",r),setTimeout((function(){window.removeEventListener("message",r),e(new Error("Screenshot timeout"))}),n)})),S=r("click_b",s.target,v,b(s.target),window.location.href,_),window.postMessage({type:"CAPTURE_SCREENSHOT",timestamp:v,uuid:_},"*"),window.postMessage({type:"SAVE_INTERACTION_DATA",data:S,uuid:_},"*"),T=new Promise((function(t,e){function r(n){"INTERACTION_COMPLETE"===n.data.type&&n.data.timestamp===v&&(window.removeEventListener("message",r),n.data.success?t(void 0):e(new Error(n.data.error||"Interaction failed")))}window.addEventListener("message",r),setTimeout((function(){window.removeEventListener("message",r),e(new Error("Interaction timeout"))}),n)})),t.next=77,k;case 77:return t.next=79,T;case 79:t.next=84;break;case 81:t.prev=81,t.t1=t.catch(69),console.error("Error capturing screenshot:",t.t1);case 84:return t.prev=84,console.log("running original listener"),d(s),t.finish(84);case 88:case"end":return t.stop()}}),t,this,[[40,52,55,67],[69,81,84,88]])})));return function(e){return t.apply(this,arguments)}}();return h&&("boolean"==typeof h?h={useCapture:!1,passive:!1}:"object"===I(h)&&(h.passive=!1)),t.call(this,s,m,h)}return t.call(this,s,l,h)},console.log("[Monkey Patch] addEventListener successfully patched."),document.addEventListener("click",function(){var t=D(M().mark((function t(a){var c,s,l,f,h,d,m,y;return M().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!window.shouldExclude){t.next=3;break}return console.log("should exclude"),t.abrupt("return");case 3:if(!i(a.target)){t.next=5;break}return t.abrupt("return");case 5:if(!a.just_for_default){t.next=8;break}return console.log("skip monkey patch b"),t.abrupt("return");case 8:if(!((c=Date.now())-e<150)){t.next=12;break}return console.log("[Monkey Patch] Debouncing anchor click event"),t.abrupt("return");case 12:if(o[e=c]=new AbortController,s=a.target,!u(a)){t.next=41;break}return console.log("[Intercepted] Click on cancelable"),a.preventDefault(),a.stopPropagation(),l=(new Date).toISOString(),f=p(),t.prev=21,h=new Promise((function(t,e){function r(n){"SCREENSHOT_COMPLETE"===n.data.type&&n.data.timestamp===l&&(window.removeEventListener("message",r),n.data.success?t(void 0):e(new Error(n.data.error||"Screenshot failed")))}window.addEventListener("message",r,{capture:!0}),setTimeout((function(){window.removeEventListener("message",r),e(new Error("Screenshot timeout"))}),n)})),window.postMessage({type:"CAPTURE_SCREENSHOT",timestamp:l,uuid:f},"*"),d=r("click_c",a.target,l,b(s),window.location.href,f),window.postMessage({type:"SAVE_INTERACTION_DATA",data:d,uuid:f},"*"),m=new Promise((function(t,e){function r(n){"INTERACTION_COMPLETE"===n.data.type&&n.data.timestamp===l&&(window.removeEventListener("message",r),n.data.success?t(void 0):e(new Error(n.data.error||"Interaction failed")))}window.addEventListener("message",r),setTimeout((function(){window.removeEventListener("message",r),e(new Error("Interaction timeout"))}),n)})),t.next=29,h;case 29:return t.next=31,m;case 31:t.next=36;break;case 33:t.prev=33,t.t0=t.catch(21),console.error("Error capturing screenshot:",t.t0);case 36:return t.prev=36,o[e].abort(),console.log("re-dispatch the event if its not prevented, 1"),a.my_default_prevented||((y=new MouseEvent(a.type,{bubbles:a.bubbles,cancelable:!1,composed:a.composed,view:a.view,detail:a.detail,screenX:a.screenX,screenY:a.screenY,clientX:a.clientX,clientY:a.clientY,ctrlKey:a.ctrlKey,altKey:a.altKey,shiftKey:a.shiftKey,metaKey:a.metaKey,button:a.button,buttons:a.buttons,relatedTarget:a.relatedTarget})).just_for_default=!0,alert("re-dispatch the event"),s.dispatchEvent(y)),t.finish(36);case 41:case"end":return t.stop()}}),t,null,[[21,33,36,41]])})));return function(e){return t.apply(this,arguments)}}(),{useCapture:!0,skip_monkey_patch:!0,passive:!1})}(),document.addEventListener("DOMContentLoaded",(function(){console.log("DOMContentLoaded"),c(window.location.href).then((function(t){console.log("shouldExclude",t),window.shouldExclude=t}))}),{once:!0})};c(window.location.href,!0).then((function(t){t||R()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,