(()=>{"use strict";const e=["www.amazon.com"],t=["https://www.amazon.com/checkout/","https://www.amazon.com/gp/buy/","https://www.amazon.com/a/addresses","https://www.amazon.com/cpe/yourpayments/","https://www.amazon.com/ap/signin","https://www.amazon.com/ap/cvf/","https://www.amazon.com/ap/profile/","https://www.amazon.com/ax/account/","https://www.amazon.com/gp/product/handle-buy-box/","https://www.amazon.com/gp/checkoutportal/","https://www.amazon.com/gp/cart/desktop/","https://www.amazon.com/gp/primecentral/editPaymentPreference"],a={selector:"#navbar-main",name:"nav_bar",children:[{selector:"#nav-search-bar-form",children:[{selector:"input#twotabsearchtextbox",name:"search_input",clickable:!0,generate_metadata:e=>({name:"search_term",data:{term:null==e?void 0:e.value}})},{selector:"#nav-search-submit-button",clickable:!0,name:"search_button"}]},{selector:"#nav-link-accountList",text_selector:"#nav-link-accountList span.nav-line-2",add_text:!0,clickable:!0,name:"account_and_list_button"},{selector:"#nav-orders",add_text:!0,clickable:!0,name:"order_button"},{selector:"#nav-cart",text_selector:"#nav-cart .nav-line-2",add_text:!0,clickable:!0,name:"cart_button"},{selector:"#nav-flyout-searchAjax",name:"suggested_terms",children:[{selector:"div.s-suggestion-ellipsis-direction",name:"from_text",add_text:!0,clickable:!0}]}]},n={selector:"#nav-flyout-ewc",name:"cart_side_bar",children:[{selector:"div.ewc-cart-header",add_text:!0},{selector:"div.ewc-compact-actions a",add_text:!0,clickable:!0,name:"go_to_cart"},{selector:"#ewc-compact-body ul",name:"product_list",children:[{selector:"li div[id^='sc-item']",name:"from_text",text_js:e=>{const t=e.querySelector("div.ewc-item-image a.sc-product-link img:not(.ewc-sfl-image-small)");return(null==t?void 0:t.alt)||""},children:[{selector:"div.ewc-item-image a.sc-product-link img:not(.ewc-sfl-image-small)",name:"product_image",clickable:!0,add_text:!0,text_format:"Product Image"},{selector:"span.ewc-unit-price",add_text:!0},{selector:"select",name:"drop_down_list"},{selector:'div[data-action="a-dropdown-button"], span[data-action="a-dropdown-button"]',name:"drop_down_list",clickable:!0,add_text:!0},{selector:"div.ewc-delete-icon-container button",name:"delete",add_text:!0,text_format:"delete",clickable:!0}],generate_metadata:e=>{var t;const a=e.getAttribute("data-asin"),n=e.querySelector("span.ewc-unit-price"),r=null===(t=null==n?void 0:n.innerText)||void 0===t?void 0:t.replace(/[\n]/g,"").trim(),i=e.querySelector("div.ewc-item-image a.sc-product-link img:not(.ewc-sfl-image-small)"),l=null==i?void 0:i.alt,o=null==i?void 0:i.parentElement,c=null==o?void 0:o.getAttribute("href"),s=e.querySelector('div[data-action="a-dropdown-button"], span[data-action="a-dropdown-button"]');return{name:"cart_items",data:{title:l,asin:a,price:r,url:c,quantity:null==s?void 0:s.innerText}}}}]}]},r={selector:"#productFactsDesktopExpander",add_text:!0,class:"product-facts"},i={selector:"div.mir-layout-DELIVERY_BLOCK-slot-PRIMARY_DELIVERY_MESSAGE_LARGE",add_text:!0,class:"product-delivery"},l={selector:'#selectQuantity, div[id^="qs-widget-button-container-atfc"]',name:"quantity_selector",children:[{selector:"label",add_text:!0},{selector:"span.a-dropdown-prompt",add_text:!0,generate_metadata:e=>({name:"product_quantity",data:{quantity:e.innerText}})},{selector:"select",name:"drop_down_list"},{selector:"button",name:"drop_down_list",clickable:!0,add_text:!0},{selector:'div.qs-widget-dropdown-wrapper span[data-action="qs-widget-dropdown-decl"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text",text_format:"Drop Down Option {}"}]},o={selector:"input[name='submit.add-to-cart'], input[name='submit.add-to-cart-ubb'], #freshAddToCartButton input",add_text:!0,clickable:!0,name:"add_to_cart",class:"product-add-to-cart"},c={selector:"input[name='submit.buy-now']",add_text:!0,clickable:!0,name:"buy_now",class:"product-buy-now"},s={selector:"#buyBoxAccordion > div.a-box.celwidget",name:"from_text",text_selector:"div.accordion-caption > span",children:[{selector:"div[data-csa-c-content-id='offer_display_desktop_accordion_header'], div[data-csa-c-content-id='offer_display_mobile_accordion_header']",name:"accordion_selector",add_text:!0,clickable:!0,text_selector:"h5 span.a-text-bold"},{selector:"div.a-accordion-inner.accordion-row-content",name:"purchase_form",children:[r,i,l,{selector:"#replenishmentFrequency_feature_div",name:"delivery_frequency_selector",text_selector:"div.a-section.a-spacing-micro > span",add_text:!0,children:[{selector:"#rcxOrdFreqOnmlWrapper span.a-dropdown-prompt",add_text:!0},{selector:"#rcxOrdFreqOnmlWrapper select",name:"drop_down_list"}]},{selector:"#rcx-subscribe-submit-button-announce",add_text:!0,clickable:!0,name:"set_up_now",class:"product-set-up-now"},o,c]}]},d={selector:"#gsod_singleOfferDisplay_Desktop",children:[{selector:"#addToCart",name:"purchase_form",children:[r,i,l,o,c]}]},u=[a,{selector:"#sc-collapsed-carts-container",name:"cart",children:[{selector:"div.sc-localmarket-text-logo",add_text:!0},{selector:'div[data-name="collapsed_item_list"]',clickable:!0,name:"item_list"},{selector:'div.sc-buy-box-inner-box input[name^="proceedToALMCheckout"]',clickable:!0,name:"check_out",add_text:!0},{selector:"div.sc-buy-box-inner-box a",clickable:!0,name:"from_text",add_text:!0}]},{selector:"div[data-name='Active Items']",name:"active_item_list",children:[{selector:"div.sc-list-item-content",text_selector:"div.sc-item-content-group ul > li > span.a-list-item > a.sc-product-title span.a-truncate-full",name:"from_text",children:[{selector:"div.sc-item-check-checkbox-selector label",clickable:!0,name:"checkbox"},{selector:"div.sc-image-wrapper a",clickable:!0,name:"product_image",add_text:!0,text_format:"Product Image"},{selector:"div.sc-item-content-group ul > li > span.a-list-item > a.sc-product-title",clickable:!0,text_selector:"span.a-truncate-full",add_text:!0,name:"product_detail"},{selector:"li.sc-delivery-messaging",add_text:!0},{selector:"div.sc-badge-price-to-pay span.sc-product-price span:not(.a-offscreen)",add_text:!0},{selector:"li.sc-product-variation",add_text:!0},{selector:"div.sc-item-content-group span.sc-quantity-stepper",children:[{selector:"button[aria-label='Decrease quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div[role='spinbutton']",add_text:!0,text_format:"Current Quantity: {}"},{selector:"button[aria-label='Increase quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]},{selector:"div.sc-item-content-group input[data-action='delete']",add_text:!0,clickable:!0,name:"delete"},{selector:"div.sc-item-content-group input[data-action='save-for-later']",add_text:!0,clickable:!0,name:"save_for_later"}],generate_metadata:e=>{var t,a;const n=null===(t=e.parentElement)||void 0===t?void 0:t.getAttribute("data-asin"),r=e.querySelector("div.sc-badge-price-to-pay span.sc-product-price span:not(.a-offscreen)"),i=null===(a=null==r?void 0:r.innerText)||void 0===a?void 0:a.replace(/[\n]/g,""),l=e.querySelector("div.sc-item-content-group ul > li > span.a-list-item > a.sc-product-title span.a-truncate-full"),o=null==l?void 0:l.innerText,c=e.querySelector("div.sc-item-content-group ul > li > span.a-list-item > a.sc-product-title"),s=null==c?void 0:c.getAttribute("href"),d=e.querySelector("li.sc-delivery-messaging"),u=null==d?void 0:d.innerText.replace(/[\n]/g," "),m=e.querySelector("div.sc-item-content-group span.sc-quantity-stepper div[role='spinbutton']"),p=null==m?void 0:m.innerText,_=e.querySelector("div.sc-item-check-checkbox-selector input"),v=null!==(null==_?void 0:_.getAttribute("checked")),b=e.querySelectorAll("li.sc-product-variation > span"),h=[];for(const e of b){const t=null==e?void 0:e.querySelector("span.a-text-bold"),a=null==e?void 0:e.querySelector("span:not(.a-text-bold)"),n=null==t?void 0:t.innerText.replace(/[:\n]/g,"").trim(),r=null==a?void 0:a.innerText.replace(/[:\n]/g,"").trim(),i={[n]:r};h.push(i)}return{name:"active_items",data:{title:o,asin:n,price:i,url:s,delivery:u,quantity:p,selected:v,options:h}}}}]},{selector:"#sc-buy-box-ptc-button input",add_text:!0,clickable:!0,name:"check_out"}],m={selector:'li.a-carousel-card, div[id^="gridElement"]',name:"from_text",text_selector:"span.a-truncate-full",children:[{selector:"a:has(div.a-image-container)",name:"product_image",add_text:!0,text_format:"Product Image",clickable:!0},{selector:"span[id^='qs-widget-atc-button']",name:"add_to_cart",add_text:!0,text_format:"Add To Cart",clickable:!0},{selector:'div[id^="qs-widget-button-container-atfc"]',name:"quantity_selector",children:[{selector:"input[aria-label^='Remove']",add_text:!0,text_format:"Decrease quantity by 1",name:"from_text",clickable:!0},{selector:"button[id^='qs-widget-button-atfc']",add_text:!0},{selector:"input[aria-label^='Add']",add_text:!0,text_format:"Increase quantity by 1",name:"from_text",clickable:!0}]},{selector:"a > span > span > span.a-truncate-full",add_text:!0,name:"product_detail",clickable:!0},{selector:"div > span > span > span.a-truncate-full",add_text:!0},{selector:'div[class*="priceToPay"] span.a-offscreen',add_text:!0},{selector:"li.a-carousel-card a.a-size-mini",name:"from_text",clickable:!0,add_text:!0}],generate_metadata:e=>{var t,a;const n=e.querySelector('div[data-csa-c-item-id^="amzn1.asin"]'),r=null===(t=null==n?void 0:n.getAttribute("data-csa-c-item-id"))||void 0===t?void 0:t.split(":")[0].split(".").pop(),i=e.querySelector('div[class*="priceToPay"] span.a-offscreen'),l=null===(a=null==i?void 0:i.innerText)||void 0===a?void 0:a.replace(/[\n]/g,""),o=e.querySelector("span.a-truncate-full"),c=null==o?void 0:o.innerText,s=e.querySelector("a:has(span.a-truncate-full)"),d=null==s?void 0:s.getAttribute("href"),u=e.querySelector('div[id^="qs-widget-button-container-atfc"] button[id^="qs-widget-button-atfc"]');return{name:"promotion_items",data:{title:c,asin:r,price:l,url:d,quantity:null==u?void 0:u.innerText}}}},p=[{match:"/",match_method:"url",match_with_ref:!0,selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[a,n]}]},{match:"/fmc/storefront",match_method:"url",match_with_ref:!0,selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[a,n]}]},{match:"/s",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[a,n,{selector:"#s-refinements",name:"refinements",children:[{selector:"#topRefinements\\/0",name:"top_refinements",add_text:"true",text_format:"Recently used filters",children:[{selector:"li",add_text:!0,name:"from_text",clickable:!0,text_js:function(e){try{let t="";if(!e)return t;const a=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())t+=e.innerText.trim(),a&&a.hasAttribute("title")&&(t+=" ",t+=a.getAttribute("title"));else{const a=e.querySelector("a.a-link-normal.s-navigation-item");a&&a.hasAttribute("title")&&(t+=a.getAttribute("title"))}return t}catch(e){return console.log(e),""}},children:[{selector:"input[type='checkbox']"}]}]},{selector:"div.a-section.a-spacing-none:not(:has(#n-title)):has(span.a-size-base.a-color-base.puis-bold-weight-text):has(ul span.a-declarative > span > li):not(#reviewsRefinements):not(#departments):not(#priceRefinements):not(#filters)",name:"from_text",text_selector:"span.a-size-base.a-color-base.puis-bold-weight-text",children:[{selector:"span.a-size-base.a-color-base.puis-bold-weight-text",add_text:!0,class:"refinement-title"},{selector:"a.s-navigation-clear-link",add_text:!0,name:"clear_selection",clickable:!0},{selector:"ul > span.a-declarative > span > li:has(a.a-link-normal.s-navigation-item)",add_text:!0,name:"from_text",clickable:!0,direct_child:!0,text_js:function(e){try{let t="";if(!e)return t;const a=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())t+=e.innerText.trim(),a&&a.hasAttribute("title")&&(t+=" ",t+=a.getAttribute("title"));else{const a=e.querySelector("a.a-link-normal.s-navigation-item");a&&a.hasAttribute("title")&&(t+=a.getAttribute("title"))}return a&&a.getAttribute("aria-current"),t}catch(e){return console.log(e),""}},generate_metadata:e=>{var t,a,n;let r="";const i=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())r+=e.innerText.trim(),i&&i.hasAttribute("title")&&(r+="_",r+=i.getAttribute("title"));else{const t=e.querySelector("a.a-link-normal.s-navigation-item");t&&t.hasAttribute("title")&&(r+=t.getAttribute("title"))}const l=null===(a=null===(t=e.closest("ul"))||void 0===t?void 0:t.parentElement)||void 0===a?void 0:a.firstElementChild,o=null===(n=null==l?void 0:l.innerText)||void 0===n?void 0:n.replace(/[ ]/g,"_").toLowerCase().trim();let c="";return i&&i.hasAttribute("href")&&(c=i.getAttribute("href")),i&&"true"===i.getAttribute("aria-current")?{name:"refinements."+o,data:{title:(null==r?void 0:r.trim())||"",selected:!0,url:c}}:{name:"refinements."+o,data:{title:(null==r?void 0:r.trim())||"",selected:!1,url:c}}},children:[{selector:"input[type='checkbox']"}]},{selector:"ul > span.a-declarative > li > span > div[data-a-expander-name='filter-content-expander']",name:"more_options",children:[{selector:"a[data-csa-c-func-deps='aui-da-a-expander-toggle']",name:"toggle_expansion",add_text:!0},{selector:"li",add_text:!0,name:"from_text",clickable:!0,text_js:function(e){try{let t="";if(!e)return t;const a=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())t+=e.innerText.trim(),a&&a.hasAttribute("title")&&(t+=" ",t+=a.getAttribute("title"));else{const a=e.querySelector("a.a-link-normal.s-navigation-item");a&&a.hasAttribute("title")&&(t+=a.getAttribute("title"))}return a&&a.getAttribute("aria-current"),t}catch(e){return console.log(e),""}},generate_metadata:e=>{var t,a,n,r,i;let l="";const o=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())l+=e.innerText.trim(),o&&o.hasAttribute("title")&&(l+="_",l+=o.getAttribute("title"));else{const t=e.querySelector("a.a-link-normal.s-navigation-item");t&&t.hasAttribute("title")&&(l+=t.getAttribute("title"))}const c=null===(r=null===(n=null===(a=null===(t=e.closest("ul"))||void 0===t?void 0:t.parentElement)||void 0===a?void 0:a.closest("ul"))||void 0===n?void 0:n.parentElement)||void 0===r?void 0:r.firstElementChild,s=null===(i=null==c?void 0:c.innerText)||void 0===i?void 0:i.replace(/[ ]/g,"_").toLowerCase().trim();let d="";return o&&o.hasAttribute("href")&&(d=o.getAttribute("href")),o&&"true"===o.getAttribute("aria-current")?{name:"refinements."+s,data:{title:(null==l?void 0:l.trim())||"",selected:!0,url:d}}:{name:"refinements."+s,data:{title:(null==l?void 0:l.trim())||"",selected:!1,url:d}}},children:[{selector:"input[type='checkbox']"}]}]}]},{selector:"#departments",name:"departments",add_text:!0,text_format:"Department",children:[{selector:"li a",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>{const t=null==e?void 0:e.getAttribute("aria-current"),a=null==e?void 0:e.innerText,n=null==e?void 0:e.getAttribute("href");return t&&"true"==t?{name:"refinements.departments",data:{title:a,selected:!0,url:n}}:{name:"refinements.departments",data:{title:a,selected:!1,url:n}}}}]},{selector:"#reviewsRefinements",name:"reviews_refinements",add_text:!0,text_format:"Customer Reviews",children:[{selector:"a.s-navigation-clear-link",add_text:!0,name:"clear_selection",clickable:!0},{selector:"li a[aria-current='true']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>{var t;return{name:"refinements.reviews",data:{title:null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.replace(/\n/g," "),selected:!0,url:null==e?void 0:e.getAttribute("href")}}}},{selector:"li a[aria-current='false']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>{var t;return{name:"refinements.reviews",data:{title:null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.replace(/\n/g," "),selected:!1,url:null==e?void 0:e.getAttribute("href")}}}}]},{selector:"#priceRefinements",name:"price_refinements",children:[{selector:"#p_36-title, div.sf-refinement-heading span",add_text:!0,name:"price_heading"},{selector:"div[aria-labelledby='p_36-title'] > a",add_text:!0,name:"clear_price_selection",clickable:!0},{selector:"ul[aria-labelledby='p_36-title'] a[aria-current='true']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>({name:"refinements.price",data:{title:null==e?void 0:e.innerText,selected:!0,url:null==e?void 0:e.getAttribute("href")}})},{selector:"ul[aria-labelledby='p_36-title'] a[aria-current='false']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>({name:"refinements.price",data:{title:null==e?void 0:e.innerText,selected:!1,url:null==e?void 0:e.getAttribute("href")}})},{selector:"div.sf-range-slider-row:nth-of-type(1)",add_text:!0,generate_metadata:e=>{var t;return{name:"refinements.price",data:{title:"price_range",range:null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.replace(/\n/g,"")}}}},{selector:"div.sf-range-slider-row:nth-of-type(2) div.s-lower-bound input",name:"price_min_value",add_text:!0,clickable:!0,keep_attr:["min","max","step"],override_attr:{step_values:e=>{const t=e.closest("form");if(t){const e=t.getAttribute("data-slider-props");if(e)return JSON.parse(e).stepLabels}return""},current_value:e=>{const t=Number.parseInt(e.getAttribute("value"));if(null!==t){const a=e.closest("form");if(a){const e=a.getAttribute("data-slider-props");if(e)return JSON.parse(e).stepLabels[t]}}return""}}},{selector:"div.sf-range-slider-row:nth-of-type(2) div.s-upper-bound input",name:"price_max_value",add_text:!0,clickable:!0,keep_attr:["min","max","step"],override_attr:{step_values:e=>{const t=e.closest("form");if(t){const e=t.getAttribute("data-slider-props");if(e)return JSON.parse(e).stepLabels}return""},current_value:e=>{const t=Number.parseInt(e.getAttribute("value"));if(null!==t){const a=e.closest("form");if(a){const e=a.getAttribute("data-slider-props");if(e)return JSON.parse(e).stepLabels[t]}}return""}}},{selector:"div.sf-submit-range-button input",name:"submit_price_range",add_text:!0,text_format:"Go",clickable:!0},{selector:"div.sf-reset-range-link a",name:"reset_price_selection",add_text:!0,clickable:!0},{selector:"#p_n_deal_type-title",add_text:!0,name:"deals_discounts_heading"},{selector:"div[aria-labelledby='p_n_deal_type-title'] > a",add_text:!0,name:"clear_deals_discount_selection",clickable:!0},{selector:"ul[aria-labelledby='p_n_deal_type-title'] a[aria-current='true']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>({name:"refinements.price",data:{title:null==e?void 0:e.innerText,selected:!0,url:null==e?void 0:e.getAttribute("href")}})},{selector:"ul[aria-labelledby='p_n_deal_type-title'] a[aria-current='false']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>({name:"refinements.price",data:{title:null==e?void 0:e.innerText,selected:!1,url:null==e?void 0:e.getAttribute("href")}})}]}]},{selector:"div.s-main-slot.s-result-list.s-search-results",name:"search_results",children:[{selector:"div.AdHolder",name:"ads",children:[{selector:"div[data-asin]",name:"from_text",add_text:!0,clickable:!0,text_js:e=>{const t=e.querySelector("img");return(null==t?void 0:t.getAttribute("alt")).trim()||""},generate_metadata:e=>{const t=null==e?void 0:e.getAttribute("data-asin"),a=e.querySelector("img"),n=null==a?void 0:a.getAttribute("alt"),r=e.querySelector("a[data-type='productTitle']");return{name:"ads",data:{title:n,asin:t,url:null==r?void 0:r.getAttribute("href")}}}}]},{insert_split_marker:!0,insert_split_marker_every:4,selector:'div[data-component-type="s-search-result"]',text_selector:"span.a-color-base.a-text-normal, h2.a-color-base.a-text-normal span",name:"from_text",class:"search-result",children:[{selector:"div[data-cy='title-recipe'] a.a-link-normal.s-link-style.a-text-normal",add_text:!0,class:"product-name",clickable:!0,name:"product_name"},{selector:"div.s-product-image-container",add_text:!0,name:"product_image",clickable:!0,text_format:"Product Image"},{selector:"div.s-color-swatch-container",name:"available_colors",children:[{selector:"div.s-color-swatch-pad",name:"from_text",clickable:!0,add_text:!0,text_js:e=>{const t=e.querySelector("a");return t&&t.getAttribute("aria-label")||""}},{selector:"div[data-csa-c-type='link'] a",direct_child:!0,name:"from_text",clickable:!0,add_text:!0}]},{selector:"div.s-variations-options-elevated, div.s-variations-options-justify-content",name:"options",add_text:!0,clickable:!0,click_selector:"a"},{selector:"div[data-cy='reviews-block']",class:"product-review",children:[{selector:"span.a-icon-alt",add_text:!0,class:"product-rating"},{selector:"span.a-size-base.s-underline-text",add_text:!0,text_format:"{} reviews",class:"product-rating-count",name:"product_rating_count",clickable:!0}]},{selector:"div[data-cy='price-recipe']",class:"product-price",children:[{selector:"a.a-link-normal > span.a-price > span.a-offscreen",add_text:!0}]},{selector:"div[data-cy='delivery-recipe']",add_text:!0,class:"product-delivery"},{selector:"div[data-cy='add-to-cart'] button, span[id*='add-to-cart'] input",add_text:!0,clickable:!0,name:"add_to_cart"},{selector:"div[data-csa-c-content-id='s-search-see-details-button'] a",add_text:!0,clickable:!0,name:"see_options"},{selector:'div[name="ax-qs"]',children:[{selector:"button[aria-label='Decrease quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div[role='spinbutton']",add_text:!0,text_format:"Current Quantity: {}"},{selector:"button[aria-label='Increase quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]}],generate_metadata:e=>{const t=e.getAttribute("data-asin"),a=e.querySelector("div[data-cy='price-recipe'] a.a-link-normal > span.a-price > span.a-offscreen"),n=null==a?void 0:a.innerText,r=e.querySelector("span.a-color-base.a-text-normal, h2.a-color-base.a-text-normal span"),i=null==r?void 0:r.innerText,l=e.querySelector("div[data-cy='title-recipe'] a.a-link-normal.s-link-style.a-text-normal"),o=null==l?void 0:l.getAttribute("href"),c=e.querySelector("div[data-cy='delivery-recipe']");return{name:"search_results",data:{title:i,asin:t,price:n,url:o,delivery:null==c?void 0:c.innerText.replace(/[\n]/g," ")}}}}]},{selector:"span.s-pagination-strip",name:"pagination",children:[{selector:".s-pagination-item",add_text:!0,name:"from_text",clickable:!0}]},{selector:"div.a-popover-wrapper",name:"popover",children:[{selector:"header.a-popover-header button",add_text:!0,clickable:!0,name:"close",text_format:"Close"},{selector:"div.a-popover-inner div.puis-atc-size-variation",children:[{selector:"div.a-row:nth-of-type(1)",direct_child:!0,children:[{selector:"span[data-component-type='s-product-image'] a",name:"product_image",add_text:!0,clickable:!0,text_format:"Product Image"},{selector:"div.puis-size-variation-title a",name:"product_title",add_text:!0,clickable:!0},{selector:"div.puis-size-variation-product-spec",name:"product_specification",add_text:!0,clickable:!0,click_selector:"a"}]},{selector:"div.a-row:nth-of-type(2)",direct_child:!0,children:[{selector:"div.puis-size-variation-product-options",name:"from_text",text_selector:"span.a-size-base.a-color-secondary",children:[{selector:"span.a-size-base.a-color-secondary",add_text:!0},{selector:"span.a-dropdown-prompt",add_text:!0},{selector:"select",name:"drop_down_list"}]},{selector:"div.puis-size-variation-price a.a-text-normal",name:"price",clickable:!0,add_text:!0,text_selector:"span[aria-hidden='true']"},{selector:"div.puis-size-variation-delivery",add_text:!0,name:"delivery"}]},{selector:"div.a-row:nth-of-type(3)",direct_child:!0,children:[{selector:"span.s-no-js-hide input",name:"cancel",clickable:!0,add_text:!0,text_format:"Cancel"},{selector:"div.puis-atcb-add-container button",name:"add_to_cart",clickable:!0,add_text:!0}]}]}],generate_metadata:e=>{var t,a;const n=null===(t=e.querySelector("div[data-asin]"))||void 0===t?void 0:t.getAttribute("data-asin"),r=e.querySelector('div.a-popover-inner div.puis-atc-size-variation div.a-row:nth-of-type(2) div.puis-size-variation-price a.a-text-normal span[aria-hidden="true"]'),i=null===(a=null==r?void 0:r.innerText)||void 0===a?void 0:a.replace(/[\n]/g,""),l=e.querySelector("div.a-popover-inner div.puis-atc-size-variation div.a-row:nth-of-type(1) div.puis-size-variation-title a"),o=null==l?void 0:l.innerText,c=null==l?void 0:l.getAttribute("href"),s=(e.querySelector('div[data-action="a-dropdown-button"]'),e.querySelectorAll("div.a-popover-inner div.puis-atc-size-variation div.a-row:nth-of-type(1) div.puis-size-variation-product-spec, div.a-popover-inner div.puis-atc-size-variation div.a-row:nth-of-type(2) div.puis-size-variation-product-options")),d=[];for(const e of s){const t=null==e?void 0:e.querySelector("span.a-size-base.a-color-secondary"),a=null==e?void 0:e.querySelector("span.a-size-base.a-color-base, span.a-dropdown-prompt"),n=null==t?void 0:t.innerText.replace(/[:\n]/g,"").trim(),r=null==a?void 0:a.innerText.replace(/[:\n]/g,"").trim(),i={[n]:r};d.push(i)}return{name:"popover_item",data:{title:o,asin:n,price:i,url:c,options:d}}}}]}]},{match:"#productTitle",match_text:"",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[a,n,{selector:"#centerCol",class:"product-card",children:[{selector:"#title",add_text:!0,keep_attr:["id"],generate_metadata:e=>({name:"product_details",data:{title:(null==e?void 0:e.innerText)||""}})},{selector:"#averageCustomerReviews",class:"review",children:[{selector:"span.a-icon-alt",add_text:!0},{selector:"#acrCustomerReviewText",add_text:!0}]},{selector:'#apex_desktop > div[data-csa-c-slot-id="apex_dp_center_column"] > div[class="offersConsistencyEnabled"] > div:not([style="display:none;"]):not([style="display: none;"]) #corePriceDisplay_desktop_feature_div:has(#sns-base-price) #sns-base-price span.a-price.aok-align-center.reinventPricePriceToPayMargin.priceToPay, #apex_desktop > div[data-csa-c-slot-id="apex_dp_center_column"] > div[class="offersConsistencyEnabled"] > div:not([style="display:none;"]):not([style="display: none;"]) #corePriceDisplay_desktop_feature_div:not(:has(#sns-base-price)) span.a-price.aok-align-center.reinventPricePriceToPayMargin.priceToPay, #apex_desktop > div[data-csa-c-slot-id="apex_dp_center_column"] > div[data-csa-c-content-id="apex_with_rio_cx"] #corePriceDisplay_desktop_feature_div span.a-price.aok-align-center.reinventPricePriceToPayMargin.priceToPay',add_text:!0,text_format:"Price: {}",class:"product-price",generate_metadata:e=>{var t;return{name:"product_details",data:{price:(null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.replace(/\n/g,""))||""}}},text_js:e=>{var t;return(null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.replace(/\n/g,""))||""}},{selector:"#twister",class:"product-options",name:"product_options",children:[{selector:"div.a-section",text_selector:"div.a-row:has(label.a-form-label) > label.a-form-label",name:"from_text",direct_child:!0,generate_metadata:e=>{var t,a,n;const r=null===(t=e.querySelector("div.a-row:has(label.a-form-label) label.a-form-label"))||void 0===t?void 0:t.innerHTML.replace(/[:\n]/g,"").trim();let i=null===(a=e.querySelector("div.a-row:has(label.a-form-label) span.selection"))||void 0===a?void 0:a.innerHTML;if(void 0===i||""===i){const t=null===(n=e.querySelector("select"))||void 0===n?void 0:n.querySelectorAll("option");if(t)for(const e of t)e&&null!==e.getAttribute("selected")&&(i=e.innerHTML.trim())}return{name:"product_options",data:{[r]:i.trim()}}},children:[{selector:"div.a-row:has(label.a-form-label)",children:[{selector:"label.a-form-label",add_text:!0},{selector:"span.selection",add_text:!0}]},{selector:"select",add_text:!0,name:"drop_down_list"},{selector:"ul",name:"button_list",children:[{selector:"li button",add_text:!0,clickable:!0,name:"from_text",text_js:function(e){let t="";if(e.innerText.trim()){t+=e.innerText.trim();const a=e.querySelector("img");a&&a.alt&&(t+=" ",t+=a.alt)}else{const a=e.querySelector("img");a&&a.alt&&(t+=a.alt)}return t.trim()}}]}]}]},{selector:"#twister-plus-inline-twister",class:"product-options",name:"product_options",children:[{selector:"div.inline-twister-row",text_selector:"div.inline-twister-dim-title-value-truncate-expanded span.a-size-base.a-color-secondary",name:"from_text",direct_child:!0,generate_metadata:e=>{var t,a,n;const r=null===(t=e.querySelector("div.inline-twister-dim-title-value-truncate-expanded span.a-size-base.a-color-secondary"))||void 0===t?void 0:t.innerHTML.replace(/[:\n]/g,"").trim();let i=null===(a=e.querySelector("div.inline-twister-dim-title-value-truncate-expanded span.inline-twister-dim-title-value"))||void 0===a?void 0:a.innerHTML;if(void 0===i||""===i){const t=null===(n=e.querySelector("select"))||void 0===n?void 0:n.querySelectorAll("option");if(t)for(const e of t)e&&null!==e.getAttribute("selected")&&(i=e.innerHTML.trim())}return{name:"product_options",data:{[r]:i.trim()}}},children:[{selector:"div.inline-twister-dim-title-value-truncate-expanded",children:[{selector:"span.a-size-base.a-color-secondary",add_text:!0},{selector:"span.inline-twister-dim-title-value",add_text:!0}]},{selector:"select",add_text:!0,name:"drop_down_list"},{selector:"ul",name:"button_list",children:[{selector:"li span:not(.aok-hidden) input",add_text:!0,clickable:!0,name:"from_text",text_js:function(e){const t=e.nextElementSibling;let a="";if(t.innerText.trim()){a+=t.innerText.trim();const e=t.querySelector("img");e&&e.alt&&(a+=" ",a+=e.alt)}else{const e=t.querySelector("img");e&&e.alt&&(a+=e.alt)}return a.trim()}}]}]},{selector:"div.inline-twister-singleton-header",text_selector:"span.a-size-base.a-color-secondary",name:"from_text",children:[{selector:"span.a-size-base.a-color-secondary",add_text:!0},{selector:"span.inline-twister-dim-title-value-truncate",add_text:!0}],generate_metadata:e=>{var t,a;const n=null===(t=e.querySelector("span.a-size-base.a-color-secondary"))||void 0===t?void 0:t.innerHTML.replace(/[:\n]/g,"").trim(),r=null===(a=e.querySelector("span.inline-twister-dim-title-value-truncate"))||void 0===a?void 0:a.innerHTML;return{name:"product_options",data:{[n]:r.trim()}}}}]},{selector:"#productFactsDesktopExpander ul.a-unordered-list, #featurebullets_feature_div ul.a-unordered-list",add_text:!0,name:"about_this_item",text_format:"About this item: ",children:[{selector:"li",add_text:!0}],generate_metadata:e=>{var t;return{name:"product_details",data:{bullet_list:(null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.replace(/\n/g," "))||""}}}}]},{selector:"#buybox:has(div.a-tab-container):not(:has(#partialState_buybox_desktop))",name:"buybox",children:[{selector:"#tab_heading_desktop_buybox_group_1 a",name:"deliver_tab",clickable:!0,add_text:!0},{selector:"#tab_heading_desktop_buybox_group_2 a",name:"pick_up_tab",clickable:!0,add_text:!0},{selector:"#tab_desktop_buybox_group_1",name:"delivery",add_text:!0,text_format:"Delivery",children:[s,d]},{selector:"#tab_desktop_buybox_group_2",name:"pick_up",add_text:!0,text_format:"Pick Up",children:[{selector:"#gsod_singleOfferDisplay_group_2_Desktop",children:[{selector:"#pickUpOfferDisplay",name:"purchase_form",children:[r,i,l,o,c]}]}]}],generate_metadata:e=>{const t=e.querySelector("input#ASIN");return{name:"product_details",data:{asin:(null==t?void 0:t.value)||""}}}},{selector:"#buybox:not(:has(div.a-tab-container)):not(:has(#partialState_buybox_desktop))",name:"buybox",children:[s,d],generate_metadata:e=>{const t=e.querySelector("input#ASIN");return{name:"product_details",data:{asin:(null==t?void 0:t.value)||""}}}},{selector:"#partialState_buybox_desktop",children:[{selector:"#partialStateBuybox div.a-section.a-text-center.a-spacing-small",add_text:!0}],generate_metadata:e=>{const t=e.querySelector("input#ASIN");return{name:"product_details",data:{asin:(null==t?void 0:t.value)||""}}}},{selector:"#attach-warranty-pane #attach-warranty-display",name:"warranty-box",children:[{selector:"div.attach-warranty-box",text_selector:"#attach-warranty-card-display-title",name:"from_text",children:[{selector:"i.a-icon-checkbox",name:"select",clickable:!0},{selector:"#attach-warranty-card-display-title",add_text:!0},{selector:"#attach-warranty-card-price",add_text:!0}]},{selector:"div.a-section.attach-warranty-button-row",children:[{selector:"input[aria-labelledby='attachSiAddCoverage-announce']",name:"add_protection",clickable:!0,add_text:!0,text_format:"Add Protection"},{selector:"input[aria-labelledby='attachSiNoCoverage-announce']",name:"no_protection",clickable:!0,add_text:!0,text_format:"No Thanks"}]}]}]}]},{match:"/hz/mobile/mission",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[a,{selector:'div[class*="singleProductContainer"]',name:"from_text",text_selector:'span[class*="titleR2"]',children:[{selector:"a:has(img)",add_text:!0,text_format:"Product Image",name:"from_text",clickable:!0},{selector:"a:not(:has(img))",add_text:!0,text_format:"Product Detail",name:"from_text",clickable:!0},{selector:"input",add_text:!0,clickable:!0,name:"add_to_cart"},{selector:"a.a-button-text",clickable:!0,add_text:!0,name:"from_text"}],generate_metadata:e=>{var t;const a=e.querySelector("div[data-asin]"),n=null==a?void 0:a.getAttribute("data-asin"),r=e.querySelector("span.a-price span.a-offscreen"),i=null===(t=null==r?void 0:r.innerText)||void 0===t?void 0:t.replace(/[\n]/g,""),l=e.querySelector('span[class*="titleR2"]'),o=null==l?void 0:l.innerText.replace('"',""),c=e.querySelector("a:not(:has(img))");return{name:"promotion_items",data:{title:o,asin:n,price:i,url:null==c?void 0:c.getAttribute("href")}}}},{selector:"#intent-tabs",name:"intent_tabs",children:[{selector:"li",clickable:!0,name:"from_text",add_text:!0,text_js:e=>{var t;return(null===(t=e.getAttribute("data-intent"))||void 0===t?void 0:t.replace("intent-feed-","").replaceAll("-","_"))||""}}]},{selector:"#intent-content-default",name:"from_text",text_js:e=>{var t;return(null===(t=e.getAttribute("data-intent"))||void 0===t?void 0:t.replace("intent-feed-","").replaceAll("-","_"))||""},children:[{selector:'li[class*="productContainer"]',name:"from_text",text_selector:'span[class*="titleR3"]',children:[{selector:"a:has(img)",add_text:!0,text_format:"Product Image",name:"from_text",clickable:!0},{selector:'div[class*="swatches"], div[class*="variationContainer"]',name:"options",children:[{selector:"li a",add_text:!0,name:"from_text",clickable:!0,text_js:e=>e.getAttribute("aria-label")||e.innerText},{selector:'a[class*="variationsLink"]',add_text:!0,name:"from_text",clickable:!0}]},{selector:'a[class*="productLink"]',clickable:!0,add_text:!0,name:"product_title"},{selector:"input",clickable:!0,add_text:!0,name:"add_to_cart"},{selector:"a.a-button-text",clickable:!0,add_text:!0,name:"from_text"}],generate_metadata:e=>{var t,a;const n=e.querySelector("div[data-asin]"),r=null==n?void 0:n.getAttribute("data-asin"),i=e.querySelector("span.a-price span.a-offscreen"),l=null===(t=null==i?void 0:i.innerText)||void 0===t?void 0:t.replace(/[\n]/g,""),o=e.querySelector('span[class*="titleR3"]'),c=null==o?void 0:o.innerText.replace('"',""),s=e.querySelector("a:not(:has(img))"),d=null==s?void 0:s.getAttribute("href"),u=e.closest("#intent-content-default");return{name:(null===(a=null==u?void 0:u.getAttribute("data-intent"))||void 0===a?void 0:a.replace("intent-feed-","").replaceAll("-","_"))||"",data:{title:c,asin:r,price:l,url:d}}}},{selector:'li[class*="intuition-product-grid__faceout"]',name:"from_text",text_selector:'span[class*="titleR3"]',children:[{selector:"a:has(img)",add_text:!0,text_format:"Product Image",name:"from_text",clickable:!0},{selector:'div[class*="swatches"], div[class*="variationContainer"]',name:"options",children:[{selector:"li a",add_text:!0,name:"from_text",clickable:!0,text_js:e=>e.getAttribute("aria-label")},{selector:'a[class*="variationsLink"]',add_text:!0,name:"from_text",clickable:!0}]},{selector:'a[class*="productLink"]',clickable:!0,name:"from_text",add_text:!0,text_format:"Product Detail"},{selector:"input",clickable:!0,add_text:!0,name:"add_to_cart"},{selector:"input",clickable:!0,add_text:!0,name:"add_to_cart"}],generate_metadata:e=>{var t,a;const n=e.querySelector("input"),r=null==n?void 0:n.getAttribute("data-asin"),i=e.querySelector("span.a-price span.a-offscreen"),l=null===(t=null==i?void 0:i.innerText)||void 0===t?void 0:t.replace(/[\n]/g,""),o=e.querySelector('span[class*="titleR3"]'),c=null==o?void 0:o.innerText.replace('"',""),s=e.querySelector("a:not(:has(img))"),d=null==s?void 0:s.getAttribute("href"),u=e.closest("#intent-content-default");return{name:(null===(a=null==u?void 0:u.getAttribute("data-intent"))||void 0===a?void 0:a.replace("intent-feed-","").replaceAll("-","_"))||"",data:{title:c,asin:r,price:l,url:d}}}}]}]}]},{match:"/cart/add-to-cart",match_method:"url",selector:"html",match_with_ref:!0,children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[a,n,{selector:"#sw-atc-buy-box",children:[{selector:"#sw-subtotal",children:[{selector:"#sw-subtotal-item-count",add_text:!0},{selector:"span[aria-hidden='true']",add_text:!0}]},{selector:"#sc-buy-box-ptc-button span.a-button-inner input",add_text:!0,text_selector:"div.sc-without-multicart",clickable:!0,name:"check_out",fetch_url:"/cart"},{selector:"#sw-gtc a",add_text:!0,clickable:!0,name:"go_to_cart"}]}]}]},{match:"/cart/smart-wagon",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[a,n,{selector:"#sw-atc-buy-box",children:[{selector:"#sw-subtotal",children:[{selector:"#sw-subtotal-item-count",add_text:!0},{selector:"span[aria-hidden='true']",add_text:!0}]},{selector:"#sc-buy-box-ptc-button span.a-button-inner input",add_text:!0,text_selector:"div.sc-without-multicart",clickable:!0,name:"check_out",fetch_url:"/cart"},{selector:"#sw-gtc a",add_text:!0,clickable:!0,name:"go_to_cart"}]}]}]},{match:"/gp/cart/view.html",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:u}]},{match:"/cart",match_method:"url",match_with_ref:!0,selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:u}]},{match:"/cart/localmarket",match_method:"url",match_with_ref:!0,selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[a,{selector:"div[data-name='Active Items']",name:"active_item_list",children:[{selector:"div.sc-list-item-content",text_selector:"ul > li > span.a-list-item > a.sc-product-title span.a-truncate-full",name:"from_text",children:[{selector:"div.sc-product-image-desktop a img",clickable:!0,name:"product_image",add_text:!0,text_format:"Product Image"},{selector:"ul > li > span.a-list-item > a.sc-product-title",clickable:!0,text_selector:"span.a-truncate-full",add_text:!0,name:"product_detail"},{selector:"div.sc-badge-price-to-pay span.sc-price",add_text:!0},{selector:"div.sc-action-links",children:[{selector:"div.qs-widget-container",children:[{selector:"input[aria-label='Remove']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div.qs-widget-dropdown-flex-wrapper button",add_text:!0,clickable:!0,name:"quantity_drop_down_list",text_format:"Current Quantity: {}"},{selector:'div.qs-widget-dropdown-wrapper span[data-action="qs-widget-dropdown-decl"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text",text_format:"Drop Down Option {}"},{selector:'div[id^="qs-widget-quantity-container-atfc"] span[data-action="qs-widget-quantity-changelink-decl"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text"},{selector:'div[id^="qs-widget-summary-container-atfc"] span[id^="qs-widget-summary-atc-atfc"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text"},{selector:"input[aria-label='Add']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]}]},{selector:"input[data-action='delete']",add_text:!0,clickable:!0,name:"delete"}],generate_metadata:e=>{var t,a;const n=null===(t=e.parentElement)||void 0===t?void 0:t.getAttribute("data-asin"),r=e.querySelector("div.sc-badge-price-to-pay span.sc-price"),i=null===(a=null==r?void 0:r.innerText)||void 0===a?void 0:a.replace(/[\n]/g,""),l=e.querySelector("ul > li > span.a-list-item > a.sc-product-title span.a-truncate-full"),o=null==l?void 0:l.innerText,c=e.querySelector("ul > li > span.a-list-item > a.sc-product-title"),s=null==c?void 0:c.getAttribute("href"),d=e.querySelector("div.sc-action-links div.qs-widget-dropdown-flex-wrapper button");return{name:"active_items",data:{title:o,asin:n,price:i,url:s,quantity:null==d?void 0:d.innerText}}}}]},m,{selector:'div.sc-buy-box-inner-box input[name^="proceedToALMCheckout"]',clickable:!0,name:"check_out",add_text:!0},{selector:"div.sc-buy-box-inner-box a",clickable:!0,name:"from_text",add_text:!0},{selector:"#sc-cart-above-actions button, #sc-cart-above-actions a",clickable:!0,name:"from_text",add_text:!0}]}]},{match:"/alm/byg",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[{selector:'a[name="proceedToCheckout"]',name:"check_out",add_text:!0,clickable:!0},m]}]},{match:"/alm/substitution",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[{selector:"#subsContinueButton input",name:"check_out",add_text:!0,clickable:!0,text_format:"Continue"},{selector:"div.subs-cart-item",name:"from_text",text_selector:"div.a-spacing-top-base span.a-size-base",children:[{selector:"div.a-spacing-top-base span.a-size-base",add_text:!0},{selector:"div.a-spacing-top-mini span.a-color-price",add_text:!0}],generate_metadata:e=>{const t=e.querySelector("div[data-cart-item-asin]"),a=null==t?void 0:t.getAttribute("data-cart-item-asin"),n=e.querySelector("div.a-spacing-top-base span.a-size-base"),r=null==n?void 0:n.innerText,i=e.querySelector("div.a-spacing-top-mini span.a-color-price");return{name:"active_items",data:{asin:a,title:r,price:null==i?void 0:i.innerText}}}}]}]},{match:"/cart/byc",match_method:"url",selector:"html",match_with_ref:!0,children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[{selector:'a[name="sc-byc-ptc-button"]',name:"check_out",add_text:!0,clickable:!0},{selector:'span[cel_widget_id^="byc-back-button"] a',name:"back_to_cart",add_text:!0,clickable:!0},{selector:"li.a-carousel-card:not(.a-carousel-card-empty)",name:"from_text",text_js:e=>{const t=e.querySelector('a div[class*="sc-truncate-desktop"]');return(null==t?void 0:t.title)||(null==t?void 0:t.innerText)||""},children:[{selector:'a:has(img[class*="product-image"])',name:"product_image",add_text:!0,text_format:"Product Image",clickable:!0},{selector:'a div[class*="sc-truncate-desktop"]',add_text:!0,name:"product_title",clickable:!0},{selector:'a:has(i[class*="star"])',name:"product_review",clickable:!0,add_text:!0,text_js:e=>e.title},{selector:'div[class*="sc-price"]',add_text:!0,text_selector:'span[class*="sc-price"]',name:"product_price",clickable:!0},{selector:'input[name="submit.addToCart"]',name:"add_to_cart",add_text:!0,text_format:"Add To Cart",clickable:!0},{selector:'div[name="ax-qs"]',children:[{selector:"button[aria-label='Decrease quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div[role='spinbutton']",add_text:!0,text_format:"Current Quantity: {}"},{selector:"button[aria-label='Increase quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]}],generate_metadata:e=>{var t,a;const n=e.querySelector('div[id*="sc-turbo-container"]'),r=null===(t=null==n?void 0:n.getAttribute("id"))||void 0===t?void 0:t.split("-").pop(),i=e.querySelector('a span[class*="sc-price"]'),l=null===(a=null==i?void 0:i.innerText)||void 0===a?void 0:a.replace(/[\n]/g,""),o=e.querySelector('a div[class*="sc-truncate-desktop"]'),c=null==o?void 0:o.title,s=e.querySelector('a:has(div[class*="sc-truncate-desktop"])'),d=null==s?void 0:s.getAttribute("href"),u=e.querySelector('div[name="ax-qs"] div[role="spinbutton"]');return{name:"promotion_items",data:{title:c,asin:r,price:l,url:d,quantity:null==u?void 0:u.innerText}}}}]}]},{match:"/ap/signin",match_method:"url",terminate:function(){return!!arguments[0]},terminate_callback:function(){return arguments[0]},selector:"html"},{match:"/gp/buy/spc/handlers/display.html",match_method:"url",terminate:function(){return!!arguments[0]},terminate_callback:function(){return arguments[0]},selector:"html"},{match:"/gp/buyagain",match_method:"url",match_with_ref:!0,selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[a,n,{selector:"div.a-section:has(div.filter-container)",name:"filters",children:[{selector:"div.filter-container",text_selector:"span#filter-container-header",name:"from_text",children:[{selector:"span#filter-container-header",add_text:!0},{selector:"label",add_text:!0,clickable:!0,name:"from_text",generate_metadata:e=>{var t,a;const n=e.innerText,r=null===(t=e.closest("div.filter-container"))||void 0===t?void 0:t.querySelector("#filter-container-header"),i=null===(a=null==r?void 0:r.innerText)||void 0===a?void 0:a.replace(/[ ]/g,"_").toLowerCase().trim(),l=e.querySelector("input");return l&&l.checked?{name:"filters."+i,data:{title:(null==n?void 0:n.trim())||"",selected:!0}}:{name:"filters."+i,data:{title:(null==n?void 0:n.trim())||"",selected:!1}}}}]}]},{selector:"div.alm-grid-desktop-grid-container",name:"product_list",children:[{selector:'div[id^="gridCell"]',name:"from_text",text_selector:"div[id^='closedCard'] a[id^='title'] span.a-truncate-full",children:[{selector:"div[id^='gridElement']",name:"product_card",children:[{selector:"div[id^='closedCard']",name:"closed_product_card",children:[{selector:"div[id^='info']",name:"open_product_card",clickable:!0,text_format:"Open Product Card"},{selector:"form span.a-button-inner",name:"add_to_cart",clickable:!0,add_text:!0},{selector:'div[id^="seeBuyingOptionsWrapper"] a',name:"see_buying_options",clickable:!0,add_text:!0}]},{selector:'div[name="ax-qs"]',children:[{selector:"button[aria-label='Decrease quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div[role='spinbutton']",add_text:!0,text_format:"Current Quantity: {}"},{selector:"button[aria-label='Increase quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]},{selector:"div[id^='expandedImage']",name:"close_product_card",clickable:!0,add_text:!0,text_format:"Close Product Card"}]}],generate_metadata:e=>{var t;const a=e.querySelector("div[id^='closedCard'] div[id^='info']"),n=null==a?void 0:a.getAttribute("data-asin"),r=e.querySelector('div[id^="closedCard"] div[id^="info"] span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)'),i=null===(t=null==r?void 0:r.innerText)||void 0===t?void 0:t.replace(/[\n]/g,""),l=e.querySelector("div[id^='closedCard'] a[id^='title'] span.a-truncate-full"),o=null==l?void 0:l.innerText,c=e.querySelector('div[id^="closedCard"] div[id^="info"] #udmDeliveryMessageComponent');return{name:"active_items_closed",data:{title:o,asin:n,price:i,delivery:null==c?void 0:c.innerText.replace(/[\n]/g," ")}}}},{selector:'div[id^="featured"]',name:"from_text",text_selector:"a[id^='title'] span.a-truncate-full",children:[{selector:'div[id^="detailContentWrapper"] div[id^="detailContent"]',name:"detailed_content",children:[{selector:"div:has(> img)",clickable:!0,name:"product_image",add_text:!0,text_format:"Product Image"},{selector:"a[id^='title']",clickable:!0,name:"product_title",add_text:!0,text_selector:"span.a-truncate-full"},{selector:"div[class*='multiOfferPillContainer'] a",clickable:!0,name:"from_text",add_text:!0},{selector:"div[data-buyingoptiontype='NEW'], div[class*='asinDetailInfoColumns']:has(input[name='submit.addToCart']",name:"one_time_purchase",children:[{selector:'span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)',add_text:!0,name:"price"},{selector:"#udmDeliveryMessageComponent",add_text:!0,name:"delivery"},{selector:'div[class*="actionButtonsRow"], div[class*="asinDetailActionsRow"]',name:"buttons",children:[{selector:'input[name="submit.addToCart"]',add_text:!0,name:"add_to_cart",clickable:!0},{selector:'input[id^="buy-now"]',add_text:!0,name:"buy_now",clickable:!0},{selector:'div[id^="feedbackButtonSection"] input',add_text:!0,name:"remove_item",clickable:!0},{selector:'div[name="ax-qs"]',children:[{selector:"button[aria-label='Decrease quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div[role='spinbutton']",add_text:!0,text_format:"Current Quantity: {}"},{selector:"button[aria-label='Increase quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]}]}],generate_metadata:e=>{var t,a,n,r,i;const l=e.closest("div[data-asin]"),o=null==l?void 0:l.getAttribute("data-asin"),c=e.querySelector('span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)'),s=null===(t=null==c?void 0:c.innerText)||void 0===t?void 0:t.replace(/[\n]/g,""),d=null===(n=null===(a=e.parentElement)||void 0===a?void 0:a.parentElement)||void 0===n?void 0:n.querySelector("a[id^='title'] span.a-truncate-full"),u=null==d?void 0:d.innerText,m=null===(i=null===(r=e.parentElement)||void 0===r?void 0:r.parentElement)||void 0===i?void 0:i.querySelector("a[id^='title']"),p=null==m?void 0:m.getAttribute("href"),_=e.querySelector("#udmDeliveryMessageComponent"),v=null==_?void 0:_.innerText.replace(/[\n]/g," "),b=e.querySelector('div[name="ax-qs"] div[role="spinbutton"]');return{name:"active_items_opened_purchase",data:{title:u,asin:o,price:s,url:p,delivery:v,quantity:(null==b?void 0:b.innerText)||"1"}}}},{selector:"div[data-buyingoptiontype='SNS'], div[class*='snsUpsellBlockContainer']",name:"subscribe_and_save",children:[{selector:'span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)',add_text:!0,name:"price"},{selector:"#udmDeliveryMessageComponent",add_text:!0,name:"delivery"},{selector:'div[class*="actionButtonsRow"]',name:"buttons",children:[{selector:'input[name="submit.addToCart"]',add_text:!0,name:"add_to_cart",clickable:!0},{selector:'span[class*="snsButton"] input',add_text:!0,name:"subscribe_and_save",clickable:!0},{selector:'div[id^="feedbackButtonSection"] input',add_text:!0,name:"remove_item",clickable:!0}]},{selector:'span[class*="subscriptionButton"] input',add_text:!0,name:"set_up_subscription",clickable:!0}],generate_metadata:e=>{var t,a,n,r,i;const l=e.closest("div[data-asin]"),o=null==l?void 0:l.getAttribute("data-asin"),c=e.querySelector('span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)'),s=null===(t=null==c?void 0:c.innerText)||void 0===t?void 0:t.replace(/[\n]/g,""),d=null===(n=null===(a=e.parentElement)||void 0===a?void 0:a.parentElement)||void 0===n?void 0:n.querySelector("a[id^='title'] span.a-truncate-full"),u=null==d?void 0:d.innerText,m=null===(i=null===(r=e.parentElement)||void 0===r?void 0:r.parentElement)||void 0===i?void 0:i.querySelector("a[id^='title']"),p=null==m?void 0:m.getAttribute("href"),_=e.querySelector("#udmDeliveryMessageComponent");return{name:"active_items_opened_sns",data:{title:u,asin:o,price:s,url:p,delivery:null==_?void 0:_.innerText.replace(/[\n]/g," ")}}}}]},{selector:"div[id^='detail-view-similar-items']",name:"similar_items",children:[{selector:"li.a-carousel-card",name:"from_text",text_selector:"a[id^='title'] span.a-truncate-full",children:[{selector:"div.a-image-container:has(> img)",clickable:!0,name:"product_image",add_text:!0,text_format:"Product Image"},{selector:"a[id^='title']",clickable:!0,name:"product_title",add_text:!0,text_selector:"span.a-truncate-full"},{selector:'span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)',add_text:!0,name:"price"},{selector:"#udmDeliveryMessageComponent",add_text:!0,name:"delivery"},{selector:'input[name="submit.addToCart"], input[name^="atfcShim"], button[aria-label="Add to Cart. Click to change quantity"]',add_text:!0,name:"add_to_cart",clickable:!0},{selector:'div[id^="seeBuyingOptionsWrapper"] a',name:"see_buying_options",clickable:!0,add_text:!0},{selector:'div[name="ax-qs"]',children:[{selector:"button[aria-label='Decrease quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div[role='spinbutton']",add_text:!0,text_format:"Current Quantity: {}"},{selector:"button[aria-label='Increase quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]},{selector:"div.qs-widget-container",children:[{selector:"input[aria-label='Remove']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div.qs-widget-dropdown-flex-wrapper button",add_text:!0,clickable:!0,name:"drop_down_list",text_format:"Current Quantity: {}"},{selector:'div.qs-widget-dropdown-wrapper span[data-action="qs-widget-dropdown-decl"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text",text_format:"Drop Down Option {}"},{selector:'div[id^="qs-widget-quantity-container-atfc"] span[data-action="qs-widget-quantity-changelink-decl"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text"},{selector:'div[id^="qs-widget-summary-container-atfc"] span[id^="qs-widget-summary-atc-atfc"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text"},{selector:"input[aria-label='Add']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]}],generate_metadata:e=>{var t,a,n;const r=null===(t=e.closest('div[id^="featured"]'))||void 0===t?void 0:t.querySelector('div[id^="detailContentWrapper"] a[id^="title"] span.a-truncate-full'),i=null===(a=null==r?void 0:r.innerText)||void 0===a?void 0:a.toLowerCase().replace(/[^\w]+/g,"_"),l=e.querySelector('div[class*="delightFaceout"]'),o=null==l?void 0:l.getAttribute("data-asin"),c=e.querySelector('span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)'),s=null===(n=null==c?void 0:c.innerText)||void 0===n?void 0:n.replace(/[\n]/g,""),d=e.querySelector("a[id^='title'] span.a-truncate-full"),u=null==d?void 0:d.innerText,m=e.querySelector("a[id^='title']"),p=null==m?void 0:m.getAttribute("href"),_=e.querySelector("#udmDeliveryMessageComponent");return{name:i+".similar_items",data:{title:u,asin:o,price:s,url:p,delivery:null==_?void 0:_.innerText.replace(/[\n]/g," ")}}}}]}]}]},{selector:"#snsUpsellModal",name:"subscribe_and_save_popover",children:[{selector:'div[class*="modalHeader"]',children:[{selector:'span[class*="modalHeaderText"]',add_text:!0},{selector:'span[data-action="a-popover-close"]',add_text:!0,clickable:!0,text_format:"Close",name:"from_text"}]},{selector:'div[class*="modalContent"]',direct_child:!0,children:[{selector:'div:not([class*="buttonContainer"]):not(:has(select))',add_text:!0},{selector:"select",name:"drop_down_list"},{selector:'div[class*="buttonContainer"]',children:[{selector:'div[class*="cancelButtonContainer"] input',add_text:!0,text_format:"Cancel",clickable:!0,name:"from_text"},{selector:'div[class*="subscriptionButtonContainer"] input[name="submit.addToCart"]',add_text:!0,text_format:"Add Subscription to Cart",clickable:!0,name:"from_text"}]}]}],generate_metadata:e=>{var t,a;const n=e.querySelector('div[class*="modalContent"]');return{name:"popover_item",data:{asin:null===(a=null===(t=null==n?void 0:n.id)||void 0===t?void 0:t.split("-")[1])||void 0===a?void 0:a.trim()}}}}]}]}];var _=function(e,t,a,n){return new(a||(a=Promise))((function(r,i){function l(e){try{c(n.next(e))}catch(e){i(e)}}function o(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(l,o)}c((n=n.apply(e,t||[])).next())}))};function v(e,t,a="",n=0,r=globalThis.document,i=globalThis.window){var l;let o=t.tag_name||e.tagName.toLowerCase();o.endsWith("_")&&(o=o.slice(0,-1));const c=r.createElement(o);let s="";if(t.text_selector){const a=e.querySelector(t.text_selector);a&&(s=a.innerText||a.textContent||"")}else t.text_js?s=t.text_js(e):t.add_text&&(s=e.innerText||e.textContent||"");null==s&&(console.log(e),console.log(s)),s=s.replace(/\s+/g," ").trim(),t.text_format?s=t.text_format.replace("{}",s):t.text_format&&(s=t.text_format),s&&t.add_text&&(c.textContent=s);let d="";if(t.name&&("from_text"===t.name?(d=a?a+".":"",s?d+=s.toLowerCase().replace(/[^\w]+/g,"_"):d=""):"from_nth_child"===t.name?(d=a?a+".":"",d+=n.toString()):(d=a?a+".":"",d+=t.name),c.setAttribute("name",d),a=d),t.generate_metadata){const a=t.generate_metadata(e),n=JSON.stringify(a.data),r=a.name;e.setAttribute("data-element-meta-name",r),e.setAttribute("data-element-meta-data",n)}if(t.clickable){if(!t.name)throw new Error("clickable element must have a name");let a;a=t.click_selector?e.querySelector(t.click_selector):e,a&&a.setAttribute("data-clickable-id",d),i.clickable_recipes||(i.clickable_recipes={}),i.clickable_recipes[d]=t}if(t.fetch_url&&e.setAttribute("data-fetch-url",t.fetch_url),"input"===o){const a=e.getAttribute("type");["text","number"].includes(a)?(c.setAttribute("value",e.value),e.setAttribute("data-input-id",d)):"checkbox"===a?c.setAttribute("checked",e.checked.toString()):"radio"===a&&(c.setAttribute("checked",e.checked.toString()),e.setAttribute("data-clickable-id",d)),i.input_recipes||(i.input_recipes={}),i.input_recipes[d]=t}if("select"===o){e.setAttribute("data-select-id",d);const t=e.getAttribute("id"),a=(e.getAttribute("name"),null===(l=e.parentElement)||void 0===l?void 0:l.querySelector("span.a-button-dropdown span.a-button-text")),n=r.createElement("span");n.textContent=a.textContent;const i=d+".open_drop_down_list";n.setAttribute("name",i),a.setAttribute("data-clickable-id",i),c.appendChild(n),r.querySelectorAll('a[id^="'+t+'"]').forEach((e=>_(this,void 0,void 0,(function*(){const t=e.textContent.trim()||e.querySelector("input").value,a=d+"."+t,n=r.createElement("a");n.textContent=e.textContent,n.setAttribute("value",t),n.setAttribute("name",a),n.setAttribute("selected",e.getAttribute("aria-selected")),e.setAttribute("data-clickable-id",a),c.appendChild(n)}))))}if(["alt","title","type","value","role","aria-label","aria-hidden","aria-selected"].forEach((t=>{const a=e.getAttribute(t);a&&c.setAttribute(t,a)})),t.keep_attr)for(const a of t.keep_attr){const t=e.getAttribute(a);t&&c.setAttribute(a,t)}if(t.class&&c.setAttribute("class",t.class),t.id&&c.setAttribute("id",t.id),t.override_attr)for(const a in t.override_attr)c.setAttribute(a,t.override_attr[a](e));if(t.children&&t.children.length>0)for(const n of t.children){const t=n.direct_child?`:scope > ${n.selector}`:n.selector;let l;l=n.use_root?r.querySelectorAll(t):e.querySelectorAll(t),l.forEach(((e,t)=>{const l=v(e,n,a,t,r,i);if(c.appendChild(l),n.insert_split_marker&&t%(n.insert_split_marker_every||1)==0){const e=r.createElement("split-marker");c.appendChild(e)}if(n.insert_split_marker){const e=r.createElement("split-marker");c.appendChild(e)}}))}if(t.empty_message&&0===c.children.length){const e=r.createTextNode(t.empty_message);c.appendChild(e)}return c}function b(e){return null!==e.closest("#reason-modal")}function h(a,n=!1){return r=this,i=void 0,o=function*(){if(!n)if(chrome.storage){if(!(yield chrome.storage.local.get("userId")).userId)return console.log("no user id"),!0}else if(!(yield new Promise((e=>{const t=a=>{"GET_USER_ID_RESPONSE"===a.data.type&&(window.removeEventListener("message",t),e(a.data.userId))};window.addEventListener("message",t),window.postMessage({type:"GET_USER_ID"},"*")}))))return!0;return!a||!e.some((e=>a.includes(e)))||t.some((e=>a.includes(e)))},new((l=void 0)||(l=Promise))((function(e,t){function a(e){try{c(o.next(e))}catch(e){t(e)}}function n(e){try{c(o.throw(e))}catch(e){t(e)}}function c(t){var r;t.done?e(t.value):(r=t.value,r instanceof l?r:new l((function(e){e(r)}))).then(a,n)}c((o=o.apply(r,i||[])).next())}));var r,i,l,o}function f(e=null,t=null,a=globalThis.document,n=globalThis.window){console.log("start process recipe");try{const r=function(e=null,t=globalThis.document,a=globalThis.window){var n,r;let i;i=e?new URL(e):new URL(a.location.href);let l=i.pathname;l="/"!==l?l.replace(/\/+$/,""):l;for(const e of p){const a=e.match_method||"text";if("text"===a)try{const a=t.querySelector(e.match);if(a&&(!e.match_text||null!==(r=null===(n=a.textContent)||void 0===n?void 0:n.toLowerCase().includes(e.match_text.toLowerCase()))&&void 0!==r&&r))return console.log("matched with recipe ",e.match),e}catch(e){console.error("Error checking text match:",e)}else if("url"===a){if(e.match===l)return console.log("matched with recipe ",e.match),e;if(e.match_with_ref&&(l.startsWith(e.match+"/ref=")||l.startsWith(e.match+"ref=")))return console.log("matched with recipe ",e.match),e}}throw new Error(`No matching recipe found for path: ${l}`)}(t,a,n);let i;if(i=e||a.querySelector(r.selector),i){return v(i,r,"",0,a,n).outerHTML}}catch(e){console.error("Error processing recipe:",e)}}const x={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let g;const y=new Uint8Array(16);function w(){if(!g){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");g=crypto.getRandomValues.bind(crypto)}return g(y)}const k=[];for(let e=0;e<256;++e)k.push((e+256).toString(16).slice(1));const A=function(e,t,a){if(x.randomUUID&&!t&&!e)return x.randomUUID();const n=(e=e||{}).random||(e.rng||w)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,t){a=a||0;for(let e=0;e<16;++e)t[a+e]=n[e];return t}return function(e,t=0){return(k[e[t+0]]+k[e[t+1]]+k[e[t+2]]+k[e[t+3]]+"-"+k[e[t+4]]+k[e[t+5]]+"-"+k[e[t+6]]+k[e[t+7]]+"-"+k[e[t+8]]+k[e[t+9]]+"-"+k[e[t+10]]+k[e[t+11]]+k[e[t+12]]+k[e[t+13]]+k[e[t+14]]+k[e[t+15]]).toLowerCase()}(n)},q=new Set(["role","name","aria-label","rel","href"]);function S(e,t){let a=q.has(e);a||=e.startsWith("data-")&&P(e);let n=P(t)&&t.length<100;return n||=t.startsWith("#")&&P(t.slice(1)),a&&n}function T(e){return P(e)}function E(e){return P(e)}function C(e){return!0}function L(e,t){if(e.nodeType!==Node.ELEMENT_NODE)throw new Error("Can't generate CSS selector for non-element node type.");if("html"===e.tagName.toLowerCase())return"html";const a={root:document.body,idName:T,className:E,tagName:C,attr:S,timeoutMs:1e3,seedMinLength:3,optimizedMinLength:2,maxNumberOfPathChecks:1/0},n=new Date,r={...a,...t},i=function(e,t){return e.nodeType===Node.DOCUMENT_NODE?e:e===t.root?e.ownerDocument:e}(r.root,a);let l,o=0;for(const t of function*(e,t,a){const n=[];let r=[],i=e,l=0;for(;i&&i!==a;){const e=M(i,t);for(const t of e)t.level=l;if(n.push(e),i=i.parentElement,l++,r.push(...H(n)),l>=t.seedMinLength){r.sort(I);for(const e of r)yield e;r=[]}}r.sort(I);for(const e of r)yield e}(e,r,i)){if((new Date).getTime()-n.getTime()>r.timeoutMs||o>=r.maxNumberOfPathChecks){const t=O(e,i);if(!t)throw new Error(`Timeout: Can't find a unique selector after ${r.timeoutMs}ms`);return N(t)}if(o++,U(t,i)){l=t;break}}if(!l)throw new Error("Selector was not found.");const c=[...B(l,e,r,i,n)];return c.sort(I),c.length>0?N(c[0]):N(l)}function P(e){if(/^[a-z\-]{3,}$/i.test(e)){const t=e.split(/-|[A-Z]/);for(const e of t){if(e.length<=2)return!1;if(/[^aeiou]{4,}/i.test(e))return!1}return!0}return!1}function M(e,t){const a=[],n=e.getAttribute("id");n&&t.idName(n)&&a.push({name:"#"+CSS.escape(n),penalty:0});for(let n=0;n<e.classList.length;n++){const r=e.classList[n];t.className(r)&&a.push({name:"."+CSS.escape(r),penalty:1})}for(let n=0;n<e.attributes.length;n++){const r=e.attributes[n];t.attr(r.name,r.value)&&a.push({name:`[${CSS.escape(r.name)}="${CSS.escape(r.value)}"]`,penalty:2})}const r=e.tagName.toLowerCase();if(t.tagName(r)){a.push({name:r,penalty:5});const t=R(e,r);void 0!==t&&a.push({name:j(r,t),penalty:10})}const i=R(e);return void 0!==i&&a.push({name:z(r,i),penalty:50}),a}function N(e){let t=e[0],a=t.name;for(let n=1;n<e.length;n++){const r=e[n].level||0;a=t.level===r-1?`${e[n].name} > ${a}`:`${e[n].name} ${a}`,t=e[n]}return a}function D(e){return e.map((e=>e.penalty)).reduce(((e,t)=>e+t),0)}function I(e,t){return D(e)-D(t)}function R(e,t){const a=e.parentNode;if(!a)return;let n=a.firstChild;if(!n)return;let r=0;for(;n&&(n.nodeType!==Node.ELEMENT_NODE||void 0!==t&&n.tagName.toLowerCase()!==t||r++,n!==e);)n=n.nextSibling;return r}function O(e,t){let a=0,n=e;const r=[];for(;n&&n!==t;){const e=n.tagName.toLowerCase(),t=R(n,e);if(void 0===t)return;r.push({name:j(e,t),penalty:NaN,level:a}),n=n.parentElement,a++}if(U(r,t))return r}function z(e,t){return"html"===e?"html":`${e}:nth-child(${t})`}function j(e,t){return"html"===e?"html":`${e}:nth-of-type(${t})`}function*H(e,t=[]){if(e.length>0)for(let a of e[0])yield*H(e.slice(1,e.length),t.concat(a));else yield t}function U(e,t){const a=N(e);switch(t.querySelectorAll(a).length){case 0:throw new Error(`Can't select any node with this selector: ${a}`);case 1:return!0;default:return!1}}function*B(e,t,a,n,r){if(e.length>2&&e.length>a.optimizedMinLength)for(let i=1;i<e.length-1;i++){if((new Date).getTime()-r.getTime()>a.timeoutMs)return;const l=[...e];l.splice(i,1),U(l,n)&&n.querySelector(N(l))===t&&(yield l,yield*B(l,t,a,n,r))}}var W=function(e,t,a,n){return new(a||(a=Promise))((function(r,i){function l(e){try{c(n.next(e))}catch(e){i(e)}}function o(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(l,o)}c((n=n.apply(e,t||[])).next())}))};const $=()=>{window.monkeyPatched||(()=>{window.monkeyPatched=!0;const e=EventTarget.prototype.addEventListener,t=3e4;function a(e,t,a,n,r,i){var l;return W(this,void 0,void 0,(function*(){const o=f(),c=function(e=null,t=globalThis.document){let a;a=e?e.querySelectorAll("[data-element-meta-name]"):t.querySelectorAll("[data-element-meta-name]");const n={};return a.forEach((e=>{const t=e.getAttribute("data-element-meta-name"),a=e.getAttribute("data-element-meta-data");n[t]||(n[t]=[]),n[t].push(JSON.parse(a))})),n}(),s=function e(t,a=0,n={}){return!t||a>=15?n:(t.hasAttribute("data-clickable-id")&&(n["data-clickable-id"]=t.getAttribute("data-clickable-id")||""),t.hasAttribute("data-element-meta-name")&&(n["data-element-meta-name"]=t.getAttribute("data-element-meta-name")||""),t.hasAttribute("data-element-meta-data")&&(n["data-element-meta-data"]=t.getAttribute("data-element-meta-data")||""),t.hasAttribute("data-fetch-url")&&(n["data-fetch-url"]=t.getAttribute("data-fetch-url")||""),e(t.parentElement,a+1,n))}(t),d=function(e,t){return`html_${function(e){let t=0;for(let a=0;a<e.length;a++)t=(t<<5)-t+e.charCodeAt(a),t|=0;return console.log("Hash value before return:",t),t.toString()}(window.location.href)}_${e}_${t}`}(a,i),u={tagName:t.tagName,className:t.className,id:t.id,innerText:t.innerText||t.value||"",outerHTML:t.outerHTML};let m;s.hasOwnProperty("data-fetch-url")&&(m=s["data-fetch-url"]),document.querySelectorAll('input:not([type="hidden"]), select, textarea').forEach((e=>{const t=e;if(null!==t.value&&t.setAttribute("data-processed-input-value",t.value),t instanceof HTMLInputElement&&("checkbox"===t.type||"radio"===t.type)&&t.setAttribute("data-processed-input-checked",String(t.checked)),t instanceof HTMLSelectElement){const e=Array.from(t.selectedOptions).map((e=>{var t,a;return null!==(a=null===(t=e.textContent)||void 0===t?void 0:t.trim())&&void 0!==a?a:""})).join("||");t.setAttribute("data-processed-input-selected-text",e)}})),document.querySelectorAll('a, button, select, [onclick], input[type="button"], input[type="submit"]').forEach((e=>{const t=e.getBoundingClientRect(),a=t.top>=0&&t.left>=0&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth);e.setAttribute("data-processed-visible-clickable-marker",a?"true":"false")}));const p={eventType:e,timestamp:a,uuid:i,target:u,htmlSnapshotId:d,selector:n||"","data-semantic-id":s["data-clickable-id"]||"","element-meta-name":s["data-element-meta-name"]||"","element-meta-data":s["data-element-meta-data"]||"",pageMeta:c||"",fetchUrl:m||"",url:r||"",windowSize:{width:window.innerWidth,height:window.innerHeight},htmlContent:document.documentElement.outerHTML,simplifiedHTML:o};return"INPUT"===t.tagName&&"text"===t.type&&(p["input-terms"]=t.value),"nav-search-submit-button"===t.id&&"submit"===t.type&&(p["input-terms"]=null===(l=document.querySelector('input[id="twotabsearchtextbox"]'))||void 0===l?void 0:l.value),p}))}const n=e=>new Promise(((t,a)=>{e.aborted?t(void 0):e.addEventListener("abort",(()=>t(void 0)),{once:!0})})),r=e=>{const t=e.target;return!!t.closest("a")||"input"===t.tagName.toLowerCase()&&"submit"===t.type};EventTarget.prototype.addEventListener=function(i,l,o={}){return W(this,void 0,void 0,(function*(){if(o&&o.skip_monkey_patch)return e.call(this,i,l,o);const c=e=>{"function"==typeof l?l.call(this,e):l&&"function"==typeof l.handleEvent&&l.handleEvent.call(l,e)};if("click"===i&&l){const s=function(e){return W(this,void 0,void 0,(function*(){if(window.shouldExclude)return console.log("should exclude"),void c(e);const i=e.target;if(b(i))return void c(e);if(e.just_for_default)return void console.log("skip monkey patch");if(e.block_signal){const t=new AbortController;if(e.finish_signals.push(t),e.block_signal){const t=e.block_signal.signal;yield n(t),console.log("[Monkey Patch] Debouncing click event, unblocking")}else console.log("[Monkey Patch] Debouncing click event, no block signal");return"function"==typeof l?l.call(this,e):l&&"function"==typeof l.handleEvent&&l.handleEvent.call(l,e),void t.abort()}e.block_signal=new AbortController,e.finish_signals=[],console.log("[Monkey Patch] Click detected on:",e.target),console.log(e);const o=(new Date).toISOString();if(console.log(e.target),r(e)){console.log("[Monkey Patch] Click on cancelable"),e.preventDefault(),e.preventDefault=()=>{e.my_default_prevented=!0},e.my_default_prevented=!1,console.log("after patch event",e);const r=A();try{const n=new Promise(((e,a)=>{function n(t){"SCREENSHOT_COMPLETE"===t.data.type&&t.data.timestamp===o&&(window.removeEventListener("message",n),t.data.success?e(void 0):a(new Error(t.data.error||"Screenshot failed")))}window.addEventListener("message",n),setTimeout((()=>{window.removeEventListener("message",n),a(new Error("Screenshot timeout"))}),t)})),i=new Promise(((e,a)=>{function n(t){"INTERACTION_COMPLETE"===t.data.type&&t.data.timestamp===o&&(window.removeEventListener("message",n),t.data.success?e(void 0):a(new Error(t.data.error||"Interaction failed")))}window.addEventListener("message",n),setTimeout((()=>{window.removeEventListener("message",n),a(new Error("Interaction timeout"))}),t)})),l=L(e.target,{maxNumberOfPathChecks:0}),c=yield a("click_a",e.target,o,l,window.location.href,r);window.postMessage({type:"CAPTURE_SCREENSHOT",timestamp:o,uuid:r},"*"),window.postMessage({type:"SAVE_INTERACTION_DATA",data:c,uuid:r},"*"),console.log("waiting for screenshot and interaction"),yield Promise.all([n,i]),console.log("screenshot and interaction complete")}catch(e){console.error("Error:",e)}finally{if(console.log("running original listener"),console.log(l),console.log(e),e.block_signal.abort(),yield Promise.all(e.finish_signals.map((e=>n(e.signal)))),c(e),console.log("event",e),console.log("re-dispatch the event if its not prevented, 2"),!e.my_default_prevented){const t=new MouseEvent(e.type,{bubbles:e.bubbles,cancelable:!1,composed:e.composed,view:e.view,detail:e.detail,screenX:e.screenX,screenY:e.screenY,clientX:e.clientX,clientY:e.clientY,ctrlKey:e.ctrlKey,altKey:e.altKey,shiftKey:e.shiftKey,metaKey:e.metaKey,button:e.button,buttons:e.buttons,relatedTarget:e.relatedTarget});t.just_for_default=!0,i.dispatchEvent(t)}}return}const s=A();try{const n=new Promise(((e,a)=>{function n(t){"SCREENSHOT_COMPLETE"===t.data.type&&t.data.timestamp===o&&(window.removeEventListener("message",n),t.data.success?e(void 0):a(new Error(t.data.error||"Screenshot failed")))}window.addEventListener("message",n),setTimeout((()=>{window.removeEventListener("message",n),a(new Error("Screenshot timeout"))}),t)})),r=yield a("click_b",e.target,o,L(e.target,{maxNumberOfPathChecks:0}),window.location.href,s);window.postMessage({type:"CAPTURE_SCREENSHOT",timestamp:o,uuid:s},"*"),window.postMessage({type:"SAVE_INTERACTION_DATA",data:r,uuid:s},"*");const i=new Promise(((e,a)=>{function n(t){"INTERACTION_COMPLETE"===t.data.type&&t.data.timestamp===o&&(window.removeEventListener("message",n),t.data.success?e(void 0):a(new Error(t.data.error||"Interaction failed")))}window.addEventListener("message",n),setTimeout((()=>{window.removeEventListener("message",n),a(new Error("Interaction timeout"))}),t)}));console.log("waiting for screenshot and interaction"),yield Promise.all([n,i]),console.log("screenshot and interaction complete")}catch(e){console.error("Error capturing screenshot:",e)}finally{console.log("running original listener"),e.block_signal.abort(),yield Promise.all(e.finish_signals.map((e=>n(e.signal)))),c(e)}}))};return o&&("boolean"==typeof o?o={useCapture:!1,passive:!1}:"object"==typeof o&&(o.passive=!1)),e.call(this,i,s,o)}return e.call(this,i,l,o)}))},console.log("[Monkey Patch] addEventListener successfully patched."),document.addEventListener("click",(function(e){return W(this,void 0,void 0,(function*(){if(window.shouldExclude)console.log("should exclude");else if(!b(e.target))if(e.just_for_default)console.log("skip monkey patch b");else if(r(e)){if(Date.now(),e.block_signal)return console.log("[Monkey Patch] Anchor click event hander from our own listener"),void console.log("should already be logged in other event listeners");e.block_signal=new AbortController,e.finish_signals=[];const r=e.target;console.log("[Intercepted] Click on cancelable"),e.preventDefault(),e.stopPropagation();const i=(new Date).toISOString(),l=A();try{const n=new Promise(((e,a)=>{function n(t){"SCREENSHOT_COMPLETE"===t.data.type&&t.data.timestamp===i&&(window.removeEventListener("message",n),t.data.success?e(void 0):a(new Error(t.data.error||"Screenshot failed")))}window.addEventListener("message",n,{capture:!0}),setTimeout((()=>{window.removeEventListener("message",n),a(new Error("Screenshot timeout"))}),t)}));window.postMessage({type:"CAPTURE_SCREENSHOT",timestamp:i,uuid:l},"*");const o=yield a("click_c",e.target,i,L(r,{maxNumberOfPathChecks:0}),window.location.href,l);window.postMessage({type:"SAVE_INTERACTION_DATA",data:o,uuid:l},"*");const c=new Promise(((e,a)=>{function n(t){"INTERACTION_COMPLETE"===t.data.type&&t.data.timestamp===i&&(window.removeEventListener("message",n),t.data.success?e(void 0):a(new Error(t.data.error||"Interaction failed")))}window.addEventListener("message",n),setTimeout((()=>{window.removeEventListener("message",n),a(new Error("Interaction timeout"))}),t)}));yield n,yield c}catch(e){console.error("Error capturing screenshot:",e)}finally{if(e.block_signal.abort(),yield Promise.all(e.finish_signals.map((e=>n(e.signal)))),console.log("re-dispatch the event if its not prevented, 1"),!e.my_default_prevented){const t=new MouseEvent(e.type,{bubbles:e.bubbles,cancelable:!1,composed:e.composed,view:e.view,detail:e.detail,screenX:e.screenX,screenY:e.screenY,clientX:e.clientX,clientY:e.clientY,ctrlKey:e.ctrlKey,altKey:e.altKey,shiftKey:e.shiftKey,metaKey:e.metaKey,button:e.button,buttons:e.buttons,relatedTarget:e.relatedTarget});t.just_for_default=!0,r.dispatchEvent(t)}}}}))}),{capture:!0,skip_monkey_patch:!0,passive:!1})})(),document.addEventListener("DOMContentLoaded",(()=>{console.log("DOMContentLoaded"),h(window.location.href).then((e=>{console.log("shouldExclude",e),window.shouldExclude=e}))}),{once:!0})};h(window.location.href,!0).then((e=>{e||$()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
