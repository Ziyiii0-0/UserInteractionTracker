/*! For license information please see injected.js.LICENSE.txt */
(()=>{"use strict";var e="http://userdatacollect.hailab.io",t=["www.amazon.com"],r=("".concat(e,"/interactions_record_status"),"".concat(e,"/check_user_id"),["https://www.amazon.com/checkout/","https://www.amazon.com/gp/buy/","https://www.amazon.com/a/addresses","https://www.amazon.com/cpe/yourpayments/"]);function n(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return a(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?a(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,l=!0,c=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return l=e.done,e},e:function(e){c=!0,i=e},f:function(){try{l||null==r.return||r.return()}finally{if(c)throw i}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}var o={selector:"#navbar-main",name:"nav_bar",children:[{selector:"#nav-search-bar-form",children:[{selector:"input#twotabsearchtextbox",name:"search_input",generate_metadata:function(e){return{name:"search_term",data:{term:null==e?void 0:e.value}}}},{selector:"#nav-search-submit-button",clickable:!0,name:"search_button"}]},{selector:"#nav-link-accountList",text_selector:"#nav-link-accountList span.nav-line-2",add_text:!0,clickable:!0,name:"account_and_list_button"},{selector:"#nav-orders",add_text:!0,clickable:!0,name:"order_button"},{selector:"#nav-cart",text_selector:"#nav-cart .nav-line-2",add_text:!0,clickable:!0,name:"cart_button"}]},i={selector:"#productFactsDesktopExpander",add_text:!0,class:"product-facts"},l={selector:"div.mir-layout-DELIVERY_BLOCK-slot-PRIMARY_DELIVERY_MESSAGE_LARGE",add_text:!0,class:"product-delivery"},c={selector:"#selectQuantity",name:"quantity_selector",children:[{selector:"label",add_text:!0},{selector:"span.a-dropdown-prompt",add_text:!0},{selector:"select",name:"drop_down_list"}]},s={selector:"input[name='submit.add-to-cart'], input[name='submit.add-to-cart-ubb']",add_text:!0,clickable:!0,name:"add_to_cart",class:"product-add-to-cart"},u={selector:"input[name='submit.buy-now']",add_text:!0,clickable:!0,name:"buy_now",class:"product-buy-now"},d={selector:"#buyBoxAccordion > div.a-box.celwidget",name:"from_text",text_selector:"div.accordion-caption > span",children:[{selector:"div[data-csa-c-content-id='offer_display_desktop_accordion_header']",name:"accordion_selector",add_text:!0,clickable:!0,text_selector:"h5 span.a-text-bold"},{selector:"div.a-accordion-inner.accordion-row-content",name:"purchase_form",children:[i,l,c,{selector:"#replenishmentFrequency_feature_div",name:"delivery_frequency_selector",text_selector:"div.a-section.a-spacing-micro > span",add_text:!0,children:[{selector:"#rcxOrdFreqOnmlWrapper span.a-dropdown-prompt",add_text:!0},{selector:"#rcxOrdFreqOnmlWrapper select",name:"drop_down_list"}]},{selector:"#rcx-subscribe-submit-button-announce",add_text:!0,clickable:!0,name:"set_up_now",class:"product-set-up-now"},s,u]}]},m={selector:"#gsod_singleOfferDisplay_Desktop",children:[{selector:"#addToCart",name:"purchase_form",children:[i,l,c,s,u]}]},p=[o,{selector:"div[data-name='Active Items']",name:"active_item_list",children:[{selector:"div.sc-list-item-content",text_selector:"div.sc-item-content-group ul > li > span.a-list-item > a.sc-product-title span.a-truncate-full",name:"from_text",children:[{selector:"div.sc-item-check-checkbox-selector input",clickable:!0,name:"checkbox"},{selector:"div.sc-item-content-group ul > li > span.a-list-item > a.sc-product-title",clickable:!0,text_selector:"span.a-truncate-full",add_text:!0,name:"product_detail"},{selector:"div.sc-item-content-group span.sc-quantity-stepper",children:[{selector:"button[aria-label='Decrease quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div[role='spinbutton']",add_text:!0,text_format:"Current Quantity: {}"},{selector:"button[aria-label='Increase quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]},{selector:"div.sc-item-content-group input[data-action='delete']",add_text:!0,clickable:!0,name:"delete"},{selector:"div.sc-item-content-group input[data-action='save-for-later']",add_text:!0,clickable:!0,name:"save_for_later"}]}]},{selector:"#sc-buy-box-ptc-button input",add_text:!0,clickable:!0,name:"check_out"}],f=[{match:"/",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[o]}]},{match:"/s",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[o,{selector:"#s-refinements",name:"refinements",children:[{selector:"div.a-section.a-spacing-none:not(:has(#n-title)):has(span.a-size-base.a-color-base.puis-bold-weight-text):has(ul span.a-declarative > span > li):not(#reviewsRefinements):not(#departments):not(#priceRefinements):not(#filters)",name:"from_text",text_selector:"span.a-size-base.a-color-base.puis-bold-weight-text",children:[{selector:"span.a-size-base.a-color-base.puis-bold-weight-text",add_text:!0,class:"refinement-title"},{selector:"a.s-navigation-clear-link",add_text:!0,name:"clear_selection",clickable:!0},{selector:"ul:nth-of-type(1) > span.a-declarative > span > li:has(a.a-link-normal.s-navigation-item):has(input[type='checkbox'])",add_text:!0,name:"from_text",clickable:!0,direct_child:!0,text_js:function(e){try{var t="";if(!e)return t;var r=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())t+=e.innerText.trim(),r&&r.hasAttribute("title")&&(t+=" ",t+=r.getAttribute("title"));else{var n=e.querySelector("a.a-link-normal.s-navigation-item");n&&n.hasAttribute("title")&&(t+=n.getAttribute("title"))}return r&&"true"===r.getAttribute("aria-current")&&(t="Clear Option "+t),t}catch(e){return console.log(e),""}},generate_metadata:function(e){var t,r="",n=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())r+=e.innerText.trim(),n&&n.hasAttribute("title")&&(r+="_",r+=n.getAttribute("title"));else{var a=e.querySelector("a.a-link-normal.s-navigation-item");a&&a.hasAttribute("title")&&(r+=a.getAttribute("title"))}var o=null===(t=e.closest("ul"))||void 0===t?void 0:t.previousElementSibling,i=null==o?void 0:o.innerText,l="";return n&&n.hasAttribute("href")&&(l=n.getAttribute("href")),n&&"true"===n.getAttribute("aria-current")?{name:"refinements."+i,data:{title:r,selected:!0,url:l}}:{name:"refinements."+i,data:{title:r,selected:!1,url:l}}},children:[{selector:"input[type='checkbox']"}]},{selector:"ul:nth-of-type(1) > span.a-declarative > span > li:has(a.a-link-normal.s-navigation-item):not(:has(input[type='checkbox']))",add_text:!0,name:"from_text",clickable:!0,direct_child:!0,text_js:function(e){try{var t="";if(!e)return t;var r=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())t+=e.innerText.trim(),r&&r.hasAttribute("title")&&(t+=" ",t+=r.getAttribute("title"));else{var n=e.querySelector("a.a-link-normal.s-navigation-item");n&&n.hasAttribute("title")&&(t+=n.getAttribute("title"))}return r&&"true"===r.getAttribute("aria-current")&&(t="Clear Option "+t),t}catch(e){return console.log(e),""}},generate_metadata:function(e){var t,r="",n=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())r+=e.innerText.trim(),n&&n.hasAttribute("title")&&(r+="_",r+=n.getAttribute("title"));else{var a=e.querySelector("a.a-link-normal.s-navigation-item");a&&a.hasAttribute("title")&&(r+=a.getAttribute("title"))}var o=null===(t=e.closest("ul"))||void 0===t?void 0:t.previousElementSibling,i=null==o?void 0:o.innerText,l="";return n&&n.hasAttribute("href")&&(l=n.getAttribute("href")),n&&"true"===n.getAttribute("aria-current")?{name:"refinements."+i,data:{title:r,selected:!0,url:l}}:{name:"refinements."+i,data:{title:r,selected:!1,url:l}}}},{selector:"ul:nth-of-type(1) > span.a-declarative > li > span > div[data-a-expander-name='filter-content-expander']",name:"more_options",children:[{selector:"a[data-csa-c-func-deps='aui-da-a-expander-toggle']",name:"toggle_expansion",add_text:!0},{selector:"li:has(input[type='checkbox'])",add_text:!0,name:"from_text",clickable:!0,text_js:function(e){try{var t="";if(!e)return t;var r=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())t+=e.innerText.trim(),r&&r.hasAttribute("title")&&(t+=" ",t+=r.getAttribute("title"));else{var n=e.querySelector("a.a-link-normal.s-navigation-item");n&&n.hasAttribute("title")&&(t+=n.getAttribute("title"))}return r&&"true"===r.getAttribute("aria-current")&&(t="Clear Option "+t),t}catch(e){return console.log(e),""}},generate_metadata:function(e){var t,r="",n=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())r+=e.innerText.trim(),n&&n.hasAttribute("title")&&(r+="_",r+=n.getAttribute("title"));else{var a=e.querySelector("a.a-link-normal.s-navigation-item");a&&a.hasAttribute("title")&&(r+=a.getAttribute("title"))}var o=null===(t=e.closest("ul"))||void 0===t?void 0:t.previousElementSibling,i=null==o?void 0:o.innerText,l="";return n&&n.hasAttribute("href")&&(l=n.getAttribute("href")),n&&"true"===n.getAttribute("aria-current")?{name:"refinements."+i,data:{title:r,selected:!0,url:l}}:{name:"refinements."+i,data:{title:r,selected:!1,url:l}}},children:[{selector:"input[type='checkbox']"}]},{selector:"li:not(:has(input[type='checkbox']))",add_text:!0,name:"from_text",clickable:!0,text_js:function(e){try{var t="";if(!e)return t;var r=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())t+=e.innerText.trim(),r&&r.hasAttribute("title")&&(t+=" ",t+=r.getAttribute("title"));else{var n=e.querySelector("a.a-link-normal.s-navigation-item");n&&n.hasAttribute("title")&&(t+=n.getAttribute("title"))}return r&&"true"===r.getAttribute("aria-current")&&(t="Clear Option "+t),t}catch(e){return console.log(e),""}},generate_metadata:function(e){var t,r="",n=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())r+=e.innerText.trim(),n&&n.hasAttribute("title")&&(r+="_",r+=n.getAttribute("title"));else{var a=e.querySelector("a.a-link-normal.s-navigation-item");a&&a.hasAttribute("title")&&(r+=a.getAttribute("title"))}var o=null===(t=e.closest("ul"))||void 0===t?void 0:t.previousElementSibling,i=null==o?void 0:o.innerText,l="";return n&&n.hasAttribute("href")&&(l=n.getAttribute("href")),n&&"true"===n.getAttribute("aria-current")?{name:"refinements."+i,data:{title:r,selected:!0,url:l}}:{name:"refinements."+i,data:{title:r,selected:!1,url:l}}}}]}]},{selector:"#departments",name:"departments",add_text:!0,text_format:"Department",children:[{selector:"li a",add_text:!0,name:"from_text",clickable:!0,generate_metadata:function(e){var t=null==e?void 0:e.getAttribute("aria-current"),r=null==e?void 0:e.innerText,n=null==e?void 0:e.getAttribute("href");return t&&"true"==t?{name:"refinements.departments",data:{title:r,selected:!0,url:n}}:{name:"refinements.departments",data:{title:r,selected:!1,url:n}}}}]},{selector:"#reviewsRefinements",name:"reviews_refinements",add_text:!0,text_format:"Customer Reviews",children:[{selector:"a.s-navigation-clear-link",add_text:!0,name:"clear_selection",clickable:!0},{selector:"li a[aria-current='true']",add_text:!0,name:"from_text",clickable:!0,text_format:"Clear Option {}",generate_metadata:function(e){var t;return{name:"refinements.reviews",data:{title:null==e||null===(t=e.innerText)||void 0===t?void 0:t.replace(/\n/g," "),selected:!0,url:null==e?void 0:e.getAttribute("href")}}}},{selector:"li a[aria-current='false']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:function(e){var t;return{name:"refinements.reviews",data:{title:null==e||null===(t=e.innerText)||void 0===t?void 0:t.replace(/\n/g," "),selected:!1,url:null==e?void 0:e.getAttribute("href")}}}}]},{selector:"#priceRefinements",name:"price_refinements",children:[{selector:"#p_36-title, div.sf-refinement-heading span",add_text:!0,name:"price_heading"},{selector:"div[aria-labelledby='p_36-title'] > a",add_text:!0,name:"clear_price_selection",clickable:!0},{selector:"ul[aria-labelledby='p_36-title'] a[aria-current='true']",add_text:!0,name:"from_text",clickable:!0,text_format:"Clear Option {}",generate_metadata:function(e){return{name:"refinements.price",data:{title:null==e?void 0:e.innerText,selected:!0,url:null==e?void 0:e.getAttribute("href")}}}},{selector:"ul[aria-labelledby='p_36-title'] a[aria-current='false']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:function(e){return{name:"refinements.price",data:{title:null==e?void 0:e.innerText,selected:!1,url:null==e?void 0:e.getAttribute("href")}}}},{selector:"#p_n_deal_type-title",add_text:!0,name:"deals_discounts_heading"},{selector:"div[aria-labelledby='p_n_deal_type-title'] > a",add_text:!0,name:"clear_deals_discount_selection",clickable:!0},{selector:"ul[aria-labelledby='p_n_deal_type-title'] a[aria-current='true']",add_text:!0,name:"from_text",clickable:!0,text_format:"Clear Option {}",generate_metadata:function(e){return{name:"refinements.price",data:{title:null==e?void 0:e.innerText,selected:!0,url:null==e?void 0:e.getAttribute("href")}}}},{selector:"ul[aria-labelledby='p_n_deal_type-title'] a[aria-current='false']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:function(e){return{name:"refinements.price",data:{title:null==e?void 0:e.innerText,selected:!1,url:null==e?void 0:e.getAttribute("href")}}}},{selector:"div.sf-range-slider-row:nth-of-type(1)",add_text:!0,generate_metadata:function(e){var t;return{name:"refinements.price",data:{title:"price_range",range:null==e||null===(t=e.innerText)||void 0===t?void 0:t.replace(/\n/g,"")}}}},{selector:"div.sf-range-slider-row:nth-of-type(2) div.s-lower-bound input",name:"price_min_value",add_text:!0,clickable:!0,keep_attr:["min","max","step"],override_attr:{step_values:function(e){var t=e.closest("form");if(t){var r=t.getAttribute("data-slider-props");if(r)return JSON.parse(r).stepLabels}return""},current_value:function(e){var t=Number.parseInt(e.getAttribute("value"));if(null!==t){var r=e.closest("form");if(r){var n=r.getAttribute("data-slider-props");if(n)return JSON.parse(n).stepLabels[t]}}return""}}},{selector:"div.sf-range-slider-row:nth-of-type(2) div.s-upper-bound input",name:"price_max_value",add_text:!0,clickable:!0,keep_attr:["min","max","step"],override_attr:{step_values:function(e){var t=e.closest("form");if(t){var r=t.getAttribute("data-slider-props");if(r)return JSON.parse(r).stepLabels}return""},current_value:function(e){var t=Number.parseInt(e.getAttribute("value"));if(null!==t){var r=e.closest("form");if(r){var n=r.getAttribute("data-slider-props");if(n)return JSON.parse(n).stepLabels[t]}}return""}}},{selector:"div.sf-submit-range-button input",name:"submit_price_range",add_text:!0,text_format:"Go",clickable:!0},{selector:"div.sf-reset-range-link a",name:"reset_price_selection",add_text:!0,clickable:!0}]}]},{selector:"div.s-main-slot.s-result-list.s-search-results",name:"search_results",children:[{insert_split_marker:!0,insert_split_marker_every:4,selector:'div[data-component-type="s-search-result"]',text_selector:"span.a-color-base.a-text-normal, h2.a-color-base.a-text-normal span",name:"from_text",class:"search-result",children:[{selector:"div[data-cy='title-recipe'] a.a-link-normal.s-link-style.a-text-normal",add_text:!0,class:"product-name",clickable:!0,name:"product_name"},{selector:"div.s-product-image-container",add_text:!0,name:"product_image",clickable:!0,text_format:"Product Image"},{selector:"div.s-color-swatch-container",name:"available_colors",children:[{selector:"div.s-color-swatch-pad",name:"from_text",clickable:!0,add_text:!0,text_js:function(e){var t=e.querySelector("a");return t&&t.getAttribute("aria-label")||""}},{selector:"div[data-csa-c-type='link'] a",direct_child:!0,name:"from_text",clickable:!0,add_text:!0}]},{selector:"div[data-cy='reviews-block']",class:"product-review",children:[{selector:"span.a-icon-alt",add_text:!0,class:"product-rating"},{selector:"span.a-size-base.s-underline-text",add_text:!0,text_format:"{} reviews",class:"product-rating-count"}]},{selector:"div[data-cy='price-recipe']",class:"product-price",children:[{selector:"a.a-link-normal > span.a-price > span.a-offscreen",add_text:!0}]},{selector:"div[data-cy='delivery-recipe']",add_text:!0,class:"product-delivery"},{selector:"div[data-cy='add-to-cart'] button",add_text:!0,clickable:!0,name:"add_to_cart"},{selector:"div[data-csa-c-content-id='s-search-see-details-button'] a",add_text:!0,clickable:!0,name:"see_options"}],generate_metadata:function(e){var t=e.getAttribute("data-asin"),r=e.querySelector("div[data-cy='price-recipe'] a.a-link-normal > span.a-price > span.a-offscreen"),n=null==r?void 0:r.innerText,a=e.querySelector("span.a-color-base.a-text-normal, h2.a-color-base.a-text-normal span"),o=null==a?void 0:a.innerText,i=e.querySelector("div[data-cy='title-recipe'] a.a-link-normal.s-link-style.a-text-normal"),l=null==i?void 0:i.getAttribute("href"),c=e.querySelector("div[data-cy='delivery-recipe']");return{name:"search_results",data:{title:o,asin:t,price:n,url:l,delivery:null==c?void 0:c.innerText.replace(/[\n]/g," ")}}}}]},{selector:"span.s-pagination-strip",name:"pagination",children:[{selector:".s-pagination-item",add_text:!0,name:"from_text",clickable:!0}]},{selector:"div.a-popover-wrapper",name:"popover",children:[{selector:"header.a-popover-header button",add_text:!0,clickable:!0,name:"close",text_format:"Close"},{selector:"div.a-popover-inner div.puis-atc-size-variation",children:[{selector:"div.a-row:nth-of-type(1)",direct_child:!0,children:[{selector:"span[data-component-type='s-product-image'] a",name:"product_image",add_text:!0,clickable:!0,text_format:"Product Image"},{selector:"div.puis-size-variation-title a",name:"product_title",add_text:!0,clickable:!0},{selector:"div.puis-size-variation-product-spec",name:"product_specification",add_text:!0,clickable:!0,click_selector:"a"}]},{selector:"div.a-row:nth-of-type(2)",direct_child:!0,children:[{selector:"div.puis-size-variation-product-options",name:"from_text",text_selector:"span.a-size-base.a-color-secondary",children:[{selector:"span.a-size-base.a-color-secondary",add_text:!0},{selector:"span.a-dropdown-prompt",add_text:!0},{selector:"select",name:"drop_down_list"}]},{selector:"div.puis-size-variation-price a",name:"price",clickable:!0,add_text:!0,text_selector:"span[aria-hidden='true']"},{selector:"div.puis-size-variation-delivery",add_text:!0,name:"delivery"}]},{selector:"div.a-row:nth-of-type(3)",direct_child:!0,children:[{selector:"span.s-no-js-hide input",name:"cancel",clickable:!0,add_text:!0,text_format:"Cancel"},{selector:"div.puis-atcb-add-container button",name:"add_to_cart",clickable:!0,add_text:!0}]}]}]}]}]},{match:"#productTitle",match_text:"",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[o,{selector:"#centerCol",class:"product-card",children:[{selector:"#title",add_text:!0,keep_attr:["id"],generate_metadata:function(e){return{name:"product_details",data:{label:"title",value:(null==e?void 0:e.innerText)||""}}}},{selector:"#averageCustomerReviews",class:"review",children:[{selector:"span.a-icon-alt",add_text:!0},{selector:"#acrCustomerReviewText",add_text:!0}]},{selector:'#apex_desktop > div[data-csa-c-slot-id="apex_dp_center_column"] > div[class="offersConsistencyEnabled"] > div:not([style="display:none;"]):not([style="display: none;"]) #corePriceDisplay_desktop_feature_div div.a-section.a-spacing-none.aok-align-center.aok-relative > span.aok-offscreen, #apex_desktop > div[data-csa-c-slot-id="apex_dp_center_column"] > div[data-csa-c-content-id="apex_with_rio_cx"] #corePriceDisplay_desktop_feature_div span.a-price.aok-align-center.reinventPricePriceToPayMargin.priceToPay',add_text:!0,text_format:"Price: {}",class:"product-price",generate_metadata:function(e){var t;return{name:"product_details",data:{label:"price",value:(null==e||null===(t=e.innerText)||void 0===t?void 0:t.replace(/\n/g,""))||""}}}},{selector:"#twister",class:"product-options",name:"product_options",children:[{selector:"div.a-section",text_selector:"div.a-row:has(label.a-form-label) > label.a-form-label",name:"from_text",direct_child:!0,generate_metadata:function(e){var t,r,a=null===(t=e.querySelector("div.a-row:has(label.a-form-label) label.a-form-label"))||void 0===t?void 0:t.innerHTML.replace(/[:\n]/g,"").trim(),o=null===(r=e.querySelector("div.a-row:has(label.a-form-label) span.selection"))||void 0===r?void 0:r.innerHTML;if(void 0===o||""===o){var i,l=null===(i=e.querySelector("select"))||void 0===i?void 0:i.querySelectorAll("option");if(l){var c,s=n(l);try{for(s.s();!(c=s.n()).done;){var u=c.value;u&&null!==u.getAttribute("selected")&&(o=u.innerHTML.trim())}}catch(e){s.e(e)}finally{s.f()}}}return{name:"product_options",data:{label:a,value:o.trim()}}},children:[{selector:"div.a-row:has(label.a-form-label)",children:[{selector:"label.a-form-label",add_text:!0},{selector:"span.selection",add_text:!0}]},{selector:"select",add_text:!0,name:"drop_down_list"},{selector:"ul",name:"button_list",children:[{selector:"li button",add_text:!0,clickable:!0,name:"from_text",text_js:function(e){var t="";if(e.innerText.trim()){t+=e.innerText.trim();var r=e.querySelector("img");r&&r.alt&&(t+=" ",t+=r.alt)}else{var n=e.querySelector("img");n&&n.alt&&(t+=n.alt)}return t.trim()}}]}]}]},{selector:"#twister-plus-inline-twister",class:"product-options",name:"product_options",children:[{selector:"div.inline-twister-row",text_selector:"div.inline-twister-dim-title-value-truncate-expanded span.a-size-base.a-color-secondary",name:"from_text",direct_child:!0,generate_metadata:function(e){var t,r,a=null===(t=e.querySelector("div.inline-twister-dim-title-value-truncate-expanded span.a-size-base.a-color-secondary"))||void 0===t?void 0:t.innerHTML.replace(/[:\n]/g,"").trim(),o=null===(r=e.querySelector("div.inline-twister-dim-title-value-truncate-expanded span.inline-twister-dim-title-value"))||void 0===r?void 0:r.innerHTML;if(void 0===o||""===o){var i,l=null===(i=e.querySelector("select"))||void 0===i?void 0:i.querySelectorAll("option");if(l){var c,s=n(l);try{for(s.s();!(c=s.n()).done;){var u=c.value;u&&null!==u.getAttribute("selected")&&(o=u.innerHTML.trim())}}catch(e){s.e(e)}finally{s.f()}}}return{name:"product_options",data:{label:a,value:o.trim()}}},children:[{selector:"div.inline-twister-dim-title-value-truncate-expanded",children:[{selector:"span.a-size-base.a-color-secondary",add_text:!0},{selector:"span.inline-twister-dim-title-value",add_text:!0}]},{selector:"select",add_text:!0,name:"drop_down_list"},{selector:"ul",name:"button_list",children:[{selector:"li span:not(.aok-hidden) input",add_text:!0,clickable:!0,name:"from_text",text_js:function(e){var t=e.nextElementSibling,r="";if(t.innerText.trim()){r+=t.innerText.trim();var n=t.querySelector("img");n&&n.alt&&(r+=" ",r+=n.alt)}else{var a=t.querySelector("img");a&&a.alt&&(r+=a.alt)}return r.trim()}}]}]},{selector:"div.inline-twister-singleton-header",text_selector:"span.a-size-base.a-color-secondary",name:"from_text",children:[{selector:"span.a-size-base.a-color-secondary",add_text:!0},{selector:"span.inline-twister-dim-title-value-truncate",add_text:!0}],generate_metadata:function(e){var t,r;return{name:"product_options",data:{label:null===(t=e.querySelector("span.a-size-base.a-color-secondary"))||void 0===t?void 0:t.innerHTML.replace(/[:\n]/g,"").trim(),value:(null===(r=e.querySelector("span.inline-twister-dim-title-value-truncate"))||void 0===r?void 0:r.innerHTML).trim()}}}}]},{selector:"#productFactsDesktopExpander ul, #featurebullets_feature_div ul",add_text:!0,name:"about_this_item",text_format:"About this item: {}",generate_metadata:function(e){var t;return{name:"product_details",data:{label:"bullet_list",value:(null==e||null===(t=e.innerText)||void 0===t?void 0:t.replace(/\n/g," "))||""}}}}]},{selector:"#buybox:has(div.a-tab-container):not(:has(#partialState_buybox_desktop))",name:"buybox",children:[{selector:"#tab_heading_desktop_buybox_group_1 a",name:"deliver_tab",clickable:!0,add_text:!0},{selector:"#tab_heading_desktop_buybox_group_2 a",name:"pick_up_tab",clickable:!0,add_text:!0},{selector:"#tab_desktop_buybox_group_1",name:"delivery",add_text:!0,text_format:"Delivery",children:[d,m]},{selector:"#tab_desktop_buybox_group_2",name:"pick_up",add_text:!0,text_format:"Pick Up",children:[{selector:"#gsod_singleOfferDisplay_group_2_Desktop",children:[{selector:"#pickUpOfferDisplay",name:"purchase_form",children:[i,l,c,s,u]}]}]}],generate_metadata:function(e){var t=e.querySelector("input#ASIN");return{name:"product_details",data:{label:"asin",value:(null==t?void 0:t.value)||""}}}},{selector:"#buybox:not(:has(div.a-tab-container)):not(:has(#partialState_buybox_desktop))",name:"buybox",children:[d,m],generate_metadata:function(e){var t=e.querySelector("input#ASIN");return{name:"product_details",data:{label:"asin",value:(null==t?void 0:t.value)||""}}}},{selector:"#partialState_buybox_desktop",children:[{selector:"#partialStateBuybox div.a-section.a-text-center.a-spacing-small",add_text:!0}],generate_metadata:function(e){var t=e.querySelector("input#ASIN");return{name:"product_details",data:{label:"asin",value:(null==t?void 0:t.value)||""}}}},{selector:"#attach-warranty-pane #attach-warranty-display",name:"warranty-box",children:[{selector:"div.attach-warranty-box",text_selector:"#attach-warranty-card-display-title",name:"from_text",children:[{selector:"input[type='checkbox']",name:"select",clickable:!0},{selector:"#attach-warranty-card-display-title",add_text:!0},{selector:"#attach-warranty-card-price",add_text:!0}]},{selector:"div.a-section.attach-warranty-button-row",children:[{selector:"input[aria-labelledby='attachSiAddCoverage-announce']",name:"add_protection",clickable:!0,add_text:!0,text_format:"Add Protection"},{selector:"input[aria-labelledby='attachSiNoCoverage-announce']",name:"no_protection",clickable:!0,add_text:!0,text_format:"No Thanks"}]}]}]}]},{match:"/cart/smart-wagon",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[o,{selector:"#sw-atc-buy-box",children:[{selector:"#sw-subtotal",children:[{selector:"#sw-subtotal-item-count",add_text:!0},{selector:"span[aria-hidden='true']",add_text:!0}]},{selector:"#sc-buy-box-ptc-button span.a-button-inner input",add_text:!0,text_selector:"div.sc-without-multicart",clickable:!0,name:"check_out"},{selector:"#sw-gtc a",add_text:!0,clickable:!0,name:"go_to_cart"}]}]}]},{match:"/cart",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:p}]},{match:"/gp/cart/view.html",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:p}]},{match:"/ap/signin",match_method:"url",terminate:function(){return!!arguments[0]},terminate_callback:function(){return arguments[0]},selector:"html"},{match:"/gp/buy/spc/handlers/display.html",match_method:"url",terminate:function(){return!!arguments[0]},terminate_callback:function(){return arguments[0]},selector:"html"}];function h(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return v(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?v(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,l=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return i=e.done,e},e:function(e){l=!0,o=e},f:function(){try{i||null==r.return||r.return()}finally{if(l)throw o}}}}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function b(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,a=t.tag_name||e.tagName.toLowerCase();a.endsWith("_")&&(a=a.slice(0,-1));var o=document.createElement(a),i="";if(t.text_selector){var l=e.querySelector(t.text_selector);l&&(i=l.innerText||l.textContent||"")}else t.text_js?i=t.text_js(e):t.add_text&&(i=e.innerText||e.textContent||"");i=i.replace(/\s+/g," ").trim(),t.text_format?i=t.text_format.replace("{}",i):t.text_format&&(i=t.text_format),i&&t.add_text&&(o.textContent=i);var c="";if(t.name&&("from_text"===t.name?(c=r?r+".":"",i?c+=i.toLowerCase().replace(/[^\w]+/g,"_"):c=""):"from_nth_child"===t.name?(c=r?r+".":"",c+=n.toString()):(c=r?r+".":"",c+=t.name),o.setAttribute("name",c),r=c),t.generate_metadata){var s=t.generate_metadata(e),u=JSON.stringify(s.data),d=s.name;e.setAttribute("data-element-meta-name",d),e.setAttribute("data-element-meta-data",u)}if(t.clickable){if(!t.name)throw new Error("clickable element must have a name");var m;(m=t.click_selector?e.querySelector(t.click_selector):e)&&m.setAttribute("data-clickable-id",c),window.clickable_recipes||(window.clickable_recipes={}),window.clickable_recipes[c]=t}if("input"===a){var p=e.getAttribute("type");["text","number"].includes(p)?(o.setAttribute("value",e.value),e.setAttribute("data-input-id",c)):"checkbox"===p?o.setAttribute("checked",e.checked.toString()):"radio"===p&&(o.setAttribute("checked",e.checked.toString()),e.setAttribute("data-clickable-id",c)),window.input_recipes||(window.input_recipes={}),window.input_recipes[c]=t}if("select"===a&&(e.setAttribute("data-select-id",c),e.querySelectorAll("option").forEach((function(e){var t=e.getAttribute("value")||e.textContent.trim(),r=c+"."+t,n=document.createElement("option");n.textContent=e.textContent,n.setAttribute("value",t),n.setAttribute("name",r),n.setAttribute("selected",e.selected.toString()),e.setAttribute("data-clickable-id",r),o.appendChild(n)}))),["alt","title","type","value","role","aria-label","aria-hidden","aria-selected"].forEach((function(t){var r=e.getAttribute(t);r&&o.setAttribute(t,r)})),t.keep_attr){var f,v=h(t.keep_attr);try{for(v.s();!(f=v.n()).done;){var _=f.value,y=e.getAttribute(_);y&&o.setAttribute(_,y)}}catch(e){v.e(e)}finally{v.f()}}if(t.class&&o.setAttribute("class",t.class),t.id&&o.setAttribute("id",t.id),t.override_attr)for(var g in t.override_attr)o.setAttribute(g,t.override_attr[g](e));if(t.children&&t.children.length>0){var x,w=h(t.children);try{var k=function(){var t=x.value,n=t.direct_child?":scope > ".concat(t.selector):t.selector;e.querySelectorAll(n).forEach((function(e,n){var a=b(e,t,r,n);if(o.appendChild(a),t.insert_split_marker&&n%(t.insert_split_marker_every||1)==0){var i=document.createElement("split-marker");o.appendChild(i)}if(t.insert_split_marker){var l=document.createElement("split-marker");o.appendChild(l)}}))};for(w.s();!(x=w.n()).done;)k()}catch(e){w.e(e)}finally{w.f()}}if(t.empty_message&&0===o.children.length){var E=document.createTextNode(t.empty_message);o.appendChild(E)}return o}function _(e){return _="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_(e)}function y(){y=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,a=Object.defineProperty||function(e,t,r){e[t]=r.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,r){return e[t]=r}}function u(e,t,r,n){var o=t&&t.prototype instanceof b?t:b,i=Object.create(o.prototype),l=new P(n||[]);return a(i,"_invoke",{value:L(e,r,l)}),i}function d(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var m="suspendedStart",p="suspendedYield",f="executing",h="completed",v={};function b(){}function g(){}function x(){}var w={};s(w,i,(function(){return this}));var k=Object.getPrototypeOf,E=k&&k(k(q([])));E&&E!==r&&n.call(E,i)&&(w=E);var A=x.prototype=b.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function T(e,t){function r(a,o,i,l){var c=d(e[a],e,o);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==_(u)&&n.call(u,"__await")?t.resolve(u.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return r("throw",e,i,l)}))}l(c.arg)}var o;a(this,"_invoke",{value:function(e,n){function a(){return new t((function(t,a){r(e,n,t,a)}))}return o=o?o.then(a,a):a()}})}function L(t,r,n){var a=m;return function(o,i){if(a===f)throw Error("Generator is already running");if(a===h){if("throw"===o)throw i;return{value:e,done:!0}}for(n.method=o,n.arg=i;;){var l=n.delegate;if(l){var c=C(l,n);if(c){if(c===v)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(a===m)throw a=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);a=f;var s=d(t,r,n);if("normal"===s.type){if(a=n.done?h:p,s.arg===v)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(a=h,n.method="throw",n.arg=s.arg)}}}function C(t,r){var n=r.method,a=t.iterator[n];if(a===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,C(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),v;var o=d(a,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,v;var i=o.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,v):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function N(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function P(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(N,this),this.reset(!0)}function q(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function r(){for(;++a<t.length;)if(n.call(t,a))return r.value=t[a],r.done=!1,r;return r.value=e,r.done=!0,r};return o.next=o}}throw new TypeError(_(t)+" is not iterable")}return g.prototype=x,a(A,"constructor",{value:x,configurable:!0}),a(x,"constructor",{value:g,configurable:!0}),g.displayName=s(x,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,x):(e.__proto__=x,s(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(T.prototype),s(T.prototype,l,(function(){return this})),t.AsyncIterator=T,t.async=function(e,r,n,a,o){void 0===o&&(o=Promise);var i=new T(u(e,r,n,a),o);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),s(A,c,"Generator"),s(A,i,(function(){return this})),s(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=q,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function a(n,a){return l.type="throw",l.arg=t,r.next=n,a&&(r.method="next",r.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),s=n.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&n.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),O(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var a=n.arg;O(r)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:q(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),v}},t}function g(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function x(e,t,r,n,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void r(e)}l.done?t(c):Promise.resolve(c).then(n,a)}function w(e){return null!==e.closest("#reason-modal")}function k(e){return E.apply(this,arguments)}function E(){return e=y().mark((function e(n){var a=arguments;return y().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(a.length>1&&void 0!==a[1]&&a[1]){e.next=16;break}if(!chrome.storage){e.next=11;break}return e.next=5,chrome.storage.local.get("userId");case 5:if(e.sent.userId){e.next=9;break}return console.log("no user id"),e.abrupt("return",!0);case 9:e.next=16;break;case 11:return e.next=13,new Promise((function(e){var t=function(r){"GET_USER_ID_RESPONSE"===r.data.type&&(window.removeEventListener("message",t),e(r.data.userId))};window.addEventListener("message",t),window.postMessage({type:"GET_USER_ID"},"*")}));case 13:if(e.sent){e.next=16;break}return e.abrupt("return",!0);case 16:if(n){e.next=18;break}return e.abrupt("return",!0);case 18:return e.abrupt("return",!t.some((function(e){return n.includes(e)}))||r.some((function(e){return n.includes(e)})));case 19:case"end":return e.stop()}}),e)})),E=function(){var t=this,r=arguments;return new Promise((function(n,a){var o=e.apply(t,r);function i(e){x(o,n,a,i,l,"next",e)}function l(e){x(o,n,a,i,l,"throw",e)}i(void 0)}))},E.apply(this,arguments);var e}function A(){console.log("start process recipe");try{var e=function(){var e,t=new URL(window.location.href).pathname,r=function(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return g(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?g(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,l=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return i=e.done,e},e:function(e){l=!0,o=e},f:function(){try{i||null==r.return||r.return()}finally{if(l)throw o}}}}(f);try{for(r.s();!(e=r.n()).done;){var n=e.value,a=n.match_method||"text";if("text"===a)try{var o,i,l=document.querySelector(n.match);if(l&&(!n.match_text||null!==(o=null===(i=l.textContent)||void 0===i?void 0:i.toLowerCase().includes(n.match_text.toLowerCase()))&&void 0!==o&&o))return n}catch(e){console.error("Error checking text match:",e)}else if("url"===a&&n.match===t)return n}}catch(e){r.e(e)}finally{r.f()}throw new Error("No matching recipe found for path: ".concat(t))}(),t=document.querySelector(e.selector);if(t)return b(t,e).outerHTML}catch(e){console.error("Error processing recipe:",e)}}const S={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let T;const L=new Uint8Array(16);function C(){if(!T){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");T=crypto.getRandomValues.bind(crypto)}return T(L)}const N=[];for(let e=0;e<256;++e)N.push((e+256).toString(16).slice(1));const O=function(e,t,r){if(S.randomUUID&&!t&&!e)return S.randomUUID();const n=(e=e||{}).random||(e.rng||C)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,t){r=r||0;for(let e=0;e<16;++e)t[r+e]=n[e];return t}return function(e,t=0){return(N[e[t+0]]+N[e[t+1]]+N[e[t+2]]+N[e[t+3]]+"-"+N[e[t+4]]+N[e[t+5]]+"-"+N[e[t+6]]+N[e[t+7]]+"-"+N[e[t+8]]+N[e[t+9]]+"-"+N[e[t+10]]+N[e[t+11]]+N[e[t+12]]+N[e[t+13]]+N[e[t+14]]+N[e[t+15]]).toLowerCase()}(n)},P=new Set(["role","name","aria-label","rel","href"]);function q(e,t){let r=P.has(e);r||=e.startsWith("data-")&&R(e);let n=R(t)&&t.length<100;return n||=t.startsWith("#")&&R(t.slice(1)),r&&n}function I(e){return R(e)}function M(e){return R(e)}function j(e){return!0}function D(e,t){if(e.nodeType!==Node.ELEMENT_NODE)throw new Error("Can't generate CSS selector for non-element node type.");if("html"===e.tagName.toLowerCase())return"html";const r={root:document.body,idName:I,className:M,tagName:j,attr:q,timeoutMs:1e3,seedMinLength:3,optimizedMinLength:2,maxNumberOfPathChecks:1/0},n=new Date,a={...r,...t},o=function(e,t){return e.nodeType===Node.DOCUMENT_NODE?e:e===t.root?e.ownerDocument:e}(a.root,r);let i,l=0;for(const t of function*(e,t,r){const n=[];let a=[],o=e,i=0;for(;o&&o!==r;){const e=z(o,t);for(const t of e)t.level=i;if(n.push(e),o=o.parentElement,i++,a.push(...V(n)),i>=t.seedMinLength){a.sort(G);for(const e of a)yield e;a=[]}}a.sort(G);for(const e of a)yield e}(e,a,o)){if((new Date).getTime()-n.getTime()>a.timeoutMs||l>=a.maxNumberOfPathChecks){const t=$(e,o);if(!t)throw new Error(`Timeout: Can't find a unique selector after ${a.timeoutMs}ms`);return U(t)}if(l++,X(t,o)){i=t;break}}if(!i)throw new Error("Selector was not found.");const c=[...W(i,e,a,o,n)];return c.sort(G),c.length>0?U(c[0]):U(i)}function R(e){if(/^[a-z\-]{3,}$/i.test(e)){const t=e.split(/-|[A-Z]/);for(const e of t){if(e.length<=2)return!1;if(/[^aeiou]{4,}/i.test(e))return!1}return!0}return!1}function z(e,t){const r=[],n=e.getAttribute("id");n&&t.idName(n)&&r.push({name:"#"+CSS.escape(n),penalty:0});for(let n=0;n<e.classList.length;n++){const a=e.classList[n];t.className(a)&&r.push({name:"."+CSS.escape(a),penalty:1})}for(let n=0;n<e.attributes.length;n++){const a=e.attributes[n];t.attr(a.name,a.value)&&r.push({name:`[${CSS.escape(a.name)}="${CSS.escape(a.value)}"]`,penalty:2})}const a=e.tagName.toLowerCase();if(t.tagName(a)){r.push({name:a,penalty:5});const t=K(e,a);void 0!==t&&r.push({name:Y(a,t),penalty:10})}const o=K(e);return void 0!==o&&r.push({name:F(a,o),penalty:50}),r}function U(e){let t=e[0],r=t.name;for(let n=1;n<e.length;n++){const a=e[n].level||0;r=t.level===a-1?`${e[n].name} > ${r}`:`${e[n].name} ${r}`,t=e[n]}return r}function H(e){return e.map((e=>e.penalty)).reduce(((e,t)=>e+t),0)}function G(e,t){return H(e)-H(t)}function K(e,t){const r=e.parentNode;if(!r)return;let n=r.firstChild;if(!n)return;let a=0;for(;n&&(n.nodeType!==Node.ELEMENT_NODE||void 0!==t&&n.tagName.toLowerCase()!==t||a++,n!==e);)n=n.nextSibling;return a}function $(e,t){let r=0,n=e;const a=[];for(;n&&n!==t;){const e=n.tagName.toLowerCase(),t=K(n,e);if(void 0===t)return;a.push({name:Y(e,t),penalty:NaN,level:r}),n=n.parentElement,r++}if(X(a,t))return a}function F(e,t){return"html"===e?"html":`${e}:nth-child(${t})`}function Y(e,t){return"html"===e?"html":`${e}:nth-of-type(${t})`}function*V(e,t=[]){if(e.length>0)for(let r of e[0])yield*V(e.slice(1,e.length),t.concat(r));else yield t}function X(e,t){const r=U(e);switch(t.querySelectorAll(r).length){case 0:throw new Error(`Can't select any node with this selector: ${r}`);case 1:return!0;default:return!1}}function*W(e,t,r,n,a){if(e.length>2&&e.length>r.optimizedMinLength)for(let o=1;o<e.length-1;o++){if((new Date).getTime()-a.getTime()>r.timeoutMs)return;const i=[...e];i.splice(o,1),X(i,n)&&n.querySelector(U(i))===t&&(yield i,yield*W(i,t,r,n,a))}}function J(e){return J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},J(e)}function B(){B=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,a=Object.defineProperty||function(e,t,r){e[t]=r.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,r){return e[t]=r}}function u(e,t,r,n){var o=t&&t.prototype instanceof b?t:b,i=Object.create(o.prototype),l=new N(n||[]);return a(i,"_invoke",{value:S(e,r,l)}),i}function d(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var m="suspendedStart",p="suspendedYield",f="executing",h="completed",v={};function b(){}function _(){}function y(){}var g={};s(g,i,(function(){return this}));var x=Object.getPrototypeOf,w=x&&x(x(O([])));w&&w!==r&&n.call(w,i)&&(g=w);var k=y.prototype=b.prototype=Object.create(g);function E(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function A(e,t){function r(a,o,i,l){var c=d(e[a],e,o);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==J(u)&&n.call(u,"__await")?t.resolve(u.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return r("throw",e,i,l)}))}l(c.arg)}var o;a(this,"_invoke",{value:function(e,n){function a(){return new t((function(t,a){r(e,n,t,a)}))}return o=o?o.then(a,a):a()}})}function S(t,r,n){var a=m;return function(o,i){if(a===f)throw Error("Generator is already running");if(a===h){if("throw"===o)throw i;return{value:e,done:!0}}for(n.method=o,n.arg=i;;){var l=n.delegate;if(l){var c=T(l,n);if(c){if(c===v)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(a===m)throw a=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);a=f;var s=d(t,r,n);if("normal"===s.type){if(a=n.done?h:p,s.arg===v)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(a=h,n.method="throw",n.arg=s.arg)}}}function T(t,r){var n=r.method,a=t.iterator[n];if(a===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,T(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),v;var o=d(a,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,v;var i=o.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,v):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function O(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function r(){for(;++a<t.length;)if(n.call(t,a))return r.value=t[a],r.done=!1,r;return r.value=e,r.done=!0,r};return o.next=o}}throw new TypeError(J(t)+" is not iterable")}return _.prototype=y,a(k,"constructor",{value:y,configurable:!0}),a(y,"constructor",{value:_,configurable:!0}),_.displayName=s(y,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===_||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,s(e,c,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},E(A.prototype),s(A.prototype,l,(function(){return this})),t.AsyncIterator=A,t.async=function(e,r,n,a,o){void 0===o&&(o=Promise);var i=new A(u(e,r,n,a),o);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},E(k),s(k,c,"Generator"),s(k,i,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=O,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(C),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function a(n,a){return l.type="throw",l.arg=t,r.next=n,a&&(r.method="next",r.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),s=n.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&n.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),C(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var a=n.arg;C(r)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:O(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),v}},t}function Q(e,t,r,n,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void r(e)}l.done?t(c):Promise.resolve(c).then(n,a)}function Z(e){return function(){var t=this,r=arguments;return new Promise((function(n,a){var o=e.apply(t,r);function i(e){Q(o,n,a,i,l,"next",e)}function l(e){Q(o,n,a,i,l,"throw",e)}i(void 0)}))}}var ee=function(){window.monkeyPatched||function(){window.monkeyPatched=!0;var e=EventTarget.prototype.addEventListener,t=3e4;function r(e,t,r,n,a,o){var i=A();console.log("simplifiedHTML",i);var l,c,s,u,d=(l=document.querySelectorAll("[data-element-meta-name]"),c={},l.forEach((function(e){var t=e.getAttribute("data-element-meta-name"),r=e.getAttribute("data-element-meta-data");c[t]||(c[t]=[]),c[t].push(JSON.parse(r))})),c),m=function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return!t||r>=15?n:(t.hasAttribute("data-clickable-id")&&(n["data-clickable-id"]=t.getAttribute("data-clickable-id")||""),t.hasAttribute("data-element-meta-name")&&(n["data-element-meta-name"]=t.getAttribute("data-element-meta-name")||""),t.hasAttribute("data-element-meta-data")&&(n["data-element-meta-data"]=t.getAttribute("data-element-meta-data")||""),e(t.parentElement,r+1,n))}(t),p=function(e,t){var r=window.location.href;return"html_".concat(function(e){for(var t=0,r=0;r<e.length;r++)t=(t<<5)-t+e.charCodeAt(r),t|=0;return console.log("Hash value before return:",t),t.toString()}(r),"_").concat(e,"_").concat(t)}(r,o),f={tagName:t.tagName,className:t.className,id:t.id,innerText:t.innerText||t.value||"",outerHTML:t.outerHTML},h=((s=document.cloneNode(!0)).querySelectorAll('a, button, [onclick], input[type="button"], input[type="submit"]').forEach((function(e){var t=e.getBoundingClientRect();t.top>=0&&t.left>=0&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth)&&e.setAttribute("visible-clickable-element-marker","true")})),s),v={uuid:o,eventType:e,timestamp:r,target:f,htmlSnapshotId:p,selector:n||"","data-semantic-id":m["data-clickable-id"]||"","element-meta-name":m["data-element-meta-name"]||"","element-meta-data":m["data-element-meta-data"]||"","page-meta":d||"",url:a||"",htmlContent:h.documentElement.outerHTML,simplifiedHTML:i};return"INPUT"===t.tagName&&"text"===t.type&&(v["input-terms"]=t.value),"nav-search-submit-button"===t.id&&"submit"===t.type&&(v["input-terms"]=null===(u=document.querySelector('input[id="twotabsearchtextbox"]'))||void 0===u?void 0:u.value),v}var n=function(e){return new Promise((function(t,r){e.aborted?t(void 0):e.addEventListener("abort",(function(){return t(void 0)}),{once:!0})}))},a=function(e){var t=e.target;return!!t.closest("a")||"input"===t.tagName.toLowerCase()&&"submit"===t.type};EventTarget.prototype.addEventListener=function(o,i){var l=this,c=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(c&&c.skip_monkey_patch)return e.call(this,o,i,c);var s=function(e){"function"==typeof i?i.call(l,e):i&&"function"==typeof i.handleEvent&&i.handleEvent.call(i,e)};if("click"===o&&i){var u=function(){var e=Z(B().mark((function e(o){var l,c,u,d,m,p,f,h,v,b,_,y,g,x;return B().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!window.shouldExclude){e.next=4;break}return console.log("should exclude"),s(o),e.abrupt("return");case 4:if(!w(l=o.target)){e.next=8;break}return s(o),e.abrupt("return");case 8:if(!o.just_for_default){e.next=11;break}return console.log("skip monkey patch"),e.abrupt("return");case 11:if(!o.block_signal){e.next=25;break}if(c=new AbortController,o.finish_signals.push(c),!o.block_signal){e.next=21;break}return u=o.block_signal.signal,e.next=18,n(u);case 18:console.log("[Monkey Patch] Debouncing click event, unblocking"),e.next=22;break;case 21:console.log("[Monkey Patch] Debouncing click event, no block signal");case 22:return"function"==typeof i?i.call(this,o):i&&"function"==typeof i.handleEvent&&i.handleEvent.call(i,o),c.abort(),e.abrupt("return");case 25:if(o.block_signal=new AbortController,o.finish_signals=[],console.log("[Monkey Patch] Click detected on:",o.target),console.log(o),d=(new Date).toISOString(),console.log(o.target),!a(o)){e.next=67;break}return console.log("[Monkey Patch] Click on cancelable"),o.preventDefault(),o.preventDefault=function(){o.my_default_prevented=!0},o.my_default_prevented=!1,console.log("after patch event",o),m=O(),e.prev=38,p=new Promise((function(e,r){function n(t){"SCREENSHOT_COMPLETE"===t.data.type&&t.data.timestamp===d&&(window.removeEventListener("message",n),t.data.success?e(void 0):r(new Error(t.data.error||"Screenshot failed")))}window.addEventListener("message",n),setTimeout((function(){window.removeEventListener("message",n),r(new Error("Screenshot timeout"))}),t)})),f=new Promise((function(e,r){function n(t){"INTERACTION_COMPLETE"===t.data.type&&t.data.timestamp===d&&(window.removeEventListener("message",n),t.data.success?e(void 0):r(new Error(t.data.error||"Interaction failed")))}window.addEventListener("message",n),setTimeout((function(){window.removeEventListener("message",n),r(new Error("Interaction timeout"))}),t)})),h=D(o.target,{maxNumberOfPathChecks:0}),v=r("click_a",o.target,d,h,window.location.href,m),window.postMessage({type:"CAPTURE_SCREENSHOT",timestamp:d,uuid:m},"*"),window.postMessage({type:"SAVE_INTERACTION_DATA",data:v,uuid:m},"*"),console.log("waiting for screenshot and interaction"),e.next=48,Promise.all([p,f]);case 48:console.log("screenshot and interaction complete"),e.next=54;break;case 51:e.prev=51,e.t0=e.catch(38),console.error("Error:",e.t0);case 54:return e.prev=54,console.log("running original listener"),console.log(i),console.log(o),o.block_signal.abort(),e.next=61,Promise.all(o.finish_signals.map((function(e){return n(e.signal)})));case 61:return s(o),console.log("event",o),console.log("re-dispatch the event if its not prevented, 2"),o.my_default_prevented||((b=new MouseEvent(o.type,{bubbles:o.bubbles,cancelable:!1,composed:o.composed,view:o.view,detail:o.detail,screenX:o.screenX,screenY:o.screenY,clientX:o.clientX,clientY:o.clientY,ctrlKey:o.ctrlKey,altKey:o.altKey,shiftKey:o.shiftKey,metaKey:o.metaKey,button:o.button,buttons:o.buttons,relatedTarget:o.relatedTarget})).just_for_default=!0,l.dispatchEvent(b)),e.finish(54);case 66:return e.abrupt("return");case 67:return _=O(),e.prev=68,y=new Promise((function(e,r){function n(t){"SCREENSHOT_COMPLETE"===t.data.type&&t.data.timestamp===d&&(window.removeEventListener("message",n),t.data.success?e(void 0):r(new Error(t.data.error||"Screenshot failed")))}window.addEventListener("message",n),setTimeout((function(){window.removeEventListener("message",n),r(new Error("Screenshot timeout"))}),t)})),g=r("click_b",o.target,d,D(o.target,{maxNumberOfPathChecks:0}),window.location.href,_),window.postMessage({type:"CAPTURE_SCREENSHOT",timestamp:d,uuid:_},"*"),window.postMessage({type:"SAVE_INTERACTION_DATA",data:g,uuid:_},"*"),x=new Promise((function(e,r){function n(t){"INTERACTION_COMPLETE"===t.data.type&&t.data.timestamp===d&&(window.removeEventListener("message",n),t.data.success?e(void 0):r(new Error(t.data.error||"Interaction failed")))}window.addEventListener("message",n),setTimeout((function(){window.removeEventListener("message",n),r(new Error("Interaction timeout"))}),t)})),console.log("waiting for screenshot and interaction"),e.next=77,Promise.all([y,x]);case 77:console.log("screenshot and interaction complete"),e.next=83;break;case 80:e.prev=80,e.t1=e.catch(68),console.error("Error capturing screenshot:",e.t1);case 83:return e.prev=83,console.log("running original listener"),o.block_signal.abort(),e.next=88,Promise.all(o.finish_signals.map((function(e){return n(e.signal)})));case 88:return s(o),e.finish(83);case 90:case"end":return e.stop()}}),e,this,[[38,51,54,66],[68,80,83,90]])})));return function(t){return e.apply(this,arguments)}}();return c&&("boolean"==typeof c?c={useCapture:!1,passive:!1}:"object"===J(c)&&(c.passive=!1)),e.call(this,o,u,c)}return e.call(this,o,i,c)},console.log("[Monkey Patch] addEventListener successfully patched."),document.addEventListener("click",function(){var e=Z(B().mark((function e(o){var i,l,c,s,u,d,m;return B().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!window.shouldExclude){e.next=3;break}return console.log("should exclude"),e.abrupt("return");case 3:if(!w(o.target)){e.next=5;break}return e.abrupt("return");case 5:if(!o.just_for_default){e.next=8;break}return console.log("skip monkey patch b"),e.abrupt("return");case 8:if(!a(o)){e.next=44;break}if(Date.now(),!o.block_signal){e.next=14;break}return console.log("[Monkey Patch] Anchor click event hander from our own listener"),console.log("should already be logged in other event listeners"),e.abrupt("return");case 14:return o.block_signal=new AbortController,o.finish_signals=[],i=o.target,console.log("[Intercepted] Click on cancelable"),o.preventDefault(),o.stopPropagation(),l=(new Date).toISOString(),c=O(),e.prev=22,s=new Promise((function(e,r){function n(t){"SCREENSHOT_COMPLETE"===t.data.type&&t.data.timestamp===l&&(window.removeEventListener("message",n),t.data.success?e(void 0):r(new Error(t.data.error||"Screenshot failed")))}window.addEventListener("message",n,{capture:!0}),setTimeout((function(){window.removeEventListener("message",n),r(new Error("Screenshot timeout"))}),t)})),window.postMessage({type:"CAPTURE_SCREENSHOT",timestamp:l,uuid:c},"*"),u=r("click_c",o.target,l,D(i,{maxNumberOfPathChecks:0}),window.location.href,c),window.postMessage({type:"SAVE_INTERACTION_DATA",data:u,uuid:c},"*"),d=new Promise((function(e,r){function n(t){"INTERACTION_COMPLETE"===t.data.type&&t.data.timestamp===l&&(window.removeEventListener("message",n),t.data.success?e(void 0):r(new Error(t.data.error||"Interaction failed")))}window.addEventListener("message",n),setTimeout((function(){window.removeEventListener("message",n),r(new Error("Interaction timeout"))}),t)})),e.next=30,s;case 30:return e.next=32,d;case 32:e.next=37;break;case 34:e.prev=34,e.t0=e.catch(22),console.error("Error capturing screenshot:",e.t0);case 37:return e.prev=37,o.block_signal.abort(),e.next=41,Promise.all(o.finish_signals.map((function(e){return n(e.signal)})));case 41:return console.log("re-dispatch the event if its not prevented, 1"),o.my_default_prevented||((m=new MouseEvent(o.type,{bubbles:o.bubbles,cancelable:!1,composed:o.composed,view:o.view,detail:o.detail,screenX:o.screenX,screenY:o.screenY,clientX:o.clientX,clientY:o.clientY,ctrlKey:o.ctrlKey,altKey:o.altKey,shiftKey:o.shiftKey,metaKey:o.metaKey,button:o.button,buttons:o.buttons,relatedTarget:o.relatedTarget})).just_for_default=!0,i.dispatchEvent(m)),e.finish(37);case 44:case"end":return e.stop()}}),e,null,[[22,34,37,44]])})));return function(t){return e.apply(this,arguments)}}(),{useCapture:!0,skip_monkey_patch:!0,passive:!1})}(),document.addEventListener("DOMContentLoaded",(function(){console.log("DOMContentLoaded"),k(window.location.href).then((function(e){console.log("shouldExclude",e),window.shouldExclude=e}))}),{once:!0})};k(window.location.href,!0).then((function(e){e||ee()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,