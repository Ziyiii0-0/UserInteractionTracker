/*! For license information please see background.js.LICENSE.txt */
(()=>{var e,t,r,n,i={264:e=>{e.exports={trueFunc:function(){return!0},falseFunc:function(){return!1}}},860:(e,t,r)=>{var n={CSSRule:r(845).W,CSSGroupingRule:r(324).h,CSSConditionRule:function(){n.CSSGroupingRule.call(this),this.cssRules=[]}};n.CSSConditionRule.prototype=new n.CSSGroupingRule,n.CSSConditionRule.prototype.constructor=n.CSSConditionRule,n.CSSConditionRule.prototype.conditionText="",n.CSSConditionRule.prototype.cssText="",t.l=n.CSSConditionRule},528:(e,t,r)=>{var n={CSSRule:r(845).W,MatcherList:r(274).J,CSSDocumentRule:function(){n.CSSRule.call(this),this.matcher=new n.MatcherList,this.cssRules=[]}};n.CSSDocumentRule.prototype=new n.CSSRule,n.CSSDocumentRule.prototype.constructor=n.CSSDocumentRule,n.CSSDocumentRule.prototype.type=10,Object.defineProperty(n.CSSDocumentRule.prototype,"cssText",{get:function(){for(var e=[],t=0,r=this.cssRules.length;t<r;t++)e.push(this.cssRules[t].cssText);return"@-moz-document "+this.matcher.matcherText+" {"+e.join("")+"}"}}),t.N=n.CSSDocumentRule},641:(e,t,r)=>{var n={CSSStyleDeclaration:r(788).d,CSSRule:r(845).W,CSSFontFaceRule:function(){n.CSSRule.call(this),this.style=new n.CSSStyleDeclaration,this.style.parentRule=this}};n.CSSFontFaceRule.prototype=new n.CSSRule,n.CSSFontFaceRule.prototype.constructor=n.CSSFontFaceRule,n.CSSFontFaceRule.prototype.type=5,Object.defineProperty(n.CSSFontFaceRule.prototype,"cssText",{get:function(){return"@font-face {"+this.style.cssText+"}"}}),t.O=n.CSSFontFaceRule},324:(e,t,r)=>{var n={CSSRule:r(845).W,CSSGroupingRule:function(){n.CSSRule.call(this),this.cssRules=[]}};n.CSSGroupingRule.prototype=new n.CSSRule,n.CSSGroupingRule.prototype.constructor=n.CSSGroupingRule,n.CSSGroupingRule.prototype.insertRule=function(e,t){if(t<0||t>this.cssRules.length)throw new RangeError("INDEX_SIZE_ERR");var r=n.parse(e).cssRules[0];return r.parentRule=this,this.cssRules.splice(t,0,r),t},n.CSSGroupingRule.prototype.deleteRule=function(e){if(e<0||e>=this.cssRules.length)throw new RangeError("INDEX_SIZE_ERR");this.cssRules.splice(e,1)[0].parentRule=null},t.h=n.CSSGroupingRule},567:(e,t,r)=>{var n={CSSRule:r(845).W,CSSHostRule:function(){n.CSSRule.call(this),this.cssRules=[]}};n.CSSHostRule.prototype=new n.CSSRule,n.CSSHostRule.prototype.constructor=n.CSSHostRule,n.CSSHostRule.prototype.type=1001,Object.defineProperty(n.CSSHostRule.prototype,"cssText",{get:function(){for(var e=[],t=0,r=this.cssRules.length;t<r;t++)e.push(this.cssRules[t].cssText);return"@host {"+e.join("")+"}"}}),t.c=n.CSSHostRule},964:(e,t,r)=>{var n={CSSRule:r(845).W,CSSStyleSheet:r(883).e,MediaList:r(668).b,CSSImportRule:function(){n.CSSRule.call(this),this.href="",this.media=new n.MediaList,this.styleSheet=new n.CSSStyleSheet}};n.CSSImportRule.prototype=new n.CSSRule,n.CSSImportRule.prototype.constructor=n.CSSImportRule,n.CSSImportRule.prototype.type=3,Object.defineProperty(n.CSSImportRule.prototype,"cssText",{get:function(){var e=this.media.mediaText;return"@import url("+this.href+")"+(e?" "+e:"")+";"},set:function(e){for(var t,r,n=0,i="",s="";r=e.charAt(n);n++)switch(r){case" ":case"\t":case"\r":case"\n":case"\f":"after-import"===i?i="url":s+=r;break;case"@":i||e.indexOf("@import",n)!==n||(i="after-import",n+=6,s="");break;case"u":if("url"===i&&e.indexOf("url(",n)===n){if(-1===(t=e.indexOf(")",n+1)))throw n+': ")" not found';n+=4;var a=e.slice(n,t);a[0]===a[a.length-1]&&('"'!==a[0]&&"'"!==a[0]||(a=a.slice(1,-1))),this.href=a,n=t,i="media"}break;case'"':if("url"===i){if(!(t=e.indexOf('"',n+1)))throw n+": '\"' not found";this.href=e.slice(n+1,t),n=t,i="media"}break;case"'":if("url"===i){if(!(t=e.indexOf("'",n+1)))throw n+': "\'" not found';this.href=e.slice(n+1,t),n=t,i="media"}break;case";":"media"===i&&s&&(this.media.mediaText=s.trim());break;default:"media"===i&&(s+=r)}}}),t.X=n.CSSImportRule},561:(e,t,r)=>{var n={CSSRule:r(845).W,CSSStyleDeclaration:r(788).d,CSSKeyframeRule:function(){n.CSSRule.call(this),this.keyText="",this.style=new n.CSSStyleDeclaration,this.style.parentRule=this}};n.CSSKeyframeRule.prototype=new n.CSSRule,n.CSSKeyframeRule.prototype.constructor=n.CSSKeyframeRule,n.CSSKeyframeRule.prototype.type=8,Object.defineProperty(n.CSSKeyframeRule.prototype,"cssText",{get:function(){return this.keyText+" {"+this.style.cssText+"} "}}),t.o=n.CSSKeyframeRule},172:(e,t,r)=>{var n={CSSRule:r(845).W,CSSKeyframesRule:function(){n.CSSRule.call(this),this.name="",this.cssRules=[]}};n.CSSKeyframesRule.prototype=new n.CSSRule,n.CSSKeyframesRule.prototype.constructor=n.CSSKeyframesRule,n.CSSKeyframesRule.prototype.type=7,Object.defineProperty(n.CSSKeyframesRule.prototype,"cssText",{get:function(){for(var e=[],t=0,r=this.cssRules.length;t<r;t++)e.push("  "+this.cssRules[t].cssText);return"@"+(this._vendorPrefix||"")+"keyframes "+this.name+" { \n"+e.join("\n")+"\n}"}}),t.D=n.CSSKeyframesRule},793:(e,t,r)=>{var n={CSSRule:r(845).W,CSSGroupingRule:r(324).h,CSSConditionRule:r(860).l,MediaList:r(668).b,CSSMediaRule:function(){n.CSSConditionRule.call(this),this.media=new n.MediaList}};n.CSSMediaRule.prototype=new n.CSSConditionRule,n.CSSMediaRule.prototype.constructor=n.CSSMediaRule,n.CSSMediaRule.prototype.type=4,Object.defineProperties(n.CSSMediaRule.prototype,{conditionText:{get:function(){return this.media.mediaText},set:function(e){this.media.mediaText=e},configurable:!0,enumerable:!0},cssText:{get:function(){for(var e=[],t=0,r=this.cssRules.length;t<r;t++)e.push(this.cssRules[t].cssText);return"@media "+this.media.mediaText+" {"+e.join("")+"}"},configurable:!0,enumerable:!0}}),t.O=n.CSSMediaRule},845:(e,t)=>{var r={CSSRule:function(){this.parentRule=null,this.parentStyleSheet=null}};r.CSSRule.UNKNOWN_RULE=0,r.CSSRule.STYLE_RULE=1,r.CSSRule.CHARSET_RULE=2,r.CSSRule.IMPORT_RULE=3,r.CSSRule.MEDIA_RULE=4,r.CSSRule.FONT_FACE_RULE=5,r.CSSRule.PAGE_RULE=6,r.CSSRule.KEYFRAMES_RULE=7,r.CSSRule.KEYFRAME_RULE=8,r.CSSRule.MARGIN_RULE=9,r.CSSRule.NAMESPACE_RULE=10,r.CSSRule.COUNTER_STYLE_RULE=11,r.CSSRule.SUPPORTS_RULE=12,r.CSSRule.DOCUMENT_RULE=13,r.CSSRule.FONT_FEATURE_VALUES_RULE=14,r.CSSRule.VIEWPORT_RULE=15,r.CSSRule.REGION_STYLE_RULE=16,r.CSSRule.prototype={constructor:r.CSSRule},t.W=r.CSSRule},788:(e,t,r)=>{var n={CSSStyleDeclaration:function(){this.length=0,this.parentRule=null,this._importants={}}};n.CSSStyleDeclaration.prototype={constructor:n.CSSStyleDeclaration,getPropertyValue:function(e){return this[e]||""},setProperty:function(e,t,r){this[e]?Array.prototype.indexOf.call(this,e)<0&&(this[this.length]=e,this.length++):(this[this.length]=e,this.length++),this[e]=t+"",this._importants[e]=r},removeProperty:function(e){if(!(e in this))return"";var t=Array.prototype.indexOf.call(this,e);if(t<0)return"";var r=this[e];return this[e]="",Array.prototype.splice.call(this,t,1),r},getPropertyCSSValue:function(){},getPropertyPriority:function(e){return this._importants[e]||""},getPropertyShorthand:function(){},isPropertyImplicit:function(){},get cssText(){for(var e=[],t=0,r=this.length;t<r;++t){var n=this[t],i=this.getPropertyValue(n),s=this.getPropertyPriority(n);s&&(s=" !"+s),e[t]=n+": "+i+s+";"}return e.join(" ")},set cssText(e){var t,r;for(t=this.length;t--;)this[r=this[t]]="";Array.prototype.splice.call(this,0,this.length),this._importants={};var i=n.parse("#bogus{"+e+"}").cssRules[0].style,s=i.length;for(t=0;t<s;++t)r=i[t],this.setProperty(i[t],i.getPropertyValue(r),i.getPropertyPriority(r))}},t.d=n.CSSStyleDeclaration,n.parse=r(535).parse},244:(e,t,r)=>{var n={CSSStyleDeclaration:r(788).d,CSSRule:r(845).W,CSSStyleRule:function(){n.CSSRule.call(this),this.selectorText="",this.style=new n.CSSStyleDeclaration,this.style.parentRule=this}};n.CSSStyleRule.prototype=new n.CSSRule,n.CSSStyleRule.prototype.constructor=n.CSSStyleRule,n.CSSStyleRule.prototype.type=1,Object.defineProperty(n.CSSStyleRule.prototype,"cssText",{get:function(){return this.selectorText?this.selectorText+" {"+this.style.cssText+"}":""},set:function(e){var t=n.CSSStyleRule.parse(e);this.style=t.style,this.selectorText=t.selectorText}}),n.CSSStyleRule.parse=function(e){for(var t,r,i,s=0,a="selector",o=s,l="",c={selector:!0,value:!0},u=new n.CSSStyleRule,d="";i=e.charAt(s);s++)switch(i){case" ":case"\t":case"\r":case"\n":case"\f":if(c[a])switch(e.charAt(s-1)){case" ":case"\t":case"\r":case"\n":case"\f":break;default:l+=" "}break;case'"':if(o=s+1,!(t=e.indexOf('"',o)+1))throw'" is missing';l+=e.slice(s,t),s=t-1;break;case"'":if(o=s+1,!(t=e.indexOf("'",o)+1))throw"' is missing";l+=e.slice(s,t),s=t-1;break;case"/":if("*"===e.charAt(s+1)){if(s+=2,-1===(t=e.indexOf("*/",s)))throw new SyntaxError("Missing */");s=t+1}else l+=i;break;case"{":"selector"===a&&(u.selectorText=l.trim(),l="",a="name");break;case":":"name"===a?(r=l.trim(),l="",a="value"):l+=i;break;case"!":"value"===a&&e.indexOf("!important",s)===s?(d="important",s+=9):l+=i;break;case";":"value"===a?(u.style.setProperty(r,l.trim(),d),d="",l="",a="name"):l+=i;break;case"}":if("value"===a)u.style.setProperty(r,l.trim(),d),d="",l="";else{if("name"===a)break;l+=i}a="selector";break;default:l+=i}return u},t.f=n.CSSStyleRule},883:(e,t,r)=>{var n={StyleSheet:r(486).v,CSSStyleRule:r(244).f,CSSStyleSheet:function(){n.StyleSheet.call(this),this.cssRules=[]}};n.CSSStyleSheet.prototype=new n.StyleSheet,n.CSSStyleSheet.prototype.constructor=n.CSSStyleSheet,n.CSSStyleSheet.prototype.insertRule=function(e,t){if(t<0||t>this.cssRules.length)throw new RangeError("INDEX_SIZE_ERR");var r=n.parse(e).cssRules[0];return r.parentStyleSheet=this,this.cssRules.splice(t,0,r),t},n.CSSStyleSheet.prototype.deleteRule=function(e){if(e<0||e>=this.cssRules.length)throw new RangeError("INDEX_SIZE_ERR");this.cssRules.splice(e,1)},n.CSSStyleSheet.prototype.toString=function(){for(var e="",t=this.cssRules,r=0;r<t.length;r++)e+=t[r].cssText+"\n";return e},t.e=n.CSSStyleSheet,n.parse=r(535).parse},961:(e,t,r)=>{var n={CSSRule:r(845).W,CSSGroupingRule:r(324).h,CSSConditionRule:r(860).l,CSSSupportsRule:function(){n.CSSConditionRule.call(this)}};n.CSSSupportsRule.prototype=new n.CSSConditionRule,n.CSSSupportsRule.prototype.constructor=n.CSSSupportsRule,n.CSSSupportsRule.prototype.type=12,Object.defineProperty(n.CSSSupportsRule.prototype,"cssText",{get:function(){for(var e=[],t=0,r=this.cssRules.length;t<r;t++)e.push(this.cssRules[t].cssText);return"@supports "+this.conditionText+" {"+e.join("")+"}"}}),t._=n.CSSSupportsRule},646:(e,t)=>{var r={CSSValue:function(){}};r.CSSValue.prototype={constructor:r.CSSValue,set cssText(e){var t=this._getConstructorName();throw new Error('DOMException: property "cssText" of "'+t+'" is readonly and can not be replaced with "'+e+'"!')},get cssText(){var e=this._getConstructorName();throw new Error('getter "cssText" of "'+e+'" is not implemented!')},_getConstructorName:function(){return this.constructor.toString().match(/function\s([^\(]+)/)[1]}},t.F=r.CSSValue},80:(e,t,r)=>{var n={CSSValue:r(646).F,CSSValueExpression:function(e,t){this._token=e,this._idx=t}};n.CSSValueExpression.prototype=new n.CSSValue,n.CSSValueExpression.prototype.constructor=n.CSSValueExpression,n.CSSValueExpression.prototype.parse=function(){for(var e,t=this._token,r=this._idx,n="",i="",s="",a=[];;++r){if(""===(n=t.charAt(r))){s="css expression error: unfinished expression!";break}switch(n){case"(":a.push(n),i+=n;break;case")":a.pop(n),i+=n;break;case"/":(e=this._parseJSComment(t,r))?e.error?s="css expression error: unfinished comment in expression!":r=e.idx:(e=this._parseJSRexExp(t,r))?(r=e.idx,i+=e.text):i+=n;break;case"'":case'"':(e=this._parseJSString(t,r,n))?(r=e.idx,i+=e.text):i+=n;break;default:i+=n}if(s)break;if(0===a.length)break}return s?{error:s}:{idx:r,expression:i}},n.CSSValueExpression.prototype._parseJSComment=function(e,t){var r=e.charAt(t+1);if("/"===r||"*"===r){var n,i,s=t;return"/"===r?i="\n":"*"===r&&(i="*/"),-1!==(n=e.indexOf(i,s+1+1))?{idx:n=n+i.length-1,text:e.substring(t,n+1)}:{error:"css expression error: unfinished comment in expression!"}}return!1},n.CSSValueExpression.prototype._parseJSString=function(e,t,r){var n=this._findMatchedIdx(e,t,r);return-1!==n&&{idx:n,text:e.substring(t,n+r.length)}},n.CSSValueExpression.prototype._parseJSRexExp=function(e,t){var r=e.substring(0,t).replace(/\s+$/,"");return!![/^$/,/\($/,/\[$/,/\!$/,/\+$/,/\-$/,/\*$/,/\/\s+/,/\%$/,/\=$/,/\>$/,/<$/,/\&$/,/\|$/,/\^$/,/\~$/,/\?$/,/\,$/,/delete$/,/in$/,/instanceof$/,/new$/,/typeof$/,/void$/].some((function(e){return e.test(r)}))&&this._parseJSString(e,t,"/")},n.CSSValueExpression.prototype._findMatchedIdx=function(e,t,r){for(var n,i=t;;){if(-1===(n=e.indexOf(r,i+1))){n=-1;break}var s=e.substring(t+1,n).match(/\\+$/);if(!s||s[0]%2==0)break;i=n}return e.indexOf("\n",t+1)<n&&(n=-1),n},t.t=n.CSSValueExpression},274:(e,t)=>{var r={MatcherList:function(){this.length=0}};r.MatcherList.prototype={constructor:r.MatcherList,get matcherText(){return Array.prototype.join.call(this,", ")},set matcherText(e){for(var t=e.split(","),r=this.length=t.length,n=0;n<r;n++)this[n]=t[n].trim()},appendMatcher:function(e){-1===Array.prototype.indexOf.call(this,e)&&(this[this.length]=e,this.length++)},deleteMatcher:function(e){var t=Array.prototype.indexOf.call(this,e);-1!==t&&Array.prototype.splice.call(this,t,1)}},t.J=r.MatcherList},668:(e,t)=>{var r={MediaList:function(){this.length=0}};r.MediaList.prototype={constructor:r.MediaList,get mediaText(){return Array.prototype.join.call(this,", ")},set mediaText(e){for(var t=e.split(","),r=this.length=t.length,n=0;n<r;n++)this[n]=t[n].trim()},appendMedium:function(e){-1===Array.prototype.indexOf.call(this,e)&&(this[this.length]=e,this.length++)},deleteMedium:function(e){var t=Array.prototype.indexOf.call(this,e);-1!==t&&Array.prototype.splice.call(this,t,1)}},t.b=r.MediaList},486:(e,t)=>{t.v={StyleSheet:function(){this.parentStyleSheet=null}}.StyleSheet},625:(e,t,r)=>{var n={CSSStyleSheet:r(883).e,CSSRule:r(845).W,CSSStyleRule:r(244).f,CSSGroupingRule:r(324).h,CSSConditionRule:r(860).l,CSSMediaRule:r(793).O,CSSSupportsRule:r(961)._,CSSStyleDeclaration:r(788).d,CSSKeyframeRule:r(561).o,CSSKeyframesRule:r(172).D,clone:function e(t){var r=new n.CSSStyleSheet,i=t.cssRules;if(!i)return r;for(var s=0,a=i.length;s<a;s++){var o=i[s],l=r.cssRules[s]=new o.constructor,c=o.style;if(c){for(var u=l.style=new n.CSSStyleDeclaration,d=0,h=c.length;d<h;d++){var p=u[d]=c[d];u[p]=c[p],u._importants[p]=c.getPropertyPriority(p)}u.length=c.length}o.hasOwnProperty("keyText")&&(l.keyText=o.keyText),o.hasOwnProperty("selectorText")&&(l.selectorText=o.selectorText),o.hasOwnProperty("mediaText")&&(l.mediaText=o.mediaText),o.hasOwnProperty("conditionText")&&(l.conditionText=o.conditionText),o.hasOwnProperty("cssRules")&&(l.cssRules=e(o).cssRules)}return r}};n.clone},908:(e,t,r)=>{"use strict";r(788).d,r(845).W,r(324).h,r(860).l,r(244).f,r(668).b,r(793).O,r(961)._,r(964).X,r(641).O,r(567).c,r(486).v,r(883).e,r(172).D,r(561).o,r(274).J,r(528).N,r(646).F,r(80).t,t.parse=r(535).parse,r(625)},535:(e,t,r)=>{var n={parse:function(e){for(var t,r,i,s,a,o,l,c,u,d,h,p,f,m=0,g="before-selector",b="",y=0,v={selector:!0,value:!0,"value-parenthesis":!0,atRule:!0,"importRule-begin":!0,importRule:!0,atBlock:!0,conditionBlock:!0,"documentRule-begin":!0},_=new n.CSSStyleSheet,w=_,S=[],x=!1,E="",k=/@(-(?:\w+-)+)?keyframes/g,A=function(t){var r=e.substring(0,m).split("\n"),n=r.length,i=r.pop().length+1,s=new Error(t+" (line "+n+", char "+i+")");throw s.line=n,s.char=i,s.styleSheet=_,s};f=e.charAt(m);m++)switch(f){case" ":case"\t":case"\r":case"\n":case"\f":v[g]&&(b+=f);break;case'"':t=m+1;do{(t=e.indexOf('"',t)+1)||A('Unmatched "')}while("\\"===e[t-2]);switch(b+=e.slice(m,t),m=t-1,g){case"before-value":g="value";break;case"importRule-begin":g="importRule"}break;case"'":t=m+1;do{(t=e.indexOf("'",t)+1)||A("Unmatched '")}while("\\"===e[t-2]);switch(b+=e.slice(m,t),m=t-1,g){case"before-value":g="value";break;case"importRule-begin":g="importRule"}break;case"/":"*"===e.charAt(m+1)?(m+=2,-1===(t=e.indexOf("*/",m))?A("Missing */"):m=t+1):b+=f,"importRule-begin"===g&&(b+=" ",g="importRule");break;case"@":if(e.indexOf("@-moz-document",m)===m){g="documentRule-begin",(h=new n.CSSDocumentRule).__starts=m,m+=13,b="";break}if(e.indexOf("@media",m)===m){g="atBlock",(o=new n.CSSMediaRule).__starts=m,m+=5,b="";break}if(e.indexOf("@supports",m)===m){g="conditionBlock",(l=new n.CSSSupportsRule).__starts=m,m+=8,b="";break}if(e.indexOf("@host",m)===m){g="hostRule-begin",m+=4,(p=new n.CSSHostRule).__starts=m,b="";break}if(e.indexOf("@import",m)===m){g="importRule-begin",m+=6,b+="@import";break}if(e.indexOf("@font-face",m)===m){g="fontFaceRule-begin",m+=9,(u=new n.CSSFontFaceRule).__starts=m,b="";break}k.lastIndex=m;var C=k.exec(e);if(C&&C.index===m){g="keyframesRule-begin",(d=new n.CSSKeyframesRule).__starts=m,d._vendorPrefix=C[1],m+=C[0].length-1,b="";break}"selector"===g&&(g="atRule"),b+=f;break;case"{":"selector"===g||"atRule"===g?(a.selectorText=b.trim(),a.style.__starts=m,b="",g="before-name"):"atBlock"===g?(o.media.mediaText=b.trim(),r&&S.push(r),w=r=o,o.parentStyleSheet=_,b="",g="before-selector"):"conditionBlock"===g?(l.conditionText=b.trim(),r&&S.push(r),w=r=l,l.parentStyleSheet=_,b="",g="before-selector"):"hostRule-begin"===g?(r&&S.push(r),w=r=p,p.parentStyleSheet=_,b="",g="before-selector"):"fontFaceRule-begin"===g?(r&&(u.parentRule=r),u.parentStyleSheet=_,a=u,b="",g="before-name"):"keyframesRule-begin"===g?(d.name=b.trim(),r&&(S.push(r),d.parentRule=r),d.parentStyleSheet=_,w=r=d,b="",g="keyframeRule-begin"):"keyframeRule-begin"===g?((a=new n.CSSKeyframeRule).keyText=b.trim(),a.__starts=m,b="",g="before-name"):"documentRule-begin"===g&&(h.matcher.matcherText=b.trim(),r&&(S.push(r),h.parentRule=r),w=r=h,h.parentStyleSheet=_,b="",g="before-selector");break;case":":"name"===g?(s=b.trim(),b="",g="before-value"):b+=f;break;case"(":if("value"===g)if("expression"===b.trim()){var T=new n.CSSValueExpression(e,m).parse();T.error?A(T.error):(b+=T.expression,m=T.idx)}else g="value-parenthesis",y=1,b+=f;else"value-parenthesis"===g?(y++,b+=f):b+=f;break;case")":"value-parenthesis"===g&&0==--y&&(g="value"),b+=f;break;case"!":"value"===g&&e.indexOf("!important",m)===m?(E="important",m+=9):b+=f;break;case";":switch(g){case"value":a.style.setProperty(s,b.trim(),E),E="",b="",g="before-name";break;case"atRule":b="",g="before-selector";break;case"importRule":(c=new n.CSSImportRule).parentStyleSheet=c.styleSheet.parentStyleSheet=_,c.cssText=b+f,_.cssRules.push(c),b="",g="before-selector";break;default:b+=f}break;case"}":switch(g){case"value":a.style.setProperty(s,b.trim(),E),E="";case"before-name":case"name":a.__ends=m+1,r&&(a.parentRule=r),a.parentStyleSheet=_,w.cssRules.push(a),b="",g=w.constructor===n.CSSKeyframesRule?"keyframeRule-begin":"before-selector";break;case"keyframeRule-begin":case"before-selector":case"selector":for(r||A("Unexpected }"),x=S.length>0;S.length>0;){if("CSSMediaRule"===(r=S.pop()).constructor.name||"CSSSupportsRule"===r.constructor.name){i=w,(w=r).cssRules.push(i);break}0===S.length&&(x=!1)}x||(w.__ends=m+1,_.cssRules.push(w),w=_,r=null),b="",g="before-selector"}break;default:switch(g){case"before-selector":g="selector",(a=new n.CSSStyleRule).__starts=m;break;case"before-name":g="name";break;case"before-value":g="value";break;case"importRule-begin":g="importRule"}b+=f}return _}};t.parse=n.parse,n.CSSStyleSheet=r(883).e,n.CSSStyleRule=r(244).f,n.CSSImportRule=r(964).X,n.CSSGroupingRule=r(324).h,n.CSSMediaRule=r(793).O,n.CSSConditionRule=r(860).l,n.CSSSupportsRule=r(961)._,n.CSSFontFaceRule=r(641).O,n.CSSHostRule=r(567).c,n.CSSStyleDeclaration=r(788).d,n.CSSKeyframeRule=r(561).o,n.CSSKeyframesRule=r(172).D,n.CSSValueExpression=r(80).t,n.CSSDocumentRule=r(528).N},710:(e,t,r)=>{e.exports=function e(t,r,n){function i(a,o){if(!r[a]){if(!t[a]){if(s)return s(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var c=r[a]={exports:{}};t[a][0].call(c.exports,(function(e){return i(t[a][1][e]||e)}),c,c.exports,e,t,r,n)}return r[a].exports}for(var s=void 0,a=0;a<n.length;a++)i(n[a]);return i}({1:[function(e,t,r){"use strict";var n=e("./utils"),i=e("./support"),s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(e){for(var t,r,i,a,o,l,c,u=[],d=0,h=e.length,p=h,f="string"!==n.getTypeOf(e);d<e.length;)p=h-d,i=f?(t=e[d++],r=d<h?e[d++]:0,d<h?e[d++]:0):(t=e.charCodeAt(d++),r=d<h?e.charCodeAt(d++):0,d<h?e.charCodeAt(d++):0),a=t>>2,o=(3&t)<<4|r>>4,l=1<p?(15&r)<<2|i>>6:64,c=2<p?63&i:64,u.push(s.charAt(a)+s.charAt(o)+s.charAt(l)+s.charAt(c));return u.join("")},r.decode=function(e){var t,r,n,a,o,l,c=0,u=0,d="data:";if(e.substr(0,5)===d)throw new Error("Invalid base64 input, it looks like a data url.");var h,p=3*(e=e.replace(/[^A-Za-z0-9+/=]/g,"")).length/4;if(e.charAt(e.length-1)===s.charAt(64)&&p--,e.charAt(e.length-2)===s.charAt(64)&&p--,p%1!=0)throw new Error("Invalid base64 input, bad content length.");for(h=i.uint8array?new Uint8Array(0|p):new Array(0|p);c<e.length;)t=s.indexOf(e.charAt(c++))<<2|(a=s.indexOf(e.charAt(c++)))>>4,r=(15&a)<<4|(o=s.indexOf(e.charAt(c++)))>>2,n=(3&o)<<6|(l=s.indexOf(e.charAt(c++))),h[u++]=t,64!==o&&(h[u++]=r),64!==l&&(h[u++]=n);return h}},{"./support":30,"./utils":32}],2:[function(e,t,r){"use strict";var n=e("./external"),i=e("./stream/DataWorker"),s=e("./stream/Crc32Probe"),a=e("./stream/DataLengthProbe");function o(e,t,r,n,i){this.compressedSize=e,this.uncompressedSize=t,this.crc32=r,this.compression=n,this.compressedContent=i}o.prototype={getContentWorker:function(){var e=new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")),t=this;return e.on("end",(function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")})),e},getCompressedWorker:function(){return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},o.createWorkerFrom=function(e,t,r){return e.pipe(new s).pipe(new a("uncompressedSize")).pipe(t.compressWorker(r)).pipe(new a("compressedSize")).withStreamInfo("compression",t)},t.exports=o},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,r){"use strict";var n=e("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(){return new n("STORE compression")},uncompressWorker:function(){return new n("STORE decompression")}},r.DEFLATE=e("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,r){"use strict";var n=e("./utils"),i=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?"string"!==n.getTypeOf(e)?function(e,t,r){var n=i,s=0+r;e^=-1;for(var a=0;a<s;a++)e=e>>>8^n[255&(e^t[a])];return~e}(0|t,e,e.length):function(e,t,r){var n=i,s=0+r;e^=-1;for(var a=0;a<s;a++)e=e>>>8^n[255&(e^t.charCodeAt(a))];return~e}(0|t,e,e.length):0}},{"./utils":32}],5:[function(e,t,r){"use strict";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(e,t,r){"use strict";var n;n="undefined"!=typeof Promise?Promise:e("lie"),t.exports={Promise:n}},{lie:37}],7:[function(e,t,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,i=e("pako"),s=e("./utils"),a=e("./stream/GenericWorker"),o=n?"uint8array":"array";function l(e,t){a.call(this,"FlateWorker/"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}r.magic="\b\0",s.inherits(l,a),l.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,e.data),!1)},l.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},l.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},l.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var e=this;this._pako.onData=function(t){e.push({data:t,meta:e.meta})}},r.compressWorker=function(e){return new l("Deflate",e)},r.uncompressWorker=function(){return new l("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,r){"use strict";function n(e,t){var r,n="";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n}function i(e,t,r,i,a,u){var d,h,p=e.file,f=e.compression,m=u!==o.utf8encode,g=s.transformTo("string",u(p.name)),b=s.transformTo("string",o.utf8encode(p.name)),y=p.comment,v=s.transformTo("string",u(y)),_=s.transformTo("string",o.utf8encode(y)),w=b.length!==p.name.length,S=_.length!==y.length,x="",E="",k="",A=p.dir,C=p.date,T={crc32:0,compressedSize:0,uncompressedSize:0};t&&!r||(T.crc32=e.crc32,T.compressedSize=e.compressedSize,T.uncompressedSize=e.uncompressedSize);var R=0;t&&(R|=8),m||!w&&!S||(R|=2048);var N=0,I=0;A&&(N|=16),"UNIX"===a?(I=798,N|=function(e,t){var r=e;return e||(r=t?16893:33204),(65535&r)<<16}(p.unixPermissions,A)):(I=20,N|=function(e){return 63&(e||0)}(p.dosPermissions)),d=C.getUTCHours(),d<<=6,d|=C.getUTCMinutes(),d<<=5,d|=C.getUTCSeconds()/2,h=C.getUTCFullYear()-1980,h<<=4,h|=C.getUTCMonth()+1,h<<=5,h|=C.getUTCDate(),w&&(E=n(1,1)+n(l(g),4)+b,x+="up"+n(E.length,2)+E),S&&(k=n(1,1)+n(l(v),4)+_,x+="uc"+n(k.length,2)+k);var q="";return q+="\n\0",q+=n(R,2),q+=f.magic,q+=n(d,2),q+=n(h,2),q+=n(T.crc32,4),q+=n(T.compressedSize,4),q+=n(T.uncompressedSize,4),q+=n(g.length,2),q+=n(x.length,2),{fileRecord:c.LOCAL_FILE_HEADER+q+g+x,dirRecord:c.CENTRAL_FILE_HEADER+n(I,2)+q+n(v.length,2)+"\0\0\0\0"+n(N,4)+n(i,4)+g+x+v}}var s=e("../utils"),a=e("../stream/GenericWorker"),o=e("../utf8"),l=e("../crc32"),c=e("../signature");function u(e,t,r,n){a.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}s.inherits(u,a),u.prototype.push=function(e){var t=e.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,a.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:r?(t+100*(r-n-1))/r:100}}))},u.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var r=i(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},u.prototype.closedSource=function(e){this.accumulate=!1;var t=this.streamFiles&&!e.file.dir,r=i(e,t,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),t)this.push({data:function(e){return c.DATA_DESCRIPTOR+n(e.crc32,4)+n(e.compressedSize,4)+n(e.uncompressedSize,4)}(e),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},u.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var r=this.bytesWritten-e,i=function(e,t,r,i,a){var o=s.transformTo("string",a(i));return c.CENTRAL_DIRECTORY_END+"\0\0\0\0"+n(e,2)+n(e,2)+n(t,4)+n(r,4)+n(o.length,2)+o}(this.dirRecords.length,r,e,this.zipComment,this.encodeFileName);this.push({data:i,meta:{percent:100}})},u.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},u.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()})),e.on("error",(function(e){t.error(e)})),this},u.prototype.resume=function(){return!!a.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},u.prototype.error=function(e){var t=this._sources;if(!a.prototype.error.call(this,e))return!1;for(var r=0;r<t.length;r++)try{t[r].error(e)}catch(e){}return!0},u.prototype.lock=function(){a.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=u},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,r){"use strict";var n=e("../compressions"),i=e("./ZipFileWorker");r.generateWorker=function(e,t,r){var s=new i(t.streamFiles,r,t.platform,t.encodeFileName),a=0;try{e.forEach((function(e,r){a++;var i=function(e,t){var r=e||t,i=n[r];if(!i)throw new Error(r+" is not a valid compression method !");return i}(r.options.compression,t.compression),o=r.options.compressionOptions||t.compressionOptions||{},l=r.dir,c=r.date;r._compressWorker(i,o).withStreamInfo("file",{name:e,dir:l,date:c,comment:r.comment||"",unixPermissions:r.unixPermissions,dosPermissions:r.dosPermissions}).pipe(s)})),s.entriesCount=a}catch(e){s.error(e)}return s}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,r){"use strict";function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var e=new n;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e}}(n.prototype=e("./object")).loadAsync=e("./load"),n.support=e("./support"),n.defaults=e("./defaults"),n.version="3.10.1",n.loadAsync=function(e,t){return(new n).loadAsync(e,t)},n.external=e("./external"),t.exports=n},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,r){"use strict";var n=e("./utils"),i=e("./external"),s=e("./utf8"),a=e("./zipEntries"),o=e("./stream/Crc32Probe"),l=e("./nodejsUtils");function c(e){return new i.Promise((function(t,r){var n=e.decompressed.getContentWorker().pipe(new o);n.on("error",(function(e){r(e)})).on("end",(function(){n.streamInfo.crc32!==e.decompressed.crc32?r(new Error("Corrupted zip : CRC32 mismatch")):t()})).resume()}))}t.exports=function(e,t){var r=this;return t=n.extend(t||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:s.utf8decode}),l.isNode&&l.isStream(e)?i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):n.prepareContent("the loaded zip file",e,!0,t.optimizedBinaryString,t.base64).then((function(e){var r=new a(t);return r.load(e),r})).then((function(e){var r=[i.Promise.resolve(e)],n=e.files;if(t.checkCRC32)for(var s=0;s<n.length;s++)r.push(c(n[s]));return i.Promise.all(r)})).then((function(e){for(var i=e.shift(),s=i.files,a=0;a<s.length;a++){var o=s[a],l=o.fileNameStr,c=n.resolve(o.fileNameStr);r.file(c,o.decompressed,{binary:!0,optimizedBinaryString:!0,date:o.date,dir:o.dir,comment:o.fileCommentStr.length?o.fileCommentStr:null,unixPermissions:o.unixPermissions,dosPermissions:o.dosPermissions,createFolders:t.createFolders}),o.dir||(r.file(c).unsafeOriginalName=l)}return i.zipComment.length&&(r.comment=i.zipComment),r}))}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,r){"use strict";var n=e("../utils"),i=e("../stream/GenericWorker");function s(e,t){i.call(this,"Nodejs stream input adapter for "+e),this._upstreamEnded=!1,this._bindStream(t)}n.inherits(s,i),s.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on("data",(function(e){t.push({data:e,meta:{percent:0}})})).on("error",(function(e){t.isPaused?this.generatedError=e:t.error(e)})).on("end",(function(){t.isPaused?t._upstreamEnded=!0:t.end()}))},s.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=s},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,r){"use strict";var n=e("readable-stream").Readable;function i(e,t,r){n.call(this,t),this._helper=e;var i=this;e.on("data",(function(e,t){i.push(e)||i._helper.pause(),r&&r(t)})).on("error",(function(e){i.emit("error",e)})).on("end",(function(){i.push(null)}))}e("../utils").inherits(i,n),i.prototype._read=function(){this._helper.resume()},t.exports=i},{"../utils":32,"readable-stream":16}],14:[function(e,t,r){"use strict";t.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(e,t){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(e,t);if("number"==typeof e)throw new Error('The "data" argument must not be a number');return new Buffer(e,t)},allocBuffer:function(e){if(Buffer.alloc)return Buffer.alloc(e);var t=new Buffer(e);return t.fill(0),t},isBuffer:function(e){return Buffer.isBuffer(e)},isStream:function(e){return e&&"function"==typeof e.on&&"function"==typeof e.pause&&"function"==typeof e.resume}}},{}],15:[function(e,t,r){"use strict";function n(e,t,r){var n,i=s.getTypeOf(t),o=s.extend(r||{},l);o.date=o.date||new Date,null!==o.compression&&(o.compression=o.compression.toUpperCase()),"string"==typeof o.unixPermissions&&(o.unixPermissions=parseInt(o.unixPermissions,8)),o.unixPermissions&&16384&o.unixPermissions&&(o.dir=!0),o.dosPermissions&&16&o.dosPermissions&&(o.dir=!0),o.dir&&(e=m(e)),o.createFolders&&(n=f(e))&&g.call(this,n,!0);var d="string"===i&&!1===o.binary&&!1===o.base64;r&&void 0!==r.binary||(o.binary=!d),(t instanceof c&&0===t.uncompressedSize||o.dir||!t||0===t.length)&&(o.base64=!1,o.binary=!0,t="",o.compression="STORE",i="string");var b;b=t instanceof c||t instanceof a?t:h.isNode&&h.isStream(t)?new p(e,t):s.prepareContent(e,t,o.binary,o.optimizedBinaryString,o.base64);var y=new u(e,b,o);this.files[e]=y}var i=e("./utf8"),s=e("./utils"),a=e("./stream/GenericWorker"),o=e("./stream/StreamHelper"),l=e("./defaults"),c=e("./compressedObject"),u=e("./zipObject"),d=e("./generate"),h=e("./nodejsUtils"),p=e("./nodejs/NodejsStreamInputAdapter"),f=function(e){"/"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return 0<t?e.substring(0,t):""},m=function(e){return"/"!==e.slice(-1)&&(e+="/"),e},g=function(e,t){return t=void 0!==t?t:l.createFolders,e=m(e),this.files[e]||n.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function b(e){return"[object RegExp]"===Object.prototype.toString.call(e)}var y={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(e){var t,r,n;for(t in this.files)n=this.files[t],(r=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(r,n)},filter:function(e){var t=[];return this.forEach((function(r,n){e(r,n)&&t.push(n)})),t},file:function(e,t,r){if(1!==arguments.length)return e=this.root+e,n.call(this,e,t,r),this;if(b(e)){var i=e;return this.filter((function(e,t){return!t.dir&&i.test(e)}))}var s=this.files[this.root+e];return s&&!s.dir?s:null},folder:function(e){if(!e)return this;if(b(e))return this.filter((function(t,r){return r.dir&&e.test(t)}));var t=this.root+e,r=g.call(this,t),n=this.clone();return n.root=r.name,n},remove:function(e){e=this.root+e;var t=this.files[e];if(t||("/"!==e.slice(-1)&&(e+="/"),t=this.files[e]),t&&!t.dir)delete this.files[e];else for(var r=this.filter((function(t,r){return r.name.slice(0,e.length)===e})),n=0;n<r.length;n++)delete this.files[r[n].name];return this},generate:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(e){var t,r={};try{if((r=s.extend(e||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:i.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");s.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var n=r.comment||this.comment||"";t=d.generateWorker(this,r,n)}catch(e){(t=new a("error")).error(e)}return new o(t,r.type||"string",r.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type="nodebuffer"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=y},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,r){"use strict";t.exports=e("stream")},{stream:void 0}],17:[function(e,t,r){"use strict";var n=e("./DataReader");function i(e){n.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e("../utils").inherits(i,n),i.prototype.byteAt=function(e){return this.data[this.zero+e]},i.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===t&&this.data[s+1]===r&&this.data[s+2]===n&&this.data[s+3]===i)return s-this.zero;return-1},i.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.readData(4);return t===s[0]&&r===s[1]&&n===s[2]&&i===s[3]},i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./DataReader":18}],18:[function(e,t,r){"use strict";var n=e("../utils");function i(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo("string",this.readData(e))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=i},{"../utils":32}],19:[function(e,t,r){"use strict";var n=e("./Uint8ArrayReader");function i(e){n.call(this,e)}e("../utils").inherits(i,n),i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,r){"use strict";var n=e("./DataReader");function i(e){n.call(this,e)}e("../utils").inherits(i,n),i.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},i.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},i.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./DataReader":18}],21:[function(e,t,r){"use strict";var n=e("./ArrayReader");function i(e){n.call(this,e)}e("../utils").inherits(i,n),i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,r){"use strict";var n=e("../utils"),i=e("../support"),s=e("./ArrayReader"),a=e("./StringReader"),o=e("./NodeBufferReader"),l=e("./Uint8ArrayReader");t.exports=function(e){var t=n.getTypeOf(e);return n.checkSupport(t),"string"!==t||i.uint8array?"nodebuffer"===t?new o(e):i.uint8array?new l(n.transformTo("uint8array",e)):new s(n.transformTo("array",e)):new a(e)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,r){"use strict";r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b"},{}],24:[function(e,t,r){"use strict";var n=e("./GenericWorker"),i=e("../utils");function s(e){n.call(this,"ConvertWorker to "+e),this.destType=e}i.inherits(s,n),s.prototype.processChunk=function(e){this.push({data:i.transformTo(this.destType,e.data),meta:e.meta})},t.exports=s},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,r){"use strict";var n=e("./GenericWorker"),i=e("../crc32");function s(){n.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}e("../utils").inherits(s,n),s.prototype.processChunk=function(e){this.streamInfo.crc32=i(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=s},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,r){"use strict";var n=e("../utils"),i=e("./GenericWorker");function s(e){i.call(this,"DataLengthProbe for "+e),this.propName=e,this.withStreamInfo(e,0)}n.inherits(s,i),s.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}i.prototype.processChunk.call(this,e)},t.exports=s},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,r){"use strict";var n=e("../utils"),i=e("./GenericWorker");function s(e){i.call(this,"DataWorker");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,e.then((function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=n.getTypeOf(e),t.isPaused||t._tickAndRepeat()}),(function(e){t.error(e)}))}n.inherits(s,i),s.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":e=this.data.substring(this.index,t);break;case"uint8array":e=this.data.subarray(this.index,t);break;case"array":case"nodebuffer":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=s},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,r){"use strict";function n(e){this.name=e||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}n.prototype={push:function(e){this.emit("data",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit("error",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit("error",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var r=0;r<this._listeners[e].length;r++)this._listeners[e][r].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.end()})),e.on("error",(function(e){t.error(e)})),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e="Worker "+this.name;return this.previous?this.previous+" -> "+e:e}},t.exports=n},{}],29:[function(e,t,r){"use strict";var n=e("../utils"),i=e("./ConvertWorker"),s=e("./GenericWorker"),a=e("../base64"),o=e("../support"),l=e("../external"),c=null;if(o.nodestream)try{c=e("../nodejs/NodejsStreamOutputAdapter")}catch(e){}function u(e,t,r){var a=t;switch(t){case"blob":case"arraybuffer":a="uint8array";break;case"base64":a="string"}try{this._internalType=a,this._outputType=t,this._mimeType=r,n.checkSupport(a),this._worker=e.pipe(new i(a)),e.lock()}catch(e){this._worker=new s("error"),this._worker.error(e)}}u.prototype={accumulate:function(e){return function(e,t){return new l.Promise((function(r,i){var s=[],o=e._internalType,l=e._outputType,c=e._mimeType;e.on("data",(function(e,r){s.push(e),t&&t(r)})).on("error",(function(e){s=[],i(e)})).on("end",(function(){try{var e=function(e,t,r){switch(e){case"blob":return n.newBlob(n.transformTo("arraybuffer",t),r);case"base64":return a.encode(t);default:return n.transformTo(e,t)}}(l,function(e,t){var r,n=0,i=null,s=0;for(r=0;r<t.length;r++)s+=t[r].length;switch(e){case"string":return t.join("");case"array":return Array.prototype.concat.apply([],t);case"uint8array":for(i=new Uint8Array(s),r=0;r<t.length;r++)i.set(t[r],n),n+=t[r].length;return i;case"nodebuffer":return Buffer.concat(t);default:throw new Error("concat : unsupported type '"+e+"'")}}(o,s),c);r(e)}catch(e){i(e)}s=[]})).resume()}))}(this,e)},on:function(e,t){var r=this;return"data"===e?this._worker.on(e,(function(e){t.call(r,e.data,e.meta)})):this._worker.on(e,(function(){n.delay(t,arguments,r)})),this},resume:function(){return n.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(n.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new c(this,{objectMode:"nodebuffer"!==this._outputType},e)}},t.exports=u},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,t,r){"use strict";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer="undefined"!=typeof Buffer,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else{var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:"application/zip"}).size}catch(e){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(n),r.blob=0===i.getBlob("application/zip").size}catch(e){r.blob=!1}}}try{r.nodestream=!!e("readable-stream").Readable}catch(e){r.nodestream=!1}},{"readable-stream":16}],31:[function(e,t,r){"use strict";for(var n=e("./utils"),i=e("./support"),s=e("./nodejsUtils"),a=e("./stream/GenericWorker"),o=new Array(256),l=0;l<256;l++)o[l]=252<=l?6:248<=l?5:240<=l?4:224<=l?3:192<=l?2:1;function c(){a.call(this,"utf-8 decode"),this.leftOver=null}function u(){a.call(this,"utf-8 encode")}o[254]=o[254]=1,r.utf8encode=function(e){return i.nodebuffer?s.newBufferFrom(e,"utf-8"):function(e){var t,r,n,s,a,o=e.length,l=0;for(s=0;s<o;s++)55296==(64512&(r=e.charCodeAt(s)))&&s+1<o&&56320==(64512&(n=e.charCodeAt(s+1)))&&(r=65536+(r-55296<<10)+(n-56320),s++),l+=r<128?1:r<2048?2:r<65536?3:4;for(t=i.uint8array?new Uint8Array(l):new Array(l),s=a=0;a<l;s++)55296==(64512&(r=e.charCodeAt(s)))&&s+1<o&&56320==(64512&(n=e.charCodeAt(s+1)))&&(r=65536+(r-55296<<10)+(n-56320),s++),r<128?t[a++]=r:(r<2048?t[a++]=192|r>>>6:(r<65536?t[a++]=224|r>>>12:(t[a++]=240|r>>>18,t[a++]=128|r>>>12&63),t[a++]=128|r>>>6&63),t[a++]=128|63&r);return t}(e)},r.utf8decode=function(e){return i.nodebuffer?n.transformTo("nodebuffer",e).toString("utf-8"):function(e){var t,r,i,s,a=e.length,l=new Array(2*a);for(t=r=0;t<a;)if((i=e[t++])<128)l[r++]=i;else if(4<(s=o[i]))l[r++]=65533,t+=s-1;else{for(i&=2===s?31:3===s?15:7;1<s&&t<a;)i=i<<6|63&e[t++],s--;1<s?l[r++]=65533:i<65536?l[r++]=i:(i-=65536,l[r++]=55296|i>>10&1023,l[r++]=56320|1023&i)}return l.length!==r&&(l.subarray?l=l.subarray(0,r):l.length=r),n.applyFromCharCode(l)}(e=n.transformTo(i.uint8array?"uint8array":"array",e))},n.inherits(c,a),c.prototype.processChunk=function(e){var t=n.transformTo(i.uint8array?"uint8array":"array",e.data);if(this.leftOver&&this.leftOver.length){if(i.uint8array){var s=t;(t=new Uint8Array(s.length+this.leftOver.length)).set(this.leftOver,0),t.set(s,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var a=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0||0===r?t:r+o[e[r]]>t?r:t}(t),l=t;a!==t.length&&(i.uint8array?(l=t.subarray(0,a),this.leftOver=t.subarray(a,t.length)):(l=t.slice(0,a),this.leftOver=t.slice(a,t.length))),this.push({data:r.utf8decode(l),meta:e.meta})},c.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:r.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},r.Utf8DecodeWorker=c,n.inherits(u,a),u.prototype.processChunk=function(e){this.push({data:r.utf8encode(e.data),meta:e.meta})},r.Utf8EncodeWorker=u},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,r){"use strict";var n=e("./support"),i=e("./base64"),s=e("./nodejsUtils"),a=e("./external");function o(e){return e}function l(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}e("setimmediate"),r.newBlob=function(e,t){r.checkSupport("blob");try{return new Blob([e],{type:t})}catch(r){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(e),n.getBlob(t)}catch(e){throw new Error("Bug : can't construct the Blob.")}}};var c={stringifyByChunk:function(e,t,r){var n=[],i=0,s=e.length;if(s<=r)return String.fromCharCode.apply(null,e);for(;i<s;)"array"===t||"nodebuffer"===t?n.push(String.fromCharCode.apply(null,e.slice(i,Math.min(i+r,s)))):n.push(String.fromCharCode.apply(null,e.subarray(i,Math.min(i+r,s)))),i+=r;return n.join("")},stringifyByChar:function(e){for(var t="",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},applyCanBeUsed:{uint8array:function(){try{return n.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return n.nodebuffer&&1===String.fromCharCode.apply(null,s.allocBuffer(1)).length}catch(e){return!1}}()}};function u(e){var t=65536,n=r.getTypeOf(e),i=!0;if("uint8array"===n?i=c.applyCanBeUsed.uint8array:"nodebuffer"===n&&(i=c.applyCanBeUsed.nodebuffer),i)for(;1<t;)try{return c.stringifyByChunk(e,n,t)}catch(e){t=Math.floor(t/2)}return c.stringifyByChar(e)}function d(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}r.applyFromCharCode=u;var h={};h.string={string:o,array:function(e){return l(e,new Array(e.length))},arraybuffer:function(e){return h.string.uint8array(e).buffer},uint8array:function(e){return l(e,new Uint8Array(e.length))},nodebuffer:function(e){return l(e,s.allocBuffer(e.length))}},h.array={string:u,array:o,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return s.newBufferFrom(e)}},h.arraybuffer={string:function(e){return u(new Uint8Array(e))},array:function(e){return d(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:o,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return s.newBufferFrom(new Uint8Array(e))}},h.uint8array={string:u,array:function(e){return d(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:o,nodebuffer:function(e){return s.newBufferFrom(e)}},h.nodebuffer={string:u,array:function(e){return d(e,new Array(e.length))},arraybuffer:function(e){return h.nodebuffer.uint8array(e).buffer},uint8array:function(e){return d(e,new Uint8Array(e.length))},nodebuffer:o},r.transformTo=function(e,t){if(t=t||"",!e)return t;r.checkSupport(e);var n=r.getTypeOf(t);return h[n][e](t)},r.resolve=function(e){for(var t=e.split("/"),r=[],n=0;n<t.length;n++){var i=t[n];"."===i||""===i&&0!==n&&n!==t.length-1||(".."===i?r.pop():r.push(i))}return r.join("/")},r.getTypeOf=function(e){return"string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":n.nodebuffer&&s.isBuffer(e)?"nodebuffer":n.uint8array&&e instanceof Uint8Array?"uint8array":n.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},r.checkSupport=function(e){if(!n[e.toLowerCase()])throw new Error(e+" is not supported by this platform")},r.MAX_VALUE_16BITS=65535,r.MAX_VALUE_32BITS=-1,r.pretty=function(e){var t,r,n="";for(r=0;r<(e||"").length;r++)n+="\\x"+((t=e.charCodeAt(r))<16?"0":"")+t.toString(16).toUpperCase();return n},r.delay=function(e,t,r){setImmediate((function(){e.apply(r||null,t||[])}))},r.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.prototype=new r},r.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r},r.prepareContent=function(e,t,s,o,c){return a.Promise.resolve(t).then((function(e){return n.blob&&(e instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(e)))&&"undefined"!=typeof FileReader?new a.Promise((function(t,r){var n=new FileReader;n.onload=function(e){t(e.target.result)},n.onerror=function(e){r(e.target.error)},n.readAsArrayBuffer(e)})):e})).then((function(t){var u=r.getTypeOf(t);return u?("arraybuffer"===u?t=r.transformTo("uint8array",t):"string"===u&&(c?t=i.decode(t):s&&!0!==o&&(t=function(e){return l(e,n.uint8array?new Uint8Array(e.length):new Array(e.length))}(t))),t):a.Promise.reject(new Error("Can't read the data of '"+e+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))}))}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(e,t,r){"use strict";var n=e("./reader/readerFor"),i=e("./utils"),s=e("./signature"),a=e("./zipEntry"),o=e("./support");function l(e){this.files=[],this.loadOptions=e}l.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+i.pretty(t)+", expected "+i.pretty(e)+")")}},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=o.uint8array?"uint8array":"array",r=i.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(e=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(e<0)throw this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(e);var t=e;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(0<n)this.isSignature(t,s.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error("Corrupted zip: missing "+Math.abs(n)+" bytes.")},prepareReader:function(e){this.reader=n(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=l},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utils":32,"./zipEntry":34}],34:[function(e,t,r){"use strict";var n=e("./reader/readerFor"),i=e("./utils"),s=e("./compressedObject"),a=e("./crc32"),o=e("./utf8"),l=e("./compressions"),c=e("./support");function u(e,t){this.options=e,this.loadOptions=t}u.prototype={isEncrypted:function(){return!(1&~this.bitFlag)},useUTF8:function(){return!(2048&~this.bitFlag)},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(t=function(e){for(var t in l)if(Object.prototype.hasOwnProperty.call(l,t)&&l[t].magic===e)return l[t];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+i.pretty(this.compressionMethod)+" unknown (inner file : "+i.transformTo("string",this.fileName)+")");this.decompressed=new s(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var e=n(this.extraFields[1].value);this.uncompressedSize===i.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===i.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===i.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===i.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(e){var t,r,n,i=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<i;)t=e.readInt(2),r=e.readInt(2),n=e.readData(r),this.extraFields[t]={id:t,length:r,value:n};e.setIndex(i)},handleUTF8:function(){var e=c.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var r=i.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else{var s=i.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(s)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=n(e.value);return 1!==t.readInt(1)||a(this.fileName)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=n(e.value);return 1!==t.readInt(1)||a(this.fileComment)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null}},t.exports=u},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,r){"use strict";function n(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var i=e("./stream/StreamHelper"),s=e("./stream/DataWorker"),a=e("./utf8"),o=e("./compressedObject"),l=e("./stream/GenericWorker");n.prototype={internalStream:function(e){var t=null,r="string";try{if(!e)throw new Error("No output type specified.");var n="string"===(r=e.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),t=this._decompressWorker();var s=!this._dataBinary;s&&!n&&(t=t.pipe(new a.Utf8EncodeWorker)),!s&&n&&(t=t.pipe(new a.Utf8DecodeWorker))}catch(e){(t=new l("error")).error(e)}return new i(t,r,"")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||"nodebuffer").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof o&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,e,t)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof l?this._data:new s(this._data)}};for(var c=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],u=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},d=0;d<c.length;d++)n.prototype[c[d]]=u;t.exports=n},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,t,n){(function(e){"use strict";var r,n,i=e.MutationObserver||e.WebKitMutationObserver;if(i){var s=0,a=new i(u),o=e.document.createTextNode("");a.observe(o,{characterData:!0}),r=function(){o.data=s=++s%2}}else if(e.setImmediate||void 0===e.MessageChannel)r="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){u(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(u,0)};else{var l=new e.MessageChannel;l.port1.onmessage=u,r=function(){l.port2.postMessage(0)}}var c=[];function u(){var e,t;n=!0;for(var r=c.length;r;){for(t=c,c=[],e=-1;++e<r;)t[e]();r=c.length}n=!1}t.exports=function(e){1!==c.push(e)||n||r()}}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(e,t,r){"use strict";var n=e("immediate");function i(){}var s={},a=["REJECTED"],o=["FULFILLED"],l=["PENDING"];function c(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=l,this.queue=[],this.outcome=void 0,e!==i&&p(this,e)}function u(e,t,r){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function d(e,t,r){n((function(){var n;try{n=t(r)}catch(n){return s.reject(e,n)}n===e?s.reject(e,new TypeError("Cannot resolve promise with itself")):s.resolve(e,n)}))}function h(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function p(e,t){var r=!1;function n(t){r||(r=!0,s.reject(e,t))}function i(t){r||(r=!0,s.resolve(e,t))}var a=f((function(){t(i,n)}));"error"===a.status&&n(a.value)}function f(e,t){var r={};try{r.value=e(t),r.status="success"}catch(e){r.status="error",r.value=e}return r}(t.exports=c).prototype.finally=function(e){if("function"!=typeof e)return this;var t=this.constructor;return this.then((function(r){return t.resolve(e()).then((function(){return r}))}),(function(r){return t.resolve(e()).then((function(){throw r}))}))},c.prototype.catch=function(e){return this.then(null,e)},c.prototype.then=function(e,t){if("function"!=typeof e&&this.state===o||"function"!=typeof t&&this.state===a)return this;var r=new this.constructor(i);return this.state!==l?d(r,this.state===o?e:t,this.outcome):this.queue.push(new u(r,e,t)),r},u.prototype.callFulfilled=function(e){s.resolve(this.promise,e)},u.prototype.otherCallFulfilled=function(e){d(this.promise,this.onFulfilled,e)},u.prototype.callRejected=function(e){s.reject(this.promise,e)},u.prototype.otherCallRejected=function(e){d(this.promise,this.onRejected,e)},s.resolve=function(e,t){var r=f(h,t);if("error"===r.status)return s.reject(e,r.value);var n=r.value;if(n)p(e,n);else{e.state=o,e.outcome=t;for(var i=-1,a=e.queue.length;++i<a;)e.queue[i].callFulfilled(t)}return e},s.reject=function(e,t){e.state=a,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},c.resolve=function(e){return e instanceof this?e:s.resolve(new this(i),e)},c.reject=function(e){var t=new this(i);return s.reject(t,e)},c.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var r=e.length,n=!1;if(!r)return this.resolve([]);for(var a=new Array(r),o=0,l=-1,c=new this(i);++l<r;)u(e[l],l);return c;function u(e,i){t.resolve(e).then((function(e){a[i]=e,++o!==r||n||(n=!0,s.resolve(c,a))}),(function(e){n||(n=!0,s.reject(c,e))}))}},c.race=function(e){if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var t=e.length,r=!1;if(!t)return this.resolve([]);for(var n,a=-1,o=new this(i);++a<t;)n=e[a],this.resolve(n).then((function(e){r||(r=!0,s.resolve(o,e))}),(function(e){r||(r=!0,s.reject(o,e))}));return o}},{immediate:36}],38:[function(e,t,r){"use strict";var n={};(0,e("./lib/utils/common").assign)(n,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=n},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,r){"use strict";var n=e("./zlib/deflate"),i=e("./utils/common"),s=e("./utils/strings"),a=e("./zlib/messages"),o=e("./zlib/zstream"),l=Object.prototype.toString,c=0,u=-1,d=0,h=8;function p(e){if(!(this instanceof p))return new p(e);this.options=i.assign({level:u,method:h,chunkSize:16384,windowBits:15,memLevel:8,strategy:d,to:""},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new o,this.strm.avail_out=0;var r=n.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==c)throw new Error(a[r]);if(t.header&&n.deflateSetHeader(this.strm,t.header),t.dictionary){var f;if(f="string"==typeof t.dictionary?s.string2buf(t.dictionary):"[object ArrayBuffer]"===l.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(r=n.deflateSetDictionary(this.strm,f))!==c)throw new Error(a[r]);this._dict_set=!0}}function f(e,t){var r=new p(t);if(r.push(e,!0),r.err)throw r.msg||a[r.err];return r.result}p.prototype.push=function(e,t){var r,a,o=this.strm,u=this.options.chunkSize;if(this.ended)return!1;a=t===~~t?t:!0===t?4:0,"string"==typeof e?o.input=s.string2buf(e):"[object ArrayBuffer]"===l.call(e)?o.input=new Uint8Array(e):o.input=e,o.next_in=0,o.avail_in=o.input.length;do{if(0===o.avail_out&&(o.output=new i.Buf8(u),o.next_out=0,o.avail_out=u),1!==(r=n.deflate(o,a))&&r!==c)return this.onEnd(r),!(this.ended=!0);0!==o.avail_out&&(0!==o.avail_in||4!==a&&2!==a)||("string"===this.options.to?this.onData(s.buf2binstring(i.shrinkBuf(o.output,o.next_out))):this.onData(i.shrinkBuf(o.output,o.next_out)))}while((0<o.avail_in||0===o.avail_out)&&1!==r);return 4===a?(r=n.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===c):2!==a||(this.onEnd(c),!(o.avail_out=0))},p.prototype.onData=function(e){this.chunks.push(e)},p.prototype.onEnd=function(e){e===c&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Deflate=p,r.deflate=f,r.deflateRaw=function(e,t){return(t=t||{}).raw=!0,f(e,t)},r.gzip=function(e,t){return(t=t||{}).gzip=!0,f(e,t)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,r){"use strict";var n=e("./zlib/inflate"),i=e("./utils/common"),s=e("./utils/strings"),a=e("./zlib/constants"),o=e("./zlib/messages"),l=e("./zlib/zstream"),c=e("./zlib/gzheader"),u=Object.prototype.toString;function d(e){if(!(this instanceof d))return new d(e);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&!(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new l,this.strm.avail_out=0;var r=n.inflateInit2(this.strm,t.windowBits);if(r!==a.Z_OK)throw new Error(o[r]);this.header=new c,n.inflateGetHeader(this.strm,this.header)}function h(e,t){var r=new d(t);if(r.push(e,!0),r.err)throw r.msg||o[r.err];return r.result}d.prototype.push=function(e,t){var r,o,l,c,d,h,p=this.strm,f=this.options.chunkSize,m=this.options.dictionary,g=!1;if(this.ended)return!1;o=t===~~t?t:!0===t?a.Z_FINISH:a.Z_NO_FLUSH,"string"==typeof e?p.input=s.binstring2buf(e):"[object ArrayBuffer]"===u.call(e)?p.input=new Uint8Array(e):p.input=e,p.next_in=0,p.avail_in=p.input.length;do{if(0===p.avail_out&&(p.output=new i.Buf8(f),p.next_out=0,p.avail_out=f),(r=n.inflate(p,a.Z_NO_FLUSH))===a.Z_NEED_DICT&&m&&(h="string"==typeof m?s.string2buf(m):"[object ArrayBuffer]"===u.call(m)?new Uint8Array(m):m,r=n.inflateSetDictionary(this.strm,h)),r===a.Z_BUF_ERROR&&!0===g&&(r=a.Z_OK,g=!1),r!==a.Z_STREAM_END&&r!==a.Z_OK)return this.onEnd(r),!(this.ended=!0);p.next_out&&(0!==p.avail_out&&r!==a.Z_STREAM_END&&(0!==p.avail_in||o!==a.Z_FINISH&&o!==a.Z_SYNC_FLUSH)||("string"===this.options.to?(l=s.utf8border(p.output,p.next_out),c=p.next_out-l,d=s.buf2string(p.output,l),p.next_out=c,p.avail_out=f-c,c&&i.arraySet(p.output,p.output,l,c,0),this.onData(d)):this.onData(i.shrinkBuf(p.output,p.next_out)))),0===p.avail_in&&0===p.avail_out&&(g=!0)}while((0<p.avail_in||0===p.avail_out)&&r!==a.Z_STREAM_END);return r===a.Z_STREAM_END&&(o=a.Z_FINISH),o===a.Z_FINISH?(r=n.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===a.Z_OK):o!==a.Z_SYNC_FLUSH||(this.onEnd(a.Z_OK),!(p.avail_out=0))},d.prototype.onData=function(e){this.chunks.push(e)},d.prototype.onEnd=function(e){e===a.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Inflate=d,r.inflate=h,r.inflateRaw=function(e,t){return(t=t||{}).raw=!0,h(e,t)},r.ungzip=h},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n])}}return e},r.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var i={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),i);else for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){var t,r,n,i,s,a;for(t=n=0,r=e.length;t<r;t++)n+=e[t].length;for(a=new Uint8Array(n),t=i=0,r=e.length;t<r;t++)s=e[t],a.set(s,i),i+=s.length;return a}},s={arraySet:function(e,t,r,n,i){for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){return[].concat.apply([],e)}};r.setTyped=function(e){e?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s))},r.setTyped(n)},{}],42:[function(e,t,r){"use strict";var n=e("./common"),i=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(e){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){s=!1}for(var a=new n.Buf8(256),o=0;o<256;o++)a[o]=252<=o?6:248<=o?5:240<=o?4:224<=o?3:192<=o?2:1;function l(e,t){if(t<65537&&(e.subarray&&s||!e.subarray&&i))return String.fromCharCode.apply(null,n.shrinkBuf(e,t));for(var r="",a=0;a<t;a++)r+=String.fromCharCode(e[a]);return r}a[254]=a[254]=1,r.string2buf=function(e){var t,r,i,s,a,o=e.length,l=0;for(s=0;s<o;s++)55296==(64512&(r=e.charCodeAt(s)))&&s+1<o&&56320==(64512&(i=e.charCodeAt(s+1)))&&(r=65536+(r-55296<<10)+(i-56320),s++),l+=r<128?1:r<2048?2:r<65536?3:4;for(t=new n.Buf8(l),s=a=0;a<l;s++)55296==(64512&(r=e.charCodeAt(s)))&&s+1<o&&56320==(64512&(i=e.charCodeAt(s+1)))&&(r=65536+(r-55296<<10)+(i-56320),s++),r<128?t[a++]=r:(r<2048?t[a++]=192|r>>>6:(r<65536?t[a++]=224|r>>>12:(t[a++]=240|r>>>18,t[a++]=128|r>>>12&63),t[a++]=128|r>>>6&63),t[a++]=128|63&r);return t},r.buf2binstring=function(e){return l(e,e.length)},r.binstring2buf=function(e){for(var t=new n.Buf8(e.length),r=0,i=t.length;r<i;r++)t[r]=e.charCodeAt(r);return t},r.buf2string=function(e,t){var r,n,i,s,o=t||e.length,c=new Array(2*o);for(r=n=0;r<o;)if((i=e[r++])<128)c[n++]=i;else if(4<(s=a[i]))c[n++]=65533,r+=s-1;else{for(i&=2===s?31:3===s?15:7;1<s&&r<o;)i=i<<6|63&e[r++],s--;1<s?c[n++]=65533:i<65536?c[n++]=i:(i-=65536,c[n++]=55296|i>>10&1023,c[n++]=56320|1023&i)}return l(c,n)},r.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0||0===r?t:r+a[e[r]]>t?r:t}},{"./common":41}],43:[function(e,t,r){"use strict";t.exports=function(e,t,r,n){for(var i=65535&e,s=e>>>16&65535,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(i=i+t[n++]|0)|0,--a;);i%=65521,s%=65521}return i|s<<16}},{}],44:[function(e,t,r){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,r){"use strict";var n=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t,r,i){var s=n,a=i+r;e^=-1;for(var o=i;o<a;o++)e=e>>>8^s[255&(e^t[o])];return~e}},{}],46:[function(e,t,r){"use strict";var n,i=e("../utils/common"),s=e("./trees"),a=e("./adler32"),o=e("./crc32"),l=e("./messages"),c=0,u=0,d=-2,h=2,p=8,f=286,m=30,g=19,b=2*f+1,y=15,v=3,_=258,w=_+v+1,S=42,x=113;function E(e,t){return e.msg=l[t],t}function k(e){return(e<<1)-(4<e?9:0)}function A(e){for(var t=e.length;0<=--t;)e[t]=0}function C(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(i.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function T(e,t){s._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,C(e.strm)}function R(e,t){e.pending_buf[e.pending++]=t}function N(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function I(e,t){var r,n,i=e.max_chain_length,s=e.strstart,a=e.prev_length,o=e.nice_match,l=e.strstart>e.w_size-w?e.strstart-(e.w_size-w):0,c=e.window,u=e.w_mask,d=e.prev,h=e.strstart+_,p=c[s+a-1],f=c[s+a];e.prev_length>=e.good_match&&(i>>=2),o>e.lookahead&&(o=e.lookahead);do{if(c[(r=t)+a]===f&&c[r+a-1]===p&&c[r]===c[s]&&c[++r]===c[s+1]){s+=2,r++;do{}while(c[++s]===c[++r]&&c[++s]===c[++r]&&c[++s]===c[++r]&&c[++s]===c[++r]&&c[++s]===c[++r]&&c[++s]===c[++r]&&c[++s]===c[++r]&&c[++s]===c[++r]&&s<h);if(n=_-(h-s),s=h-_,a<n){if(e.match_start=t,o<=(a=n))break;p=c[s+a-1],f=c[s+a]}}}while((t=d[t&u])>l&&0!=--i);return a<=e.lookahead?a:e.lookahead}function q(e){var t,r,n,s,l,c,u,d,h,p,f=e.w_size;do{if(s=e.window_size-e.lookahead-e.strstart,e.strstart>=f+(f-w)){for(i.arraySet(e.window,e.window,f,f,0),e.match_start-=f,e.strstart-=f,e.block_start-=f,t=r=e.hash_size;n=e.head[--t],e.head[t]=f<=n?n-f:0,--r;);for(t=r=f;n=e.prev[--t],e.prev[t]=f<=n?n-f:0,--r;);s+=f}if(0===e.strm.avail_in)break;if(c=e.strm,u=e.window,d=e.strstart+e.lookahead,p=void 0,(h=s)<(p=c.avail_in)&&(p=h),r=0===p?0:(c.avail_in-=p,i.arraySet(u,c.input,c.next_in,p,d),1===c.state.wrap?c.adler=a(c.adler,u,p,d):2===c.state.wrap&&(c.adler=o(c.adler,u,p,d)),c.next_in+=p,c.total_in+=p,p),e.lookahead+=r,e.lookahead+e.insert>=v)for(l=e.strstart-e.insert,e.ins_h=e.window[l],e.ins_h=(e.ins_h<<e.hash_shift^e.window[l+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[l+v-1])&e.hash_mask,e.prev[l&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=l,l++,e.insert--,!(e.lookahead+e.insert<v)););}while(e.lookahead<w&&0!==e.strm.avail_in)}function D(e,t){for(var r,n;;){if(e.lookahead<w){if(q(e),e.lookahead<w&&t===c)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=v&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+v-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-w&&(e.match_length=I(e,r)),e.match_length>=v)if(n=s._tr_tally(e,e.strstart-e.match_start,e.match_length-v),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=v){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+v-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=s._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(T(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<v-1?e.strstart:v-1,4===t?(T(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(T(e,!1),0===e.strm.avail_out)?1:2}function L(e,t){for(var r,n,i;;){if(e.lookahead<w){if(q(e),e.lookahead<w&&t===c)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=v&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+v-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=v-1,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-w&&(e.match_length=I(e,r),e.match_length<=5&&(1===e.strategy||e.match_length===v&&4096<e.strstart-e.match_start)&&(e.match_length=v-1)),e.prev_length>=v&&e.match_length<=e.prev_length){for(i=e.strstart+e.lookahead-v,n=s._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-v),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+v-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=v-1,e.strstart++,n&&(T(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((n=s._tr_tally(e,0,e.window[e.strstart-1]))&&T(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=s._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<v-1?e.strstart:v-1,4===t?(T(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(T(e,!1),0===e.strm.avail_out)?1:2}function O(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i}function B(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=p,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(2*b),this.dyn_dtree=new i.Buf16(2*(2*m+1)),this.bl_tree=new i.Buf16(2*(2*g+1)),A(this.dyn_ltree),A(this.dyn_dtree),A(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(y+1),this.heap=new i.Buf16(2*f+1),A(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(2*f+1),A(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function P(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=h,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?S:x,e.adler=2===t.wrap?0:1,t.last_flush=c,s._tr_init(t),u):E(e,d)}function M(e){var t=P(e);return t===u&&function(e){e.window_size=2*e.w_size,A(e.head),e.max_lazy_match=n[e.level].max_lazy,e.good_match=n[e.level].good_length,e.nice_match=n[e.level].nice_length,e.max_chain_length=n[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=v-1,e.match_available=0,e.ins_h=0}(e.state),t}function U(e,t,r,n,s,a){if(!e)return d;var o=1;if(-1===t&&(t=6),n<0?(o=0,n=-n):15<n&&(o=2,n-=16),s<1||9<s||r!==p||n<8||15<n||t<0||9<t||a<0||4<a)return E(e,d);8===n&&(n=9);var l=new B;return(e.state=l).strm=e,l.wrap=o,l.gzhead=null,l.w_bits=n,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=s+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+v-1)/v),l.window=new i.Buf8(2*l.w_size),l.head=new i.Buf16(l.hash_size),l.prev=new i.Buf16(l.w_size),l.lit_bufsize=1<<s+6,l.pending_buf_size=4*l.lit_bufsize,l.pending_buf=new i.Buf8(l.pending_buf_size),l.d_buf=1*l.lit_bufsize,l.l_buf=3*l.lit_bufsize,l.level=t,l.strategy=a,l.method=r,M(e)}n=[new O(0,0,0,0,(function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(q(e),0===e.lookahead&&t===c)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,T(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-w&&(T(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(T(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(T(e,!1),e.strm.avail_out),1)})),new O(4,4,8,4,D),new O(4,5,16,8,D),new O(4,6,32,32,D),new O(4,4,16,16,L),new O(8,16,32,32,L),new O(8,16,128,128,L),new O(8,32,128,256,L),new O(32,128,258,1024,L),new O(32,258,258,4096,L)],r.deflateInit=function(e,t){return U(e,t,p,15,8,0)},r.deflateInit2=U,r.deflateReset=M,r.deflateResetKeep=P,r.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?d:(e.state.gzhead=t,u):d},r.deflate=function(e,t){var r,i,a,l;if(!e||!e.state||5<t||t<0)return e?E(e,d):d;if(i=e.state,!e.output||!e.input&&0!==e.avail_in||666===i.status&&4!==t)return E(e,0===e.avail_out?-5:d);if(i.strm=e,r=i.last_flush,i.last_flush=t,i.status===S)if(2===i.wrap)e.adler=0,R(i,31),R(i,139),R(i,8),i.gzhead?(R(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),R(i,255&i.gzhead.time),R(i,i.gzhead.time>>8&255),R(i,i.gzhead.time>>16&255),R(i,i.gzhead.time>>24&255),R(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),R(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(R(i,255&i.gzhead.extra.length),R(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(e.adler=o(e.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(R(i,0),R(i,0),R(i,0),R(i,0),R(i,0),R(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),R(i,3),i.status=x);else{var h=p+(i.w_bits-8<<4)<<8;h|=(2<=i.strategy||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(h|=32),h+=31-h%31,i.status=x,N(i,h),0!==i.strstart&&(N(i,e.adler>>>16),N(i,65535&e.adler)),e.adler=1}if(69===i.status)if(i.gzhead.extra){for(a=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>a&&(e.adler=o(e.adler,i.pending_buf,i.pending-a,a)),C(e),a=i.pending,i.pending!==i.pending_buf_size));)R(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>a&&(e.adler=o(e.adler,i.pending_buf,i.pending-a,a)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(e.adler=o(e.adler,i.pending_buf,i.pending-a,a)),C(e),a=i.pending,i.pending===i.pending_buf_size)){l=1;break}l=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,R(i,l)}while(0!==l);i.gzhead.hcrc&&i.pending>a&&(e.adler=o(e.adler,i.pending_buf,i.pending-a,a)),0===l&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(e.adler=o(e.adler,i.pending_buf,i.pending-a,a)),C(e),a=i.pending,i.pending===i.pending_buf_size)){l=1;break}l=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,R(i,l)}while(0!==l);i.gzhead.hcrc&&i.pending>a&&(e.adler=o(e.adler,i.pending_buf,i.pending-a,a)),0===l&&(i.status=103)}else i.status=103;if(103===i.status&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&C(e),i.pending+2<=i.pending_buf_size&&(R(i,255&e.adler),R(i,e.adler>>8&255),e.adler=0,i.status=x)):i.status=x),0!==i.pending){if(C(e),0===e.avail_out)return i.last_flush=-1,u}else if(0===e.avail_in&&k(t)<=k(r)&&4!==t)return E(e,-5);if(666===i.status&&0!==e.avail_in)return E(e,-5);if(0!==e.avail_in||0!==i.lookahead||t!==c&&666!==i.status){var f=2===i.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(q(e),0===e.lookahead)){if(t===c)return 1;break}if(e.match_length=0,r=s._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(T(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(T(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(T(e,!1),0===e.strm.avail_out)?1:2}(i,t):3===i.strategy?function(e,t){for(var r,n,i,a,o=e.window;;){if(e.lookahead<=_){if(q(e),e.lookahead<=_&&t===c)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=v&&0<e.strstart&&(n=o[i=e.strstart-1])===o[++i]&&n===o[++i]&&n===o[++i]){a=e.strstart+_;do{}while(n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&i<a);e.match_length=_-(a-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=v?(r=s._tr_tally(e,1,e.match_length-v),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=s._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(T(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(T(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(T(e,!1),0===e.strm.avail_out)?1:2}(i,t):n[i.level].func(i,t);if(3!==f&&4!==f||(i.status=666),1===f||3===f)return 0===e.avail_out&&(i.last_flush=-1),u;if(2===f&&(1===t?s._tr_align(i):5!==t&&(s._tr_stored_block(i,0,0,!1),3===t&&(A(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),C(e),0===e.avail_out))return i.last_flush=-1,u}return 4!==t?u:i.wrap<=0?1:(2===i.wrap?(R(i,255&e.adler),R(i,e.adler>>8&255),R(i,e.adler>>16&255),R(i,e.adler>>24&255),R(i,255&e.total_in),R(i,e.total_in>>8&255),R(i,e.total_in>>16&255),R(i,e.total_in>>24&255)):(N(i,e.adler>>>16),N(i,65535&e.adler)),C(e),0<i.wrap&&(i.wrap=-i.wrap),0!==i.pending?u:1)},r.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==S&&69!==t&&73!==t&&91!==t&&103!==t&&t!==x&&666!==t?E(e,d):(e.state=null,t===x?E(e,-3):u):d},r.deflateSetDictionary=function(e,t){var r,n,s,o,l,c,h,p,f=t.length;if(!e||!e.state)return d;if(2===(o=(r=e.state).wrap)||1===o&&r.status!==S||r.lookahead)return d;for(1===o&&(e.adler=a(e.adler,t,f,0)),r.wrap=0,f>=r.w_size&&(0===o&&(A(r.head),r.strstart=0,r.block_start=0,r.insert=0),p=new i.Buf8(r.w_size),i.arraySet(p,t,f-r.w_size,r.w_size,0),t=p,f=r.w_size),l=e.avail_in,c=e.next_in,h=e.input,e.avail_in=f,e.next_in=0,e.input=t,q(r);r.lookahead>=v;){for(n=r.strstart,s=r.lookahead-(v-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+v-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--s;);r.strstart=n,r.lookahead=v-1,q(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=v-1,r.match_available=0,e.next_in=c,e.input=h,e.avail_in=l,r.wrap=o,u},r.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,r){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,r){"use strict";t.exports=function(e,t){var r,n,i,s,a,o,l,c,u,d,h,p,f,m,g,b,y,v,_,w,S,x,E,k,A;r=e.state,n=e.next_in,k=e.input,i=n+(e.avail_in-5),s=e.next_out,A=e.output,a=s-(t-e.avail_out),o=s+(e.avail_out-257),l=r.dmax,c=r.wsize,u=r.whave,d=r.wnext,h=r.window,p=r.hold,f=r.bits,m=r.lencode,g=r.distcode,b=(1<<r.lenbits)-1,y=(1<<r.distbits)-1;e:do{f<15&&(p+=k[n++]<<f,f+=8,p+=k[n++]<<f,f+=8),v=m[p&b];t:for(;;){if(p>>>=_=v>>>24,f-=_,0==(_=v>>>16&255))A[s++]=65535&v;else{if(!(16&_)){if(!(64&_)){v=m[(65535&v)+(p&(1<<_)-1)];continue t}if(32&_){r.mode=12;break e}e.msg="invalid literal/length code",r.mode=30;break e}w=65535&v,(_&=15)&&(f<_&&(p+=k[n++]<<f,f+=8),w+=p&(1<<_)-1,p>>>=_,f-=_),f<15&&(p+=k[n++]<<f,f+=8,p+=k[n++]<<f,f+=8),v=g[p&y];r:for(;;){if(p>>>=_=v>>>24,f-=_,!(16&(_=v>>>16&255))){if(!(64&_)){v=g[(65535&v)+(p&(1<<_)-1)];continue r}e.msg="invalid distance code",r.mode=30;break e}if(S=65535&v,f<(_&=15)&&(p+=k[n++]<<f,(f+=8)<_&&(p+=k[n++]<<f,f+=8)),l<(S+=p&(1<<_)-1)){e.msg="invalid distance too far back",r.mode=30;break e}if(p>>>=_,f-=_,(_=s-a)<S){if(u<(_=S-_)&&r.sane){e.msg="invalid distance too far back",r.mode=30;break e}if(E=h,(x=0)===d){if(x+=c-_,_<w){for(w-=_;A[s++]=h[x++],--_;);x=s-S,E=A}}else if(d<_){if(x+=c+d-_,(_-=d)<w){for(w-=_;A[s++]=h[x++],--_;);if(x=0,d<w){for(w-=_=d;A[s++]=h[x++],--_;);x=s-S,E=A}}}else if(x+=d-_,_<w){for(w-=_;A[s++]=h[x++],--_;);x=s-S,E=A}for(;2<w;)A[s++]=E[x++],A[s++]=E[x++],A[s++]=E[x++],w-=3;w&&(A[s++]=E[x++],1<w&&(A[s++]=E[x++]))}else{for(x=s-S;A[s++]=A[x++],A[s++]=A[x++],A[s++]=A[x++],2<(w-=3););w&&(A[s++]=A[x++],1<w&&(A[s++]=A[x++]))}break}}break}}while(n<i&&s<o);n-=w=f>>3,p&=(1<<(f-=w<<3))-1,e.next_in=n,e.next_out=s,e.avail_in=n<i?i-n+5:5-(n-i),e.avail_out=s<o?o-s+257:257-(s-o),r.hold=p,r.bits=f}},{}],49:[function(e,t,r){"use strict";var n=e("../utils/common"),i=e("./adler32"),s=e("./crc32"),a=e("./inffast"),o=e("./inftrees"),l=0,c=-2,u=1,d=852,h=592;function p(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function f(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function m(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=u,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new n.Buf32(d),t.distcode=t.distdyn=new n.Buf32(h),t.sane=1,t.back=-1,l):c}function g(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,m(e)):c}function b(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?c:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,g(e))):c}function y(e,t){var r,n;return e?(n=new f,(e.state=n).window=null,(r=b(e,t))!==l&&(e.state=null),r):c}var v,_,w=!0;function S(e){if(w){var t;for(v=new n.Buf32(512),_=new n.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(o(1,e.lens,0,288,v,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;o(2,e.lens,0,32,_,0,e.work,{bits:5}),w=!1}e.lencode=v,e.lenbits=9,e.distcode=_,e.distbits=5}function x(e,t,r,i){var s,a=e.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new n.Buf8(a.wsize)),i>=a.wsize?(n.arraySet(a.window,t,r-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):(i<(s=a.wsize-a.wnext)&&(s=i),n.arraySet(a.window,t,r-i,s,a.wnext),(i-=s)?(n.arraySet(a.window,t,r-i,i,0),a.wnext=i,a.whave=a.wsize):(a.wnext+=s,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=s))),0}r.inflateReset=g,r.inflateReset2=b,r.inflateResetKeep=m,r.inflateInit=function(e){return y(e,15)},r.inflateInit2=y,r.inflate=function(e,t){var r,d,h,f,m,g,b,y,v,_,w,E,k,A,C,T,R,N,I,q,D,L,O,B,P=0,M=new n.Buf8(4),U=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return c;12===(r=e.state).mode&&(r.mode=13),m=e.next_out,h=e.output,b=e.avail_out,f=e.next_in,d=e.input,g=e.avail_in,y=r.hold,v=r.bits,_=g,w=b,L=l;e:for(;;)switch(r.mode){case u:if(0===r.wrap){r.mode=13;break}for(;v<16;){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}if(2&r.wrap&&35615===y){M[r.check=0]=255&y,M[1]=y>>>8&255,r.check=s(r.check,M,2,0),v=y=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&y)<<8)+(y>>8))%31){e.msg="incorrect header check",r.mode=30;break}if(8!=(15&y)){e.msg="unknown compression method",r.mode=30;break}if(v-=4,D=8+(15&(y>>>=4)),0===r.wbits)r.wbits=D;else if(D>r.wbits){e.msg="invalid window size",r.mode=30;break}r.dmax=1<<D,e.adler=r.check=1,r.mode=512&y?10:12,v=y=0;break;case 2:for(;v<16;){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}if(r.flags=y,8!=(255&r.flags)){e.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=y>>8&1),512&r.flags&&(M[0]=255&y,M[1]=y>>>8&255,r.check=s(r.check,M,2,0)),v=y=0,r.mode=3;case 3:for(;v<32;){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}r.head&&(r.head.time=y),512&r.flags&&(M[0]=255&y,M[1]=y>>>8&255,M[2]=y>>>16&255,M[3]=y>>>24&255,r.check=s(r.check,M,4,0)),v=y=0,r.mode=4;case 4:for(;v<16;){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}r.head&&(r.head.xflags=255&y,r.head.os=y>>8),512&r.flags&&(M[0]=255&y,M[1]=y>>>8&255,r.check=s(r.check,M,2,0)),v=y=0,r.mode=5;case 5:if(1024&r.flags){for(;v<16;){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}r.length=y,r.head&&(r.head.extra_len=y),512&r.flags&&(M[0]=255&y,M[1]=y>>>8&255,r.check=s(r.check,M,2,0)),v=y=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(g<(E=r.length)&&(E=g),E&&(r.head&&(D=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,d,f,E,D)),512&r.flags&&(r.check=s(r.check,d,E,f)),g-=E,f+=E,r.length-=E),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===g)break e;for(E=0;D=d[f+E++],r.head&&D&&r.length<65536&&(r.head.name+=String.fromCharCode(D)),D&&E<g;);if(512&r.flags&&(r.check=s(r.check,d,E,f)),g-=E,f+=E,D)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===g)break e;for(E=0;D=d[f+E++],r.head&&D&&r.length<65536&&(r.head.comment+=String.fromCharCode(D)),D&&E<g;);if(512&r.flags&&(r.check=s(r.check,d,E,f)),g-=E,f+=E,D)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;v<16;){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}if(y!==(65535&r.check)){e.msg="header crc mismatch",r.mode=30;break}v=y=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;v<32;){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}e.adler=r.check=p(y),v=y=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=m,e.avail_out=b,e.next_in=f,e.avail_in=g,r.hold=y,r.bits=v,2;e.adler=r.check=1,r.mode=12;case 12:if(5===t||6===t)break e;case 13:if(r.last){y>>>=7&v,v-=7&v,r.mode=27;break}for(;v<3;){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}switch(r.last=1&y,v-=1,3&(y>>>=1)){case 0:r.mode=14;break;case 1:if(S(r),r.mode=20,6!==t)break;y>>>=2,v-=2;break e;case 2:r.mode=17;break;case 3:e.msg="invalid block type",r.mode=30}y>>>=2,v-=2;break;case 14:for(y>>>=7&v,v-=7&v;v<32;){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}if((65535&y)!=(y>>>16^65535)){e.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&y,v=y=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(E=r.length){if(g<E&&(E=g),b<E&&(E=b),0===E)break e;n.arraySet(h,d,f,E,m),g-=E,f+=E,b-=E,m+=E,r.length-=E;break}r.mode=12;break;case 17:for(;v<14;){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}if(r.nlen=257+(31&y),y>>>=5,v-=5,r.ndist=1+(31&y),y>>>=5,v-=5,r.ncode=4+(15&y),y>>>=4,v-=4,286<r.nlen||30<r.ndist){e.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;v<3;){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}r.lens[U[r.have++]]=7&y,y>>>=3,v-=3}for(;r.have<19;)r.lens[U[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,O={bits:r.lenbits},L=o(0,r.lens,0,19,r.lencode,0,r.work,O),r.lenbits=O.bits,L){e.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;T=(P=r.lencode[y&(1<<r.lenbits)-1])>>>16&255,R=65535&P,!((C=P>>>24)<=v);){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}if(R<16)y>>>=C,v-=C,r.lens[r.have++]=R;else{if(16===R){for(B=C+2;v<B;){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}if(y>>>=C,v-=C,0===r.have){e.msg="invalid bit length repeat",r.mode=30;break}D=r.lens[r.have-1],E=3+(3&y),y>>>=2,v-=2}else if(17===R){for(B=C+3;v<B;){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}v-=C,D=0,E=3+(7&(y>>>=C)),y>>>=3,v-=3}else{for(B=C+7;v<B;){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}v-=C,D=0,E=11+(127&(y>>>=C)),y>>>=7,v-=7}if(r.have+E>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=30;break}for(;E--;)r.lens[r.have++]=D}}if(30===r.mode)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,O={bits:r.lenbits},L=o(1,r.lens,0,r.nlen,r.lencode,0,r.work,O),r.lenbits=O.bits,L){e.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,O={bits:r.distbits},L=o(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,O),r.distbits=O.bits,L){e.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(6<=g&&258<=b){e.next_out=m,e.avail_out=b,e.next_in=f,e.avail_in=g,r.hold=y,r.bits=v,a(e,w),m=e.next_out,h=e.output,b=e.avail_out,f=e.next_in,d=e.input,g=e.avail_in,y=r.hold,v=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;T=(P=r.lencode[y&(1<<r.lenbits)-1])>>>16&255,R=65535&P,!((C=P>>>24)<=v);){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}if(T&&!(240&T)){for(N=C,I=T,q=R;T=(P=r.lencode[q+((y&(1<<N+I)-1)>>N)])>>>16&255,R=65535&P,!(N+(C=P>>>24)<=v);){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}y>>>=N,v-=N,r.back+=N}if(y>>>=C,v-=C,r.back+=C,r.length=R,0===T){r.mode=26;break}if(32&T){r.back=-1,r.mode=12;break}if(64&T){e.msg="invalid literal/length code",r.mode=30;break}r.extra=15&T,r.mode=22;case 22:if(r.extra){for(B=r.extra;v<B;){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}r.length+=y&(1<<r.extra)-1,y>>>=r.extra,v-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;T=(P=r.distcode[y&(1<<r.distbits)-1])>>>16&255,R=65535&P,!((C=P>>>24)<=v);){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}if(!(240&T)){for(N=C,I=T,q=R;T=(P=r.distcode[q+((y&(1<<N+I)-1)>>N)])>>>16&255,R=65535&P,!(N+(C=P>>>24)<=v);){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}y>>>=N,v-=N,r.back+=N}if(y>>>=C,v-=C,r.back+=C,64&T){e.msg="invalid distance code",r.mode=30;break}r.offset=R,r.extra=15&T,r.mode=24;case 24:if(r.extra){for(B=r.extra;v<B;){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}r.offset+=y&(1<<r.extra)-1,y>>>=r.extra,v-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===b)break e;if(E=w-b,r.offset>E){if((E=r.offset-E)>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=30;break}k=E>r.wnext?(E-=r.wnext,r.wsize-E):r.wnext-E,E>r.length&&(E=r.length),A=r.window}else A=h,k=m-r.offset,E=r.length;for(b<E&&(E=b),b-=E,r.length-=E;h[m++]=A[k++],--E;);0===r.length&&(r.mode=21);break;case 26:if(0===b)break e;h[m++]=r.length,b--,r.mode=21;break;case 27:if(r.wrap){for(;v<32;){if(0===g)break e;g--,y|=d[f++]<<v,v+=8}if(w-=b,e.total_out+=w,r.total+=w,w&&(e.adler=r.check=r.flags?s(r.check,h,w,m-w):i(r.check,h,w,m-w)),w=b,(r.flags?y:p(y))!==r.check){e.msg="incorrect data check",r.mode=30;break}v=y=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;v<32;){if(0===g)break e;g--,y+=d[f++]<<v,v+=8}if(y!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=30;break}v=y=0}r.mode=29;case 29:L=1;break e;case 30:L=-3;break e;case 31:return-4;default:return c}return e.next_out=m,e.avail_out=b,e.next_in=f,e.avail_in=g,r.hold=y,r.bits=v,(r.wsize||w!==e.avail_out&&r.mode<30&&(r.mode<27||4!==t))&&x(e,e.output,e.next_out,w-e.avail_out)?(r.mode=31,-4):(_-=e.avail_in,w-=e.avail_out,e.total_in+=_,e.total_out+=w,r.total+=w,r.wrap&&w&&(e.adler=r.check=r.flags?s(r.check,h,w,e.next_out-w):i(r.check,h,w,e.next_out-w)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==_&&0===w||4===t)&&L===l&&(L=-5),L)},r.inflateEnd=function(e){if(!e||!e.state)return c;var t=e.state;return t.window&&(t.window=null),e.state=null,l},r.inflateGetHeader=function(e,t){var r;return e&&e.state&&2&(r=e.state).wrap?((r.head=t).done=!1,l):c},r.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?c:11===r.mode&&i(1,t,n,0)!==r.check?-3:x(e,t,n,n)?(r.mode=31,-4):(r.havedict=1,l):c},r.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,r){"use strict";var n=e("../utils/common"),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],s=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],o=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,r,l,c,u,d,h){var p,f,m,g,b,y,v,_,w,S=h.bits,x=0,E=0,k=0,A=0,C=0,T=0,R=0,N=0,I=0,q=0,D=null,L=0,O=new n.Buf16(16),B=new n.Buf16(16),P=null,M=0;for(x=0;x<=15;x++)O[x]=0;for(E=0;E<l;E++)O[t[r+E]]++;for(C=S,A=15;1<=A&&0===O[A];A--);if(A<C&&(C=A),0===A)return c[u++]=20971520,c[u++]=20971520,h.bits=1,0;for(k=1;k<A&&0===O[k];k++);for(C<k&&(C=k),x=N=1;x<=15;x++)if(N<<=1,(N-=O[x])<0)return-1;if(0<N&&(0===e||1!==A))return-1;for(B[1]=0,x=1;x<15;x++)B[x+1]=B[x]+O[x];for(E=0;E<l;E++)0!==t[r+E]&&(d[B[t[r+E]]++]=E);if(y=0===e?(D=P=d,19):1===e?(D=i,L-=257,P=s,M-=257,256):(D=a,P=o,-1),x=k,b=u,R=E=q=0,m=-1,g=(I=1<<(T=C))-1,1===e&&852<I||2===e&&592<I)return 1;for(;;){for(v=x-R,w=d[E]<y?(_=0,d[E]):d[E]>y?(_=P[M+d[E]],D[L+d[E]]):(_=96,0),p=1<<x-R,k=f=1<<T;c[b+(q>>R)+(f-=p)]=v<<24|_<<16|w,0!==f;);for(p=1<<x-1;q&p;)p>>=1;if(0!==p?(q&=p-1,q+=p):q=0,E++,0==--O[x]){if(x===A)break;x=t[r+d[E]]}if(C<x&&(q&g)!==m){for(0===R&&(R=C),b+=k,N=1<<(T=x-R);T+R<A&&!((N-=O[T+R])<=0);)T++,N<<=1;if(I+=1<<T,1===e&&852<I||2===e&&592<I)return 1;c[m=q&g]=C<<24|T<<16|b-u}}return 0!==q&&(c[b+q]=x-R<<24|64<<16),h.bits=C,0}},{"../utils/common":41}],51:[function(e,t,r){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(e,t,r){"use strict";var n=e("../utils/common");function i(e){for(var t=e.length;0<=--t;)e[t]=0}var s=256,a=286,o=30,l=15,c=16,u=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],d=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],h=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],p=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],f=new Array(576);i(f);var m=new Array(60);i(m);var g=new Array(512);i(g);var b=new Array(256);i(b);var y=new Array(29);i(y);var v,_,w,S=new Array(o);function x(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length}function E(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function k(e){return e<256?g[e]:g[256+(e>>>7)]}function A(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function C(e,t,r){e.bi_valid>c-r?(e.bi_buf|=t<<e.bi_valid&65535,A(e,e.bi_buf),e.bi_buf=t>>c-e.bi_valid,e.bi_valid+=r-c):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function T(e,t,r){C(e,r[2*t],r[2*t+1])}function R(e,t){for(var r=0;r|=1&e,e>>>=1,r<<=1,0<--t;);return r>>>1}function N(e,t,r){var n,i,s=new Array(l+1),a=0;for(n=1;n<=l;n++)s[n]=a=a+r[n-1]<<1;for(i=0;i<=t;i++){var o=e[2*i+1];0!==o&&(e[2*i]=R(s[o]++,o))}}function I(e){var t;for(t=0;t<a;t++)e.dyn_ltree[2*t]=0;for(t=0;t<o;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function q(e){8<e.bi_valid?A(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function D(e,t,r,n){var i=2*t,s=2*r;return e[i]<e[s]||e[i]===e[s]&&n[t]<=n[r]}function L(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&D(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!D(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n}function O(e,t,r){var n,i,a,o,l=0;if(0!==e.last_lit)for(;n=e.pending_buf[e.d_buf+2*l]<<8|e.pending_buf[e.d_buf+2*l+1],i=e.pending_buf[e.l_buf+l],l++,0===n?T(e,i,t):(T(e,(a=b[i])+s+1,t),0!==(o=u[a])&&C(e,i-=y[a],o),T(e,a=k(--n),r),0!==(o=d[a])&&C(e,n-=S[a],o)),l<e.last_lit;);T(e,256,t)}function B(e,t){var r,n,i,s=t.dyn_tree,a=t.stat_desc.static_tree,o=t.stat_desc.has_stree,c=t.stat_desc.elems,u=-1;for(e.heap_len=0,e.heap_max=573,r=0;r<c;r++)0!==s[2*r]?(e.heap[++e.heap_len]=u=r,e.depth[r]=0):s[2*r+1]=0;for(;e.heap_len<2;)s[2*(i=e.heap[++e.heap_len]=u<2?++u:0)]=1,e.depth[i]=0,e.opt_len--,o&&(e.static_len-=a[2*i+1]);for(t.max_code=u,r=e.heap_len>>1;1<=r;r--)L(e,s,r);for(i=c;r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],L(e,s,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,s[2*i]=s[2*r]+s[2*n],e.depth[i]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,s[2*r+1]=s[2*n+1]=i,e.heap[1]=i++,L(e,s,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,i,s,a,o,c=t.dyn_tree,u=t.max_code,d=t.stat_desc.static_tree,h=t.stat_desc.has_stree,p=t.stat_desc.extra_bits,f=t.stat_desc.extra_base,m=t.stat_desc.max_length,g=0;for(s=0;s<=l;s++)e.bl_count[s]=0;for(c[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<573;r++)m<(s=c[2*c[2*(n=e.heap[r])+1]+1]+1)&&(s=m,g++),c[2*n+1]=s,u<n||(e.bl_count[s]++,a=0,f<=n&&(a=p[n-f]),o=c[2*n],e.opt_len+=o*(s+a),h&&(e.static_len+=o*(d[2*n+1]+a)));if(0!==g){do{for(s=m-1;0===e.bl_count[s];)s--;e.bl_count[s]--,e.bl_count[s+1]+=2,e.bl_count[m]--,g-=2}while(0<g);for(s=m;0!==s;s--)for(n=e.bl_count[s];0!==n;)u<(i=e.heap[--r])||(c[2*i+1]!==s&&(e.opt_len+=(s-c[2*i+1])*c[2*i],c[2*i+1]=s),n--)}}(e,t),N(s,u,e.bl_count)}function P(e,t,r){var n,i,s=-1,a=t[1],o=0,l=7,c=4;for(0===a&&(l=138,c=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=t[2*(n+1)+1],++o<l&&i===a||(o<c?e.bl_tree[2*i]+=o:0!==i?(i!==s&&e.bl_tree[2*i]++,e.bl_tree[32]++):o<=10?e.bl_tree[34]++:e.bl_tree[36]++,s=i,c=(o=0)===a?(l=138,3):i===a?(l=6,3):(l=7,4))}function M(e,t,r){var n,i,s=-1,a=t[1],o=0,l=7,c=4;for(0===a&&(l=138,c=3),n=0;n<=r;n++)if(i=a,a=t[2*(n+1)+1],!(++o<l&&i===a)){if(o<c)for(;T(e,i,e.bl_tree),0!=--o;);else 0!==i?(i!==s&&(T(e,i,e.bl_tree),o--),T(e,16,e.bl_tree),C(e,o-3,2)):o<=10?(T(e,17,e.bl_tree),C(e,o-3,3)):(T(e,18,e.bl_tree),C(e,o-11,7));s=i,c=(o=0)===a?(l=138,3):i===a?(l=6,3):(l=7,4)}}i(S);var U=!1;function z(e,t,r,i){C(e,0+(i?1:0),3),function(e,t,r){q(e),A(e,r),A(e,~r),n.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r}(e,t,r)}r._tr_init=function(e){U||(function(){var e,t,r,n,i,s=new Array(l+1);for(n=r=0;n<28;n++)for(y[n]=r,e=0;e<1<<u[n];e++)b[r++]=n;for(b[r-1]=n,n=i=0;n<16;n++)for(S[n]=i,e=0;e<1<<d[n];e++)g[i++]=n;for(i>>=7;n<o;n++)for(S[n]=i<<7,e=0;e<1<<d[n]-7;e++)g[256+i++]=n;for(t=0;t<=l;t++)s[t]=0;for(e=0;e<=143;)f[2*e+1]=8,e++,s[8]++;for(;e<=255;)f[2*e+1]=9,e++,s[9]++;for(;e<=279;)f[2*e+1]=7,e++,s[7]++;for(;e<=287;)f[2*e+1]=8,e++,s[8]++;for(N(f,287,s),e=0;e<o;e++)m[2*e+1]=5,m[2*e]=R(e,5);v=new x(f,u,257,a,l),_=new x(m,d,0,o,l),w=new x(new Array(0),h,0,19,7)}(),U=!0),e.l_desc=new E(e.dyn_ltree,v),e.d_desc=new E(e.dyn_dtree,_),e.bl_desc=new E(e.bl_tree,w),e.bi_buf=0,e.bi_valid=0,I(e)},r._tr_stored_block=z,r._tr_flush_block=function(e,t,r,n){var i,a,o=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<s;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),B(e,e.l_desc),B(e,e.d_desc),o=function(e){var t;for(P(e,e.dyn_ltree,e.l_desc.max_code),P(e,e.dyn_dtree,e.d_desc.max_code),B(e,e.bl_desc),t=18;3<=t&&0===e.bl_tree[2*p[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(a=e.static_len+3+7>>>3)<=i&&(i=a)):i=a=r+5,r+4<=i&&-1!==t?z(e,t,r,n):4===e.strategy||a===i?(C(e,2+(n?1:0),3),O(e,f,m)):(C(e,4+(n?1:0),3),function(e,t,r,n){var i;for(C(e,t-257,5),C(e,r-1,5),C(e,n-4,4),i=0;i<n;i++)C(e,e.bl_tree[2*p[i]+1],3);M(e,e.dyn_ltree,t-1),M(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,o+1),O(e,e.dyn_ltree,e.dyn_dtree)),I(e),n&&q(e)},r._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(b[r]+s+1)]++,e.dyn_dtree[2*k(t)]++),e.last_lit===e.lit_bufsize-1},r._tr_align=function(e){C(e,2,3),T(e,256,f),function(e){16===e.bi_valid?(A(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):8<=e.bi_valid&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},{"../utils/common":41}],53:[function(e,t,r){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,n){(function(e){!function(e,t){"use strict";if(!e.setImmediate){var r,n,i,s,a=1,o={},l=!1,c=e.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(e);u=u&&u.setTimeout?u:e,r="[object process]"==={}.toString.call(e.process)?function(e){process.nextTick((function(){h(e)}))}:function(){if(e.postMessage&&!e.importScripts){var t=!0,r=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=r,t}}()?(s="setImmediate$"+Math.random()+"$",e.addEventListener?e.addEventListener("message",p,!1):e.attachEvent("onmessage",p),function(t){e.postMessage(s+t,"*")}):e.MessageChannel?((i=new MessageChannel).port1.onmessage=function(e){h(e.data)},function(e){i.port2.postMessage(e)}):c&&"onreadystatechange"in c.createElement("script")?(n=c.documentElement,function(e){var t=c.createElement("script");t.onreadystatechange=function(){h(e),t.onreadystatechange=null,n.removeChild(t),t=null},n.appendChild(t)}):function(e){setTimeout(h,0,e)},u.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var i={callback:e,args:t};return o[a]=i,r(a),a++},u.clearImmediate=d}function d(e){delete o[e]}function h(e){if(l)setTimeout(h,0,e);else{var r=o[e];if(r){l=!0;try{!function(e){var r=e.callback,n=e.args;switch(n.length){case 0:r();break;case 1:r(n[0]);break;case 2:r(n[0],n[1]);break;case 3:r(n[0],n[1],n[2]);break;default:r.apply(t,n)}}(r)}finally{d(e),l=!1}}}}function p(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(s)&&h(+t.data.slice(s.length))}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[10])(10)},199:(e,t,r)=>{"use strict";r.a(e,(async(e,t)=>{try{var n=r(235),i=r(710),s=r.n(i),a=r(137),o=r(83),l=r(776),c=r(129),u=r(602),d=function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function a(e){try{l(n.next(e))}catch(e){s(e)}}function o(e){try{l(n.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,o)}l((n=n.apply(e,t||[])).next())}))};let h=null,p=null,f=null,m=null;const g=`${c.Ay}/interactions`,b=`${c.Ay}/generate_presigned_post`,y={};function v(e){return d(this,void 0,void 0,(function*(){if(null===e||""===e)return"";try{const t=performance.now(),r="https://www.amazon.com"+e,n=yield fetch(r),i=yield n.text(),s=performance.now();console.log(`Execution Time of fetch: ${s-t} ms`);const o=(new l.S4).parseFromString(i),c=o.querySelector("html"),{defaultView:u}=o,{Event:d,CustomEvent:h,HTMLElement:p,customElements:f}=u,m=((0,a.c5)(c,r,o,u),(0,a.sZ)(c,o)),g=performance.now();return console.log(`Execution Time of processing: ${g-s} ms`),m}catch(e){return console.error("Error fetching cart information:"+e),""}}))}const _=await(0,u.P2)("userInteractions",1,{upgrade(e){if(!e.objectStoreNames.contains("interactions")){const t=e.createObjectStore("interactions",{keyPath:"id",autoIncrement:!0});t.createIndex("timestamp","timestamp",{unique:!1}),t.createIndex("uuid","uuid",{unique:!0}),t.createIndex("uploaded","uploaded",{unique:!1}),console.log("Database interactions initialized")}if(!e.objectStoreNames.contains("screenshots")){const t=e.createObjectStore("screenshots",{keyPath:"id",autoIncrement:!0});t.createIndex("timestamp","timestamp",{unique:!1}),t.createIndex("uuid","uuid",{unique:!0}),t.createIndex("uploaded","uploaded",{unique:!1}),console.log("Database screenshots initialized")}if(!e.objectStoreNames.contains("reasonsAnnotation")){const t=e.createObjectStore("reasonsAnnotation",{keyPath:"id",autoIncrement:!0});t.createIndex("timestamp","timestamp",{unique:!1}),t.createIndex("uuid","uuid",{unique:!0}),t.createIndex("uploaded","uploaded",{unique:!1}),console.log("Database reasonsAnnotation initialized")}if(!e.objectStoreNames.contains("htmlSnapshots")){const t=e.createObjectStore("htmlSnapshots",{keyPath:"id",autoIncrement:!0});t.createIndex("timestamp","timestamp",{unique:!1}),t.createIndex("uuid","uuid",{unique:!0}),t.createIndex("uploaded","uploaded",{unique:!1}),console.log("Database htmlSnapshots initialized")}if(!e.objectStoreNames.contains("order")){const t=e.createObjectStore("order",{keyPath:"id",autoIncrement:!0});t.createIndex("timestamp","timestamp",{unique:!0}),t.createIndex("uploaded","uploaded",{unique:!1}),console.log("Database order initialized")}}});function w(e,t){y[e]||(y[e]={backStack:[],forwardStack:[],currentUrl:null});const r=y[e];return r.currentUrl?r.currentUrl===t?"reload":r.backStack.length>0&&r.backStack[r.backStack.length-1]===t?(r.forwardStack.push(r.currentUrl),r.currentUrl=r.backStack.pop(),"back"):r.forwardStack.length>0&&r.forwardStack[r.forwardStack.length-1]===t?(r.backStack.push(r.currentUrl),r.currentUrl=r.forwardStack.pop(),"forward"):(r.backStack.push(r.currentUrl),r.forwardStack=[],r.currentUrl=t,"new"):(r.currentUrl=t,"new")}function S(e,t,r){return d(this,void 0,void 0,(function*(){if(e){const n={screenshotId:`screenshot_${t}_${r}`,dataUrl:e,timestamp:t,uuid:r};return yield _.add("screenshots",Object.assign(Object.assign({},n),{uploaded:0})),!0}return!1}))}function x(){return d(this,void 0,void 0,(function*(){try{const[e]=yield chrome.tabs.query({active:!0,currentWindow:!0});if(e)return yield chrome.tabs.captureVisibleTab(e.windowId,{format:"jpeg",quality:25})}catch(e){console.error("Error capturing screenshot:",e)}return null}))}function E(e){let t=0;for(let r=0;r<e.length;r++)t=(t<<5)-t+e.charCodeAt(r),t|=0;return console.log("Hash value before return:",t),t.toString()}chrome.runtime.onMessage.addListener(((e,t,r)=>(d(void 0,void 0,void 0,(function*(){var n;if("saveData"===e.action){try{const i=e.data.uuid,s={htmlSnapshotId:e.data.htmlSnapshotId,htmlContent:e.data.htmlContent,simplifiedHTML:e.data.simplifiedHTML,timestamp:e.data.timestamp,uuid:i},a=e.data.fetchUrl||"";delete e.data.htmlContent,delete e.data.simplifiedHTML,delete e.data.fetchUrl;const o=()=>d(void 0,void 0,void 0,(function*(){console.log("saveData ",e.data.eventType),console.log(a),""!==a&&v(a).then((t=>{const r={url:a,timestamp:e.data.timestamp,metadata:JSON.stringify(t,null,2)};console.log(r)})),yield _.add("interactions",Object.assign(Object.assign({},e.data),{uploaded:0}))}));yield Promise.all([o(),k(s.htmlContent,s.simplifiedHTML,s.htmlSnapshotId,s.timestamp,s.uuid),T(null===(n=t.tab)||void 0===n?void 0:n.id,e.data.timestamp,e.data.eventType,e.data,i)]),r({success:!0})}catch(e){console.error("Error in saveData:",e),r({success:!1,error:e.message})}return!0}if("saveOrder"===e.action){try{if(console.log("saveOrder",e.data),"object"==typeof e.data)yield _.add("order",Object.assign(Object.assign({},e.data),{uploaded:0}));else if(Array.isArray(e.data))if(e.data.length>0){const t=_.transaction("order","readwrite"),r=t.objectStore("order");yield Promise.all([...e.data.map((e=>r.add(e))),t.done])}else console.error("Invalid data format for saveOrder:",e.data),r({success:!1,error:"Invalid data format for saveOrder"});r({success:!0})}catch(e){console.error("Error in saveOrder:",e),r({success:!1,error:e.message})}return!0}if("captureScreenshot"===e.action){try{console.log("get screenshot request"),(new Date).getTime();const t=yield x();if(t){const n=yield S(t,e.timestamp,e.uuid);console.log("save screenshot success",n),r({success:n,message:n?void 0:"Failed to capture screenshot"})}else r({success:!1,message:"Failed to capture screenshot"})}catch(e){console.error("Error in captureScreenshot:",e),r({success:!1,message:"Failed to capture screenshot"})}return!0}if("downloadData"===e.action){try{console.log("downloadData");const e=yield R();r({success:e})}catch(e){console.error("Error handling download:",e),r({success:!1,error:e.message})}return!0}if("clearMemoryCache"===e.action){try{const e=_.transaction(["interactions","htmlSnapshots","order","screenshots","reasonsAnnotation"],"readwrite"),t=[];t.push(e.objectStore("interactions").clear()),t.push(e.objectStore("htmlSnapshots").clear()),t.push(e.objectStore("order").clear()),t.push(e.objectStore("screenshots").clear()),t.push(e.objectStore("reasonsAnnotation").clear()),t.push(e.done),yield Promise.all(t),r({success:!0})}catch(e){console.error("Error handling clearMemoryCache:",e),r({success:!1,error:e.message})}return!0}})),!0)));const k=(e,t,r,n,i)=>d(void 0,void 0,void 0,(function*(){yield _.add("htmlSnapshots",{htmlSnapshotId:r,htmlContent:e,simplifiedHTML:t,timestamp:n,uuid:i,uploaded:0})})),A=(e,t,r,n,i,s=null,a=null,o=null)=>d(void 0,void 0,void 0,(function*(){const l={eventType:e,timestamp:t,target_url:r,htmlSnapshotId:n,uuid:i,pageMeta:a,windowSize:o};s&&(l.navigationType=s),yield _.add("interactions",Object.assign(Object.assign({},l),{uploaded:0}))})),C=(e,t,r)=>d(void 0,void 0,void 0,(function*(){try{const n=yield chrome.tabs.captureVisibleTab(e,{format:"jpeg",quality:25});yield S(n,t,r)}catch(e){console.error("Error in saveScreenshot:",e)}})),T=(e,t,r,n,i)=>d(void 0,void 0,void 0,(function*(){var s,o,l,u;if((null===(o=null===(s=n.target)||void 0===s?void 0:s.id)||void 0===o?void 0:o.toLowerCase().includes("rufus"))||(null===(u=null===(l=n.target)||void 0===l?void 0:l.className)||void 0===u?void 0:u.toLowerCase().includes("rufus")))return;const{question:d,placeholder:h}=(0,a.ii)(r,n);let p=c.FI;switch(r){case"scroll":p=c.Lm;break;case"click":case"click_a":case"click_b":case"click_c":p=c.sG;break;case"navigation":p=c.WG;break;case"tabActivate":p=c.WI}if(Math.random()<p&&e){console.log("send popup");try{const n=yield chrome.tabs.sendMessage(e,{action:"show_popup",question:d,placeholder:h});if(console.log("reason",n),n&&null!==n.input&&!1!==n.success){const e={uuid:i,timestamp:t,eventType:r,reason:n.input};yield _.add("reasonsAnnotation",Object.assign(Object.assign({},e),{uploaded:0}))}}catch(e){console.error("Error popup:",e)}}}));function R(){return d(this,void 0,void 0,(function*(){try{const e=(new Date).toISOString().replace(/[:.]/g,"-");let t=(yield chrome.storage.local.get({userId:""})).userId||"unknown";const r=`${c.xe}/USER/${t}/data_${e}`,n=yield _.getAll("interactions"),i=yield _.getAll("htmlSnapshots"),a=yield _.getAll("order"),o=yield _.getAll("screenshots"),l=yield _.getAll("reasonsAnnotation");console.log("downloading zip file");const u=new(s());u.file(`order_info/order_info_${e}.txt`,`Session data for timestamp: ${e}\n        \n user id: ${t}\n              \n order details:\n              \n ${JSON.stringify(a)}`);const d={interactions:n,reasons:l,orderDetails:a},h=JSON.stringify(d,null,2);u.file(`interactions/interactions_${e}.json`,h);const p=u.folder("screenshots");for(const e of o){const t=yield fetch(e.dataUrl),r=yield t.blob();p.file(e.screenshotId.replace(/[:.]/g,"-")+".jpg",r)}const f=u.folder("htmlSnapshots");for(const e of i)f.file(e.htmlSnapshotId+".html",e.htmlContent),e.simplifiedHTML&&f.file("simplified_"+e.htmlSnapshotId+".html",e.simplifiedHTML);const m=yield u.generateAsync({type:"blob"});console.log("ZIP file generated");const g=new FileReader;g.onloadend=function(){const e=g.result.split(",")[1];chrome.downloads.download({url:"data:application/zip;base64,"+e,filename:`${r}.zip`,saveAs:!1})},g.readAsDataURL(m);const b=_.transaction(["interactions","htmlSnapshots","order","screenshots","reasonsAnnotation"],"readwrite"),y=[];return n.forEach((e=>{y.push(b.objectStore("interactions").delete(e.id))})),i.forEach((e=>{y.push(b.objectStore("htmlSnapshots").delete(e.id))})),a.forEach((e=>{y.push(b.objectStore("order").delete(e.id))})),o.forEach((e=>{y.push(b.objectStore("screenshots").delete(e.id))})),l.forEach((e=>{y.push(b.objectStore("reasonsAnnotation").delete(e.id))})),y.push(b.done),yield Promise.all(y),!0}catch(e){return console.error("Error download data:",e),!1}}))}function N(e){const t=new FormData;return t.append("key",e),Object.keys(m.fields).forEach((e=>{"key"!=e&&t.append(e,m.fields[e])})),t}chrome.tabs.onActivated.addListener((e=>d(void 0,void 0,void 0,(function*(){try{const t=e.tabId,r=yield chrome.tabs.get(t);if(!r)return void console.error(`Failed to get tab with ID: ${t}`);if(console.log(`Switched to tab ${t} with URL: ${r.url}`),(0,a.Ez)(r.url),r.url&&!(yield(0,a.Ip)(r.url))){const e=(new Date).toISOString(),i=(0,n.A)(),s=`html_${E(r.url)}_${e}_${i}`;yield new Promise((e=>setTimeout(e,100))),chrome.tabs.sendMessage(t,{action:"getHTML"},(n=>d(void 0,void 0,void 0,(function*(){const a=null==n?void 0:n.html,o=null==n?void 0:n.simplifiedHTML,l=null==n?void 0:n.pageMeta,c=null==n?void 0:n.windowSize;yield Promise.all([k(a,o,s,e,i),A("tabActivate",e,r.url,s,i,null,l,c),C(r.windowId,e,i)]),yield new Promise((r=>T(t,e,"tabActivate",{},i)))}))))}}catch(e){console.error("Error in tab activate handler:",e)}})))),chrome.webNavigation.onDOMContentLoaded.addListener((e=>d(void 0,void 0,void 0,(function*(){if(0===e.frameId&&(console.log("webNavigation onDOMContentLoaded event triggered:",e),(0,a.Ez)(e.url),!(yield(0,a.Ip)(e.url)))){const t=w(e.tabId,e.url);console.log(`Navigation type: ${t} for tab ${e.tabId} to ${e.url}`);const r=(new Date).toISOString(),i=(0,n.A)();chrome.tabs.sendMessage(e.tabId,{action:"getHTML"},(n=>d(void 0,void 0,void 0,(function*(){const s=null==n?void 0:n.html,a=null==n?void 0:n.simplifiedHTML,o=null==n?void 0:n.pageMeta,l=null==n?void 0:n.windowSize,c=`html_${E(e.url)}_${r}_${i}`;yield Promise.all([k(s,a,c,r,i),A("navigation",r,e.url,c,i,t,o,l),C((yield chrome.tabs.get(e.tabId)).windowId,r,i)]),"new"!==t&&"reload"!==t&&(console.log("send message to popup navigation"),yield T(e.tabId,r,"navigation",{navigationType:t},i))}))))}})))),chrome.tabs.onRemoved.addListener((e=>{delete y[e]}));const I=o.A.create({baseURL:c.Ay});function q(e){return d(this,void 0,void 0,(function*(){const t=new CompressionStream("gzip"),r=t.writable.getWriter(),n=(new TextEncoder).encode(e);return r.write(n),r.close(),yield new Response(t.readable).blob()}))}function D(){h||(console.log("startPeriodicUpload"),h=setInterval(L,1e4))}function L(){var e;return d(this,void 0,void 0,(function*(){h&&(clearInterval(h),h=!1);try{const t=yield chrome.storage.local.get({lastuploadTimestamp:null});f=t.lastuploadTimestamp||null;const r=(new Date).toISOString(),n=yield chrome.storage.local.get({user_interaction_tracker_last_timestamp:null});p=n.user_interaction_tracker_last_timestamp||null,p&&console.log("lastTimestamp restored: ",p);const i=p||r.replace(/[:.]/g,"-");yield chrome.storage.local.set({user_interaction_tracker_last_timestamp:i});const s=(yield chrome.storage.local.get({userId:""})).userId||"unknown",a=`${c.xe}/USER/${s}`,o=_.transaction(["interactions","htmlSnapshots","order","screenshots","reasonsAnnotation"],"readonly"),l=yield o.objectStore("interactions").index("uploaded").getAll(IDBKeyRange.only(0)),u=yield o.objectStore("htmlSnapshots").index("uploaded").getAll(IDBKeyRange.only(0)),h=yield o.objectStore("order").index("uploaded").getAll(IDBKeyRange.only(0)),y=yield o.objectStore("screenshots").index("uploaded").getAll(IDBKeyRange.only(0)),v=yield o.objectStore("reasonsAnnotation").index("uploaded").getAll(IDBKeyRange.only(0));if(0===l.length)return console.log("No interactions to upload"),D(),!1;const w={interactions:l,reasons:v,orderDetails:h};if(!m||(null==m?void 0:m.expire_timestamp)<Date.now()/1e3||!(null===(e=null==m?void 0:m.fields)||void 0===e?void 0:e.key.includes(s))){console.log("Getting new presigned post URL");let e=yield I.get(`${b}`,{params:{user_id:s}});m=e.data,console.log("New presigned post URL received",(null==m?void 0:m.expire_timestamp)-Date.now()/1e3)}try{const e=`Session data for timestamp: ${i}\n                                  \n user id: ${s}\n                                  \n order details:\n                                  \n ${JSON.stringify(h)}`,t=new Blob([e],{type:"text/plain"}),r=N(`${a}/order_info/order_info_${i}.txt`);r.append("file",t),console.log("Uploading session info");const n=I.post(m.url,r);console.log("Uploading HTML snapshots");const o=u.map((e=>d(this,void 0,void 0,(function*(){const t=yield q(e.htmlContent);let r=[],n=N(`${a}/html/${e.htmlSnapshotId}.html.gz`);if(n.append("file",t),r.push(I.post(m.url,n)),e.simplifiedHTML){const t=yield q(e.simplifiedHTML),n=N(`${a}/html/simplified${e.htmlSnapshotId}.html.gz`);n.append("file",t),r.push(I.post(m.url,n))}return Promise.all(r)}))));console.log("Uploading screenshots");const l=y.map((e=>d(this,void 0,void 0,(function*(){const t=yield fetch(e.dataUrl),r=yield t.blob(),n=N(`${a}/screenshots/${e.screenshotId.replace(/[:.]/g,"-")}.jpg`);return n.append("file",r),I.post(m.url,n)}))));console.log("Uploading interactions");const c=JSON.stringify(w),p=new Blob([c],{type:"application/json"}),f=N(`${a}/interactions/interactions_${i}.json`);f.append("file",p);const b=I.post(m.url,f),v=I.post(g,c,{headers:{Accept:"application/json","Content-Type":"application/json"},params:{user_id:s}});yield Promise.all([n,...o,...l,b,v])}catch(e){return D(),console.error("Error uploading data:",e),!1}if(s.includes(c.Cv)){const e=_.transaction(["interactions","htmlSnapshots","order","screenshots","reasonsAnnotation"],"readwrite"),t=[];l.forEach((r=>{r.uploaded=1,t.push(e.objectStore("interactions").put(r))})),u.forEach((r=>{r.uploaded=1,t.push(e.objectStore("htmlSnapshots").put(r))})),h.forEach((r=>{r.uploaded=1,t.push(e.objectStore("order").put(r))})),y.forEach((r=>{r.uploaded=1,t.push(e.objectStore("screenshots").put(r))})),v.forEach((r=>{r.uploaded=1,t.push(e.objectStore("reasonsAnnotation").put(r))})),t.push(e.done),yield Promise.all(t),p=null,f=r,yield chrome.storage.local.set({lastuploadTimestamp:f}),chrome.storage.local.remove("user_interaction_tracker_last_timestamp")}else{const e=_.transaction(["interactions","htmlSnapshots","order","screenshots","reasonsAnnotation"],"readwrite"),t=[];l.forEach((r=>{t.push(e.objectStore("interactions").delete(r.id))})),u.forEach((r=>{t.push(e.objectStore("htmlSnapshots").delete(r.id))})),h.forEach((r=>{t.push(e.objectStore("order").delete(r.id))})),y.forEach((r=>{t.push(e.objectStore("screenshots").delete(r.id))})),v.forEach((r=>{t.push(e.objectStore("reasonsAnnotation").delete(r.id))})),t.push(e.done),yield Promise.all(t),p=null,f=r,yield chrome.storage.local.set({lastuploadTimestamp:f}),chrome.storage.local.remove("user_interaction_tracker_last_timestamp")}return D(),!0}catch(e){return D(),console.error("Error uploading data:",e),!1}}))}null==h&&(console.log("--initializing interval--"),D()),chrome.storage.local.onChanged.addListener((e=>{e.userId&&chrome.tabs.query({active:!0,currentWindow:!0},(e=>{var t;const r=null===(t=e[0])||void 0===t?void 0:t.url;(0,a.Ez)(r)}))}));let O=!1;chrome.tabs.onUpdated.addListener(((e,t,r)=>d(void 0,void 0,void 0,(function*(){if(console.log("onUpdated"),"complete"===t.status&&!(yield(0,a.Ip)(r.url))&&!O){O=!0,console.log("send reminder");const t=(yield chrome.storage.local.get({userId:""})).userId,r=yield fetch(`${c.$M}?user_id=${t}`,{method:"GET"});if(r.ok){const t=yield r.json();chrome.tabs.sendMessage(e,{action:"showReminder",data:t})}console.log("send finished")}})))),t()}catch(B){t(B)}}),1)},129:(e,t,r)=>{"use strict";r.d(t,{$M:()=>h,Ay:()=>c,Cv:()=>u,FI:()=>n,Lm:()=>i,WG:()=>a,WI:()=>o,Wd:()=>d,sG:()=>s,x2:()=>p,xe:()=>l});const n=.15,i=.1,s=.2,a=.15,o=.15,l="user_interaction_data",c="http://userdatacollect.hailab.io",u="hailab",d=["www.amazon.com"],h=`${c}/rationale_status`,p=["https://www.amazon.com/checkout/","https://www.amazon.com/gp/buy/","https://www.amazon.com/a/addresses","https://www.amazon.com/cpe/yourpayments/","https://www.amazon.com/ap/signin","https://www.amazon.com/ap/cvf/","https://www.amazon.com/ap/profile/","https://www.amazon.com/ax/account/","https://www.amazon.com/gp/product/handle-buy-box/","https://www.amazon.com/gp/checkoutportal/","https://www.amazon.com/gp/cart/desktop/","https://www.amazon.com/gp/primecentral/editPaymentPreference"]},828:(e,t,r)=>{"use strict";r.d(t,{_e:()=>f});const n={selector:"#navbar-main",name:"nav_bar",children:[{selector:"#nav-search-bar-form",children:[{selector:"input#twotabsearchtextbox",name:"search_input",clickable:!0,generate_metadata:e=>({name:"search_term",data:{term:null==e?void 0:e.value}})},{selector:"#nav-search-submit-button",clickable:!0,name:"search_button"}]},{selector:"#nav-link-accountList",text_selector:"#nav-link-accountList span.nav-line-2",add_text:!0,clickable:!0,name:"account_and_list_button"},{selector:"#nav-orders",add_text:!0,clickable:!0,name:"order_button"},{selector:"#nav-cart",text_selector:"#nav-cart .nav-line-2",add_text:!0,clickable:!0,name:"cart_button"},{selector:"#nav-flyout-searchAjax",name:"suggested_terms",children:[{selector:"div.s-suggestion-ellipsis-direction",name:"from_text",add_text:!0,clickable:!0}]}]},i={selector:"#nav-flyout-ewc",name:"cart_side_bar",children:[{selector:"div.ewc-cart-header",add_text:!0},{selector:"div.ewc-compact-actions a",add_text:!0,clickable:!0,name:"go_to_cart"},{selector:"#ewc-compact-body ul",name:"product_list",children:[{selector:"li div[id^='sc-item']",name:"from_text",text_js:e=>{const t=e.querySelector("div.ewc-item-image a.sc-product-link img:not(.ewc-sfl-image-small)");return(null==t?void 0:t.alt)||""},children:[{selector:"div.ewc-item-image a.sc-product-link img:not(.ewc-sfl-image-small)",name:"product_image",clickable:!0,add_text:!0,text_format:"Product Image"},{selector:"span.ewc-unit-price",add_text:!0},{selector:"select",name:"drop_down_list"},{selector:'div[data-action="a-dropdown-button"], span[data-action="a-dropdown-button"]',name:"drop_down_list",clickable:!0,add_text:!0},{selector:"div.ewc-delete-icon-container button",name:"delete",add_text:!0,text_format:"delete",clickable:!0}],generate_metadata:e=>{var t;const r=e.getAttribute("data-asin"),n=e.querySelector("span.ewc-unit-price"),i=null===(t=null==n?void 0:n.innerText)||void 0===t?void 0:t.replace(/[\n]/g,"").trim(),s=e.querySelector("div.ewc-item-image a.sc-product-link img:not(.ewc-sfl-image-small)"),a=null==s?void 0:s.alt,o=null==s?void 0:s.parentElement,l=null==o?void 0:o.getAttribute("href"),c=e.querySelector('div[data-action="a-dropdown-button"], span[data-action="a-dropdown-button"]');return{name:"cart_items",data:{title:a,asin:r,price:i,url:l,quantity:null==c?void 0:c.innerText}}}}]}]},s={selector:"#productFactsDesktopExpander",add_text:!0,class:"product-facts"},a={selector:"div.mir-layout-DELIVERY_BLOCK-slot-PRIMARY_DELIVERY_MESSAGE_LARGE",add_text:!0,class:"product-delivery"},o={selector:'#selectQuantity, div[id^="qs-widget-button-container-atfc"]',name:"quantity_selector",children:[{selector:"label",add_text:!0},{selector:"span.a-dropdown-prompt",add_text:!0,generate_metadata:e=>({name:"product_quantity",data:{quantity:e.innerText}})},{selector:"select",name:"drop_down_list"},{selector:"button",name:"drop_down_list",clickable:!0,add_text:!0},{selector:'div.qs-widget-dropdown-wrapper span[data-action="qs-widget-dropdown-decl"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text",text_format:"Drop Down Option {}"}]},l={selector:"input[name='submit.add-to-cart'], input[name='submit.add-to-cart-ubb'], #freshAddToCartButton input",add_text:!0,clickable:!0,name:"add_to_cart",class:"product-add-to-cart"},c={selector:"input[name='submit.buy-now']",add_text:!0,clickable:!0,name:"buy_now",class:"product-buy-now"},u={selector:"#buyBoxAccordion > div.a-box.celwidget",name:"from_text",text_selector:"div.accordion-caption > span",children:[{selector:"div[data-csa-c-content-id='offer_display_desktop_accordion_header'], div[data-csa-c-content-id='offer_display_mobile_accordion_header']",name:"accordion_selector",add_text:!0,clickable:!0,text_selector:"h5 span.a-text-bold"},{selector:"div.a-accordion-inner.accordion-row-content",name:"purchase_form",children:[s,a,o,{selector:"#replenishmentFrequency_feature_div",name:"delivery_frequency_selector",text_selector:"div.a-section.a-spacing-micro > span",add_text:!0,children:[{selector:"#rcxOrdFreqOnmlWrapper span.a-dropdown-prompt",add_text:!0},{selector:"#rcxOrdFreqOnmlWrapper select",name:"drop_down_list"}]},{selector:"#rcx-subscribe-submit-button-announce",add_text:!0,clickable:!0,name:"set_up_now",class:"product-set-up-now"},l,c]}]},d={selector:"#gsod_singleOfferDisplay_Desktop",children:[{selector:"#addToCart",name:"purchase_form",children:[s,a,o,l,c]}]},h=[n,{selector:"#sc-collapsed-carts-container",name:"cart",children:[{selector:"div.sc-localmarket-text-logo",add_text:!0},{selector:'div[data-name="collapsed_item_list"]',clickable:!0,name:"item_list"},{selector:'div.sc-buy-box-inner-box input[name^="proceedToALMCheckout"]',clickable:!0,name:"check_out",add_text:!0},{selector:"div.sc-buy-box-inner-box a",clickable:!0,name:"from_text",add_text:!0}]},{selector:"div[data-name='Active Items']",name:"active_item_list",children:[{selector:"div.sc-list-item-content",text_selector:"div.sc-item-content-group ul > li > span.a-list-item > a.sc-product-title span.a-truncate-full",name:"from_text",children:[{selector:"div.sc-item-check-checkbox-selector label",clickable:!0,name:"checkbox"},{selector:"div.sc-image-wrapper a",clickable:!0,name:"product_image",add_text:!0,text_format:"Product Image"},{selector:"div.sc-item-content-group ul > li > span.a-list-item > a.sc-product-title",clickable:!0,text_selector:"span.a-truncate-full",add_text:!0,name:"product_detail"},{selector:"li.sc-delivery-messaging",add_text:!0},{selector:"div.sc-badge-price-to-pay span.sc-product-price span:not(.a-offscreen)",add_text:!0},{selector:"li.sc-product-variation",add_text:!0},{selector:"div.sc-item-content-group span.sc-quantity-stepper",children:[{selector:"button[aria-label='Decrease quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div[role='spinbutton']",add_text:!0,text_format:"Current Quantity: {}"},{selector:"button[aria-label='Increase quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]},{selector:"div.sc-item-content-group input[data-action='delete']",add_text:!0,clickable:!0,name:"delete"},{selector:"div.sc-item-content-group input[data-action='save-for-later']",add_text:!0,clickable:!0,name:"save_for_later"}],generate_metadata:e=>{var t,r;const n=null===(t=e.parentElement)||void 0===t?void 0:t.getAttribute("data-asin"),i=e.querySelector("div.sc-badge-price-to-pay span.sc-product-price span:not(.a-offscreen)"),s=null===(r=null==i?void 0:i.innerText)||void 0===r?void 0:r.replace(/[\n]/g,""),a=e.querySelector("div.sc-item-content-group ul > li > span.a-list-item > a.sc-product-title span.a-truncate-full"),o=null==a?void 0:a.innerText,l=e.querySelector("div.sc-item-content-group ul > li > span.a-list-item > a.sc-product-title"),c=null==l?void 0:l.getAttribute("href"),u=e.querySelector("li.sc-delivery-messaging"),d=null==u?void 0:u.innerText.replace(/[\n]/g," "),h=e.querySelector("div.sc-item-content-group span.sc-quantity-stepper div[role='spinbutton']"),p=null==h?void 0:h.innerText,f=e.querySelector("div.sc-item-check-checkbox-selector input"),m=null!==(null==f?void 0:f.getAttribute("checked")),g=e.querySelectorAll("li.sc-product-variation > span"),b=[];for(const e of g){const t=null==e?void 0:e.querySelector("span.a-text-bold"),r=null==e?void 0:e.querySelector("span:not(.a-text-bold)"),n=null==t?void 0:t.innerText.replace(/[:\n]/g,"").trim(),i=null==r?void 0:r.innerText.replace(/[:\n]/g,"").trim(),s={[n]:i};b.push(s)}return{name:"active_items",data:{title:o,asin:n,price:s,url:c,delivery:d,quantity:p,selected:m,options:b}}}}]},{selector:"#sc-buy-box-ptc-button input",add_text:!0,clickable:!0,name:"check_out"}],p={selector:'li.a-carousel-card, div[id^="gridElement"]',name:"from_text",text_selector:"span.a-truncate-full",children:[{selector:"a:has(div.a-image-container)",name:"product_image",add_text:!0,text_format:"Product Image",clickable:!0},{selector:"span[id^='qs-widget-atc-button']",name:"add_to_cart",add_text:!0,text_format:"Add To Cart",clickable:!0},{selector:'div[id^="qs-widget-button-container-atfc"]',name:"quantity_selector",children:[{selector:"input[aria-label^='Remove']",add_text:!0,text_format:"Decrease quantity by 1",name:"from_text",clickable:!0},{selector:"button[id^='qs-widget-button-atfc']",add_text:!0},{selector:"input[aria-label^='Add']",add_text:!0,text_format:"Increase quantity by 1",name:"from_text",clickable:!0}]},{selector:"a > span > span > span.a-truncate-full",add_text:!0,name:"product_detail",clickable:!0},{selector:"div > span > span > span.a-truncate-full",add_text:!0},{selector:'div[class*="priceToPay"] span.a-offscreen',add_text:!0},{selector:"li.a-carousel-card a.a-size-mini",name:"from_text",clickable:!0,add_text:!0}],generate_metadata:e=>{var t,r;const n=e.querySelector('div[data-csa-c-item-id^="amzn1.asin"]'),i=null===(t=null==n?void 0:n.getAttribute("data-csa-c-item-id"))||void 0===t?void 0:t.split(":")[0].split(".").pop(),s=e.querySelector('div[class*="priceToPay"] span.a-offscreen'),a=null===(r=null==s?void 0:s.innerText)||void 0===r?void 0:r.replace(/[\n]/g,""),o=e.querySelector("span.a-truncate-full"),l=null==o?void 0:o.innerText,c=e.querySelector("a:has(span.a-truncate-full)"),u=null==c?void 0:c.getAttribute("href"),d=e.querySelector('div[id^="qs-widget-button-container-atfc"] button[id^="qs-widget-button-atfc"]');return{name:"promotion_items",data:{title:l,asin:i,price:a,url:u,quantity:null==d?void 0:d.innerText}}}},f=[{match:"/",match_method:"url",match_with_ref:!0,selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,i]}]},{match:"/fmc/storefront",match_method:"url",match_with_ref:!0,selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,i]}]},{match:"/s",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,i,{selector:"#s-refinements",name:"refinements",children:[{selector:"#topRefinements\\/0",name:"top_refinements",add_text:"true",text_format:"Recently used filters",children:[{selector:"li",add_text:!0,name:"from_text",clickable:!0,text_js:function(e){try{let t="";if(!e)return t;const r=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())t+=e.innerText.trim(),r&&r.hasAttribute("title")&&(t+=" ",t+=r.getAttribute("title"));else{const r=e.querySelector("a.a-link-normal.s-navigation-item");r&&r.hasAttribute("title")&&(t+=r.getAttribute("title"))}return t}catch(e){return console.log(e),""}},children:[{selector:"input[type='checkbox']"}]}]},{selector:"div.a-section.a-spacing-none:not(:has(#n-title)):has(span.a-size-base.a-color-base.puis-bold-weight-text):has(ul span.a-declarative > span > li):not(#reviewsRefinements):not(#departments):not(#priceRefinements):not(#filters)",name:"from_text",text_selector:"span.a-size-base.a-color-base.puis-bold-weight-text",children:[{selector:"span.a-size-base.a-color-base.puis-bold-weight-text",add_text:!0,class:"refinement-title"},{selector:"a.s-navigation-clear-link",add_text:!0,name:"clear_selection",clickable:!0},{selector:"ul > span.a-declarative > span > li:has(a.a-link-normal.s-navigation-item)",add_text:!0,name:"from_text",clickable:!0,direct_child:!0,text_js:function(e){try{let t="";if(!e)return t;const r=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())t+=e.innerText.trim(),r&&r.hasAttribute("title")&&(t+=" ",t+=r.getAttribute("title"));else{const r=e.querySelector("a.a-link-normal.s-navigation-item");r&&r.hasAttribute("title")&&(t+=r.getAttribute("title"))}return r&&r.getAttribute("aria-current"),t}catch(e){return console.log(e),""}},generate_metadata:e=>{var t,r,n;let i="";const s=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())i+=e.innerText.trim(),s&&s.hasAttribute("title")&&(i+="_",i+=s.getAttribute("title"));else{const t=e.querySelector("a.a-link-normal.s-navigation-item");t&&t.hasAttribute("title")&&(i+=t.getAttribute("title"))}const a=null===(r=null===(t=e.closest("ul"))||void 0===t?void 0:t.parentElement)||void 0===r?void 0:r.firstElementChild,o=null===(n=null==a?void 0:a.innerText)||void 0===n?void 0:n.replace(/[ ]/g,"_").toLowerCase().trim();let l="";return s&&s.hasAttribute("href")&&(l=s.getAttribute("href")),s&&"true"===s.getAttribute("aria-current")?{name:"refinements."+o,data:{title:(null==i?void 0:i.trim())||"",selected:!0,url:l}}:{name:"refinements."+o,data:{title:(null==i?void 0:i.trim())||"",selected:!1,url:l}}},children:[{selector:"input[type='checkbox']"}]},{selector:"ul > span.a-declarative > li > span > div[data-a-expander-name='filter-content-expander']",name:"more_options",children:[{selector:"a[data-csa-c-func-deps='aui-da-a-expander-toggle']",name:"toggle_expansion",add_text:!0},{selector:"li",add_text:!0,name:"from_text",clickable:!0,text_js:function(e){try{let t="";if(!e)return t;const r=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())t+=e.innerText.trim(),r&&r.hasAttribute("title")&&(t+=" ",t+=r.getAttribute("title"));else{const r=e.querySelector("a.a-link-normal.s-navigation-item");r&&r.hasAttribute("title")&&(t+=r.getAttribute("title"))}return r&&r.getAttribute("aria-current"),t}catch(e){return console.log(e),""}},generate_metadata:e=>{var t,r,n,i,s;let a="";const o=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())a+=e.innerText.trim(),o&&o.hasAttribute("title")&&(a+="_",a+=o.getAttribute("title"));else{const t=e.querySelector("a.a-link-normal.s-navigation-item");t&&t.hasAttribute("title")&&(a+=t.getAttribute("title"))}const l=null===(i=null===(n=null===(r=null===(t=e.closest("ul"))||void 0===t?void 0:t.parentElement)||void 0===r?void 0:r.closest("ul"))||void 0===n?void 0:n.parentElement)||void 0===i?void 0:i.firstElementChild,c=null===(s=null==l?void 0:l.innerText)||void 0===s?void 0:s.replace(/[ ]/g,"_").toLowerCase().trim();let u="";return o&&o.hasAttribute("href")&&(u=o.getAttribute("href")),o&&"true"===o.getAttribute("aria-current")?{name:"refinements."+c,data:{title:(null==a?void 0:a.trim())||"",selected:!0,url:u}}:{name:"refinements."+c,data:{title:(null==a?void 0:a.trim())||"",selected:!1,url:u}}},children:[{selector:"input[type='checkbox']"}]}]}]},{selector:"#departments",name:"departments",add_text:!0,text_format:"Department",children:[{selector:"li a",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>{const t=null==e?void 0:e.getAttribute("aria-current"),r=null==e?void 0:e.innerText,n=null==e?void 0:e.getAttribute("href");return t&&"true"==t?{name:"refinements.departments",data:{title:r,selected:!0,url:n}}:{name:"refinements.departments",data:{title:r,selected:!1,url:n}}}}]},{selector:"#reviewsRefinements",name:"reviews_refinements",add_text:!0,text_format:"Customer Reviews",children:[{selector:"a.s-navigation-clear-link",add_text:!0,name:"clear_selection",clickable:!0},{selector:"li a[aria-current='true']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>{var t;return{name:"refinements.reviews",data:{title:null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.replace(/\n/g," "),selected:!0,url:null==e?void 0:e.getAttribute("href")}}}},{selector:"li a[aria-current='false']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>{var t;return{name:"refinements.reviews",data:{title:null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.replace(/\n/g," "),selected:!1,url:null==e?void 0:e.getAttribute("href")}}}}]},{selector:"#priceRefinements",name:"price_refinements",children:[{selector:"#p_36-title, div.sf-refinement-heading span",add_text:!0,name:"price_heading"},{selector:"div[aria-labelledby='p_36-title'] > a",add_text:!0,name:"clear_price_selection",clickable:!0},{selector:"ul[aria-labelledby='p_36-title'] a[aria-current='true']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>({name:"refinements.price",data:{title:null==e?void 0:e.innerText,selected:!0,url:null==e?void 0:e.getAttribute("href")}})},{selector:"ul[aria-labelledby='p_36-title'] a[aria-current='false']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>({name:"refinements.price",data:{title:null==e?void 0:e.innerText,selected:!1,url:null==e?void 0:e.getAttribute("href")}})},{selector:"div.sf-range-slider-row:nth-of-type(1)",add_text:!0,generate_metadata:e=>{var t;return{name:"refinements.price",data:{title:"price_range",range:null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.replace(/\n/g,"")}}}},{selector:"div.sf-range-slider-row:nth-of-type(2) div.s-lower-bound input",name:"price_min_value",add_text:!0,clickable:!0,keep_attr:["min","max","step"],override_attr:{step_values:e=>{const t=e.closest("form");if(t){const e=t.getAttribute("data-slider-props");if(e)return JSON.parse(e).stepLabels}return""},current_value:e=>{const t=Number.parseInt(e.getAttribute("value"));if(null!==t){const r=e.closest("form");if(r){const e=r.getAttribute("data-slider-props");if(e)return JSON.parse(e).stepLabels[t]}}return""}}},{selector:"div.sf-range-slider-row:nth-of-type(2) div.s-upper-bound input",name:"price_max_value",add_text:!0,clickable:!0,keep_attr:["min","max","step"],override_attr:{step_values:e=>{const t=e.closest("form");if(t){const e=t.getAttribute("data-slider-props");if(e)return JSON.parse(e).stepLabels}return""},current_value:e=>{const t=Number.parseInt(e.getAttribute("value"));if(null!==t){const r=e.closest("form");if(r){const e=r.getAttribute("data-slider-props");if(e)return JSON.parse(e).stepLabels[t]}}return""}}},{selector:"div.sf-submit-range-button input",name:"submit_price_range",add_text:!0,text_format:"Go",clickable:!0},{selector:"div.sf-reset-range-link a",name:"reset_price_selection",add_text:!0,clickable:!0},{selector:"#p_n_deal_type-title",add_text:!0,name:"deals_discounts_heading"},{selector:"div[aria-labelledby='p_n_deal_type-title'] > a",add_text:!0,name:"clear_deals_discount_selection",clickable:!0},{selector:"ul[aria-labelledby='p_n_deal_type-title'] a[aria-current='true']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>({name:"refinements.price",data:{title:null==e?void 0:e.innerText,selected:!0,url:null==e?void 0:e.getAttribute("href")}})},{selector:"ul[aria-labelledby='p_n_deal_type-title'] a[aria-current='false']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>({name:"refinements.price",data:{title:null==e?void 0:e.innerText,selected:!1,url:null==e?void 0:e.getAttribute("href")}})}]}]},{selector:"div.s-main-slot.s-result-list.s-search-results",name:"search_results",children:[{selector:"div.AdHolder",name:"ads",children:[{selector:"div[data-asin]",name:"from_text",add_text:!0,clickable:!0,text_js:e=>{const t=e.querySelector("img");return(null==t?void 0:t.getAttribute("alt")).trim()||""},generate_metadata:e=>{const t=null==e?void 0:e.getAttribute("data-asin"),r=e.querySelector("img"),n=null==r?void 0:r.getAttribute("alt"),i=e.querySelector("a[data-type='productTitle']");return{name:"ads",data:{title:n,asin:t,url:null==i?void 0:i.getAttribute("href")}}}}]},{insert_split_marker:!0,insert_split_marker_every:4,selector:'div[data-component-type="s-search-result"]',text_selector:"span.a-color-base.a-text-normal, h2.a-color-base.a-text-normal span",name:"from_text",class:"search-result",children:[{selector:"div[data-cy='title-recipe'] a.a-link-normal.s-link-style.a-text-normal",add_text:!0,class:"product-name",clickable:!0,name:"product_name"},{selector:"div.s-product-image-container",add_text:!0,name:"product_image",clickable:!0,text_format:"Product Image"},{selector:"div.s-color-swatch-container",name:"available_colors",children:[{selector:"div.s-color-swatch-pad",name:"from_text",clickable:!0,add_text:!0,text_js:e=>{const t=e.querySelector("a");return t&&t.getAttribute("aria-label")||""}},{selector:"div[data-csa-c-type='link'] a",direct_child:!0,name:"from_text",clickable:!0,add_text:!0}]},{selector:"div.s-variations-options-elevated, div.s-variations-options-justify-content",name:"options",add_text:!0,clickable:!0,click_selector:"a"},{selector:"div[data-cy='reviews-block']",class:"product-review",children:[{selector:"span.a-icon-alt",add_text:!0,class:"product-rating"},{selector:"span.a-size-base.s-underline-text",add_text:!0,text_format:"{} reviews",class:"product-rating-count",name:"product_rating_count",clickable:!0}]},{selector:"div[data-cy='price-recipe']",class:"product-price",children:[{selector:"a.a-link-normal > span.a-price > span.a-offscreen",add_text:!0}]},{selector:"div[data-cy='delivery-recipe']",add_text:!0,class:"product-delivery"},{selector:"div[data-cy='add-to-cart'] button, span[id*='add-to-cart'] input",add_text:!0,clickable:!0,name:"add_to_cart"},{selector:"div[data-csa-c-content-id='s-search-see-details-button'] a",add_text:!0,clickable:!0,name:"see_options"},{selector:'div[name="ax-qs"]',children:[{selector:"button[aria-label='Decrease quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div[role='spinbutton']",add_text:!0,text_format:"Current Quantity: {}"},{selector:"button[aria-label='Increase quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]}],generate_metadata:e=>{const t=e.getAttribute("data-asin"),r=e.querySelector("div[data-cy='price-recipe'] a.a-link-normal > span.a-price > span.a-offscreen"),n=null==r?void 0:r.innerText,i=e.querySelector("span.a-color-base.a-text-normal, h2.a-color-base.a-text-normal span"),s=null==i?void 0:i.innerText,a=e.querySelector("div[data-cy='title-recipe'] a.a-link-normal.s-link-style.a-text-normal"),o=null==a?void 0:a.getAttribute("href"),l=e.querySelector("div[data-cy='delivery-recipe']");return{name:"search_results",data:{title:s,asin:t,price:n,url:o,delivery:null==l?void 0:l.innerText.replace(/[\n]/g," ")}}}}]},{selector:"span.s-pagination-strip",name:"pagination",children:[{selector:".s-pagination-item",add_text:!0,name:"from_text",clickable:!0}]},{selector:"div.a-popover-wrapper",name:"popover",children:[{selector:"header.a-popover-header button",add_text:!0,clickable:!0,name:"close",text_format:"Close"},{selector:"div.a-popover-inner div.puis-atc-size-variation",children:[{selector:"div.a-row:nth-of-type(1)",direct_child:!0,children:[{selector:"span[data-component-type='s-product-image'] a",name:"product_image",add_text:!0,clickable:!0,text_format:"Product Image"},{selector:"div.puis-size-variation-title a",name:"product_title",add_text:!0,clickable:!0},{selector:"div.puis-size-variation-product-spec",name:"product_specification",add_text:!0,clickable:!0,click_selector:"a"}]},{selector:"div.a-row:nth-of-type(2)",direct_child:!0,children:[{selector:"div.puis-size-variation-product-options",name:"from_text",text_selector:"span.a-size-base.a-color-secondary",children:[{selector:"span.a-size-base.a-color-secondary",add_text:!0},{selector:"span.a-dropdown-prompt",add_text:!0},{selector:"select",name:"drop_down_list"}]},{selector:"div.puis-size-variation-price a.a-text-normal",name:"price",clickable:!0,add_text:!0,text_selector:"span[aria-hidden='true']"},{selector:"div.puis-size-variation-delivery",add_text:!0,name:"delivery"}]},{selector:"div.a-row:nth-of-type(3)",direct_child:!0,children:[{selector:"span.s-no-js-hide input",name:"cancel",clickable:!0,add_text:!0,text_format:"Cancel"},{selector:"div.puis-atcb-add-container button",name:"add_to_cart",clickable:!0,add_text:!0}]}]}],generate_metadata:e=>{var t,r;const n=null===(t=e.querySelector("div[data-asin]"))||void 0===t?void 0:t.getAttribute("data-asin"),i=e.querySelector('div.a-popover-inner div.puis-atc-size-variation div.a-row:nth-of-type(2) div.puis-size-variation-price a.a-text-normal span[aria-hidden="true"]'),s=null===(r=null==i?void 0:i.innerText)||void 0===r?void 0:r.replace(/[\n]/g,""),a=e.querySelector("div.a-popover-inner div.puis-atc-size-variation div.a-row:nth-of-type(1) div.puis-size-variation-title a"),o=null==a?void 0:a.innerText,l=null==a?void 0:a.getAttribute("href"),c=(e.querySelector('div[data-action="a-dropdown-button"]'),e.querySelectorAll("div.a-popover-inner div.puis-atc-size-variation div.a-row:nth-of-type(1) div.puis-size-variation-product-spec, div.a-popover-inner div.puis-atc-size-variation div.a-row:nth-of-type(2) div.puis-size-variation-product-options")),u=[];for(const e of c){const t=null==e?void 0:e.querySelector("span.a-size-base.a-color-secondary"),r=null==e?void 0:e.querySelector("span.a-size-base.a-color-base, span.a-dropdown-prompt"),n=null==t?void 0:t.innerText.replace(/[:\n]/g,"").trim(),i=null==r?void 0:r.innerText.replace(/[:\n]/g,"").trim(),s={[n]:i};u.push(s)}return{name:"popover_item",data:{title:o,asin:n,price:s,url:l,options:u}}}}]}]},{match:"#productTitle",match_text:"",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,i,{selector:"#centerCol",class:"product-card",children:[{selector:"#title",add_text:!0,keep_attr:["id"],generate_metadata:e=>({name:"product_details",data:{title:(null==e?void 0:e.innerText)||""}})},{selector:"#averageCustomerReviews",class:"review",children:[{selector:"span.a-icon-alt",add_text:!0},{selector:"#acrCustomerReviewText",add_text:!0}]},{selector:'#apex_desktop > div[data-csa-c-slot-id="apex_dp_center_column"] > div[class="offersConsistencyEnabled"] > div:not([style="display:none;"]):not([style="display: none;"]) #corePriceDisplay_desktop_feature_div:has(#sns-base-price) #sns-base-price span.a-price.aok-align-center.reinventPricePriceToPayMargin.priceToPay, #apex_desktop > div[data-csa-c-slot-id="apex_dp_center_column"] > div[class="offersConsistencyEnabled"] > div:not([style="display:none;"]):not([style="display: none;"]) #corePriceDisplay_desktop_feature_div:not(:has(#sns-base-price)) span.a-price.aok-align-center.reinventPricePriceToPayMargin.priceToPay, #apex_desktop > div[data-csa-c-slot-id="apex_dp_center_column"] > div[data-csa-c-content-id="apex_with_rio_cx"] #corePriceDisplay_desktop_feature_div span.a-price.aok-align-center.reinventPricePriceToPayMargin.priceToPay',add_text:!0,text_format:"Price: {}",class:"product-price",generate_metadata:e=>{var t;return{name:"product_details",data:{price:(null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.replace(/\n/g,""))||""}}},text_js:e=>{var t;return(null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.replace(/\n/g,""))||""}},{selector:"#twister",class:"product-options",name:"product_options",children:[{selector:"div.a-section",text_selector:"div.a-row:has(label.a-form-label) > label.a-form-label",name:"from_text",direct_child:!0,generate_metadata:e=>{var t,r,n;const i=null===(t=e.querySelector("div.a-row:has(label.a-form-label) label.a-form-label"))||void 0===t?void 0:t.innerHTML.replace(/[:\n]/g,"").trim();let s=null===(r=e.querySelector("div.a-row:has(label.a-form-label) span.selection"))||void 0===r?void 0:r.innerHTML;if(void 0===s||""===s){const t=null===(n=e.querySelector("select"))||void 0===n?void 0:n.querySelectorAll("option");if(t)for(const e of t)e&&null!==e.getAttribute("selected")&&(s=e.innerHTML.trim())}return{name:"product_options",data:{[i]:s.trim()}}},children:[{selector:"div.a-row:has(label.a-form-label)",children:[{selector:"label.a-form-label",add_text:!0},{selector:"span.selection",add_text:!0}]},{selector:"select",add_text:!0,name:"drop_down_list"},{selector:"ul",name:"button_list",children:[{selector:"li button",add_text:!0,clickable:!0,name:"from_text",text_js:function(e){let t="";if(e.innerText.trim()){t+=e.innerText.trim();const r=e.querySelector("img");r&&r.alt&&(t+=" ",t+=r.alt)}else{const r=e.querySelector("img");r&&r.alt&&(t+=r.alt)}return t.trim()}}]}]}]},{selector:"#twister-plus-inline-twister",class:"product-options",name:"product_options",children:[{selector:"div.inline-twister-row",text_selector:"div.inline-twister-dim-title-value-truncate-expanded span.a-size-base.a-color-secondary",name:"from_text",direct_child:!0,generate_metadata:e=>{var t,r,n;const i=null===(t=e.querySelector("div.inline-twister-dim-title-value-truncate-expanded span.a-size-base.a-color-secondary"))||void 0===t?void 0:t.innerHTML.replace(/[:\n]/g,"").trim();let s=null===(r=e.querySelector("div.inline-twister-dim-title-value-truncate-expanded span.inline-twister-dim-title-value"))||void 0===r?void 0:r.innerHTML;if(void 0===s||""===s){const t=null===(n=e.querySelector("select"))||void 0===n?void 0:n.querySelectorAll("option");if(t)for(const e of t)e&&null!==e.getAttribute("selected")&&(s=e.innerHTML.trim())}return{name:"product_options",data:{[i]:s.trim()}}},children:[{selector:"div.inline-twister-dim-title-value-truncate-expanded",children:[{selector:"span.a-size-base.a-color-secondary",add_text:!0},{selector:"span.inline-twister-dim-title-value",add_text:!0}]},{selector:"select",add_text:!0,name:"drop_down_list"},{selector:"ul",name:"button_list",children:[{selector:"li span:not(.aok-hidden) input",add_text:!0,clickable:!0,name:"from_text",text_js:function(e){const t=e.nextElementSibling;let r="";if(t.innerText.trim()){r+=t.innerText.trim();const e=t.querySelector("img");e&&e.alt&&(r+=" ",r+=e.alt)}else{const e=t.querySelector("img");e&&e.alt&&(r+=e.alt)}return r.trim()}}]}]},{selector:"div.inline-twister-singleton-header",text_selector:"span.a-size-base.a-color-secondary",name:"from_text",children:[{selector:"span.a-size-base.a-color-secondary",add_text:!0},{selector:"span.inline-twister-dim-title-value-truncate",add_text:!0}],generate_metadata:e=>{var t,r;const n=null===(t=e.querySelector("span.a-size-base.a-color-secondary"))||void 0===t?void 0:t.innerHTML.replace(/[:\n]/g,"").trim(),i=null===(r=e.querySelector("span.inline-twister-dim-title-value-truncate"))||void 0===r?void 0:r.innerHTML;return{name:"product_options",data:{[n]:i.trim()}}}}]},{selector:"#productFactsDesktopExpander ul.a-unordered-list, #featurebullets_feature_div ul.a-unordered-list",add_text:!0,name:"about_this_item",text_format:"About this item: ",children:[{selector:"li",add_text:!0}],generate_metadata:e=>{var t;return{name:"product_details",data:{bullet_list:(null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.replace(/\n/g," "))||""}}}}]},{selector:"#buybox:has(div.a-tab-container):not(:has(#partialState_buybox_desktop))",name:"buybox",children:[{selector:"#tab_heading_desktop_buybox_group_1 a",name:"deliver_tab",clickable:!0,add_text:!0},{selector:"#tab_heading_desktop_buybox_group_2 a",name:"pick_up_tab",clickable:!0,add_text:!0},{selector:"#tab_desktop_buybox_group_1",name:"delivery",add_text:!0,text_format:"Delivery",children:[u,d]},{selector:"#tab_desktop_buybox_group_2",name:"pick_up",add_text:!0,text_format:"Pick Up",children:[{selector:"#gsod_singleOfferDisplay_group_2_Desktop",children:[{selector:"#pickUpOfferDisplay",name:"purchase_form",children:[s,a,o,l,c]}]}]}],generate_metadata:e=>{const t=e.querySelector("input#ASIN");return{name:"product_details",data:{asin:(null==t?void 0:t.value)||""}}}},{selector:"#buybox:not(:has(div.a-tab-container)):not(:has(#partialState_buybox_desktop))",name:"buybox",children:[u,d],generate_metadata:e=>{const t=e.querySelector("input#ASIN");return{name:"product_details",data:{asin:(null==t?void 0:t.value)||""}}}},{selector:"#partialState_buybox_desktop",children:[{selector:"#partialStateBuybox div.a-section.a-text-center.a-spacing-small",add_text:!0}],generate_metadata:e=>{const t=e.querySelector("input#ASIN");return{name:"product_details",data:{asin:(null==t?void 0:t.value)||""}}}},{selector:"#attach-warranty-pane #attach-warranty-display",name:"warranty-box",children:[{selector:"div.attach-warranty-box",text_selector:"#attach-warranty-card-display-title",name:"from_text",children:[{selector:"i.a-icon-checkbox",name:"select",clickable:!0},{selector:"#attach-warranty-card-display-title",add_text:!0},{selector:"#attach-warranty-card-price",add_text:!0}]},{selector:"div.a-section.attach-warranty-button-row",children:[{selector:"input[aria-labelledby='attachSiAddCoverage-announce']",name:"add_protection",clickable:!0,add_text:!0,text_format:"Add Protection"},{selector:"input[aria-labelledby='attachSiNoCoverage-announce']",name:"no_protection",clickable:!0,add_text:!0,text_format:"No Thanks"}]}]}]}]},{match:"/cart/add-to-cart",match_method:"url",selector:"html",match_with_ref:!0,children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,i,{selector:"#sw-atc-buy-box",children:[{selector:"#sw-subtotal",children:[{selector:"#sw-subtotal-item-count",add_text:!0},{selector:"span[aria-hidden='true']",add_text:!0}]},{selector:"#sc-buy-box-ptc-button span.a-button-inner input",add_text:!0,text_selector:"div.sc-without-multicart",clickable:!0,name:"check_out",fetch_url:"/cart"},{selector:"#sw-gtc a",add_text:!0,clickable:!0,name:"go_to_cart"}]}]}]},{match:"/cart/smart-wagon",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,i,{selector:"#sw-atc-buy-box",children:[{selector:"#sw-subtotal",children:[{selector:"#sw-subtotal-item-count",add_text:!0},{selector:"span[aria-hidden='true']",add_text:!0}]},{selector:"#sc-buy-box-ptc-button span.a-button-inner input",add_text:!0,text_selector:"div.sc-without-multicart",clickable:!0,name:"check_out",fetch_url:"/cart"},{selector:"#sw-gtc a",add_text:!0,clickable:!0,name:"go_to_cart"}]}]}]},{match:"/gp/cart/view.html",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:h}]},{match:"/cart",match_method:"url",match_with_ref:!0,selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:h}]},{match:"/cart/localmarket",match_method:"url",match_with_ref:!0,selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,{selector:"div[data-name='Active Items']",name:"active_item_list",children:[{selector:"div.sc-list-item-content",text_selector:"ul > li > span.a-list-item > a.sc-product-title span.a-truncate-full",name:"from_text",children:[{selector:"div.sc-product-image-desktop a img",clickable:!0,name:"product_image",add_text:!0,text_format:"Product Image"},{selector:"ul > li > span.a-list-item > a.sc-product-title",clickable:!0,text_selector:"span.a-truncate-full",add_text:!0,name:"product_detail"},{selector:"div.sc-badge-price-to-pay span.sc-price",add_text:!0},{selector:"div.sc-action-links",children:[{selector:"div.qs-widget-container",children:[{selector:"input[aria-label='Remove']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div.qs-widget-dropdown-flex-wrapper button",add_text:!0,clickable:!0,name:"quantity_drop_down_list",text_format:"Current Quantity: {}"},{selector:'div.qs-widget-dropdown-wrapper span[data-action="qs-widget-dropdown-decl"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text",text_format:"Drop Down Option {}"},{selector:'div[id^="qs-widget-quantity-container-atfc"] span[data-action="qs-widget-quantity-changelink-decl"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text"},{selector:'div[id^="qs-widget-summary-container-atfc"] span[id^="qs-widget-summary-atc-atfc"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text"},{selector:"input[aria-label='Add']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]}]},{selector:"input[data-action='delete']",add_text:!0,clickable:!0,name:"delete"}],generate_metadata:e=>{var t,r;const n=null===(t=e.parentElement)||void 0===t?void 0:t.getAttribute("data-asin"),i=e.querySelector("div.sc-badge-price-to-pay span.sc-price"),s=null===(r=null==i?void 0:i.innerText)||void 0===r?void 0:r.replace(/[\n]/g,""),a=e.querySelector("ul > li > span.a-list-item > a.sc-product-title span.a-truncate-full"),o=null==a?void 0:a.innerText,l=e.querySelector("ul > li > span.a-list-item > a.sc-product-title"),c=null==l?void 0:l.getAttribute("href"),u=e.querySelector("div.sc-action-links div.qs-widget-dropdown-flex-wrapper button");return{name:"active_items",data:{title:o,asin:n,price:s,url:c,quantity:null==u?void 0:u.innerText}}}}]},p,{selector:'div.sc-buy-box-inner-box input[name^="proceedToALMCheckout"]',clickable:!0,name:"check_out",add_text:!0},{selector:"div.sc-buy-box-inner-box a",clickable:!0,name:"from_text",add_text:!0},{selector:"#sc-cart-above-actions button, #sc-cart-above-actions a",clickable:!0,name:"from_text",add_text:!0}]}]},{match:"/alm/byg",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[{selector:'a[name="proceedToCheckout"]',name:"check_out",add_text:!0,clickable:!0},p]}]},{match:"/alm/substitution",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[{selector:"#subsContinueButton input",name:"check_out",add_text:!0,clickable:!0,text_format:"Continue"},{selector:"div.subs-cart-item",name:"from_text",text_selector:"div.a-spacing-top-base span.a-size-base",children:[{selector:"div.a-spacing-top-base span.a-size-base",add_text:!0},{selector:"div.a-spacing-top-mini span.a-color-price",add_text:!0}],generate_metadata:e=>{const t=e.querySelector("div[data-cart-item-asin]"),r=null==t?void 0:t.getAttribute("data-cart-item-asin"),n=e.querySelector("div.a-spacing-top-base span.a-size-base"),i=null==n?void 0:n.innerText,s=e.querySelector("div.a-spacing-top-mini span.a-color-price");return{name:"active_items",data:{asin:r,title:i,price:null==s?void 0:s.innerText}}}}]}]},{match:"/ap/signin",match_method:"url",terminate:function(){return!!arguments[0]},terminate_callback:function(){return arguments[0]},selector:"html"},{match:"/gp/buy/spc/handlers/display.html",match_method:"url",terminate:function(){return!!arguments[0]},terminate_callback:function(){return arguments[0]},selector:"html"},{match:"/gp/buyagain",match_method:"url",match_with_ref:!0,selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,i,{selector:"div.a-section:has(div.filter-container)",name:"filters",children:[{selector:"div.filter-container",text_selector:"span#filter-container-header",name:"from_text",children:[{selector:"span#filter-container-header",add_text:!0},{selector:"label",add_text:!0,clickable:!0,name:"from_text",generate_metadata:e=>{var t,r;const n=e.innerText,i=null===(t=e.closest("div.filter-container"))||void 0===t?void 0:t.querySelector("#filter-container-header"),s=null===(r=null==i?void 0:i.innerText)||void 0===r?void 0:r.replace(/[ ]/g,"_").toLowerCase().trim(),a=e.querySelector("input");return a&&a.checked?{name:"filters."+s,data:{title:(null==n?void 0:n.trim())||"",selected:!0}}:{name:"filters."+s,data:{title:(null==n?void 0:n.trim())||"",selected:!1}}}}]}]},{selector:"div.alm-grid-desktop-grid-container",name:"product_list",children:[{selector:'div[id^="gridCell"]',name:"from_text",text_selector:"div[id^='closedCard'] a[id^='title'] span.a-truncate-full",children:[{selector:"div[id^='gridElement']",name:"product_card",children:[{selector:"div[id^='closedCard']",name:"closed_product_card",children:[{selector:"div[id^='info']",name:"open_product_card",clickable:!0,text_format:"Open Product Card"},{selector:"form span.a-button-inner",name:"add_to_cart",clickable:!0,add_text:!0},{selector:'div[id^="seeBuyingOptionsWrapper"] a',name:"see_buying_options",clickable:!0,add_text:!0}]},{selector:'div[name="ax-qs"]',children:[{selector:"button[aria-label='Decrease quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div[role='spinbutton']",add_text:!0,text_format:"Current Quantity: {}"},{selector:"button[aria-label='Increase quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]},{selector:"div[id^='expandedImage']",name:"close_product_card",clickable:!0,add_text:!0,text_format:"Close Product Card"}]}],generate_metadata:e=>{var t;const r=e.querySelector("div[id^='closedCard'] div[id^='info']"),n=null==r?void 0:r.getAttribute("data-asin"),i=e.querySelector('div[id^="closedCard"] div[id^="info"] span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)'),s=null===(t=null==i?void 0:i.innerText)||void 0===t?void 0:t.replace(/[\n]/g,""),a=e.querySelector("div[id^='closedCard'] a[id^='title'] span.a-truncate-full"),o=null==a?void 0:a.innerText,l=e.querySelector('div[id^="closedCard"] div[id^="info"] #udmDeliveryMessageComponent');return{name:"active_items_closed",data:{title:o,asin:n,price:s,delivery:null==l?void 0:l.innerText.replace(/[\n]/g," ")}}}},{selector:'div[id^="featured"]',name:"from_text",text_selector:"a[id^='title'] span.a-truncate-full",children:[{selector:'div[id^="detailContentWrapper"] div[id^="detailContent"]',name:"detailed_content",children:[{selector:"div:has(> img)",clickable:!0,name:"product_image",add_text:!0,text_format:"Product Image"},{selector:"a[id^='title']",clickable:!0,name:"product_title",add_text:!0,text_selector:"span.a-truncate-full"},{selector:"div[class*='multiOfferPillContainer'] a",clickable:!0,name:"from_text",add_text:!0},{selector:"div[data-buyingoptiontype='NEW'], div[class*='asinDetailInfoColumns']:has(input[name='submit.addToCart']",name:"one_time_purchase",children:[{selector:'span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)',add_text:!0,name:"price"},{selector:"#udmDeliveryMessageComponent",add_text:!0,name:"delivery"},{selector:'div[class*="actionButtonsRow"], div[class*="asinDetailActionsRow"]',name:"buttons",children:[{selector:'input[name="submit.addToCart"]',add_text:!0,name:"add_to_cart",clickable:!0},{selector:'input[id^="buy-now"]',add_text:!0,name:"buy_now",clickable:!0},{selector:'div[id^="feedbackButtonSection"] input',add_text:!0,name:"remove_item",clickable:!0},{selector:'div[name="ax-qs"]',children:[{selector:"button[aria-label='Decrease quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div[role='spinbutton']",add_text:!0,text_format:"Current Quantity: {}"},{selector:"button[aria-label='Increase quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]}]}],generate_metadata:e=>{var t,r,n,i,s;const a=e.closest("div[data-asin]"),o=null==a?void 0:a.getAttribute("data-asin"),l=e.querySelector('span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)'),c=null===(t=null==l?void 0:l.innerText)||void 0===t?void 0:t.replace(/[\n]/g,""),u=null===(n=null===(r=e.parentElement)||void 0===r?void 0:r.parentElement)||void 0===n?void 0:n.querySelector("a[id^='title'] span.a-truncate-full"),d=null==u?void 0:u.innerText,h=null===(s=null===(i=e.parentElement)||void 0===i?void 0:i.parentElement)||void 0===s?void 0:s.querySelector("a[id^='title']"),p=null==h?void 0:h.getAttribute("href"),f=e.querySelector("#udmDeliveryMessageComponent"),m=null==f?void 0:f.innerText.replace(/[\n]/g," "),g=e.querySelector('div[name="ax-qs"] div[role="spinbutton"]');return{name:"active_items_opened_purchase",data:{title:d,asin:o,price:c,url:p,delivery:m,quantity:(null==g?void 0:g.innerText)||"1"}}}},{selector:"div[data-buyingoptiontype='SNS'], div[class*='snsUpsellBlockContainer']",name:"subscribe_and_save",children:[{selector:'span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)',add_text:!0,name:"price"},{selector:"#udmDeliveryMessageComponent",add_text:!0,name:"delivery"},{selector:'div[class*="actionButtonsRow"]',name:"buttons",children:[{selector:'input[name="submit.addToCart"]',add_text:!0,name:"add_to_cart",clickable:!0},{selector:'span[class*="snsButton"] input',add_text:!0,name:"subscribe_and_save",clickable:!0},{selector:'div[id^="feedbackButtonSection"] input',add_text:!0,name:"remove_item",clickable:!0}]},{selector:'span[class*="subscriptionButton"] input',add_text:!0,name:"set_up_subscription",clickable:!0}],generate_metadata:e=>{var t,r,n,i,s;const a=e.closest("div[data-asin]"),o=null==a?void 0:a.getAttribute("data-asin"),l=e.querySelector('span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)'),c=null===(t=null==l?void 0:l.innerText)||void 0===t?void 0:t.replace(/[\n]/g,""),u=null===(n=null===(r=e.parentElement)||void 0===r?void 0:r.parentElement)||void 0===n?void 0:n.querySelector("a[id^='title'] span.a-truncate-full"),d=null==u?void 0:u.innerText,h=null===(s=null===(i=e.parentElement)||void 0===i?void 0:i.parentElement)||void 0===s?void 0:s.querySelector("a[id^='title']"),p=null==h?void 0:h.getAttribute("href"),f=e.querySelector("#udmDeliveryMessageComponent");return{name:"active_items_opened_sns",data:{title:d,asin:o,price:c,url:p,delivery:null==f?void 0:f.innerText.replace(/[\n]/g," ")}}}}]},{selector:"div[id^='detail-view-similar-items']",name:"similar_items",children:[{selector:"li.a-carousel-card",name:"from_text",text_selector:"a[id^='title'] span.a-truncate-full",children:[{selector:"div.a-image-container:has(> img)",clickable:!0,name:"product_image",add_text:!0,text_format:"Product Image"},{selector:"a[id^='title']",clickable:!0,name:"product_title",add_text:!0,text_selector:"span.a-truncate-full"},{selector:'span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)',add_text:!0,name:"price"},{selector:"#udmDeliveryMessageComponent",add_text:!0,name:"delivery"},{selector:'input[name="submit.addToCart"], input[name^="atfcShim"], button[aria-label="Add to Cart. Click to change quantity"]',add_text:!0,name:"add_to_cart",clickable:!0},{selector:'div[id^="seeBuyingOptionsWrapper"] a',name:"see_buying_options",clickable:!0,add_text:!0},{selector:'div[name="ax-qs"]',children:[{selector:"button[aria-label='Decrease quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div[role='spinbutton']",add_text:!0,text_format:"Current Quantity: {}"},{selector:"button[aria-label='Increase quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]},{selector:"div.qs-widget-container",children:[{selector:"input[aria-label='Remove']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div.qs-widget-dropdown-flex-wrapper button",add_text:!0,clickable:!0,name:"drop_down_list",text_format:"Current Quantity: {}"},{selector:'div.qs-widget-dropdown-wrapper span[data-action="qs-widget-dropdown-decl"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text",text_format:"Drop Down Option {}"},{selector:'div[id^="qs-widget-quantity-container-atfc"] span[data-action="qs-widget-quantity-changelink-decl"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text"},{selector:'div[id^="qs-widget-summary-container-atfc"] span[id^="qs-widget-summary-atc-atfc"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text"},{selector:"input[aria-label='Add']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]}],generate_metadata:e=>{var t,r,n;const i=null===(t=e.closest('div[id^="featured"]'))||void 0===t?void 0:t.querySelector('div[id^="detailContentWrapper"] a[id^="title"] span.a-truncate-full'),s=null===(r=null==i?void 0:i.innerText)||void 0===r?void 0:r.toLowerCase().replace(/[^\w]+/g,"_"),a=e.querySelector('div[class*="delightFaceout"]'),o=null==a?void 0:a.getAttribute("data-asin"),l=e.querySelector('span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)'),c=null===(n=null==l?void 0:l.innerText)||void 0===n?void 0:n.replace(/[\n]/g,""),u=e.querySelector("a[id^='title'] span.a-truncate-full"),d=null==u?void 0:u.innerText,h=e.querySelector("a[id^='title']"),p=null==h?void 0:h.getAttribute("href"),f=e.querySelector("#udmDeliveryMessageComponent");return{name:s+".similar_items",data:{title:d,asin:o,price:c,url:p,delivery:null==f?void 0:f.innerText.replace(/[\n]/g," ")}}}}]}]}]},{selector:"#snsUpsellModal",name:"subscribe_and_save_popover",children:[{selector:'div[class*="modalHeader"]',children:[{selector:'span[class*="modalHeaderText"]',add_text:!0},{selector:'span[data-action="a-popover-close"]',add_text:!0,clickable:!0,text_format:"Close",name:"from_text"}]},{selector:'div[class*="modalContent"]',direct_child:!0,children:[{selector:'div:not([class*="buttonContainer"]):not(:has(select))',add_text:!0},{selector:"select",name:"drop_down_list"},{selector:'div[class*="buttonContainer"]',children:[{selector:'div[class*="cancelButtonContainer"] input',add_text:!0,text_format:"Cancel",clickable:!0,name:"from_text"},{selector:'div[class*="subscriptionButtonContainer"] input[name="submit.addToCart"]',add_text:!0,text_format:"Add Subscription to Cart",clickable:!0,name:"from_text"}]}]}],generate_metadata:e=>{var t,r;const n=e.querySelector('div[class*="modalContent"]');return{name:"popover_item",data:{asin:null===(r=null===(t=null==n?void 0:n.id)||void 0===t?void 0:t.split("-")[1])||void 0===r?void 0:r.trim()}}}}]}]}]},588:(e,t,r)=>{"use strict";r.d(t,{q:()=>i});var n=function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function a(e){try{l(n.next(e))}catch(e){s(e)}}function o(e){try{l(n.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,o)}l((n=n.apply(e,t||[])).next())}))};function i(e,t,r="",s=0,a=globalThis.document,o=globalThis.window){var l;let c=t.tag_name||e.tagName.toLowerCase();c.endsWith("_")&&(c=c.slice(0,-1));const u=a.createElement(c);let d="";if(t.text_selector){const r=e.querySelector(t.text_selector);r&&(d=r.innerText||r.textContent||"")}else t.text_js?d=t.text_js(e):t.add_text&&(d=e.innerText||e.textContent||"");d=d.replace(/\s+/g," ").trim(),t.text_format?d=t.text_format.replace("{}",d):t.text_format&&(d=t.text_format),d&&t.add_text&&(u.textContent=d);let h="";if(t.name&&("from_text"===t.name?(h=r?r+".":"",d?h+=d.toLowerCase().replace(/[^\w]+/g,"_"):h=""):"from_nth_child"===t.name?(h=r?r+".":"",h+=s.toString()):(h=r?r+".":"",h+=t.name),u.setAttribute("name",h),r=h),t.generate_metadata){const r=t.generate_metadata(e),n=JSON.stringify(r.data),i=r.name;e.setAttribute("data-element-meta-name",i),e.setAttribute("data-element-meta-data",n)}if(t.clickable){if(!t.name)throw new Error("clickable element must have a name");let r;r=t.click_selector?e.querySelector(t.click_selector):e,r&&r.setAttribute("data-clickable-id",h),o.clickable_recipes||(o.clickable_recipes={}),o.clickable_recipes[h]=t}if(t.fetch_url&&e.setAttribute("data-fetch-url",t.fetch_url),"input"===c){const r=e.getAttribute("type");["text","number"].includes(r)?(u.setAttribute("value",e.value),e.setAttribute("data-input-id",h)):"checkbox"===r?u.setAttribute("checked",e.checked.toString()):"radio"===r&&(u.setAttribute("checked",e.checked.toString()),e.setAttribute("data-clickable-id",h)),o.input_recipes||(o.input_recipes={}),o.input_recipes[h]=t}if("select"===c){e.setAttribute("data-select-id",h);const t=e.getAttribute("id"),r=(e.getAttribute("name"),null===(l=e.parentElement)||void 0===l?void 0:l.querySelector("span.a-button-dropdown span.a-button-text")),i=a.createElement("span");i.textContent=r.textContent;const s=h+".open_drop_down_list";i.setAttribute("name",s),r.setAttribute("data-clickable-id",s),u.appendChild(i),a.querySelectorAll('a[id^="'+t+'"]').forEach((e=>n(this,void 0,void 0,(function*(){const t=e.textContent.trim()||e.querySelector("input").value,r=h+"."+t,n=a.createElement("a");n.textContent=e.textContent,n.setAttribute("value",t),n.setAttribute("name",r),n.setAttribute("selected",e.getAttribute("aria-selected")),e.setAttribute("data-clickable-id",r),u.appendChild(n)}))))}if(["alt","title","type","value","role","aria-label","aria-hidden","aria-selected"].forEach((t=>{const r=e.getAttribute(t);r&&u.setAttribute(t,r)})),t.keep_attr)for(const r of t.keep_attr){const t=e.getAttribute(r);t&&u.setAttribute(r,t)}if(t.class&&u.setAttribute("class",t.class),t.id&&u.setAttribute("id",t.id),t.override_attr)for(const r in t.override_attr)u.setAttribute(r,t.override_attr[r](e));if(t.children&&t.children.length>0)for(const n of t.children){const t=n.direct_child?`:scope > ${n.selector}`:n.selector;let s;s=n.use_root?a.querySelectorAll(t):e.querySelectorAll(t),s.forEach(((e,t)=>{const s=i(e,n,r,t,a,o);if(u.appendChild(s),n.insert_split_marker&&t%(n.insert_split_marker_every||1)==0){const e=a.createElement("split-marker");u.appendChild(e)}if(n.insert_split_marker){const e=a.createElement("split-marker");u.appendChild(e)}}))}if(t.empty_message&&0===u.children.length){const e=a.createTextNode(t.empty_message);u.appendChild(e)}return u}},137:(e,t,r)=>{"use strict";r.d(t,{Ez:()=>o,Ip:()=>c,c5:()=>u,ii:()=>d,sZ:()=>l});var n=r(129),i=r(828),s=r(588),a=function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function a(e){try{l(n.next(e))}catch(e){s(e)}}function o(e){try{l(n.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,o)}l((n=n.apply(e,t||[])).next())}))};function o(e){return a(this,void 0,void 0,(function*(){console.log("update_icon",e),(yield c(e))?(console.log("inactive icon"),chrome.action.setIcon({path:"../inactive_icon.png"})):(console.log("active icon"),chrome.action.setIcon({path:"../icon.png"}))}))}function l(e=null,t=globalThis.document){let r;r=e?e.querySelectorAll("[data-element-meta-name]"):t.querySelectorAll("[data-element-meta-name]");const n={};return r.forEach((e=>{const t=e.getAttribute("data-element-meta-name"),r=e.getAttribute("data-element-meta-data");n[t]||(n[t]=[]),n[t].push(JSON.parse(r))})),n}function c(e,t=!1){return a(this,void 0,void 0,(function*(){if(!t)if(chrome.storage){if(!(yield chrome.storage.local.get("userId")).userId)return console.log("no user id"),!0}else if(!(yield new Promise((e=>{const t=r=>{"GET_USER_ID_RESPONSE"===r.data.type&&(window.removeEventListener("message",t),e(r.data.userId))};window.addEventListener("message",t),window.postMessage({type:"GET_USER_ID"},"*")}))))return!0;return!e||!n.Wd.some((t=>e.includes(t)))||n.x2.some((t=>e.includes(t)))}))}function u(e=null,t=null,r=globalThis.document,n=globalThis.window){console.log("start process recipe");try{const a=function(e=null,t=globalThis.document,r=globalThis.window){var n,s;let a;a=e?new URL(e):new URL(r.location.href);let o=a.pathname;o="/"!==o?o.replace(/\/+$/,""):o;for(const e of i._e){const r=e.match_method||"text";if("text"===r)try{const r=t.querySelector(e.match);if(r&&(!e.match_text||null!==(s=null===(n=r.textContent)||void 0===n?void 0:n.toLowerCase().includes(e.match_text.toLowerCase()))&&void 0!==s&&s))return console.log("matched with recipe ",e.match),e}catch(e){console.error("Error checking text match:",e)}else if("url"===r){if(e.match===o)return console.log("matched with recipe ",e.match),e;if(e.match_with_ref&&(o.startsWith(e.match+"/ref=")||o.startsWith(e.match+"ref=")))return console.log("matched with recipe ",e.match),e}}throw new Error(`No matching recipe found for path: ${o}`)}(t,r,n);let o;if(o=e||r.querySelector(a.selector),o){return(0,s.q)(o,a,"",0,r,n).outerHTML}}catch(e){console.error("Error processing recipe:",e)}}function d(e,t){var r,n,i,s,a,o,l,c,u,d;let h="",p="Enter your reason here...";switch(e){case"click_a":case"click_b":case"click_c":"buybox.delivery.subscribe_save_.purchase_form.set_up_now"===t["data-semantic-id"]||"Set Up Now"===t.target.innerText?(h='You <span class="highlight-question">clicked</span> on the set up now button. What makes you choose to subscribe to this product?',p="I choose to subscribe because..."):"buybox.delivery.one_time_purchase_.purchase_form.buy_now"===t["data-semantic-id"]||"buybox.delivery.purchase_form.buy"===t["data-semantic-id"]||"buy-now-button"===t.target.id?(h='You <span class="highlight-question">clicked</span> on the buy now button. What do you like about this particular product?',p="I am buying this product because..."):(null===(r=t["data-semantic-id"])||void 0===r?void 0:r.startsWith("search_results."))||(null===(n=t["data-semantic-id"])||void 0===n?void 0:n.startsWith("product_list."))||(null===(i=t["data-semantic-id"])||void 0===i?void 0:i.startsWith("active_item_list."))&&(null===(s=t["data-semantic-id"])||void 0===s?void 0:s.endsWith(".product_detail"))||(null===(a=t.target.className)||void 0===a?void 0:a.includes("sc-product-link"))?(h='You <span class="highlight-question">clicked</span> on this product. What caught your attention compared to the other options you saw?',p="I like this product becauseß..."):(null===(o=t["data-semantic-id"])||void 0===o?void 0:o.endsWith("add_to_cart"))||"add-to-cart-button"===t.target.id||"submit.addToCart"===t.target.name||"Add to Cart"===t.target.innerText?(h='You <span class="highlight-question">clicked</span> on the add to cart button. What makes you decide to add this item to your cart?',p="I add this item to my cart because..."):"nav_bar.search_button"===t["data-semantic-id"]?(h='You <span class="highlight-question">clicked</span> on the search button. What are you searching for?',p="I want to find ..."):(null===(l=t["data-semantic-id"])||void 0===l?void 0:l.startsWith("refinements."))||(null===(c=t["data-semantic-id"])||void 0===c?void 0:c.startsWith("filters."))?(h='You <span class="highlight-question">clicked</span> on this filter. What are you hoping to find with this filter?',p="I want to find ..."):(null===(u=t["data-semantic-id"])||void 0===u?void 0:u.startsWith("product_options."))?(h='You <span class="highlight-question">clicked</span> on this product option. What do you like about this product option?',"product_options"===t["element-meta-name"]&&""!==t["element-meta-data"]&&(h=`You <span class="highlight-question">clicked</span> on ${t["element-meta-data"].value}. What do you like about this product option?`),p="I like this product option because...ß"):(null===(d=t["data-semantic-id"])||void 0===d?void 0:d.endsWith("check_out"))?(h='You <span class="highlight-question">clicked</span> checkout button. What makes you choose to checkout?',p="I choose to checkout because..."):(h='You <span class="highlight-question">clicked</span> on this element. Could you share what you were trying to do or find?',p="Enter your reason here...");break;case"scroll":h='You <span class="highlight-question">scrolled</span> on this page. What information are you looking for?',p="I want to find ...";break;case"input":h='You <span class="highlight-question">typed</span> in this input field. What are you searching for?',p="I want to find ...";break;case"navigation":"back"===t.navigationType?(h='Why did you decide to <span class="highlight-question">go back</span> to the previous page?',p="I'm back because..."):"forward"===t.navigationType&&(h='Why did you decide to <span class="highlight-question">return</span> to this page ?',p="I want to find ..."),h=`What is the reason for this <span class="highlight-question">${t.navigationType} navigation</span>?`,p="Enter your reason here...";break;case"tabActivate":h='Why did you <span class="highlight-question">switch to this tab</span>?',p="I switched to this tab because...";break;default:h=`What is the reason for the ${e} action?`,p="Enter your reason here..."}return{question:h,placeholder:p}}},173:e=>{class t{constructor(e,t){this.width=e,this.height=t}getContext(){return null}toDataURL(){return""}}e.exports={createCanvas:(e,r)=>new t(e,r)}},873:(e,t,r)=>{try{e.exports=Object(function(){var e=new Error("Cannot find module 'canvas'");throw e.code="MODULE_NOT_FOUND",e}())}catch(t){e.exports=r(173)}},273:(e,t,r)=>{try{const{performance:e}=r(Object(function(){var e=new Error("Cannot find module 'perf_hooks'");throw e.code="MODULE_NOT_FOUND",e}()));t.F=e}catch(e){t.F={now:()=>+new Date}}},83:(e,t,r)=>{"use strict";r.d(t,{A:()=>vt});var n={};function i(e,t){return function(){return e.apply(t,arguments)}}r.r(n),r.d(n,{hasBrowserEnv:()=>pe,hasStandardBrowserEnv:()=>me,hasStandardBrowserWebWorkerEnv:()=>ge,navigator:()=>fe,origin:()=>be});const{toString:s}=Object.prototype,{getPrototypeOf:a}=Object,o=(l=Object.create(null),e=>{const t=s.call(e);return l[t]||(l[t]=t.slice(8,-1).toLowerCase())});var l;const c=e=>(e=e.toLowerCase(),t=>o(t)===e),u=e=>t=>typeof t===e,{isArray:d}=Array,h=u("undefined"),p=c("ArrayBuffer"),f=u("string"),m=u("function"),g=u("number"),b=e=>null!==e&&"object"==typeof e,y=e=>{if("object"!==o(e))return!1;const t=a(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},v=c("Date"),_=c("File"),w=c("Blob"),S=c("FileList"),x=c("URLSearchParams"),[E,k,A,C]=["ReadableStream","Request","Response","Headers"].map(c);function T(e,t,{allOwnKeys:r=!1}={}){if(null==e)return;let n,i;if("object"!=typeof e&&(e=[e]),d(e))for(n=0,i=e.length;n<i;n++)t.call(null,e[n],n,e);else{const i=r?Object.getOwnPropertyNames(e):Object.keys(e),s=i.length;let a;for(n=0;n<s;n++)a=i[n],t.call(null,e[a],a,e)}}function R(e,t){t=t.toLowerCase();const r=Object.keys(e);let n,i=r.length;for(;i-- >0;)if(n=r[i],t===n.toLowerCase())return n;return null}const N="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,I=e=>!h(e)&&e!==N,q=(D="undefined"!=typeof Uint8Array&&a(Uint8Array),e=>D&&e instanceof D);var D;const L=c("HTMLFormElement"),O=(({hasOwnProperty:e})=>(t,r)=>e.call(t,r))(Object.prototype),B=c("RegExp"),P=(e,t)=>{const r=Object.getOwnPropertyDescriptors(e),n={};T(r,((r,i)=>{let s;!1!==(s=t(r,i,e))&&(n[i]=s||r)})),Object.defineProperties(e,n)},M="abcdefghijklmnopqrstuvwxyz",U="0123456789",z={DIGIT:U,ALPHA:M,ALPHA_DIGIT:M+M.toUpperCase()+U},F=c("AsyncFunction"),j=(H="function"==typeof setImmediate,V=m(N.postMessage),H?setImmediate:V?(W=`axios@${Math.random()}`,G=[],N.addEventListener("message",(({source:e,data:t})=>{e===N&&t===W&&G.length&&G.shift()()}),!1),e=>{G.push(e),N.postMessage(W,"*")}):e=>setTimeout(e));var H,V,W,G;const $="undefined"!=typeof queueMicrotask?queueMicrotask.bind(N):"undefined"!=typeof process&&process.nextTick||j,Z={isArray:d,isArrayBuffer:p,isBuffer:function(e){return null!==e&&!h(e)&&null!==e.constructor&&!h(e.constructor)&&m(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||m(e.append)&&("formdata"===(t=o(e))||"object"===t&&m(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&p(e.buffer),t},isString:f,isNumber:g,isBoolean:e=>!0===e||!1===e,isObject:b,isPlainObject:y,isReadableStream:E,isRequest:k,isResponse:A,isHeaders:C,isUndefined:h,isDate:v,isFile:_,isBlob:w,isRegExp:B,isFunction:m,isStream:e=>b(e)&&m(e.pipe),isURLSearchParams:x,isTypedArray:q,isFileList:S,forEach:T,merge:function e(){const{caseless:t}=I(this)&&this||{},r={},n=(n,i)=>{const s=t&&R(r,i)||i;y(r[s])&&y(n)?r[s]=e(r[s],n):y(n)?r[s]=e({},n):d(n)?r[s]=n.slice():r[s]=n};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&T(arguments[e],n);return r},extend:(e,t,r,{allOwnKeys:n}={})=>(T(t,((t,n)=>{r&&m(t)?e[n]=i(t,r):e[n]=t}),{allOwnKeys:n}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,r,n)=>{e.prototype=Object.create(t.prototype,n),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),r&&Object.assign(e.prototype,r)},toFlatObject:(e,t,r,n)=>{let i,s,o;const l={};if(t=t||{},null==e)return t;do{for(i=Object.getOwnPropertyNames(e),s=i.length;s-- >0;)o=i[s],n&&!n(o,e,t)||l[o]||(t[o]=e[o],l[o]=!0);e=!1!==r&&a(e)}while(e&&(!r||r(e,t))&&e!==Object.prototype);return t},kindOf:o,kindOfTest:c,endsWith:(e,t,r)=>{e=String(e),(void 0===r||r>e.length)&&(r=e.length),r-=t.length;const n=e.indexOf(t,r);return-1!==n&&n===r},toArray:e=>{if(!e)return null;if(d(e))return e;let t=e.length;if(!g(t))return null;const r=new Array(t);for(;t-- >0;)r[t]=e[t];return r},forEachEntry:(e,t)=>{const r=(e&&e[Symbol.iterator]).call(e);let n;for(;(n=r.next())&&!n.done;){const r=n.value;t.call(e,r[0],r[1])}},matchAll:(e,t)=>{let r;const n=[];for(;null!==(r=e.exec(t));)n.push(r);return n},isHTMLForm:L,hasOwnProperty:O,hasOwnProp:O,reduceDescriptors:P,freezeMethods:e=>{P(e,((t,r)=>{if(m(e)&&-1!==["arguments","caller","callee"].indexOf(r))return!1;const n=e[r];m(n)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+r+"'")}))}))},toObjectSet:(e,t)=>{const r={},n=e=>{e.forEach((e=>{r[e]=!0}))};return d(e)?n(e):n(String(e).split(t)),r},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,r){return t.toUpperCase()+r})),noop:()=>{},toFiniteNumber:(e,t)=>null!=e&&Number.isFinite(e=+e)?e:t,findKey:R,global:N,isContextDefined:I,ALPHABET:z,generateString:(e=16,t=z.ALPHA_DIGIT)=>{let r="";const{length:n}=t;for(;e--;)r+=t[Math.random()*n|0];return r},isSpecCompliantForm:function(e){return!!(e&&m(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),r=(e,n)=>{if(b(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[n]=e;const i=d(e)?[]:{};return T(e,((e,t)=>{const s=r(e,n+1);!h(s)&&(i[t]=s)})),t[n]=void 0,i}}return e};return r(e,0)},isAsyncFn:F,isThenable:e=>e&&(b(e)||m(e))&&m(e.then)&&m(e.catch),setImmediate:j,asap:$};function J(e,t,r,n,i){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),r&&(this.config=r),n&&(this.request=n),i&&(this.response=i,this.status=i.status?i.status:null)}Z.inherits(J,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:Z.toJSONObject(this.config),code:this.code,status:this.status}}});const K=J.prototype,Y={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{Y[e]={value:e}})),Object.defineProperties(J,Y),Object.defineProperty(K,"isAxiosError",{value:!0}),J.from=(e,t,r,n,i,s)=>{const a=Object.create(K);return Z.toFlatObject(e,a,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),J.call(a,e.message,t,r,n,i),a.cause=e,a.name=e.name,s&&Object.assign(a,s),a};const X=J;function Q(e){return Z.isPlainObject(e)||Z.isArray(e)}function ee(e){return Z.endsWith(e,"[]")?e.slice(0,-2):e}function te(e,t,r){return e?e.concat(t).map((function(e,t){return e=ee(e),!r&&t?"["+e+"]":e})).join(r?".":""):t}const re=Z.toFlatObject(Z,{},null,(function(e){return/^is[A-Z]/.test(e)})),ne=function(e,t,r){if(!Z.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const n=(r=Z.toFlatObject(r,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!Z.isUndefined(t[e])}))).metaTokens,i=r.visitor||c,s=r.dots,a=r.indexes,o=(r.Blob||"undefined"!=typeof Blob&&Blob)&&Z.isSpecCompliantForm(t);if(!Z.isFunction(i))throw new TypeError("visitor must be a function");function l(e){if(null===e)return"";if(Z.isDate(e))return e.toISOString();if(!o&&Z.isBlob(e))throw new X("Blob is not supported. Use a Buffer instead.");return Z.isArrayBuffer(e)||Z.isTypedArray(e)?o&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function c(e,r,i){let o=e;if(e&&!i&&"object"==typeof e)if(Z.endsWith(r,"{}"))r=n?r:r.slice(0,-2),e=JSON.stringify(e);else if(Z.isArray(e)&&function(e){return Z.isArray(e)&&!e.some(Q)}(e)||(Z.isFileList(e)||Z.endsWith(r,"[]"))&&(o=Z.toArray(e)))return r=ee(r),o.forEach((function(e,n){!Z.isUndefined(e)&&null!==e&&t.append(!0===a?te([r],n,s):null===a?r:r+"[]",l(e))})),!1;return!!Q(e)||(t.append(te(i,r,s),l(e)),!1)}const u=[],d=Object.assign(re,{defaultVisitor:c,convertValue:l,isVisitable:Q});if(!Z.isObject(e))throw new TypeError("data must be an object");return function e(r,n){if(!Z.isUndefined(r)){if(-1!==u.indexOf(r))throw Error("Circular reference detected in "+n.join("."));u.push(r),Z.forEach(r,(function(r,s){!0===(!(Z.isUndefined(r)||null===r)&&i.call(t,r,Z.isString(s)?s.trim():s,n,d))&&e(r,n?n.concat(s):[s])})),u.pop()}}(e),t};function ie(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function se(e,t){this._pairs=[],e&&ne(e,this,t)}const ae=se.prototype;ae.append=function(e,t){this._pairs.push([e,t])},ae.toString=function(e){const t=e?function(t){return e.call(this,t,ie)}:ie;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const oe=se;function le(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function ce(e,t,r){if(!t)return e;const n=r&&r.encode||le;Z.isFunction(r)&&(r={serialize:r});const i=r&&r.serialize;let s;if(s=i?i(t,r):Z.isURLSearchParams(t)?t.toString():new oe(t,r).toString(n),s){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+s}return e}const ue=class{constructor(){this.handlers=[]}use(e,t,r){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!r&&r.synchronous,runWhen:r?r.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){Z.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},de={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},he={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:oe,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},pe="undefined"!=typeof window&&"undefined"!=typeof document,fe="object"==typeof navigator&&navigator||void 0,me=pe&&(!fe||["ReactNative","NativeScript","NS"].indexOf(fe.product)<0),ge="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,be=pe&&window.location.href||"http://localhost",ye={...n,...he},ve=function(e){function t(e,r,n,i){let s=e[i++];if("__proto__"===s)return!0;const a=Number.isFinite(+s),o=i>=e.length;return s=!s&&Z.isArray(n)?n.length:s,o?(Z.hasOwnProp(n,s)?n[s]=[n[s],r]:n[s]=r,!a):(n[s]&&Z.isObject(n[s])||(n[s]=[]),t(e,r,n[s],i)&&Z.isArray(n[s])&&(n[s]=function(e){const t={},r=Object.keys(e);let n;const i=r.length;let s;for(n=0;n<i;n++)s=r[n],t[s]=e[s];return t}(n[s])),!a)}if(Z.isFormData(e)&&Z.isFunction(e.entries)){const r={};return Z.forEachEntry(e,((e,n)=>{t(function(e){return Z.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),n,r,0)})),r}return null},_e={transitional:de,adapter:["xhr","http","fetch"],transformRequest:[function(e,t){const r=t.getContentType()||"",n=r.indexOf("application/json")>-1,i=Z.isObject(e);if(i&&Z.isHTMLForm(e)&&(e=new FormData(e)),Z.isFormData(e))return n?JSON.stringify(ve(e)):e;if(Z.isArrayBuffer(e)||Z.isBuffer(e)||Z.isStream(e)||Z.isFile(e)||Z.isBlob(e)||Z.isReadableStream(e))return e;if(Z.isArrayBufferView(e))return e.buffer;if(Z.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let s;if(i){if(r.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return ne(e,new ye.classes.URLSearchParams,Object.assign({visitor:function(e,t,r,n){return ye.isNode&&Z.isBuffer(e)?(this.append(t,e.toString("base64")),!1):n.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((s=Z.isFileList(e))||r.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return ne(s?{"files[]":e}:e,t&&new t,this.formSerializer)}}return i||n?(t.setContentType("application/json",!1),function(e){if(Z.isString(e))try{return(0,JSON.parse)(e),Z.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||_e.transitional,r=t&&t.forcedJSONParsing,n="json"===this.responseType;if(Z.isResponse(e)||Z.isReadableStream(e))return e;if(e&&Z.isString(e)&&(r&&!this.responseType||n)){const r=!(t&&t.silentJSONParsing)&&n;try{return JSON.parse(e)}catch(e){if(r){if("SyntaxError"===e.name)throw X.from(e,X.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:ye.classes.FormData,Blob:ye.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};Z.forEach(["delete","get","head","post","put","patch"],(e=>{_e.headers[e]={}}));const we=_e,Se=Z.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),xe=Symbol("internals");function Ee(e){return e&&String(e).trim().toLowerCase()}function ke(e){return!1===e||null==e?e:Z.isArray(e)?e.map(ke):String(e)}function Ae(e,t,r,n,i){return Z.isFunction(n)?n.call(this,t,r):(i&&(t=r),Z.isString(t)?Z.isString(n)?-1!==t.indexOf(n):Z.isRegExp(n)?n.test(t):void 0:void 0)}class Ce{constructor(e){e&&this.set(e)}set(e,t,r){const n=this;function i(e,t,r){const i=Ee(t);if(!i)throw new Error("header name must be a non-empty string");const s=Z.findKey(n,i);(!s||void 0===n[s]||!0===r||void 0===r&&!1!==n[s])&&(n[s||t]=ke(e))}const s=(e,t)=>Z.forEach(e,((e,r)=>i(e,r,t)));if(Z.isPlainObject(e)||e instanceof this.constructor)s(e,t);else if(Z.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim()))s((e=>{const t={};let r,n,i;return e&&e.split("\n").forEach((function(e){i=e.indexOf(":"),r=e.substring(0,i).trim().toLowerCase(),n=e.substring(i+1).trim(),!r||t[r]&&Se[r]||("set-cookie"===r?t[r]?t[r].push(n):t[r]=[n]:t[r]=t[r]?t[r]+", "+n:n)})),t})(e),t);else if(Z.isHeaders(e))for(const[t,n]of e.entries())i(n,t,r);else null!=e&&i(t,e,r);return this}get(e,t){if(e=Ee(e)){const r=Z.findKey(this,e);if(r){const e=this[r];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),r=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let n;for(;n=r.exec(e);)t[n[1]]=n[2];return t}(e);if(Z.isFunction(t))return t.call(this,e,r);if(Z.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=Ee(e)){const r=Z.findKey(this,e);return!(!r||void 0===this[r]||t&&!Ae(0,this[r],r,t))}return!1}delete(e,t){const r=this;let n=!1;function i(e){if(e=Ee(e)){const i=Z.findKey(r,e);!i||t&&!Ae(0,r[i],i,t)||(delete r[i],n=!0)}}return Z.isArray(e)?e.forEach(i):i(e),n}clear(e){const t=Object.keys(this);let r=t.length,n=!1;for(;r--;){const i=t[r];e&&!Ae(0,this[i],i,e,!0)||(delete this[i],n=!0)}return n}normalize(e){const t=this,r={};return Z.forEach(this,((n,i)=>{const s=Z.findKey(r,i);if(s)return t[s]=ke(n),void delete t[i];const a=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,r)=>t.toUpperCase()+r))}(i):String(i).trim();a!==i&&delete t[i],t[a]=ke(n),r[a]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return Z.forEach(this,((r,n)=>{null!=r&&!1!==r&&(t[n]=e&&Z.isArray(r)?r.join(", "):r)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const r=new this(e);return t.forEach((e=>r.set(e))),r}static accessor(e){const t=(this[xe]=this[xe]={accessors:{}}).accessors,r=this.prototype;function n(e){const n=Ee(e);t[n]||(function(e,t){const r=Z.toCamelCase(" "+t);["get","set","has"].forEach((n=>{Object.defineProperty(e,n+r,{value:function(e,r,i){return this[n].call(this,t,e,r,i)},configurable:!0})}))}(r,e),t[n]=!0)}return Z.isArray(e)?e.forEach(n):n(e),this}}Ce.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),Z.reduceDescriptors(Ce.prototype,(({value:e},t)=>{let r=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[r]=e}}})),Z.freezeMethods(Ce);const Te=Ce;function Re(e,t){const r=this||we,n=t||r,i=Te.from(n.headers);let s=n.data;return Z.forEach(e,(function(e){s=e.call(r,s,i.normalize(),t?t.status:void 0)})),i.normalize(),s}function Ne(e){return!(!e||!e.__CANCEL__)}function Ie(e,t,r){X.call(this,null==e?"canceled":e,X.ERR_CANCELED,t,r),this.name="CanceledError"}Z.inherits(Ie,X,{__CANCEL__:!0});const qe=Ie;function De(e,t,r){const n=r.config.validateStatus;r.status&&n&&!n(r.status)?t(new X("Request failed with status code "+r.status,[X.ERR_BAD_REQUEST,X.ERR_BAD_RESPONSE][Math.floor(r.status/100)-4],r.config,r.request,r)):e(r)}const Le=(e,t,r=3)=>{let n=0;const i=function(e,t){e=e||10;const r=new Array(e),n=new Array(e);let i,s=0,a=0;return t=void 0!==t?t:1e3,function(o){const l=Date.now(),c=n[a];i||(i=l),r[s]=o,n[s]=l;let u=a,d=0;for(;u!==s;)d+=r[u++],u%=e;if(s=(s+1)%e,s===a&&(a=(a+1)%e),l-i<t)return;const h=c&&l-c;return h?Math.round(1e3*d/h):void 0}}(50,250);return function(e,t){let r,n,i=0,s=1e3/t;const a=(t,s=Date.now())=>{i=s,r=null,n&&(clearTimeout(n),n=null),e.apply(null,t)};return[(...e)=>{const t=Date.now(),o=t-i;o>=s?a(e,t):(r=e,n||(n=setTimeout((()=>{n=null,a(r)}),s-o)))},()=>r&&a(r)]}((r=>{const s=r.loaded,a=r.lengthComputable?r.total:void 0,o=s-n,l=i(o);n=s,e({loaded:s,total:a,progress:a?s/a:void 0,bytes:o,rate:l||void 0,estimated:l&&a&&s<=a?(a-s)/l:void 0,event:r,lengthComputable:null!=a,[t?"download":"upload"]:!0})}),r)},Oe=(e,t)=>{const r=null!=e;return[n=>t[0]({lengthComputable:r,total:e,loaded:n}),t[1]]},Be=e=>(...t)=>Z.asap((()=>e(...t))),Pe=ye.hasStandardBrowserEnv?((e,t)=>r=>(r=new URL(r,ye.origin),e.protocol===r.protocol&&e.host===r.host&&(t||e.port===r.port)))(new URL(ye.origin),ye.navigator&&/(msie|trident)/i.test(ye.navigator.userAgent)):()=>!0,Me=ye.hasStandardBrowserEnv?{write(e,t,r,n,i,s){const a=[e+"="+encodeURIComponent(t)];Z.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),Z.isString(n)&&a.push("path="+n),Z.isString(i)&&a.push("domain="+i),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function Ue(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const ze=e=>e instanceof Te?{...e}:e;function Fe(e,t){t=t||{};const r={};function n(e,t,r,n){return Z.isPlainObject(e)&&Z.isPlainObject(t)?Z.merge.call({caseless:n},e,t):Z.isPlainObject(t)?Z.merge({},t):Z.isArray(t)?t.slice():t}function i(e,t,r,i){return Z.isUndefined(t)?Z.isUndefined(e)?void 0:n(void 0,e,0,i):n(e,t,0,i)}function s(e,t){if(!Z.isUndefined(t))return n(void 0,t)}function a(e,t){return Z.isUndefined(t)?Z.isUndefined(e)?void 0:n(void 0,e):n(void 0,t)}function o(r,i,s){return s in t?n(r,i):s in e?n(void 0,r):void 0}const l={url:s,method:s,data:s,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,withXSRFToken:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:o,headers:(e,t,r)=>i(ze(e),ze(t),0,!0)};return Z.forEach(Object.keys(Object.assign({},e,t)),(function(n){const s=l[n]||i,a=s(e[n],t[n],n);Z.isUndefined(a)&&s!==o||(r[n]=a)})),r}const je=e=>{const t=Fe({},e);let r,{data:n,withXSRFToken:i,xsrfHeaderName:s,xsrfCookieName:a,headers:o,auth:l}=t;if(t.headers=o=Te.from(o),t.url=ce(Ue(t.baseURL,t.url),e.params,e.paramsSerializer),l&&o.set("Authorization","Basic "+btoa((l.username||"")+":"+(l.password?unescape(encodeURIComponent(l.password)):""))),Z.isFormData(n))if(ye.hasStandardBrowserEnv||ye.hasStandardBrowserWebWorkerEnv)o.setContentType(void 0);else if(!1!==(r=o.getContentType())){const[e,...t]=r?r.split(";").map((e=>e.trim())).filter(Boolean):[];o.setContentType([e||"multipart/form-data",...t].join("; "))}if(ye.hasStandardBrowserEnv&&(i&&Z.isFunction(i)&&(i=i(t)),i||!1!==i&&Pe(t.url))){const e=s&&a&&Me.read(a);e&&o.set(s,e)}return t},He="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,r){const n=je(e);let i=n.data;const s=Te.from(n.headers).normalize();let a,o,l,c,u,{responseType:d,onUploadProgress:h,onDownloadProgress:p}=n;function f(){c&&c(),u&&u(),n.cancelToken&&n.cancelToken.unsubscribe(a),n.signal&&n.signal.removeEventListener("abort",a)}let m=new XMLHttpRequest;function g(){if(!m)return;const n=Te.from("getAllResponseHeaders"in m&&m.getAllResponseHeaders());De((function(e){t(e),f()}),(function(e){r(e),f()}),{data:d&&"text"!==d&&"json"!==d?m.response:m.responseText,status:m.status,statusText:m.statusText,headers:n,config:e,request:m}),m=null}m.open(n.method.toUpperCase(),n.url,!0),m.timeout=n.timeout,"onloadend"in m?m.onloadend=g:m.onreadystatechange=function(){m&&4===m.readyState&&(0!==m.status||m.responseURL&&0===m.responseURL.indexOf("file:"))&&setTimeout(g)},m.onabort=function(){m&&(r(new X("Request aborted",X.ECONNABORTED,e,m)),m=null)},m.onerror=function(){r(new X("Network Error",X.ERR_NETWORK,e,m)),m=null},m.ontimeout=function(){let t=n.timeout?"timeout of "+n.timeout+"ms exceeded":"timeout exceeded";const i=n.transitional||de;n.timeoutErrorMessage&&(t=n.timeoutErrorMessage),r(new X(t,i.clarifyTimeoutError?X.ETIMEDOUT:X.ECONNABORTED,e,m)),m=null},void 0===i&&s.setContentType(null),"setRequestHeader"in m&&Z.forEach(s.toJSON(),(function(e,t){m.setRequestHeader(t,e)})),Z.isUndefined(n.withCredentials)||(m.withCredentials=!!n.withCredentials),d&&"json"!==d&&(m.responseType=n.responseType),p&&([l,u]=Le(p,!0),m.addEventListener("progress",l)),h&&m.upload&&([o,c]=Le(h),m.upload.addEventListener("progress",o),m.upload.addEventListener("loadend",c)),(n.cancelToken||n.signal)&&(a=t=>{m&&(r(!t||t.type?new qe(null,e,m):t),m.abort(),m=null)},n.cancelToken&&n.cancelToken.subscribe(a),n.signal&&(n.signal.aborted?a():n.signal.addEventListener("abort",a)));const b=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(n.url);b&&-1===ye.protocols.indexOf(b)?r(new X("Unsupported protocol "+b+":",X.ERR_BAD_REQUEST,e)):m.send(i||null)}))},Ve=(e,t)=>{const{length:r}=e=e?e.filter(Boolean):[];if(t||r){let r,n=new AbortController;const i=function(e){if(!r){r=!0,a();const t=e instanceof Error?e:this.reason;n.abort(t instanceof X?t:new qe(t instanceof Error?t.message:t))}};let s=t&&setTimeout((()=>{s=null,i(new X(`timeout ${t} of ms exceeded`,X.ETIMEDOUT))}),t);const a=()=>{e&&(s&&clearTimeout(s),s=null,e.forEach((e=>{e.unsubscribe?e.unsubscribe(i):e.removeEventListener("abort",i)})),e=null)};e.forEach((e=>e.addEventListener("abort",i)));const{signal:o}=n;return o.unsubscribe=()=>Z.asap(a),o}},We=function*(e,t){let r=e.byteLength;if(!t||r<t)return void(yield e);let n,i=0;for(;i<r;)n=i+t,yield e.slice(i,n),i=n},Ge=(e,t,r,n)=>{const i=async function*(e,t){for await(const r of async function*(e){if(e[Symbol.asyncIterator])return void(yield*e);const t=e.getReader();try{for(;;){const{done:e,value:r}=await t.read();if(e)break;yield r}}finally{await t.cancel()}}(e))yield*We(r,t)}(e,t);let s,a=0,o=e=>{s||(s=!0,n&&n(e))};return new ReadableStream({async pull(e){try{const{done:t,value:n}=await i.next();if(t)return o(),void e.close();let s=n.byteLength;if(r){let e=a+=s;r(e)}e.enqueue(new Uint8Array(n))}catch(e){throw o(e),e}},cancel:e=>(o(e),i.return())},{highWaterMark:2})},$e="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,Ze=$e&&"function"==typeof ReadableStream,Je=$e&&("function"==typeof TextEncoder?(Ke=new TextEncoder,e=>Ke.encode(e)):async e=>new Uint8Array(await new Response(e).arrayBuffer()));var Ke;const Ye=(e,...t)=>{try{return!!e(...t)}catch(e){return!1}},Xe=Ze&&Ye((()=>{let e=!1;const t=new Request(ye.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t})),Qe=Ze&&Ye((()=>Z.isReadableStream(new Response("").body))),et={stream:Qe&&(e=>e.body)};var tt;$e&&(tt=new Response,["text","arrayBuffer","blob","formData","stream"].forEach((e=>{!et[e]&&(et[e]=Z.isFunction(tt[e])?t=>t[e]():(t,r)=>{throw new X(`Response type '${e}' is not supported`,X.ERR_NOT_SUPPORT,r)})})));const rt={http:null,xhr:He,fetch:$e&&(async e=>{let{url:t,method:r,data:n,signal:i,cancelToken:s,timeout:a,onDownloadProgress:o,onUploadProgress:l,responseType:c,headers:u,withCredentials:d="same-origin",fetchOptions:h}=je(e);c=c?(c+"").toLowerCase():"text";let p,f=Ve([i,s&&s.toAbortSignal()],a);const m=f&&f.unsubscribe&&(()=>{f.unsubscribe()});let g;try{if(l&&Xe&&"get"!==r&&"head"!==r&&0!==(g=await(async(e,t)=>{const r=Z.toFiniteNumber(e.getContentLength());return null==r?(async e=>{if(null==e)return 0;if(Z.isBlob(e))return e.size;if(Z.isSpecCompliantForm(e)){const t=new Request(ye.origin,{method:"POST",body:e});return(await t.arrayBuffer()).byteLength}return Z.isArrayBufferView(e)||Z.isArrayBuffer(e)?e.byteLength:(Z.isURLSearchParams(e)&&(e+=""),Z.isString(e)?(await Je(e)).byteLength:void 0)})(t):r})(u,n))){let e,r=new Request(t,{method:"POST",body:n,duplex:"half"});if(Z.isFormData(n)&&(e=r.headers.get("content-type"))&&u.setContentType(e),r.body){const[e,t]=Oe(g,Le(Be(l)));n=Ge(r.body,65536,e,t)}}Z.isString(d)||(d=d?"include":"omit");const i="credentials"in Request.prototype;p=new Request(t,{...h,signal:f,method:r.toUpperCase(),headers:u.normalize().toJSON(),body:n,duplex:"half",credentials:i?d:void 0});let s=await fetch(p);const a=Qe&&("stream"===c||"response"===c);if(Qe&&(o||a&&m)){const e={};["status","statusText","headers"].forEach((t=>{e[t]=s[t]}));const t=Z.toFiniteNumber(s.headers.get("content-length")),[r,n]=o&&Oe(t,Le(Be(o),!0))||[];s=new Response(Ge(s.body,65536,r,(()=>{n&&n(),m&&m()})),e)}c=c||"text";let b=await et[Z.findKey(et,c)||"text"](s,e);return!a&&m&&m(),await new Promise(((t,r)=>{De(t,r,{data:b,headers:Te.from(s.headers),status:s.status,statusText:s.statusText,config:e,request:p})}))}catch(t){if(m&&m(),t&&"TypeError"===t.name&&/fetch/i.test(t.message))throw Object.assign(new X("Network Error",X.ERR_NETWORK,e,p),{cause:t.cause||t});throw X.from(t,t&&t.code,e,p)}})};Z.forEach(rt,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const nt=e=>`- ${e}`,it=e=>Z.isFunction(e)||null===e||!1===e,st=e=>{e=Z.isArray(e)?e:[e];const{length:t}=e;let r,n;const i={};for(let s=0;s<t;s++){let t;if(r=e[s],n=r,!it(r)&&(n=rt[(t=String(r)).toLowerCase()],void 0===n))throw new X(`Unknown adapter '${t}'`);if(n)break;i[t||"#"+s]=n}if(!n){const e=Object.entries(i).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let r=t?e.length>1?"since :\n"+e.map(nt).join("\n"):" "+nt(e[0]):"as no adapter specified";throw new X("There is no suitable adapter to dispatch the request "+r,"ERR_NOT_SUPPORT")}return n};function at(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new qe(null,e)}function ot(e){return at(e),e.headers=Te.from(e.headers),e.data=Re.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),st(e.adapter||we.adapter)(e).then((function(t){return at(e),t.data=Re.call(e,e.transformResponse,t),t.headers=Te.from(t.headers),t}),(function(t){return Ne(t)||(at(e),t&&t.response&&(t.response.data=Re.call(e,e.transformResponse,t.response),t.response.headers=Te.from(t.response.headers))),Promise.reject(t)}))}const lt={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{lt[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}}));const ct={};lt.transitional=function(e,t,r){function n(e,t){return"[Axios v1.7.9] Transitional option '"+e+"'"+t+(r?". "+r:"")}return(r,i,s)=>{if(!1===e)throw new X(n(i," has been removed"+(t?" in "+t:"")),X.ERR_DEPRECATED);return t&&!ct[i]&&(ct[i]=!0,console.warn(n(i," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(r,i,s)}},lt.spelling=function(e){return(t,r)=>(console.warn(`${r} is likely a misspelling of ${e}`),!0)};const ut={assertOptions:function(e,t,r){if("object"!=typeof e)throw new X("options must be an object",X.ERR_BAD_OPTION_VALUE);const n=Object.keys(e);let i=n.length;for(;i-- >0;){const s=n[i],a=t[s];if(a){const t=e[s],r=void 0===t||a(t,s,e);if(!0!==r)throw new X("option "+s+" must be "+r,X.ERR_BAD_OPTION_VALUE)}else if(!0!==r)throw new X("Unknown option "+s,X.ERR_BAD_OPTION)}},validators:lt},dt=ut.validators;class ht{constructor(e){this.defaults=e,this.interceptors={request:new ue,response:new ue}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t={};Error.captureStackTrace?Error.captureStackTrace(t):t=new Error;const r=t.stack?t.stack.replace(/^.+\n/,""):"";try{e.stack?r&&!String(e.stack).endsWith(r.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+r):e.stack=r}catch(e){}}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=Fe(this.defaults,t);const{transitional:r,paramsSerializer:n,headers:i}=t;void 0!==r&&ut.assertOptions(r,{silentJSONParsing:dt.transitional(dt.boolean),forcedJSONParsing:dt.transitional(dt.boolean),clarifyTimeoutError:dt.transitional(dt.boolean)},!1),null!=n&&(Z.isFunction(n)?t.paramsSerializer={serialize:n}:ut.assertOptions(n,{encode:dt.function,serialize:dt.function},!0)),ut.assertOptions(t,{baseUrl:dt.spelling("baseURL"),withXsrfToken:dt.spelling("withXSRFToken")},!0),t.method=(t.method||this.defaults.method||"get").toLowerCase();let s=i&&Z.merge(i.common,i[t.method]);i&&Z.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete i[e]})),t.headers=Te.concat(s,i);const a=[];let o=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(o=o&&e.synchronous,a.unshift(e.fulfilled,e.rejected))}));const l=[];let c;this.interceptors.response.forEach((function(e){l.push(e.fulfilled,e.rejected)}));let u,d=0;if(!o){const e=[ot.bind(this),void 0];for(e.unshift.apply(e,a),e.push.apply(e,l),u=e.length,c=Promise.resolve(t);d<u;)c=c.then(e[d++],e[d++]);return c}u=a.length;let h=t;for(d=0;d<u;){const e=a[d++],t=a[d++];try{h=e(h)}catch(e){t.call(this,e);break}}try{c=ot.call(this,h)}catch(e){return Promise.reject(e)}for(d=0,u=l.length;d<u;)c=c.then(l[d++],l[d++]);return c}getUri(e){return ce(Ue((e=Fe(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}Z.forEach(["delete","get","head","options"],(function(e){ht.prototype[e]=function(t,r){return this.request(Fe(r||{},{method:e,url:t,data:(r||{}).data}))}})),Z.forEach(["post","put","patch"],(function(e){function t(t){return function(r,n,i){return this.request(Fe(i||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:r,data:n}))}}ht.prototype[e]=t(),ht.prototype[e+"Form"]=t(!0)}));const pt=ht;class ft{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const r=this;this.promise.then((e=>{if(!r._listeners)return;let t=r._listeners.length;for(;t-- >0;)r._listeners[t](e);r._listeners=null})),this.promise.then=e=>{let t;const n=new Promise((e=>{r.subscribe(e),t=e})).then(e);return n.cancel=function(){r.unsubscribe(t)},n},e((function(e,n,i){r.reason||(r.reason=new qe(e,n,i),t(r.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}toAbortSignal(){const e=new AbortController,t=t=>{e.abort(t)};return this.subscribe(t),e.signal.unsubscribe=()=>this.unsubscribe(t),e.signal}static source(){let e;return{token:new ft((function(t){e=t})),cancel:e}}}const mt=ft,gt={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(gt).forEach((([e,t])=>{gt[t]=e}));const bt=gt,yt=function e(t){const r=new pt(t),n=i(pt.prototype.request,r);return Z.extend(n,pt.prototype,r,{allOwnKeys:!0}),Z.extend(n,r,null,{allOwnKeys:!0}),n.create=function(r){return e(Fe(t,r))},n}(we);yt.Axios=pt,yt.CanceledError=qe,yt.CancelToken=mt,yt.isCancel=Ne,yt.VERSION="1.7.9",yt.toFormData=ne,yt.AxiosError=X,yt.Cancel=yt.CanceledError,yt.all=function(e){return Promise.all(e)},yt.spread=function(e){return function(t){return e.apply(null,t)}},yt.isAxiosError=function(e){return Z.isObject(e)&&!0===e.isAxiosError},yt.mergeConfig=Fe,yt.AxiosHeaders=Te,yt.formToJSON=e=>ve(Z.isHTMLForm(e)?new FormData(e):e),yt.getAdapter=st,yt.HttpStatusCode=bt,yt.default=yt;const vt=yt},602:(e,t,r)=>{"use strict";r.d(t,{P2:()=>f});const n=(e,t)=>t.some((t=>e instanceof t));let i,s;const a=new WeakMap,o=new WeakMap,l=new WeakMap;let c={get(e,t,r){if(e instanceof IDBTransaction){if("done"===t)return a.get(e);if("store"===t)return r.objectStoreNames[1]?void 0:r.objectStore(r.objectStoreNames[0])}return h(e[t])},set:(e,t,r)=>(e[t]=r,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function u(e){c=e(c)}function d(e){return"function"==typeof e?(t=e,(s||(s=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(p(this),e),h(this.request)}:function(...e){return h(t.apply(p(this),e))}):(e instanceof IDBTransaction&&function(e){if(a.has(e))return;const t=new Promise(((t,r)=>{const n=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",s),e.removeEventListener("abort",s)},i=()=>{t(),n()},s=()=>{r(e.error||new DOMException("AbortError","AbortError")),n()};e.addEventListener("complete",i),e.addEventListener("error",s),e.addEventListener("abort",s)}));a.set(e,t)}(e),n(e,i||(i=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,c):e);var t}function h(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,r)=>{const n=()=>{e.removeEventListener("success",i),e.removeEventListener("error",s)},i=()=>{t(h(e.result)),n()},s=()=>{r(e.error),n()};e.addEventListener("success",i),e.addEventListener("error",s)}));return l.set(t,e),t}(e);if(o.has(e))return o.get(e);const t=d(e);return t!==e&&(o.set(e,t),l.set(t,e)),t}const p=e=>l.get(e);function f(e,t,{blocked:r,upgrade:n,blocking:i,terminated:s}={}){const a=indexedDB.open(e,t),o=h(a);return n&&a.addEventListener("upgradeneeded",(e=>{n(h(a.result),e.oldVersion,e.newVersion,h(a.transaction),e)})),r&&a.addEventListener("blocked",(e=>r(e.oldVersion,e.newVersion,e))),o.then((e=>{s&&e.addEventListener("close",(()=>s())),i&&e.addEventListener("versionchange",(e=>i(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),o}const m=["get","getKey","getAll","getAllKeys","count"],g=["put","add","delete","clear"],b=new Map;function y(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(b.get(t))return b.get(t);const r=t.replace(/FromIndex$/,""),n=t!==r,i=g.includes(r);if(!(r in(n?IDBIndex:IDBObjectStore).prototype)||!i&&!m.includes(r))return;const s=async function(e,...t){const s=this.transaction(e,i?"readwrite":"readonly");let a=s.store;return n&&(a=a.index(t.shift())),(await Promise.all([a[r](...t),i&&s.done]))[0]};return b.set(t,s),s}u((e=>({...e,get:(t,r,n)=>y(t,r)||e.get(t,r,n),has:(t,r)=>!!y(t,r)||e.has(t,r)})));const v=["continue","continuePrimaryKey","advance"],_={},w=new WeakMap,S=new WeakMap,x={get(e,t){if(!v.includes(t))return e[t];let r=_[t];return r||(r=_[t]=function(...e){w.set(this,S.get(this)[t](...e))}),r}};async function*E(...e){let t=this;if(t instanceof IDBCursor||(t=await t.openCursor(...e)),!t)return;const r=new Proxy(t,x);for(S.set(r,t),l.set(r,p(t));t;)yield r,t=await(w.get(r)||t.continue()),w.delete(r)}function k(e,t){return t===Symbol.asyncIterator&&n(e,[IDBIndex,IDBObjectStore,IDBCursor])||"iterate"===t&&n(e,[IDBIndex,IDBObjectStore])}u((e=>({...e,get:(t,r,n)=>k(t,r)?E:e.get(t,r,n),has:(t,r)=>k(t,r)||e.has(t,r)})))},776:(e,t,r)=>{"use strict";r.d(t,{S4:()=>Da});var n={};r.r(n),r.d(n,{DocumentPosition:()=>Bt,append:()=>gt,appendChild:()=>mt,compareDocumentPosition:()=>Pt,existsOne:()=>xt,filter:()=>vt,find:()=>_t,findAll:()=>Et,findOne:()=>St,findOneChild:()=>wt,getAttributeValue:()=>lt,getChildren:()=>st,getElementById:()=>It,getElements:()=>Nt,getElementsByClassName:()=>Dt,getElementsByTagName:()=>qt,getElementsByTagType:()=>Lt,getFeed:()=>Ut,getInnerHTML:()=>tt,getName:()=>ut,getOuterHTML:()=>et,getParent:()=>at,getSiblings:()=>ot,getText:()=>rt,hasAttrib:()=>ct,hasChildren:()=>_e,innerText:()=>it,isCDATA:()=>ge,isComment:()=>ye,isDocument:()=>ve,isTag:()=>me,isText:()=>be,nextElementSibling:()=>dt,prepend:()=>yt,prependChild:()=>bt,prevElementSibling:()=>ht,removeElement:()=>pt,removeSubsets:()=>Ot,replaceElement:()=>ft,testElement:()=>Rt,textContent:()=>nt,uniqueSort:()=>Mt});var i={};r.r(i),r.d(i,{iX:()=>ne});const s=Symbol("changed"),a=Symbol("classList"),o=Symbol("CustomElements"),l=Symbol("content"),c=Symbol("dataset"),u=Symbol("doctype"),d=Symbol("DOMParser"),h=Symbol("end"),p=Symbol("EventTarget"),f=Symbol("globals"),m=Symbol("image"),g=Symbol("mime"),b=Symbol("MutationObserver"),y=Symbol("next"),v=Symbol("ownerElement"),_=Symbol("prev"),w=Symbol("private"),S=Symbol("sheet"),x=Symbol("start"),E=Symbol("style"),k=Symbol("upgrade"),A=Symbol("value"),C=new Uint16Array('ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map((e=>e.charCodeAt(0)))),T=new Uint16Array("Ȁaglq\tɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map((e=>e.charCodeAt(0))));var R;const N=new Map([[0,65533],[128,8364],[130,8218],[131,402],[132,8222],[133,8230],[134,8224],[135,8225],[136,710],[137,8240],[138,352],[139,8249],[140,338],[142,381],[145,8216],[146,8217],[147,8220],[148,8221],[149,8226],[150,8211],[151,8212],[152,732],[153,8482],[154,353],[155,8250],[156,339],[158,382],[159,376]]),I=null!==(R=String.fromCodePoint)&&void 0!==R?R:function(e){let t="";return e>65535&&(e-=65536,t+=String.fromCharCode(e>>>10&1023|55296),e=56320|1023&e),t+=String.fromCharCode(e),t};var q,D,L,O,B,P,M,U;function z(e){return e>=q.ZERO&&e<=q.NINE}!function(e){e[e.NUM=35]="NUM",e[e.SEMI=59]="SEMI",e[e.EQUALS=61]="EQUALS",e[e.ZERO=48]="ZERO",e[e.NINE=57]="NINE",e[e.LOWER_A=97]="LOWER_A",e[e.LOWER_F=102]="LOWER_F",e[e.LOWER_X=120]="LOWER_X",e[e.LOWER_Z=122]="LOWER_Z",e[e.UPPER_A=65]="UPPER_A",e[e.UPPER_F=70]="UPPER_F",e[e.UPPER_Z=90]="UPPER_Z"}(q||(q={})),function(e){e[e.VALUE_LENGTH=49152]="VALUE_LENGTH",e[e.BRANCH_LENGTH=16256]="BRANCH_LENGTH",e[e.JUMP_TABLE=127]="JUMP_TABLE"}(D||(D={})),function(e){e[e.EntityStart=0]="EntityStart",e[e.NumericStart=1]="NumericStart",e[e.NumericDecimal=2]="NumericDecimal",e[e.NumericHex=3]="NumericHex",e[e.NamedEntity=4]="NamedEntity"}(L||(L={})),(B=O||(O={}))[B.Legacy=0]="Legacy",B[B.Strict=1]="Strict",B[B.Attribute=2]="Attribute";class F{constructor(e,t,r){this.decodeTree=e,this.emitCodePoint=t,this.errors=r,this.state=L.EntityStart,this.consumed=1,this.result=0,this.treeIndex=0,this.excess=1,this.decodeMode=O.Strict}startEntity(e){this.decodeMode=e,this.state=L.EntityStart,this.result=0,this.treeIndex=0,this.excess=1,this.consumed=1}write(e,t){switch(this.state){case L.EntityStart:return e.charCodeAt(t)===q.NUM?(this.state=L.NumericStart,this.consumed+=1,this.stateNumericStart(e,t+1)):(this.state=L.NamedEntity,this.stateNamedEntity(e,t));case L.NumericStart:return this.stateNumericStart(e,t);case L.NumericDecimal:return this.stateNumericDecimal(e,t);case L.NumericHex:return this.stateNumericHex(e,t);case L.NamedEntity:return this.stateNamedEntity(e,t)}}stateNumericStart(e,t){return t>=e.length?-1:(32|e.charCodeAt(t))===q.LOWER_X?(this.state=L.NumericHex,this.consumed+=1,this.stateNumericHex(e,t+1)):(this.state=L.NumericDecimal,this.stateNumericDecimal(e,t))}addToNumericResult(e,t,r,n){if(t!==r){const i=r-t;this.result=this.result*Math.pow(n,i)+Number.parseInt(e.substr(t,i),n),this.consumed+=i}}stateNumericHex(e,t){const r=t;for(;t<e.length;){const i=e.charCodeAt(t);if(!(z(i)||(n=i,n>=q.UPPER_A&&n<=q.UPPER_F||n>=q.LOWER_A&&n<=q.LOWER_F)))return this.addToNumericResult(e,r,t,16),this.emitNumericEntity(i,3);t+=1}var n;return this.addToNumericResult(e,r,t,16),-1}stateNumericDecimal(e,t){const r=t;for(;t<e.length;){const n=e.charCodeAt(t);if(!z(n))return this.addToNumericResult(e,r,t,10),this.emitNumericEntity(n,2);t+=1}return this.addToNumericResult(e,r,t,10),-1}emitNumericEntity(e,t){var r;if(this.consumed<=t)return null===(r=this.errors)||void 0===r||r.absenceOfDigitsInNumericCharacterReference(this.consumed),0;if(e===q.SEMI)this.consumed+=1;else if(this.decodeMode===O.Strict)return 0;return this.emitCodePoint(function(e){var t;return e>=55296&&e<=57343||e>1114111?65533:null!==(t=N.get(e))&&void 0!==t?t:e}(this.result),this.consumed),this.errors&&(e!==q.SEMI&&this.errors.missingSemicolonAfterCharacterReference(),this.errors.validateNumericCharacterReference(this.result)),this.consumed}stateNamedEntity(e,t){const{decodeTree:r}=this;let n=r[this.treeIndex],i=(n&D.VALUE_LENGTH)>>14;for(;t<e.length;t++,this.excess++){const a=e.charCodeAt(t);if(this.treeIndex=j(r,n,this.treeIndex+Math.max(1,i),a),this.treeIndex<0)return 0===this.result||this.decodeMode===O.Attribute&&(0===i||((s=a)===q.EQUALS||function(e){return e>=q.UPPER_A&&e<=q.UPPER_Z||e>=q.LOWER_A&&e<=q.LOWER_Z||z(e)}(s)))?0:this.emitNotTerminatedNamedEntity();if(n=r[this.treeIndex],i=(n&D.VALUE_LENGTH)>>14,0!==i){if(a===q.SEMI)return this.emitNamedEntityData(this.treeIndex,i,this.consumed+this.excess);this.decodeMode!==O.Strict&&(this.result=this.treeIndex,this.consumed+=this.excess,this.excess=0)}}var s;return-1}emitNotTerminatedNamedEntity(){var e;const{result:t,decodeTree:r}=this,n=(r[t]&D.VALUE_LENGTH)>>14;return this.emitNamedEntityData(t,n,this.consumed),null===(e=this.errors)||void 0===e||e.missingSemicolonAfterCharacterReference(),this.consumed}emitNamedEntityData(e,t,r){const{decodeTree:n}=this;return this.emitCodePoint(1===t?n[e]&~D.VALUE_LENGTH:n[e+1],r),3===t&&this.emitCodePoint(n[e+2],r),r}end(){var e;switch(this.state){case L.NamedEntity:return 0===this.result||this.decodeMode===O.Attribute&&this.result!==this.treeIndex?0:this.emitNotTerminatedNamedEntity();case L.NumericDecimal:return this.emitNumericEntity(0,2);case L.NumericHex:return this.emitNumericEntity(0,3);case L.NumericStart:return null===(e=this.errors)||void 0===e||e.absenceOfDigitsInNumericCharacterReference(this.consumed),0;case L.EntityStart:return 0}}}function j(e,t,r,n){const i=(t&D.BRANCH_LENGTH)>>7,s=t&D.JUMP_TABLE;if(0===i)return 0!==s&&n===s?r:-1;if(s){const t=n-s;return t<0||t>=i?-1:e[r+t]-1}let a=r,o=a+i-1;for(;a<=o;){const t=a+o>>>1,r=e[t];if(r<n)a=t+1;else{if(!(r>n))return e[t+i];o=t-1}}return-1}function H(e){return e===P.Space||e===P.NewLine||e===P.Tab||e===P.FormFeed||e===P.CarriageReturn}function V(e){return e===P.Slash||e===P.Gt||H(e)}!function(e){e[e.Tab=9]="Tab",e[e.NewLine=10]="NewLine",e[e.FormFeed=12]="FormFeed",e[e.CarriageReturn=13]="CarriageReturn",e[e.Space=32]="Space",e[e.ExclamationMark=33]="ExclamationMark",e[e.Number=35]="Number",e[e.Amp=38]="Amp",e[e.SingleQuote=39]="SingleQuote",e[e.DoubleQuote=34]="DoubleQuote",e[e.Dash=45]="Dash",e[e.Slash=47]="Slash",e[e.Zero=48]="Zero",e[e.Nine=57]="Nine",e[e.Semi=59]="Semi",e[e.Lt=60]="Lt",e[e.Eq=61]="Eq",e[e.Gt=62]="Gt",e[e.Questionmark=63]="Questionmark",e[e.UpperA=65]="UpperA",e[e.LowerA=97]="LowerA",e[e.UpperF=70]="UpperF",e[e.LowerF=102]="LowerF",e[e.UpperZ=90]="UpperZ",e[e.LowerZ=122]="LowerZ",e[e.LowerX=120]="LowerX",e[e.OpeningSquareBracket=91]="OpeningSquareBracket"}(P||(P={})),function(e){e[e.Text=1]="Text",e[e.BeforeTagName=2]="BeforeTagName",e[e.InTagName=3]="InTagName",e[e.InSelfClosingTag=4]="InSelfClosingTag",e[e.BeforeClosingTagName=5]="BeforeClosingTagName",e[e.InClosingTagName=6]="InClosingTagName",e[e.AfterClosingTagName=7]="AfterClosingTagName",e[e.BeforeAttributeName=8]="BeforeAttributeName",e[e.InAttributeName=9]="InAttributeName",e[e.AfterAttributeName=10]="AfterAttributeName",e[e.BeforeAttributeValue=11]="BeforeAttributeValue",e[e.InAttributeValueDq=12]="InAttributeValueDq",e[e.InAttributeValueSq=13]="InAttributeValueSq",e[e.InAttributeValueNq=14]="InAttributeValueNq",e[e.BeforeDeclaration=15]="BeforeDeclaration",e[e.InDeclaration=16]="InDeclaration",e[e.InProcessingInstruction=17]="InProcessingInstruction",e[e.BeforeComment=18]="BeforeComment",e[e.CDATASequence=19]="CDATASequence",e[e.InSpecialComment=20]="InSpecialComment",e[e.InCommentLike=21]="InCommentLike",e[e.BeforeSpecialS=22]="BeforeSpecialS",e[e.BeforeSpecialT=23]="BeforeSpecialT",e[e.SpecialStartSequence=24]="SpecialStartSequence",e[e.InSpecialTag=25]="InSpecialTag",e[e.InEntity=26]="InEntity"}(M||(M={})),function(e){e[e.NoValue=0]="NoValue",e[e.Unquoted=1]="Unquoted",e[e.Single=2]="Single",e[e.Double=3]="Double"}(U||(U={}));const W={Cdata:new Uint8Array([67,68,65,84,65,91]),CdataEnd:new Uint8Array([93,93,62]),CommentEnd:new Uint8Array([45,45,62]),ScriptEnd:new Uint8Array([60,47,115,99,114,105,112,116]),StyleEnd:new Uint8Array([60,47,115,116,121,108,101]),TitleEnd:new Uint8Array([60,47,116,105,116,108,101]),TextareaEnd:new Uint8Array([60,47,116,101,120,116,97,114,101,97]),XmpEnd:new Uint8Array([60,47,120,109,112])};class G{constructor({xmlMode:e=!1,decodeEntities:t=!0},r){this.cbs=r,this.state=M.Text,this.buffer="",this.sectionStart=0,this.index=0,this.entityStart=0,this.baseState=M.Text,this.isSpecial=!1,this.running=!0,this.offset=0,this.currentSequence=void 0,this.sequenceIndex=0,this.xmlMode=e,this.decodeEntities=t,this.entityDecoder=new F(e?T:C,((e,t)=>this.emitCodePoint(e,t)))}reset(){this.state=M.Text,this.buffer="",this.sectionStart=0,this.index=0,this.baseState=M.Text,this.currentSequence=void 0,this.running=!0,this.offset=0}write(e){this.offset+=this.buffer.length,this.buffer=e,this.parse()}end(){this.running&&this.finish()}pause(){this.running=!1}resume(){this.running=!0,this.index<this.buffer.length+this.offset&&this.parse()}stateText(e){e===P.Lt||!this.decodeEntities&&this.fastForwardTo(P.Lt)?(this.index>this.sectionStart&&this.cbs.ontext(this.sectionStart,this.index),this.state=M.BeforeTagName,this.sectionStart=this.index):this.decodeEntities&&e===P.Amp&&this.startEntity()}stateSpecialStartSequence(e){const t=this.sequenceIndex===this.currentSequence.length;if(t?V(e):(32|e)===this.currentSequence[this.sequenceIndex]){if(!t)return void this.sequenceIndex++}else this.isSpecial=!1;this.sequenceIndex=0,this.state=M.InTagName,this.stateInTagName(e)}stateInSpecialTag(e){if(this.sequenceIndex===this.currentSequence.length){if(e===P.Gt||H(e)){const t=this.index-this.currentSequence.length;if(this.sectionStart<t){const e=this.index;this.index=t,this.cbs.ontext(this.sectionStart,t),this.index=e}return this.isSpecial=!1,this.sectionStart=t+2,void this.stateInClosingTagName(e)}this.sequenceIndex=0}(32|e)===this.currentSequence[this.sequenceIndex]?this.sequenceIndex+=1:0===this.sequenceIndex?this.currentSequence===W.TitleEnd?this.decodeEntities&&e===P.Amp&&this.startEntity():this.fastForwardTo(P.Lt)&&(this.sequenceIndex=1):this.sequenceIndex=Number(e===P.Lt)}stateCDATASequence(e){e===W.Cdata[this.sequenceIndex]?++this.sequenceIndex===W.Cdata.length&&(this.state=M.InCommentLike,this.currentSequence=W.CdataEnd,this.sequenceIndex=0,this.sectionStart=this.index+1):(this.sequenceIndex=0,this.state=M.InDeclaration,this.stateInDeclaration(e))}fastForwardTo(e){for(;++this.index<this.buffer.length+this.offset;)if(this.buffer.charCodeAt(this.index-this.offset)===e)return!0;return this.index=this.buffer.length+this.offset-1,!1}stateInCommentLike(e){e===this.currentSequence[this.sequenceIndex]?++this.sequenceIndex===this.currentSequence.length&&(this.currentSequence===W.CdataEnd?this.cbs.oncdata(this.sectionStart,this.index,2):this.cbs.oncomment(this.sectionStart,this.index,2),this.sequenceIndex=0,this.sectionStart=this.index+1,this.state=M.Text):0===this.sequenceIndex?this.fastForwardTo(this.currentSequence[0])&&(this.sequenceIndex=1):e!==this.currentSequence[this.sequenceIndex-1]&&(this.sequenceIndex=0)}isTagStartChar(e){return this.xmlMode?!V(e):function(e){return e>=P.LowerA&&e<=P.LowerZ||e>=P.UpperA&&e<=P.UpperZ}(e)}startSpecial(e,t){this.isSpecial=!0,this.currentSequence=e,this.sequenceIndex=t,this.state=M.SpecialStartSequence}stateBeforeTagName(e){if(e===P.ExclamationMark)this.state=M.BeforeDeclaration,this.sectionStart=this.index+1;else if(e===P.Questionmark)this.state=M.InProcessingInstruction,this.sectionStart=this.index+1;else if(this.isTagStartChar(e)){const t=32|e;this.sectionStart=this.index,this.xmlMode?this.state=M.InTagName:t===W.ScriptEnd[2]?this.state=M.BeforeSpecialS:t===W.TitleEnd[2]||t===W.XmpEnd[2]?this.state=M.BeforeSpecialT:this.state=M.InTagName}else e===P.Slash?this.state=M.BeforeClosingTagName:(this.state=M.Text,this.stateText(e))}stateInTagName(e){V(e)&&(this.cbs.onopentagname(this.sectionStart,this.index),this.sectionStart=-1,this.state=M.BeforeAttributeName,this.stateBeforeAttributeName(e))}stateBeforeClosingTagName(e){H(e)||(e===P.Gt?this.state=M.Text:(this.state=this.isTagStartChar(e)?M.InClosingTagName:M.InSpecialComment,this.sectionStart=this.index))}stateInClosingTagName(e){(e===P.Gt||H(e))&&(this.cbs.onclosetag(this.sectionStart,this.index),this.sectionStart=-1,this.state=M.AfterClosingTagName,this.stateAfterClosingTagName(e))}stateAfterClosingTagName(e){(e===P.Gt||this.fastForwardTo(P.Gt))&&(this.state=M.Text,this.sectionStart=this.index+1)}stateBeforeAttributeName(e){e===P.Gt?(this.cbs.onopentagend(this.index),this.isSpecial?(this.state=M.InSpecialTag,this.sequenceIndex=0):this.state=M.Text,this.sectionStart=this.index+1):e===P.Slash?this.state=M.InSelfClosingTag:H(e)||(this.state=M.InAttributeName,this.sectionStart=this.index)}stateInSelfClosingTag(e){e===P.Gt?(this.cbs.onselfclosingtag(this.index),this.state=M.Text,this.sectionStart=this.index+1,this.isSpecial=!1):H(e)||(this.state=M.BeforeAttributeName,this.stateBeforeAttributeName(e))}stateInAttributeName(e){(e===P.Eq||V(e))&&(this.cbs.onattribname(this.sectionStart,this.index),this.sectionStart=this.index,this.state=M.AfterAttributeName,this.stateAfterAttributeName(e))}stateAfterAttributeName(e){e===P.Eq?this.state=M.BeforeAttributeValue:e===P.Slash||e===P.Gt?(this.cbs.onattribend(U.NoValue,this.sectionStart),this.sectionStart=-1,this.state=M.BeforeAttributeName,this.stateBeforeAttributeName(e)):H(e)||(this.cbs.onattribend(U.NoValue,this.sectionStart),this.state=M.InAttributeName,this.sectionStart=this.index)}stateBeforeAttributeValue(e){e===P.DoubleQuote?(this.state=M.InAttributeValueDq,this.sectionStart=this.index+1):e===P.SingleQuote?(this.state=M.InAttributeValueSq,this.sectionStart=this.index+1):H(e)||(this.sectionStart=this.index,this.state=M.InAttributeValueNq,this.stateInAttributeValueNoQuotes(e))}handleInAttributeValue(e,t){e===t||!this.decodeEntities&&this.fastForwardTo(t)?(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(t===P.DoubleQuote?U.Double:U.Single,this.index+1),this.state=M.BeforeAttributeName):this.decodeEntities&&e===P.Amp&&this.startEntity()}stateInAttributeValueDoubleQuotes(e){this.handleInAttributeValue(e,P.DoubleQuote)}stateInAttributeValueSingleQuotes(e){this.handleInAttributeValue(e,P.SingleQuote)}stateInAttributeValueNoQuotes(e){H(e)||e===P.Gt?(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(U.Unquoted,this.index),this.state=M.BeforeAttributeName,this.stateBeforeAttributeName(e)):this.decodeEntities&&e===P.Amp&&this.startEntity()}stateBeforeDeclaration(e){e===P.OpeningSquareBracket?(this.state=M.CDATASequence,this.sequenceIndex=0):this.state=e===P.Dash?M.BeforeComment:M.InDeclaration}stateInDeclaration(e){(e===P.Gt||this.fastForwardTo(P.Gt))&&(this.cbs.ondeclaration(this.sectionStart,this.index),this.state=M.Text,this.sectionStart=this.index+1)}stateInProcessingInstruction(e){(e===P.Gt||this.fastForwardTo(P.Gt))&&(this.cbs.onprocessinginstruction(this.sectionStart,this.index),this.state=M.Text,this.sectionStart=this.index+1)}stateBeforeComment(e){e===P.Dash?(this.state=M.InCommentLike,this.currentSequence=W.CommentEnd,this.sequenceIndex=2,this.sectionStart=this.index+1):this.state=M.InDeclaration}stateInSpecialComment(e){(e===P.Gt||this.fastForwardTo(P.Gt))&&(this.cbs.oncomment(this.sectionStart,this.index,0),this.state=M.Text,this.sectionStart=this.index+1)}stateBeforeSpecialS(e){const t=32|e;t===W.ScriptEnd[3]?this.startSpecial(W.ScriptEnd,4):t===W.StyleEnd[3]?this.startSpecial(W.StyleEnd,4):(this.state=M.InTagName,this.stateInTagName(e))}stateBeforeSpecialT(e){switch(32|e){case W.TitleEnd[3]:this.startSpecial(W.TitleEnd,4);break;case W.TextareaEnd[3]:this.startSpecial(W.TextareaEnd,4);break;case W.XmpEnd[3]:this.startSpecial(W.XmpEnd,4);break;default:this.state=M.InTagName,this.stateInTagName(e)}}startEntity(){this.baseState=this.state,this.state=M.InEntity,this.entityStart=this.index,this.entityDecoder.startEntity(this.xmlMode?O.Strict:this.baseState===M.Text||this.baseState===M.InSpecialTag?O.Legacy:O.Attribute)}stateInEntity(){const e=this.entityDecoder.write(this.buffer,this.index-this.offset);e>=0?(this.state=this.baseState,0===e&&(this.index=this.entityStart)):this.index=this.offset+this.buffer.length-1}cleanup(){this.running&&this.sectionStart!==this.index&&(this.state===M.Text||this.state===M.InSpecialTag&&0===this.sequenceIndex?(this.cbs.ontext(this.sectionStart,this.index),this.sectionStart=this.index):this.state!==M.InAttributeValueDq&&this.state!==M.InAttributeValueSq&&this.state!==M.InAttributeValueNq||(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=this.index))}shouldContinue(){return this.index<this.buffer.length+this.offset&&this.running}parse(){for(;this.shouldContinue();){const e=this.buffer.charCodeAt(this.index-this.offset);switch(this.state){case M.Text:this.stateText(e);break;case M.SpecialStartSequence:this.stateSpecialStartSequence(e);break;case M.InSpecialTag:this.stateInSpecialTag(e);break;case M.CDATASequence:this.stateCDATASequence(e);break;case M.InAttributeValueDq:this.stateInAttributeValueDoubleQuotes(e);break;case M.InAttributeName:this.stateInAttributeName(e);break;case M.InCommentLike:this.stateInCommentLike(e);break;case M.InSpecialComment:this.stateInSpecialComment(e);break;case M.BeforeAttributeName:this.stateBeforeAttributeName(e);break;case M.InTagName:this.stateInTagName(e);break;case M.InClosingTagName:this.stateInClosingTagName(e);break;case M.BeforeTagName:this.stateBeforeTagName(e);break;case M.AfterAttributeName:this.stateAfterAttributeName(e);break;case M.InAttributeValueSq:this.stateInAttributeValueSingleQuotes(e);break;case M.BeforeAttributeValue:this.stateBeforeAttributeValue(e);break;case M.BeforeClosingTagName:this.stateBeforeClosingTagName(e);break;case M.AfterClosingTagName:this.stateAfterClosingTagName(e);break;case M.BeforeSpecialS:this.stateBeforeSpecialS(e);break;case M.BeforeSpecialT:this.stateBeforeSpecialT(e);break;case M.InAttributeValueNq:this.stateInAttributeValueNoQuotes(e);break;case M.InSelfClosingTag:this.stateInSelfClosingTag(e);break;case M.InDeclaration:this.stateInDeclaration(e);break;case M.BeforeDeclaration:this.stateBeforeDeclaration(e);break;case M.BeforeComment:this.stateBeforeComment(e);break;case M.InProcessingInstruction:this.stateInProcessingInstruction(e);break;case M.InEntity:this.stateInEntity()}this.index++}this.cleanup()}finish(){this.state===M.InEntity&&(this.entityDecoder.end(),this.state=this.baseState),this.handleTrailingData(),this.cbs.onend()}handleTrailingData(){const e=this.buffer.length+this.offset;this.sectionStart>=e||(this.state===M.InCommentLike?this.currentSequence===W.CdataEnd?this.cbs.oncdata(this.sectionStart,e,0):this.cbs.oncomment(this.sectionStart,e,0):this.state===M.InTagName||this.state===M.BeforeAttributeName||this.state===M.BeforeAttributeValue||this.state===M.AfterAttributeName||this.state===M.InAttributeName||this.state===M.InAttributeValueSq||this.state===M.InAttributeValueDq||this.state===M.InAttributeValueNq||this.state===M.InClosingTagName||this.cbs.ontext(this.sectionStart,e))}emitCodePoint(e,t){this.baseState!==M.Text&&this.baseState!==M.InSpecialTag?(this.sectionStart<this.entityStart&&this.cbs.onattribdata(this.sectionStart,this.entityStart),this.sectionStart=this.entityStart+t,this.index=this.sectionStart-1,this.cbs.onattribentity(e)):(this.sectionStart<this.entityStart&&this.cbs.ontext(this.sectionStart,this.entityStart),this.sectionStart=this.entityStart+t,this.index=this.sectionStart-1,this.cbs.ontextentity(e,this.sectionStart))}}const $=new Set(["input","option","optgroup","select","button","datalist","textarea"]),Z=new Set(["p"]),J=new Set(["thead","tbody"]),K=new Set(["dd","dt"]),Y=new Set(["rt","rp"]),X=new Map([["tr",new Set(["tr","th","td"])],["th",new Set(["th"])],["td",new Set(["thead","th","td"])],["body",new Set(["head","link","script"])],["li",new Set(["li"])],["p",Z],["h1",Z],["h2",Z],["h3",Z],["h4",Z],["h5",Z],["h6",Z],["select",$],["input",$],["output",$],["button",$],["datalist",$],["textarea",$],["option",new Set(["option"])],["optgroup",new Set(["optgroup","option"])],["dd",K],["dt",K],["address",Z],["article",Z],["aside",Z],["blockquote",Z],["details",Z],["div",Z],["dl",Z],["fieldset",Z],["figcaption",Z],["figure",Z],["footer",Z],["form",Z],["header",Z],["hr",Z],["main",Z],["nav",Z],["ol",Z],["pre",Z],["section",Z],["table",Z],["ul",Z],["rt",Y],["rp",Y],["tbody",J],["tfoot",J]]),Q=new Set(["area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr"]),ee=new Set(["math","svg"]),te=new Set(["mi","mo","mn","ms","mtext","annotation-xml","foreignobject","desc","title"]),re=/\s|\//;class ne{constructor(e,t={}){var r,n,i,s,a,o;this.options=t,this.startIndex=0,this.endIndex=0,this.openTagStart=0,this.tagname="",this.attribname="",this.attribvalue="",this.attribs=null,this.stack=[],this.buffers=[],this.bufferOffset=0,this.writeIndex=0,this.ended=!1,this.cbs=null!=e?e:{},this.htmlMode=!this.options.xmlMode,this.lowerCaseTagNames=null!==(r=t.lowerCaseTags)&&void 0!==r?r:this.htmlMode,this.lowerCaseAttributeNames=null!==(n=t.lowerCaseAttributeNames)&&void 0!==n?n:this.htmlMode,this.recognizeSelfClosing=null!==(i=t.recognizeSelfClosing)&&void 0!==i?i:!this.htmlMode,this.tokenizer=new(null!==(s=t.Tokenizer)&&void 0!==s?s:G)(this.options,this),this.foreignContext=[!this.htmlMode],null===(o=(a=this.cbs).onparserinit)||void 0===o||o.call(a,this)}ontext(e,t){var r,n;const i=this.getSlice(e,t);this.endIndex=t-1,null===(n=(r=this.cbs).ontext)||void 0===n||n.call(r,i),this.startIndex=t}ontextentity(e,t){var r,n;this.endIndex=t-1,null===(n=(r=this.cbs).ontext)||void 0===n||n.call(r,I(e)),this.startIndex=t}isVoidElement(e){return this.htmlMode&&Q.has(e)}onopentagname(e,t){this.endIndex=t;let r=this.getSlice(e,t);this.lowerCaseTagNames&&(r=r.toLowerCase()),this.emitOpenTag(r)}emitOpenTag(e){var t,r,n,i;this.openTagStart=this.startIndex,this.tagname=e;const s=this.htmlMode&&X.get(e);if(s)for(;this.stack.length>0&&s.has(this.stack[0]);){const e=this.stack.shift();null===(r=(t=this.cbs).onclosetag)||void 0===r||r.call(t,e,!0)}this.isVoidElement(e)||(this.stack.unshift(e),this.htmlMode&&(ee.has(e)?this.foreignContext.unshift(!0):te.has(e)&&this.foreignContext.unshift(!1))),null===(i=(n=this.cbs).onopentagname)||void 0===i||i.call(n,e),this.cbs.onopentag&&(this.attribs={})}endOpenTag(e){var t,r;this.startIndex=this.openTagStart,this.attribs&&(null===(r=(t=this.cbs).onopentag)||void 0===r||r.call(t,this.tagname,this.attribs,e),this.attribs=null),this.cbs.onclosetag&&this.isVoidElement(this.tagname)&&this.cbs.onclosetag(this.tagname,!0),this.tagname=""}onopentagend(e){this.endIndex=e,this.endOpenTag(!1),this.startIndex=e+1}onclosetag(e,t){var r,n,i,s,a,o,l,c;this.endIndex=t;let u=this.getSlice(e,t);if(this.lowerCaseTagNames&&(u=u.toLowerCase()),this.htmlMode&&(ee.has(u)||te.has(u))&&this.foreignContext.shift(),this.isVoidElement(u))this.htmlMode&&"br"===u&&(null===(s=(i=this.cbs).onopentagname)||void 0===s||s.call(i,"br"),null===(o=(a=this.cbs).onopentag)||void 0===o||o.call(a,"br",{},!0),null===(c=(l=this.cbs).onclosetag)||void 0===c||c.call(l,"br",!1));else{const e=this.stack.indexOf(u);if(-1!==e)for(let t=0;t<=e;t++){const i=this.stack.shift();null===(n=(r=this.cbs).onclosetag)||void 0===n||n.call(r,i,t!==e)}else this.htmlMode&&"p"===u&&(this.emitOpenTag("p"),this.closeCurrentTag(!0))}this.startIndex=t+1}onselfclosingtag(e){this.endIndex=e,this.recognizeSelfClosing||this.foreignContext[0]?(this.closeCurrentTag(!1),this.startIndex=e+1):this.onopentagend(e)}closeCurrentTag(e){var t,r;const n=this.tagname;this.endOpenTag(e),this.stack[0]===n&&(null===(r=(t=this.cbs).onclosetag)||void 0===r||r.call(t,n,!e),this.stack.shift())}onattribname(e,t){this.startIndex=e;const r=this.getSlice(e,t);this.attribname=this.lowerCaseAttributeNames?r.toLowerCase():r}onattribdata(e,t){this.attribvalue+=this.getSlice(e,t)}onattribentity(e){this.attribvalue+=I(e)}onattribend(e,t){var r,n;this.endIndex=t,null===(n=(r=this.cbs).onattribute)||void 0===n||n.call(r,this.attribname,this.attribvalue,e===U.Double?'"':e===U.Single?"'":e===U.NoValue?void 0:null),this.attribs&&!Object.prototype.hasOwnProperty.call(this.attribs,this.attribname)&&(this.attribs[this.attribname]=this.attribvalue),this.attribvalue=""}getInstructionName(e){const t=e.search(re);let r=t<0?e:e.substr(0,t);return this.lowerCaseTagNames&&(r=r.toLowerCase()),r}ondeclaration(e,t){this.endIndex=t;const r=this.getSlice(e,t);if(this.cbs.onprocessinginstruction){const e=this.getInstructionName(r);this.cbs.onprocessinginstruction(`!${e}`,`!${r}`)}this.startIndex=t+1}onprocessinginstruction(e,t){this.endIndex=t;const r=this.getSlice(e,t);if(this.cbs.onprocessinginstruction){const e=this.getInstructionName(r);this.cbs.onprocessinginstruction(`?${e}`,`?${r}`)}this.startIndex=t+1}oncomment(e,t,r){var n,i,s,a;this.endIndex=t,null===(i=(n=this.cbs).oncomment)||void 0===i||i.call(n,this.getSlice(e,t-r)),null===(a=(s=this.cbs).oncommentend)||void 0===a||a.call(s),this.startIndex=t+1}oncdata(e,t,r){var n,i,s,a,o,l,c,u,d,h;this.endIndex=t;const p=this.getSlice(e,t-r);!this.htmlMode||this.options.recognizeCDATA?(null===(i=(n=this.cbs).oncdatastart)||void 0===i||i.call(n),null===(a=(s=this.cbs).ontext)||void 0===a||a.call(s,p),null===(l=(o=this.cbs).oncdataend)||void 0===l||l.call(o)):(null===(u=(c=this.cbs).oncomment)||void 0===u||u.call(c,`[CDATA[${p}]]`),null===(h=(d=this.cbs).oncommentend)||void 0===h||h.call(d)),this.startIndex=t+1}onend(){var e,t;if(this.cbs.onclosetag){this.endIndex=this.startIndex;for(let e=0;e<this.stack.length;e++)this.cbs.onclosetag(this.stack[e],!0)}null===(t=(e=this.cbs).onend)||void 0===t||t.call(e)}reset(){var e,t,r,n;null===(t=(e=this.cbs).onreset)||void 0===t||t.call(e),this.tokenizer.reset(),this.tagname="",this.attribname="",this.attribs=null,this.stack.length=0,this.startIndex=0,this.endIndex=0,null===(n=(r=this.cbs).onparserinit)||void 0===n||n.call(r,this),this.buffers.length=0,this.foreignContext.length=0,this.foreignContext.unshift(!this.htmlMode),this.bufferOffset=0,this.writeIndex=0,this.ended=!1}parseComplete(e){this.reset(),this.end(e)}getSlice(e,t){for(;e-this.bufferOffset>=this.buffers[0].length;)this.shiftBuffer();let r=this.buffers[0].slice(e-this.bufferOffset,t-this.bufferOffset);for(;t-this.bufferOffset>this.buffers[0].length;)this.shiftBuffer(),r+=this.buffers[0].slice(0,t-this.bufferOffset);return r}shiftBuffer(){this.bufferOffset+=this.buffers[0].length,this.writeIndex--,this.buffers.shift()}write(e){var t,r;this.ended?null===(r=(t=this.cbs).onerror)||void 0===r||r.call(t,new Error(".write() after done!")):(this.buffers.push(e),this.tokenizer.running&&(this.tokenizer.write(e),this.writeIndex++))}end(e){var t,r;this.ended?null===(r=(t=this.cbs).onerror)||void 0===r||r.call(t,new Error(".end() after done!")):(e&&this.write(e),this.ended=!0,this.tokenizer.end())}pause(){this.tokenizer.pause()}resume(){for(this.tokenizer.resume();this.tokenizer.running&&this.writeIndex<this.buffers.length;)this.tokenizer.write(this.buffers[this.writeIndex++]);this.ended&&this.tokenizer.end()}parseChunk(e){this.write(e)}done(e){this.end(e)}}var ie,se;(se=ie||(ie={})).Root="root",se.Text="text",se.Directive="directive",se.Comment="comment",se.Script="script",se.Style="style",se.Tag="tag",se.CDATA="cdata",se.Doctype="doctype";const ae=ie.Root,oe=ie.Text,le=ie.Directive,ce=ie.Comment,ue=ie.Script,de=ie.Style,he=ie.Tag,pe=ie.CDATA,fe=ie.Doctype;function me(e){return(t=e).type===ie.Tag||t.type===ie.Script||t.type===ie.Style;var t}function ge(e){return e.type===ie.CDATA}function be(e){return e.type===ie.Text}function ye(e){return e.type===ie.Comment}function ve(e){return e.type===ie.Root}function _e(e){return Object.prototype.hasOwnProperty.call(e,"children")}const we=new Uint16Array('ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map((e=>e.charCodeAt(0)))),Se=new Uint16Array("Ȁaglq\tɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map((e=>e.charCodeAt(0))));var xe;const Ee=new Map([[0,65533],[128,8364],[130,8218],[131,402],[132,8222],[133,8230],[134,8224],[135,8225],[136,710],[137,8240],[138,352],[139,8249],[140,338],[142,381],[145,8216],[146,8217],[147,8220],[148,8221],[149,8226],[150,8211],[151,8212],[152,732],[153,8482],[154,353],[155,8250],[156,339],[158,382],[159,376]]),ke=null!==(xe=String.fromCodePoint)&&void 0!==xe?xe:function(e){let t="";return e>65535&&(e-=65536,t+=String.fromCharCode(e>>>10&1023|55296),e=56320|1023&e),t+=String.fromCharCode(e),t};var Ae,Ce,Te,Re;function Ne(e){return e>=Ae.ZERO&&e<=Ae.NINE}!function(e){e[e.NUM=35]="NUM",e[e.SEMI=59]="SEMI",e[e.EQUALS=61]="EQUALS",e[e.ZERO=48]="ZERO",e[e.NINE=57]="NINE",e[e.LOWER_A=97]="LOWER_A",e[e.LOWER_F=102]="LOWER_F",e[e.LOWER_X=120]="LOWER_X",e[e.LOWER_Z=122]="LOWER_Z",e[e.UPPER_A=65]="UPPER_A",e[e.UPPER_F=70]="UPPER_F",e[e.UPPER_Z=90]="UPPER_Z"}(Ae||(Ae={})),function(e){e[e.VALUE_LENGTH=49152]="VALUE_LENGTH",e[e.BRANCH_LENGTH=16256]="BRANCH_LENGTH",e[e.JUMP_TABLE=127]="JUMP_TABLE"}(Ce||(Ce={})),function(e){e[e.EntityStart=0]="EntityStart",e[e.NumericStart=1]="NumericStart",e[e.NumericDecimal=2]="NumericDecimal",e[e.NumericHex=3]="NumericHex",e[e.NamedEntity=4]="NamedEntity"}(Te||(Te={})),function(e){e[e.Legacy=0]="Legacy",e[e.Strict=1]="Strict",e[e.Attribute=2]="Attribute"}(Re||(Re={}));class Ie{constructor(e,t,r){this.decodeTree=e,this.emitCodePoint=t,this.errors=r,this.state=Te.EntityStart,this.consumed=1,this.result=0,this.treeIndex=0,this.excess=1,this.decodeMode=Re.Strict}startEntity(e){this.decodeMode=e,this.state=Te.EntityStart,this.result=0,this.treeIndex=0,this.excess=1,this.consumed=1}write(e,t){switch(this.state){case Te.EntityStart:return e.charCodeAt(t)===Ae.NUM?(this.state=Te.NumericStart,this.consumed+=1,this.stateNumericStart(e,t+1)):(this.state=Te.NamedEntity,this.stateNamedEntity(e,t));case Te.NumericStart:return this.stateNumericStart(e,t);case Te.NumericDecimal:return this.stateNumericDecimal(e,t);case Te.NumericHex:return this.stateNumericHex(e,t);case Te.NamedEntity:return this.stateNamedEntity(e,t)}}stateNumericStart(e,t){return t>=e.length?-1:(32|e.charCodeAt(t))===Ae.LOWER_X?(this.state=Te.NumericHex,this.consumed+=1,this.stateNumericHex(e,t+1)):(this.state=Te.NumericDecimal,this.stateNumericDecimal(e,t))}addToNumericResult(e,t,r,n){if(t!==r){const i=r-t;this.result=this.result*Math.pow(n,i)+parseInt(e.substr(t,i),n),this.consumed+=i}}stateNumericHex(e,t){const r=t;for(;t<e.length;){const i=e.charCodeAt(t);if(!(Ne(i)||(n=i,n>=Ae.UPPER_A&&n<=Ae.UPPER_F||n>=Ae.LOWER_A&&n<=Ae.LOWER_F)))return this.addToNumericResult(e,r,t,16),this.emitNumericEntity(i,3);t+=1}var n;return this.addToNumericResult(e,r,t,16),-1}stateNumericDecimal(e,t){const r=t;for(;t<e.length;){const n=e.charCodeAt(t);if(!Ne(n))return this.addToNumericResult(e,r,t,10),this.emitNumericEntity(n,2);t+=1}return this.addToNumericResult(e,r,t,10),-1}emitNumericEntity(e,t){var r;if(this.consumed<=t)return null===(r=this.errors)||void 0===r||r.absenceOfDigitsInNumericCharacterReference(this.consumed),0;if(e===Ae.SEMI)this.consumed+=1;else if(this.decodeMode===Re.Strict)return 0;return this.emitCodePoint(function(e){var t;return e>=55296&&e<=57343||e>1114111?65533:null!==(t=Ee.get(e))&&void 0!==t?t:e}(this.result),this.consumed),this.errors&&(e!==Ae.SEMI&&this.errors.missingSemicolonAfterCharacterReference(),this.errors.validateNumericCharacterReference(this.result)),this.consumed}stateNamedEntity(e,t){const{decodeTree:r}=this;let n=r[this.treeIndex],i=(n&Ce.VALUE_LENGTH)>>14;for(;t<e.length;t++,this.excess++){const a=e.charCodeAt(t);if(this.treeIndex=De(r,n,this.treeIndex+Math.max(1,i),a),this.treeIndex<0)return 0===this.result||this.decodeMode===Re.Attribute&&(0===i||((s=a)===Ae.EQUALS||function(e){return e>=Ae.UPPER_A&&e<=Ae.UPPER_Z||e>=Ae.LOWER_A&&e<=Ae.LOWER_Z||Ne(e)}(s)))?0:this.emitNotTerminatedNamedEntity();if(n=r[this.treeIndex],i=(n&Ce.VALUE_LENGTH)>>14,0!==i){if(a===Ae.SEMI)return this.emitNamedEntityData(this.treeIndex,i,this.consumed+this.excess);this.decodeMode!==Re.Strict&&(this.result=this.treeIndex,this.consumed+=this.excess,this.excess=0)}}var s;return-1}emitNotTerminatedNamedEntity(){var e;const{result:t,decodeTree:r}=this,n=(r[t]&Ce.VALUE_LENGTH)>>14;return this.emitNamedEntityData(t,n,this.consumed),null===(e=this.errors)||void 0===e||e.missingSemicolonAfterCharacterReference(),this.consumed}emitNamedEntityData(e,t,r){const{decodeTree:n}=this;return this.emitCodePoint(1===t?n[e]&~Ce.VALUE_LENGTH:n[e+1],r),3===t&&this.emitCodePoint(n[e+2],r),r}end(){var e;switch(this.state){case Te.NamedEntity:return 0===this.result||this.decodeMode===Re.Attribute&&this.result!==this.treeIndex?0:this.emitNotTerminatedNamedEntity();case Te.NumericDecimal:return this.emitNumericEntity(0,2);case Te.NumericHex:return this.emitNumericEntity(0,3);case Te.NumericStart:return null===(e=this.errors)||void 0===e||e.absenceOfDigitsInNumericCharacterReference(this.consumed),0;case Te.EntityStart:return 0}}}function qe(e){let t="";const r=new Ie(e,(e=>t+=ke(e)));return function(e,n){let i=0,s=0;for(;(s=e.indexOf("&",s))>=0;){t+=e.slice(i,s),r.startEntity(n);const a=r.write(e,s+1);if(a<0){i=s+r.end();break}i=s+a,s=0===a?i+1:i}const a=t+e.slice(i);return t="",a}}function De(e,t,r,n){const i=(t&Ce.BRANCH_LENGTH)>>7,s=t&Ce.JUMP_TABLE;if(0===i)return 0!==s&&n===s?r:-1;if(s){const t=n-s;return t<0||t>=i?-1:e[r+t]-1}let a=r,o=a+i-1;for(;a<=o;){const t=a+o>>>1,r=e[t];if(r<n)a=t+1;else{if(!(r>n))return e[t+i];o=t-1}}return-1}function Le(e){for(let t=1;t<e.length;t++)e[t][0]+=e[t-1][0]+1;return e}qe(we),qe(Se),new Map(Le([[9,"&Tab;"],[0,"&NewLine;"],[22,"&excl;"],[0,"&quot;"],[0,"&num;"],[0,"&dollar;"],[0,"&percnt;"],[0,"&amp;"],[0,"&apos;"],[0,"&lpar;"],[0,"&rpar;"],[0,"&ast;"],[0,"&plus;"],[0,"&comma;"],[1,"&period;"],[0,"&sol;"],[10,"&colon;"],[0,"&semi;"],[0,{v:"&lt;",n:8402,o:"&nvlt;"}],[0,{v:"&equals;",n:8421,o:"&bne;"}],[0,{v:"&gt;",n:8402,o:"&nvgt;"}],[0,"&quest;"],[0,"&commat;"],[26,"&lbrack;"],[0,"&bsol;"],[0,"&rbrack;"],[0,"&Hat;"],[0,"&lowbar;"],[0,"&DiacriticalGrave;"],[5,{n:106,o:"&fjlig;"}],[20,"&lbrace;"],[0,"&verbar;"],[0,"&rbrace;"],[34,"&nbsp;"],[0,"&iexcl;"],[0,"&cent;"],[0,"&pound;"],[0,"&curren;"],[0,"&yen;"],[0,"&brvbar;"],[0,"&sect;"],[0,"&die;"],[0,"&copy;"],[0,"&ordf;"],[0,"&laquo;"],[0,"&not;"],[0,"&shy;"],[0,"&circledR;"],[0,"&macr;"],[0,"&deg;"],[0,"&PlusMinus;"],[0,"&sup2;"],[0,"&sup3;"],[0,"&acute;"],[0,"&micro;"],[0,"&para;"],[0,"&centerdot;"],[0,"&cedil;"],[0,"&sup1;"],[0,"&ordm;"],[0,"&raquo;"],[0,"&frac14;"],[0,"&frac12;"],[0,"&frac34;"],[0,"&iquest;"],[0,"&Agrave;"],[0,"&Aacute;"],[0,"&Acirc;"],[0,"&Atilde;"],[0,"&Auml;"],[0,"&angst;"],[0,"&AElig;"],[0,"&Ccedil;"],[0,"&Egrave;"],[0,"&Eacute;"],[0,"&Ecirc;"],[0,"&Euml;"],[0,"&Igrave;"],[0,"&Iacute;"],[0,"&Icirc;"],[0,"&Iuml;"],[0,"&ETH;"],[0,"&Ntilde;"],[0,"&Ograve;"],[0,"&Oacute;"],[0,"&Ocirc;"],[0,"&Otilde;"],[0,"&Ouml;"],[0,"&times;"],[0,"&Oslash;"],[0,"&Ugrave;"],[0,"&Uacute;"],[0,"&Ucirc;"],[0,"&Uuml;"],[0,"&Yacute;"],[0,"&THORN;"],[0,"&szlig;"],[0,"&agrave;"],[0,"&aacute;"],[0,"&acirc;"],[0,"&atilde;"],[0,"&auml;"],[0,"&aring;"],[0,"&aelig;"],[0,"&ccedil;"],[0,"&egrave;"],[0,"&eacute;"],[0,"&ecirc;"],[0,"&euml;"],[0,"&igrave;"],[0,"&iacute;"],[0,"&icirc;"],[0,"&iuml;"],[0,"&eth;"],[0,"&ntilde;"],[0,"&ograve;"],[0,"&oacute;"],[0,"&ocirc;"],[0,"&otilde;"],[0,"&ouml;"],[0,"&div;"],[0,"&oslash;"],[0,"&ugrave;"],[0,"&uacute;"],[0,"&ucirc;"],[0,"&uuml;"],[0,"&yacute;"],[0,"&thorn;"],[0,"&yuml;"],[0,"&Amacr;"],[0,"&amacr;"],[0,"&Abreve;"],[0,"&abreve;"],[0,"&Aogon;"],[0,"&aogon;"],[0,"&Cacute;"],[0,"&cacute;"],[0,"&Ccirc;"],[0,"&ccirc;"],[0,"&Cdot;"],[0,"&cdot;"],[0,"&Ccaron;"],[0,"&ccaron;"],[0,"&Dcaron;"],[0,"&dcaron;"],[0,"&Dstrok;"],[0,"&dstrok;"],[0,"&Emacr;"],[0,"&emacr;"],[2,"&Edot;"],[0,"&edot;"],[0,"&Eogon;"],[0,"&eogon;"],[0,"&Ecaron;"],[0,"&ecaron;"],[0,"&Gcirc;"],[0,"&gcirc;"],[0,"&Gbreve;"],[0,"&gbreve;"],[0,"&Gdot;"],[0,"&gdot;"],[0,"&Gcedil;"],[1,"&Hcirc;"],[0,"&hcirc;"],[0,"&Hstrok;"],[0,"&hstrok;"],[0,"&Itilde;"],[0,"&itilde;"],[0,"&Imacr;"],[0,"&imacr;"],[2,"&Iogon;"],[0,"&iogon;"],[0,"&Idot;"],[0,"&imath;"],[0,"&IJlig;"],[0,"&ijlig;"],[0,"&Jcirc;"],[0,"&jcirc;"],[0,"&Kcedil;"],[0,"&kcedil;"],[0,"&kgreen;"],[0,"&Lacute;"],[0,"&lacute;"],[0,"&Lcedil;"],[0,"&lcedil;"],[0,"&Lcaron;"],[0,"&lcaron;"],[0,"&Lmidot;"],[0,"&lmidot;"],[0,"&Lstrok;"],[0,"&lstrok;"],[0,"&Nacute;"],[0,"&nacute;"],[0,"&Ncedil;"],[0,"&ncedil;"],[0,"&Ncaron;"],[0,"&ncaron;"],[0,"&napos;"],[0,"&ENG;"],[0,"&eng;"],[0,"&Omacr;"],[0,"&omacr;"],[2,"&Odblac;"],[0,"&odblac;"],[0,"&OElig;"],[0,"&oelig;"],[0,"&Racute;"],[0,"&racute;"],[0,"&Rcedil;"],[0,"&rcedil;"],[0,"&Rcaron;"],[0,"&rcaron;"],[0,"&Sacute;"],[0,"&sacute;"],[0,"&Scirc;"],[0,"&scirc;"],[0,"&Scedil;"],[0,"&scedil;"],[0,"&Scaron;"],[0,"&scaron;"],[0,"&Tcedil;"],[0,"&tcedil;"],[0,"&Tcaron;"],[0,"&tcaron;"],[0,"&Tstrok;"],[0,"&tstrok;"],[0,"&Utilde;"],[0,"&utilde;"],[0,"&Umacr;"],[0,"&umacr;"],[0,"&Ubreve;"],[0,"&ubreve;"],[0,"&Uring;"],[0,"&uring;"],[0,"&Udblac;"],[0,"&udblac;"],[0,"&Uogon;"],[0,"&uogon;"],[0,"&Wcirc;"],[0,"&wcirc;"],[0,"&Ycirc;"],[0,"&ycirc;"],[0,"&Yuml;"],[0,"&Zacute;"],[0,"&zacute;"],[0,"&Zdot;"],[0,"&zdot;"],[0,"&Zcaron;"],[0,"&zcaron;"],[19,"&fnof;"],[34,"&imped;"],[63,"&gacute;"],[65,"&jmath;"],[142,"&circ;"],[0,"&caron;"],[16,"&breve;"],[0,"&DiacriticalDot;"],[0,"&ring;"],[0,"&ogon;"],[0,"&DiacriticalTilde;"],[0,"&dblac;"],[51,"&DownBreve;"],[127,"&Alpha;"],[0,"&Beta;"],[0,"&Gamma;"],[0,"&Delta;"],[0,"&Epsilon;"],[0,"&Zeta;"],[0,"&Eta;"],[0,"&Theta;"],[0,"&Iota;"],[0,"&Kappa;"],[0,"&Lambda;"],[0,"&Mu;"],[0,"&Nu;"],[0,"&Xi;"],[0,"&Omicron;"],[0,"&Pi;"],[0,"&Rho;"],[1,"&Sigma;"],[0,"&Tau;"],[0,"&Upsilon;"],[0,"&Phi;"],[0,"&Chi;"],[0,"&Psi;"],[0,"&ohm;"],[7,"&alpha;"],[0,"&beta;"],[0,"&gamma;"],[0,"&delta;"],[0,"&epsi;"],[0,"&zeta;"],[0,"&eta;"],[0,"&theta;"],[0,"&iota;"],[0,"&kappa;"],[0,"&lambda;"],[0,"&mu;"],[0,"&nu;"],[0,"&xi;"],[0,"&omicron;"],[0,"&pi;"],[0,"&rho;"],[0,"&sigmaf;"],[0,"&sigma;"],[0,"&tau;"],[0,"&upsi;"],[0,"&phi;"],[0,"&chi;"],[0,"&psi;"],[0,"&omega;"],[7,"&thetasym;"],[0,"&Upsi;"],[2,"&phiv;"],[0,"&piv;"],[5,"&Gammad;"],[0,"&digamma;"],[18,"&kappav;"],[0,"&rhov;"],[3,"&epsiv;"],[0,"&backepsilon;"],[10,"&IOcy;"],[0,"&DJcy;"],[0,"&GJcy;"],[0,"&Jukcy;"],[0,"&DScy;"],[0,"&Iukcy;"],[0,"&YIcy;"],[0,"&Jsercy;"],[0,"&LJcy;"],[0,"&NJcy;"],[0,"&TSHcy;"],[0,"&KJcy;"],[1,"&Ubrcy;"],[0,"&DZcy;"],[0,"&Acy;"],[0,"&Bcy;"],[0,"&Vcy;"],[0,"&Gcy;"],[0,"&Dcy;"],[0,"&IEcy;"],[0,"&ZHcy;"],[0,"&Zcy;"],[0,"&Icy;"],[0,"&Jcy;"],[0,"&Kcy;"],[0,"&Lcy;"],[0,"&Mcy;"],[0,"&Ncy;"],[0,"&Ocy;"],[0,"&Pcy;"],[0,"&Rcy;"],[0,"&Scy;"],[0,"&Tcy;"],[0,"&Ucy;"],[0,"&Fcy;"],[0,"&KHcy;"],[0,"&TScy;"],[0,"&CHcy;"],[0,"&SHcy;"],[0,"&SHCHcy;"],[0,"&HARDcy;"],[0,"&Ycy;"],[0,"&SOFTcy;"],[0,"&Ecy;"],[0,"&YUcy;"],[0,"&YAcy;"],[0,"&acy;"],[0,"&bcy;"],[0,"&vcy;"],[0,"&gcy;"],[0,"&dcy;"],[0,"&iecy;"],[0,"&zhcy;"],[0,"&zcy;"],[0,"&icy;"],[0,"&jcy;"],[0,"&kcy;"],[0,"&lcy;"],[0,"&mcy;"],[0,"&ncy;"],[0,"&ocy;"],[0,"&pcy;"],[0,"&rcy;"],[0,"&scy;"],[0,"&tcy;"],[0,"&ucy;"],[0,"&fcy;"],[0,"&khcy;"],[0,"&tscy;"],[0,"&chcy;"],[0,"&shcy;"],[0,"&shchcy;"],[0,"&hardcy;"],[0,"&ycy;"],[0,"&softcy;"],[0,"&ecy;"],[0,"&yucy;"],[0,"&yacy;"],[1,"&iocy;"],[0,"&djcy;"],[0,"&gjcy;"],[0,"&jukcy;"],[0,"&dscy;"],[0,"&iukcy;"],[0,"&yicy;"],[0,"&jsercy;"],[0,"&ljcy;"],[0,"&njcy;"],[0,"&tshcy;"],[0,"&kjcy;"],[1,"&ubrcy;"],[0,"&dzcy;"],[7074,"&ensp;"],[0,"&emsp;"],[0,"&emsp13;"],[0,"&emsp14;"],[1,"&numsp;"],[0,"&puncsp;"],[0,"&ThinSpace;"],[0,"&hairsp;"],[0,"&NegativeMediumSpace;"],[0,"&zwnj;"],[0,"&zwj;"],[0,"&lrm;"],[0,"&rlm;"],[0,"&dash;"],[2,"&ndash;"],[0,"&mdash;"],[0,"&horbar;"],[0,"&Verbar;"],[1,"&lsquo;"],[0,"&CloseCurlyQuote;"],[0,"&lsquor;"],[1,"&ldquo;"],[0,"&CloseCurlyDoubleQuote;"],[0,"&bdquo;"],[1,"&dagger;"],[0,"&Dagger;"],[0,"&bull;"],[2,"&nldr;"],[0,"&hellip;"],[9,"&permil;"],[0,"&pertenk;"],[0,"&prime;"],[0,"&Prime;"],[0,"&tprime;"],[0,"&backprime;"],[3,"&lsaquo;"],[0,"&rsaquo;"],[3,"&oline;"],[2,"&caret;"],[1,"&hybull;"],[0,"&frasl;"],[10,"&bsemi;"],[7,"&qprime;"],[7,{v:"&MediumSpace;",n:8202,o:"&ThickSpace;"}],[0,"&NoBreak;"],[0,"&af;"],[0,"&InvisibleTimes;"],[0,"&ic;"],[72,"&euro;"],[46,"&tdot;"],[0,"&DotDot;"],[37,"&complexes;"],[2,"&incare;"],[4,"&gscr;"],[0,"&hamilt;"],[0,"&Hfr;"],[0,"&Hopf;"],[0,"&planckh;"],[0,"&hbar;"],[0,"&imagline;"],[0,"&Ifr;"],[0,"&lagran;"],[0,"&ell;"],[1,"&naturals;"],[0,"&numero;"],[0,"&copysr;"],[0,"&weierp;"],[0,"&Popf;"],[0,"&Qopf;"],[0,"&realine;"],[0,"&real;"],[0,"&reals;"],[0,"&rx;"],[3,"&trade;"],[1,"&integers;"],[2,"&mho;"],[0,"&zeetrf;"],[0,"&iiota;"],[2,"&bernou;"],[0,"&Cayleys;"],[1,"&escr;"],[0,"&Escr;"],[0,"&Fouriertrf;"],[1,"&Mellintrf;"],[0,"&order;"],[0,"&alefsym;"],[0,"&beth;"],[0,"&gimel;"],[0,"&daleth;"],[12,"&CapitalDifferentialD;"],[0,"&dd;"],[0,"&ee;"],[0,"&ii;"],[10,"&frac13;"],[0,"&frac23;"],[0,"&frac15;"],[0,"&frac25;"],[0,"&frac35;"],[0,"&frac45;"],[0,"&frac16;"],[0,"&frac56;"],[0,"&frac18;"],[0,"&frac38;"],[0,"&frac58;"],[0,"&frac78;"],[49,"&larr;"],[0,"&ShortUpArrow;"],[0,"&rarr;"],[0,"&darr;"],[0,"&harr;"],[0,"&updownarrow;"],[0,"&nwarr;"],[0,"&nearr;"],[0,"&LowerRightArrow;"],[0,"&LowerLeftArrow;"],[0,"&nlarr;"],[0,"&nrarr;"],[1,{v:"&rarrw;",n:824,o:"&nrarrw;"}],[0,"&Larr;"],[0,"&Uarr;"],[0,"&Rarr;"],[0,"&Darr;"],[0,"&larrtl;"],[0,"&rarrtl;"],[0,"&LeftTeeArrow;"],[0,"&mapstoup;"],[0,"&map;"],[0,"&DownTeeArrow;"],[1,"&hookleftarrow;"],[0,"&hookrightarrow;"],[0,"&larrlp;"],[0,"&looparrowright;"],[0,"&harrw;"],[0,"&nharr;"],[1,"&lsh;"],[0,"&rsh;"],[0,"&ldsh;"],[0,"&rdsh;"],[1,"&crarr;"],[0,"&cularr;"],[0,"&curarr;"],[2,"&circlearrowleft;"],[0,"&circlearrowright;"],[0,"&leftharpoonup;"],[0,"&DownLeftVector;"],[0,"&RightUpVector;"],[0,"&LeftUpVector;"],[0,"&rharu;"],[0,"&DownRightVector;"],[0,"&dharr;"],[0,"&dharl;"],[0,"&RightArrowLeftArrow;"],[0,"&udarr;"],[0,"&LeftArrowRightArrow;"],[0,"&leftleftarrows;"],[0,"&upuparrows;"],[0,"&rightrightarrows;"],[0,"&ddarr;"],[0,"&leftrightharpoons;"],[0,"&Equilibrium;"],[0,"&nlArr;"],[0,"&nhArr;"],[0,"&nrArr;"],[0,"&DoubleLeftArrow;"],[0,"&DoubleUpArrow;"],[0,"&DoubleRightArrow;"],[0,"&dArr;"],[0,"&DoubleLeftRightArrow;"],[0,"&DoubleUpDownArrow;"],[0,"&nwArr;"],[0,"&neArr;"],[0,"&seArr;"],[0,"&swArr;"],[0,"&lAarr;"],[0,"&rAarr;"],[1,"&zigrarr;"],[6,"&larrb;"],[0,"&rarrb;"],[15,"&DownArrowUpArrow;"],[7,"&loarr;"],[0,"&roarr;"],[0,"&hoarr;"],[0,"&forall;"],[0,"&comp;"],[0,{v:"&part;",n:824,o:"&npart;"}],[0,"&exist;"],[0,"&nexist;"],[0,"&empty;"],[1,"&Del;"],[0,"&Element;"],[0,"&NotElement;"],[1,"&ni;"],[0,"&notni;"],[2,"&prod;"],[0,"&coprod;"],[0,"&sum;"],[0,"&minus;"],[0,"&MinusPlus;"],[0,"&dotplus;"],[1,"&Backslash;"],[0,"&lowast;"],[0,"&compfn;"],[1,"&radic;"],[2,"&prop;"],[0,"&infin;"],[0,"&angrt;"],[0,{v:"&ang;",n:8402,o:"&nang;"}],[0,"&angmsd;"],[0,"&angsph;"],[0,"&mid;"],[0,"&nmid;"],[0,"&DoubleVerticalBar;"],[0,"&NotDoubleVerticalBar;"],[0,"&and;"],[0,"&or;"],[0,{v:"&cap;",n:65024,o:"&caps;"}],[0,{v:"&cup;",n:65024,o:"&cups;"}],[0,"&int;"],[0,"&Int;"],[0,"&iiint;"],[0,"&conint;"],[0,"&Conint;"],[0,"&Cconint;"],[0,"&cwint;"],[0,"&ClockwiseContourIntegral;"],[0,"&awconint;"],[0,"&there4;"],[0,"&becaus;"],[0,"&ratio;"],[0,"&Colon;"],[0,"&dotminus;"],[1,"&mDDot;"],[0,"&homtht;"],[0,{v:"&sim;",n:8402,o:"&nvsim;"}],[0,{v:"&backsim;",n:817,o:"&race;"}],[0,{v:"&ac;",n:819,o:"&acE;"}],[0,"&acd;"],[0,"&VerticalTilde;"],[0,"&NotTilde;"],[0,{v:"&eqsim;",n:824,o:"&nesim;"}],[0,"&sime;"],[0,"&NotTildeEqual;"],[0,"&cong;"],[0,"&simne;"],[0,"&ncong;"],[0,"&ap;"],[0,"&nap;"],[0,"&ape;"],[0,{v:"&apid;",n:824,o:"&napid;"}],[0,"&backcong;"],[0,{v:"&asympeq;",n:8402,o:"&nvap;"}],[0,{v:"&bump;",n:824,o:"&nbump;"}],[0,{v:"&bumpe;",n:824,o:"&nbumpe;"}],[0,{v:"&doteq;",n:824,o:"&nedot;"}],[0,"&doteqdot;"],[0,"&efDot;"],[0,"&erDot;"],[0,"&Assign;"],[0,"&ecolon;"],[0,"&ecir;"],[0,"&circeq;"],[1,"&wedgeq;"],[0,"&veeeq;"],[1,"&triangleq;"],[2,"&equest;"],[0,"&ne;"],[0,{v:"&Congruent;",n:8421,o:"&bnequiv;"}],[0,"&nequiv;"],[1,{v:"&le;",n:8402,o:"&nvle;"}],[0,{v:"&ge;",n:8402,o:"&nvge;"}],[0,{v:"&lE;",n:824,o:"&nlE;"}],[0,{v:"&gE;",n:824,o:"&ngE;"}],[0,{v:"&lnE;",n:65024,o:"&lvertneqq;"}],[0,{v:"&gnE;",n:65024,o:"&gvertneqq;"}],[0,{v:"&ll;",n:new Map(Le([[824,"&nLtv;"],[7577,"&nLt;"]]))}],[0,{v:"&gg;",n:new Map(Le([[824,"&nGtv;"],[7577,"&nGt;"]]))}],[0,"&between;"],[0,"&NotCupCap;"],[0,"&nless;"],[0,"&ngt;"],[0,"&nle;"],[0,"&nge;"],[0,"&lesssim;"],[0,"&GreaterTilde;"],[0,"&nlsim;"],[0,"&ngsim;"],[0,"&LessGreater;"],[0,"&gl;"],[0,"&NotLessGreater;"],[0,"&NotGreaterLess;"],[0,"&pr;"],[0,"&sc;"],[0,"&prcue;"],[0,"&sccue;"],[0,"&PrecedesTilde;"],[0,{v:"&scsim;",n:824,o:"&NotSucceedsTilde;"}],[0,"&NotPrecedes;"],[0,"&NotSucceeds;"],[0,{v:"&sub;",n:8402,o:"&NotSubset;"}],[0,{v:"&sup;",n:8402,o:"&NotSuperset;"}],[0,"&nsub;"],[0,"&nsup;"],[0,"&sube;"],[0,"&supe;"],[0,"&NotSubsetEqual;"],[0,"&NotSupersetEqual;"],[0,{v:"&subne;",n:65024,o:"&varsubsetneq;"}],[0,{v:"&supne;",n:65024,o:"&varsupsetneq;"}],[1,"&cupdot;"],[0,"&UnionPlus;"],[0,{v:"&sqsub;",n:824,o:"&NotSquareSubset;"}],[0,{v:"&sqsup;",n:824,o:"&NotSquareSuperset;"}],[0,"&sqsube;"],[0,"&sqsupe;"],[0,{v:"&sqcap;",n:65024,o:"&sqcaps;"}],[0,{v:"&sqcup;",n:65024,o:"&sqcups;"}],[0,"&CirclePlus;"],[0,"&CircleMinus;"],[0,"&CircleTimes;"],[0,"&osol;"],[0,"&CircleDot;"],[0,"&circledcirc;"],[0,"&circledast;"],[1,"&circleddash;"],[0,"&boxplus;"],[0,"&boxminus;"],[0,"&boxtimes;"],[0,"&dotsquare;"],[0,"&RightTee;"],[0,"&dashv;"],[0,"&DownTee;"],[0,"&bot;"],[1,"&models;"],[0,"&DoubleRightTee;"],[0,"&Vdash;"],[0,"&Vvdash;"],[0,"&VDash;"],[0,"&nvdash;"],[0,"&nvDash;"],[0,"&nVdash;"],[0,"&nVDash;"],[0,"&prurel;"],[1,"&LeftTriangle;"],[0,"&RightTriangle;"],[0,{v:"&LeftTriangleEqual;",n:8402,o:"&nvltrie;"}],[0,{v:"&RightTriangleEqual;",n:8402,o:"&nvrtrie;"}],[0,"&origof;"],[0,"&imof;"],[0,"&multimap;"],[0,"&hercon;"],[0,"&intcal;"],[0,"&veebar;"],[1,"&barvee;"],[0,"&angrtvb;"],[0,"&lrtri;"],[0,"&bigwedge;"],[0,"&bigvee;"],[0,"&bigcap;"],[0,"&bigcup;"],[0,"&diam;"],[0,"&sdot;"],[0,"&sstarf;"],[0,"&divideontimes;"],[0,"&bowtie;"],[0,"&ltimes;"],[0,"&rtimes;"],[0,"&leftthreetimes;"],[0,"&rightthreetimes;"],[0,"&backsimeq;"],[0,"&curlyvee;"],[0,"&curlywedge;"],[0,"&Sub;"],[0,"&Sup;"],[0,"&Cap;"],[0,"&Cup;"],[0,"&fork;"],[0,"&epar;"],[0,"&lessdot;"],[0,"&gtdot;"],[0,{v:"&Ll;",n:824,o:"&nLl;"}],[0,{v:"&Gg;",n:824,o:"&nGg;"}],[0,{v:"&leg;",n:65024,o:"&lesg;"}],[0,{v:"&gel;",n:65024,o:"&gesl;"}],[2,"&cuepr;"],[0,"&cuesc;"],[0,"&NotPrecedesSlantEqual;"],[0,"&NotSucceedsSlantEqual;"],[0,"&NotSquareSubsetEqual;"],[0,"&NotSquareSupersetEqual;"],[2,"&lnsim;"],[0,"&gnsim;"],[0,"&precnsim;"],[0,"&scnsim;"],[0,"&nltri;"],[0,"&NotRightTriangle;"],[0,"&nltrie;"],[0,"&NotRightTriangleEqual;"],[0,"&vellip;"],[0,"&ctdot;"],[0,"&utdot;"],[0,"&dtdot;"],[0,"&disin;"],[0,"&isinsv;"],[0,"&isins;"],[0,{v:"&isindot;",n:824,o:"&notindot;"}],[0,"&notinvc;"],[0,"&notinvb;"],[1,{v:"&isinE;",n:824,o:"&notinE;"}],[0,"&nisd;"],[0,"&xnis;"],[0,"&nis;"],[0,"&notnivc;"],[0,"&notnivb;"],[6,"&barwed;"],[0,"&Barwed;"],[1,"&lceil;"],[0,"&rceil;"],[0,"&LeftFloor;"],[0,"&rfloor;"],[0,"&drcrop;"],[0,"&dlcrop;"],[0,"&urcrop;"],[0,"&ulcrop;"],[0,"&bnot;"],[1,"&profline;"],[0,"&profsurf;"],[1,"&telrec;"],[0,"&target;"],[5,"&ulcorn;"],[0,"&urcorn;"],[0,"&dlcorn;"],[0,"&drcorn;"],[2,"&frown;"],[0,"&smile;"],[9,"&cylcty;"],[0,"&profalar;"],[7,"&topbot;"],[6,"&ovbar;"],[1,"&solbar;"],[60,"&angzarr;"],[51,"&lmoustache;"],[0,"&rmoustache;"],[2,"&OverBracket;"],[0,"&bbrk;"],[0,"&bbrktbrk;"],[37,"&OverParenthesis;"],[0,"&UnderParenthesis;"],[0,"&OverBrace;"],[0,"&UnderBrace;"],[2,"&trpezium;"],[4,"&elinters;"],[59,"&blank;"],[164,"&circledS;"],[55,"&boxh;"],[1,"&boxv;"],[9,"&boxdr;"],[3,"&boxdl;"],[3,"&boxur;"],[3,"&boxul;"],[3,"&boxvr;"],[7,"&boxvl;"],[7,"&boxhd;"],[7,"&boxhu;"],[7,"&boxvh;"],[19,"&boxH;"],[0,"&boxV;"],[0,"&boxdR;"],[0,"&boxDr;"],[0,"&boxDR;"],[0,"&boxdL;"],[0,"&boxDl;"],[0,"&boxDL;"],[0,"&boxuR;"],[0,"&boxUr;"],[0,"&boxUR;"],[0,"&boxuL;"],[0,"&boxUl;"],[0,"&boxUL;"],[0,"&boxvR;"],[0,"&boxVr;"],[0,"&boxVR;"],[0,"&boxvL;"],[0,"&boxVl;"],[0,"&boxVL;"],[0,"&boxHd;"],[0,"&boxhD;"],[0,"&boxHD;"],[0,"&boxHu;"],[0,"&boxhU;"],[0,"&boxHU;"],[0,"&boxvH;"],[0,"&boxVh;"],[0,"&boxVH;"],[19,"&uhblk;"],[3,"&lhblk;"],[3,"&block;"],[8,"&blk14;"],[0,"&blk12;"],[0,"&blk34;"],[13,"&square;"],[8,"&blacksquare;"],[0,"&EmptyVerySmallSquare;"],[1,"&rect;"],[0,"&marker;"],[2,"&fltns;"],[1,"&bigtriangleup;"],[0,"&blacktriangle;"],[0,"&triangle;"],[2,"&blacktriangleright;"],[0,"&rtri;"],[3,"&bigtriangledown;"],[0,"&blacktriangledown;"],[0,"&dtri;"],[2,"&blacktriangleleft;"],[0,"&ltri;"],[6,"&loz;"],[0,"&cir;"],[32,"&tridot;"],[2,"&bigcirc;"],[8,"&ultri;"],[0,"&urtri;"],[0,"&lltri;"],[0,"&EmptySmallSquare;"],[0,"&FilledSmallSquare;"],[8,"&bigstar;"],[0,"&star;"],[7,"&phone;"],[49,"&female;"],[1,"&male;"],[29,"&spades;"],[2,"&clubs;"],[1,"&hearts;"],[0,"&diamondsuit;"],[3,"&sung;"],[2,"&flat;"],[0,"&natural;"],[0,"&sharp;"],[163,"&check;"],[3,"&cross;"],[8,"&malt;"],[21,"&sext;"],[33,"&VerticalSeparator;"],[25,"&lbbrk;"],[0,"&rbbrk;"],[84,"&bsolhsub;"],[0,"&suphsol;"],[28,"&LeftDoubleBracket;"],[0,"&RightDoubleBracket;"],[0,"&lang;"],[0,"&rang;"],[0,"&Lang;"],[0,"&Rang;"],[0,"&loang;"],[0,"&roang;"],[7,"&longleftarrow;"],[0,"&longrightarrow;"],[0,"&longleftrightarrow;"],[0,"&DoubleLongLeftArrow;"],[0,"&DoubleLongRightArrow;"],[0,"&DoubleLongLeftRightArrow;"],[1,"&longmapsto;"],[2,"&dzigrarr;"],[258,"&nvlArr;"],[0,"&nvrArr;"],[0,"&nvHarr;"],[0,"&Map;"],[6,"&lbarr;"],[0,"&bkarow;"],[0,"&lBarr;"],[0,"&dbkarow;"],[0,"&drbkarow;"],[0,"&DDotrahd;"],[0,"&UpArrowBar;"],[0,"&DownArrowBar;"],[2,"&Rarrtl;"],[2,"&latail;"],[0,"&ratail;"],[0,"&lAtail;"],[0,"&rAtail;"],[0,"&larrfs;"],[0,"&rarrfs;"],[0,"&larrbfs;"],[0,"&rarrbfs;"],[2,"&nwarhk;"],[0,"&nearhk;"],[0,"&hksearow;"],[0,"&hkswarow;"],[0,"&nwnear;"],[0,"&nesear;"],[0,"&seswar;"],[0,"&swnwar;"],[8,{v:"&rarrc;",n:824,o:"&nrarrc;"}],[1,"&cudarrr;"],[0,"&ldca;"],[0,"&rdca;"],[0,"&cudarrl;"],[0,"&larrpl;"],[2,"&curarrm;"],[0,"&cularrp;"],[7,"&rarrpl;"],[2,"&harrcir;"],[0,"&Uarrocir;"],[0,"&lurdshar;"],[0,"&ldrushar;"],[2,"&LeftRightVector;"],[0,"&RightUpDownVector;"],[0,"&DownLeftRightVector;"],[0,"&LeftUpDownVector;"],[0,"&LeftVectorBar;"],[0,"&RightVectorBar;"],[0,"&RightUpVectorBar;"],[0,"&RightDownVectorBar;"],[0,"&DownLeftVectorBar;"],[0,"&DownRightVectorBar;"],[0,"&LeftUpVectorBar;"],[0,"&LeftDownVectorBar;"],[0,"&LeftTeeVector;"],[0,"&RightTeeVector;"],[0,"&RightUpTeeVector;"],[0,"&RightDownTeeVector;"],[0,"&DownLeftTeeVector;"],[0,"&DownRightTeeVector;"],[0,"&LeftUpTeeVector;"],[0,"&LeftDownTeeVector;"],[0,"&lHar;"],[0,"&uHar;"],[0,"&rHar;"],[0,"&dHar;"],[0,"&luruhar;"],[0,"&ldrdhar;"],[0,"&ruluhar;"],[0,"&rdldhar;"],[0,"&lharul;"],[0,"&llhard;"],[0,"&rharul;"],[0,"&lrhard;"],[0,"&udhar;"],[0,"&duhar;"],[0,"&RoundImplies;"],[0,"&erarr;"],[0,"&simrarr;"],[0,"&larrsim;"],[0,"&rarrsim;"],[0,"&rarrap;"],[0,"&ltlarr;"],[1,"&gtrarr;"],[0,"&subrarr;"],[1,"&suplarr;"],[0,"&lfisht;"],[0,"&rfisht;"],[0,"&ufisht;"],[0,"&dfisht;"],[5,"&lopar;"],[0,"&ropar;"],[4,"&lbrke;"],[0,"&rbrke;"],[0,"&lbrkslu;"],[0,"&rbrksld;"],[0,"&lbrksld;"],[0,"&rbrkslu;"],[0,"&langd;"],[0,"&rangd;"],[0,"&lparlt;"],[0,"&rpargt;"],[0,"&gtlPar;"],[0,"&ltrPar;"],[3,"&vzigzag;"],[1,"&vangrt;"],[0,"&angrtvbd;"],[6,"&ange;"],[0,"&range;"],[0,"&dwangle;"],[0,"&uwangle;"],[0,"&angmsdaa;"],[0,"&angmsdab;"],[0,"&angmsdac;"],[0,"&angmsdad;"],[0,"&angmsdae;"],[0,"&angmsdaf;"],[0,"&angmsdag;"],[0,"&angmsdah;"],[0,"&bemptyv;"],[0,"&demptyv;"],[0,"&cemptyv;"],[0,"&raemptyv;"],[0,"&laemptyv;"],[0,"&ohbar;"],[0,"&omid;"],[0,"&opar;"],[1,"&operp;"],[1,"&olcross;"],[0,"&odsold;"],[1,"&olcir;"],[0,"&ofcir;"],[0,"&olt;"],[0,"&ogt;"],[0,"&cirscir;"],[0,"&cirE;"],[0,"&solb;"],[0,"&bsolb;"],[3,"&boxbox;"],[3,"&trisb;"],[0,"&rtriltri;"],[0,{v:"&LeftTriangleBar;",n:824,o:"&NotLeftTriangleBar;"}],[0,{v:"&RightTriangleBar;",n:824,o:"&NotRightTriangleBar;"}],[11,"&iinfin;"],[0,"&infintie;"],[0,"&nvinfin;"],[4,"&eparsl;"],[0,"&smeparsl;"],[0,"&eqvparsl;"],[5,"&blacklozenge;"],[8,"&RuleDelayed;"],[1,"&dsol;"],[9,"&bigodot;"],[0,"&bigoplus;"],[0,"&bigotimes;"],[1,"&biguplus;"],[1,"&bigsqcup;"],[5,"&iiiint;"],[0,"&fpartint;"],[2,"&cirfnint;"],[0,"&awint;"],[0,"&rppolint;"],[0,"&scpolint;"],[0,"&npolint;"],[0,"&pointint;"],[0,"&quatint;"],[0,"&intlarhk;"],[10,"&pluscir;"],[0,"&plusacir;"],[0,"&simplus;"],[0,"&plusdu;"],[0,"&plussim;"],[0,"&plustwo;"],[1,"&mcomma;"],[0,"&minusdu;"],[2,"&loplus;"],[0,"&roplus;"],[0,"&Cross;"],[0,"&timesd;"],[0,"&timesbar;"],[1,"&smashp;"],[0,"&lotimes;"],[0,"&rotimes;"],[0,"&otimesas;"],[0,"&Otimes;"],[0,"&odiv;"],[0,"&triplus;"],[0,"&triminus;"],[0,"&tritime;"],[0,"&intprod;"],[2,"&amalg;"],[0,"&capdot;"],[1,"&ncup;"],[0,"&ncap;"],[0,"&capand;"],[0,"&cupor;"],[0,"&cupcap;"],[0,"&capcup;"],[0,"&cupbrcap;"],[0,"&capbrcup;"],[0,"&cupcup;"],[0,"&capcap;"],[0,"&ccups;"],[0,"&ccaps;"],[2,"&ccupssm;"],[2,"&And;"],[0,"&Or;"],[0,"&andand;"],[0,"&oror;"],[0,"&orslope;"],[0,"&andslope;"],[1,"&andv;"],[0,"&orv;"],[0,"&andd;"],[0,"&ord;"],[1,"&wedbar;"],[6,"&sdote;"],[3,"&simdot;"],[2,{v:"&congdot;",n:824,o:"&ncongdot;"}],[0,"&easter;"],[0,"&apacir;"],[0,{v:"&apE;",n:824,o:"&napE;"}],[0,"&eplus;"],[0,"&pluse;"],[0,"&Esim;"],[0,"&Colone;"],[0,"&Equal;"],[1,"&ddotseq;"],[0,"&equivDD;"],[0,"&ltcir;"],[0,"&gtcir;"],[0,"&ltquest;"],[0,"&gtquest;"],[0,{v:"&leqslant;",n:824,o:"&nleqslant;"}],[0,{v:"&geqslant;",n:824,o:"&ngeqslant;"}],[0,"&lesdot;"],[0,"&gesdot;"],[0,"&lesdoto;"],[0,"&gesdoto;"],[0,"&lesdotor;"],[0,"&gesdotol;"],[0,"&lap;"],[0,"&gap;"],[0,"&lne;"],[0,"&gne;"],[0,"&lnap;"],[0,"&gnap;"],[0,"&lEg;"],[0,"&gEl;"],[0,"&lsime;"],[0,"&gsime;"],[0,"&lsimg;"],[0,"&gsiml;"],[0,"&lgE;"],[0,"&glE;"],[0,"&lesges;"],[0,"&gesles;"],[0,"&els;"],[0,"&egs;"],[0,"&elsdot;"],[0,"&egsdot;"],[0,"&el;"],[0,"&eg;"],[2,"&siml;"],[0,"&simg;"],[0,"&simlE;"],[0,"&simgE;"],[0,{v:"&LessLess;",n:824,o:"&NotNestedLessLess;"}],[0,{v:"&GreaterGreater;",n:824,o:"&NotNestedGreaterGreater;"}],[1,"&glj;"],[0,"&gla;"],[0,"&ltcc;"],[0,"&gtcc;"],[0,"&lescc;"],[0,"&gescc;"],[0,"&smt;"],[0,"&lat;"],[0,{v:"&smte;",n:65024,o:"&smtes;"}],[0,{v:"&late;",n:65024,o:"&lates;"}],[0,"&bumpE;"],[0,{v:"&PrecedesEqual;",n:824,o:"&NotPrecedesEqual;"}],[0,{v:"&sce;",n:824,o:"&NotSucceedsEqual;"}],[2,"&prE;"],[0,"&scE;"],[0,"&precneqq;"],[0,"&scnE;"],[0,"&prap;"],[0,"&scap;"],[0,"&precnapprox;"],[0,"&scnap;"],[0,"&Pr;"],[0,"&Sc;"],[0,"&subdot;"],[0,"&supdot;"],[0,"&subplus;"],[0,"&supplus;"],[0,"&submult;"],[0,"&supmult;"],[0,"&subedot;"],[0,"&supedot;"],[0,{v:"&subE;",n:824,o:"&nsubE;"}],[0,{v:"&supE;",n:824,o:"&nsupE;"}],[0,"&subsim;"],[0,"&supsim;"],[2,{v:"&subnE;",n:65024,o:"&varsubsetneqq;"}],[0,{v:"&supnE;",n:65024,o:"&varsupsetneqq;"}],[2,"&csub;"],[0,"&csup;"],[0,"&csube;"],[0,"&csupe;"],[0,"&subsup;"],[0,"&supsub;"],[0,"&subsub;"],[0,"&supsup;"],[0,"&suphsub;"],[0,"&supdsub;"],[0,"&forkv;"],[0,"&topfork;"],[0,"&mlcp;"],[8,"&Dashv;"],[1,"&Vdashl;"],[0,"&Barv;"],[0,"&vBar;"],[0,"&vBarv;"],[1,"&Vbar;"],[0,"&Not;"],[0,"&bNot;"],[0,"&rnmid;"],[0,"&cirmid;"],[0,"&midcir;"],[0,"&topcir;"],[0,"&nhpar;"],[0,"&parsim;"],[9,{v:"&parsl;",n:8421,o:"&nparsl;"}],[44343,{n:new Map(Le([[56476,"&Ascr;"],[1,"&Cscr;"],[0,"&Dscr;"],[2,"&Gscr;"],[2,"&Jscr;"],[0,"&Kscr;"],[2,"&Nscr;"],[0,"&Oscr;"],[0,"&Pscr;"],[0,"&Qscr;"],[1,"&Sscr;"],[0,"&Tscr;"],[0,"&Uscr;"],[0,"&Vscr;"],[0,"&Wscr;"],[0,"&Xscr;"],[0,"&Yscr;"],[0,"&Zscr;"],[0,"&ascr;"],[0,"&bscr;"],[0,"&cscr;"],[0,"&dscr;"],[1,"&fscr;"],[1,"&hscr;"],[0,"&iscr;"],[0,"&jscr;"],[0,"&kscr;"],[0,"&lscr;"],[0,"&mscr;"],[0,"&nscr;"],[1,"&pscr;"],[0,"&qscr;"],[0,"&rscr;"],[0,"&sscr;"],[0,"&tscr;"],[0,"&uscr;"],[0,"&vscr;"],[0,"&wscr;"],[0,"&xscr;"],[0,"&yscr;"],[0,"&zscr;"],[52,"&Afr;"],[0,"&Bfr;"],[1,"&Dfr;"],[0,"&Efr;"],[0,"&Ffr;"],[0,"&Gfr;"],[2,"&Jfr;"],[0,"&Kfr;"],[0,"&Lfr;"],[0,"&Mfr;"],[0,"&Nfr;"],[0,"&Ofr;"],[0,"&Pfr;"],[0,"&Qfr;"],[1,"&Sfr;"],[0,"&Tfr;"],[0,"&Ufr;"],[0,"&Vfr;"],[0,"&Wfr;"],[0,"&Xfr;"],[0,"&Yfr;"],[1,"&afr;"],[0,"&bfr;"],[0,"&cfr;"],[0,"&dfr;"],[0,"&efr;"],[0,"&ffr;"],[0,"&gfr;"],[0,"&hfr;"],[0,"&ifr;"],[0,"&jfr;"],[0,"&kfr;"],[0,"&lfr;"],[0,"&mfr;"],[0,"&nfr;"],[0,"&ofr;"],[0,"&pfr;"],[0,"&qfr;"],[0,"&rfr;"],[0,"&sfr;"],[0,"&tfr;"],[0,"&ufr;"],[0,"&vfr;"],[0,"&wfr;"],[0,"&xfr;"],[0,"&yfr;"],[0,"&zfr;"],[0,"&Aopf;"],[0,"&Bopf;"],[1,"&Dopf;"],[0,"&Eopf;"],[0,"&Fopf;"],[0,"&Gopf;"],[1,"&Iopf;"],[0,"&Jopf;"],[0,"&Kopf;"],[0,"&Lopf;"],[0,"&Mopf;"],[1,"&Oopf;"],[3,"&Sopf;"],[0,"&Topf;"],[0,"&Uopf;"],[0,"&Vopf;"],[0,"&Wopf;"],[0,"&Xopf;"],[0,"&Yopf;"],[1,"&aopf;"],[0,"&bopf;"],[0,"&copf;"],[0,"&dopf;"],[0,"&eopf;"],[0,"&fopf;"],[0,"&gopf;"],[0,"&hopf;"],[0,"&iopf;"],[0,"&jopf;"],[0,"&kopf;"],[0,"&lopf;"],[0,"&mopf;"],[0,"&nopf;"],[0,"&oopf;"],[0,"&popf;"],[0,"&qopf;"],[0,"&ropf;"],[0,"&sopf;"],[0,"&topf;"],[0,"&uopf;"],[0,"&vopf;"],[0,"&wopf;"],[0,"&xopf;"],[0,"&yopf;"],[0,"&zopf;"]]))}],[8906,"&fflig;"],[0,"&filig;"],[0,"&fllig;"],[0,"&ffilig;"],[0,"&ffllig;"]]));const Oe=/["&'<>$\x80-\uFFFF]/g,Be=new Map([[34,"&quot;"],[38,"&amp;"],[39,"&apos;"],[60,"&lt;"],[62,"&gt;"]]),Pe=null!=String.prototype.codePointAt?(e,t)=>e.codePointAt(t):(e,t)=>55296==(64512&e.charCodeAt(t))?1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536:e.charCodeAt(t);function Me(e){let t,r="",n=0;for(;null!==(t=Oe.exec(e));){const i=t.index,s=e.charCodeAt(i),a=Be.get(s);void 0!==a?(r+=e.substring(n,i)+a,n=i+1):(r+=`${e.substring(n,i)}&#x${Pe(e,i).toString(16)};`,n=Oe.lastIndex+=Number(55296==(64512&s)))}return r+e.substr(n)}function Ue(e,t){return function(r){let n,i=0,s="";for(;n=e.exec(r);)i!==n.index&&(s+=r.substring(i,n.index)),s+=t.get(n[0].charCodeAt(0)),i=n.index+1;return s+r.substring(i)}}Ue(/[&<>'"]/g,Be);const ze=Ue(/["&\u00A0]/g,new Map([[34,"&quot;"],[38,"&amp;"],[160,"&nbsp;"]])),Fe=Ue(/[&<>\u00A0]/g,new Map([[38,"&amp;"],[60,"&lt;"],[62,"&gt;"],[160,"&nbsp;"]]));var je,He;!function(e){e[e.XML=0]="XML",e[e.HTML=1]="HTML"}(je||(je={})),function(e){e[e.UTF8=0]="UTF8",e[e.ASCII=1]="ASCII",e[e.Extensive=2]="Extensive",e[e.Attribute=3]="Attribute",e[e.Text=4]="Text"}(He||(He={}));const Ve=new Map(["altGlyph","altGlyphDef","altGlyphItem","animateColor","animateMotion","animateTransform","clipPath","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","foreignObject","glyphRef","linearGradient","radialGradient","textPath"].map((e=>[e.toLowerCase(),e]))),We=new Map(["definitionURL","attributeName","attributeType","baseFrequency","baseProfile","calcMode","clipPathUnits","diffuseConstant","edgeMode","filterUnits","glyphRef","gradientTransform","gradientUnits","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","lengthAdjust","limitingConeAngle","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","numOctaves","pathLength","patternContentUnits","patternTransform","patternUnits","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","specularConstant","specularExponent","spreadMethod","startOffset","stdDeviation","stitchTiles","surfaceScale","systemLanguage","tableValues","targetX","targetY","textLength","viewBox","viewTarget","xChannelSelector","yChannelSelector","zoomAndPan"].map((e=>[e.toLowerCase(),e]))),Ge=new Set(["style","script","xmp","iframe","noembed","noframes","plaintext","noscript"]);function $e(e){return e.replace(/"/g,"&quot;")}const Ze=new Set(["area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr"]);function Je(e,t={}){const r="length"in e?e:[e];let n="";for(let e=0;e<r.length;e++)n+=Ye(r[e],t);return n}const Ke=Je;function Ye(e,t){switch(e.type){case ae:return Je(e.children,t);case fe:case le:return`<${e.data}>`;case ce:return`\x3c!--${e.data}--\x3e`;case pe:return function(e){return`<![CDATA[${e.children[0].data}]]>`}(e);case ue:case de:case he:return function(e,t){var r;"foreign"===t.xmlMode&&(e.name=null!==(r=Ve.get(e.name))&&void 0!==r?r:e.name,e.parent&&Xe.has(e.parent.name)&&(t={...t,xmlMode:!1})),!t.xmlMode&&Qe.has(e.name)&&(t={...t,xmlMode:"foreign"});let n=`<${e.name}`;const i=function(e,t){var r;if(!e)return;const n=!1===(null!==(r=t.encodeEntities)&&void 0!==r?r:t.decodeEntities)?$e:t.xmlMode||"utf8"!==t.encodeEntities?Me:ze;return Object.keys(e).map((r=>{var i,s;const a=null!==(i=e[r])&&void 0!==i?i:"";return"foreign"===t.xmlMode&&(r=null!==(s=We.get(r))&&void 0!==s?s:r),t.emptyAttrs||t.xmlMode||""!==a?`${r}="${n(a)}"`:r})).join(" ")}(e.attribs,t);return i&&(n+=` ${i}`),0===e.children.length&&(t.xmlMode?!1!==t.selfClosingTags:t.selfClosingTags&&Ze.has(e.name))?(t.xmlMode||(n+=" "),n+="/>"):(n+=">",e.children.length>0&&(n+=Je(e.children,t)),!t.xmlMode&&Ze.has(e.name)||(n+=`</${e.name}>`)),n}(e,t);case oe:return function(e,t){var r;let n=e.data||"";return!1===(null!==(r=t.encodeEntities)&&void 0!==r?r:t.decodeEntities)||!t.xmlMode&&e.parent&&Ge.has(e.parent.name)||(n=t.xmlMode||"utf8"!==t.encodeEntities?Me(n):Fe(n)),n}(e,t)}}const Xe=new Set(["mi","mo","mn","ms","mtext","annotation-xml","foreignObject","desc","title"]),Qe=new Set(["svg","math"]);function et(e,t){return Ke(e,t)}function tt(e,t){return _e(e)?e.children.map((e=>et(e,t))).join(""):""}function rt(e){return Array.isArray(e)?e.map(rt).join(""):me(e)?"br"===e.name?"\n":rt(e.children):ge(e)?rt(e.children):be(e)?e.data:""}function nt(e){return Array.isArray(e)?e.map(nt).join(""):_e(e)&&!ye(e)?nt(e.children):be(e)?e.data:""}function it(e){return Array.isArray(e)?e.map(it).join(""):_e(e)&&(e.type===ie.Tag||ge(e))?it(e.children):be(e)?e.data:""}function st(e){return _e(e)?e.children:[]}function at(e){return e.parent||null}function ot(e){const t=at(e);if(null!=t)return st(t);const r=[e];let{prev:n,next:i}=e;for(;null!=n;)r.unshift(n),({prev:n}=n);for(;null!=i;)r.push(i),({next:i}=i);return r}function lt(e,t){var r;return null===(r=e.attribs)||void 0===r?void 0:r[t]}function ct(e,t){return null!=e.attribs&&Object.prototype.hasOwnProperty.call(e.attribs,t)&&null!=e.attribs[t]}function ut(e){return e.name}function dt(e){let{next:t}=e;for(;null!==t&&!me(t);)({next:t}=t);return t}function ht(e){let{prev:t}=e;for(;null!==t&&!me(t);)({prev:t}=t);return t}function pt(e){if(e.prev&&(e.prev.next=e.next),e.next&&(e.next.prev=e.prev),e.parent){const t=e.parent.children,r=t.lastIndexOf(e);r>=0&&t.splice(r,1)}e.next=null,e.prev=null,e.parent=null}function ft(e,t){const r=t.prev=e.prev;r&&(r.next=t);const n=t.next=e.next;n&&(n.prev=t);const i=t.parent=e.parent;if(i){const r=i.children;r[r.lastIndexOf(e)]=t,e.parent=null}}function mt(e,t){if(pt(t),t.next=null,t.parent=e,e.children.push(t)>1){const r=e.children[e.children.length-2];r.next=t,t.prev=r}else t.prev=null}function gt(e,t){pt(t);const{parent:r}=e,n=e.next;if(t.next=n,t.prev=e,e.next=t,t.parent=r,n){if(n.prev=t,r){const e=r.children;e.splice(e.lastIndexOf(n),0,t)}}else r&&r.children.push(t)}function bt(e,t){if(pt(t),t.parent=e,t.prev=null,1!==e.children.unshift(t)){const r=e.children[1];r.prev=t,t.next=r}else t.next=null}function yt(e,t){pt(t);const{parent:r}=e;if(r){const n=r.children;n.splice(n.indexOf(e),0,t)}e.prev&&(e.prev.next=t),t.parent=r,t.prev=e.prev,t.next=e,e.prev=t}function vt(e,t,r=!0,n=1/0){return _t(e,Array.isArray(t)?t:[t],r,n)}function _t(e,t,r,n){const i=[],s=[Array.isArray(t)?t:[t]],a=[0];for(;;){if(a[0]>=s[0].length){if(1===a.length)return i;s.shift(),a.shift();continue}const t=s[0][a[0]++];if(e(t)&&(i.push(t),--n<=0))return i;r&&_e(t)&&t.children.length>0&&(a.unshift(0),s.unshift(t.children))}}function wt(e,t){return t.find(e)}function St(e,t,r=!0){const n=Array.isArray(t)?t:[t];for(let t=0;t<n.length;t++){const i=n[t];if(me(i)&&e(i))return i;if(r&&_e(i)&&i.children.length>0){const t=St(e,i.children,!0);if(t)return t}}return null}function xt(e,t){return(Array.isArray(t)?t:[t]).some((t=>me(t)&&e(t)||_e(t)&&xt(e,t.children)))}function Et(e,t){const r=[],n=[Array.isArray(t)?t:[t]],i=[0];for(;;){if(i[0]>=n[0].length){if(1===n.length)return r;n.shift(),i.shift();continue}const t=n[0][i[0]++];me(t)&&e(t)&&r.push(t),_e(t)&&t.children.length>0&&(i.unshift(0),n.unshift(t.children))}}const kt={tag_name:e=>"function"==typeof e?t=>me(t)&&e(t.name):"*"===e?me:t=>me(t)&&t.name===e,tag_type:e=>"function"==typeof e?t=>e(t.type):t=>t.type===e,tag_contains:e=>"function"==typeof e?t=>be(t)&&e(t.data):t=>be(t)&&t.data===e};function At(e,t){return"function"==typeof t?r=>me(r)&&t(r.attribs[e]):r=>me(r)&&r.attribs[e]===t}function Ct(e,t){return r=>e(r)||t(r)}function Tt(e){const t=Object.keys(e).map((t=>{const r=e[t];return Object.prototype.hasOwnProperty.call(kt,t)?kt[t](r):At(t,r)}));return 0===t.length?null:t.reduce(Ct)}function Rt(e,t){const r=Tt(e);return!r||r(t)}function Nt(e,t,r,n=1/0){const i=Tt(e);return i?vt(i,t,r,n):[]}function It(e,t,r=!0){return Array.isArray(t)||(t=[t]),St(At("id",e),t,r)}function qt(e,t,r=!0,n=1/0){return vt(kt.tag_name(e),t,r,n)}function Dt(e,t,r=!0,n=1/0){return vt(At("class",e),t,r,n)}function Lt(e,t,r=!0,n=1/0){return vt(kt.tag_type(e),t,r,n)}function Ot(e){let t=e.length;for(;--t>=0;){const r=e[t];if(t>0&&e.lastIndexOf(r,t-1)>=0)e.splice(t,1);else for(let n=r.parent;n;n=n.parent)if(e.includes(n)){e.splice(t,1);break}}return e}var Bt;function Pt(e,t){const r=[],n=[];if(e===t)return 0;let i=_e(e)?e:e.parent;for(;i;)r.unshift(i),i=i.parent;for(i=_e(t)?t:t.parent;i;)n.unshift(i),i=i.parent;const s=Math.min(r.length,n.length);let a=0;for(;a<s&&r[a]===n[a];)a++;if(0===a)return Bt.DISCONNECTED;const o=r[a-1],l=o.children,c=r[a],u=n[a];return l.indexOf(c)>l.indexOf(u)?o===t?Bt.FOLLOWING|Bt.CONTAINED_BY:Bt.FOLLOWING:o===e?Bt.PRECEDING|Bt.CONTAINS:Bt.PRECEDING}function Mt(e){return(e=e.filter(((e,t,r)=>!r.includes(e,t+1)))).sort(((e,t)=>{const r=Pt(e,t);return r&Bt.PRECEDING?-1:r&Bt.FOLLOWING?1:0})),e}function Ut(e){const t=Ht(Gt,e);return t?"feed"===t.name?function(e){var t;const r=e.children,n={type:"atom",items:qt("entry",r).map((e=>{var t;const{children:r}=e,n={media:jt(r)};Wt(n,"id","id",r),Wt(n,"title","title",r);const i=null===(t=Ht("link",r))||void 0===t?void 0:t.attribs.href;i&&(n.link=i);const s=Vt("summary",r)||Vt("content",r);s&&(n.description=s);const a=Vt("updated",r);return a&&(n.pubDate=new Date(a)),n}))};Wt(n,"id","id",r),Wt(n,"title","title",r);const i=null===(t=Ht("link",r))||void 0===t?void 0:t.attribs.href;i&&(n.link=i),Wt(n,"description","subtitle",r);const s=Vt("updated",r);return s&&(n.updated=new Date(s)),Wt(n,"author","email",r,!0),n}(t):function(e){var t,r;const n=null!==(r=null===(t=Ht("channel",e.children))||void 0===t?void 0:t.children)&&void 0!==r?r:[],i={type:e.name.substr(0,3),id:"",items:qt("item",e.children).map((e=>{const{children:t}=e,r={media:jt(t)};Wt(r,"id","guid",t),Wt(r,"title","title",t),Wt(r,"link","link",t),Wt(r,"description","description",t);const n=Vt("pubDate",t)||Vt("dc:date",t);return n&&(r.pubDate=new Date(n)),r}))};Wt(i,"title","title",n),Wt(i,"link","link",n),Wt(i,"description","description",n);const s=Vt("lastBuildDate",n);return s&&(i.updated=new Date(s)),Wt(i,"author","managingEditor",n,!0),i}(t):null}!function(e){e[e.DISCONNECTED=1]="DISCONNECTED",e[e.PRECEDING=2]="PRECEDING",e[e.FOLLOWING=4]="FOLLOWING",e[e.CONTAINS=8]="CONTAINS",e[e.CONTAINED_BY=16]="CONTAINED_BY"}(Bt||(Bt={}));const zt=["url","type","lang"],Ft=["fileSize","bitrate","framerate","samplingrate","channels","duration","height","width"];function jt(e){return qt("media:content",e).map((e=>{const{attribs:t}=e,r={medium:t.medium,isDefault:!!t.isDefault};for(const e of zt)t[e]&&(r[e]=t[e]);for(const e of Ft)t[e]&&(r[e]=parseInt(t[e],10));return t.expression&&(r.expression=t.expression),r}))}function Ht(e,t){return qt(e,t,!0,1)[0]}function Vt(e,t,r=!1){return nt(qt(e,t,r,1)).trim()}function Wt(e,t,r,n,i=!1){const s=Vt(r,n,i);s&&(e[t]=s)}function Gt(e){return"rss"===e||"feed"===e||"rdf:RDF"===e}const $t=-1,Zt=10,Jt=11,Kt=new Set(["ARTICLE","ASIDE","BLOCKQUOTE","BODY","BR","BUTTON","CANVAS","CAPTION","COL","COLGROUP","DD","DIV","DL","DT","EMBED","FIELDSET","FIGCAPTION","FIGURE","FOOTER","FORM","H1","H2","H3","H4","H5","H6","LI","UL","OL","P"]),Yt="http://www.w3.org/2000/svg",{assign:Xt,create:Qt,defineProperties:er,entries:tr,getOwnPropertyDescriptors:rr,keys:nr,setPrototypeOf:ir}=Object,sr=String,ar=e=>1===e.nodeType?e[h]:e,or=({ownerDocument:e})=>e[g].ignoreCase,lr=(e,t)=>{e[y]=t,t[_]=e},cr=(e,t,r)=>{lr(e,t),lr(ar(t),r)},ur=(e,t,r)=>{lr(e,t),lr(t,r)},dr=({localName:e,ownerDocument:t})=>t[g].ignoreCase?e.toUpperCase():e,hr=(e,t)=>{e&&(e[y]=t),t&&(t[_]=e)},pr=new WeakMap;let fr=!1;const mr=new WeakMap,gr=new WeakMap,br=(e,t,r,n)=>{fr&&gr.has(e)&&e.attributeChangedCallback&&e.constructor.observedAttributes.includes(t)&&e.attributeChangedCallback(t,r,n)},yr=(e,t)=>r=>{if(gr.has(r)){const n=gr.get(r);n.connected!==t&&r.isConnected===t&&(n.connected=t,e in r&&r[e]())}},vr=yr("connectedCallback",!0),_r=e=>{if(fr){vr(e),pr.has(e)&&(e=pr.get(e).shadowRoot);let{[y]:t,[h]:r}=e;for(;t!==r;)1===t.nodeType&&vr(t),t=t[y]}},wr=yr("disconnectedCallback",!1);class Sr{constructor(e){this.ownerDocument=e,this.registry=new Map,this.waiting=new Map,this.active=!1}define(e,t,r={}){const{ownerDocument:n,registry:i,waiting:s}=this;if(i.has(e))throw new Error("unable to redefine "+e);if(mr.has(t))throw new Error("unable to redefine the same class: "+t);this.active=fr=!0;const{extends:a}=r;mr.set(t,{ownerDocument:n,options:{is:a?e:""},localName:a||e});const o=a?t=>t.localName===a&&t.getAttribute("is")===e:t=>t.localName===e;if(i.set(e,{Class:t,check:o}),s.has(e)){for(const r of s.get(e))r(t);s.delete(e)}n.querySelectorAll(a?`${a}[is="${e}"]`:e).forEach(this.upgrade,this)}upgrade(e){if(gr.has(e))return;const{ownerDocument:t,registry:r}=this,n=e.getAttribute("is")||e.localName;if(r.has(n)){const{Class:i,check:s}=r.get(n);if(s(e)){const{attributes:r,isConnected:s}=e;for(const t of r)e.removeAttributeNode(t);const a=tr(e);for(const[t]of a)delete e[t];ir(e,i.prototype),t[k]={element:e,values:a},new i(t,n),gr.set(e,{connected:s});for(const t of r)e.setAttributeNode(t);s&&e.connectedCallback&&e.connectedCallback()}}}whenDefined(e){const{registry:t,waiting:r}=this;return new Promise((n=>{t.has(e)?n(t.get(e).Class):(r.has(e)||r.set(e,[]),r.get(e).push(n))}))}get(e){const t=this.registry.get(e);return t&&t.Class}getName(e){if(mr.has(e)){const{localName:t}=mr.get(e);return t}return null}}const{iX:xr}=i;let Er=!0;const kr=(e,t,r)=>{const n=e[h];return t.parentNode=e,cr(n[_],t,n),r&&1===t.nodeType&&_r(t),t},Ar=(e,t,r,n,i)=>{r[A]=n,r.ownerElement=e,ur(t[_],r,t),"class"===r.name&&(e.className=n),i&&br(e,r.name,null,n)},Cr=(e,t,r)=>{const{active:n,registry:i}=e[o];let s=e,a=null,l=!1;Er=!1;const c=new xr({onprocessinginstruction(t,r){"!doctype"===t.toLowerCase()&&(e.doctype=r.slice(t.length).trim())},onopentag(r,o){let l=!0;if(t)if(a)s=kr(s,e.createElementNS(Yt,r),n),s.ownerSVGElement=a,l=!1;else if("svg"===r||"SVG"===r)a=e.createElementNS(Yt,r),s=kr(s,a,n),l=!1;else if(n){const e=r.includes("-")?r:o.is||"";if(e&&i.has(e)){const{Class:t}=i.get(e);s=kr(s,new t,n),delete o.is,l=!1}}l&&(s=kr(s,e.createElement(r),!1));let c=s[h];for(const t of nr(o))Ar(s,c,e.createAttribute(t),o[t],n)},oncomment(t){kr(s,e.createComment(t),n)},ontext(t){kr(s,l?e.createCDATASection(t):e.createTextNode(t),n)},oncdatastart(){l=!0},oncdataend(){l=!1},onclosetag(){t&&s===a&&(a=null),s=s.parentNode}},{lowerCaseAttributeNames:!1,decodeEntities:!0,xmlMode:!t});return c.write(r),c.end(),Er=!0,e},Tr=new Map,Rr=(e,t)=>{for(const r of[].concat(e))Tr.set(r,t),Tr.set(r.toUpperCase(),t)};var Nr=r(273);const Ir=({[y]:e,[h]:t},r)=>{for(;e!==t;){switch(e.nodeType){case 2:qr(e,r);break;case 3:case 8:case 4:Dr(e,r);break;case 1:Or(e,r),e=ar(e);break;case Zt:Lr(e,r)}e=e[y]}const n=r.length-1,i=r[n];"number"==typeof i&&i<0?r[n]+=$t:r.push($t)},qr=(e,t)=>{t.push(2,e.name);const r=e[A].trim();r&&t.push(r)},Dr=(e,t)=>{const r=e[A];r.trim()&&t.push(e.nodeType,r)},Lr=({name:e,publicId:t,systemId:r},n)=>{n.push(Zt,e),t&&n.push(t),r&&n.push(r)},Or=(e,t)=>{t.push(1,e.localName),Ir(e,t)},Br=(e,t,r,n,i,s,a)=>({type:e,target:t,addedNodes:n,removedNodes:i,attributeName:s,oldValue:a,previousSibling:r?.previousSibling||null,nextSibling:r?.nextSibling||null}),Pr=(e,t,r,n,i,s)=>{if(!n||n.includes(r)){const{callback:n,records:a,scheduled:o}=e;a.push(Br("attributes",t,null,[],[],r,i?s:void 0)),o||(e.scheduled=!0,Promise.resolve().then((()=>{e.scheduled=!1,n(a.splice(0),e)})))}},Mr=(e,t,r)=>{const{ownerDocument:n}=e,{active:i,observers:s}=n[b];if(i)for(const i of s)for(const[s,{childList:a,subtree:o,attributes:l,attributeFilter:c,attributeOldValue:u}]of i.nodes)if(a){if(o&&(s===n||s.contains(e))||!o&&s.children.includes(e)){Pr(i,e,t,c,u,r);break}}else if(l&&s===e){Pr(i,e,t,c,u,r);break}},Ur=(e,t)=>{const{ownerDocument:r}=e,{active:n,observers:i}=r[b];if(n)for(const n of i)for(const[i,{subtree:s,childList:a,characterData:o}]of n.nodes)if(a&&(t&&(i===t||s&&i.contains(t))||!t&&(s&&(i===r||i.contains(e))||!s&&i[o?"childNodes":"children"].includes(e)))){const{callback:r,records:s,scheduled:a}=n;s.push(Br("childList",i,e,t?[]:[e],t?[e]:[])),a||(n.scheduled=!0,Promise.resolve().then((()=>{n.scheduled=!1,r(s.splice(0),n)})));break}};class zr{constructor(e){const t=new Set;this.observers=t,this.active=!1,this.class=class{constructor(e){this.callback=e,this.nodes=new Map,this.records=[],this.scheduled=!1}disconnect(){this.records.splice(0),this.nodes.clear(),t.delete(this),e[b].active=!!t.size}observe(r,n={subtree:!1,childList:!1,attributes:!1,attributeFilter:null,attributeOldValue:!1,characterData:!1}){("attributeOldValue"in n||"attributeFilter"in n)&&(n.attributes=!0),n.childList=!!n.childList,n.subtree=!!n.subtree,this.nodes.set(r,n),t.add(this),e[b].active=!0}takeRecords(){return this.records.splice(0)}}}}const Fr=new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","class","contenteditable","controls","default","defer","disabled","draggable","formnovalidate","hidden","id","ismap","itemscope","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected","style","truespeed"]),jr=(e,t)=>{const{[A]:r,name:n}=t;t.ownerElement=e,ur(e,t,e[y]),"class"===n&&(e.className=r),Mr(e,n,null),br(e,n,null,r)},Hr=(e,t)=>{const{[A]:r,name:n}=t;lr(t[_],t[y]),t.ownerElement=t[_]=t[y]=null,"class"===n&&(e[a]=null),Mr(e,n,r),br(e,n,r,null)},Vr={get:(e,t)=>e.hasAttribute(t),set(e,t,r){r?e.setAttribute(t,""):e.removeAttribute(t)}},Wr={get:(e,t)=>parseFloat(e.getAttribute(t)||0),set(e,t,r){e.setAttribute(t,r)}},Gr={get:(e,t)=>e.getAttribute(t)||"",set(e,t,r){e.setAttribute(t,r)}},$r=new WeakMap;function Zr(e,t){return"function"==typeof t?t.call(e.target,e):t.handleEvent(e),e._stopImmediatePropagationFlag}function Jr({currentTarget:e,target:t}){const r=$r.get(e);if(r&&r.has(this.type)){const n=r.get(this.type);this.eventPhase=e===t?this.AT_TARGET:this.BUBBLING_PHASE,this.currentTarget=e,this.target=t;for(const[e,t]of n)if(t&&t.once&&n.delete(e),Zr(this,e))break;return delete this.currentTarget,delete this.target,this.cancelBubble}}class Kr{constructor(){$r.set(this,new Map)}_getParent(){return null}addEventListener(e,t,r){const n=$r.get(this);n.has(e)||n.set(e,new Map),n.get(e).set(t,r)}removeEventListener(e,t){const r=$r.get(this);if(r.has(e)){const n=r.get(e);n.delete(t)&&!n.size&&r.delete(e)}}dispatchEvent(e){let t=this;for(e.eventPhase=e.CAPTURING_PHASE;t;)t.dispatchEvent&&e._path.push({currentTarget:t,target:this}),t=e.bubbles&&t._getParent&&t._getParent();return e._path.some(Jr,e),e._path=[],e.eventPhase=e.NONE,!e.defaultPrevented}}class Yr extends Array{item(e){return e<this.length?this[e]:null}}const Xr=({parentNode:e})=>{let t=0;for(;e;)t++,e=e.parentNode;return t};class Qr extends Kr{static get ELEMENT_NODE(){return 1}static get ATTRIBUTE_NODE(){return 2}static get TEXT_NODE(){return 3}static get CDATA_SECTION_NODE(){return 4}static get COMMENT_NODE(){return 8}static get DOCUMENT_NODE(){return 9}static get DOCUMENT_FRAGMENT_NODE(){return Jt}static get DOCUMENT_TYPE_NODE(){return Zt}constructor(e,t,r){super(),this.ownerDocument=e,this.localName=t,this.nodeType=r,this.parentNode=null,this[y]=null,this[_]=null}get ELEMENT_NODE(){return 1}get ATTRIBUTE_NODE(){return 2}get TEXT_NODE(){return 3}get CDATA_SECTION_NODE(){return 4}get COMMENT_NODE(){return 8}get DOCUMENT_NODE(){return 9}get DOCUMENT_FRAGMENT_NODE(){return Jt}get DOCUMENT_TYPE_NODE(){return Zt}get baseURI(){const e=9===this.nodeType?this:this.ownerDocument;if(e){const t=e.querySelector("base");if(t)return t.getAttribute("href");const{location:r}=e.defaultView;if(r)return r.href}return null}get isConnected(){return!1}get nodeName(){return this.localName}get parentElement(){return null}get previousSibling(){return null}get previousElementSibling(){return null}get nextSibling(){return null}get nextElementSibling(){return null}get childNodes(){return new Yr}get firstChild(){return null}get lastChild(){return null}get nodeValue(){return null}set nodeValue(e){}get textContent(){return null}set textContent(e){}normalize(){}cloneNode(){return null}contains(){return!1}insertBefore(e,t){return e}appendChild(e){return e}replaceChild(e,t){return t}removeChild(e){return e}toString(){return""}hasChildNodes(){return!!this.lastChild}isSameNode(e){return this===e}compareDocumentPosition(e){let t=0;if(this!==e){let r=Xr(this),n=Xr(e);if(r<n)t+=4,this.contains(e)&&(t+=16);else if(n<r)t+=2,e.contains(this)&&(t+=8);else if(r&&n){const{childNodes:r}=this.parentNode;r.indexOf(this)<r.indexOf(e)?t+=4:t+=2}r&&n||(t+=32,t+=1)}return t}isEqualNode(e){if(this===e)return!0;if(this.nodeType===e.nodeType){switch(this.nodeType){case 9:case Jt:{const t=this.childNodes,r=e.childNodes;return t.length===r.length&&t.every(((e,t)=>e.isEqualNode(r[t])))}}return this.toString()===e.toString()}return!1}_getParent(){return this.parentNode}getRootNode(){let e=this;for(;e.parentNode;)e=e.parentNode;return e}}const{replace:en}="",tn=/[<>&\xA0]/g,rn={" ":"&#160;","&":"&amp;","<":"&lt;",">":"&gt;"},nn=e=>rn[e],sn=e=>en.call(e,tn,nn),an=/"/g;class on extends Qr{constructor(e,t,r=""){super(e,t,2),this.ownerElement=null,this.name=sr(t),this[A]=sr(r),this[s]=!1}get value(){return this[A]}set value(e){const{[A]:t,name:r,ownerElement:n}=this;this[A]=sr(e),this[s]=!0,n&&(Mr(n,r,t),br(n,r,t,this[A]))}cloneNode(){const{ownerDocument:e,name:t,[A]:r}=this;return new on(e,t,r)}toString(){const{name:e,[A]:t}=this;return Fr.has(e)&&!t?or(this)?e:`${e}=""`:`${e}="${(or(this)?t:sn(t)).replace(an,"&quot;")}"`}toJSON(){const e=[];return qr(this,e),e}}const ln=({ownerDocument:e,parentNode:t})=>{for(;t;){if(t===e)return!0;t=t.parentNode||t.host}return!1},cn=({parentNode:e})=>{if(e)switch(e.nodeType){case 9:case Jt:return null}return e},un=({[_]:e})=>{switch(e?e.nodeType:0){case $t:return e[x];case 3:case 8:case 4:return e}return null},dn=e=>{const t=ar(e)[y];return t&&(t.nodeType===$t?null:t)},hn=e=>{let t=dn(e);for(;t&&1!==t.nodeType;)t=dn(t);return t},pn=e=>{let t=un(e);for(;t&&1!==t.nodeType;)t=un(t);return t},fn=(e,t)=>{const r=e.createDocumentFragment();return r.append(...t),r},mn=(e,t)=>{const{ownerDocument:r,parentNode:n}=e;n&&n.insertBefore(fn(r,t),e)},gn=(e,t)=>{const{ownerDocument:r,parentNode:n}=e;n&&n.insertBefore(fn(r,t),ar(e)[y])},bn=(e,t)=>{const{ownerDocument:r,parentNode:n}=e;n&&(t.includes(e)&&bn(e,[e=e.cloneNode()]),n.insertBefore(fn(r,t),e),e.remove())},yn=(e,t,r)=>{const{parentNode:n,nodeType:i}=t;(e||r)&&(hr(e,r),t[_]=null,ar(t)[y]=null),n&&(t.parentNode=null,Ur(t,n),1===i&&(e=>{if(fr){wr(e),pr.has(e)&&(e=pr.get(e).shadowRoot);let{[y]:t,[h]:r}=e;for(;t!==r;)1===t.nodeType&&wr(t),t=t[y]}})(t))};class vn extends Qr{constructor(e,t,r,n){super(e,t,r),this[A]=sr(n)}get isConnected(){return ln(this)}get parentElement(){return cn(this)}get previousSibling(){return un(this)}get nextSibling(){return dn(this)}get previousElementSibling(){return pn(this)}get nextElementSibling(){return hn(this)}before(...e){mn(this,e)}after(...e){gn(this,e)}replaceWith(...e){bn(this,e)}remove(){yn(this[_],this,this[y])}get data(){return this[A]}set data(e){this[A]=sr(e),Ur(this,this.parentNode)}get nodeValue(){return this.data}set nodeValue(e){this.data=e}get textContent(){return this.data}set textContent(e){this.data=e}get length(){return this.data.length}substringData(e,t){return this.data.substr(e,t)}appendData(e){this.data+=e}insertData(e,t){const{data:r}=this;this.data=r.slice(0,e)+t+r.slice(e)}deleteData(e,t){const{data:r}=this;this.data=r.slice(0,e)+r.slice(e+t)}replaceData(e,t,r){const{data:n}=this;this.data=n.slice(0,e)+r+n.slice(e+t)}toJSON(){const e=[];return Dr(this,e),e}}class _n extends vn{constructor(e,t=""){super(e,"#cdatasection",4,t)}cloneNode(){const{ownerDocument:e,[A]:t}=this;return new _n(e,t)}toString(){return`<![CDATA[${this[A]}]]>`}}class wn extends vn{constructor(e,t=""){super(e,"#comment",8,t)}cloneNode(){const{ownerDocument:e,[A]:t}=this;return new wn(e,t)}toString(){return`\x3c!--${this[A]}--\x3e`}}var Sn,xn,En=r(264);!function(e){e.Attribute="attribute",e.Pseudo="pseudo",e.PseudoElement="pseudo-element",e.Tag="tag",e.Universal="universal",e.Adjacent="adjacent",e.Child="child",e.Descendant="descendant",e.Parent="parent",e.Sibling="sibling",e.ColumnCombinator="column-combinator"}(Sn||(Sn={})),function(e){e.Any="any",e.Element="element",e.End="end",e.Equals="equals",e.Exists="exists",e.Hyphen="hyphen",e.Not="not",e.Start="start"}(xn||(xn={}));const kn=/^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/,An=/\\([\da-f]{1,6}\s?|(\s)|.)/gi,Cn=new Map([[126,xn.Element],[94,xn.Start],[36,xn.End],[42,xn.Any],[33,xn.Not],[124,xn.Hyphen]]),Tn=new Set(["has","not","matches","is","where","host","host-context"]),Rn=new Set(["contains","icontains"]);function Nn(e,t,r){const n=parseInt(t,16)-65536;return n!=n||r?t:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)}function In(e){return e.replace(An,Nn)}function qn(e){return 39===e||34===e}function Dn(e){return 32===e||9===e||10===e||12===e||13===e}function Ln(e){const t=[],r=On(t,`${e}`,0);if(r<e.length)throw new Error(`Unmatched selector: ${e.slice(r)}`);return t}function On(e,t,r){let n=[];function i(e){const n=t.slice(r+e).match(kn);if(!n)throw new Error(`Expected name, found ${t.slice(r)}`);const[i]=n;return r+=e+i.length,In(i)}function s(e){for(r+=e;r<t.length&&Dn(t.charCodeAt(r));)r++}function a(){const e=r+=1;let n=1;for(;n>0&&r<t.length;r++)40!==t.charCodeAt(r)||o(r)?41!==t.charCodeAt(r)||o(r)||n--:n++;if(n)throw new Error("Parenthesis not matched");return In(t.slice(e,r-1))}function o(e){let r=0;for(;92===t.charCodeAt(--e);)r++;return!(1&~r)}function l(){if(n.length>0&&function(e){switch(e.type){case Sn.Adjacent:case Sn.Child:case Sn.Descendant:case Sn.Parent:case Sn.Sibling:case Sn.ColumnCombinator:return!0;default:return!1}}(n[n.length-1]))throw new Error("Did not expect successive traversals.")}function c(e){n.length>0&&n[n.length-1].type===Sn.Descendant?n[n.length-1].type=e:(l(),n.push({type:e}))}function u(e,t){n.push({type:Sn.Attribute,name:e,action:t,value:i(1),namespace:null,ignoreCase:"quirks"})}function d(){if(n.length&&n[n.length-1].type===Sn.Descendant&&n.pop(),0===n.length)throw new Error("Empty sub-selector");e.push(n)}if(s(0),t.length===r)return r;e:for(;r<t.length;){const e=t.charCodeAt(r);switch(e){case 32:case 9:case 10:case 12:case 13:0!==n.length&&n[0].type===Sn.Descendant||(l(),n.push({type:Sn.Descendant})),s(1);break;case 62:c(Sn.Child),s(1);break;case 60:c(Sn.Parent),s(1);break;case 126:c(Sn.Sibling),s(1);break;case 43:c(Sn.Adjacent),s(1);break;case 46:u("class",xn.Element);break;case 35:u("id",xn.Equals);break;case 91:{let e;s(1);let a=null;124===t.charCodeAt(r)?e=i(1):t.startsWith("*|",r)?(a="*",e=i(2)):(e=i(0),124===t.charCodeAt(r)&&61!==t.charCodeAt(r+1)&&(a=e,e=i(1))),s(0);let l=xn.Exists;const c=Cn.get(t.charCodeAt(r));if(c){if(l=c,61!==t.charCodeAt(r+1))throw new Error("Expected `=`");s(2)}else 61===t.charCodeAt(r)&&(l=xn.Equals,s(1));let u="",d=null;if("exists"!==l){if(qn(t.charCodeAt(r))){const e=t.charCodeAt(r);let n=r+1;for(;n<t.length&&(t.charCodeAt(n)!==e||o(n));)n+=1;if(t.charCodeAt(n)!==e)throw new Error("Attribute value didn't end");u=In(t.slice(r+1,n)),r=n+1}else{const e=r;for(;r<t.length&&(!Dn(t.charCodeAt(r))&&93!==t.charCodeAt(r)||o(r));)r+=1;u=In(t.slice(e,r))}s(0);const e=32|t.charCodeAt(r);115===e?(d=!1,s(1)):105===e&&(d=!0,s(1))}if(93!==t.charCodeAt(r))throw new Error("Attribute selector didn't terminate");r+=1;const h={type:Sn.Attribute,name:e,action:l,value:u,namespace:a,ignoreCase:d};n.push(h);break}case 58:{if(58===t.charCodeAt(r+1)){n.push({type:Sn.PseudoElement,name:i(2).toLowerCase(),data:40===t.charCodeAt(r)?a():null});continue}const e=i(1).toLowerCase();let s=null;if(40===t.charCodeAt(r))if(Tn.has(e)){if(qn(t.charCodeAt(r+1)))throw new Error(`Pseudo-selector ${e} cannot be quoted`);if(s=[],r=On(s,t,r+1),41!==t.charCodeAt(r))throw new Error(`Missing closing parenthesis in :${e} (${t})`);r+=1}else{if(s=a(),Rn.has(e)){const e=s.charCodeAt(0);e===s.charCodeAt(s.length-1)&&qn(e)&&(s=s.slice(1,-1))}s=In(s)}n.push({type:Sn.Pseudo,name:e,data:s});break}case 44:d(),n=[],s(1);break;default:{if(t.startsWith("/*",r)){const e=t.indexOf("*/",r+2);if(e<0)throw new Error("Comment was not terminated");r=e+2,0===n.length&&s(0);break}let a,o=null;if(42===e)r+=1,a="*";else if(124===e){if(a="",124===t.charCodeAt(r+1)){c(Sn.ColumnCombinator),s(2);break}}else{if(!kn.test(t.slice(r)))break e;a=i(0)}124===t.charCodeAt(r)&&124!==t.charCodeAt(r+1)&&(o=a,42===t.charCodeAt(r+1)?(a="*",r+=2):a=i(1)),n.push("*"===a?{type:Sn.Universal,namespace:o}:{type:Sn.Tag,name:a,namespace:o})}}}return d(),r}const Bn=new Map([[Sn.Universal,50],[Sn.Tag,30],[Sn.Attribute,1],[Sn.Pseudo,0]]);function Pn(e){return!Bn.has(e.type)}const Mn=new Map([[xn.Exists,10],[xn.Equals,8],[xn.Not,7],[xn.Start,6],[xn.End,6],[xn.Any,5]]);function Un(e){const t=e.map(zn);for(let r=1;r<e.length;r++){const n=t[r];if(!(n<0))for(let i=r-1;i>=0&&n<t[i];i--){const r=e[i+1];e[i+1]=e[i],e[i]=r,t[i+1]=t[i],t[i]=n}}}function zn(e){var t,r;let n=null!==(t=Bn.get(e.type))&&void 0!==t?t:-1;return e.type===Sn.Attribute?(n=null!==(r=Mn.get(e.action))&&void 0!==r?r:4,e.action===xn.Equals&&"id"===e.name&&(n=9),e.ignoreCase&&(n>>=1)):e.type===Sn.Pseudo&&(e.data?"has"===e.name||"contains"===e.name?n=0:Array.isArray(e.data)?(n=Math.min(...e.data.map((e=>Math.min(...e.map(zn))))),n<0&&(n=0)):n=2:n=3),n}const Fn=/[-[\]{}()*+?.,\\^$|#\s]/g;function jn(e){return e.replace(Fn,"\\$&")}const Hn=new Set(["accept","accept-charset","align","alink","axis","bgcolor","charset","checked","clear","codetype","color","compact","declare","defer","dir","direction","disabled","enctype","face","frame","hreflang","http-equiv","lang","language","link","media","method","multiple","nohref","noresize","noshade","nowrap","readonly","rel","rev","rules","scope","scrolling","selected","shape","target","text","type","valign","valuetype","vlink"]);function Vn(e,t){return"boolean"==typeof e.ignoreCase?e.ignoreCase:"quirks"===e.ignoreCase?!!t.quirksMode:!t.xmlMode&&Hn.has(e.name)}const Wn={equals(e,t,r){const{adapter:n}=r,{name:i}=t;let{value:s}=t;return Vn(t,r)?(s=s.toLowerCase(),t=>{const r=n.getAttributeValue(t,i);return null!=r&&r.length===s.length&&r.toLowerCase()===s&&e(t)}):t=>n.getAttributeValue(t,i)===s&&e(t)},hyphen(e,t,r){const{adapter:n}=r,{name:i}=t;let{value:s}=t;const a=s.length;return Vn(t,r)?(s=s.toLowerCase(),function(t){const r=n.getAttributeValue(t,i);return null!=r&&(r.length===a||"-"===r.charAt(a))&&r.substr(0,a).toLowerCase()===s&&e(t)}):function(t){const r=n.getAttributeValue(t,i);return null!=r&&(r.length===a||"-"===r.charAt(a))&&r.substr(0,a)===s&&e(t)}},element(e,t,r){const{adapter:n}=r,{name:i,value:s}=t;if(/\s/.test(s))return En.falseFunc;const a=new RegExp(`(?:^|\\s)${jn(s)}(?:$|\\s)`,Vn(t,r)?"i":"");return function(t){const r=n.getAttributeValue(t,i);return null!=r&&r.length>=s.length&&a.test(r)&&e(t)}},exists:(e,{name:t},{adapter:r})=>n=>r.hasAttrib(n,t)&&e(n),start(e,t,r){const{adapter:n}=r,{name:i}=t;let{value:s}=t;const a=s.length;return 0===a?En.falseFunc:Vn(t,r)?(s=s.toLowerCase(),t=>{const r=n.getAttributeValue(t,i);return null!=r&&r.length>=a&&r.substr(0,a).toLowerCase()===s&&e(t)}):t=>{var r;return!!(null===(r=n.getAttributeValue(t,i))||void 0===r?void 0:r.startsWith(s))&&e(t)}},end(e,t,r){const{adapter:n}=r,{name:i}=t;let{value:s}=t;const a=-s.length;return 0===a?En.falseFunc:Vn(t,r)?(s=s.toLowerCase(),t=>{var r;return(null===(r=n.getAttributeValue(t,i))||void 0===r?void 0:r.substr(a).toLowerCase())===s&&e(t)}):t=>{var r;return!!(null===(r=n.getAttributeValue(t,i))||void 0===r?void 0:r.endsWith(s))&&e(t)}},any(e,t,r){const{adapter:n}=r,{name:i,value:s}=t;if(""===s)return En.falseFunc;if(Vn(t,r)){const t=new RegExp(jn(s),"i");return function(r){const a=n.getAttributeValue(r,i);return null!=a&&a.length>=s.length&&t.test(a)&&e(r)}}return t=>{var r;return!!(null===(r=n.getAttributeValue(t,i))||void 0===r?void 0:r.includes(s))&&e(t)}},not(e,t,r){const{adapter:n}=r,{name:i}=t;let{value:s}=t;return""===s?t=>!!n.getAttributeValue(t,i)&&e(t):Vn(t,r)?(s=s.toLowerCase(),t=>{const r=n.getAttributeValue(t,i);return(null==r||r.length!==s.length||r.toLowerCase()!==s)&&e(t)}):t=>n.getAttributeValue(t,i)!==s&&e(t)}},Gn=new Set([9,10,12,13,32]),$n="0".charCodeAt(0),Zn="9".charCodeAt(0);function Jn(e){return function(e){const t=e[0],r=e[1]-1;if(r<0&&t<=0)return En.falseFunc;if(-1===t)return e=>e<=r;if(0===t)return e=>e===r;if(1===t)return r<0?En.trueFunc:e=>e>=r;const n=Math.abs(t),i=(r%n+n)%n;return t>1?e=>e>=r&&e%n===i:e=>e<=r&&e%n===i}(function(e){if("even"===(e=e.trim().toLowerCase()))return[2,0];if("odd"===e)return[2,1];let t=0,r=0,n=s(),i=a();if(t<e.length&&"n"===e.charAt(t)&&(t++,r=n*(null!=i?i:1),o(),t<e.length?(n=s(),o(),i=a()):n=i=0),null===i||t<e.length)throw new Error(`n-th rule couldn't be parsed ('${e}')`);return[r,n*i];function s(){return"-"===e.charAt(t)?(t++,-1):("+"===e.charAt(t)&&t++,1)}function a(){const r=t;let n=0;for(;t<e.length&&e.charCodeAt(t)>=$n&&e.charCodeAt(t)<=Zn;)n=10*n+(e.charCodeAt(t)-$n),t++;return t===r?null:n}function o(){for(;t<e.length&&Gn.has(e.charCodeAt(t));)t++}}(e))}function Kn(e,t){return r=>{const n=t.getParent(r);return null!=n&&t.isTag(n)&&e(r)}}const Yn={contains:(e,t,{adapter:r})=>function(n){return e(n)&&r.getText(n).includes(t)},icontains(e,t,{adapter:r}){const n=t.toLowerCase();return function(t){return e(t)&&r.getText(t).toLowerCase().includes(n)}},"nth-child"(e,t,{adapter:r,equals:n}){const i=Jn(t);return i===En.falseFunc?En.falseFunc:i===En.trueFunc?Kn(e,r):function(t){const s=r.getSiblings(t);let a=0;for(let e=0;e<s.length&&!n(t,s[e]);e++)r.isTag(s[e])&&a++;return i(a)&&e(t)}},"nth-last-child"(e,t,{adapter:r,equals:n}){const i=Jn(t);return i===En.falseFunc?En.falseFunc:i===En.trueFunc?Kn(e,r):function(t){const s=r.getSiblings(t);let a=0;for(let e=s.length-1;e>=0&&!n(t,s[e]);e--)r.isTag(s[e])&&a++;return i(a)&&e(t)}},"nth-of-type"(e,t,{adapter:r,equals:n}){const i=Jn(t);return i===En.falseFunc?En.falseFunc:i===En.trueFunc?Kn(e,r):function(t){const s=r.getSiblings(t);let a=0;for(let e=0;e<s.length;e++){const i=s[e];if(n(t,i))break;r.isTag(i)&&r.getName(i)===r.getName(t)&&a++}return i(a)&&e(t)}},"nth-last-of-type"(e,t,{adapter:r,equals:n}){const i=Jn(t);return i===En.falseFunc?En.falseFunc:i===En.trueFunc?Kn(e,r):function(t){const s=r.getSiblings(t);let a=0;for(let e=s.length-1;e>=0;e--){const i=s[e];if(n(t,i))break;r.isTag(i)&&r.getName(i)===r.getName(t)&&a++}return i(a)&&e(t)}},root:(e,t,{adapter:r})=>t=>{const n=r.getParent(t);return(null==n||!r.isTag(n))&&e(t)},scope(e,t,r,n){const{equals:i}=r;return n&&0!==n.length?1===n.length?t=>i(n[0],t)&&e(t):t=>n.includes(t)&&e(t):Yn.root(e,t,r)},hover:Xn("isHovered"),visited:Xn("isVisited"),active:Xn("isActive")};function Xn(e){return function(t,r,{adapter:n}){const i=n[e];return"function"!=typeof i?En.falseFunc:function(e){return i(e)&&t(e)}}}const Qn={empty:(e,{adapter:t})=>!t.getChildren(e).some((e=>t.isTag(e)||""!==t.getText(e))),"first-child"(e,{adapter:t,equals:r}){if(t.prevElementSibling)return null==t.prevElementSibling(e);const n=t.getSiblings(e).find((e=>t.isTag(e)));return null!=n&&r(e,n)},"last-child"(e,{adapter:t,equals:r}){const n=t.getSiblings(e);for(let i=n.length-1;i>=0;i--){if(r(e,n[i]))return!0;if(t.isTag(n[i]))break}return!1},"first-of-type"(e,{adapter:t,equals:r}){const n=t.getSiblings(e),i=t.getName(e);for(let s=0;s<n.length;s++){const a=n[s];if(r(e,a))return!0;if(t.isTag(a)&&t.getName(a)===i)break}return!1},"last-of-type"(e,{adapter:t,equals:r}){const n=t.getSiblings(e),i=t.getName(e);for(let s=n.length-1;s>=0;s--){const a=n[s];if(r(e,a))return!0;if(t.isTag(a)&&t.getName(a)===i)break}return!1},"only-of-type"(e,{adapter:t,equals:r}){const n=t.getName(e);return t.getSiblings(e).every((i=>r(e,i)||!t.isTag(i)||t.getName(i)!==n))},"only-child":(e,{adapter:t,equals:r})=>t.getSiblings(e).every((n=>r(e,n)||!t.isTag(n)))};function ei(e,t,r,n){if(null===r){if(e.length>n)throw new Error(`Pseudo-class :${t} requires an argument`)}else if(e.length===n)throw new Error(`Pseudo-class :${t} doesn't have any arguments`)}const ti={"any-link":":is(a, area, link)[href]",link:":any-link:not(:visited)",disabled:":is(\n        :is(button, input, select, textarea, optgroup, option)[disabled],\n        optgroup[disabled] > option,\n        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)\n    )",enabled:":not(:disabled)",checked:":is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)",required:":is(input, select, textarea)[required]",optional:":is(input, select, textarea):not([required])",selected:"option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)",checkbox:"[type=checkbox]",file:"[type=file]",password:"[type=password]",radio:"[type=radio]",reset:"[type=reset]",image:"[type=image]",submit:"[type=submit]",parent:":not(:empty)",header:":is(h1, h2, h3, h4, h5, h6)",button:":is(button, input[type=button])",input:":is(input, textarea, select, button)",text:"input:is(:not([type!='']), [type=text])"},ri={};function ni(e,t){return e===En.falseFunc?En.falseFunc:r=>t.isTag(r)&&e(r)}function ii(e,t){const r=t.getSiblings(e);if(r.length<=1)return[];const n=r.indexOf(e);return n<0||n===r.length-1?[]:r.slice(n+1).filter(t.isTag)}function si(e){return{xmlMode:!!e.xmlMode,lowerCaseAttributeNames:!!e.lowerCaseAttributeNames,lowerCaseTags:!!e.lowerCaseTags,quirksMode:!!e.quirksMode,cacheResults:!!e.cacheResults,pseudos:e.pseudos,adapter:e.adapter,equals:e.equals}}const ai=(e,t,r,n,i)=>{const s=i(t,si(r),n);return s===En.trueFunc?e:s===En.falseFunc?En.falseFunc:t=>s(t)&&e(t)},oi={is:ai,matches:ai,where:ai,not(e,t,r,n,i){const s=i(t,si(r),n);return s===En.falseFunc?e:s===En.trueFunc?En.falseFunc:t=>!s(t)&&e(t)},has(e,t,r,n,i){const{adapter:s}=r,a=si(r);a.relativeSelector=!0;const o=t.some((e=>e.some(Pn)))?[ri]:void 0,l=i(t,a,o);if(l===En.falseFunc)return En.falseFunc;const c=ni(l,s);if(o&&l!==En.trueFunc){const{shouldTestNextSiblings:t=!1}=l;return r=>{if(!e(r))return!1;o[0]=r;const n=s.getChildren(r),i=t?[...n,...ii(r,s)]:n;return s.existsOne(c,i)}}return t=>e(t)&&s.existsOne(c,s.getChildren(t))}};function li(e,t){const r=t.getParent(e);return r&&t.isTag(r)?r:null}function ci(e,t,r){return ni(ui(e,t,r),t.adapter)}function ui(e,t,r){return mi("string"==typeof e?Ln(e):e,t,r)}function di(e){return e.type===Sn.Pseudo&&("scope"===e.name||Array.isArray(e.data)&&e.data.some((e=>e.some(di))))}const hi={type:Sn.Descendant},pi={type:"_flexibleDescendant"},fi={type:Sn.Pseudo,name:"scope",data:null};function mi(e,t,r){var n;e.forEach(Un),r=null!==(n=t.context)&&void 0!==n?n:r;const i=Array.isArray(r),s=r&&(Array.isArray(r)?r:[r]);if(!1!==t.relativeSelector)!function(e,{adapter:t},r){const n=!!(null==r?void 0:r.every((e=>{const r=t.isTag(e)&&t.getParent(e);return e===ri||r&&t.isTag(r)})));for(const t of e){if(t.length>0&&Pn(t[0])&&t[0].type!==Sn.Descendant);else{if(!n||t.some(di))continue;t.unshift(hi)}t.unshift(fi)}}(e,t,s);else if(e.some((e=>e.length>0&&Pn(e[0]))))throw new Error("Relative selectors are not allowed when the `relativeSelector` option is disabled");let a=!1;const o=e.map((e=>{if(e.length>=2){const[t,r]=e;t.type!==Sn.Pseudo||"scope"!==t.name||(i&&r.type===Sn.Descendant?e[1]=pi:r.type!==Sn.Adjacent&&r.type!==Sn.Sibling||(a=!0))}return function(e,t,r){var n;return e.reduce(((e,n)=>e===En.falseFunc?En.falseFunc:function(e,t,r,n,i){const{adapter:s,equals:a}=r;switch(t.type){case Sn.PseudoElement:throw new Error("Pseudo-elements are not supported by css-select");case Sn.ColumnCombinator:throw new Error("Column combinators are not yet supported by css-select");case Sn.Attribute:if(null!=t.namespace)throw new Error("Namespaced attributes are not yet supported by css-select");return r.xmlMode&&!r.lowerCaseAttributeNames||(t.name=t.name.toLowerCase()),Wn[t.action](e,t,r);case Sn.Pseudo:return function(e,t,r,n,i){var s;const{name:a,data:o}=t;if(Array.isArray(o)){if(!(a in oi))throw new Error(`Unknown pseudo-class :${a}(${o})`);return oi[a](e,o,r,n,i)}const l=null===(s=r.pseudos)||void 0===s?void 0:s[a],c="string"==typeof l?l:ti[a];if("string"==typeof c){if(null!=o)throw new Error(`Pseudo ${a} doesn't have any arguments`);const t=Ln(c);return oi.is(e,t,r,n,i)}if("function"==typeof l)return ei(l,a,o,1),t=>l(t,o)&&e(t);if(a in Yn)return Yn[a](e,o,r,n);if(a in Qn){const t=Qn[a];return ei(t,a,o,2),n=>t(n,r,o)&&e(n)}throw new Error(`Unknown pseudo-class :${a}`)}(e,t,r,n,i);case Sn.Tag:{if(null!=t.namespace)throw new Error("Namespaced tag names are not yet supported by css-select");let{name:n}=t;return r.xmlMode&&!r.lowerCaseTags||(n=n.toLowerCase()),function(t){return s.getName(t)===n&&e(t)}}case Sn.Descendant:{if(!1===r.cacheResults||"undefined"==typeof WeakSet)return function(t){let r=t;for(;r=li(r,s);)if(e(r))return!0;return!1};const t=new WeakSet;return function(r){let n=r;for(;n=li(n,s);)if(!t.has(n)){if(s.isTag(n)&&e(n))return!0;t.add(n)}return!1}}case"_flexibleDescendant":return function(t){let r=t;do{if(e(r))return!0}while(r=li(r,s));return!1};case Sn.Parent:return function(t){return s.getChildren(t).some((t=>s.isTag(t)&&e(t)))};case Sn.Child:return function(t){const r=s.getParent(t);return null!=r&&s.isTag(r)&&e(r)};case Sn.Sibling:return function(t){const r=s.getSiblings(t);for(let n=0;n<r.length;n++){const i=r[n];if(a(t,i))break;if(s.isTag(i)&&e(i))return!0}return!1};case Sn.Adjacent:return s.prevElementSibling?function(t){const r=s.prevElementSibling(t);return null!=r&&e(r)}:function(t){const r=s.getSiblings(t);let n;for(let e=0;e<r.length;e++){const i=r[e];if(a(t,i))break;s.isTag(i)&&(n=i)}return!!n&&e(n)};case Sn.Universal:if(null!=t.namespace&&"*"!==t.namespace)throw new Error("Namespaced universal selectors are not yet supported by css-select");return e}}(e,n,t,r,mi)),null!==(n=t.rootFunc)&&void 0!==n?n:En.trueFunc)}(e,t,s)})).reduce(gi,En.falseFunc);return o.shouldTestNextSiblings=a,o}function gi(e,t){return t===En.falseFunc||e===En.trueFunc?e:e===En.falseFunc||t===En.trueFunc?t:function(r){return e(r)||t(r)}}const bi=(e,t)=>e===t,yi={adapter:n,equals:bi};function vi(e){var t,r,i,s;const a=null!=e?e:yi;return null!==(t=a.adapter)&&void 0!==t||(a.adapter=n),null!==(r=a.equals)&&void 0!==r||(a.equals=null!==(s=null===(i=a.adapter)||void 0===i?void 0:i.equals)&&void 0!==s?s:bi),a}function _i(e){return function(t,r,n){const i=vi(r);return e(t,i,n)}}const wi=_i(ci);function Si(e){return function(t,r,n){const i=vi(n);"function"!=typeof t&&(t=ui(t,i,r));const s=function(e,t,r=!1){return r&&(e=function(e,t){const r=Array.isArray(e)?e.slice(0):[e],n=r.length;for(let e=0;e<n;e++){const n=ii(r[e],t);r.push(...n)}return r}(e,t)),Array.isArray(e)?t.removeSubsets(e):t.getChildren(e)}(r,i.adapter,t.shouldTestNextSiblings);return e(t,s,i)}}_i(ui),_i(mi),Si(((e,t,r)=>e!==En.falseFunc&&t&&0!==t.length?r.adapter.findAll(e,t):[])),Si(((e,t,r)=>e!==En.falseFunc&&t&&0!==t.length?r.adapter.findOne(e,t):null));const{isArray:xi}=Array,Ei=({nodeType:e})=>1===e,ki=(e,t)=>t.some((t=>Ei(t)&&(e(t)||ki(e,Ai(t))))),Ai=({childNodes:e})=>e,Ci=e=>xi(e)?e.map(Ci).join(""):Ei(e)?Ci(Ai(e)):3===e.nodeType?e.data:"",Ti=(e,t)=>{const r=[];for(const n of t)Ei(n)&&(e(n)&&r.push(n),r.push(...Ti(e,Ai(n))));return r},Ri=(e,t)=>{for(let r of t)if(e(r)||(r=Ri(e,Ai(r))))return r;return null},Ni={isTag:Ei,existsOne:ki,getAttributeValue:(e,t)=>"class"===t?e.classList.value:e.getAttribute(t),getChildren:Ai,getName:e=>{const{localName:t}=e;return or(e)?t.toLowerCase():t},getParent:({parentNode:e})=>e,getSiblings:e=>{const{parentNode:t}=e;return t?Ai(t):e},getText:Ci,hasAttrib:(e,t)=>e.hasAttribute(t),removeSubsets:e=>{let{length:t}=e;for(;t--;){const r=e[t];if(t&&-1<e.lastIndexOf(r,t-1))e.splice(t,1);else for(let{parentNode:n}=r;n;n=n.parentNode)if(e.includes(n)){e.splice(t,1);break}}return e},findAll:Ti,findOne:Ri},Ii=(e,t)=>wi(t,{context:t.includes(":scope")?e:void 0,xmlMode:!or(e),adapter:Ni});class qi extends vn{constructor(e,t=""){super(e,"#text",3,t)}get wholeText(){const e=[];let{previousSibling:t,nextSibling:r}=this;for(;t&&3===t.nodeType;)e.unshift(t[A]),t=t.previousSibling;for(e.push(this[A]);r&&3===r.nodeType;)e.push(r[A]),r=r.nextSibling;return e.join("")}cloneNode(){const{ownerDocument:e,[A]:t}=this;return new qi(e,t)}toString(){return sn(this[A])}}const Di=e=>e instanceof Qr,Li=(e,t,r)=>{const{ownerDocument:n}=e;for(const i of r)e.insertBefore(Di(i)?i:new qi(n,i),t)};class Oi extends Qr{constructor(e,t,r){super(e,t,r),this[w]=null,this[y]=this[h]={[y]:null,[_]:this,[x]:this,nodeType:$t,ownerDocument:this.ownerDocument,parentNode:null}}get childNodes(){const e=new Yr;let{firstChild:t}=this;for(;t;)e.push(t),t=dn(t);return e}get children(){const e=new Yr;let{firstElementChild:t}=this;for(;t;)e.push(t),t=hn(t);return e}get firstChild(){let{[y]:e,[h]:t}=this;for(;2===e.nodeType;)e=e[y];return e===t?null:e}get firstElementChild(){let{firstChild:e}=this;for(;e;){if(1===e.nodeType)return e;e=dn(e)}return null}get lastChild(){const e=this[h][_];switch(e.nodeType){case $t:return e[x];case 2:return null}return e===this?null:e}get lastElementChild(){let{lastChild:e}=this;for(;e;){if(1===e.nodeType)return e;e=un(e)}return null}get childElementCount(){return this.children.length}prepend(...e){Li(this,this.firstChild,e)}append(...e){Li(this,this[h],e)}replaceChildren(...e){let{[y]:t,[h]:r}=this;for(;t!==r&&2===t.nodeType;)t=t[y];for(;t!==r;){const e=ar(t)[y];t.remove(),t=e}e.length&&Li(this,r,e)}getElementsByClassName(e){const t=new Yr;let{[y]:r,[h]:n}=this;for(;r!==n;)1===r.nodeType&&r.hasAttribute("class")&&r.classList.has(e)&&t.push(r),r=r[y];return t}getElementsByTagName(e){const t=new Yr;let{[y]:r,[h]:n}=this;for(;r!==n;)1!==r.nodeType||r.localName!==e&&dr(r)!==e||t.push(r),r=r[y];return t}querySelector(e){const t=Ii(this,e);let{[y]:r,[h]:n}=this;for(;r!==n;){if(1===r.nodeType&&t(r))return r;r=1===r.nodeType&&"template"===r.localName?r[h]:r[y]}return null}querySelectorAll(e){const t=Ii(this,e),r=new Yr;let{[y]:n,[h]:i}=this;for(;n!==i;)1===n.nodeType&&t(n)&&r.push(n),n=1===n.nodeType&&"template"===n.localName?n[h]:n[y];return r}appendChild(e){return this.insertBefore(e,this[h])}contains(e){let t=e;for(;t&&t!==this;)t=t.parentNode;return t===this}insertBefore(e,t=null){if(e===t)return e;if(e===this)throw new Error("unable to append a node to itself");const r=t||this[h];switch(e.nodeType){case 1:e.remove(),e.parentNode=this,cr(r[_],e,r),Ur(e,null),_r(e);break;case Jt:{let{[w]:t,firstChild:n,lastChild:i}=e;if(n){((e,t,r,n)=>{lr(e,t),lr(ar(r),n)})(r[_],n,i,r),lr(e,e[h]),t&&t.replaceChildren();do{n.parentNode=this,Ur(n,null),1===n.nodeType&&_r(n)}while(n!==i&&(n=dn(n)))}break}case 3:case 8:case 4:e.remove();default:e.parentNode=this,ur(r[_],e,r),Ur(e,null)}return e}normalize(){let{[y]:e,[h]:t}=this;for(;e!==t;){const{[y]:t,[_]:r,nodeType:n}=e;3===n&&(e[A]?r&&3===r.nodeType&&(r.textContent+=e.textContent,e.remove()):e.remove()),e=t}}removeChild(e){if(e.parentNode!==this)throw new Error("node is not a child");return e.remove(),e}replaceChild(e,t){const r=ar(t)[y];return t.remove(),this.insertBefore(e,r),t}}class Bi extends Oi{getElementById(e){let{[y]:t,[h]:r}=this;for(;t!==r;){if(1===t.nodeType&&t.id===e)return t;t=t[y]}return null}cloneNode(e){const{ownerDocument:t,constructor:r}=this,n=new r(t);if(e){const{[h]:t}=n;for(const r of this.childNodes)n.insertBefore(r.cloneNode(e),t)}return n}toString(){const{childNodes:e,localName:t}=this;return`<${t}>${e.join("")}</${t}>`}toJSON(){const e=[];return((e,t)=>{t.push(e.nodeType),Ir(e,t)})(this,e),e}}class Pi extends Bi{constructor(e){super(e,"#document-fragment",Jt)}}class Mi extends Qr{constructor(e,t,r="",n=""){super(e,"#document-type",Zt),this.name=t,this.publicId=r,this.systemId=n}cloneNode(){const{ownerDocument:e,name:t,publicId:r,systemId:n}=this;return new Mi(e,t,r,n)}toString(){const{name:e,publicId:t,systemId:r}=this,n=0<t.length,i=[e];return n&&i.push("PUBLIC",`"${t}"`),r.length&&(n||i.push("SYSTEM"),i.push(`"${r}"`)),`<!DOCTYPE ${i.join(" ")}>`}toJSON(){const e=[];return Lr(this,e),e}}const Ui=e=>e.childNodes.join(""),zi=(e,t)=>{const{ownerDocument:r}=e,{constructor:n}=r,i=new n;i[o]=r[o];const{childNodes:s}=Cr(i,or(e),t);e.replaceChildren(...s.map(Fi,r))};function Fi(e){switch(e.ownerDocument=this,e.nodeType){case 1:case Jt:e.childNodes.forEach(Fi,this)}return e}const ji=e=>e.replace(/(([A-Z0-9])([A-Z0-9][a-z]))|(([a-z0-9]+)([A-Z]))/g,"$2$5-$3$6").toLowerCase(),Hi=new WeakMap,Vi=e=>`data-${ji(e)}`,Wi=e=>e.slice(5).replace(/-([a-z])/g,((e,t)=>t.toUpperCase())),Gi={get(e,t){if(t in e)return Hi.get(e).getAttribute(Vi(t))},set:(e,t,r)=>(e[t]=r,Hi.get(e).setAttribute(Vi(t),r),!0),deleteProperty:(e,t)=>(t in e&&Hi.get(e).removeAttribute(Vi(t)),delete e[t])};class $i{constructor(e){for(const{name:t,value:r}of e.attributes)/^data-/.test(t)&&(this[Wi(t)]=r);return Hi.set(this,e),new Proxy(this,Gi)}}ir($i.prototype,null);const{add:Zi}=Set.prototype,Ji=(e,t)=>{for(const r of t)r&&Zi.call(e,r)},Ki=({[v]:e,value:t})=>{const r=e.getAttributeNode("class");r?r.value=t:jr(e,new on(e.ownerDocument,"class",t))};class Yi extends Set{constructor(e){super(),this[v]=e;const t=e.getAttributeNode("class");t&&Ji(this,t.value.split(/\s+/))}get length(){return this.size}get value(){return[...this].join(" ")}add(...e){Ji(this,e),Ki(this)}contains(e){return this.has(e)}remove(...e){for(const t of e)this.delete(t);Ki(this)}toggle(e,t){if(this.has(e)){if(t)return!0;this.delete(e),Ki(this)}else if(t||1===arguments.length)return super.add(e),Ki(this),!0;return!1}replace(e,t){return!!this.has(e)&&(this.delete(e),super.add(t),Ki(this),!0)}supports(){return!0}}const Xi=new WeakMap,Qi=e=>[...e.keys()].filter((e=>e!==w)),es=e=>{const t=Xi.get(e).getAttributeNode("style");if((!t||t[s]||e.get(w)!==t)&&(e.clear(),t)){e.set(w,t);for(const r of t[A].split(/\s*;\s*/)){let[t,...n]=r.split(":");if(n.length>0){t=t.trim();const r=n.join(":").trim();t&&r&&e.set(t,r)}}}return t},ts={get:(e,t)=>t in ns?e[t]:(es(e),"length"===t?Qi(e).length:/^\d+$/.test(t)?Qi(e)[t]:e.get(ji(t))),set(e,t,r){if("cssText"===t)e[t]=r;else{let n=es(e);if(null==r?e.delete(ji(t)):e.set(ji(t),r),!n){const t=Xi.get(e);n=t.ownerDocument.createAttribute("style"),t.setAttributeNode(n),e.set(w,n)}n[s]=!1,n[A]=e.toString()}return!0}};class rs extends Map{constructor(e){return super(),Xi.set(this,e),new Proxy(this,ts)}get cssText(){return this.toString()}set cssText(e){Xi.get(this).setAttribute("style",e)}getPropertyValue(e){const t=this[w];return ts.get(t,e)}setProperty(e,t){const r=this[w];ts.set(r,e,t)}removeProperty(e){const t=this[w];ts.set(t,e,null)}[Symbol.iterator](){const e=this[w];es(e);const t=Qi(e),{length:r}=t;let n=0;return{next(){const e=n===r;return{done:e,value:e?null:t[n++]}}}}get[w](){return this}toString(){const e=this[w];es(e);const t=[];return e.forEach(is,t),t.join(";")}}const{prototype:ns}=rs;function is(e,t){t!==w&&this.push(`${t}:${e}`)}function ss(e){return e.currentTarget}class as{static get BUBBLING_PHASE(){return 3}static get AT_TARGET(){return 2}static get CAPTURING_PHASE(){return 1}static get NONE(){return 0}constructor(e,t={}){this.type=e,this.bubbles=!!t.bubbles,this.cancelBubble=!1,this._stopImmediatePropagationFlag=!1,this.cancelable=!!t.cancelable,this.eventPhase=this.NONE,this.timeStamp=Date.now(),this.defaultPrevented=!1,this.originalTarget=null,this.returnValue=null,this.srcElement=null,this.target=null,this._path=[]}get BUBBLING_PHASE(){return 3}get AT_TARGET(){return 2}get CAPTURING_PHASE(){return 1}get NONE(){return 0}preventDefault(){this.defaultPrevented=!0}composedPath(){return this._path.map(ss)}stopPropagation(){this.cancelBubble=!0}stopImmediatePropagation(){this.stopPropagation(),this._stopImmediatePropagationFlag=!0}}class os extends Array{constructor(e){super(),this.ownerElement=e}getNamedItem(e){return this.ownerElement.getAttributeNode(e)}setNamedItem(e){this.ownerElement.setAttributeNode(e),this.unshift(e)}removeNamedItem(e){const t=this.getNamedItem(e);this.ownerElement.removeAttribute(e),this.splice(this.indexOf(t),1)}item(e){return e<this.length?this[e]:null}getNamedItemNS(e,t){return this.getNamedItem(t)}setNamedItemNS(e,t){return this.setNamedItem(t)}removeNamedItemNS(e,t){return this.removeNamedItem(t)}}class ls extends Bi{constructor(e){super(e.ownerDocument,"#shadow-root",Jt),this.host=e}get innerHTML(){return Ui(this)}set innerHTML(e){zi(this,e)}}const cs={get:(e,t)=>t in e?e[t]:e.find((({name:e})=>e===t))},us=(e,t,r)=>{if("ownerSVGElement"in t){const n=e.createElementNS(Yt,r);return n.ownerSVGElement=t.ownerSVGElement,n}return e.createElement(r)},ds=({localName:e,ownerDocument:t})=>t[g].voidElements.test(e);class hs extends Oi{constructor(e,t){super(e,t,1),this[a]=null,this[c]=null,this[E]=null}get isConnected(){return ln(this)}get parentElement(){return cn(this)}get previousSibling(){return un(this)}get nextSibling(){return dn(this)}get namespaceURI(){return"http://www.w3.org/1999/xhtml"}get previousElementSibling(){return pn(this)}get nextElementSibling(){return hn(this)}before(...e){mn(this,e)}after(...e){gn(this,e)}replaceWith(...e){bn(this,e)}remove(){yn(this[_],this,this[h][y])}get id(){return Gr.get(this,"id")}set id(e){Gr.set(this,"id",e)}get className(){return this.classList.value}set className(e){const{classList:t}=this;t.clear(),t.add(...sr(e).split(/\s+/))}get nodeName(){return dr(this)}get tagName(){return dr(this)}get classList(){return this[a]||(this[a]=new Yi(this))}get dataset(){return this[c]||(this[c]=new $i(this))}getBoundingClientRect(){return{x:0,y:0,bottom:0,height:0,left:0,right:0,top:0,width:0}}get nonce(){return Gr.get(this,"nonce")}set nonce(e){Gr.set(this,"nonce",e)}get style(){return this[E]||(this[E]=new rs(this))}get tabIndex(){return Wr.get(this,"tabindex")||-1}set tabIndex(e){Wr.set(this,"tabindex",e)}get slot(){return Gr.get(this,"slot")}set slot(e){Gr.set(this,"slot",e)}get innerText(){const e=[];let{[y]:t,[h]:r}=this;for(;t!==r;)3===t.nodeType?e.push(t.textContent.replace(/\s+/g," ")):e.length&&t[y]!=r&&Kt.has(t.tagName)&&e.push("\n"),t=t[y];return e.join("")}get textContent(){const e=[];let{[y]:t,[h]:r}=this;for(;t!==r;){const r=t.nodeType;3!==r&&4!==r||e.push(t.textContent),t=t[y]}return e.join("")}set textContent(e){this.replaceChildren(),null!=e&&""!==e&&this.appendChild(new qi(this.ownerDocument,e))}get innerHTML(){return Ui(this)}set innerHTML(e){zi(this,e)}get outerHTML(){return this.toString()}set outerHTML(e){const t=this.ownerDocument.createElement("");t.innerHTML=e,this.replaceWith(...t.childNodes)}get attributes(){const e=new os(this);let t=this[y];for(;2===t.nodeType;)e.push(t),t=t[y];return new Proxy(e,cs)}focus(){this.dispatchEvent(new as("focus"))}getAttribute(e){if("class"===e)return this.className;const t=this.getAttributeNode(e);return t&&(or(this)?t.value:sn(t.value))}getAttributeNode(e){let t=this[y];for(;2===t.nodeType;){if(t.name===e)return t;t=t[y]}return null}getAttributeNames(){const e=new Yr;let t=this[y];for(;2===t.nodeType;)e.push(t.name),t=t[y];return e}hasAttribute(e){return!!this.getAttributeNode(e)}hasAttributes(){return 2===this[y].nodeType}removeAttribute(e){"class"===e&&this[a]&&this[a].clear();let t=this[y];for(;2===t.nodeType;){if(t.name===e)return void Hr(this,t);t=t[y]}}removeAttributeNode(e){let t=this[y];for(;2===t.nodeType;){if(t===e)return void Hr(this,t);t=t[y]}}setAttribute(e,t){if("class"===e)this.className=t;else{const r=this.getAttributeNode(e);r?r.value=t:jr(this,new on(this.ownerDocument,e,t))}}setAttributeNode(e){const{name:t}=e,r=this.getAttributeNode(t);if(r!==e){r&&this.removeAttributeNode(r);const{ownerElement:t}=e;t&&t.removeAttributeNode(e),jr(this,e)}return r}toggleAttribute(e,t){return this.hasAttribute(e)?!!t||(this.removeAttribute(e),!1):!(!t&&1!==arguments.length||(this.setAttribute(e,""),0))}get shadowRoot(){if(pr.has(this)){const{mode:e,shadowRoot:t}=pr.get(this);if("open"===e)return t}return null}attachShadow(e){if(pr.has(this))throw new Error("operation not supported");const t=new ls(this);return pr.set(this,{mode:e.mode,shadowRoot:t}),t}matches(e){return((e,t)=>function(e,t,r){const n=vi(r);return("function"==typeof t?t:ci(t,n))(e)}(e,t,{strict:!0,context:t.includes(":scope")?e:void 0,xmlMode:!or(e),adapter:Ni}))(this,e)}closest(e){let t=this;const r=Ii(t,e);for(;t&&!r(t);)t=t.parentElement;return t}insertAdjacentElement(e,t){const{parentElement:r}=this;switch(e){case"beforebegin":if(r){r.insertBefore(t,this);break}return null;case"afterbegin":this.insertBefore(t,this.firstChild);break;case"beforeend":this.insertBefore(t,null);break;case"afterend":if(r){r.insertBefore(t,this.nextSibling);break}return null}return t}insertAdjacentHTML(e,t){const r=this.ownerDocument.createElement("template");r.innerHTML=t,this.insertAdjacentElement(e,r.content)}insertAdjacentText(e,t){const r=this.ownerDocument.createTextNode(t);this.insertAdjacentElement(e,r)}cloneNode(e=!1){const{ownerDocument:t,localName:r}=this,n=e=>{e.parentNode=s,lr(a,e),a=e},i=us(t,this,r);let s=i,a=i,{[y]:o,[h]:l}=this;for(;o!==l&&(e||2===o.nodeType);){switch(o.nodeType){case $t:lr(a,s[h]),a=s[h],s=s.parentNode;break;case 1:{const e=us(t,o,o.localName);n(e),s=e;break}case 2:{const t=o.cloneNode(e);t.ownerElement=s,n(t);break}case 3:case 8:case 4:n(o.cloneNode(e))}o=o[y]}return lr(a,i[h]),i}toString(){const e=[],{[h]:t}=this;let r={[y]:this},n=!1;do{switch(r=r[y],r.nodeType){case 2:{const t=" "+r;switch(t){case" id":case" class":case" style":break;default:e.push(t)}break}case $t:{const t=r[x];n?("ownerSVGElement"in t?e.push(" />"):ds(t)?e.push(or(t)?">":" />"):e.push(`></${t.localName}>`),n=!1):e.push(`</${t.localName}>`);break}case 1:n&&e.push(">"),r.toString!==this.toString?(e.push(r.toString()),r=r[h],n=!1):(e.push(`<${r.localName}`),n=!0);break;case 3:case 8:case 4:e.push((n?">":"")+r),n=!1}}while(r!==t);return e.join("")}toJSON(){const e=[];return Or(this,e),e}getAttributeNS(e,t){return this.getAttribute(t)}getElementsByTagNameNS(e,t){return this.getElementsByTagName(t)}hasAttributeNS(e,t){return this.hasAttribute(t)}removeAttributeNS(e,t){this.removeAttribute(t)}setAttributeNS(e,t,r){this.setAttribute(t,r)}setAttributeNodeNS(e){return this.setAttributeNode(e)}}const ps=new WeakMap,fs={get:(e,t)=>e[t],set:(e,t,r)=>(e[t]=r,!0)};class ms extends hs{constructor(e,t,r=null){super(e,t),this.ownerSVGElement=r}get className(){return ps.has(this)||ps.set(this,new Proxy({baseVal:"",animVal:""},fs)),ps.get(this)}set className(e){const{classList:t}=this;t.clear(),t.add(...sr(e).split(/\s+/))}get namespaceURI(){return"http://www.w3.org/2000/svg"}getAttribute(e){return"class"===e?[...this.classList].join(" "):super.getAttribute(e)}setAttribute(e,t){if("class"===e)this.className=t;else if("style"===e){const{className:e}=this;e.baseVal=e.animVal=t}super.setAttribute(e,t)}}const gs=()=>{throw new TypeError("Illegal constructor")};function bs(){gs()}function ys(){gs()}function vs(){gs()}function _s(){gs()}function ws(){gs()}function Ss(){gs()}function xs(){gs()}function Es(){gs()}function ks(){gs()}function As(){gs()}function Cs(){gs()}ir(bs,on),bs.prototype=on.prototype,ir(ys,_n),ys.prototype=_n.prototype,ir(vs,vn),vs.prototype=vn.prototype,ir(_s,wn),_s.prototype=wn.prototype,ir(ws,Pi),ws.prototype=Pi.prototype,ir(Ss,Mi),Ss.prototype=Mi.prototype,ir(xs,hs),xs.prototype=hs.prototype,ir(Es,Qr),Es.prototype=Qr.prototype,ir(ks,ls),ks.prototype=ls.prototype,ir(As,qi),As.prototype=qi.prototype,ir(Cs,ms),Cs.prototype=ms.prototype;const Ts={Attr:bs,CDATASection:ys,CharacterData:vs,Comment:_s,DocumentFragment:ws,DocumentType:Ss,Element:xs,Node:Es,ShadowRoot:ks,Text:As,SVGElement:Cs},Rs=new WeakMap,Ns={get:(e,t)=>Rs.has(e)&&Rs.get(e)[t]||null,set(e,t,r){Rs.has(e)||Rs.set(e,{});const n=Rs.get(e),i=t.slice(2);n[t]&&e.removeEventListener(i,n[t],!1),(n[t]=r)&&e.addEventListener(i,r,!1)}};class Is extends hs{static get observedAttributes(){return[]}constructor(e=null,t=""){super(e,t);const r=!e;let n;if(r){const{constructor:r}=this;if(!mr.has(r))throw new Error("unable to initialize this Custom Element");({ownerDocument:e,localName:t,options:n}=mr.get(r))}if(e[k]){const{element:t,values:r}=e[k];e[k]=null;for(const[e,n]of r)t[e]=n;return t}r&&(this.ownerDocument=this[h].ownerDocument=e,this.localName=t,gr.set(this,{connected:!1}),n.is&&this.setAttribute("is",n.is))}blur(){this.dispatchEvent(new as("blur"))}click(){const e=new as("click",{bubbles:!0,cancelable:!0});e.button=0,this.dispatchEvent(e)}get accessKeyLabel(){const{accessKey:e}=this;return e&&`Alt+Shift+${e}`}get isContentEditable(){return this.hasAttribute("contenteditable")}get contentEditable(){return Vr.get(this,"contenteditable")}set contentEditable(e){Vr.set(this,"contenteditable",e)}get draggable(){return Vr.get(this,"draggable")}set draggable(e){Vr.set(this,"draggable",e)}get hidden(){return Vr.get(this,"hidden")}set hidden(e){Vr.set(this,"hidden",e)}get spellcheck(){return Vr.get(this,"spellcheck")}set spellcheck(e){Vr.set(this,"spellcheck",e)}get accessKey(){return Gr.get(this,"accesskey")}set accessKey(e){Gr.set(this,"accesskey",e)}get dir(){return Gr.get(this,"dir")}set dir(e){Gr.set(this,"dir",e)}get lang(){return Gr.get(this,"lang")}set lang(e){Gr.set(this,"lang",e)}get title(){return Gr.get(this,"title")}set title(e){Gr.set(this,"title",e)}get onabort(){return Ns.get(this,"onabort")}set onabort(e){Ns.set(this,"onabort",e)}get onblur(){return Ns.get(this,"onblur")}set onblur(e){Ns.set(this,"onblur",e)}get oncancel(){return Ns.get(this,"oncancel")}set oncancel(e){Ns.set(this,"oncancel",e)}get oncanplay(){return Ns.get(this,"oncanplay")}set oncanplay(e){Ns.set(this,"oncanplay",e)}get oncanplaythrough(){return Ns.get(this,"oncanplaythrough")}set oncanplaythrough(e){Ns.set(this,"oncanplaythrough",e)}get onchange(){return Ns.get(this,"onchange")}set onchange(e){Ns.set(this,"onchange",e)}get onclick(){return Ns.get(this,"onclick")}set onclick(e){Ns.set(this,"onclick",e)}get onclose(){return Ns.get(this,"onclose")}set onclose(e){Ns.set(this,"onclose",e)}get oncontextmenu(){return Ns.get(this,"oncontextmenu")}set oncontextmenu(e){Ns.set(this,"oncontextmenu",e)}get oncuechange(){return Ns.get(this,"oncuechange")}set oncuechange(e){Ns.set(this,"oncuechange",e)}get ondblclick(){return Ns.get(this,"ondblclick")}set ondblclick(e){Ns.set(this,"ondblclick",e)}get ondrag(){return Ns.get(this,"ondrag")}set ondrag(e){Ns.set(this,"ondrag",e)}get ondragend(){return Ns.get(this,"ondragend")}set ondragend(e){Ns.set(this,"ondragend",e)}get ondragenter(){return Ns.get(this,"ondragenter")}set ondragenter(e){Ns.set(this,"ondragenter",e)}get ondragleave(){return Ns.get(this,"ondragleave")}set ondragleave(e){Ns.set(this,"ondragleave",e)}get ondragover(){return Ns.get(this,"ondragover")}set ondragover(e){Ns.set(this,"ondragover",e)}get ondragstart(){return Ns.get(this,"ondragstart")}set ondragstart(e){Ns.set(this,"ondragstart",e)}get ondrop(){return Ns.get(this,"ondrop")}set ondrop(e){Ns.set(this,"ondrop",e)}get ondurationchange(){return Ns.get(this,"ondurationchange")}set ondurationchange(e){Ns.set(this,"ondurationchange",e)}get onemptied(){return Ns.get(this,"onemptied")}set onemptied(e){Ns.set(this,"onemptied",e)}get onended(){return Ns.get(this,"onended")}set onended(e){Ns.set(this,"onended",e)}get onerror(){return Ns.get(this,"onerror")}set onerror(e){Ns.set(this,"onerror",e)}get onfocus(){return Ns.get(this,"onfocus")}set onfocus(e){Ns.set(this,"onfocus",e)}get oninput(){return Ns.get(this,"oninput")}set oninput(e){Ns.set(this,"oninput",e)}get oninvalid(){return Ns.get(this,"oninvalid")}set oninvalid(e){Ns.set(this,"oninvalid",e)}get onkeydown(){return Ns.get(this,"onkeydown")}set onkeydown(e){Ns.set(this,"onkeydown",e)}get onkeypress(){return Ns.get(this,"onkeypress")}set onkeypress(e){Ns.set(this,"onkeypress",e)}get onkeyup(){return Ns.get(this,"onkeyup")}set onkeyup(e){Ns.set(this,"onkeyup",e)}get onload(){return Ns.get(this,"onload")}set onload(e){Ns.set(this,"onload",e)}get onloadeddata(){return Ns.get(this,"onloadeddata")}set onloadeddata(e){Ns.set(this,"onloadeddata",e)}get onloadedmetadata(){return Ns.get(this,"onloadedmetadata")}set onloadedmetadata(e){Ns.set(this,"onloadedmetadata",e)}get onloadstart(){return Ns.get(this,"onloadstart")}set onloadstart(e){Ns.set(this,"onloadstart",e)}get onmousedown(){return Ns.get(this,"onmousedown")}set onmousedown(e){Ns.set(this,"onmousedown",e)}get onmouseenter(){return Ns.get(this,"onmouseenter")}set onmouseenter(e){Ns.set(this,"onmouseenter",e)}get onmouseleave(){return Ns.get(this,"onmouseleave")}set onmouseleave(e){Ns.set(this,"onmouseleave",e)}get onmousemove(){return Ns.get(this,"onmousemove")}set onmousemove(e){Ns.set(this,"onmousemove",e)}get onmouseout(){return Ns.get(this,"onmouseout")}set onmouseout(e){Ns.set(this,"onmouseout",e)}get onmouseover(){return Ns.get(this,"onmouseover")}set onmouseover(e){Ns.set(this,"onmouseover",e)}get onmouseup(){return Ns.get(this,"onmouseup")}set onmouseup(e){Ns.set(this,"onmouseup",e)}get onmousewheel(){return Ns.get(this,"onmousewheel")}set onmousewheel(e){Ns.set(this,"onmousewheel",e)}get onpause(){return Ns.get(this,"onpause")}set onpause(e){Ns.set(this,"onpause",e)}get onplay(){return Ns.get(this,"onplay")}set onplay(e){Ns.set(this,"onplay",e)}get onplaying(){return Ns.get(this,"onplaying")}set onplaying(e){Ns.set(this,"onplaying",e)}get onprogress(){return Ns.get(this,"onprogress")}set onprogress(e){Ns.set(this,"onprogress",e)}get onratechange(){return Ns.get(this,"onratechange")}set onratechange(e){Ns.set(this,"onratechange",e)}get onreset(){return Ns.get(this,"onreset")}set onreset(e){Ns.set(this,"onreset",e)}get onresize(){return Ns.get(this,"onresize")}set onresize(e){Ns.set(this,"onresize",e)}get onscroll(){return Ns.get(this,"onscroll")}set onscroll(e){Ns.set(this,"onscroll",e)}get onseeked(){return Ns.get(this,"onseeked")}set onseeked(e){Ns.set(this,"onseeked",e)}get onseeking(){return Ns.get(this,"onseeking")}set onseeking(e){Ns.set(this,"onseeking",e)}get onselect(){return Ns.get(this,"onselect")}set onselect(e){Ns.set(this,"onselect",e)}get onshow(){return Ns.get(this,"onshow")}set onshow(e){Ns.set(this,"onshow",e)}get onstalled(){return Ns.get(this,"onstalled")}set onstalled(e){Ns.set(this,"onstalled",e)}get onsubmit(){return Ns.get(this,"onsubmit")}set onsubmit(e){Ns.set(this,"onsubmit",e)}get onsuspend(){return Ns.get(this,"onsuspend")}set onsuspend(e){Ns.set(this,"onsuspend",e)}get ontimeupdate(){return Ns.get(this,"ontimeupdate")}set ontimeupdate(e){Ns.set(this,"ontimeupdate",e)}get ontoggle(){return Ns.get(this,"ontoggle")}set ontoggle(e){Ns.set(this,"ontoggle",e)}get onvolumechange(){return Ns.get(this,"onvolumechange")}set onvolumechange(e){Ns.set(this,"onvolumechange",e)}get onwaiting(){return Ns.get(this,"onwaiting")}set onwaiting(e){Ns.set(this,"onwaiting",e)}get onauxclick(){return Ns.get(this,"onauxclick")}set onauxclick(e){Ns.set(this,"onauxclick",e)}get ongotpointercapture(){return Ns.get(this,"ongotpointercapture")}set ongotpointercapture(e){Ns.set(this,"ongotpointercapture",e)}get onlostpointercapture(){return Ns.get(this,"onlostpointercapture")}set onlostpointercapture(e){Ns.set(this,"onlostpointercapture",e)}get onpointercancel(){return Ns.get(this,"onpointercancel")}set onpointercancel(e){Ns.set(this,"onpointercancel",e)}get onpointerdown(){return Ns.get(this,"onpointerdown")}set onpointerdown(e){Ns.set(this,"onpointerdown",e)}get onpointerenter(){return Ns.get(this,"onpointerenter")}set onpointerenter(e){Ns.set(this,"onpointerenter",e)}get onpointerleave(){return Ns.get(this,"onpointerleave")}set onpointerleave(e){Ns.set(this,"onpointerleave",e)}get onpointermove(){return Ns.get(this,"onpointermove")}set onpointermove(e){Ns.set(this,"onpointermove",e)}get onpointerout(){return Ns.get(this,"onpointerout")}set onpointerout(e){Ns.set(this,"onpointerout",e)}get onpointerover(){return Ns.get(this,"onpointerover")}set onpointerover(e){Ns.set(this,"onpointerover",e)}get onpointerup(){return Ns.get(this,"onpointerup")}set onpointerup(e){Ns.set(this,"onpointerup",e)}}const qs="template";class Ds extends Is{constructor(e){super(e,qs);const t=this.ownerDocument.createDocumentFragment();(this[l]=t)[w]=this}get content(){if(this.hasChildNodes()&&!this[l].hasChildNodes())for(const e of this.childNodes)this[l].appendChild(e.cloneNode(!0));return this[l]}}Rr(qs,Ds);const{toString:Ls}=Is.prototype;class Os extends Is{get innerHTML(){return this.textContent}set innerHTML(e){this.textContent=e}toString(){return Ls.call(this.cloneNode()).replace("><",(()=>`>${this.textContent}<`))}}const Bs="script";class Ps extends Os{constructor(e,t=Bs){super(e,t)}get type(){return Gr.get(this,"type")}set type(e){Gr.set(this,"type",e)}get src(){return Gr.get(this,"src")}set src(e){Gr.set(this,"src",e)}get defer(){return Vr.get(this,"defer")}set defer(e){Vr.set(this,"defer",e)}get crossOrigin(){return Gr.get(this,"crossorigin")}set crossOrigin(e){Gr.set(this,"crossorigin",e)}get nomodule(){return Vr.get(this,"nomodule")}set nomodule(e){Vr.set(this,"nomodule",e)}get referrerPolicy(){return Gr.get(this,"referrerpolicy")}set referrerPolicy(e){Gr.set(this,"referrerpolicy",e)}get nonce(){return Gr.get(this,"nonce")}set nonce(e){Gr.set(this,"nonce",e)}get async(){return Vr.get(this,"async")}set async(e){Vr.set(this,"async",e)}get text(){return this.textContent}set text(e){this.textContent=e}}Rr(Bs,Ps);const Ms="iframe";class Us extends Is{constructor(e,t=Ms){super(e,t)}get src(){return Gr.get(this,"src")}set src(e){Gr.set(this,"src",e)}get srcdoc(){return Gr.get(this,"srcdoc")}set srcdoc(e){Gr.set(this,"srcdoc",e)}get name(){return Gr.get(this,"name")}set name(e){Gr.set(this,"name",e)}get allow(){return Gr.get(this,"allow")}set allow(e){Gr.set(this,"allow",e)}get allowFullscreen(){return Vr.get(this,"allowfullscreen")}set allowFullscreen(e){Vr.set(this,"allowfullscreen",e)}get referrerPolicy(){return Gr.get(this,"referrerpolicy")}set referrerPolicy(e){Gr.set(this,"referrerpolicy",e)}get loading(){return Gr.get(this,"loading")}set loading(e){Gr.set(this,"loading",e)}}Rr(Ms,Us);var zs=r(908);const Fs="style";class js extends Os{constructor(e,t=Fs){super(e,t),this[S]=null}get sheet(){const e=this[S];return null!==e?e:this[S]=(0,zs.parse)(this.textContent)}get innerHTML(){return super.innerHTML||""}set innerHTML(e){super.textContent=e,this[S]=null}get innerText(){return super.innerText||""}set innerText(e){super.textContent=e,this[S]=null}get textContent(){return super.textContent||""}set textContent(e){super.textContent=e,this[S]=null}}Rr(Fs,js);class Hs extends Is{constructor(e,t="time"){super(e,t)}get dateTime(){return Gr.get(this,"datetime")}set dateTime(e){Gr.set(this,"datetime",e)}}Rr("time",Hs);const Vs="input";class Ws extends Is{constructor(e,t=Vs){super(e,t)}get autofocus(){return Vr.get(this,"autofocus")||-1}set autofocus(e){Vr.set(this,"autofocus",e)}get disabled(){return Vr.get(this,"disabled")}set disabled(e){Vr.set(this,"disabled",e)}get name(){return this.getAttribute("name")}set name(e){this.setAttribute("name",e)}get placeholder(){return this.getAttribute("placeholder")}set placeholder(e){this.setAttribute("placeholder",e)}get type(){return this.getAttribute("type")}set type(e){this.setAttribute("type",e)}get value(){return Gr.get(this,"value")}set value(e){Gr.set(this,"value",e)}}Rr(Vs,Ws);class Gs extends Is{constructor(e,t="h1"){super(e,t)}}Rr(["h1","h2","h3","h4","h5","h6"],Gs);var $s=r(873);const{createCanvas:Zs}=$s,Js="canvas";class Ks extends Is{constructor(e,t=Js){super(e,t),this[m]=Zs(300,150)}get width(){return this[m].width}set width(e){Wr.set(this,"width",e),this[m].width=e}get height(){return this[m].height}set height(e){Wr.set(this,"height",e),this[m].height=e}getContext(e){return this[m].getContext(e)}toDataURL(...e){return this[m].toDataURL(...e)}}Rr(Js,Ks);const Ys="option";class Xs extends Is{constructor(e,t=Ys){super(e,t)}get value(){return Gr.get(this,"value")}set value(e){Gr.set(this,"value",e)}get selected(){return Vr.get(this,"selected")}set selected(e){const t=this.parentElement?.querySelector("option[selected]");t&&t!==this&&(t.selected=!1),Vr.set(this,"selected",e)}}Rr(Ys,Xs);const Qs="title";class ea extends Os{constructor(e,t=Qs){super(e,t)}}Rr(Qs,ea);const ta="select";class ra extends Is{constructor(e,t=ta){super(e,t)}get options(){let e=new Yr,{firstElementChild:t}=this;for(;t;)"OPTGROUP"===t.tagName?e.push(...t.children):e.push(t),t=t.nextElementSibling;return e}get disabled(){return Vr.get(this,"disabled")}set disabled(e){Vr.set(this,"disabled",e)}get name(){return this.getAttribute("name")}set name(e){this.setAttribute("name",e)}get value(){return this.querySelector("option[selected]")?.value}}Rr(ta,ra);const na="button";class ia extends Is{constructor(e,t=na){super(e,t)}get disabled(){return Vr.get(this,"disabled")}set disabled(e){Vr.set(this,"disabled",e)}get name(){return this.getAttribute("name")}set name(e){this.setAttribute("name",e)}get type(){return this.getAttribute("type")}set type(e){this.setAttribute("type",e)}}Rr(na,ia);const sa="textarea";class aa extends Os{constructor(e,t=sa){super(e,t)}get disabled(){return Vr.get(this,"disabled")}set disabled(e){Vr.set(this,"disabled",e)}get name(){return this.getAttribute("name")}set name(e){this.setAttribute("name",e)}get placeholder(){return this.getAttribute("placeholder")}set placeholder(e){this.setAttribute("placeholder",e)}get type(){return this.getAttribute("type")}set type(e){this.setAttribute("type",e)}get value(){return this.textContent}set value(e){this.textContent=e}}Rr(sa,aa);const oa="link";class la extends Is{constructor(e,t=oa){super(e,t)}get disabled(){return Vr.get(this,"disabled")}set disabled(e){Vr.set(this,"disabled",e)}get href(){return Gr.get(this,"href")}set href(e){Gr.set(this,"href",e)}get hreflang(){return Gr.get(this,"hreflang")}set hreflang(e){Gr.set(this,"hreflang",e)}get media(){return Gr.get(this,"media")}set media(e){Gr.set(this,"media",e)}get rel(){return Gr.get(this,"rel")}set rel(e){Gr.set(this,"rel",e)}get type(){return Gr.get(this,"type")}set type(e){Gr.set(this,"type",e)}}Rr(oa,la);const ca="slot";class ua extends Is{constructor(e,t=ca){super(e,t)}get name(){return this.getAttribute("name")}set name(e){this.setAttribute("name",e)}assign(){}assignedNodes(e){const t=!!this.name,r=this.getRootNode().host?.childNodes??[];let n;if(n=t?[...r].filter((e=>e.slot===this.name)):[...r].filter((e=>!e.slot)),e?.flatten){const e=[];for(let t of n)"slot"===t.localName?e.push(...t.assignedNodes({flatten:!0})):e.push(t);n=e}return n.length?n:[...this.childNodes]}assignedElements(e){const t=this.assignedNodes(e).filter((e=>1===e.nodeType));return t.length?t:[...this.children]}}Rr(ca,ua);class da extends Is{constructor(e,t="img"){super(e,t)}get alt(){return Gr.get(this,"alt")}set alt(e){Gr.set(this,"alt",e)}get sizes(){return Gr.get(this,"sizes")}set sizes(e){Gr.set(this,"sizes",e)}get src(){return Gr.get(this,"src")}set src(e){Gr.set(this,"src",e)}get srcset(){return Gr.get(this,"srcset")}set srcset(e){Gr.set(this,"srcset",e)}get title(){return Gr.get(this,"title")}set title(e){Gr.set(this,"title",e)}get width(){return Wr.get(this,"width")}set width(e){Wr.set(this,"width",e)}get height(){return Wr.get(this,"height")}set height(e){Wr.set(this,"height",e)}}Rr("img",da);const ha="meta";class pa extends Is{constructor(e,t=ha){super(e,t)}get name(){return Gr.get(this,"name")}set name(e){Gr.set(this,"name",e)}get httpEquiv(){return Gr.get(this,"http-equiv")}set httpEquiv(e){Gr.set(this,"http-equiv",e)}get content(){return Gr.get(this,"content")}set content(e){Gr.set(this,"content",e)}get charset(){return Gr.get(this,"charset")}set charset(e){Gr.set(this,"charset",e)}get media(){return Gr.get(this,"media")}set media(e){Gr.set(this,"media",e)}}Rr(ha,pa);class fa extends Is{constructor(e,t="a"){super(e,t)}get href(){return encodeURI(decodeURI(Gr.get(this,"href")))}set href(e){Gr.set(this,"href",decodeURI(e))}get download(){return encodeURI(decodeURI(Gr.get(this,"download")))}set download(e){Gr.set(this,"download",decodeURI(e))}get target(){return Gr.get(this,"target")}set target(e){Gr.set(this,"target",e)}get type(){return Gr.get(this,"type")}set type(e){Gr.set(this,"type",e)}get rel(){return Gr.get(this,"rel")}set rel(e){Gr.set(this,"rel",e)}}Rr("a",fa);const ma="source";class ga extends Is{constructor(e,t=ma){super(e,t)}get src(){return Gr.get(this,"src")}set src(e){Gr.set(this,"src",e)}get srcset(){return Gr.get(this,"srcset")}set srcset(e){Gr.set(this,"srcset",e)}get sizes(){return Gr.get(this,"sizes")}set sizes(e){Gr.set(this,"sizes",e)}get type(){return Gr.get(this,"type")}set type(e){Gr.set(this,"type",e)}}Rr(ma,ga);const ba={HTMLElement:Is,HTMLTemplateElement:Ds,HTMLHtmlElement:class extends Is{constructor(e,t="html"){super(e,t)}},HTMLScriptElement:Ps,HTMLFrameElement:class extends Is{constructor(e,t="frame"){super(e,t)}},HTMLIFrameElement:Us,HTMLObjectElement:class extends Is{constructor(e,t="object"){super(e,t)}},HTMLHeadElement:class extends Is{constructor(e,t="head"){super(e,t)}},HTMLBodyElement:class extends Is{constructor(e,t="body"){super(e,t)}},HTMLStyleElement:js,HTMLTimeElement:Hs,HTMLFieldSetElement:class extends Is{constructor(e,t="fieldset"){super(e,t)}},HTMLEmbedElement:class extends Is{constructor(e,t="embed"){super(e,t)}},HTMLHRElement:class extends Is{constructor(e,t="hr"){super(e,t)}},HTMLProgressElement:class extends Is{constructor(e,t="progress"){super(e,t)}},HTMLParagraphElement:class extends Is{constructor(e,t="p"){super(e,t)}},HTMLTableElement:class extends Is{constructor(e,t="table"){super(e,t)}},HTMLFrameSetElement:class extends Is{constructor(e,t="frameset"){super(e,t)}},HTMLLIElement:class extends Is{constructor(e,t="li"){super(e,t)}},HTMLBaseElement:class extends Is{constructor(e,t="base"){super(e,t)}},HTMLDataListElement:class extends Is{constructor(e,t="datalist"){super(e,t)}},HTMLInputElement:Ws,HTMLParamElement:class extends Is{constructor(e,t="param"){super(e,t)}},HTMLMediaElement:class extends Is{constructor(e,t="media"){super(e,t)}},HTMLAudioElement:class extends Is{constructor(e,t="audio"){super(e,t)}},HTMLHeadingElement:Gs,HTMLDirectoryElement:class extends Is{constructor(e,t="dir"){super(e,t)}},HTMLQuoteElement:class extends Is{constructor(e,t="quote"){super(e,t)}},HTMLCanvasElement:Ks,HTMLLegendElement:class extends Is{constructor(e,t="legend"){super(e,t)}},HTMLOptionElement:Xs,HTMLSpanElement:class extends Is{constructor(e,t="span"){super(e,t)}},HTMLMeterElement:class extends Is{constructor(e,t="meter"){super(e,t)}},HTMLVideoElement:class extends Is{constructor(e,t="video"){super(e,t)}},HTMLTableCellElement:class extends Is{constructor(e,t="td"){super(e,t)}},HTMLTitleElement:ea,HTMLOutputElement:class extends Is{constructor(e,t="output"){super(e,t)}},HTMLTableRowElement:class extends Is{constructor(e,t="tr"){super(e,t)}},HTMLDataElement:class extends Is{constructor(e,t="data"){super(e,t)}},HTMLMenuElement:class extends Is{constructor(e,t="menu"){super(e,t)}},HTMLSelectElement:ra,HTMLBRElement:class extends Is{constructor(e,t="br"){super(e,t)}},HTMLButtonElement:ia,HTMLMapElement:class extends Is{constructor(e,t="map"){super(e,t)}},HTMLOptGroupElement:class extends Is{constructor(e,t="optgroup"){super(e,t)}},HTMLDListElement:class extends Is{constructor(e,t="dl"){super(e,t)}},HTMLTextAreaElement:aa,HTMLFontElement:class extends Is{constructor(e,t="font"){super(e,t)}},HTMLDivElement:class extends Is{constructor(e,t="div"){super(e,t)}},HTMLLinkElement:la,HTMLSlotElement:ua,HTMLFormElement:class extends Is{constructor(e,t="form"){super(e,t)}},HTMLImageElement:da,HTMLPreElement:class extends Is{constructor(e,t="pre"){super(e,t)}},HTMLUListElement:class extends Is{constructor(e,t="ul"){super(e,t)}},HTMLMetaElement:pa,HTMLPictureElement:class extends Is{constructor(e,t="picture"){super(e,t)}},HTMLAreaElement:class extends Is{constructor(e,t="area"){super(e,t)}},HTMLOListElement:class extends Is{constructor(e,t="ol"){super(e,t)}},HTMLTableCaptionElement:class extends Is{constructor(e,t="caption"){super(e,t)}},HTMLAnchorElement:fa,HTMLLabelElement:class extends Is{constructor(e,t="label"){super(e,t)}},HTMLUnknownElement:class extends Is{constructor(e,t="unknown"){super(e,t)}},HTMLModElement:class extends Is{constructor(e,t="mod"){super(e,t)}},HTMLDetailsElement:class extends Is{constructor(e,t="details"){super(e,t)}},HTMLSourceElement:ga,HTMLTrackElement:class extends Is{constructor(e,t="track"){super(e,t)}},HTMLMarqueeElement:class extends Is{constructor(e,t="marquee"){super(e,t)}}},ya={test:()=>!0},va={"text/html":{docType:"<!DOCTYPE html>",ignoreCase:!0,voidElements:/^(?:area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)$/i},"image/svg+xml":{docType:'<?xml version="1.0" encoding="utf-8"?>',ignoreCase:!1,voidElements:ya},"text/xml":{docType:'<?xml version="1.0" encoding="utf-8"?>',ignoreCase:!1,voidElements:ya},"application/xml":{docType:'<?xml version="1.0" encoding="utf-8"?>',ignoreCase:!1,voidElements:ya},"application/xhtml+xml":{docType:'<?xml version="1.0" encoding="utf-8"?>',ignoreCase:!1,voidElements:ya}};class _a extends as{constructor(e,t={}){super(e,t),this.detail=t.detail}}const wa=e=>class extends da{constructor(t,r){switch(super(e),arguments.length){case 1:this.height=t,this.width=t;break;case 2:this.height=r,this.width=t}}},Sa=({[x]:e,[h]:t},r=null)=>{hr(e[_],t[y]);do{const n=ar(e),i=n===t?n:n[y];r?r.insertBefore(e,r[h]):e.remove(),e=i}while(e!==t)};class xa{constructor(){this[x]=null,this[h]=null,this.commonAncestorContainer=null}insertNode(e){this[h].parentNode.insertBefore(e,this[x])}selectNode(e){this[x]=e,this[h]=ar(e)}selectNodeContents(e){this.selectNode(e),this.commonAncestorContainer=e}surroundContents(e){e.replaceChildren(this.extractContents())}setStartBefore(e){this[x]=e}setStartAfter(e){this[x]=e.nextSibling}setEndBefore(e){this[h]=ar(e.previousSibling)}setEndAfter(e){this[h]=ar(e)}cloneContents(){let{[x]:e,[h]:t}=this;const r=e.ownerDocument.createDocumentFragment();for(;e!==t;)r.insertBefore(e.cloneNode(!0),r[h]),e=ar(e),e!==t&&(e=e[y]);return r}deleteContents(){Sa(this)}extractContents(){const e=this[x].ownerDocument.createDocumentFragment();return Sa(this,e),e}createContextualFragment(e){const{commonAncestorContainer:t}=this,r="ownerSVGElement"in t,n=r?t.ownerDocument:t,i=n.createElement("template");i.innerHTML=e;let{content:s}=i;if(r){const e=[...s.childNodes];s=n.createDocumentFragment(),Object.setPrototypeOf(s,ms.prototype),s.ownerSVGElement=n;for(const t of e)Object.setPrototypeOf(t,ms.prototype),t.ownerSVGElement=n,s.appendChild(t)}else this.selectNode(s);return s}cloneRange(){const e=new xa;return e[x]=this[x],e[h]=this[h],e}}const Ea=({nodeType:e},t)=>{switch(e){case 1:return 1&t;case 3:return 4&t;case 8:return 128&t;case 4:return 8&t}return 0};class ka{constructor(e,t=-1){this.root=e,this.currentNode=e,this.whatToShow=t;let{[y]:r,[h]:n}=e;if(9===e.nodeType){const{documentElement:t}=e;r=t,n=t[h]}const i=[];for(;r&&r!==n;)Ea(r,t)&&i.push(r),r=r[y];this[w]={i:0,nodes:i}}nextNode(){const e=this[w];return this.currentNode=e.i<e.nodes.length?e.nodes[e.i++]:null,this.currentNode}}const Aa=(e,t,r)=>{let{[y]:n,[h]:i}=t;return e.call({ownerDocument:t,[y]:n,[h]:i},r)},Ca=Xt({},Ts,ba,{CustomEvent:_a,Event:as,EventTarget:Kr,InputEvent:class extends as{constructor(e,t={}){super(e,t),this.inputType=t.inputType,this.data=t.data,this.dataTransfer=t.dataTransfer,this.isComposing=t.isComposing||!1,this.ranges=t.ranges}},NamedNodeMap:os,NodeList:Yr}),Ta=new WeakMap;class Ra extends Bi{constructor(e){super(null,"#document",9),this[o]={active:!1,registry:null},this[b]={active:!1,class:null},this[g]=va[e],this[u]=null,this[d]=null,this[f]=null,this[m]=null,this[k]=null}get defaultView(){return Ta.has(this)||Ta.set(this,new Proxy(globalThis,{set:(e,t,r)=>{switch(t){case"addEventListener":case"removeEventListener":case"dispatchEvent":this[p][t]=r;break;default:e[t]=r}return!0},get:(e,t)=>{switch(t){case"addEventListener":case"removeEventListener":case"dispatchEvent":if(!this[p]){const e=this[p]=new Kr;e.dispatchEvent=e.dispatchEvent.bind(e),e.addEventListener=e.addEventListener.bind(e),e.removeEventListener=e.removeEventListener.bind(e)}return this[p][t];case"document":return this;case"navigator":return{userAgent:"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36"};case"window":return Ta.get(this);case"customElements":return this[o].registry||(this[o]=new Sr(this)),this[o];case"performance":return Nr.F;case"DOMParser":return this[d];case"Image":return this[m]||(this[m]=wa(this)),this[m];case"MutationObserver":return this[b].class||(this[b]=new zr(this)),this[b].class}return this[f]&&this[f][t]||Ca[t]||e[t]}})),Ta.get(this)}get doctype(){const e=this[u];if(e)return e;const{firstChild:t}=this;return t&&t.nodeType===Zt?this[u]=t:null}set doctype(e){if(/^([a-z:]+)(\s+system|\s+public(\s+"([^"]+)")?)?(\s+"([^"]+)")?/i.test(e)){const{$1:e,$4:t,$6:r}=RegExp;this[u]=new Mi(this,e,t,r),ur(this,this[u],this[y])}}get documentElement(){return this.firstElementChild}get isConnected(){return!0}_getParent(){return this[p]}createAttribute(e){return new on(this,e)}createCDATASection(e){return new _n(this,e)}createComment(e){return new wn(this,e)}createDocumentFragment(){return new Pi(this)}createDocumentType(e,t,r){return new Mi(this,e,t,r)}createElement(e){return new hs(this,e)}createRange(){const e=new xa;return e.commonAncestorContainer=this,e}createTextNode(e){return new qi(this,e)}createTreeWalker(e,t=-1){return new ka(e,t)}createNodeIterator(e,t=-1){return this.createTreeWalker(e,t)}createEvent(e){const t=Qt("Event"===e?new as(""):new _a(""));return t.initEvent=t.initCustomEvent=(e,r=!1,n=!1,i)=>{t.bubbles=!!r,er(t,{type:{value:e},canBubble:{value:r},cancelable:{value:n},detail:{value:i}})},t}cloneNode(e=!1){const{constructor:t,[o]:r,[u]:n}=this,i=new t;if(i[o]=r,e){const e=i[h],{childNodes:t}=this;for(let{length:r}=t,n=0;n<r;n++)i.insertBefore(t[n].cloneNode(!0),e);n&&(i[u]=t[0])}return i}importNode(e){const t=1<arguments.length&&!!arguments[1],r=e.cloneNode(t),{[o]:n}=this,{active:i}=n,s=e=>{const{ownerDocument:t,nodeType:r}=e;e.ownerDocument=this,i&&t!==this&&1===r&&n.upgrade(e)};if(s(r),t)switch(r.nodeType){case 1:case Jt:{let{[y]:e,[h]:t}=r;for(;e!==t;)1===e.nodeType&&s(e),e=e[y];break}}return r}toString(){return this.childNodes.join("")}querySelector(e){return Aa(super.querySelector,this,e)}querySelectorAll(e){return Aa(super.querySelectorAll,this,e)}getElementsByTagNameNS(e,t){return this.getElementsByTagName(t)}createAttributeNS(e,t){return this.createAttribute(t)}createElementNS(e,t,r){return e===Yt?new ms(this,t,null):this.createElement(t,r)}}ir(Ca.Document=function(){gs()},Ra).prototype=Ra.prototype;class Na extends Ra{constructor(){super("text/html")}get all(){const e=new Yr;let{[y]:t,[h]:r}=this;for(;t!==r;)1===t.nodeType&&e.push(t),t=t[y];return e}get head(){const{documentElement:e}=this;let{firstElementChild:t}=e;return t&&"HEAD"===t.tagName||(t=this.createElement("head"),e.prepend(t)),t}get body(){const{head:e}=this;let{nextElementSibling:t}=e;return t&&"BODY"===t.tagName||(t=this.createElement("body"),e.after(t)),t}get title(){const{head:e}=this;return e.getElementsByTagName("title").at(0)?.textContent||""}set title(e){const{head:t}=this;let r=t.getElementsByTagName("title").at(0);r?r.textContent=e:t.insertBefore(this.createElement("title"),t.firstChild).textContent=e}createElement(e,t){const r=!(!t||!t.is),n=((e,t,r,n)=>{if(!t&&Tr.has(r))return new(Tr.get(r))(e,r);const{[o]:{active:i,registry:s}}=e;if(i){const i=t?n.is:r;if(s.has(i)){const{Class:t}=s.get(i),n=new t(e,r);return gr.set(n,{connected:!1}),n}}return new Is(e,r)})(this,r,e,t);return r&&n.setAttribute("is",t.is),n}}class Ia extends Ra{constructor(){super("image/svg+xml")}toString(){return this[g].docType+super.toString()}}class qa extends Ra{constructor(){super("text/xml")}toString(){return this[g].docType+super.toString()}}class Da{parseFromString(e,t,r=null){let n,i=!1;return"text/html"===t?(i=!0,n=new Na):n="image/svg+xml"===t?new Ia:new qa,n[d]=Da,r&&(n[f]=r),i&&"..."===e&&(e="<!doctype html><html><head></head><body></body></html>"),e?Cr(n,i,e):n}}const{parse:La}=JSON;ir((function(){gs()}),Ra).prototype=Ra.prototype},210:(e,t,r)=>{"use strict";r.d(t,{A:()=>n});const n={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)}},984:(e,t,r)=>{"use strict";let n;r.d(t,{A:()=>s});const i=new Uint8Array(16);function s(){if(!n){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");n=crypto.getRandomValues.bind(crypto)}return n(i)}},60:(e,t,r)=>{"use strict";r.d(t,{k:()=>i});const n=[];for(let e=0;e<256;++e)n.push((e+256).toString(16).slice(1));function i(e,t=0){return(n[e[t+0]]+n[e[t+1]]+n[e[t+2]]+n[e[t+3]]+"-"+n[e[t+4]]+n[e[t+5]]+"-"+n[e[t+6]]+n[e[t+7]]+"-"+n[e[t+8]]+n[e[t+9]]+"-"+n[e[t+10]]+n[e[t+11]]+n[e[t+12]]+n[e[t+13]]+n[e[t+14]]+n[e[t+15]]).toLowerCase()}},235:(e,t,r)=>{"use strict";r.d(t,{A:()=>a});var n=r(210),i=r(984),s=r(60);const a=function(e,t,r){if(n.A.randomUUID&&!t&&!e)return n.A.randomUUID();const a=(e=e||{}).random||(e.rng||i.A)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,t){r=r||0;for(let e=0;e<16;++e)t[r+e]=a[e];return t}return(0,s.k)(a)}}},s={};function a(e){var t=s[e];if(void 0!==t)return t.exports;var r=s[e]={exports:{}};return i[e](r,r.exports,a),r.exports}e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",r="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",n=e=>{e&&e.d<1&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},a.a=(i,s,a)=>{var o;a&&((o=[]).d=-1);var l,c,u,d=new Set,h=i.exports,p=new Promise(((e,t)=>{u=t,c=e}));p[t]=h,p[e]=e=>(o&&e(o),d.forEach(e),p.catch((e=>{}))),i.exports=p,s((i=>{var s;l=(i=>i.map((i=>{if(null!==i&&"object"==typeof i){if(i[e])return i;if(i.then){var s=[];s.d=0,i.then((e=>{a[t]=e,n(s)}),(e=>{a[r]=e,n(s)}));var a={};return a[e]=e=>e(s),a}}var o={};return o[e]=e=>{},o[t]=i,o})))(i);var a=()=>l.map((e=>{if(e[r])throw e[r];return e[t]})),c=new Promise((t=>{(s=()=>t(a)).r=0;var r=e=>e!==o&&!d.has(e)&&(d.add(e),e&&!e.d&&(s.r++,e.push(s)));l.map((t=>t[e](r)))}));return s.r?c:a()}),(e=>(e?u(p[r]=e):c(h),n(o)))),o&&o.d<0&&(o.d=0)},a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},a.d=(e,t)=>{for(var r in t)a.o(t,r)&&!a.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a(199)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R0FBSSxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxDQUFFcnZELEVBQUcsT0FBUXhFLEVBQUcsS0FBTUwsRUFBRyxXQUFhLENBQUMsRUFBRyxDQUFFNkUsRUFBRyxXQUFZeEUsRUFBRyxLQUFNTCxFQUFHLFVBQVksQ0FBQyxFQUFHLENBQUU2RSxFQUFHLE9BQVF4RSxFQUFHLEtBQU1MLEVBQUcsV0FBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEdBQUksWUFBYSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsc0JBQXVCLENBQUMsRUFBRyxDQUFFSyxFQUFHLElBQUtMLEVBQUcsWUFBYyxDQUFDLEdBQUksWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEdBQUksVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsZUFBZ0IsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLGVBQWdCLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsR0FBSSxVQUFXLENBQUMsR0FBSSxXQUFZLENBQUMsR0FBSSxZQUFhLENBQUMsR0FBSSxXQUFZLENBQUMsSUFBSyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsR0FBSSxXQUFZLENBQUMsRUFBRyxvQkFBcUIsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLHNCQUF1QixDQUFDLEVBQUcsV0FBWSxDQUFDLEdBQUksZUFBZ0IsQ0FBQyxJQUFLLFdBQVksQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFFBQVMsQ0FBQyxFQUFHLFFBQVMsQ0FBQyxFQUFHLFFBQVMsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLFFBQVMsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFFBQVMsQ0FBQyxFQUFHLFFBQVMsQ0FBQyxFQUFHLFFBQVMsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLFFBQVMsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLGNBQWUsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxHQUFJLFlBQWEsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLGlCQUFrQixDQUFDLEdBQUksVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEtBQU0sVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsZUFBZ0IsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLHlCQUEwQixDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcscUJBQXNCLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRywyQkFBNEIsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLGVBQWdCLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsR0FBSSxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxDQUFFNkUsRUFBRyxnQkFBaUJ4RSxFQUFHLEtBQU1MLEVBQUcsaUJBQW1CLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxRQUFTLENBQUMsRUFBRyxvQkFBcUIsQ0FBQyxFQUFHLFFBQVMsQ0FBQyxHQUFJLFVBQVcsQ0FBQyxHQUFJLFVBQVcsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxHQUFJLGVBQWdCLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxV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QyxFQUFHLDJCQUE0QixDQUFDLEVBQUcsMEJBQTJCLENBQUMsRUFBRyw0QkFBNkIsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLGNBQWUsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLHNCQUF1QixDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsMkJBQTRCLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxDQUFFNkUsRUFBRyxZQUFheEUsRUFBRyxJQUFLTCxFQUFHLGVBQWlCLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxDQUFFNkUsRUFBRyxVQUFXeEUsRUFBRyxJQUFLTCxFQUFHLGFBQWUsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLGVBQWdCLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsR0FBSSxhQUFjLENBQUMsR0FBSSxnQkFBaUIsQ0FBQyxFQUFHLGdCQUFpQixDQUFDLEVBQUcsaUJBQWtCLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxjQUFlLENBQUMsR0FBSSxxQkFBc0IsQ0FBQyxFQUFHLHNCQUF1QixDQUFDLEVBQUcsZUFBZ0IsQ0FBQyxFQUFHLGdCQUFpQixDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEdBQUksV0FBWSxDQUFDLElBQUssY0FBZSxDQUFDLEdBQUksVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEdBQUksVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEdBQUksV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEdBQUksWUFB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LEVBQUcsd0JBQXlCLENBQUMsRUFBRyxxQkFBc0IsQ0FBQyxFQUFHLHVCQUF3QixDQUFDLEVBQUcsbUJBQW9CLENBQUMsRUFBRyxvQkFBcUIsQ0FBQyxFQUFHLHNCQUF1QixDQUFDLEVBQUcsd0JBQXlCLENBQUMsRUFBRyx1QkFBd0IsQ0FBQyxFQUFHLHdCQUF5QixDQUFDLEVBQUcscUJBQXNCLENBQUMsRUFBRyx1QkFBd0IsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLGtCQUFtQixDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsQ0FBRTZFLEVBQUcsb0JBQXFCeEUsRUFBRyxJQUFLTCxFQUFHLHlCQUEyQixDQUFDLEVBQUcsQ0FBRTZFLEVBQUcscUJBQXNCeEUsRUFBRyxJQUFLTCxFQUFHLDBCQUE0QixDQUFDLEdBQUksWUFBYSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsa0JBQW1CLENBQUMsRUFBRyxpQkFBa0IsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLGNBQWUsQ0FBQyxFQUFHLGVBQWdCLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxjQUFlLENBQUMsR0FBSSxhQUFjLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxRQUFTLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxDQUFFNkUsRUFBRyxZQUFheEUsRUFBRyxJQUFLTCxFQUFHLGVBQWlCLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxD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LENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxDQUFFNkUsRUFBRyxVQUFXeEUsRUFBRyxLQUFNTCxFQUFHLGFBQWUsQ0FBQyxNQUFPLENBQUVLLEVBQUcsSUFBSWtnRCxJQUFvQjJULEdBQVksQ0FBQyxDQUFDLE1BQU8sVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEdBQUksU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsZUFBaUIsQ0FBQyxLQUFNLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLGVBQS9wMEIsTUNSYSxHQUFjLHVCQUNyQkMsR0FBYSxJQUFJNVQsSUFBSSxDQUN2QixDQUFDLEdBQUksVUFDTCxDQUFDLEdBQUksU0FDTCxDQUFDLEdBQUksVUFDTCxDQUFDLEdBQUksUUFDTCxDQUFDLEdBQUksVUFHSSxHQUVtQixNQUFoQ3A4QyxPQUFPL08sVUFBVWcvRCxZQUNYLENBQUMvckMsRUFBSzF4QixJQUFVMHhCLEVBQUkrckMsWUFBWXo5RCxHQUU5QixDQUFDOEosRUFBRzlKLElBQTZDLFFBQVosTUFBdEI4SixFQUFFSyxXQUFXbkssSUFDVyxNQUFoQzhKLEVBQUVLLFdBQVduSyxHQUFTLE9BQ3JCOEosRUFBRUssV0FBV25LLEVBQVEsR0FDckIsTUFDQSxNQUNGOEosRUFBRUssV0FBV25LLEdBUXBCLFNBQVMsR0FBVTB4QixHQUN0QixJQUVJMXNCLEVBRkFrakMsRUFBTSxHQUNOdzFCLEVBQVUsRUFFZCxLQUEyQyxRQUFuQzE0RCxFQUFRLEdBQVlpRSxLQUFLeW9CLEtBQWdCLENBQzdDLE1BQU1yeUIsRUFBSTJGLEVBQU1oRixNQUNWcXpDLEVBQU8zaEIsRUFBSXZuQixXQUFXOUssR0FDdEI0ckIsRUFBT3V5QyxHQUFXcitELElBQUlrMEMsUUFDZjdmLElBQVR2SSxHQUNBaWQsR0FBT3hXLEVBQUl4ckIsVUFBVXczRCxFQUFTcitELEdBQUs0ckIsRUFDbkN5eUMsRUFBVXIrRCxFQUFJLElBR2Q2b0MsR0FBTyxHQUFHeFcsRUFBSXhyQixVQUFVdzNELEVBQVNyK0QsUUFBUSxHQUFhcXlCLEVBQUtyeUIsR0FBR29GLFNBQVMsT0FFdkVpNUQsRUFBVSxHQUFZMzBELFdBQWFrM0IsT0FBMkIsUUFBWixNQUFQb1QsSUFFbkQsQ0FDQSxPQUFPbkwsRUFBTXhXLEVBQUlybkIsT0FBT3F6RCxFQUM1QixDQXFCQSxTQUFTQyxHQUFXQyxFQUFPdnFDLEdBQ3ZCLE9BQU8sU0FBZ0JybUIsR0FDbkIsSUFBSWhJLEVBQ0EwNEQsRUFBVSxFQUNWaDVELEVBQVMsR0FDYixLQUFRTSxFQUFRNDRELEVBQU0zMEQsS0FBSytELElBQ25CMHdELElBQVkxNEQsRUFBTWhGLFFBQ2xCMEUsR0FBVXNJLEVBQUs5RyxVQUFVdzNELEVBQVMxNEQsRUFBTWhGLFFBRzVDMEUsR0FBVTJ1QixFQUFJbDBCLElBQUk2RixFQUFNLEdBQUdtRixXQUFXLElBRXRDdXpELEVBQVUxNEQsRUFBTWhGLE1BQVEsRUFFNUIsT0FBTzBFLEVBQVNzSSxFQUFLOUcsVUFBVXczRCxFQUNuQyxDQUNKLENBUTBCQyxHQUFXLFdBQVlILElBQTFDLE1BT00sR0FBa0JHLEdBQVcsY0FBZSxJQUFJL1QsSUFBSSxDQUM3RCxDQUFDLEdBQUksVUFDTCxDQUFDLEdBQUksU0FDTCxDQUFDLElBQUssYUFRRyxHQUFhK1QsR0FBVyxlQUFnQixJQUFJL1QsSUFBSSxDQUN6RCxDQUFDLEdBQUksU0FDTCxDQUFDLEdBQUksUUFDTCxDQUFDLEdBQUksUUFDTCxDQUFDLElBQUssYUM3R0gsSUFBSWlVLEdBT0FDLElBTlgsU0FBV0QsR0FFUEEsRUFBWUEsRUFBaUIsSUFBSSxHQUFLLE1BRXRDQSxFQUFZQSxFQUFrQixLQUFJLEdBQUssTUFDMUMsQ0FMRCxDQUtHQSxLQUFnQkEsR0FBYyxDQUFDLElBRWxDLFNBQVdDLEdBS1BBLEVBQWFBLEVBQW1CLEtBQUksR0FBSyxPQU16Q0EsRUFBYUEsRUFBb0IsTUFBSSxHQUFLLFFBSzFDQSxFQUFhQSxFQUF3QixVQUFJLEdBQUssWUFLOUNBLEVBQWFBLEVBQXdCLFVBQUksR0FBSyxZQUs5Q0EsRUFBYUEsRUFBbUIsS0FBSSxHQUFLLE1BQzVDLENBM0JELENBMkJHQSxLQUFpQkEsR0FBZSxDQUFDLElDdkM3QixNQUFNQyxHQUFlLElBQUluVSxJQUFJLENBQ2hDLFdBQ0EsY0FDQSxlQUNBLGVBQ0EsZ0JBQ0EsbUJBQ0EsV0FDQSxVQUNBLGdCQUNBLHNCQUNBLGNBQ0EsbUJBQ0Esb0JBQ0Esb0JBQ0EsaUJBQ0EsZUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsaUJBQ0EsVUFDQSxVQUNBLGNBQ0EsZUFDQSxXQUNBLGVBQ0EscUJBQ0EsY0FDQSxTQUNBLGVBQ0EsZ0JBQ0EsV0FDQSxpQkFDQSxpQkFDQSxZQUNGdjJCLEtBQUs0UyxHQUFRLENBQUNBLEVBQUl6eEIsY0FBZXl4QixNQUN0QiszQixHQUFpQixJQUFJcFUsSUFBSSxDQUNsQyxnQkFDQSxnQkFDQSxnQkFDQSxnQkFDQSxjQUNBLFdBQ0EsZ0JBQ0Esa0JBQ0EsV0FDQSxjQUNBLFdBQ0Esb0JBQ0EsZ0JBQ0EsZUFDQSxtQkFDQSxZQUNBLGFBQ0EsV0FDQSxlQUNBLG9CQUNBLGVBQ0EsY0FDQSxjQUNBLG1CQUNBLFlBQ0EsYUFDQSxhQUNBLHNCQUNBLG1CQUNBLGVBQ0EsWUFDQSxZQUNBLFlBQ0EsZ0JBQ0Esc0JBQ0EsaUJBQ0EsT0FDQSxPQUNBLGNBQ0EsWUFDQSxxQkFDQSxtQkFDQSxtQkFDQSxtQkFDQSxlQUNBLGNBQ0EsZUFDQSxjQUNBLGVBQ0EsaUJBQ0EsY0FDQSxVQUNBLFVBQ0EsYUFDQSxVQUNBLGFBQ0EsbUJBQ0EsbUJBQ0EsY0FDRnYyQixLQUFLNFMsR0FBUSxDQUFDQSxFQUFJenhCLGNBQWV5eEIsTUN2RjdCZzRCLEdBQW9CLElBQUlwRixJQUFJLENBQzlCLFFBQ0EsU0FDQSxNQUNBLFNBQ0EsVUFDQSxXQUNBLFlBQ0EsYUFFSixTQUFTcUYsR0FBY3A4RCxHQUNuQixPQUFPQSxFQUFNd0UsUUFBUSxLQUFNLFNBQy9CLENBK0JBLE1BQU02M0QsR0FBWSxJQUFJdEYsSUFBSSxDQUN0QixPQUNBLE9BQ0EsV0FDQSxLQUNBLE1BQ0EsVUFDQSxRQUNBLFFBQ0EsS0FDQSxNQUNBLFFBQ0EsVUFDQSxTQUNBLE9BQ0EsT0FDQSxRQUNBLFNBQ0EsUUFDQSxRQVVHLFNBQVN1RixHQUFPdkIsRUFBTXhyRCxFQUFVLENBQUMsR0FDcEMsTUFBTWd0RCxFQUFRLFdBQVl4QixFQUFPQSxFQUFPLENBQUNBLEdBQ3pDLElBQUlwOEMsRUFBUyxHQUNiLElBQUssSUFBSXBoQixFQUFJLEVBQUdBLEVBQUlnL0QsRUFBTS8rRCxPQUFRRCxJQUM5Qm9oQixHQUFVNjlDLEdBQVdELEVBQU1oL0QsR0FBSWdTLEdBRW5DLE9BQU9vUCxDQUNYLENBQ0EsWUFDQSxTQUFTNjlDLEdBQVd6QixFQUFNeHJELEdBQ3RCLE9BQVF3ckQsRUFBSzc5RCxNQUNULEtBQUssR0FDRCxPQUFPby9ELEdBQU92QixFQUFLNWdDLFNBQVU1cUIsR0FFakMsS0FBSyxHQUNMLEtBQUssR0FDRCxNQW1FRCxJQW5Fd0J3ckQsRUFtRWY3dkQsUUFsRVosS0FBSyxHQUNELE1Bc0ZELFVBdEZzQjZ2RCxFQXNGVjd2RCxhQXJGZixLQUFLLEdBQ0QsT0FnRlosU0FBcUI4dkQsR0FDakIsTUFBTyxZQUFZQSxFQUFLN2dDLFNBQVMsR0FBR2p2QixTQUN4QyxDQWxGbUJ1eEQsQ0FBWTFCLEdBQ3ZCLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNELE9BaUJaLFNBQW1CQyxFQUFNM2MsR0FDckIsSUFBSStMLEVBRWlCLFlBQWpCL0wsRUFBS3VSLFVBRUxvTCxFQUFLcjdELEtBQThDLFFBQXRDeXFELEVBQUs2UixHQUFhNStELElBQUkyOUQsRUFBS3I3RCxhQUEwQixJQUFQeXFELEVBQWdCQSxFQUFLNFEsRUFBS3I3RCxLQUVqRnE3RCxFQUFLMEIsUUFDTEMsR0FBNkJ6ckIsSUFBSThwQixFQUFLMEIsT0FBTy84RCxRQUM3QzArQyxFQUFPLElBQUtBLEVBQU11UixTQUFTLE1BRzlCdlIsRUFBS3VSLFNBQVdnTixHQUFnQjFyQixJQUFJOHBCLEVBQUtyN0QsUUFDMUMwK0MsRUFBTyxJQUFLQSxFQUFNdVIsUUFBUyxZQUUvQixJQUFJbnZCLEVBQU0sSUFBSXU2QixFQUFLcjdELE9BQ25CLE1BQU11NEQsRUFqSFYsU0FBMEIyRSxFQUFZeGUsR0FDbEMsSUFBSStMLEVBQ0osSUFBS3lTLEVBQ0QsT0FDSixNQUFNMzBELEdBQStGLEtBQXRELFFBQTlCa2lELEVBQUsvTCxFQUFLeWUsc0JBQW1DLElBQVAxUyxFQUFnQkEsRUFBSy9MLEVBQUt3UixnQkFDM0V1TSxHQUNBL2QsRUFBS3VSLFNBQW1DLFNBQXhCdlIsRUFBS3llLGVBQ2pCLEdBQ0EsR0FDVixPQUFPMy9ELE9BQU80M0IsS0FBSzhuQyxHQUNkdHJDLEtBQUswRCxJQUNOLElBQUltMUIsRUFBSXFOLEVBQ1IsTUFBTXozRCxFQUFtQyxRQUExQm9xRCxFQUFLeVMsRUFBVzVuQyxVQUF5QixJQUFQbTFCLEVBQWdCQSxFQUFLLEdBS3RFLE1BSnFCLFlBQWpCL0wsRUFBS3VSLFVBRUwzNkIsRUFBeUMsUUFBbEN3aUMsRUFBS3lFLEdBQWU3K0QsSUFBSTQzQixVQUF5QixJQUFQd2lDLEVBQWdCQSxFQUFLeGlDLEdBRXJFb3BCLEVBQUswZSxZQUFlMWUsRUFBS3VSLFNBQXFCLEtBQVY1dkQsRUFHbEMsR0FBR2kxQixNQUFRL3NCLEVBQU9sSSxNQUZkaTFCLENBRXVCLElBRWpDdDNCLEtBQUssSUFDZCxDQTBGb0JxL0QsQ0FBaUJoQyxFQUFLOUMsUUFBUzdaLEdBdUIvQyxPQXRCSTZaLElBQ0F6M0IsR0FBTyxJQUFJeTNCLEtBRWMsSUFBekI4QyxFQUFLN2dDLFNBQVMzOEIsU0FDYjZnRCxFQUFLdVIsU0FFMkIsSUFBekJ2UixFQUFLNGUsZ0JBRUw1ZSxFQUFLNGUsaUJBQW1CWixHQUFVbnJCLElBQUk4cEIsRUFBS3I3RCxRQUM5QzArQyxFQUFLdVIsVUFDTm52QixHQUFPLEtBQ1hBLEdBQU8sT0FHUEEsR0FBTyxJQUNIdTZCLEVBQUs3Z0MsU0FBUzM4QixPQUFTLElBQ3ZCaWpDLEdBQU82N0IsR0FBT3RCLEVBQUs3Z0MsU0FBVWtrQixLQUU3QkEsRUFBS3VSLFNBQVl5TSxHQUFVbnJCLElBQUk4cEIsRUFBS3I3RCxRQUNwQzhnQyxHQUFPLEtBQUt1NkIsRUFBS3I3RCxVQUdsQjhnQyxDQUNYLENBekRtQnk4QixDQUFVbkMsRUFBTXhyRCxHQUMzQixLQUFLLEdBQ0QsT0EyRFosU0FBb0J5ckQsRUFBTTNjLEdBQ3RCLElBQUkrTCxFQUNKLElBQUlsL0MsRUFBTzh2RCxFQUFLOXZELE1BQVEsR0FXeEIsT0FUMEYsS0FBdEQsUUFBOUJrL0MsRUFBSy9MLEVBQUt5ZSxzQkFBbUMsSUFBUDFTLEVBQWdCQSxFQUFLL0wsRUFBS3dSLGtCQUMvRHhSLEVBQUt1UixTQUNKb0wsRUFBSzBCLFFBQ0xQLEdBQWtCanJCLElBQUk4cEIsRUFBSzBCLE9BQU8vOEQsUUFDdEN1TCxFQUNJbXpDLEVBQUt1UixTQUFtQyxTQUF4QnZSLEVBQUt5ZSxlQUNmLEdBQVU1eEQsR0FDVixHQUFXQSxJQUVsQkEsQ0FDWCxDQXpFbUJpeUQsQ0FBV3BDLEVBQU14ckQsR0FFcEMsQ0FDQSxNQUFNb3RELEdBQStCLElBQUk1RixJQUFJLENBQ3pDLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsUUFDQSxpQkFDQSxnQkFDQSxPQUNBLFVBRUU2RixHQUFrQixJQUFJN0YsSUFBSSxDQUFDLE1BQU8sU0NsSGpDLFNBQVNxRyxHQUFhckMsRUFBTXhyRCxHQUMvQixPQUFPLEdBQVd3ckQsRUFBTXhyRCxFQUM1QixDQVFPLFNBQVM4dEQsR0FBYXRDLEVBQU14ckQsR0FDL0IsT0FBTzhyRCxHQUFZTixHQUNiQSxFQUFLNWdDLFNBQVM1SSxLQUFLd3BDLEdBQVNxQyxHQUFhckMsRUFBTXhyRCxLQUFVNVIsS0FBSyxJQUM5RCxFQUNWLENBU08sU0FBUzIvRCxHQUFRdkMsR0FDcEIsT0FBSXQ1RCxNQUFNeXZCLFFBQVE2cEMsR0FDUEEsRUFBS3hwQyxJQUFJK3JDLElBQVMzL0QsS0FBSyxJQUM5QixHQUFNbzlELEdBQ2UsT0FBZEEsRUFBS3A3RCxLQUFnQixLQUFPMjlELEdBQVF2QyxFQUFLNWdDLFVBQ2hEOGdDLEdBQVFGLEdBQ0R1QyxHQUFRdkMsRUFBSzVnQyxVQUNwQitnQyxHQUFPSCxHQUNBQSxFQUFLN3ZELEtBQ1QsRUFDWCxDQVNPLFNBQVM2MEIsR0FBWWc3QixHQUN4QixPQUFJdDVELE1BQU15dkIsUUFBUTZwQyxHQUNQQSxFQUFLeHBDLElBQUl3TyxJQUFhcGlDLEtBQUssSUFDbEMwOUQsR0FBWU4sS0FBVUksR0FBVUosR0FDekJoN0IsR0FBWWc3QixFQUFLNWdDLFVBRXhCK2dDLEdBQU9ILEdBQ0FBLEVBQUs3dkQsS0FDVCxFQUNYLENBU08sU0FBU2l3QixHQUFVNC9CLEdBQ3RCLE9BQUl0NUQsTUFBTXl2QixRQUFRNnBDLEdBQ1BBLEVBQUt4cEMsSUFBSTRKLElBQVd4OUIsS0FBSyxJQUNoQzA5RCxHQUFZTixLQUFVQSxFQUFLNzlELE9BQVMsR0FBWTA5RCxLQUFPSyxHQUFRRixJQUN4RDUvQixHQUFVNC9CLEVBQUs1Z0MsVUFFdEIrZ0MsR0FBT0gsR0FDQUEsRUFBSzd2RCxLQUNULEVBQ1gsQ0N2RU8sU0FBU3F5RCxHQUFZdkMsR0FDeEIsT0FBT0ssR0FBWUwsR0FBUUEsRUFBSzdnQyxTQUFXLEVBQy9DLENBUU8sU0FBU3FqQyxHQUFVeEMsR0FDdEIsT0FBT0EsRUFBSzBCLFFBQVUsSUFDMUIsQ0FZTyxTQUFTZSxHQUFZekMsR0FDeEIsTUFBTTBCLEVBQVNjLEdBQVV4QyxHQUN6QixHQUFjLE1BQVYwQixFQUNBLE9BQU9hLEdBQVliLEdBQ3ZCLE1BQU1nQixFQUFXLENBQUMxQyxHQUNsQixJQUFJLEtBQUU1M0MsRUFBSSxLQUFFK0YsR0FBUzZ4QyxFQUNyQixLQUFlLE1BQVI1M0MsR0FDSHM2QyxFQUFTOWQsUUFBUXg4QixLQUNkQSxRQUFTQSxHQUVoQixLQUFlLE1BQVIrRixHQUNIdTBDLEVBQVNqZ0UsS0FBSzByQixLQUNYQSxRQUFTQSxHQUVoQixPQUFPdTBDLENBQ1gsQ0FTTyxTQUFTQyxHQUFrQjNDLEVBQU1yN0QsR0FDcEMsSUFBSXlxRCxFQUNKLE9BQStCLFFBQXZCQSxFQUFLNFEsRUFBSzlDLGVBQTRCLElBQVA5TixPQUFnQixFQUFTQSxFQUFHenFELEVBQ3ZFLENBU08sU0FBU2krRCxHQUFVNUMsRUFBTXI3RCxHQUM1QixPQUF3QixNQUFoQnE3RCxFQUFLOUMsU0FDVC82RCxPQUFPUixVQUFVZ0osZUFBZXBKLEtBQUt5K0QsRUFBSzlDLFFBQVN2NEQsSUFDN0IsTUFBdEJxN0QsRUFBSzlDLFFBQVF2NEQsRUFDckIsQ0FRTyxTQUFTaytELEdBQVE3QyxHQUNwQixPQUFPQSxFQUFLcjdELElBQ2hCLENBU08sU0FBU2kvQixHQUFtQm84QixHQUMvQixJQUFJLEtBQUU3eEMsR0FBUzZ4QyxFQUNmLEtBQWdCLE9BQVQ3eEMsSUFBa0IsR0FBTUEsTUFDeEJBLFFBQVNBLEdBQ2hCLE9BQU9BLENBQ1gsQ0FTTyxTQUFTMjBDLEdBQW1COUMsR0FDL0IsSUFBSSxLQUFFNTNDLEdBQVM0M0MsRUFDZixLQUFnQixPQUFUNTNDLElBQWtCLEdBQU1BLE1BQ3hCQSxRQUFTQSxHQUNoQixPQUFPQSxDQUNYLENDeEdPLFNBQVMyNkMsR0FBYy9DLEdBSzFCLEdBSklBLEVBQUs1M0MsT0FDTDQzQyxFQUFLNTNDLEtBQUsrRixLQUFPNnhDLEVBQUs3eEMsTUFDdEI2eEMsRUFBSzd4QyxPQUNMNnhDLEVBQUs3eEMsS0FBSy9GLEtBQU80M0MsRUFBSzUzQyxNQUN0QjQzQyxFQUFLMEIsT0FBUSxDQUNiLE1BQU1zQixFQUFTaEQsRUFBSzBCLE9BQU92aUMsU0FDckI4akMsRUFBY0QsRUFBTzdyRCxZQUFZNm9ELEdBQ25DaUQsR0FBZSxHQUNmRCxFQUFPMS9ELE9BQU8yL0QsRUFBYSxFQUVuQyxDQUNBakQsRUFBSzd4QyxLQUFPLEtBQ1o2eEMsRUFBSzUzQyxLQUFPLEtBQ1o0M0MsRUFBSzBCLE9BQVMsSUFDbEIsQ0FRTyxTQUFTd0IsR0FBZWxELEVBQU1tRCxHQUNqQyxNQUFNLzZDLEVBQVErNkMsRUFBWS82QyxLQUFPNDNDLEVBQUs1M0MsS0FDbENBLElBQ0FBLEVBQUsrRixLQUFPZzFDLEdBRWhCLE1BQU1oMUMsRUFBUWcxQyxFQUFZaDFDLEtBQU82eEMsRUFBSzd4QyxLQUNsQ0EsSUFDQUEsRUFBSy9GLEtBQU8rNkMsR0FFaEIsTUFBTXpCLEVBQVV5QixFQUFZekIsT0FBUzFCLEVBQUswQixPQUMxQyxHQUFJQSxFQUFRLENBQ1IsTUFBTXNCLEVBQVN0QixFQUFPdmlDLFNBQ3RCNmpDLEVBQU9BLEVBQU83ckQsWUFBWTZvRCxJQUFTbUQsRUFDbkNuRCxFQUFLMEIsT0FBUyxJQUNsQixDQUNKLENBUU8sU0FBUzdnRCxHQUFZNmdELEVBQVEwQixHQUloQyxHQUhBTCxHQUFjSyxHQUNkQSxFQUFNajFDLEtBQU8sS0FDYmkxQyxFQUFNMUIsT0FBU0EsRUFDWEEsRUFBT3ZpQyxTQUFTMThCLEtBQUsyZ0UsR0FBUyxFQUFHLENBQ2pDLE1BQU1DLEVBQVUzQixFQUFPdmlDLFNBQVN1aUMsRUFBT3ZpQyxTQUFTMzhCLE9BQVMsR0FDekQ2Z0UsRUFBUWwxQyxLQUFPaTFDLEVBQ2ZBLEVBQU1oN0MsS0FBT2k3QyxDQUNqQixNQUVJRCxFQUFNaDdDLEtBQU8sSUFFckIsQ0FRTyxTQUFTL00sR0FBTzJrRCxFQUFNN3hDLEdBQ3pCNDBDLEdBQWM1MEMsR0FDZCxNQUFNLE9BQUV1ekMsR0FBVzFCLEVBQ2JzRCxFQUFXdEQsRUFBSzd4QyxLQUt0QixHQUpBQSxFQUFLQSxLQUFPbTFDLEVBQ1puMUMsRUFBSy9GLEtBQU80M0MsRUFDWkEsRUFBSzd4QyxLQUFPQSxFQUNaQSxFQUFLdXpDLE9BQVNBLEVBQ1Y0QixHQUVBLEdBREFBLEVBQVNsN0MsS0FBTytGLEVBQ1p1ekMsRUFBUSxDQUNSLE1BQU1zQixFQUFTdEIsRUFBT3ZpQyxTQUN0QjZqQyxFQUFPMS9ELE9BQU8wL0QsRUFBTzdyRCxZQUFZbXNELEdBQVcsRUFBR24xQyxFQUNuRCxPQUVLdXpDLEdBQ0xBLEVBQU92aUMsU0FBUzE4QixLQUFLMHJCLEVBRTdCLENBUU8sU0FBU28xQyxHQUFhN0IsRUFBUTBCLEdBSWpDLEdBSEFMLEdBQWNLLEdBQ2RBLEVBQU0xQixPQUFTQSxFQUNmMEIsRUFBTWg3QyxLQUFPLEtBQzBCLElBQW5DczVDLEVBQU92aUMsU0FBU3lsQixRQUFRd2UsR0FBYyxDQUN0QyxNQUFNQyxFQUFVM0IsRUFBT3ZpQyxTQUFTLEdBQ2hDa2tDLEVBQVFqN0MsS0FBT2c3QyxFQUNmQSxFQUFNajFDLEtBQU9rMUMsQ0FDakIsTUFFSUQsRUFBTWoxQyxLQUFPLElBRXJCLENBUU8sU0FBU3ExQyxHQUFReEQsRUFBTTUzQyxHQUMxQjI2QyxHQUFjMzZDLEdBQ2QsTUFBTSxPQUFFczVDLEdBQVcxQixFQUNuQixHQUFJMEIsRUFBUSxDQUNSLE1BQU1zQixFQUFTdEIsRUFBT3ZpQyxTQUN0QjZqQyxFQUFPMS9ELE9BQU8wL0QsRUFBTzMrRCxRQUFRMjdELEdBQU8sRUFBRzUzQyxFQUMzQyxDQUNJNDNDLEVBQUs1M0MsT0FDTDQzQyxFQUFLNTNDLEtBQUsrRixLQUFPL0YsR0FFckJBLEVBQUtzNUMsT0FBU0EsRUFDZHQ1QyxFQUFLQSxLQUFPNDNDLEVBQUs1M0MsS0FDakJBLEVBQUsrRixLQUFPNnhDLEVBQ1pBLEVBQUs1M0MsS0FBT0EsQ0FDaEIsQ0N6SE8sU0FBU2hSLEdBQU96TixFQUFNbzJELEVBQU0wRCxHQUFVLEVBQU1DLEVBQVFDLEtBQ3ZELE9BQU9DLEdBQUtqNkQsRUFBTWxELE1BQU15dkIsUUFBUTZwQyxHQUFRQSxFQUFPLENBQUNBLEdBQU8wRCxFQUFTQyxFQUNwRSxDQVdPLFNBQVNFLEdBQUtqNkQsRUFBTTQzRCxFQUFPa0MsRUFBU0MsR0FDdkMsTUFBTTk3RCxFQUFTLEdBRVRpOEQsRUFBWSxDQUFDcDlELE1BQU15dkIsUUFBUXFyQyxHQUFTQSxFQUFRLENBQUNBLElBRTdDdUMsRUFBYSxDQUFDLEdBQ3BCLE9BQVMsQ0FFTCxHQUFJQSxFQUFXLElBQU1ELEVBQVUsR0FBR3JoRSxPQUFRLENBRXRDLEdBQTBCLElBQXRCc2hFLEVBQVd0aEUsT0FDWCxPQUFPb0YsRUFHWGk4RCxFQUFVcHdELFFBQ1Zxd0QsRUFBV3J3RCxRQUVYLFFBQ0osQ0FDQSxNQUFNdXNELEVBQU82RCxFQUFVLEdBQUdDLEVBQVcsTUFDckMsR0FBSW42RCxFQUFLcTJELEtBQ0xwNEQsRUFBT25GLEtBQUt1OUQsS0FDTjBELEdBQVMsR0FDWCxPQUFPOTdELEVBRVg2N0QsR0FBV3BELEdBQVlMLElBQVNBLEVBQUs3Z0MsU0FBUzM4QixPQUFTLElBS3ZEc2hFLEVBQVdsZixRQUFRLEdBQ25CaWYsRUFBVWpmLFFBQVFvYixFQUFLN2dDLFVBRS9CLENBQ0osQ0FVTyxTQUFTNGtDLEdBQWFwNkQsRUFBTTQzRCxHQUMvQixPQUFPQSxFQUFNcUMsS0FBS2o2RCxFQUN0QixDQVVPLFNBQVNxNkQsR0FBUXI2RCxFQUFNNDNELEVBQU9rQyxHQUFVLEdBQzNDLE1BQU1RLEVBQWdCeDlELE1BQU15dkIsUUFBUXFyQyxHQUFTQSxFQUFRLENBQUNBLEdBQ3RELElBQUssSUFBSWgvRCxFQUFJLEVBQUdBLEVBQUkwaEUsRUFBY3poRSxPQUFRRCxJQUFLLENBQzNDLE1BQU13OUQsRUFBT2tFLEVBQWMxaEUsR0FDM0IsR0FBSSxHQUFNdzlELElBQVNwMkQsRUFBS28yRCxHQUNwQixPQUFPQSxFQUVYLEdBQUkwRCxHQUFXcEQsR0FBWU4sSUFBU0EsRUFBSzVnQyxTQUFTMzhCLE9BQVMsRUFBRyxDQUMxRCxNQUFNMGhFLEVBQVFGLEdBQVFyNkQsRUFBTW8yRCxFQUFLNWdDLFVBQVUsR0FDM0MsR0FBSStrQyxFQUNBLE9BQU9BLENBQ2YsQ0FDSixDQUNBLE9BQU8sSUFDWCxDQVNPLFNBQVNDLEdBQVV4NkQsRUFBTTQzRCxHQUM1QixPQUFROTZELE1BQU15dkIsUUFBUXFyQyxHQUFTQSxFQUFRLENBQUNBLElBQVE5M0QsTUFBTXMyRCxHQUFVLEdBQU1BLElBQVNwMkQsRUFBS28yRCxJQUMvRU0sR0FBWU4sSUFBU29FLEdBQVV4NkQsRUFBTW8yRCxFQUFLNWdDLFdBQ25ELENBV08sU0FBU2lsQyxHQUFRejZELEVBQU00M0QsR0FDMUIsTUFBTTM1RCxFQUFTLEdBQ1RpOEQsRUFBWSxDQUFDcDlELE1BQU15dkIsUUFBUXFyQyxHQUFTQSxFQUFRLENBQUNBLElBQzdDdUMsRUFBYSxDQUFDLEdBQ3BCLE9BQVMsQ0FDTCxHQUFJQSxFQUFXLElBQU1ELEVBQVUsR0FBR3JoRSxPQUFRLENBQ3RDLEdBQXlCLElBQXJCcWhFLEVBQVVyaEUsT0FDVixPQUFPb0YsRUFHWGk4RCxFQUFVcHdELFFBQ1Zxd0QsRUFBV3J3RCxRQUVYLFFBQ0osQ0FDQSxNQUFNdXNELEVBQU82RCxFQUFVLEdBQUdDLEVBQVcsTUFDakMsR0FBTTlELElBQVNyMkQsRUFBS3EyRCxJQUNwQnA0RCxFQUFPbkYsS0FBS3U5RCxHQUNaSyxHQUFZTCxJQUFTQSxFQUFLN2dDLFNBQVMzOEIsT0FBUyxJQUM1Q3NoRSxFQUFXbGYsUUFBUSxHQUNuQmlmLEVBQVVqZixRQUFRb2IsRUFBSzdnQyxVQUUvQixDQUNKLENDdklBLE1BQU1rbEMsR0FBUyxDQUNYMy9CLFNBQVMvL0IsR0FDZSxtQkFBVEEsRUFDQ3E3RCxHQUFTLEdBQU1BLElBQVNyN0QsRUFBS3E3RCxFQUFLcjdELE1BRTVCLE1BQVRBLEVBQ0UsR0FFSHE3RCxHQUFTLEdBQU1BLElBQVNBLEVBQUtyN0QsT0FBU0EsRUFFbEQyL0QsU0FBU3BpRSxHQUNlLG1CQUFUQSxFQUNDODlELEdBQVM5OUQsRUFBSzg5RCxFQUFLOTlELE1BRXZCODlELEdBQVNBLEVBQUs5OUQsT0FBU0EsRUFFbkNxaUUsYUFBYXIwRCxHQUNXLG1CQUFUQSxFQUNDOHZELEdBQVNFLEdBQU9GLElBQVM5dkQsRUFBSzh2RCxFQUFLOXZELE1BRXZDOHZELEdBQVNFLEdBQU9GLElBQVNBLEVBQUs5dkQsT0FBU0EsR0FZdkQsU0FBU3MwRCxHQUFlQyxFQUFRei9ELEdBQzVCLE1BQXFCLG1CQUFWQSxFQUNDZzdELEdBQVMsR0FBTUEsSUFBU2g3RCxFQUFNZzdELEVBQUs5QyxRQUFRdUgsSUFFL0N6RSxHQUFTLEdBQU1BLElBQVNBLEVBQUs5QyxRQUFRdUgsS0FBWXovRCxDQUM3RCxDQVVBLFNBQVMwL0QsR0FBYXA0RCxFQUFHNkUsR0FDckIsT0FBUTZ1RCxHQUFTMXpELEVBQUUwekQsSUFBUzd1RCxFQUFFNnVELEVBQ2xDLENBU0EsU0FBUzJFLEdBQVlwd0QsR0FDakIsTUFBTXF3RCxFQUFRemlFLE9BQU80M0IsS0FBS3hsQixHQUFTZ2lCLEtBQUswRCxJQUNwQyxNQUFNajFCLEVBQVF1UCxFQUFRMGxCLEdBQ3RCLE9BQU85M0IsT0FBT1IsVUFBVWdKLGVBQWVwSixLQUFLOGlFLEdBQVFwcUMsR0FDOUNvcUMsR0FBT3BxQyxHQUFLajFCLEdBQ1p3L0QsR0FBZXZxQyxFQUFLajFCLEVBQU0sSUFFcEMsT0FBd0IsSUFBakI0L0QsRUFBTXBpRSxPQUFlLEtBQU9vaUUsRUFBTUMsT0FBT0gsR0FDcEQsQ0FTTyxTQUFTSSxHQUFZdndELEVBQVN3ckQsR0FDakMsTUFBTXAyRCxFQUFPZzdELEdBQVlwd0QsR0FDekIsT0FBTzVLLEdBQU9BLEVBQUtvMkQsRUFDdkIsQ0FXTyxTQUFTZ0YsR0FBWXh3RCxFQUFTZ3RELEVBQU9rQyxFQUFTQyxFQUFRQyxLQUN6RCxNQUFNaDZELEVBQU9nN0QsR0FBWXB3RCxHQUN6QixPQUFPNUssRUFBT3lOLEdBQU96TixFQUFNNDNELEVBQU9rQyxFQUFTQyxHQUFTLEVBQ3hELENBVU8sU0FBU3NCLEdBQWV2bkQsRUFBSThqRCxFQUFPa0MsR0FBVSxHQUdoRCxPQUZLaDlELE1BQU15dkIsUUFBUXFyQyxLQUNmQSxFQUFRLENBQUNBLElBQ055QyxHQUFRUSxHQUFlLEtBQU0vbUQsR0FBSzhqRCxFQUFPa0MsRUFDcEQsQ0FXTyxTQUFTd0IsR0FBcUJ4Z0MsRUFBUzg4QixFQUFPa0MsR0FBVSxFQUFNQyxFQUFRQyxLQUN6RSxPQUFPdnNELEdBQU9pdEQsR0FBaUIsU0FBRTUvQixHQUFVODhCLEVBQU9rQyxFQUFTQyxFQUMvRCxDQVdPLFNBQVN3QixHQUF1Qjd0QyxFQUFXa3FDLEVBQU9rQyxHQUFVLEVBQU1DLEVBQVFDLEtBQzdFLE9BQU92c0QsR0FBT290RCxHQUFlLFFBQVNudEMsR0FBWWtxQyxFQUFPa0MsRUFBU0MsRUFDdEUsQ0FXTyxTQUFTeUIsR0FBcUJqakUsRUFBTXEvRCxFQUFPa0MsR0FBVSxFQUFNQyxFQUFRQyxLQUN0RSxPQUFPdnNELEdBQU9pdEQsR0FBaUIsU0FBRW5pRSxHQUFPcS9ELEVBQU9rQyxFQUFTQyxFQUM1RCxDQzdJTyxTQUFTMEIsR0FBYzdELEdBQzFCLElBQUluNUQsRUFBTW01RCxFQUFNLytELE9BS2hCLE9BQVM0RixHQUFPLEdBQUcsQ0FDZixNQUFNMjNELEVBQU93QixFQUFNbjVELEdBTW5CLEdBQUlBLEVBQU0sR0FBS201RCxFQUFNcHFELFlBQVk0b0QsRUFBTTMzRCxFQUFNLElBQU0sRUFDL0NtNUQsRUFBTWorRCxPQUFPOEUsRUFBSyxRQUd0QixJQUFLLElBQUlpOUQsRUFBV3RGLEVBQUsyQixPQUFRMkQsRUFBVUEsRUFBV0EsRUFBUzNELE9BQzNELEdBQUlILEVBQU1ucUMsU0FBU2l1QyxHQUFXLENBQzFCOUQsRUFBTWorRCxPQUFPOEUsRUFBSyxHQUNsQixLQUNKLENBRVIsQ0FDQSxPQUFPbTVELENBQ1gsQ0FLTyxJQUFJK0QsR0FrQ0osU0FBU0MsR0FBd0JDLEVBQU9DLEdBQzNDLE1BQU1DLEVBQVcsR0FDWEMsRUFBVyxHQUNqQixHQUFJSCxJQUFVQyxFQUNWLE9BQU8sRUFFWCxJQUFJblQsRUFBVStOLEdBQVltRixHQUFTQSxFQUFRQSxFQUFNOUQsT0FDakQsS0FBT3BQLEdBQ0hvVCxFQUFTOWdCLFFBQVEwTixHQUNqQkEsRUFBVUEsRUFBUW9QLE9BR3RCLElBREFwUCxFQUFVK04sR0FBWW9GLEdBQVNBLEVBQVFBLEVBQU0vRCxPQUN0Q3BQLEdBQ0hxVCxFQUFTL2dCLFFBQVEwTixHQUNqQkEsRUFBVUEsRUFBUW9QLE9BRXRCLE1BQU1rRSxFQUFTbnNELEtBQUtDLElBQUlnc0QsRUFBU2xqRSxPQUFRbWpFLEVBQVNuakUsUUFDbEQsSUFBSTRGLEVBQU0sRUFDVixLQUFPQSxFQUFNdzlELEdBQVVGLEVBQVN0OUQsS0FBU3U5RCxFQUFTdjlELElBQzlDQSxJQUVKLEdBQVksSUFBUkEsRUFDQSxPQUFPazlELEdBQWlCTyxhQUU1QixNQUFNQyxFQUFlSixFQUFTdDlELEVBQU0sR0FDOUJzNkQsRUFBV29ELEVBQWEzbUMsU0FDeEI0bUMsRUFBV0wsRUFBU3Q5RCxHQUNwQjQ5RCxFQUFXTCxFQUFTdjlELEdBQzFCLE9BQUlzNkQsRUFBU3IrRCxRQUFRMGhFLEdBQVlyRCxFQUFTcitELFFBQVEyaEUsR0FDMUNGLElBQWlCTCxFQUNWSCxHQUFpQlcsVUFBWVgsR0FBaUJZLGFBRWxEWixHQUFpQlcsVUFFeEJILElBQWlCTixFQUNWRixHQUFpQmEsVUFBWWIsR0FBaUJjLFNBRWxEZCxHQUFpQmEsU0FDNUIsQ0FVTyxTQUFTRSxHQUFXOUUsR0FZdkIsT0FYQUEsRUFBUUEsRUFBTW5xRCxRQUFPLENBQUMyb0QsRUFBTXg5RCxFQUFHOHFDLEtBQVNBLEVBQUlqVyxTQUFTMm9DLEVBQU14OUQsRUFBSSxNQUN6RCtqRSxNQUFLLENBQUNoNkQsRUFBRzZFLEtBQ1gsTUFBTW8xRCxFQUFXaEIsR0FBd0JqNUQsRUFBRzZFLEdBQzVDLE9BQUlvMUQsRUFBV2pCLEdBQWlCYSxXQUNwQixFQUVISSxFQUFXakIsR0FBaUJXLFVBQzFCLEVBRUosQ0FBQyxJQUVMMUUsQ0FDWCxDQzdITyxTQUFTLEdBQVFpRixHQUNwQixNQUFNQyxFQUFXQyxHQUFjQyxHQUFhSCxHQUM1QyxPQUFRQyxFQUVnQixTQUFsQkEsRUFBUzloRSxLQVVuQixTQUFxQjhoRSxHQUNqQixJQUFJclgsRUFDSixNQUFNNFQsRUFBU3lELEVBQVN0bkMsU0FDbEJ5bkMsRUFBTyxDQUNUMWtFLEtBQU0sT0FDTjJrRSxNQUFPNUIsR0FBcUIsUUFBU2pDLEdBQVF6c0MsS0FBS0MsSUFDOUMsSUFBSTQ0QixFQUNKLE1BQU0sU0FBRWp3QixHQUFhM0ksRUFDZnN3QyxFQUFRLENBQUVsakUsTUFBT21qRSxHQUFpQjVuQyxJQUN4QzZuQyxHQUFpQkYsRUFBTyxLQUFNLEtBQU0zbkMsR0FDcEM2bkMsR0FBaUJGLEVBQU8sUUFBUyxRQUFTM25DLEdBQzFDLE1BQU14N0IsRUFBa0QsUUFBMUN5ckQsRUFBS3NYLEdBQWMsT0FBUXZuQyxVQUE4QixJQUFQaXdCLE9BQWdCLEVBQVNBLEVBQUc4TixRQUFjLEtBQ3RHdjVELElBQ0FtakUsRUFBTUcsS0FBT3RqRSxHQUVqQixNQUFNeXJDLEVBQWMvZCxHQUFNLFVBQVc4TixJQUFhOU4sR0FBTSxVQUFXOE4sR0FDL0RpUSxJQUNBMDNCLEVBQU0xM0IsWUFBY0EsR0FFeEIsTUFBTTgzQixFQUFVNzFDLEdBQU0sVUFBVzhOLEdBSWpDLE9BSEkrbkMsSUFDQUosRUFBTUksUUFBVSxJQUFJbHdELEtBQUtrd0QsSUFFdEJKLENBQUssS0FHcEJFLEdBQWlCSixFQUFNLEtBQU0sS0FBTTVELEdBQ25DZ0UsR0FBaUJKLEVBQU0sUUFBUyxRQUFTNUQsR0FDekMsTUFBTXIvRCxFQUFnRCxRQUF4Q3lyRCxFQUFLc1gsR0FBYyxPQUFRMUQsVUFBNEIsSUFBUDVULE9BQWdCLEVBQVNBLEVBQUc4TixRQUFjLEtBQ3BHdjVELElBQ0FpakUsRUFBS0ssS0FBT3RqRSxHQUVoQnFqRSxHQUFpQkosRUFBTSxjQUFlLFdBQVk1RCxHQUNsRCxNQUFNbUUsRUFBVTkxQyxHQUFNLFVBQVcyeEMsR0FLakMsT0FKSW1FLElBQ0FQLEVBQUtPLFFBQVUsSUFBSW53RCxLQUFLbXdELElBRTVCSCxHQUFpQkosRUFBTSxTQUFVLFFBQVM1RCxHQUFRLEdBQzNDNEQsQ0FDWCxDQWhEY1EsQ0FBWVgsR0F1RDFCLFNBQW9CQSxHQUNoQixJQUFJclgsRUFBSXFOLEVBQ1IsTUFBTXVHLEVBQXdILFFBQTlHdkcsRUFBNEQsUUFBdERyTixFQUFLc1gsR0FBYyxVQUFXRCxFQUFTdG5DLGlCQUE4QixJQUFQaXdCLE9BQWdCLEVBQVNBLEVBQUdqd0IsZ0JBQTZCLElBQVBzOUIsRUFBZ0JBLEVBQUssR0FDckptSyxFQUFPLENBQ1Qxa0UsS0FBTXVrRSxFQUFTOWhFLEtBQUs0SSxPQUFPLEVBQUcsR0FDOUJrUSxHQUFJLEdBQ0pvcEQsTUFBTzVCLEdBQXFCLE9BQVF3QixFQUFTdG5DLFVBQVU1SSxLQUFLQyxJQUN4RCxNQUFNLFNBQUUySSxHQUFhM0ksRUFDZnN3QyxFQUFRLENBQUVsakUsTUFBT21qRSxHQUFpQjVuQyxJQUN4QzZuQyxHQUFpQkYsRUFBTyxLQUFNLE9BQVEzbkMsR0FDdEM2bkMsR0FBaUJGLEVBQU8sUUFBUyxRQUFTM25DLEdBQzFDNm5DLEdBQWlCRixFQUFPLE9BQVEsT0FBUTNuQyxHQUN4QzZuQyxHQUFpQkYsRUFBTyxjQUFlLGNBQWUzbkMsR0FDdEQsTUFBTStuQyxFQUFVNzFDLEdBQU0sVUFBVzhOLElBQWE5TixHQUFNLFVBQVc4TixHQUcvRCxPQUZJK25DLElBQ0FKLEVBQU1JLFFBQVUsSUFBSWx3RCxLQUFLa3dELElBQ3RCSixDQUFLLEtBR3BCRSxHQUFpQkosRUFBTSxRQUFTLFFBQVM1RCxHQUN6Q2dFLEdBQWlCSixFQUFNLE9BQVEsT0FBUTVELEdBQ3ZDZ0UsR0FBaUJKLEVBQU0sY0FBZSxjQUFlNUQsR0FDckQsTUFBTW1FLEVBQVU5MUMsR0FBTSxnQkFBaUIyeEMsR0FLdkMsT0FKSW1FLElBQ0FQLEVBQUtPLFFBQVUsSUFBSW53RCxLQUFLbXdELElBRTVCSCxHQUFpQkosRUFBTSxTQUFVLGlCQUFrQjVELEdBQVEsR0FDcEQ0RCxDQUNYLENBbEZjUyxDQUFXWixHQUhmLElBSVYsRUR3QkEsU0FBV25CLEdBQ1BBLEVBQWlCQSxFQUErQixhQUFJLEdBQUssZUFDekRBLEVBQWlCQSxFQUE0QixVQUFJLEdBQUssWUFDdERBLEVBQWlCQSxFQUE0QixVQUFJLEdBQUssWUFDdERBLEVBQWlCQSxFQUEyQixTQUFJLEdBQUssV0FDckRBLEVBQWlCQSxFQUErQixhQUFJLElBQU0sY0FDN0QsQ0FORCxDQU1HQSxLQUFxQkEsR0FBbUIsQ0FBQyxJQ29ENUMsTUFBTWdDLEdBQW9CLENBQUMsTUFBTyxPQUFRLFFBQ3BDQyxHQUFpQixDQUNuQixXQUNBLFVBQ0EsWUFDQSxlQUNBLFdBQ0EsV0FDQSxTQUNBLFNBUUosU0FBU1IsR0FBaUJTLEdBQ3RCLE9BQU92QyxHQUFxQixnQkFBaUJ1QyxHQUFPanhDLEtBQUt5cEMsSUFDckQsTUFBTSxRQUFFOUMsR0FBWThDLEVBQ2RwOEQsRUFBUSxDQUNWc0csT0FBUWd6RCxFQUFnQixPQUN4QnVLLFlBQWF2SyxFQUFtQixXQUVwQyxJQUFLLE1BQU11SCxLQUFVNkMsR0FDYnBLLEVBQVF1SCxLQUNSN2dFLEVBQU02Z0UsR0FBVXZILEVBQVF1SCxJQUdoQyxJQUFLLE1BQU1BLEtBQVU4QyxHQUNickssRUFBUXVILEtBQ1I3Z0UsRUFBTTZnRSxHQUFVdnRELFNBQVNnbUQsRUFBUXVILEdBQVMsS0FNbEQsT0FISXZILEVBQW9CLGFBQ3BCdDVELEVBQU02RSxXQUFheTBELEVBQW9CLFlBRXBDdDVELENBQUssR0FFcEIsQ0FRQSxTQUFTOGlFLEdBQWNqaUMsRUFBU3M3QixHQUM1QixPQUFPa0YsR0FBcUJ4Z0MsRUFBU3M3QixHQUFNLEVBQU0sR0FBRyxFQUN4RCxDQVNBLFNBQVMxdUMsR0FBTW9ULEVBQVMraUMsRUFBTy9ELEdBQVUsR0FDckMsT0FBTzErQixHQUFZa2dDLEdBQXFCeGdDLEVBQVMraUMsRUFBTy9ELEVBQVMsSUFBSWovRCxNQUN6RSxDQVVBLFNBQVN3aUUsR0FBaUJoOUIsRUFBS2hILEVBQU15QixFQUFTK2lDLEVBQU8vRCxHQUFVLEdBQzNELE1BQU10NkIsRUFBTTlYLEdBQU1vVCxFQUFTK2lDLEVBQU8vRCxHQUM5QnQ2QixJQUNBYSxFQUFJaEgsR0FBUW1HLEVBQ3BCLENBT0EsU0FBU3c5QixHQUFZM2hFLEdBQ2pCLE1BQWlCLFFBQVZBLEdBQTZCLFNBQVZBLEdBQThCLFlBQVZBLENBQ2xELENDcExPLE1BQU0sSUFBWSxFQVNaLEdBQXFCLEdBQ3JCLEdBQXlCLEdBR3pCMGlFLEdBQWlCLElBQUkzTCxJQUFJLENBQUMsVUFBVyxRQUFTLGFBQWMsT0FBUSxLQUFNLFNBQVUsU0FBVSxVQUFXLE1BQU8sV0FBWSxLQUFNLE1BQU8sS0FBTSxLQUFNLFFBQVMsV0FBWSxhQUFjLFNBQVUsU0FBVSxPQUFRLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1Ba0IxUTRMLEdBQWdCLDhCQy9CM0J4bEQsT0FBTSxVQUNOeE4sR0FBTSxpQkFDTjVQLEdBQWdCLFFBQ2hCZ3VDLEdBQU8sMEJBQ1A5SCxHQUF5QixLQUN6QmxSLEdBQUksZUFDSjZ0QyxJQUNFemxFLE9DTEUwbEUsR0FBVW4zRCxPQUdIbzNELEdBQVMvSCxHRkZNLElFRUVBLEVBQUtnSSxTQUE0QmhJLEVBQUssR0FBT0EsRUFFOURpSSxHQUFhLEVBQUVDLG1CQUFtQkEsRUFBY3ZaLEdBQU1zWixXQUV0REUsR0FBZ0IsQ0FBQzkvQyxFQUFNK0YsS0FDbEMvRixFQUFLd21DLEdBQVF6Z0MsRUFDYkEsRUFBSyxHQUFRL0YsQ0FBSSxFQUdOLEdBQWtCLENBQUNBLEVBQU1rcUMsRUFBU25rQyxLQUM3Qys1QyxHQUFjOS9DLEVBQU1rcUMsR0FDcEI0VixHQUFjSixHQUFPeFYsR0FBVW5rQyxFQUFLLEVBUXpCLEdBQWdCLENBQUMvRixFQUFNa3FDLEVBQVNua0MsS0FDM0MrNUMsR0FBYzkvQyxFQUFNa3FDLEdBQ3BCNFYsR0FBYzVWLEVBQVNua0MsRUFBSyxFQUdqQmc2QyxHQUFZLEVBQUVDLFlBQVdILG1CQUM3QkEsRUFBY3ZaLEdBQU1zWixXQUFhSSxFQUFVbnhELGNBQWdCbXhELEVBR3ZEQyxHQUFjLENBQUNqZ0QsRUFBTStGLEtBQzVCL0YsSUFDRkEsRUFBS3dtQyxHQUFRemdDLEdBQ1hBLElBQ0ZBLEVBQUssR0FBUS9GLEVBQUksRUN0Q1JrZ0QsR0FBYyxJQUFJM2QsUUNLL0IsSUFBSTRkLElBQVcsRUFFUixNQUFNQyxHQUFVLElBQUk3ZCxRQUVkMTRCLEdBQWlCLElBQUkwNEIsUUFFckI4ZCxHQUEyQixDQUFDdG5DLEVBQVN1bkMsRUFBZUMsRUFBVXpjLEtBRXZFcWMsSUFDQXQyQyxHQUFlaWtCLElBQUkvVSxJQUNuQkEsRUFBUXNuQywwQkFDUnRuQyxFQUFRdi9CLFlBQVlnbkUsbUJBQW1CeHhDLFNBQVNzeEMsSUFFaER2bkMsRUFBUXNuQyx5QkFBeUJDLEVBQWVDLEVBQVV6YyxFQUM1RCxFQUdJMmMsR0FBZ0IsQ0FBQ3ptRCxFQUFRMG1ELElBQWdCM25DLElBQzdDLEdBQUlsUCxHQUFlaWtCLElBQUkvVSxHQUFVLENBQy9CLE1BQU0zNEIsRUFBT3lwQixHQUFlNXZCLElBQUk4K0IsR0FDNUIzNEIsRUFBS3VnRSxZQUFjRCxHQUFlM25DLEVBQVEybkMsY0FBZ0JBLElBQzVEdGdFLEVBQUt1Z0UsVUFBWUQsRUFDYjFtRCxLQUFVK2UsR0FDWkEsRUFBUS9lLEtBRWQsR0FHSTRtRCxHQUFtQkgsR0FBYyxxQkFBcUIsR0FDL0NJLEdBQW9COW5DLElBQy9CLEdBQUlvbkMsR0FBVSxDQUNaUyxHQUFpQjduQyxHQUNibW5DLEdBQVlweUIsSUFBSS9VLEtBQ2xCQSxFQUFVbW5DLEdBQVlqbUUsSUFBSTgrQixHQUFTK25DLFlBQ3JDLElBQUssQ0FBQ3RhLEdBQU96Z0MsRUFBTSxDQUFDLEdBQU1sYSxHQUFPa3RCLEVBQ2pDLEtBQU9oVCxJQUFTbGEsR0pwQ1EsSUlxQ2xCa2EsRUFBSzQ1QyxVQUNQaUIsR0FBaUI3NkMsR0FDbkJBLEVBQU9BLEVBQUt5Z0MsRUFFaEIsR0FHSXVhLEdBQXNCTixHQUFjLHdCQUF3QixHQWtCM0QsTUFBTU8sR0FLWCxXQUFBeG5FLENBQVlxbUUsR0FJVnptRSxLQUFLeW1FLGNBQWdCQSxFQUtyQnptRSxLQUFLNm5FLFNBQVcsSUFBSXZjLElBS3BCdHJELEtBQUs4bkUsUUFBVSxJQUFJeGMsSUFLbkJ0ckQsS0FBSzZ5QixRQUFTLENBQ2hCLENBT0EsTUFBQTBaLENBQU9xNkIsRUFBV21CLEVBQU9oMUQsRUFBVSxDQUFDLEdBQ2xDLE1BQU0sY0FBQzB6RCxFQUFhLFNBQUVvQixFQUFRLFFBQUVDLEdBQVc5bkUsS0FFM0MsR0FBSTZuRSxFQUFTbnpCLElBQUlreUIsR0FDZixNQUFNLElBQUluZ0UsTUFBTSxzQkFBd0JtZ0UsR0FFMUMsR0FBSUksR0FBUXR5QixJQUFJcXpCLEdBQ2QsTUFBTSxJQUFJdGhFLE1BQU0sc0NBQXdDc2hFLEdBRTFEL25FLEtBQUs2eUIsT0FBVWswQyxJQUFXLEVBRTFCLE1BQU9pQixRQUFTcjBELEdBQVVaLEVBRTFCaTBELEdBQVF4a0UsSUFBSXVsRSxFQUFPLENBQ2pCdEIsZ0JBQ0ExekQsUUFBUyxDQUFDazFELEdBQUl0MEQsRUFBU2l6RCxFQUFZLElBQ25DQSxVQUFXanpELEdBQVVpekQsSUFHdkIsTUFBTXo2QyxFQUFReFksRUFDWmdzQixHQUNTQSxFQUFRaW5DLFlBQWNqekQsR0FDdEJnc0IsRUFBUW5CLGFBQWEsUUFBVW9vQyxFQUV4Q2puQyxHQUFXQSxFQUFRaW5DLFlBQWNBLEVBRW5DLEdBREFpQixFQUFTcmxFLElBQUlva0UsRUFBVyxDQUFDbUIsUUFBTzU3QyxVQUM1QjI3QyxFQUFRcHpCLElBQUlreUIsR0FBWSxDQUMxQixJQUFLLE1BQU1uNkQsS0FBV3E3RCxFQUFRam5FLElBQUkrbEUsR0FDaENuNkQsRUFBUXM3RCxHQUNWRCxFQUFRM3ZDLE9BQU95dUMsRUFDakIsQ0FDQUgsRUFBY3ZtQyxpQkFDWnZzQixFQUFTLEdBQUdBLFNBQWNpekQsTUFBZ0JBLEdBQzFDOXpELFFBQVE5UyxLQUFLNHdCLFFBQVM1d0IsS0FDMUIsQ0FLQSxPQUFBNHdCLENBQVErTyxHQUNOLEdBQUlsUCxHQUFlaWtCLElBQUkvVSxHQUNyQixPQUNGLE1BQU0sY0FBQzhtQyxFQUFhLFNBQUVvQixHQUFZN25FLEtBQzVCa29FLEVBQUt2b0MsRUFBUW5CLGFBQWEsT0FBU21CLEVBQVFpbkMsVUFDakQsR0FBSWlCLEVBQVNuekIsSUFBSXd6QixHQUFLLENBQ3BCLE1BQU0sTUFBQ0gsRUFBSyxNQUFFNTdDLEdBQVMwN0MsRUFBU2huRSxJQUFJcW5FLEdBQ3BDLEdBQUkvN0MsRUFBTXdULEdBQVUsQ0FDbEIsTUFBTSxXQUFDMGdDLEVBQVUsWUFBRWlILEdBQWUzbkMsRUFDbEMsSUFBSyxNQUFNMEUsS0FBUWc4QixFQUNqQjFnQyxFQUFRd29DLG9CQUFvQjlqQyxHQUU5QixNQUFNaDhCLEVBQVNrcEMsR0FBUTVSLEdBQ3ZCLElBQUssTUFBT2xILEtBQVFwd0IsU0FDWHMzQixFQUFRbEgsR0FFakIydEMsR0FBZXptQyxFQUFTb29DLEVBQU01bkUsV0FDOUJzbUUsRUFBYy9ZLEdBQVcsQ0FBQy90QixVQUFTdDNCLFVBQ25DLElBQUkwL0QsRUFBTXRCLEVBQWV5QixHQUV6QnozQyxHQUFlanVCLElBQUltOUIsRUFBUyxDQUFDNG5DLFVBQVdELElBRXhDLElBQUssTUFBTWpqQyxLQUFRZzhCLEVBQ2pCMWdDLEVBQVF5b0MsaUJBQWlCL2pDLEdBRXZCaWpDLEdBQWUzbkMsRUFBUThuQyxtQkFDekI5bkMsRUFBUThuQyxtQkFDWixDQUNGLENBQ0YsQ0FLQSxXQUFBWSxDQUFZekIsR0FDVixNQUFNLFNBQUNpQixFQUFRLFFBQUVDLEdBQVc5bkUsS0FDNUIsT0FBTyxJQUFJd00sU0FBUUMsSUFDYm83RCxFQUFTbnpCLElBQUlreUIsR0FDZm42RCxFQUFRbzdELEVBQVNobkUsSUFBSStsRSxHQUFXbUIsUUFFM0JELEVBQVFwekIsSUFBSWt5QixJQUNma0IsRUFBUXRsRSxJQUFJb2tFLEVBQVcsSUFDekJrQixFQUFRam5FLElBQUkrbEUsR0FBVzNsRSxLQUFLd0wsR0FDOUIsR0FFSixDQU1BLEdBQUE1TCxDQUFJK2xFLEdBQ0YsTUFBTTUvRCxFQUFPaEgsS0FBSzZuRSxTQUFTaG5FLElBQUkrbEUsR0FDL0IsT0FBTzUvRCxHQUFRQSxFQUFLK2dFLEtBQ3RCLENBTUEsT0FBQTFHLENBQVEwRyxHQUNOLEdBQUlmLEdBQVF0eUIsSUFBSXF6QixHQUFRLENBQ3RCLE1BQU0sVUFBRW5CLEdBQWNJLEdBQVFubUUsSUFBSWtuRSxHQUNsQyxPQUFPbkIsQ0FDVCxDQUNBLE9BQU8sSUFDVCxFQ2xNRixNQUFPLE9BQVUsRUFRakIsSUFBSTBCLElBQWEsRUFFakIsTUFBTSxHQUFTLENBQUM5dUQsRUFBTStrRCxFQUFNMXJDLEtBQzFCLE1BQU1wZ0IsRUFBTStHLEVBQUssR0FLakIsT0FKQStrRCxFQUFLci9DLFdBQWExRixFQUNsQixHQUFnQi9HLEVBQUksR0FBTzhyRCxFQUFNOXJELEdBQzdCb2dCLEdMbkJzQixJS21CWjByQyxFQUFLZ0ksVUFDakJrQixHQUFrQmxKLEdBQ2JBLENBQUksRUFHUGdLLEdBQVksQ0FBQzVvQyxFQUFTbHRCLEVBQUs4MUQsRUFBVy9rRSxFQUFPcXZCLEtBQ2pEMDFDLEVBQVU1YSxHQUFTbnFELEVBQ25CK2tFLEVBQVVDLGFBQWU3b0MsRUFDekIsR0FBY2x0QixFQUFJLEdBQU84MUQsRUFBVzkxRCxHQUNiLFVBQW5CODFELEVBQVVwbEUsT0FDWnc4QixFQUFROUosVUFBWXJ5QixHQUNsQnF2QixHQUNGbzBDLEdBQXlCdG5DLEVBQVM0b0MsRUFBVXBsRSxLQUFNLEtBQU1LLEVBQU0sRUFLckQwc0IsR0FBa0IsQ0FBQ3ZSLEVBQVU4cEQsRUFBUUMsS0FDaEQsTUFBTSxPQUFDNzFDLEVBQU0sU0FBRWcxQyxHQUFZbHBELEVBQVMrdEMsR0FFcEMsSUFBSTZSLEVBQU81L0MsRUFDUGdxRCxFQUFrQixLQUNsQkMsR0FBZSxFQUVuQk4sSUFBYSxFQUViLE1BQU1qdkMsRUFBVSxJQUFJLEdBQU8sQ0FFekIsdUJBQUFrZ0MsQ0FBd0JwMkQsRUFBTXVMLEdBQ0QsYUFBdkJ2TCxFQUFLK1MsZ0JBQ1B5SSxFQUFTa3FELFFBQVVuNkQsRUFBSzNMLE1BQU1JLEVBQUtuQyxRQUFRZ0MsT0FDL0MsRUFHQSxTQUFBMDVELENBQVV2NUQsRUFBTWs5RCxHQUNkLElBQUlsdEQsR0FBUyxFQUNiLEdBQUlzMUQsRUFDRixHQUFJRSxFQUNGcEssRUFBTyxHQUFPQSxFQUFNNS9DLEVBQVNtcUQsZ0JBQWdCM0MsR0FBZWhqRSxHQUFPMHZCLEdBQ25FMHJDLEVBQUtvSyxnQkFBa0JBLEVBQ3ZCeDFELEdBQVMsT0FFTixHQUFhLFFBQVRoUSxHQUEyQixRQUFUQSxFQUN6QndsRSxFQUFrQmhxRCxFQUFTbXFELGdCQUFnQjNDLEdBQWVoakUsR0FDMURvN0QsRUFBTyxHQUFPQSxFQUFNb0ssRUFBaUI5MUMsR0FDckMxZixHQUFTLE9BRU4sR0FBSTBmLEVBQVEsQ0FDZixNQUFNcTFDLEVBQUsva0UsRUFBS3l5QixTQUFTLEtBQU96eUIsRUFBUWs5RCxFQUFXNEgsSUFBTSxHQUN6RCxHQUFJQyxHQUFNTCxFQUFTbnpCLElBQUl3ekIsR0FBSyxDQUMxQixNQUFNLE1BQUNILEdBQVNGLEVBQVNobkUsSUFBSXFuRSxHQUM3QjNKLEVBQU8sR0FBT0EsRUFBTSxJQUFJd0osRUFBT2wxQyxVQUN4Qnd0QyxFQUFXNEgsR0FDbEI5MEQsR0FBUyxDQUNYLENBQ0YsQ0FHRUEsSUFDRm9yRCxFQUFPLEdBQU9BLEVBQU01L0MsRUFBU0ssY0FBYzdiLElBQU8sSUFFcEQsSUFBSXNQLEVBQU04ckQsRUFBSyxHQUNmLElBQUssTUFBTXA3RCxLQUFRbzFCLEdBQUs4bkMsR0FDdEJrSSxHQUFVaEssRUFBTTlyRCxFQUFLa00sRUFBU29xRCxnQkFBZ0I1bEUsR0FBT2s5RCxFQUFXbDlELEdBQU8wdkIsRUFDM0UsRUFHQSxTQUFBMGlDLENBQVU3bUQsR0FBUSxHQUFPNnZELEVBQU01L0MsRUFBU3FxRCxjQUFjdDZELEdBQU9ta0IsRUFBUyxFQUN0RSxNQUFBeWhDLENBQU83dUQsR0FFSCxHQUFPODRELEVBRExxSyxFQUNXanFELEVBQVNzcUQsbUJBQW1CeGpFLEdBRTVCa1osRUFBU0MsZUFBZW5aLEdBRldvdEIsRUFJcEQsRUFHQSxZQUFBMnFDLEdBQWlCb0wsR0FBZSxDQUFNLEVBQ3RDLFVBQUFuTCxHQUFlbUwsR0FBZSxDQUFPLEVBR3JDLFVBQUE1UixHQUNNeVIsR0FBVWxLLElBQVNvSyxJQUNyQkEsRUFBa0IsTUFDcEJwSyxFQUFPQSxFQUFLci9DLFVBQ2QsR0FDQyxDQUNEKzhDLHlCQUF5QixFQUN6QjVJLGdCQUFnQixFQUNoQkQsU0FBVXFWLElBUVosT0FMQXB2QyxFQUFRUSxNQUFNNnVDLEdBQ2RydkMsRUFBUTVtQixNQUVSNjFELElBQWEsRUFFTjNwRCxDQUFRLEVDeEhKLEdBQWMsSUFBSTJzQyxJQUVsQjRkLEdBQW9CLENBQUNDLEVBQU9wQixLQUN2QyxJQUFLLE1BQU01a0UsSUFBUSxHQUFHMFYsT0FBT3N3RCxHQUMzQixHQUFZM21FLElBQUlXLEVBQU00a0UsR0FDdEIsR0FBWXZsRSxJQUFJVyxFQUFLc1MsY0FBZXN5RCxFQUN0QyxnQkNRRixNQUFNcUIsR0FBYyxFQUFFLENBQUNoYyxHQUFPemdDLEVBQU0sQ0FBQyxHQUFNbGEsR0FBTW9xQixLQUMvQyxLQUFPbFEsSUFBU2xhLEdBQUssQ0FDbkIsT0FBUWthLEVBQUs0NUMsVUFDWCxLUFp3QixFT2F0QjhDLEdBQVcxOEMsRUFBTWtRLEdBQ2pCLE1BQ0YsS1BkbUIsRU9lbkIsS1Bic0IsRU9jdEIsS1BmNEIsRU9nQjFCeXNDLEdBQW9CMzhDLEVBQU1rUSxHQUMxQixNQUNGLEtQckJzQixFT3NCcEIwc0MsR0FBYzU4QyxFQUFNa1EsR0FDcEJsUSxFQUFPMjVDLEdBQU8zNUMsR0FDZCxNQUNGLEtBQUssR0FDSDY4QyxHQUFtQjc4QyxFQUFNa1EsR0FHN0JsUSxFQUFPQSxFQUFLeWdDLEVBQ2QsQ0FDQSxNQUFNcGhDLEVBQU82USxFQUFLNzdCLE9BQVMsRUFDckJ3QyxFQUFRcTVCLEVBQUs3USxHQUNFLGlCQUFWeG9CLEdBQXNCQSxFQUFRLEVBQ3ZDcTVCLEVBQUs3USxJQUFTLEdBRWQ2USxFQUFLNTdCLEtBQUssR0FBUyxFQUdWb29FLEdBQWEsQ0FBQ2hsQyxFQUFNeEgsS0FDL0JBLEVBQUs1N0IsS1B2Q3VCLEVPdUNGb2pDLEVBQUtsaEMsTUFDL0IsTUFBTUssRUFBUTZnQyxFQUFLc3BCLEdBQU8zcUQsT0FDdEJRLEdBQ0ZxNUIsRUFBSzU3QixLQUFLdUMsRUFBTSxFQUdQOGxFLEdBQXNCLENBQUMvSyxFQUFNMWhDLEtBQ3hDLE1BQU1yNUIsRUFBUSs2RCxFQUFLNVEsR0FDZm5xRCxFQUFNUixRQUNSNjVCLEVBQUs1N0IsS0FBS3M5RCxFQUFLZ0ksU0FBVS9pRSxFQUFNLEVBUXRCZ21FLEdBQXFCLEVBQUVybUUsT0FBTXNtRSxXQUFVQyxZQUFXN3NDLEtBQzdEQSxFQUFLNTdCLEtBQUssR0FBb0JrQyxHQUMxQnNtRSxHQUNGNXNDLEVBQUs1N0IsS0FBS3dvRSxHQUNSQyxHQUNGN3NDLEVBQUs1N0IsS0FBS3lvRSxFQUFTLEVBR1ZILEdBQWdCLENBQUM1cEMsRUFBUzlDLEtBQ3JDQSxFQUFLNTdCLEtQbEVxQixFT2tFRjArQixFQUFRaW5DLFdBQ2hDd0MsR0FBWXpwQyxFQUFTOUMsRUFBSyxFQ3JFdEI4c0MsR0FDSixDQUFDanBFLEVBQU1vYSxFQUFRNmtCLEVBQVNpcUMsRUFBWUMsRUFBYzNDLEVBQWVDLEtBQ2xFLENBQ0N6bUUsT0FDQW9hLFNBQ0E4dUQsYUFDQUMsZUFDQTNDLGdCQUNBQyxXQUNBMkMsZ0JBQWlCbnFDLEdBQVNtcUMsaUJBQW1CLEtBQzdDQyxZQUFhcHFDLEdBQVNvcUMsYUFBZSxPQUdqQ0MsR0FBaUIsQ0FDckJDLEVBQVVudkQsRUFBUW9zRCxFQUFlZ0QsRUFBaUJDLEVBQW1CaEQsS0FFckUsSUFBTStDLEdBQW1CQSxFQUFnQnQwQyxTQUFTc3hDLEdBQWlCLENBQ2pFLE1BQU0sU0FBQ3Q0QyxFQUFRLFFBQUV3N0MsRUFBTyxVQUFFQyxHQUFhSixFQUN2Q0csRUFBUW5wRSxLQUFLMG9FLEdBQ1gsYUFBYzd1RCxFQUFRLEtBQ3RCLEdBQUksR0FDSm9zRCxFQUFlaUQsRUFBb0JoRCxPQUFXLElBRTNDa0QsSUFDSEosRUFBU0ksV0FBWSxFQUNyQjc5RCxRQUFRQyxVQUFVMkgsTUFBSyxLQUNyQjYxRCxFQUFTSSxXQUFZLEVBQ3JCejdDLEVBQVN3N0MsRUFBUXRvRSxPQUFPLEdBQUltb0UsRUFBUyxJQUczQyxHQUdXLEdBQTJCLENBQUN0cUMsRUFBU3VuQyxFQUFlQyxLQUMvRCxNQUFNLGNBQUNWLEdBQWlCOW1DLEdBQ2xCLE9BQUM5TSxFQUFNLFVBQUV5M0MsR0FBYTdELEVBQWN0WixHQUMxQyxHQUFJdDZCLEVBQ0YsSUFBSyxNQUFNbzNDLEtBQVlLLEVBQ3JCLElBQUssTUFDSHh2RCxHQUNBLFVBQ0V5dkQsRUFBUyxRQUNUQyxFQUFPLFdBQ1BuSyxFQUFVLGdCQUNWNkosRUFBZSxrQkFDZkMsTUFFQ0YsRUFBU2xLLE1BQ1osR0FBSXdLLEdBQ0YsR0FDR0MsSUFBWTF2RCxJQUFXMnJELEdBQWlCM3JELEVBQU9nVyxTQUFTNk8sTUFDdkQ2cUMsR0FBVzF2RCxFQUFPNmlCLFNBQVMvSCxTQUFTK0osR0FDdEMsQ0FDQXFxQyxHQUNFQyxFQUFVdHFDLEVBQ1Z1bkMsRUFBZWdELEVBQWlCQyxFQUFtQmhELEdBRXJELEtBQ0YsT0FFRyxHQUNIOUcsR0FDQXZsRCxJQUFXNmtCLEVBQ1gsQ0FDQXFxQyxHQUNFQyxFQUFVdHFDLEVBQ1Z1bkMsRUFBZWdELEVBQWlCQyxFQUFtQmhELEdBRXJELEtBQ0YsQ0FHTixFQUdXc0QsR0FBYSxDQUFDOXFDLEVBQVN6Z0IsS0FDbEMsTUFBTSxjQUFDdW5ELEdBQWlCOW1DLEdBQ2xCLE9BQUM5TSxFQUFNLFVBQUV5M0MsR0FBYTdELEVBQWN0WixHQUMxQyxHQUFJdDZCLEVBQ0YsSUFBSyxNQUFNbzNDLEtBQVlLLEVBQ3JCLElBQUssTUFBT3h2RCxHQUFRLFFBQUMwdkQsRUFBTyxVQUFFRCxFQUFTLGNBQUV6ckQsTUFBbUJtckQsRUFBU2xLLE1BQ25FLEdBQUl3SyxJQUVDcnJELElBQWVwRSxJQUFXb0UsR0FBbUNzckQsR0FBVzF2RCxFQUFPZ1csU0FBUzVSLE1BQ3ZGQSxJQUFnQnNyRCxJQUFZMXZELElBQVcyckQsR0FBcUMzckQsRUFBT2dXLFNBQVM2TyxNQUM1RTZxQyxHQUFXMXZELEVBQU9nRSxFQUFnQixhQUFlLFlBQVk4VyxTQUFTK0osS0FDeEYsQ0FDQSxNQUFNLFNBQUMvUSxFQUFRLFFBQUV3N0MsRUFBTyxVQUFFQyxHQUFhSixFQUN2Q0csRUFBUW5wRSxLQUFLMG9FLEdBQ1gsWUFBYTd1RCxFQUFRNmtCLEVBQ3JCemdCLEVBQWEsR0FBSyxDQUFDeWdCLEdBQVV6Z0IsRUFBYSxDQUFDeWdCLEdBQVcsS0FFbkQwcUMsSUFDSEosRUFBU0ksV0FBWSxFQUNyQjc5RCxRQUFRQyxVQUFVMkgsTUFBSyxLQUNyQjYxRCxFQUFTSSxXQUFZLEVBQ3JCejdDLEVBQVN3N0MsRUFBUXRvRSxPQUFPLEdBQUltb0UsRUFBUyxLQUd6QyxLQUNGLENBSVIsRUFHSyxNQUFNUyxHQUNYLFdBQUF0cUUsQ0FBWXFtRSxHQUNWLE1BQU02RCxFQUFZLElBQUkvUCxJQUN0QnY2RCxLQUFLc3FFLFVBQVlBLEVBQ2pCdHFFLEtBQUs2eUIsUUFBUyxFQUtkN3lCLEtBQUtrL0IsTUFBUSxNQUVYLFdBQUE5K0IsQ0FBWXd1QixHQUlWNXVCLEtBQUs0dUIsU0FBV0EsRUFLaEI1dUIsS0FBSysvRCxNQUFRLElBQUl6VSxJQUtqQnRyRCxLQUFLb3FFLFFBQVUsR0FLZnBxRSxLQUFLcXFFLFdBQVksQ0FDbkIsQ0FFQSxVQUFBTSxHQUNFM3FFLEtBQUtvcUUsUUFBUXRvRSxPQUFPLEdBQ3BCOUIsS0FBSysvRCxNQUFNMXFDLFFBQ1hpMUMsRUFBVW55QyxPQUFPbjRCLE1BQ2pCeW1FLEVBQWN0WixHQUFtQnQ2QixTQUFXeTNDLEVBQVUvd0QsSUFDeEQsQ0FNQSxPQUFBc0YsQ0FBUS9ELEVBQVEvSCxFQUFVLENBQ3hCeTNELFNBQVMsRUFDVEQsV0FBVyxFQUNYbEssWUFBWSxFQUNaNkosZ0JBQWlCLEtBQ2pCQyxtQkFBbUIsRUFDbkJyckQsZUFBZSxLQUlWLHNCQUF1Qi9MLEdBQWEsb0JBQXFCQSxLQUM1REEsRUFBUXN0RCxZQUFhLEdBR3ZCdHRELEVBQVF3M0QsWUFBY3gzRCxFQUFRdzNELFVBQzlCeDNELEVBQVF5M0QsVUFBWXozRCxFQUFReTNELFFBQzVCeHFFLEtBQUsrL0QsTUFBTXY5RCxJQUFJc1ksRUFBUS9ILEdBQ3ZCdTNELEVBQVVoNEMsSUFBSXR5QixNQUNkeW1FLEVBQWN0WixHQUFtQnQ2QixRQUFTLENBQzVDLENBS0EsV0FBQSszQyxHQUFnQixPQUFPNXFFLEtBQUtvcUUsUUFBUXRvRSxPQUFPLEVBQUksRUFFbkQsRUM1S0ssTUFBTStvRSxHQUFrQixJQUFJdFEsSUFBSSxDQUNyQyxrQkFDQSxzQkFDQSxRQUNBLFlBQ0EsV0FDQSxVQUNBLFFBQ0Esa0JBQ0EsV0FDQSxVQUNBLFFBQ0EsV0FDQSxZQUNBLGlCQUNBLFNBQ0EsS0FDQSxRQUNBLFlBQ0EsT0FDQSxXQUNBLFFBQ0EsV0FDQSxhQUNBLE9BQ0EsY0FDQSxXQUNBLFdBQ0EsV0FDQSxXQUNBLFFBQ0EsY0FHVzkyQixHQUFlLENBQUM5RCxFQUFTNG9DLEtBQ3BDLE1BQU8sQ0FBQzVhLEdBQVFucUQsRUFBSyxLQUFFTCxHQUFRb2xFLEVBQy9CQSxFQUFVQyxhQUFlN29DLEVBQ3pCLEdBQWNBLEVBQVM0b0MsRUFBVzVvQyxFQUFReXRCLElBQzdCLFVBQVRqcUQsSUFDRnc4QixFQUFROUosVUFBWXJ5QixHQUN0QixHQUFhbThCLEVBQVN4OEIsRUFBTSxNQUM1QixHQUFhdzhCLEVBQVN4OEIsRUFBTSxLQUFNSyxFQUFNLEVBRzdCc25FLEdBQWtCLENBQUNuckMsRUFBUzRvQyxLQUN2QyxNQUFPLENBQUM1YSxHQUFRbnFELEVBQUssS0FBRUwsR0FBUW9sRSxFQUMvQjdCLEdBQWM2QixFQUFVLEdBQU9BLEVBQVVuYixJQUN6Q21iLEVBQVVDLGFBQWVELEVBQVUsR0FBUUEsRUFBVW5iLEdBQVEsS0FDaEQsVUFBVGpxRCxJQUNGdzhCLEVBQVE4c0IsR0FBYyxNQUN4QixHQUFhOXNCLEVBQVN4OEIsRUFBTUssR0FDNUIsR0FBYW04QixFQUFTeDhCLEVBQU1LLEVBQU8sS0FBSyxFQUc3QnVuRSxHQUFtQixDQUM5QmxxRSxJQUFHLENBQUM4K0IsRUFBU3g4QixJQUNKdzhCLEVBQVFDLGFBQWF6OEIsR0FFOUIsR0FBQVgsQ0FBSW05QixFQUFTeDhCLEVBQU1LLEdBQ2JBLEVBQ0ZtOEIsRUFBUThELGFBQWF0Z0MsRUFBTSxJQUUzQnc4QixFQUFRbXJDLGdCQUFnQjNuRSxFQUM1QixHQUdXNm5FLEdBQW1CLENBQzlCbnFFLElBQUcsQ0FBQzgrQixFQUFTeDhCLElBQ0o4bkUsV0FBV3RyQyxFQUFRbkIsYUFBYXI3QixJQUFTLEdBRWxELEdBQUFYLENBQUltOUIsRUFBU3g4QixFQUFNSyxHQUNqQm04QixFQUFROEQsYUFBYXRnQyxFQUFNSyxFQUM3QixHQUdXMG5FLEdBQWtCLENBQzdCcnFFLElBQUcsQ0FBQzgrQixFQUFTeDhCLElBQ0p3OEIsRUFBUW5CLGFBQWFyN0IsSUFBUyxHQUV2QyxHQUFBWCxDQUFJbTlCLEVBQVN4OEIsRUFBTUssR0FDakJtOEIsRUFBUThELGFBQWF0Z0MsRUFBTUssRUFDN0IsR0N0RkkybkUsR0FBSyxJQUFJaGlCLFFBRWYsU0FBU2lpQixHQUFTN2xDLEVBQU9rUixHQUt2QixNQUp3QixtQkFBYkEsRUFDVEEsRUFBUzEyQyxLQUFLd2xDLEVBQU16cUIsT0FBUXlxQixHQUU1QmtSLEVBQVM0MEIsWUFBWTlsQyxHQUNoQkEsRUFBTStsQyw2QkFDZixDQUVBLFNBQVNDLElBQWdCLGNBQUNDLEVBQWEsT0FBRTF3RCxJQUN2QyxNQUFNaWEsRUFBTW8yQyxHQUFHdHFFLElBQUkycUUsR0FDbkIsR0FBSXoyQyxHQUFPQSxFQUFJMmYsSUFBSTEwQyxLQUFLVSxNQUFPLENBQzdCLE1BQU0rcUUsRUFBWTEyQyxFQUFJbDBCLElBQUliLEtBQUtVLE1BRTdCVixLQUFLMHJFLFdBREhGLElBQWtCMXdELEVBQ0Y5YSxLQUFLMnJFLFVBRUwzckUsS0FBSzRyRSxlQUd6QjVyRSxLQUFLd3JFLGNBQWdCQSxFQUNyQnhyRSxLQUFLOGEsT0FBU0EsRUFDZCxJQUFLLE1BQU8yN0IsRUFBVTFqQyxLQUFZMDRELEVBR2hDLEdBRkkxNEQsR0FBV0EsRUFBUTg0RCxNQUNyQkosRUFBVXR6QyxPQUFPc2UsR0FDZjIwQixHQUFTcHJFLEtBQU15MkMsR0FDakIsTUFJSixjQUZPejJDLEtBQUt3ckUscUJBQ0x4ckUsS0FBSzhhLE9BQ0w5YSxLQUFLOHJFLFlBQ2QsQ0FDRixDQU1BLE1BQU1DLEdBRUosV0FBQTNyRSxHQUNFK3FFLEdBQUczb0UsSUFBSXhDLEtBQU0sSUFBSXNyRCxJQUNuQixDQUtBLFVBQUEwZ0IsR0FDRSxPQUFPLElBQ1QsQ0FFQSxnQkFBQXY5QyxDQUFpQi90QixFQUFNKzFDLEVBQVUxakMsR0FDL0IsTUFBTWdpQixFQUFNbzJDLEdBQUd0cUUsSUFBSWIsTUFDZCswQixFQUFJMmYsSUFBSWgwQyxJQUNYcTBCLEVBQUl2eUIsSUFBSTlCLEVBQU0sSUFBSTRxRCxLQUNwQnYyQixFQUFJbDBCLElBQUlILEdBQU04QixJQUFJaTBDLEVBQVUxakMsRUFDOUIsQ0FFQSxtQkFBQXl5QixDQUFvQjlrQyxFQUFNKzFDLEdBQ3hCLE1BQU0xaEIsRUFBTW8yQyxHQUFHdHFFLElBQUliLE1BQ25CLEdBQUkrMEIsRUFBSTJmLElBQUloMEMsR0FBTyxDQUNqQixNQUFNK3FFLEVBQVkxMkMsRUFBSWwwQixJQUFJSCxHQUN0QitxRSxFQUFVdHpDLE9BQU9zZSxLQUFjZzFCLEVBQVVseUQsTUFDM0N3YixFQUFJb0QsT0FBT3ozQixFQUNmLENBQ0YsQ0FFQSxhQUFBdXJFLENBQWMxbUMsR0FDWixJQUFJZzVCLEVBQU92K0QsS0FJWCxJQUhBdWxDLEVBQU1tbUMsV0FBYW5tQyxFQUFNMm1DLGdCQUdsQjNOLEdBQ0RBLEVBQUswTixlQUNQMW1DLEVBQU00bUMsTUFBTWxyRSxLQUFLLENBQUN1cUUsY0FBZWpOLEVBQU16akQsT0FBUTlhLE9BQ2pEdStELEVBQU9oNUIsRUFBTTZtQyxTQUFXN04sRUFBS3lOLFlBQWN6TixFQUFLeU4sYUFLbEQsT0FIQXptQyxFQUFNNG1DLE1BQU1sa0UsS0FBS3NqRSxHQUFpQmhtQyxHQUNsQ0EsRUFBTTRtQyxNQUFRLEdBQ2Q1bUMsRUFBTW1tQyxXQUFhbm1DLEVBQU04bUMsTUFDakI5bUMsRUFBTSttQyxnQkFDaEIsRUM5RUssTUFBTUMsV0FBaUJ0bkUsTUFDNUIsSUFBQSt2QixDQUFLajBCLEdBQUssT0FBT0EsRUFBSWYsS0FBS2dCLE9BQVNoQixLQUFLZSxHQUFLLElBQU0sRUNtQnJELE1BQU15ckUsR0FBcUIsRUFBRXR0RCxpQkFDM0IsSUFBSXV0RCxFQUFRLEVBQ1osS0FBT3Z0RCxHQUNMdXRELElBQ0F2dEQsRUFBYUEsRUFBV0EsV0FFMUIsT0FBT3V0RCxDQUFLLEVBTVAsTUFBTSxXQUFhLEdBRXhCLHVCQUFXQyxHQUFpQixPWm5DRixDWW1DdUIsQ0FDakQseUJBQVdDLEdBQW1CLE9abkNGLENZbUN5QixDQUNyRCxvQkFBV0MsR0FBYyxPWm5DRixDWW1Db0IsQ0FDM0MsNkJBQVdDLEdBQXVCLE9abkNGLENZbUM2QixDQUM3RCx1QkFBV0MsR0FBaUIsT1puQ0YsQ1ltQ3VCLENBQ2pELHdCQUFXQyxHQUFrQixPWm5DRixDWW1Dd0IsQ0FDbkQsaUNBQVdDLEdBQTJCLE9BQU8sRUFBd0IsQ0FDckUsNkJBQVdDLEdBQXVCLE9BQU8sRUFBb0IsQ0FFN0QsV0FBQTdzRSxDQUFZcW1FLEVBQWVHLEVBQVdMLEdBQ3BDMkcsUUFDQWx0RSxLQUFLeW1FLGNBQWdCQSxFQUNyQnptRSxLQUFLNG1FLFVBQVlBLEVBQ2pCNW1FLEtBQUt1bUUsU0FBV0EsRUFDaEJ2bUUsS0FBS2tmLFdBQWEsS0FDbEJsZixLQUFLb3RELEdBQVEsS0FDYnB0RCxLQUFLLEdBQVEsSUFDZixDQUVBLGdCQUFJMHNFLEdBQWlCLE9adERLLENZc0RnQixDQUMxQyxrQkFBSUMsR0FBbUIsT1p0REssQ1lzRGtCLENBQzlDLGFBQUlDLEdBQWMsT1p0REssQ1lzRGEsQ0FDcEMsc0JBQUlDLEdBQXVCLE9adERLLENZc0RzQixDQUN0RCxnQkFBSUMsR0FBaUIsT1p0REssQ1lzRGdCLENBQzFDLGlCQUFJQyxHQUFrQixPWnRESyxDWXNEaUIsQ0FDNUMsMEJBQUlDLEdBQTJCLE9BQU8sRUFBd0IsQ0FDOUQsc0JBQUlDLEdBQXVCLE9BQU8sRUFBb0IsQ0FFdEQsV0FBSUUsR0FDRixNQUFNMUcsRVozRG1CLElZMkRIem1FLEtBQUt1bUUsU0FDSHZtRSxLQUFPQSxLQUFLeW1FLGNBQ3BDLEdBQUlBLEVBQWUsQ0FDakIsTUFBTTNXLEVBQU8yVyxFQUFjcjJDLGNBQWMsUUFDekMsR0FBSTAvQixFQUNGLE9BQU9BLEVBQUt0eEIsYUFBYSxRQUUzQixNQUFNLFNBQUNzSCxHQUFZMmdDLEVBQWNwMkMsWUFDakMsR0FBSXlWLEVBQ0YsT0FBT0EsRUFBUzNqQyxJQUNwQixDQUVBLE9BQU8sSUFDVCxDQUlBLGVBQUltbEUsR0FBZ0IsT0FBTyxDQUFPLENBQ2xDLFlBQUk4RixHQUFhLE9BQU9wdEUsS0FBSzRtRSxTQUFXLENBQ3hDLGlCQUFJOW5DLEdBQWtCLE9BQU8sSUFBTSxDQUNuQyxtQkFBSWdyQyxHQUFvQixPQUFPLElBQU0sQ0FDckMsMEJBQUl1RCxHQUEyQixPQUFPLElBQU0sQ0FDNUMsZUFBSXRELEdBQWdCLE9BQU8sSUFBTSxDQUNqQyxzQkFBSTNuQyxHQUF1QixPQUFPLElBQU0sQ0FDeEMsY0FBSWtyQyxHQUFlLE9BQU8sSUFBSWYsRUFBVSxDQUN4QyxjQUFJZ0IsR0FBZSxPQUFPLElBQU0sQ0FDaEMsYUFBSUMsR0FBYyxPQUFPLElBQU0sQ0FHL0IsYUFBSUMsR0FBYyxPQUFPLElBQU0sQ0FDL0IsYUFBSUEsQ0FBVWpxRSxHQUFRLENBQ3RCLGVBQUkrL0IsR0FBZ0IsT0FBTyxJQUFNLENBQ2pDLGVBQUlBLENBQVkvL0IsR0FBUSxDQUN4QixTQUFBcXhDLEdBQWEsQ0FDYixTQUFBNjRCLEdBQWMsT0FBTyxJQUFNLENBQzNCLFFBQUE1OEMsR0FBYSxPQUFPLENBQU8sQ0FRM0IsWUFBQTY4QyxDQUFhQyxFQUFTQyxHQUFpQixPQUFPRCxDQUFRLENBTXRELFdBQUF2dUQsQ0FBWXVpRCxHQUFTLE9BQU9BLENBQU0sQ0FPbEMsWUFBQWtNLENBQWFDLEVBQVVDLEdBQVksT0FBT0EsQ0FBUyxDQU1uRCxXQUFBN3VELENBQVl5aUQsR0FBUyxPQUFPQSxDQUFNLENBQ2xDLFFBQUF6N0QsR0FBYSxNQUFPLEVBQUksQ0FHeEIsYUFBQThuRSxHQUFrQixRQUFTanVFLEtBQUt3dEUsU0FBVyxDQUMzQyxVQUFBVSxDQUFXM1AsR0FBUSxPQUFPditELE9BQVN1K0QsQ0FBTSxDQUd6Qyx1QkFBQXdGLENBQXdCanBELEdBQ3RCLElBQUkxVSxFQUFTLEVBQ2IsR0FBSXBHLE9BQVM4YSxFQUFRLENBQ25CLElBQUl0QixFQUFPZ3pELEdBQW1CeHNFLE1BQzFCbXVFLEVBQVEzQixHQUFtQjF4RCxHQUMvQixHQUFJdEIsRUFBTzIwRCxFQUNUL25FLEdadEhtQyxFWXVIL0JwRyxLQUFLOHdCLFNBQVNoVyxLQUNoQjFVLEdadEhvQyxTWXdIbkMsR0FBSStuRSxFQUFRMzBELEVBQ2ZwVCxHWjVIbUMsRVk2SC9CMFUsRUFBT2dXLFNBQVM5d0IsUUFDbEJvRyxHWjVIZ0MsUVk4SC9CLEdBQUlvVCxHQUFRMjBELEVBQU8sQ0FDdEIsTUFBTSxXQUFDYixHQUFjdHRFLEtBQUtrZixXQUN0Qm91RCxFQUFXenFFLFFBQVE3QyxNQUFRc3RFLEVBQVd6cUUsUUFBUWlZLEdBQ2hEMVUsR1psSWlDLEVZb0lqQ0EsR1pySWlDLENZc0lyQyxDQUNLb1QsR0FBUzIwRCxJQUNaL25FLEdacElpRCxHWXFJakRBLEdaMUlzQyxFWTRJMUMsQ0FDQSxPQUFPQSxDQUNULENBRUEsV0FBQWdvRSxDQUFZN1AsR0FDVixHQUFJditELE9BQVN1K0QsRUFDWCxPQUFPLEVBQ1QsR0FBSXYrRCxLQUFLdW1FLFdBQWFoSSxFQUFLZ0ksU0FBVSxDQUNuQyxPQUFRdm1FLEtBQUt1bUUsVUFDWCxLWnBLcUIsRVlxS3JCLEtBQUssR0FBd0IsQ0FDM0IsTUFBTThILEVBQVNydUUsS0FBS3N0RSxXQUNkZ0IsRUFBUy9QLEVBQUsrTyxXQUNwQixPQUFPZSxFQUFPcnRFLFNBQVdzdEUsRUFBT3R0RSxRQUFVcXRFLEVBQU9FLE9BQU0sQ0FBQ2hRLEVBQU14OUQsSUFBTXc5RCxFQUFLNlAsWUFBWUUsRUFBT3Z0RSxLQUM5RixFQUVGLE9BQU9mLEtBQUttRyxhQUFlbzRELEVBQUtwNEQsVUFDbEMsQ0FDQSxPQUFPLENBQ1QsQ0FLQSxVQUFBNmxFLEdBQ0UsT0FBT2hzRSxLQUFLa2YsVUFDZCxDQU9BLFdBQUFzdkQsR0FDRSxJQUFJcDdELEVBQU9wVCxLQUNYLEtBQU9vVCxFQUFLOEwsWUFDVjlMLEVBQU9BLEVBQUs4TCxXQUNkLE9BQU85TCxDQUNULEVDMU1GLE1BQU0sUUFBQ3BMLElBQVcsR0FHWnltRSxHQUFLLGFBRUxDLEdBQU8sQ0FDWCxJQUFRLFNBQ1IsSUFBSyxRQUNMLElBQUssT0FDTCxJQUFLLFFBR0RDLEdBQUtuL0QsR0FBS2svRCxHQUFLbC9ELEdBU1IsR0FBU28vRCxHQUFNNW1FLEdBQVFqSSxLQUFLNnVFLEVBQUlILEdBQUlFLElDVDNDRSxHQUFRLEtBS1AsTUFBTSxXQUFhLEdBQ3hCLFdBQUF6dUUsQ0FBWXFtRSxFQUFldGpFLEVBQU1LLEVBQVEsSUFDdkMwcEUsTUFBTXpHLEVBQWV0akUsRWRkSyxHY2UxQm5ELEtBQUt3b0UsYUFBZSxLQUNwQnhvRSxLQUFLbUQsS0FBTyxHQUFPQSxHQUNuQm5ELEtBQUsydEQsR0FBUyxHQUFPbnFELEdBQ3JCeEQsS0FBS3dzRCxJQUFXLENBQ2xCLENBRUEsU0FBSWhwRCxHQUFVLE9BQU94RCxLQUFLMnRELEVBQVEsQ0FDbEMsU0FBSW5xRCxDQUFNa25ELEdBQ1IsTUFBTyxDQUFDaUQsR0FBUXdaLEVBQVEsS0FBRWhrRSxFQUFJLGFBQUVxbEUsR0FBZ0J4b0UsS0FDaERBLEtBQUsydEQsR0FBUyxHQUFPakQsR0FDckIxcUQsS0FBS3dzRCxJQUFXLEVBQ1pnYyxJQUNGLEdBQWFBLEVBQWNybEUsRUFBTWdrRSxHQUNqQyxHQUFhcUIsRUFBY3JsRSxFQUFNZ2tFLEVBQVVubkUsS0FBSzJ0RCxJQUVwRCxDQUVBLFNBQUErZixHQUNFLE1BQU0sY0FBQ2pILEVBQWEsS0FBRXRqRSxFQUFNLENBQUN3cUQsR0FBUW5xRCxHQUFTeEQsS0FDOUMsT0FBTyxJQUFJLEdBQUt5bUUsRUFBZXRqRSxFQUFNSyxFQUN2QyxDQUVBLFFBQUEyQyxHQUNFLE1BQU0sS0FBQ2hELEVBQU0sQ0FBQ3dxRCxHQUFRbnFELEdBQVN4RCxLQUMvQixPQUFJNnFFLEdBQWdCbjJCLElBQUl2eEMsS0FBVUssRUFDekJnakUsR0FBV3htRSxNQUFRbUQsRUFBTyxHQUFHQSxPQUcvQixHQUFHQSxPQURZcWpFLEdBQVd4bUUsTUFBUXdELEVBQVEsR0FBT0EsSUFBUXdFLFFBQVE2bUUsR0FBTyxZQUVqRixDQUVBLE1BQUFsaEMsR0FDRSxNQUFNOVEsRUFBTyxHQUViLE9BREF3c0MsR0FBV3JwRSxLQUFNNjhCLEdBQ1ZBLENBQ1QsRUMzQ0ssTUFBTXlxQyxHQUFjLEVBQUViLGdCQUFldm5ELGlCQUMxQyxLQUFPQSxHQUFZLENBQ2pCLEdBQUlBLElBQWV1bkQsRUFDakIsT0FBTyxFQUNUdm5ELEVBQWFBLEVBQVdBLFlBQWNBLEVBQVdzNUIsSUFDbkQsQ0FDQSxPQUFPLENBQUssRUFHRDFaLEdBQWdCLEVBQUU1ZixpQkFDN0IsR0FBSUEsRUFDRixPQUFRQSxFQUFXcW5ELFVBQ2pCLEtmZnVCLEVlZ0J2QixLQUFLLEdBQ0gsT0FBTyxLQUdiLE9BQU9ybkQsQ0FBVSxFQUdONHFELEdBQWtCLEVBQUUsQ0FBQyxHQUFPbGpELE1BQ3ZDLE9BQVFBLEVBQU9BLEVBQUsyL0MsU0FBVyxHQUM3QixLQUFLLEdBQ0gsT0FBTzMvQyxFQUFLNG1DLEdBQ2QsS2Y5QnFCLEVlK0JyQixLZjdCd0IsRWU4QnhCLEtmL0I4QixFZWdDNUIsT0FBTzVtQyxFQUVYLE9BQU8sSUFBSSxFQUdBbWpELEdBQWN4TCxJQUN6QixNQUFNNXhDLEVBQU8yNUMsR0FBTy9ILEdBQU1uUixHQUMxQixPQUFPemdDLElBQVNBLEVBQUs0NUMsV0FBYSxHQUFXLEtBQU81NUMsRUFBSyxFQ3ZDOUMsR0FBcUI0eEMsSUFDaEMsSUFBSTV4QyxFQUFPbzlDLEdBQVl4TCxHQUN2QixLQUFPNXhDLEdoQkxtQixJZ0JLWEEsRUFBSzQ1QyxVQUNsQjU1QyxFQUFPbzlDLEdBQVlwOUMsR0FDckIsT0FBT0EsQ0FBSSxFQUdBMGdELEdBQXlCOU8sSUFDcEMsSUFBSTMzQyxFQUFPa2pELEdBQWdCdkwsR0FDM0IsS0FBTzMzQyxHaEJabUIsSWdCWVhBLEVBQUsyL0MsVUFDbEIzL0MsRUFBT2tqRCxHQUFnQmxqRCxHQUN6QixPQUFPQSxDQUFJLEVDUFBrb0QsR0FBYSxDQUFDckksRUFBZTFHLEtBQ2pDLE1BQU1nUCxFQUFXdEksRUFBY3VJLHlCQUUvQixPQURBRCxFQUFTbDFELFVBQVVrbUQsR0FDWmdQLENBQVEsRUFHSmhuRSxHQUFTLENBQUN3MkQsRUFBTXdCLEtBQzNCLE1BQU0sY0FBQzBHLEVBQWEsV0FBRXZuRCxHQUFjcS9DLEVBQ2hDci9DLEdBQ0ZBLEVBQVd5dUQsYUFDVG1CLEdBQVdySSxFQUFlMUcsR0FDMUJ4QixFQUNELEVBR1EwUSxHQUFRLENBQUMxUSxFQUFNd0IsS0FDMUIsTUFBTSxjQUFDMEcsRUFBYSxXQUFFdm5ELEdBQWNxL0MsRUFDaENyL0MsR0FDRkEsRUFBV3l1RCxhQUNUbUIsR0FBV3JJLEVBQWUxRyxHQUMxQnVHLEdBQU8vSCxHQUFNblIsR0FDZCxFQUdROGhCLEdBQWMsQ0FBQzNRLEVBQU13QixLQUNoQyxNQUFNLGNBQUMwRyxFQUFhLFdBQUV2bkQsR0FBY3EvQyxFQUNoQ3IvQyxJQUNFNmdELEVBQU1ucUMsU0FBUzJvQyxJQUNqQjJRLEdBQVkzUSxFQUFNLENBQUNBLEVBQU9BLEVBQUttUCxjQUNqQ3h1RCxFQUFXeXVELGFBQ1RtQixHQUFXckksRUFBZTFHLEdBQzFCeEIsR0FFRkEsRUFBS3pvRCxTQUNQLEVBR1dBLEdBQVMsQ0FBQzhRLEVBQU1rcUMsRUFBU25rQyxLQUNwQyxNQUFNLFdBQUN6TixFQUFVLFNBQUVxbkQsR0FBWXpWLEdBQzNCbHFDLEdBQVErRixLQUNWazZDLEdBQVlqZ0QsRUFBTStGLEdBQ2xCbWtDLEVBQVEsR0FBUSxLQUNoQndWLEdBQU94VixHQUFTMUQsR0FBUSxNQUV0Qmx1QyxJQUNGNHhDLEVBQVE1eEMsV0FBYSxLQUNyQnVyRCxHQUFXM1osRUFBUzV4QyxHakJyREksSWlCc0RwQnFuRCxHYlQ0QjVtQyxLQUNsQyxHQUFJb25DLEdBQVUsQ0FDWlksR0FBb0Job0MsR0FDaEJtbkMsR0FBWXB5QixJQUFJL1UsS0FDbEJBLEVBQVVtbkMsR0FBWWptRSxJQUFJOCtCLEdBQVMrbkMsWUFDckMsSUFBSyxDQUFDdGEsR0FBT3pnQyxFQUFNLENBQUMsR0FBTWxhLEdBQU9rdEIsRUFDakMsS0FBT2hULElBQVNsYSxHSm5EUSxJSW9EbEJrYSxFQUFLNDVDLFVBQ1BvQixHQUFvQmg3QyxHQUN0QkEsRUFBT0EsRUFBS3lnQyxFQUVoQixHYURJK2hCLENBQXFCcmUsR0FDekIsRUM1Q0ssTUFBTXNlLFdBQXNCLEdBRWpDLFdBQUFodkUsQ0FBWXFtRSxFQUFlRyxFQUFXTCxFQUFVNzNELEdBQzlDdytELE1BQU16RyxFQUFlRyxFQUFXTCxHQUNoQ3ZtRSxLQUFLMnRELEdBQVMsR0FBT2ovQyxFQUN2QixDQUdBLGVBQUk0NEQsR0FBZ0IsT0FBT0EsR0FBWXRuRSxLQUFPLENBQzlDLGlCQUFJOCtCLEdBQWtCLE9BQU9BLEdBQWM5K0IsS0FBTyxDQUNsRCxtQkFBSThwRSxHQUFvQixPQUFPQSxHQUFnQjlwRSxLQUFPLENBQ3RELGVBQUkrcEUsR0FBZ0IsT0FBT0EsR0FBWS9wRSxLQUFPLENBRTlDLDBCQUFJcXRFLEdBQTJCLE9BQU9BLEdBQXVCcnRFLEtBQU8sQ0FDcEUsc0JBQUlvaUMsR0FBdUIsT0FBTyxHQUFtQnBpQyxLQUFPLENBRTVELE1BQUErSCxJQUFVZzRELEdBQVNoNEQsR0FBTy9ILEtBQU0rL0QsRUFBUSxDQUN4QyxLQUFBa1AsSUFBU2xQLEdBQVNrUCxHQUFNanZFLEtBQU0rL0QsRUFBUSxDQUN0QyxXQUFBbVAsSUFBZW5QLEdBQVNtUCxHQUFZbHZFLEtBQU0rL0QsRUFBUSxDQUNsRCxNQUFBanFELEdBQVdBLEdBQU85VixLQUFLLEdBQU9BLEtBQU1BLEtBQUtvdEQsR0FBUSxDQUtqRCxRQUFJMStDLEdBQVMsT0FBTzFPLEtBQUsydEQsRUFBUSxDQUNqQyxRQUFJai9DLENBQUtsTCxHQUNQeEQsS0FBSzJ0RCxHQUFTLEdBQU9ucUQsR0FDckJpbkUsR0FBV3pxRSxLQUFNQSxLQUFLa2YsV0FDeEIsQ0FFQSxhQUFJdXVELEdBQWMsT0FBT3p0RSxLQUFLME8sSUFBTSxDQUNwQyxhQUFJKytELENBQVVqcUUsR0FBU3hELEtBQUswTyxLQUFPbEwsQ0FBTyxDQUUxQyxlQUFJKy9CLEdBQWdCLE9BQU92akMsS0FBSzBPLElBQU0sQ0FDdEMsZUFBSTYwQixDQUFZLy9CLEdBQVN4RCxLQUFLME8sS0FBT2xMLENBQU8sQ0FFNUMsVUFBSXhDLEdBQVcsT0FBT2hCLEtBQUswTyxLQUFLMU4sTUFBUSxDQUV4QyxhQUFBcXVFLENBQWMvaUQsRUFBUW1nRCxHQUNwQixPQUFPenNFLEtBQUswTyxLQUFLM0MsT0FBT3VnQixFQUFRbWdELEVBQ2xDLENBRUEsVUFBQTZDLENBQVc1Z0UsR0FDVDFPLEtBQUswTyxNQUFRQSxDQUNmLENBRUEsVUFBQTZnRSxDQUFXampELEVBQVE1ZCxHQUNqQixNQUFPQSxLQUFNcEQsR0FBS3RMLEtBQ2xCQSxLQUFLME8sS0FBT3BELEVBQUV2SSxNQUFNLEVBQUd1cEIsR0FBVTVkLEVBQU9wRCxFQUFFdkksTUFBTXVwQixFQUNsRCxDQUVBLFVBQUFrakQsQ0FBV2xqRCxFQUFRbWdELEdBQ2pCLE1BQU8vOUQsS0FBTXBELEdBQUt0TCxLQUNsQkEsS0FBSzBPLEtBQU9wRCxFQUFFdkksTUFBTSxFQUFHdXBCLEdBQVVoaEIsRUFBRXZJLE1BQU11cEIsRUFBU21nRCxFQUNwRCxDQUVBLFdBQUFnRCxDQUFZbmpELEVBQVFtZ0QsRUFBTy85RCxHQUN6QixNQUFPQSxLQUFNcEQsR0FBS3RMLEtBQ2xCQSxLQUFLME8sS0FBT3BELEVBQUV2SSxNQUFNLEVBQUd1cEIsR0FBVTVkLEVBQU9wRCxFQUFFdkksTUFBTXVwQixFQUFTbWdELEVBQzNELENBR0EsTUFBQTkrQixHQUNFLE1BQU05USxFQUFPLEdBRWIsT0FEQXlzQyxHQUFvQnRwRSxLQUFNNjhCLEdBQ25CQSxDQUNULEVDMUVLLE1BQU0sV0FBcUJ1eUMsR0FDaEMsV0FBQWh2RSxDQUFZcW1FLEVBQWUvM0QsRUFBTyxJQUNoQ3crRCxNQUFNekcsRUFBZSxnQm5CSFMsRW1CRzRCLzNELEVBQzVELENBRUEsU0FBQWcvRCxHQUNFLE1BQU0sY0FBQ2pILEVBQWUsQ0FBQzlZLEdBQVFqL0MsR0FBUTFPLEtBQ3ZDLE9BQU8sSUFBSSxHQUFheW1FLEVBQWUvM0QsRUFDekMsQ0FFQSxRQUFBdkksR0FBYSxNQUFPLFlBQVluRyxLQUFLMnRELE9BQWEsRUNWN0MsTUFBTSxXQUFnQnloQixHQUMzQixXQUFBaHZFLENBQVlxbUUsRUFBZS8zRCxFQUFPLElBQ2hDdytELE1BQU16RyxFQUFlLFdwQkZHLEVvQkV1Qi8zRCxFQUNqRCxDQUVBLFNBQUFnL0QsR0FDRSxNQUFNLGNBQUNqSCxFQUFlLENBQUM5WSxHQUFRai9DLEdBQVExTyxLQUN2QyxPQUFPLElBQUksR0FBUXltRSxFQUFlLzNELEVBQ3BDLENBRUEsUUFBQXZJLEdBQWEsTUFBTyxVQUFPbkcsS0FBSzJ0RCxVQUFhLE1DbEJwQytoQixHQTRCQUMsY0EzQlgsU0FBV0QsR0FDUEEsRUFBd0IsVUFBSSxZQUM1QkEsRUFBcUIsT0FBSSxTQUN6QkEsRUFBNEIsY0FBSSxpQkFDaENBLEVBQWtCLElBQUksTUFDdEJBLEVBQXdCLFVBQUksWUFFNUJBLEVBQXVCLFNBQUksV0FDM0JBLEVBQW9CLE1BQUksUUFDeEJBLEVBQXlCLFdBQUksYUFDN0JBLEVBQXFCLE9BQUksU0FDekJBLEVBQXNCLFFBQUksVUFDMUJBLEVBQStCLGlCQUFJLG1CQUN0QyxDQWJELENBYUdBLEtBQWlCQSxHQUFlLENBQUMsSUFlcEMsU0FBV0MsR0FDUEEsRUFBcUIsSUFBSSxNQUN6QkEsRUFBeUIsUUFBSSxVQUM3QkEsRUFBcUIsSUFBSSxNQUN6QkEsRUFBd0IsT0FBSSxTQUM1QkEsRUFBd0IsT0FBSSxTQUM1QkEsRUFBd0IsT0FBSSxTQUM1QkEsRUFBcUIsSUFBSSxNQUN6QkEsRUFBdUIsTUFBSSxPQUM5QixDQVRELENBU0dBLEtBQW9CQSxHQUFrQixDQUFDLElDckMxQyxNQUFNQyxHQUFTLDJEQUNUQyxHQUFXLCtCQUNYQyxHQUFjLElBQUl4a0IsSUFBSSxDQUN4QixDQUFDLElBQWlCcWtCLEdBQWdCSSxTQUNsQyxDQUFDLEdBQXFCSixHQUFnQkssT0FDdEMsQ0FBQyxHQUFpQkwsR0FBZ0JNLEtBQ2xDLENBQUMsR0FBbUJOLEdBQWdCTyxLQUNwQyxDQUFDLEdBQTBCUCxHQUFnQlEsS0FDM0MsQ0FBQyxJQUFnQlIsR0FBZ0JTLFVBRy9CQyxHQUFnQixJQUFJOVYsSUFBSSxDQUMxQixNQUNBLE1BQ0EsVUFDQSxLQUNBLFFBQ0EsT0FDQSxpQkFzQkUrVixHQUF5QixJQUFJL1YsSUFBSSxDQUFDLFdBQVksY0FFcEQsU0FBU2dXLEdBQVU5Z0UsRUFBRytnRSxFQUFTQyxHQUMzQixNQUFNQyxFQUFPaDdELFNBQVM4NkQsRUFBUyxJQUFNLE1BRXJDLE9BQU9FLEdBQVNBLEdBQVFELEVBQ2xCRCxFQUNBRSxFQUFPLEVBRUR4aEUsT0FBT0MsYUFBYXVoRSxFQUFPLE9BRTNCeGhFLE9BQU9DLGFBQWN1aEUsR0FBUSxHQUFNLE1BQWdCLEtBQVBBLEVBQWdCLE1BQzVFLENBQ0EsU0FBU0MsR0FBWXY5QyxHQUNqQixPQUFPQSxFQUFJcHJCLFFBQVE2bkUsR0FBVVUsR0FDakMsQ0FDQSxTQUFTSyxHQUFRcGxFLEdBQ2IsT0FBYSxLQUFOQSxHQUFvQyxLQUFOQSxDQUN6QyxDQUNBLFNBQVMsR0FBYUEsR0FDbEIsT0FBYyxLQUFOQSxHQUNFLElBQU5BLEdBQ00sS0FBTkEsR0FDTSxLQUFOQSxHQUNNLEtBQU5BLENBQ1IsQ0FVTyxTQUFTLEdBQU1reUIsR0FDbEIsTUFBTW16QyxFQUFhLEdBQ2IxVyxFQUFXMlcsR0FBY0QsRUFBWSxHQUFHbnpDLElBQVksR0FDMUQsR0FBSXk4QixFQUFXejhCLEVBQVMxOEIsT0FDcEIsTUFBTSxJQUFJeUYsTUFBTSx1QkFBdUJpM0IsRUFBUzM2QixNQUFNbzNELE1BRTFELE9BQU8wVyxDQUNYLENBQ0EsU0FBU0MsR0FBY0QsRUFBWW56QyxFQUFVcXpDLEdBQ3pDLElBQUl4OEIsRUFBUyxHQUNiLFNBQVM4c0IsRUFBUS8wQyxHQUNiLE1BQU01bEIsRUFBUWczQixFQUFTMzZCLE1BQU1ndUUsRUFBZ0J6a0QsR0FBUTVsQixNQUFNa3BFLElBQzNELElBQUtscEUsRUFDRCxNQUFNLElBQUlELE1BQU0sd0JBQXdCaTNCLEVBQVMzNkIsTUFBTWd1RSxNQUUzRCxNQUFPNXRFLEdBQVF1RCxFQUVmLE9BREFxcUUsR0FBaUJ6a0QsRUFBU25wQixFQUFLbkMsT0FDeEIydkUsR0FBWXh0RSxFQUN2QixDQUNBLFNBQVM2dEUsRUFBZ0Ixa0QsR0FFckIsSUFEQXlrRCxHQUFpQnprRCxFQUNWeWtELEVBQWdCcnpDLEVBQVMxOEIsUUFDNUIsR0FBYTA4QixFQUFTN3hCLFdBQVdrbEUsS0FDakNBLEdBRVIsQ0FDQSxTQUFTRSxJQUVMLE1BQU14aEQsRUFETnNoRCxHQUFpQixFQUVqQixJQUFJRyxFQUFVLEVBQ2QsS0FBT0EsRUFBVSxHQUFLSCxFQUFnQnJ6QyxFQUFTMThCLE9BQVErdkUsSUFFL0MsS0FEQXJ6QyxFQUFTN3hCLFdBQVdrbEUsSUFFbkJJLEVBQVVKLEdBSVgsS0FES3J6QyxFQUFTN3hCLFdBQVdrbEUsSUFFeEJJLEVBQVVKLElBQ1hHLElBTEFBLElBUVIsR0FBSUEsRUFDQSxNQUFNLElBQUl6cUUsTUFBTSwyQkFFcEIsT0FBT2txRSxHQUFZanpDLEVBQVMzNkIsTUFBTTBzQixFQUFPc2hELEVBQWdCLEdBQzdELENBQ0EsU0FBU0ksRUFBVW56QixHQUNmLElBQUlvekIsRUFBYSxFQUNqQixLQUFzQyxLQUEvQjF6QyxFQUFTN3hCLGFBQWFteUMsSUFDekJvekIsSUFDSixRQUE0QixHQUFwQkEsRUFDWixDQUNBLFNBQVNDLElBQ0wsR0FBSTk4QixFQUFPdnpDLE9BQVMsR0F0R3JCLFNBQXFCMDhCLEdBQ3hCLE9BQVFBLEVBQVNoOUIsTUFDYixLQUFLZ3ZFLEdBQWE0QixTQUNsQixLQUFLNUIsR0FBYTZCLE1BQ2xCLEtBQUs3QixHQUFhOEIsV0FDbEIsS0FBSzlCLEdBQWErQixPQUNsQixLQUFLL0IsR0FBYWdDLFFBQ2xCLEtBQUtoQyxHQUFhaUMsaUJBQ2QsT0FBTyxFQUNYLFFBQ0ksT0FBTyxFQUVuQixDQTBGaUNDLENBQVlyOUIsRUFBT0EsRUFBT3Z6QyxPQUFTLElBQ3hELE1BQU0sSUFBSXlGLE1BQU0sd0NBRXhCLENBQ0EsU0FBU29yRSxFQUFhbnhFLEdBQ2Q2ekMsRUFBT3Z6QyxPQUFTLEdBQ2hCdXpDLEVBQU9BLEVBQU92ekMsT0FBUyxHQUFHTixPQUFTZ3ZFLEdBQWE4QixXQUNoRGo5QixFQUFPQSxFQUFPdnpDLE9BQVMsR0FBR04sS0FBT0EsR0FHckMyd0UsSUFDQTk4QixFQUFPdHpDLEtBQUssQ0FBRVAsU0FDbEIsQ0FDQSxTQUFTb3hFLEVBQW9CM3VFLEVBQU13d0IsR0FDL0I0Z0IsRUFBT3R6QyxLQUFLLENBQ1JQLEtBQU1ndkUsR0FBYXhlLFVBQ25CL3RELE9BQ0F3d0IsU0FDQW53QixNQUFPNjlELEVBQVEsR0FDZjBRLFVBQVcsS0FDWHZMLFdBQVksVUFFcEIsQ0FRQSxTQUFTd0wsSUFLTCxHQUpJejlCLEVBQU92ekMsUUFDUHV6QyxFQUFPQSxFQUFPdnpDLE9BQVMsR0FBR04sT0FBU2d2RSxHQUFhOEIsWUFDaERqOUIsRUFBT250QyxNQUVXLElBQWxCbXRDLEVBQU92ekMsT0FDUCxNQUFNLElBQUl5RixNQUFNLHNCQUVwQm9xRSxFQUFXNXZFLEtBQUtzekMsRUFDcEIsQ0FFQSxHQURBeThCLEVBQWdCLEdBQ1p0ekMsRUFBUzE4QixTQUFXK3ZFLEVBQ3BCLE9BQU9BLEVBRVhrQixFQUFNLEtBQU9sQixFQUFnQnJ6QyxFQUFTMThCLFFBQVEsQ0FDMUMsTUFBTWt4RSxFQUFZeDBDLEVBQVM3eEIsV0FBV2tsRSxHQUN0QyxPQUFRbUIsR0FFSixLQUFLLEdBQ0wsS0FBSyxFQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNxQixJQUFsQjM5QixFQUFPdnpDLFFBQ1B1ekMsRUFBTyxHQUFHN3pDLE9BQVNndkUsR0FBYThCLGFBQ2hDSCxJQUNBOThCLEVBQU90ekMsS0FBSyxDQUFFUCxLQUFNZ3ZFLEdBQWE4QixjQUVyQ1IsRUFBZ0IsR0FDaEIsTUFHSixLQUFLLEdBQ0RhLEVBQWFuQyxHQUFhNkIsT0FDMUJQLEVBQWdCLEdBQ2hCLE1BRUosS0FBSyxHQUNEYSxFQUFhbkMsR0FBYStCLFFBQzFCVCxFQUFnQixHQUNoQixNQUVKLEtBQUssSUFDRGEsRUFBYW5DLEdBQWFnQyxTQUMxQlYsRUFBZ0IsR0FDaEIsTUFFSixLQUFLLEdBQ0RhLEVBQWFuQyxHQUFhNEIsVUFDMUJOLEVBQWdCLEdBQ2hCLE1BR0osS0FBSyxHQUNEYyxFQUFvQixRQUFTbkMsR0FBZ0JJLFNBQzdDLE1BRUosS0FBSyxHQUNEK0IsRUFBb0IsS0FBTW5DLEdBQWdCd0MsUUFDMUMsTUFFSixLQUFLLEdBQTRCLENBRzdCLElBQUlodkUsRUFGSjZ0RSxFQUFnQixHQUdoQixJQUFJZSxFQUFZLEtBQzJCLE1BQXZDcjBDLEVBQVM3eEIsV0FBV2tsRSxHQUVwQjV0RSxFQUFPaytELEVBQVEsR0FFVjNqQyxFQUFTdUksV0FBVyxLQUFNOHFDLElBQy9CZ0IsRUFBWSxJQUNaNXVFLEVBQU9rK0QsRUFBUSxLQUdmbCtELEVBQU9rK0QsRUFBUSxHQUM0QixNQUF2QzNqQyxFQUFTN3hCLFdBQVdrbEUsSUFFaEIsS0FESnJ6QyxFQUFTN3hCLFdBQVdrbEUsRUFBZ0IsS0FFcENnQixFQUFZNXVFLEVBQ1pBLEVBQU9rK0QsRUFBUSxLQUd2QjJQLEVBQWdCLEdBRWhCLElBQUlyOUMsRUFBU2c4QyxHQUFnQnlDLE9BQzdCLE1BQU1DLEVBQWlCdkMsR0FBWWp2RSxJQUFJNjhCLEVBQVM3eEIsV0FBV2tsRSxJQUMzRCxHQUFJc0IsRUFBZ0IsQ0FFaEIsR0FEQTErQyxFQUFTMCtDLEVBRUwsS0FEQTMwQyxFQUFTN3hCLFdBQVdrbEUsRUFBZ0IsR0FFcEMsTUFBTSxJQUFJdHFFLE1BQU0sZ0JBRXBCdXFFLEVBQWdCLEVBQ3BCLE1BQ2dELEtBQXZDdHpDLEVBQVM3eEIsV0FBV2tsRSxLQUN6QnA5QyxFQUFTZzhDLEdBQWdCd0MsT0FDekJuQixFQUFnQixJQUdwQixJQUFJeHRFLEVBQVEsR0FDUmdqRSxFQUFhLEtBQ2pCLEdBQWUsV0FBWDd5QyxFQUFxQixDQUNyQixHQUFJaTlDLEdBQVFsekMsRUFBUzd4QixXQUFXa2xFLElBQWlCLENBQzdDLE1BQU10WSxFQUFRLzZCLEVBQVM3eEIsV0FBV2tsRSxHQUNsQyxJQUFJdUIsRUFBYXZCLEVBQWdCLEVBQ2pDLEtBQU91QixFQUFhNTBDLEVBQVMxOEIsU0FDeEIwOEIsRUFBUzd4QixXQUFXeW1FLEtBQWdCN1osR0FDakMwWSxFQUFVbUIsS0FDZEEsR0FBYyxFQUVsQixHQUFJNTBDLEVBQVM3eEIsV0FBV3ltRSxLQUFnQjdaLEVBQ3BDLE1BQU0sSUFBSWh5RCxNQUFNLDhCQUVwQmpELEVBQVFtdEUsR0FBWWp6QyxFQUFTMzZCLE1BQU1ndUUsRUFBZ0IsRUFBR3VCLElBQ3REdkIsRUFBZ0J1QixFQUFhLENBQ2pDLEtBQ0ssQ0FDRCxNQUFNQyxFQUFheEIsRUFDbkIsS0FBT0EsRUFBZ0JyekMsRUFBUzE4QixVQUN6QixHQUFhMDhCLEVBQVM3eEIsV0FBV2tsRSxLQUU1QixLQURKcnpDLEVBQVM3eEIsV0FBV2tsRSxJQUVwQkksRUFBVUosS0FDZEEsR0FBaUIsRUFFckJ2dEUsRUFBUW10RSxHQUFZanpDLEVBQVMzNkIsTUFBTXd2RSxFQUFZeEIsR0FDbkQsQ0FDQUMsRUFBZ0IsR0FFaEIsTUFBTXdCLEVBQW1ELEdBQXJDOTBDLEVBQVM3eEIsV0FBV2tsRSxHQUVwQixNQUFoQnlCLEdBQ0FoTSxHQUFhLEVBQ2J3SyxFQUFnQixJQUVLLE1BQWhCd0IsSUFDTGhNLEdBQWEsRUFDYndLLEVBQWdCLEdBRXhCLENBQ0EsR0FDSSxLQURBdHpDLEVBQVM3eEIsV0FBV2tsRSxHQUVwQixNQUFNLElBQUl0cUUsTUFBTSx1Q0FFcEJzcUUsR0FBaUIsRUFDakIsTUFBTTBCLEVBQW9CLENBQ3RCL3hFLEtBQU1ndkUsR0FBYXhlLFVBQ25CL3RELE9BQ0F3d0IsU0FDQW53QixRQUNBdXVFLFlBQ0F2TCxjQUVKanlCLEVBQU90ekMsS0FBS3d4RSxHQUNaLEtBQ0osQ0FDQSxLQUFLLEdBQWdCLENBQ2pCLEdBQStDLEtBQTNDLzBDLEVBQVM3eEIsV0FBV2tsRSxFQUFnQixHQUF1QixDQUMzRHg4QixFQUFPdHpDLEtBQUssQ0FDUlAsS0FBTWd2RSxHQUFhZ0QsY0FDbkJ2dkUsS0FBTWsrRCxFQUFRLEdBQUduckQsY0FDakJ4SCxLQUNJLEtBREVndkIsRUFBUzd4QixXQUFXa2xFLEdBRXBCRSxJQUNBLE9BRVYsUUFDSixDQUNBLE1BQU05dEUsRUFBT2srRCxFQUFRLEdBQUduckQsY0FDeEIsSUFBSXhILEVBQU8sS0FDWCxHQUNJLEtBREFndkIsRUFBUzd4QixXQUFXa2xFLEdBRXBCLEdBQUlWLEdBQWMzN0IsSUFBSXZ4QyxHQUFPLENBQ3pCLEdBQUl5dEUsR0FBUWx6QyxFQUFTN3hCLFdBQVdrbEUsRUFBZ0IsSUFDNUMsTUFBTSxJQUFJdHFFLE1BQU0sbUJBQW1CdEQsc0JBSXZDLEdBRkF1TCxFQUFPLEdBQ1BxaUUsRUFBZ0JELEdBQWNwaUUsRUFBTWd2QixFQUFVcXpDLEVBQWdCLEdBRTFELEtBREFyekMsRUFBUzd4QixXQUFXa2xFLEdBRXBCLE1BQU0sSUFBSXRxRSxNQUFNLG1DQUFtQ3RELE1BQVN1NkIsTUFFaEVxekMsR0FBaUIsQ0FDckIsS0FDSyxDQUVELEdBREFyaUUsRUFBT3VpRSxJQUNIWCxHQUF1QjU3QixJQUFJdnhDLEdBQU8sQ0FDbEMsTUFBTXd2RSxFQUFPamtFLEVBQUs3QyxXQUFXLEdBQ3pCOG1FLElBQVNqa0UsRUFBSzdDLFdBQVc2QyxFQUFLMU4sT0FBUyxJQUN2QzR2RSxHQUFRK0IsS0FDUmprRSxFQUFPQSxFQUFLM0wsTUFBTSxHQUFJLEdBRTlCLENBQ0EyTCxFQUFPaWlFLEdBQVlqaUUsRUFDdkIsQ0FFSjZsQyxFQUFPdHpDLEtBQUssQ0FBRVAsS0FBTWd2RSxHQUFha0QsT0FBUXp2RSxPQUFNdUwsU0FDL0MsS0FDSixDQUNBLEtBQUssR0FDRHNqRSxJQUNBejlCLEVBQVMsR0FDVHk4QixFQUFnQixHQUNoQixNQUVKLFFBQVMsQ0FDTCxHQUFJdHpDLEVBQVN1SSxXQUFXLEtBQU04cUMsR0FBZ0IsQ0FDMUMsTUFBTTVXLEVBQVd6OEIsRUFBUzc2QixRQUFRLEtBQU1rdUUsRUFBZ0IsR0FDeEQsR0FBSTVXLEVBQVcsRUFDWCxNQUFNLElBQUkxekQsTUFBTSw4QkFFcEJzcUUsRUFBZ0I1VyxFQUFXLEVBRUwsSUFBbEI1bEIsRUFBT3Z6QyxRQUNQZ3dFLEVBQWdCLEdBRXBCLEtBQ0osQ0FDQSxJQUNJN3RFLEVBREE0dUUsRUFBWSxLQUVoQixHQUFrQixLQUFkRyxFQUNBbkIsR0FBaUIsRUFDakI1dEUsRUFBTyxTQUVOLEdBQWtCLE1BQWQrdUUsR0FFTCxHQURBL3VFLEVBQU8sR0FDd0MsTUFBM0N1NkIsRUFBUzd4QixXQUFXa2xFLEVBQWdCLEdBQXVCLENBQzNEYyxFQUFhbkMsR0FBYWlDLGtCQUMxQlgsRUFBZ0IsR0FDaEIsS0FDSixNQUVDLEtBQUlwQixHQUFPem5FLEtBQUt1MUIsRUFBUzM2QixNQUFNZ3VFLElBSWhDLE1BQU1rQixFQUhOOXVFLEVBQU9rK0QsRUFBUSxFQUluQixDQUMyQyxNQUF2QzNqQyxFQUFTN3hCLFdBQVdrbEUsSUFDdUIsTUFBM0NyekMsRUFBUzd4QixXQUFXa2xFLEVBQWdCLEtBQ3BDZ0IsRUFBWTV1RSxFQUVSLEtBREF1NkIsRUFBUzd4QixXQUFXa2xFLEVBQWdCLElBRXBDNXRFLEVBQU8sSUFDUDR0RSxHQUFpQixHQUdqQjV0RSxFQUFPaytELEVBQVEsSUFHdkI5c0IsRUFBT3R6QyxLQUFjLE1BQVRrQyxFQUNOLENBQUV6QyxLQUFNZ3ZFLEdBQWFtRCxVQUFXZCxhQUNoQyxDQUFFcnhFLEtBQU1ndkUsR0FBYXRSLElBQUtqN0QsT0FBTTR1RSxhQUMxQyxFQUVSLENBRUEsT0FEQUMsSUFDT2pCLENBQ1gsQ0NsYUEsTUFBTStCLEdBQVksSUFBSXhuQixJQUFJLENBQ3RCLENBQUNva0IsR0FBYW1ELFVBQVcsSUFDekIsQ0FBQ25ELEdBQWF0UixJQUFLLElBQ25CLENBQUNzUixHQUFheGUsVUFBVyxHQUN6QixDQUFDd2UsR0FBYWtELE9BQVEsS0FFbkIsU0FBUyxHQUFZanNFLEdBQ3hCLE9BQVFtc0UsR0FBVXArQixJQUFJL3RDLEVBQU1qRyxLQUNoQyxDQUNBLE1BQU0yL0QsR0FBYSxJQUFJL1UsSUFBSSxDQUN2QixDQUFDcWtCLEdBQWdCeUMsT0FBUSxJQUN6QixDQUFDekMsR0FBZ0J3QyxPQUFRLEdBQ3pCLENBQUN4QyxHQUFnQlEsSUFBSyxHQUN0QixDQUFDUixHQUFnQkssTUFBTyxHQUN4QixDQUFDTCxHQUFnQk0sSUFBSyxHQUN0QixDQUFDTixHQUFnQk8sSUFBSyxLQVNYLFNBQVM2QyxHQUFnQmxuQyxHQUNwQyxNQUFNbW5DLEVBQVFubkMsRUFBSTlXLElBQUlrK0MsSUFDdEIsSUFBSyxJQUFJbHlFLEVBQUksRUFBR0EsRUFBSThxQyxFQUFJN3FDLE9BQVFELElBQUssQ0FDakMsTUFBTW15RSxFQUFVRixFQUFNanlFLEdBQ3RCLEtBQUlteUUsRUFBVSxHQUVkLElBQUssSUFBSXB0RSxFQUFJL0UsRUFBSSxFQUFHK0UsR0FBSyxHQUFLb3RFLEVBQVVGLEVBQU1sdEUsR0FBSUEsSUFBSyxDQUNuRCxNQUFNYSxFQUFRa2xDLEVBQUkvbEMsRUFBSSxHQUN0QitsQyxFQUFJL2xDLEVBQUksR0FBSytsQyxFQUFJL2xDLEdBQ2pCK2xDLEVBQUkvbEMsR0FBS2EsRUFDVHFzRSxFQUFNbHRFLEVBQUksR0FBS2t0RSxFQUFNbHRFLEdBQ3JCa3RFLEVBQU1sdEUsR0FBS290RSxDQUNmLENBQ0osQ0FDSixDQUNBLFNBQVNELEdBQWF0c0UsR0FDbEIsSUFBSWluRCxFQUFJcU4sRUFDUixJQUFJa1ksRUFBNEMsUUFBcEN2bEIsRUFBS2tsQixHQUFVanlFLElBQUk4RixFQUFNakcsYUFBMEIsSUFBUGt0RCxFQUFnQkEsR0FBTSxFQWtDOUUsT0FqQ0lqbkQsRUFBTWpHLE9BQVNndkUsR0FBYXhlLFdBQzVCaWlCLEVBQStDLFFBQXZDbFksRUFBS29GLEdBQVd4L0QsSUFBSThGLEVBQU1ndEIsZUFBNEIsSUFBUHNuQyxFQUFnQkEsRUFBSyxFQUN4RXQwRCxFQUFNZ3RCLFNBQVdnOEMsR0FBZ0J3QyxRQUF5QixPQUFmeHJFLEVBQU14RCxPQUVqRGd3RSxFQUFPLEdBRVB4c0UsRUFBTTYvRCxhQUtOMk0sSUFBUyxJQUdSeHNFLEVBQU1qRyxPQUFTZ3ZFLEdBQWFrRCxTQUM1QmpzRSxFQUFNK0gsS0FHYSxRQUFmL0gsRUFBTXhELE1BQWlDLGFBQWZ3RCxFQUFNeEQsS0FDbkNnd0UsRUFBTyxFQUVGbHVFLE1BQU15dkIsUUFBUS90QixFQUFNK0gsT0FFekJ5a0UsRUFBT2w3RCxLQUFLQyxPQUFPdlIsRUFBTStILEtBQUtxbUIsS0FBS3hwQixHQUFNME0sS0FBS0MsT0FBTzNNLEVBQUV3cEIsSUFBSWsrQyxRQUV2REUsRUFBTyxJQUNQQSxFQUFPLElBSVhBLEVBQU8sRUFkUEEsRUFBTyxHQWlCUkEsQ0FDWCxDQ3RFQSxNQUFNQyxHQUFVLDJCQUNoQixTQUFTQyxHQUFZN3ZFLEdBQ2pCLE9BQU9BLEVBQU13RSxRQUFRb3JFLEdBQVMsT0FDbEMsQ0FPQSxNQUFNRSxHQUE0QixJQUFJL1ksSUFBSSxDQUN0QyxTQUNBLGlCQUNBLFFBQ0EsUUFDQSxPQUNBLFVBQ0EsVUFDQSxVQUNBLFFBQ0EsV0FDQSxRQUNBLFVBQ0EsVUFDQSxRQUNBLE1BQ0EsWUFDQSxXQUNBLFVBQ0EsT0FDQSxRQUNBLFdBQ0EsYUFDQSxPQUNBLFdBQ0EsT0FDQSxRQUNBLFNBQ0EsV0FDQSxTQUNBLFdBQ0EsVUFDQSxTQUNBLFdBQ0EsTUFDQSxNQUNBLFFBQ0EsUUFDQSxZQUNBLFdBQ0EsUUFDQSxTQUNBLE9BQ0EsT0FDQSxTQUNBLFlBQ0EsVUFFSixTQUFTZ1osR0FBaUI3MUMsRUFBVTNxQixHQUNoQyxNQUFzQyxrQkFBeEIycUIsRUFBUzhvQyxXQUNqQjlvQyxFQUFTOG9DLFdBQ2UsV0FBeEI5b0MsRUFBUzhvQyxhQUNIenpELEVBQVF5Z0UsWUFDVHpnRSxFQUFRcWdELFNBQVdrZ0IsR0FBMEI1K0IsSUFBSWhYLEVBQVN2NkIsS0FDekUsQ0FJTyxNQUFNc3dFLEdBQWlCLENBQzFCLE1BQUFDLENBQU8vbUQsRUFBTWplLEVBQU1xRSxHQUNmLE1BQU0sUUFBRTIrQixHQUFZMytCLEdBQ2QsS0FBRTVQLEdBQVN1TCxFQUNqQixJQUFJLE1BQUVsTCxHQUFVa0wsRUFDaEIsT0FBSTZrRSxHQUFpQjdrRSxFQUFNcUUsSUFDdkJ2UCxFQUFRQSxFQUFNMFMsY0FDTnNvRCxJQUNKLE1BQU1uNkIsRUFBT3FOLEVBQVF5dkIsa0JBQWtCM0MsRUFBTXI3RCxHQUM3QyxPQUFnQixNQUFSa2hDLEdBQ0pBLEVBQUtyakMsU0FBV3dDLEVBQU14QyxRQUN0QnFqQyxFQUFLbnVCLGdCQUFrQjFTLEdBQ3ZCbXBCLEVBQUs2eEMsRUFBTSxHQUdmQSxHQUFTOXNCLEVBQVF5dkIsa0JBQWtCM0MsRUFBTXI3RCxLQUFVSyxHQUFTbXBCLEVBQUs2eEMsRUFDN0UsRUFDQSxNQUFBbVYsQ0FBT2huRCxFQUFNamUsRUFBTXFFLEdBQ2YsTUFBTSxRQUFFMitCLEdBQVkzK0IsR0FDZCxLQUFFNVAsR0FBU3VMLEVBQ2pCLElBQUksTUFBRWxMLEdBQVVrTCxFQUNoQixNQUFNaTZCLEVBQU1ubEMsRUFBTXhDLE9BQ2xCLE9BQUl1eUUsR0FBaUI3a0UsRUFBTXFFLElBQ3ZCdlAsRUFBUUEsRUFBTTBTLGNBQ1AsU0FBa0Jzb0QsR0FDckIsTUFBTW42QixFQUFPcU4sRUFBUXl2QixrQkFBa0IzQyxFQUFNcjdELEdBQzdDLE9BQWdCLE1BQVJraEMsSUFDSEEsRUFBS3JqQyxTQUFXMm5DLEdBQTRCLE1BQXJCdEUsRUFBS3poQyxPQUFPK2xDLEtBQ3BDdEUsRUFBS3Q0QixPQUFPLEVBQUc0OEIsR0FBS3p5QixnQkFBa0IxUyxHQUN0Q21wQixFQUFLNnhDLEVBQ2IsR0FFRyxTQUFnQkEsR0FDbkIsTUFBTW42QixFQUFPcU4sRUFBUXl2QixrQkFBa0IzQyxFQUFNcjdELEdBQzdDLE9BQWdCLE1BQVJraEMsSUFDSEEsRUFBS3JqQyxTQUFXMm5DLEdBQTRCLE1BQXJCdEUsRUFBS3poQyxPQUFPK2xDLEtBQ3BDdEUsRUFBS3Q0QixPQUFPLEVBQUc0OEIsS0FBU25sQyxHQUN4Qm1wQixFQUFLNnhDLEVBQ2IsQ0FDSixFQUNBLE9BQUE3K0IsQ0FBUWhULEVBQU1qZSxFQUFNcUUsR0FDaEIsTUFBTSxRQUFFMitCLEdBQVkzK0IsR0FDZCxLQUFFNVAsRUFBSSxNQUFFSyxHQUFVa0wsRUFDeEIsR0FBSSxLQUFLdkcsS0FBSzNFLEdBQ1YsT0FBT293RSxHQUFTajBFLFVBRXBCLE1BQU0yL0QsRUFBUSxJQUFJcm1CLE9BQU8sWUFBWW82QixHQUFZN3ZFLGNBQW1CK3ZFLEdBQWlCN2tFLEVBQU1xRSxHQUFXLElBQU0sSUFDNUcsT0FBTyxTQUFpQnlyRCxHQUNwQixNQUFNbjZCLEVBQU9xTixFQUFReXZCLGtCQUFrQjNDLEVBQU1yN0QsR0FDN0MsT0FBZ0IsTUFBUmtoQyxHQUNKQSxFQUFLcmpDLFFBQVV3QyxFQUFNeEMsUUFDckJzK0QsRUFBTW4zRCxLQUFLazhCLElBQ1gxWCxFQUFLNnhDLEVBQ2IsQ0FDSixFQUNBcVYsT0FBTSxDQUFDbG5ELEdBQU0sS0FBRXhwQixJQUFRLFFBQUV1dUMsS0FDYjhzQixHQUFTOXNCLEVBQVEwdkIsVUFBVTVDLEVBQU1yN0QsSUFBU3dwQixFQUFLNnhDLEdBRTNELEtBQUEvdUMsQ0FBTTlDLEVBQU1qZSxFQUFNcUUsR0FDZCxNQUFNLFFBQUUyK0IsR0FBWTMrQixHQUNkLEtBQUU1UCxHQUFTdUwsRUFDakIsSUFBSSxNQUFFbEwsR0FBVWtMLEVBQ2hCLE1BQU1pNkIsRUFBTW5sQyxFQUFNeEMsT0FDbEIsT0FBWSxJQUFSMm5DLEVBQ09pckMsR0FBU2owRSxVQUVoQjR6RSxHQUFpQjdrRSxFQUFNcUUsSUFDdkJ2UCxFQUFRQSxFQUFNMFMsY0FDTnNvRCxJQUNKLE1BQU1uNkIsRUFBT3FOLEVBQVF5dkIsa0JBQWtCM0MsRUFBTXI3RCxHQUM3QyxPQUFnQixNQUFSa2hDLEdBQ0pBLEVBQUtyakMsUUFBVTJuQyxHQUNmdEUsRUFBS3Q0QixPQUFPLEVBQUc0OEIsR0FBS3p5QixnQkFBa0IxUyxHQUN0Q21wQixFQUFLNnhDLEVBQU0sR0FHZkEsSUFDSixJQUFJNVEsRUFDSixTQUEyRCxRQUFoREEsRUFBS2xjLEVBQVF5dkIsa0JBQWtCM0MsRUFBTXI3RCxVQUEwQixJQUFQeXFELE9BQWdCLEVBQVNBLEVBQUczbkIsV0FBV3ppQyxLQUN0R21wQixFQUFLNnhDLEVBQUssQ0FFdEIsRUFDQSxHQUFBL3JELENBQUlrYSxFQUFNamUsRUFBTXFFLEdBQ1osTUFBTSxRQUFFMitCLEdBQVkzK0IsR0FDZCxLQUFFNVAsR0FBU3VMLEVBQ2pCLElBQUksTUFBRWxMLEdBQVVrTCxFQUNoQixNQUFNaTZCLEdBQU9ubEMsRUFBTXhDLE9BQ25CLE9BQVksSUFBUjJuQyxFQUNPaXJDLEdBQVNqMEUsVUFFaEI0ekUsR0FBaUI3a0UsRUFBTXFFLElBQ3ZCdlAsRUFBUUEsRUFBTTBTLGNBQ05zb0QsSUFDSixJQUFJNVEsRUFDSixPQUN3QyxRQUQvQkEsRUFBS2xjLEVBQ1R5dkIsa0JBQWtCM0MsRUFBTXI3RCxVQUEwQixJQUFQeXFELE9BQWdCLEVBQVNBLEVBQUc3aEQsT0FBTzQ4QixHQUFLenlCLGlCQUFtQjFTLEdBQVNtcEIsRUFBSzZ4QyxFQUFLLEdBRzlIQSxJQUNKLElBQUk1USxFQUNKLFNBQTJELFFBQWhEQSxFQUFLbGMsRUFBUXl2QixrQkFBa0IzQyxFQUFNcjdELFVBQTBCLElBQVB5cUQsT0FBZ0IsRUFBU0EsRUFBR3pxQixTQUFTMy9CLEtBQ3BHbXBCLEVBQUs2eEMsRUFBSyxDQUV0QixFQUNBLEdBQUFzVixDQUFJbm5ELEVBQU1qZSxFQUFNcUUsR0FDWixNQUFNLFFBQUUyK0IsR0FBWTMrQixHQUNkLEtBQUU1UCxFQUFJLE1BQUVLLEdBQVVrTCxFQUN4QixHQUFjLEtBQVZsTCxFQUNBLE9BQU9vd0UsR0FBU2owRSxVQUVwQixHQUFJNHpFLEdBQWlCN2tFLEVBQU1xRSxHQUFVLENBQ2pDLE1BQU11c0QsRUFBUSxJQUFJcm1CLE9BQU9vNkIsR0FBWTd2RSxHQUFRLEtBQzdDLE9BQU8sU0FBZWc3RCxHQUNsQixNQUFNbjZCLEVBQU9xTixFQUFReXZCLGtCQUFrQjNDLEVBQU1yN0QsR0FDN0MsT0FBZ0IsTUFBUmtoQyxHQUNKQSxFQUFLcmpDLFFBQVV3QyxFQUFNeEMsUUFDckJzK0QsRUFBTW4zRCxLQUFLazhCLElBQ1gxWCxFQUFLNnhDLEVBQ2IsQ0FDSixDQUNBLE9BQVFBLElBQ0osSUFBSTVRLEVBQ0osU0FBMkQsUUFBaERBLEVBQUtsYyxFQUFReXZCLGtCQUFrQjNDLEVBQU1yN0QsVUFBMEIsSUFBUHlxRCxPQUFnQixFQUFTQSxFQUFHaDRCLFNBQVNweUIsS0FDcEdtcEIsRUFBSzZ4QyxFQUFLLENBRXRCLEVBQ0EsR0FBQXVWLENBQUlwbkQsRUFBTWplLEVBQU1xRSxHQUNaLE1BQU0sUUFBRTIrQixHQUFZMytCLEdBQ2QsS0FBRTVQLEdBQVN1TCxFQUNqQixJQUFJLE1BQUVsTCxHQUFVa0wsRUFDaEIsTUFBYyxLQUFWbEwsRUFDUWc3RCxLQUFXOXNCLEVBQVF5dkIsa0JBQWtCM0MsRUFBTXI3RCxJQUFTd3BCLEVBQUs2eEMsR0FFNUQrVSxHQUFpQjdrRSxFQUFNcUUsSUFDNUJ2UCxFQUFRQSxFQUFNMFMsY0FDTnNvRCxJQUNKLE1BQU1uNkIsRUFBT3FOLEVBQVF5dkIsa0JBQWtCM0MsRUFBTXI3RCxHQUM3QyxPQUFpQixNQUFSa2hDLEdBQ0xBLEVBQUtyakMsU0FBV3dDLEVBQU14QyxRQUN0QnFqQyxFQUFLbnVCLGdCQUFrQjFTLElBQ3ZCbXBCLEVBQUs2eEMsRUFBTSxHQUdmQSxHQUFTOXNCLEVBQVF5dkIsa0JBQWtCM0MsRUFBTXI3RCxLQUFVSyxHQUFTbXBCLEVBQUs2eEMsRUFDN0UsR0N6TkV3VixHQUFhLElBQUl6WixJQUFJLENBQUMsRUFBRyxHQUFJLEdBQUksR0FBSSxLQUNyQ2pNLEdBQU8sSUFBSXppRCxXQUFXLEdBQ3RCMGlELEdBQU8sSUFBSTFpRCxXQUFXLEdDc0JiLFNBQVNvb0UsR0FBU0MsR0FDN0IsT0NORyxTQUFpQjkvQixHQUNwQixNQUFNdHBDLEVBQUlzcEMsRUFBTyxHQUVYemtDLEVBQUl5a0MsRUFBTyxHQUFLLEVBUXRCLEdBQUl6a0MsRUFBSSxHQUFLN0UsR0FBSyxFQUNkLE9BQU84b0UsR0FBU2owRSxVQUVwQixJQUFXLElBQVBtTCxFQUNBLE9BQVFwSixHQUFVQSxHQUFTaU8sRUFDL0IsR0FBVSxJQUFON0UsRUFDQSxPQUFRcEosR0FBVUEsSUFBVWlPLEVBRWhDLEdBQVUsSUFBTjdFLEVBQ0EsT0FBTzZFLEVBQUksRUFBSWlrRSxHQUFTbDBFLFNBQVlnQyxHQUFVQSxHQUFTaU8sRUFNM0QsTUFBTXdrRSxFQUFPbDhELEtBQUs4RSxJQUFJalMsR0FFaEJzcEUsR0FBU3prRSxFQUFJd2tFLEVBQVFBLEdBQVFBLEVBQ25DLE9BQU9ycEUsRUFBSSxFQUNKcEosR0FBVUEsR0FBU2lPLEdBQUtqTyxFQUFReXlFLElBQVNDLEVBQ3pDMXlFLEdBQVVBLEdBQVNpTyxHQUFLak8sRUFBUXl5RSxJQUFTQyxDQUNwRCxDRDFCV0MsQ0RmSixTQUFlSCxHQUVsQixHQUFnQixVQURoQkEsRUFBVUEsRUFBUWx4RSxPQUFPa1QsZUFFckIsTUFBTyxDQUFDLEVBQUcsR0FFVixHQUFnQixRQUFaZytELEVBQ0wsTUFBTyxDQUFDLEVBQUcsR0FHZixJQUFJdHRFLEVBQU0sRUFDTmtFLEVBQUksRUFDSndwRSxFQUFPQyxJQUNQMW1DLEVBQVMybUMsSUFlYixHQWRJNXRFLEVBQU1zdEUsRUFBUWx6RSxRQUFrQyxNQUF4Qmt6RSxFQUFRdHhFLE9BQU9nRSxLQUN2Q0EsSUFDQWtFLEVBQUl3cEUsR0FBUXptQyxRQUF1Q0EsRUFBUyxHQUM1RDRtQyxJQUNJN3RFLEVBQU1zdEUsRUFBUWx6RSxRQUNkc3pFLEVBQU9DLElBQ1BFLElBQ0E1bUMsRUFBUzJtQyxLQUdURixFQUFPem1DLEVBQVMsR0FJVCxPQUFYQSxHQUFtQmpuQyxFQUFNc3RFLEVBQVFsekUsT0FDakMsTUFBTSxJQUFJeUYsTUFBTSxrQ0FBa0N5dEUsT0FFdEQsTUFBTyxDQUFDcHBFLEVBQUd3cEUsRUFBT3ptQyxHQUNsQixTQUFTMG1DLElBQ0wsTUFBNEIsTUFBeEJMLEVBQVF0eEUsT0FBT2dFLElBQ2ZBLEtBQ1EsSUFFZ0IsTUFBeEJzdEUsRUFBUXR4RSxPQUFPZ0UsSUFDZkEsSUFFRyxFQUNYLENBQ0EsU0FBUzR0RSxJQUNMLE1BQU0va0QsRUFBUTdvQixFQUNkLElBQUlwRCxFQUFRLEVBQ1osS0FBT29ELEVBQU1zdEUsRUFBUWx6RSxRQUNqQmt6RSxFQUFRcm9FLFdBQVdqRixJQUFRMG5ELElBQzNCNGxCLEVBQVFyb0UsV0FBV2pGLElBQVEybkQsSUFDM0IvcUQsRUFBZ0IsR0FBUkEsR0FBYzB3RSxFQUFRcm9FLFdBQVdqRixHQUFPMG5ELElBQ2hEMW5ELElBR0osT0FBT0EsSUFBUTZvQixFQUFRLEtBQU9qc0IsQ0FDbEMsQ0FDQSxTQUFTaXhFLElBQ0wsS0FBTzd0RSxFQUFNc3RFLEVBQVFsekUsUUFDakJnekUsR0FBV3QvQixJQUFJdy9CLEVBQVFyb0UsV0FBV2pGLEtBQ2xDQSxHQUVSLENBQ0osQ0M1Q21CLENBQU1zdEUsR0FDekIsQ0UxQkEsU0FBU1EsR0FBYS9uRCxFQUFNK2tCLEdBQ3hCLE9BQVE4c0IsSUFDSixNQUFNMEIsRUFBU3h1QixFQUFRc3ZCLFVBQVV4QyxHQUNqQyxPQUFpQixNQUFWMEIsR0FBa0J4dUIsRUFBUWlqQyxNQUFNelUsSUFBV3Z6QyxFQUFLNnhDLEVBQUssQ0FFcEUsQ0FDTyxNQUFNb1csR0FBVSxDQUNuQjlqRCxTQUFRLENBQUNuRSxFQUFNbG5CLEdBQU0sUUFBRWlzQyxLQUNaLFNBQWtCOHNCLEdBQ3JCLE9BQU83eEMsRUFBSzZ4QyxJQUFTOXNCLEVBQVFvdkIsUUFBUXRDLEdBQU01b0MsU0FBU253QixFQUN4RCxFQUVKLFNBQUFvdkUsQ0FBVWxvRCxFQUFNbG5CLEdBQU0sUUFBRWlzQyxJQUNwQixNQUFNb2pDLEVBQVFydkUsRUFBS3lRLGNBQ25CLE9BQU8sU0FBbUJzb0QsR0FDdEIsT0FBUTd4QyxFQUFLNnhDLElBQ1Q5c0IsRUFBUW92QixRQUFRdEMsR0FBTXRvRCxjQUFjMGYsU0FBU2svQyxFQUNyRCxDQUNKLEVBRUEsWUFBWW5vRCxFQUFNbHJCLEdBQU0sUUFBRWl3QyxFQUFPLE9BQUVnaUMsSUFDL0IsTUFBTW5yRCxFQUFPLEdBQVU5bUIsR0FDdkIsT0FBSThtQixJQUFTcXJELEdBQVNqMEUsVUFDWGkwRSxHQUFTajBFLFVBQ2hCNG9CLElBQVNxckQsR0FBU2wwRSxTQUNYZzFFLEdBQWEvbkQsRUFBTStrQixHQUN2QixTQUFrQjhzQixHQUNyQixNQUFNMEMsRUFBV3h2QixFQUFRdXZCLFlBQVl6QyxHQUNyQyxJQUFJeGdCLEVBQU0sRUFDVixJQUFLLElBQUlqOUMsRUFBSSxFQUFHQSxFQUFJbWdFLEVBQVNsZ0UsU0FDckIweUUsRUFBT2xWLEVBQU0wQyxFQUFTbmdFLElBRE9BLElBRzdCMndDLEVBQVFpakMsTUFBTXpULEVBQVNuZ0UsS0FDdkJpOUMsSUFHUixPQUFPejFCLEVBQUt5MUIsSUFBUXJ4QixFQUFLNnhDLEVBQzdCLENBQ0osRUFDQSxpQkFBaUI3eEMsRUFBTWxyQixHQUFNLFFBQUVpd0MsRUFBTyxPQUFFZ2lDLElBQ3BDLE1BQU1uckQsRUFBTyxHQUFVOW1CLEdBQ3ZCLE9BQUk4bUIsSUFBU3FyRCxHQUFTajBFLFVBQ1hpMEUsR0FBU2owRSxVQUNoQjRvQixJQUFTcXJELEdBQVNsMEUsU0FDWGcxRSxHQUFhL25ELEVBQU0ra0IsR0FDdkIsU0FBc0I4c0IsR0FDekIsTUFBTTBDLEVBQVd4dkIsRUFBUXV2QixZQUFZekMsR0FDckMsSUFBSXhnQixFQUFNLEVBQ1YsSUFBSyxJQUFJajlDLEVBQUltZ0UsRUFBU2xnRSxPQUFTLEVBQUdELEdBQUssSUFDL0IyeUUsRUFBT2xWLEVBQU0wQyxFQUFTbmdFLElBRFlBLElBR2xDMndDLEVBQVFpakMsTUFBTXpULEVBQVNuZ0UsS0FDdkJpOUMsSUFHUixPQUFPejFCLEVBQUt5MUIsSUFBUXJ4QixFQUFLNnhDLEVBQzdCLENBQ0osRUFDQSxjQUFjN3hDLEVBQU1sckIsR0FBTSxRQUFFaXdDLEVBQU8sT0FBRWdpQyxJQUNqQyxNQUFNbnJELEVBQU8sR0FBVTltQixHQUN2QixPQUFJOG1CLElBQVNxckQsR0FBU2owRSxVQUNYaTBFLEdBQVNqMEUsVUFDaEI0b0IsSUFBU3FyRCxHQUFTbDBFLFNBQ1hnMUUsR0FBYS9uRCxFQUFNK2tCLEdBQ3ZCLFNBQW1COHNCLEdBQ3RCLE1BQU0wQyxFQUFXeHZCLEVBQVF1dkIsWUFBWXpDLEdBQ3JDLElBQUl4Z0IsRUFBTSxFQUNWLElBQUssSUFBSWo5QyxFQUFJLEVBQUdBLEVBQUltZ0UsRUFBU2xnRSxPQUFRRCxJQUFLLENBQ3RDLE1BQU1nMEUsRUFBaUI3VCxFQUFTbmdFLEdBQ2hDLEdBQUkyeUUsRUFBT2xWLEVBQU11VyxHQUNiLE1BQ0FyakMsRUFBUWlqQyxNQUFNSSxJQUNkcmpDLEVBQVEydkIsUUFBUTBULEtBQW9CcmpDLEVBQVEydkIsUUFBUTdDLElBQ3BEeGdCLEdBRVIsQ0FDQSxPQUFPejFCLEVBQUt5MUIsSUFBUXJ4QixFQUFLNnhDLEVBQzdCLENBQ0osRUFDQSxtQkFBbUI3eEMsRUFBTWxyQixHQUFNLFFBQUVpd0MsRUFBTyxPQUFFZ2lDLElBQ3RDLE1BQU1uckQsRUFBTyxHQUFVOW1CLEdBQ3ZCLE9BQUk4bUIsSUFBU3FyRCxHQUFTajBFLFVBQ1hpMEUsR0FBU2owRSxVQUNoQjRvQixJQUFTcXJELEdBQVNsMEUsU0FDWGcxRSxHQUFhL25ELEVBQU0ra0IsR0FDdkIsU0FBdUI4c0IsR0FDMUIsTUFBTTBDLEVBQVd4dkIsRUFBUXV2QixZQUFZekMsR0FDckMsSUFBSXhnQixFQUFNLEVBQ1YsSUFBSyxJQUFJajlDLEVBQUltZ0UsRUFBU2xnRSxPQUFTLEVBQUdELEdBQUssRUFBR0EsSUFBSyxDQUMzQyxNQUFNZzBFLEVBQWlCN1QsRUFBU25nRSxHQUNoQyxHQUFJMnlFLEVBQU9sVixFQUFNdVcsR0FDYixNQUNBcmpDLEVBQVFpakMsTUFBTUksSUFDZHJqQyxFQUFRMnZCLFFBQVEwVCxLQUFvQnJqQyxFQUFRMnZCLFFBQVE3QyxJQUNwRHhnQixHQUVSLENBQ0EsT0FBT3oxQixFQUFLeTFCLElBQVFyeEIsRUFBSzZ4QyxFQUM3QixDQUNKLEVBRUFwckQsS0FBSSxDQUFDdVosRUFBTXFvRCxHQUFPLFFBQUV0akMsS0FDUjhzQixJQUNKLE1BQU0wQixFQUFTeHVCLEVBQVFzdkIsVUFBVXhDLEdBQ2pDLE9BQWtCLE1BQVYwQixJQUFtQnh1QixFQUFRaWpDLE1BQU16VSxLQUFZdnpDLEVBQUs2eEMsRUFBSyxFQUd2RSxLQUFBeVcsQ0FBTXRvRCxFQUFNbHJCLEVBQU1zUixFQUFTazJCLEdBQ3ZCLE1BQU0sT0FBRXlxQyxHQUFXM2dFLEVBQ25CLE9BQUtrMkIsR0FBOEIsSUFBbkJBLEVBQVFqb0MsT0FJRCxJQUFuQmlvQyxFQUFRam9DLE9BRUF3OUQsR0FBU2tWLEVBQU96cUMsRUFBUSxHQUFJdTFCLElBQVM3eEMsRUFBSzZ4QyxHQUU5Q0EsR0FBU3YxQixFQUFRclQsU0FBUzRvQyxJQUFTN3hDLEVBQUs2eEMsR0FOckNvVyxHQUFjLEtBQUVqb0QsRUFBTWxyQixFQUFNc1IsRUFPM0MsRUFDQW1pRSxNQUFPQyxHQUFtQixhQUMxQkMsUUFBU0QsR0FBbUIsYUFDNUJ0aUQsT0FBUXNpRCxHQUFtQixhQVEvQixTQUFTQSxHQUFtQmh5RSxHQUN4QixPQUFPLFNBQXVCd3BCLEVBQU1xb0QsR0FBTyxRQUFFdGpDLElBQ3pDLE1BQU1ucEIsRUFBT21wQixFQUFRdnVDLEdBQ3JCLE1BQW9CLG1CQUFUb2xCLEVBQ0FxckQsR0FBU2owRSxVQUViLFNBQWdCNitELEdBQ25CLE9BQU9qMkMsRUFBS2kyQyxJQUFTN3hDLEVBQUs2eEMsRUFDOUIsQ0FDSixDQUNKLENDNUlPLE1BQU02VyxHQUFVLENBQ25CQyxNQUFLLENBQUM5VyxHQUFNLFFBQUU5c0IsTUFDRkEsRUFBUXF2QixZQUFZdkMsR0FBTXYyRCxNQUFNdTJELEdBRXhDOXNCLEVBQVFpakMsTUFBTW5XLElBQW1DLEtBQTFCOXNCLEVBQVFvdkIsUUFBUXRDLEtBRTNDLGNBQWNBLEdBQU0sUUFBRTlzQixFQUFPLE9BQUVnaUMsSUFDM0IsR0FBSWhpQyxFQUFRNHZCLG1CQUNSLE9BQTJDLE1BQXBDNXZCLEVBQVE0dkIsbUJBQW1COUMsR0FFdEMsTUFBTStPLEVBQWE3N0IsRUFDZHV2QixZQUFZekMsR0FDWjRELE1BQU01RCxHQUFTOXNCLEVBQVFpakMsTUFBTW5XLEtBQ2xDLE9BQXFCLE1BQWQrTyxHQUFzQm1HLEVBQU9sVixFQUFNK08sRUFDOUMsRUFDQSxhQUFhL08sR0FBTSxRQUFFOXNCLEVBQU8sT0FBRWdpQyxJQUMxQixNQUFNeFMsRUFBV3h2QixFQUFRdXZCLFlBQVl6QyxHQUNyQyxJQUFLLElBQUl6OUQsRUFBSW1nRSxFQUFTbGdFLE9BQVMsRUFBR0QsR0FBSyxFQUFHQSxJQUFLLENBQzNDLEdBQUkyeUUsRUFBT2xWLEVBQU0wQyxFQUFTbmdFLElBQ3RCLE9BQU8sRUFDWCxHQUFJMndDLEVBQVFpakMsTUFBTXpULEVBQVNuZ0UsSUFDdkIsS0FDUixDQUNBLE9BQU8sQ0FDWCxFQUNBLGdCQUFnQnk5RCxHQUFNLFFBQUU5c0IsRUFBTyxPQUFFZ2lDLElBQzdCLE1BQU14UyxFQUFXeHZCLEVBQVF1dkIsWUFBWXpDLEdBQy9CK1csRUFBVzdqQyxFQUFRMnZCLFFBQVE3QyxHQUNqQyxJQUFLLElBQUl6OUQsRUFBSSxFQUFHQSxFQUFJbWdFLEVBQVNsZ0UsT0FBUUQsSUFBSyxDQUN0QyxNQUFNZzBFLEVBQWlCN1QsRUFBU25nRSxHQUNoQyxHQUFJMnlFLEVBQU9sVixFQUFNdVcsR0FDYixPQUFPLEVBQ1gsR0FBSXJqQyxFQUFRaWpDLE1BQU1JLElBQ2RyakMsRUFBUTJ2QixRQUFRMFQsS0FBb0JRLEVBQ3BDLEtBRVIsQ0FDQSxPQUFPLENBQ1gsRUFDQSxlQUFlL1csR0FBTSxRQUFFOXNCLEVBQU8sT0FBRWdpQyxJQUM1QixNQUFNeFMsRUFBV3h2QixFQUFRdXZCLFlBQVl6QyxHQUMvQitXLEVBQVc3akMsRUFBUTJ2QixRQUFRN0MsR0FDakMsSUFBSyxJQUFJejlELEVBQUltZ0UsRUFBU2xnRSxPQUFTLEVBQUdELEdBQUssRUFBR0EsSUFBSyxDQUMzQyxNQUFNZzBFLEVBQWlCN1QsRUFBU25nRSxHQUNoQyxHQUFJMnlFLEVBQU9sVixFQUFNdVcsR0FDYixPQUFPLEVBQ1gsR0FBSXJqQyxFQUFRaWpDLE1BQU1JLElBQ2RyakMsRUFBUTJ2QixRQUFRMFQsS0FBb0JRLEVBQ3BDLEtBRVIsQ0FDQSxPQUFPLENBQ1gsRUFDQSxlQUFlL1csR0FBTSxRQUFFOXNCLEVBQU8sT0FBRWdpQyxJQUM1QixNQUFNNkIsRUFBVzdqQyxFQUFRMnZCLFFBQVE3QyxHQUNqQyxPQUFPOXNCLEVBQ0Z1dkIsWUFBWXpDLEdBQ1orUCxPQUFPMU0sR0FBWTZSLEVBQU9sVixFQUFNcUQsS0FDaENud0IsRUFBUWlqQyxNQUFNOVMsSUFDZm53QixFQUFRMnZCLFFBQVFRLEtBQWEwVCxHQUNyQyxFQUNBLGFBQVksQ0FBQy9XLEdBQU0sUUFBRTlzQixFQUFPLE9BQUVnaUMsS0FDbkJoaUMsRUFDRnV2QixZQUFZekMsR0FDWitQLE9BQU8xTSxHQUFZNlIsRUFBT2xWLEVBQU1xRCxLQUFhbndCLEVBQVFpakMsTUFBTTlTLE1BR2pFLFNBQVMyVCxHQUFpQmp0RCxFQUFNcGxCLEVBQU1zeUUsRUFBV0MsR0FDcEQsR0FBa0IsT0FBZEQsR0FDQSxHQUFJbHRELEVBQUt2bkIsT0FBUzAwRSxFQUNkLE1BQU0sSUFBSWp2RSxNQUFNLGlCQUFpQnRELCtCQUdwQyxHQUFJb2xCLEVBQUt2bkIsU0FBVzAwRSxFQUNyQixNQUFNLElBQUlqdkUsTUFBTSxpQkFBaUJ0RCwrQkFFekMsQ0MxRU8sTUFBTXd5RSxHQUFVLENBRW5CLFdBQVksMkJBQ1psUSxLQUFNLDBCQUdObVEsU0FBVSwwTUFLVkMsUUFBUyxrQkFDVHB6QyxRQUFTLDhFQUNUcXpDLFNBQVUseUNBQ1ZDLFNBQVUsK0NBR1YvMUMsU0FBVSwrRkFDVmcyQyxTQUFVLGtCQUNWNW1FLEtBQU0sY0FDTmdzQyxTQUFVLGtCQUNWNjZCLE1BQU8sZUFDUGhpQixNQUFPLGVBQ1BpaUIsTUFBTyxlQUNQQyxPQUFRLGdCQUNSalcsT0FBUSxlQUNSeCtDLE9BQVEsOEJBQ1IwMEQsT0FBUSxrQ0FDUnAwRCxNQUFPLHVDQUNQdmMsS0FBTSwyQ0M3Qkc0d0UsR0FBc0IsQ0FBQyxFQUM3QixTQUFTQyxHQUFZM3BELEVBQU0ra0IsR0FDOUIsT0FBSS9rQixJQUFTaW5ELEdBQVNqMEUsVUFDWGkwRSxHQUFTajBFLFVBQ1o2K0QsR0FBUzlzQixFQUFRaWpDLE1BQU1uVyxJQUFTN3hDLEVBQUs2eEMsRUFDakQsQ0FDTyxTQUFTK1gsR0FBZ0IvWCxFQUFNOXNCLEdBQ2xDLE1BQU13dkIsRUFBV3h2QixFQUFRdXZCLFlBQVl6QyxHQUNyQyxHQUFJMEMsRUFBU2xnRSxRQUFVLEVBQ25CLE1BQU8sR0FDWCxNQUFNdzFFLEVBQVl0VixFQUFTcitELFFBQVEyN0QsR0FDbkMsT0FBSWdZLEVBQVksR0FBS0EsSUFBY3RWLEVBQVNsZ0UsT0FBUyxFQUMxQyxHQUNKa2dFLEVBQVNuK0QsTUFBTXl6RSxFQUFZLEdBQUc1Z0UsT0FBTzg3QixFQUFRaWpDLE1BQ3hELENBQ0EsU0FBUzhCLEdBQVkxakUsR0FFakIsTUFBTyxDQUNIcWdELFVBQVdyZ0QsRUFBUXFnRCxRQUNuQjZJLDBCQUEyQmxwRCxFQUFRa3BELHdCQUNuQ0QsZ0JBQWlCanBELEVBQVFpcEQsY0FDekJ3WCxhQUFjemdFLEVBQVF5Z0UsV0FDdEJrRCxlQUFnQjNqRSxFQUFRMmpFLGFBQ3hCckIsUUFBU3RpRSxFQUFRc2lFLFFBQ2pCM2pDLFFBQVMzK0IsRUFBUTIrQixRQUNqQmdpQyxPQUFRM2dFLEVBQVEyZ0UsT0FFeEIsQ0FDQSxNQUFNekwsR0FBSyxDQUFDdDdDLEVBQU1obUIsRUFBT29NLEVBQVNrMkIsRUFBUzB0QyxLQUN2QyxNQUFNcHVELEVBQU9vdUQsRUFBYWh3RSxFQUFPOHZFLEdBQVkxakUsR0FBVWsyQixHQUN2RCxPQUFPMWdCLElBQVNxckQsR0FBU2wwRSxTQUNuQml0QixFQUNBcEUsSUFBU3FyRCxHQUFTajBFLFVBQ2RpMEUsR0FBU2owRSxVQUNSNitELEdBQVNqMkMsRUFBS2kyQyxJQUFTN3hDLEVBQUs2eEMsRUFBSyxFQU9uQ3FTLEdBQWEsQ0FDdEI1SSxNQUlBbCtDLFFBQVNrK0MsR0FDVGpDLE1BQU9pQyxHQUNQLEdBQUE4TCxDQUFJcG5ELEVBQU1obUIsRUFBT29NLEVBQVNrMkIsRUFBUzB0QyxHQUMvQixNQUFNcHVELEVBQU9vdUQsRUFBYWh3RSxFQUFPOHZFLEdBQVkxakUsR0FBVWsyQixHQUN2RCxPQUFPMWdCLElBQVNxckQsR0FBU2owRSxVQUNuQmd0QixFQUNBcEUsSUFBU3FyRCxHQUFTbDBFLFNBQ2RrMEUsR0FBU2owRSxVQUNSNitELElBQVVqMkMsRUFBS2kyQyxJQUFTN3hDLEVBQUs2eEMsRUFDNUMsRUFDQSxHQUFBOXBCLENBQUkvbkIsRUFBTThvRCxFQUFXMWlFLEVBQVM2akUsRUFBVUQsR0FDcEMsTUFBTSxRQUFFamxDLEdBQVkzK0IsRUFDZDh1QyxFQUFPNDBCLEdBQVkxakUsR0FDekI4dUMsRUFBS2cxQixrQkFBbUIsRUFDeEIsTUFBTTV0QyxFQUFVd3NDLEVBQVV4dEUsTUFBTTRDLEdBQU1BLEVBQUU1QyxLQUFLLE1BRXJDLENBQUNvdUUsU0FDSG5oRCxFQUNBNGhELEVBQVdILEVBQWFsQixFQUFXNXpCLEVBQU01WSxHQUMvQyxHQUFJNnRDLElBQWFsRCxHQUFTajBFLFVBQ3RCLE9BQU9pMEUsR0FBU2owRSxVQUNwQixNQUFNbzNFLEVBQWFULEdBQVlRLEVBQVVwbEMsR0FFekMsR0FBSXpJLEdBQVc2dEMsSUFBYWxELEdBQVNsMEUsU0FBVSxDQUszQyxNQUFNLHVCQUFFczNFLEdBQXlCLEdBQVVGLEVBQzNDLE9BQVF0WSxJQUNKLElBQUs3eEMsRUFBSzZ4QyxHQUNOLE9BQU8sRUFDWHYxQixFQUFRLEdBQUt1MUIsRUFDYixNQUFNZ0QsRUFBUzl2QixFQUFRcXZCLFlBQVl2QyxHQUM3QnlZLEVBQWVELEVBQ2YsSUFBSXhWLEtBQVcrVSxHQUFnQi9YLEVBQU05c0IsSUFDckM4dkIsRUFDTixPQUFPOXZCLEVBQVFpeEIsVUFBVW9VLEVBQVlFLEVBQWEsQ0FFMUQsQ0FDQSxPQUFRelksR0FBUzd4QyxFQUFLNnhDLElBQ2xCOXNCLEVBQVFpeEIsVUFBVW9VLEVBQVlybEMsRUFBUXF2QixZQUFZdkMsR0FDMUQsR0N4RkosU0FBUzBZLEdBQWlCM1ksRUFBTTdzQixHQUM1QixNQUFNd3VCLEVBQVN4dUIsRUFBUXN2QixVQUFVekMsR0FDakMsT0FBSTJCLEdBQVV4dUIsRUFBUWlqQyxNQUFNelUsR0FDakJBLEVBRUosSUFDWCxDQ0dPLFNBQVMsR0FBUXhpQyxFQUFVM3FCLEVBQVNrMkIsR0FFdkMsT0FBT3F0QyxHQURNYSxHQUFjejVDLEVBQVUzcUIsRUFBU2syQixHQUNyQmwyQixFQUFRMitCLFFBQ3JDLENBQ08sU0FBU3lsQyxHQUFjejVDLEVBQVUzcUIsRUFBU2syQixHQUU3QyxPQUFPMHRDLEdBRDJCLGlCQUFiajVDLEVBQXdCLEdBQU1BLEdBQVlBLEVBQ3BDM3FCLEVBQVNrMkIsRUFDeEMsQ0FDQSxTQUFTbXVDLEdBQW9COXJFLEdBQ3pCLE9BQVFBLEVBQUU1SyxPQUFTZ3ZFLEdBQWFrRCxTQUNoQixVQUFYdG5FLEVBQUVuSSxNQUNFOEIsTUFBTXl2QixRQUFRcHBCLEVBQUVvRCxPQUNicEQsRUFBRW9ELEtBQUt6RyxNQUFNeUcsR0FBU0EsRUFBS3pHLEtBQUttdkUsTUFDaEQsQ0FDQSxNQUFNQyxHQUFtQixDQUFFMzJFLEtBQU1ndkUsR0FBYThCLFlBQ3hDOEYsR0FBNEIsQ0FDOUI1MkUsS0FBTSx1QkFFSjYyRSxHQUFjLENBQ2hCNzJFLEtBQU1ndkUsR0FBYWtELE9BQ25CenZFLEtBQU0sUUFDTnVMLEtBQU0sTUEyQkgsU0FBU2lvRSxHQUFhaHdFLEVBQU9vTSxFQUFTazJCLEdBQ3pDLElBQUkya0IsRUFDSmpuRCxFQUFNbU0sUUFBUSxJQUNkbTJCLEVBQXFDLFFBQTFCMmtCLEVBQUs3NkMsRUFBUWsyQixlQUE0QixJQUFQMmtCLEVBQWdCQSxFQUFLM2tCLEVBQ2xFLE1BQU11dUMsRUFBaUJ2eUUsTUFBTXl2QixRQUFRdVUsR0FDL0J3dUMsRUFBZXh1QyxJQUFZaGtDLE1BQU15dkIsUUFBUXVVLEdBQVdBLEVBQVUsQ0FBQ0EsSUFFckUsSUFBaUMsSUFBN0JsMkIsRUFBUThqRSxrQkE1QmhCLFNBQW9CbHdFLEdBQU8sUUFBRStxQyxHQUFXekksR0FFcEMsTUFBTXl1QyxLQUFnQnp1QyxhQUF5QyxFQUFTQSxFQUFRc2xDLE9BQU9ubEUsSUFDbkYsTUFBTTgyRCxFQUFTeHVCLEVBQVFpakMsTUFBTXZyRSxJQUFNc29DLEVBQVFzdkIsVUFBVTUzRCxHQUNyRCxPQUFPQSxJQUFNaXRFLElBQXdCblcsR0FBVXh1QixFQUFRaWpDLE1BQU16VSxFQUFRLEtBRXpFLElBQUssTUFBTTUwRCxLQUFLM0UsRUFBTyxDQUNuQixHQUFJMkUsRUFBRXRLLE9BQVMsR0FDWCxHQUFZc0ssRUFBRSxLQUNkQSxFQUFFLEdBQUc1SyxPQUFTZ3ZFLEdBQWE4QixnQkFHMUIsS0FBSWtHLEdBQWVwc0UsRUFBRXJELEtBQUttdkUsSUFJM0IsU0FIQTlyRSxFQUFFODNDLFFBQVFpMEIsR0FJZCxDQUNBL3JFLEVBQUU4M0MsUUFBUW0wQixHQUNkLENBQ0osQ0FTUUksQ0FBV2h4RSxFQUFPb00sRUFBUzBrRSxRQUUxQixHQUFJOXdFLEVBQU1zQixNQUFNcUQsR0FBTUEsRUFBRXRLLE9BQVMsR0FBSyxHQUFZc0ssRUFBRSxNQUNyRCxNQUFNLElBQUk3RSxNQUFNLHFGQUVwQixJQUFJdXdFLEdBQXlCLEVBQzdCLE1BQU1wa0QsRUFBUWpzQixFQUNUb3VCLEtBQUsxdUIsSUFDTixHQUFJQSxFQUFNckYsUUFBVSxFQUFHLENBQ25CLE1BQU9tMEMsRUFBT3lpQyxHQUFVdnhFLEVBQ3BCOHVDLEVBQU16MEMsT0FBU2d2RSxHQUFha0QsUUFDYixVQUFmejlCLEVBQU1oeUMsT0FHRHEwRSxHQUNMSSxFQUFPbDNFLE9BQVNndkUsR0FBYThCLFdBQzdCbnJFLEVBQU0sR0FBS2l4RSxHQUVOTSxFQUFPbDNFLE9BQVNndkUsR0FBYTRCLFVBQ2xDc0csRUFBT2wzRSxPQUFTZ3ZFLEdBQWFnQyxVQUM3QnNGLEdBQXlCLEdBRWpDLENBQ0EsT0FNUixTQUFzQjN3RSxFQUFPME0sRUFBU2syQixHQUNsQyxJQUFJMmtCLEVBQ0osT0FBT3ZuRCxFQUFNZzlELFFBQU8sQ0FBQ2p4RCxFQUFVM1EsSUFBUzJRLElBQWF3aEUsR0FBU2owRSxVQUN4RGkwRSxHQUFTajBFLFVEdkZaLFNBQWdDZ3RCLEVBQU0rUSxFQUFVM3FCLEVBQVNrMkIsRUFBUzB0QyxHQUNyRSxNQUFNLFFBQUVqbEMsRUFBTyxPQUFFZ2lDLEdBQVczZ0UsRUFDNUIsT0FBUTJxQixFQUFTaDlCLE1BQ2IsS0FBS2d2RSxHQUFhZ0QsY0FDZCxNQUFNLElBQUlqc0UsTUFBTSxtREFFcEIsS0FBS2lwRSxHQUFhaUMsaUJBQ2QsTUFBTSxJQUFJbHJFLE1BQU0sMERBRXBCLEtBQUtpcEUsR0FBYXhlLFVBQ2QsR0FBMEIsTUFBdEJ4ekIsRUFBU3EwQyxVQUNULE1BQU0sSUFBSXRyRSxNQUFNLDZEQUtwQixPQUhLc00sRUFBUXFnRCxVQUFXcmdELEVBQVFrcEQsMEJBQzVCditCLEVBQVN2NkIsS0FBT3U2QixFQUFTdjZCLEtBQUsrUyxlQUUzQnU5RCxHQUFlLzFDLEVBQVMvSixRQUFRaEgsRUFBTStRLEVBQVUzcUIsR0FFM0QsS0FBSzI4RCxHQUFha0QsT0FDZCxPRTFCTCxTQUErQmptRCxFQUFNK1EsRUFBVTNxQixFQUFTazJCLEVBQVMwdEMsR0FDcEUsSUFBSS9vQixFQUNKLE1BQU0sS0FBRXpxRCxFQUFJLEtBQUV1TCxHQUFTZ3ZCLEVBQ3ZCLEdBQUl6NEIsTUFBTXl2QixRQUFRaG1CLEdBQU8sQ0FDckIsS0FBTXZMLEtBQVEwdEUsSUFDVixNQUFNLElBQUlwcUUsTUFBTSx5QkFBeUJ0RCxLQUFRdUwsTUFFckQsT0FBT21pRSxHQUFXMXRFLEdBQU13cEIsRUFBTWplLEVBQU1xRSxFQUFTazJCLEVBQVMwdEMsRUFDMUQsQ0FDQSxNQUFNa0IsRUFBd0MsUUFBMUJqcUIsRUFBSzc2QyxFQUFRc2lFLGVBQTRCLElBQVB6bkIsT0FBZ0IsRUFBU0EsRUFBR3pxRCxHQUM1RTIwRSxFQUFxQyxpQkFBZkQsRUFBMEJBLEVBQWFsQyxHQUFReHlFLEdBQzNFLEdBQTRCLGlCQUFqQjIwRSxFQUEyQixDQUNsQyxHQUFZLE1BQVJwcEUsRUFDQSxNQUFNLElBQUlqSSxNQUFNLFVBQVV0RCxnQ0FHOUIsTUFBTTQwRSxFQUFRLEdBQU1ELEdBQ3BCLE9BQU9qSCxHQUFlLEdBQUVsa0QsRUFBTW9yRCxFQUFPaGxFLEVBQVNrMkIsRUFBUzB0QyxFQUMzRCxDQUNBLEdBQTBCLG1CQUFma0IsRUFFUCxPQURBckMsR0FBaUJxQyxFQUFZMTBFLEVBQU11TCxFQUFNLEdBQ2pDOHZELEdBQVNxWixFQUFXclosRUFBTTl2RCxJQUFTaWUsRUFBSzZ4QyxHQUVwRCxHQUFJcjdELEtBQVF5eEUsR0FDUixPQUFPQSxHQUFRenhFLEdBQU13cEIsRUFBTWplLEVBQU1xRSxFQUFTazJCLEdBRTlDLEdBQUk5bEMsS0FBUWt5RSxHQUFTLENBQ2pCLE1BQU0yQyxFQUFTM0MsR0FBUWx5RSxHQUV2QixPQURBcXlFLEdBQWlCd0MsRUFBUTcwRSxFQUFNdUwsRUFBTSxHQUM3Qjh2RCxHQUFTd1osRUFBT3haLEVBQU16ckQsRUFBU3JFLElBQVNpZSxFQUFLNnhDLEVBQ3pELENBQ0EsTUFBTSxJQUFJLzNELE1BQU0seUJBQXlCdEQsSUFDN0MsQ0ZObUI4MEUsQ0FBc0J0ckQsRUFBTStRLEVBQVUzcUIsRUFBU2syQixFQUFTMHRDLEdBR25FLEtBQUtqSCxHQUFhdFIsSUFBSyxDQUNuQixHQUEwQixNQUF0QjFnQyxFQUFTcTBDLFVBQ1QsTUFBTSxJQUFJdHJFLE1BQU0sNERBRXBCLElBQUksS0FBRXRELEdBQVN1NkIsRUFJZixPQUhLM3FCLEVBQVFxZ0QsVUFBV3JnRCxFQUFRaXBELGdCQUM1Qjc0RCxFQUFPQSxFQUFLK1MsZUFFVCxTQUFhc29ELEdBQ2hCLE9BQU85c0IsRUFBUTJ2QixRQUFRN0MsS0FBVXI3RCxHQUFRd3BCLEVBQUs2eEMsRUFDbEQsQ0FDSixDQUVBLEtBQUtrUixHQUFhOEIsV0FBWSxDQUMxQixJQUE2QixJQUF6QnorRCxFQUFRMmpFLGNBQ1csb0JBQVp3QixRQUNQLE9BQU8sU0FBb0IxWixHQUN2QixJQUFJMU4sRUFBVTBOLEVBQ2QsS0FBUTFOLEVBQVVvbUIsR0FBaUJwbUIsRUFBU3BmLElBQ3hDLEdBQUkva0IsRUFBS21rQyxHQUNMLE9BQU8sRUFHZixPQUFPLENBQ1gsRUFHSixNQUFNcW5CLEVBQWUsSUFBSUQsUUFDekIsT0FBTyxTQUEwQjFaLEdBQzdCLElBQUkxTixFQUFVME4sRUFDZCxLQUFRMU4sRUFBVW9tQixHQUFpQnBtQixFQUFTcGYsSUFDeEMsSUFBS3ltQyxFQUFhempDLElBQUlvYyxHQUFVLENBQzVCLEdBQUlwZixFQUFRaWpDLE1BQU03akIsSUFBWW5rQyxFQUFLbWtDLEdBQy9CLE9BQU8sRUFFWHFuQixFQUFhN2xELElBQUl3K0IsRUFDckIsQ0FFSixPQUFPLENBQ1gsQ0FDSixDQUNBLElBQUssc0JBRUQsT0FBTyxTQUE0QjBOLEdBQy9CLElBQUkxTixFQUFVME4sRUFDZCxHQUNJLEdBQUk3eEMsRUFBS21rQyxHQUNMLE9BQU8sUUFDTEEsRUFBVW9tQixHQUFpQnBtQixFQUFTcGYsSUFDOUMsT0FBTyxDQUNYLEVBRUosS0FBS2crQixHQUFhK0IsT0FDZCxPQUFPLFNBQWdCalQsR0FDbkIsT0FBTzlzQixFQUNGcXZCLFlBQVl2QyxHQUNadjJELE1BQU11MkQsR0FBUzlzQixFQUFRaWpDLE1BQU1uVyxJQUFTN3hDLEVBQUs2eEMsSUFDcEQsRUFFSixLQUFLa1IsR0FBYTZCLE1BQ2QsT0FBTyxTQUFlL1MsR0FDbEIsTUFBTTBCLEVBQVN4dUIsRUFBUXN2QixVQUFVeEMsR0FDakMsT0FBaUIsTUFBVjBCLEdBQWtCeHVCLEVBQVFpakMsTUFBTXpVLElBQVd2ekMsRUFBS3V6QyxFQUMzRCxFQUVKLEtBQUt3UCxHQUFhZ0MsUUFDZCxPQUFPLFNBQWlCbFQsR0FDcEIsTUFBTTBDLEVBQVd4dkIsRUFBUXV2QixZQUFZekMsR0FDckMsSUFBSyxJQUFJejlELEVBQUksRUFBR0EsRUFBSW1nRSxFQUFTbGdFLE9BQVFELElBQUssQ0FDdEMsTUFBTWcwRSxFQUFpQjdULEVBQVNuZ0UsR0FDaEMsR0FBSTJ5RSxFQUFPbFYsRUFBTXVXLEdBQ2IsTUFDSixHQUFJcmpDLEVBQVFpakMsTUFBTUksSUFBbUJwb0QsRUFBS29vRCxHQUN0QyxPQUFPLENBRWYsQ0FDQSxPQUFPLENBQ1gsRUFFSixLQUFLckYsR0FBYTRCLFNBQ2QsT0FBSTUvQixFQUFRNHZCLG1CQUNELFNBQWtCOUMsR0FDckIsTUFBTXBzRCxFQUFXcy9CLEVBQVE0dkIsbUJBQW1COUMsR0FDNUMsT0FBbUIsTUFBWnBzRCxHQUFvQnVhLEVBQUt2YSxFQUNwQyxFQUVHLFNBQWtCb3NELEdBQ3JCLE1BQU0wQyxFQUFXeHZCLEVBQVF1dkIsWUFBWXpDLEdBQ3JDLElBQUk0WixFQUNKLElBQUssSUFBSXIzRSxFQUFJLEVBQUdBLEVBQUltZ0UsRUFBU2xnRSxPQUFRRCxJQUFLLENBQ3RDLE1BQU1nMEUsRUFBaUI3VCxFQUFTbmdFLEdBQ2hDLEdBQUkyeUUsRUFBT2xWLEVBQU11VyxHQUNiLE1BQ0FyakMsRUFBUWlqQyxNQUFNSSxLQUNkcUQsRUFBY3JELEVBRXRCLENBQ0EsUUFBU3FELEdBQWV6ckQsRUFBS3lyRCxFQUNqQyxFQUVKLEtBQUsxSSxHQUFhbUQsVUFDZCxHQUEwQixNQUF0Qm4xQyxFQUFTcTBDLFdBQTRDLE1BQXZCcjBDLEVBQVNxMEMsVUFDdkMsTUFBTSxJQUFJdHJFLE1BQU0sc0VBRXBCLE9BQU9rbUIsRUFHbkIsQ0N6Q1UwckQsQ0FBdUJqbUUsRUFBVTNRLEVBQU1zUixFQUFTazJCLEVBQVMwdEMsS0FBMkMsUUFBM0Ivb0IsRUFBSzc2QyxFQUFRdWxFLGdCQUE2QixJQUFQMXFCLEVBQWdCQSxFQUFLZ21CLEdBQVNsMEUsU0FDcEosQ0FYZTY0RSxDQUFhbHlFLEVBQU8wTSxFQUFTMGtFLEVBQWEsSUFFaERwVSxPQUFPbVYsR0FBYTVFLEdBQVNqMEUsV0FFbEMsT0FEQWl6QixFQUFNb2tELHVCQUF5QkEsRUFDeEJwa0QsQ0FDWCxDQU9BLFNBQVM0bEQsR0FBWTF0RSxFQUFHNkUsR0FDcEIsT0FBSUEsSUFBTWlrRSxHQUFTajBFLFdBQWFtTCxJQUFNOG9FLEdBQVNsMEUsU0FDcENvTCxFQUVQQSxJQUFNOG9FLEdBQVNqMEUsV0FBYWdRLElBQU1pa0UsR0FBU2wwRSxTQUNwQ2lRLEVBRUosU0FBaUI2dUQsR0FDcEIsT0FBTzF6RCxFQUFFMHpELElBQVM3dUQsRUFBRTZ1RCxFQUN4QixDQUNKLENFN0dBLE1BQU1pYSxHQUFnQixDQUFDM3RFLEVBQUc2RSxJQUFNN0UsSUFBTTZFLEVBQ2hDK29FLEdBQWlCLENBQ25CaG5DLFFBQVMsRUFDVGdpQyxPQUFRK0UsSUFFWixTQUFTRSxHQUFxQjVsRSxHQUMxQixJQUFJNjZDLEVBQUlxTixFQUFJQyxFQUFJQyxFQUtoQixNQUFNdFosRUFBTzl1QyxRQUF5Q0EsRUFBVTJsRSxHQUtoRSxPQUh3QixRQUF2QjlxQixFQUFLL0wsRUFBS25RLGVBQTRCLElBQVBrYyxJQUFzQi9MLEVBQUtuUSxRQUFVLEdBRTlDLFFBQXRCdXBCLEVBQUtwWixFQUFLNnhCLGNBQTJCLElBQVB6WSxJQUFzQnBaLEVBQUs2eEIsT0FBdUYsUUFBN0V2WSxFQUE2QixRQUF2QkQsRUFBS3JaLEVBQUtuUSxlQUE0QixJQUFQd3BCLE9BQWdCLEVBQVNBLEVBQUd3WSxjQUEyQixJQUFQdlksRUFBZ0JBLEVBQUtzZCxJQUN2SzUyQixDQUNYLENBQ0EsU0FBUysyQixHQUFZcndELEdBQ2pCLE9BQU8sU0FBb0JtVixFQUFVM3FCLEVBQVNrMkIsR0FDMUMsTUFBTTRZLEVBQU84MkIsR0FBcUI1bEUsR0FDbEMsT0FBT3dWLEVBQUttVixFQUFVbWtCLEVBQU01WSxFQUNoQyxDQUNKLENBSU8sTUFBTSxHQUFVMnZDLEdBQVksSUFHbkMsU0FBU0MsR0FBZ0JDLEdBQ3JCLE9BQU8sU0FBZ0JsbUQsRUFBT21tRCxFQUFVaG1FLEdBQ3BDLE1BQU04dUMsRUFBTzgyQixHQUFxQjVsRSxHQUNiLG1CQUFWNmYsSUFDUEEsRUFBUXVrRCxHQUFjdmtELEVBQU9pdkIsRUFBTWszQixJQUV2QyxNQUFNQyxFQUlQLFNBQXdCdHJELEVBQU9na0IsRUFBU3NsQyxHQUF5QixHQVFwRSxPQUhJQSxJQUNBdHBELEVBTVIsU0FBNEI4d0MsRUFBTTlzQixHQUU5QixNQUFNaGtCLEVBQVF6b0IsTUFBTXl2QixRQUFROHBDLEdBQVFBLEVBQUt6N0QsTUFBTSxHQUFLLENBQUN5N0QsR0FDL0N5YSxFQUFjdnJELEVBQU0xc0IsT0FDMUIsSUFBSyxJQUFJRCxFQUFJLEVBQUdBLEVBQUlrNEUsRUFBYWw0RSxJQUFLLENBQ2xDLE1BQU1tNEUsRUFBZTNDLEdBQWdCN29ELEVBQU0zc0IsR0FBSTJ3QyxHQUMvQ2hrQixFQUFNenNCLFFBQVFpNEUsRUFDbEIsQ0FDQSxPQUFPeHJELENBQ1gsQ0FmZ0J5ckQsQ0FBbUJ6ckQsRUFBT2drQixJQUUvQnpzQyxNQUFNeXZCLFFBQVFoSCxHQUNmZ2tCLEVBQVFreUIsY0FBY2wyQyxHQUN0QmdrQixFQUFRcXZCLFlBQVlyekMsRUFDOUIsQ0FmaUMwckQsQ0FBZUwsRUFBVWwzQixFQUFLblEsUUFBUzllLEVBQU1va0Qsd0JBQ3RFLE9BQU84QixFQUFXbG1ELEVBQU9vbUQsRUFBa0JuM0IsRUFDL0MsQ0FDSixDQVg4QisyQixHQUFZekIsSUFDYnlCLEdBQVlqQyxJQTJDaEJrQyxJQUFnQixDQUFDam1ELEVBQU9sRixFQUFPM2EsSUFBWTZmLElBQVVnaEQsR0FBU2owRSxXQUFjK3RCLEdBQTBCLElBQWpCQSxFQUFNMXNCLE9BRTlHK1IsRUFBUTIrQixRQUFRa3hCLFFBQVFod0MsRUFBT2xGLEdBRC9CLEtBV21CbXJELElBQWdCLENBQUNqbUQsRUFBT2xGLEVBQU8zYSxJQUFZNmYsSUFBVWdoRCxHQUFTajBFLFdBQWMrdEIsR0FBMEIsSUFBakJBLEVBQU0xc0IsT0FFOUcrUixFQUFRMitCLFFBQVE4d0IsUUFBUTV2QyxFQUFPbEYsR0FEL0IsT0FxQk4sTUN6R00sUUFBQ2dILElBQVd6dkIsTUFHWixHQUFRLEVBQUVzaEUsY3BDSlksSW9DSUVBLEVBRXhCLEdBQVksQ0FBQ3ArRCxFQUFNNHdFLElBQWFBLEVBQVM5d0UsTUFDN0MwM0IsR0FBVyxHQUFNQSxLQUNmeDNCLEVBQUt3M0IsSUFDTCxHQUFVeDNCLEVBQU0sR0FBWXczQixPQU8xQixHQUFjLEVBQUUydEMsZ0JBQWdCQSxFQWNoQyxHQUFVL08sR0FDVjdwQyxHQUFRNnBDLEdBQ0hBLEVBQUt4cEMsSUFBSSxJQUFTNXpCLEtBQUssSUFDNUIsR0FBTW85RCxHQUNELEdBQVEsR0FBWUEsSXBDaENOLElvQ2lDbkJBLEVBQUtnSSxTQUNBaEksRUFBSzd2RCxLQUNQLEdBdUJILEdBQVUsQ0FBQ3ZHLEVBQU00M0QsS0FDckIsTUFBTWgyQyxFQUFVLEdBQ2hCLElBQUssTUFBTXcwQyxLQUFRd0IsRUFDYixHQUFNeEIsS0FDSnAyRCxFQUFLbzJELElBQ1B4MEMsRUFBUTlvQixLQUFLczlELEdBQ2Z4MEMsRUFBUTlvQixRQUFRLEdBQVFrSCxFQUFNLEdBQVlvMkQsTUFHOUMsT0FBT3gwQyxDQUFPLEVBR1YsR0FBVSxDQUFDNWhCLEVBQU00M0QsS0FDckIsSUFBSyxJQUFJeEIsS0FBUXdCLEVBQ2YsR0FBSTUzRCxFQUFLbzJELEtBQVVBLEVBQU8sR0FBUXAyRCxFQUFNLEdBQVlvMkQsS0FDbEQsT0FBT0EsRUFDWCxPQUFPLElBQUksRUFJUDdzQixHQUFVLENBQ2RpakMsTUFBSyxHQUNMaFMsVUFBUyxHQUNUeEIsa0JBdEV3QixDQUFDeGhDLEVBQVN4OEIsSUFBa0IsVUFBVEEsRUFDakJ3OEIsRUFBUTA1QyxVQUFVNzFFLE1BQVFtOEIsRUFBUW5CLGFBQWFyN0IsR0FzRXpFNDlELFlBQVcsR0FDWE0sUUFuRWUxaEMsSUFDZixNQUFNLFVBQUNpbkMsR0FBYWpuQyxFQUNwQixPQUFPNm1DLEdBQVc3bUMsR0FBV2luQyxFQUFVMXdELGNBQWdCMHdELENBQVMsRUFrRWhFNUYsVUEvRGdCLEVBQUU5aEQsZ0JBQWdCQSxFQWdFbEMraEQsWUE5RGtCdGhDLElBQ2xCLE1BQU0sV0FBQ3pnQixHQUFjeWdCLEVBQ3JCLE9BQU96Z0IsRUFBYSxHQUFZQSxHQUFjeWdCLENBQU8sRUE2RHJEbWhDLFFBQU8sR0FDUE0sVUFqRGdCLENBQUN6aEMsRUFBU3g4QixJQUFTdzhCLEVBQVFDLGFBQWF6OEIsR0FrRHhEeWdFLGNBaERvQjdELElBQ3BCLElBQUksT0FBQy8rRCxHQUFVKytELEVBQ2YsS0FBTy8rRCxLQUFVLENBQ2YsTUFBTXU5RCxFQUFPd0IsRUFBTS8rRCxHQUNuQixHQUFJQSxJQUFXLEVBQUkrK0QsRUFBTXBxRCxZQUFZNG9ELEVBQU12OUQsRUFBUyxHQUNsRCsrRCxFQUFNaitELE9BQU9kLEVBQVEsUUFHdkIsSUFBSyxJQUFJLFdBQUNrZSxHQUFjcS9DLEVBQU1yL0MsRUFBWUEsRUFBYUEsRUFBV0EsV0FDaEUsR0FBSTZnRCxFQUFNbnFDLFNBQVMxVyxHQUFhLENBQzlCNmdELEVBQU1qK0QsT0FBT2QsRUFBUSxHQUNyQixLQUNGLENBRUosQ0FDQSxPQUFPKytELENBQUssRUFrQ1o2QyxRQUFPLEdBQ1BKLFFBQU8sSUFHSThXLEdBQWUsQ0FBQzM1QyxFQUFTNDVDLElBQWMsR0FDbERBLEVBQ0EsQ0FDRXR3QyxRQUFTc3dDLEVBQVUzakQsU0FBUyxVQUFZK0osT0FBVSxFQUNsRHl6QixTQUFVb1QsR0FBVzdtQyxHQUNyQitSLGFDL0ZHLE1BQU0sV0FBYTA5QixHQUN4QixXQUFBaHZFLENBQVlxbUUsRUFBZS8zRCxFQUFPLElBQ2hDdytELE1BQU16RyxFQUFlLFFyQ0xBLEVxQ0tvQi8zRCxFQUMzQyxDQUVBLGFBQUk4cUUsR0FDRixNQUFNL3pFLEVBQU8sR0FDYixJQUFJLGdCQUFDcWtFLEVBQWUsWUFBRUMsR0FBZS9wRSxLQUNyQyxLQUFPOHBFLEdyQ1hjLElxQ1lmQSxFQUFnQnZELFVBQ2xCOWdFLEVBQUsyOUMsUUFBUTBtQixFQUFnQm5jLElBRy9CbWMsRUFBa0JBLEVBQWdCQSxnQkFHcEMsSUFEQXJrRSxFQUFLeEUsS0FBS2pCLEtBQUsydEQsSUFDUm9jLEdyQ25CYyxJcUNvQmZBLEVBQVl4RCxVQUNkOWdFLEVBQUt4RSxLQUFLOG9FLEVBQVlwYyxJQUd4Qm9jLEVBQWNBLEVBQVlBLFlBRTVCLE9BQU90a0UsRUFBS3RFLEtBQUssR0FDbkIsQ0FFQSxTQUFBdXNFLEdBQ0UsTUFBTSxjQUFDakgsRUFBZSxDQUFDOVksR0FBUWovQyxHQUFRMU8sS0FDdkMsT0FBTyxJQUFJLEdBQUt5bUUsRUFBZS8zRCxFQUNqQyxDQUVBLFFBQUF2SSxHQUFhLE9BQU8sR0FBT25HLEtBQUsydEQsR0FBUyxFQ1ozQyxNQUFNMzVDLEdBQVN1cUQsR0FBUUEsYUFBZ0IsR0FFakNqM0MsR0FBUyxDQUFDcEksRUFBWTBpRCxFQUFPN0IsS0FDakMsTUFBTSxjQUFDMEcsR0FBaUJ2bkQsRUFDeEIsSUFBSyxNQUFNcS9DLEtBQVF3QixFQUNqQjdnRCxFQUFXeXVELGFBQ1QzNUQsR0FBT3VxRCxHQUFRQSxFQUFPLElBQUksR0FBS2tJLEVBQWVsSSxHQUM5Q3FELEVBQ0QsRUFZRSxNQUFNNlgsV0FBbUIsR0FDOUIsV0FBQXI1RSxDQUFZcW1FLEVBQWVHLEVBQVdMLEdBQ3BDMkcsTUFBTXpHLEVBQWVHLEVBQVdMLEdBQ2hDdm1FLEtBQUtzdEQsR0FBVyxLQUVoQnR0RCxLQUFLb3RELEdBQVFwdEQsS0FBSyxHQUFPLENBQ3ZCLENBQUNvdEQsR0FBTyxLQUNSLENBQUMsR0FBT3B0RCxLQUNSLENBQUN3dEQsR0FBUXh0RCxLQUNUdW1FLFNBQVUsR0FDVkUsY0FBZXptRSxLQUFLeW1FLGNBQ3BCdm5ELFdBQVksS0FFaEIsQ0FFQSxjQUFJb3VELEdBQ0YsTUFBTUEsRUFBYSxJQUFJZixHQUN2QixJQUFJLFdBQUNnQixHQUFjdnRFLEtBQ25CLEtBQU91dEUsR0FDTEQsRUFBV3JzRSxLQUFLc3NFLEdBQ2hCQSxFQUFheEQsR0FBWXdELEdBRTNCLE9BQU9ELENBQ1QsQ0FFQSxZQUFJM3ZDLEdBQ0YsTUFBTUEsRUFBVyxJQUFJNHVDLEdBQ3JCLElBQUksa0JBQUNyckMsR0FBcUJsaEMsS0FDMUIsS0FBT2toQyxHQUNMdkQsRUFBUzE4QixLQUFLaWdDLEdBQ2RBLEVBQW9CLEdBQW1CQSxHQUV6QyxPQUFPdkQsQ0FDVCxDQUtBLGNBQUk0dkMsR0FDRixJQUFLLENBQUNuZ0IsR0FBT3pnQyxFQUFNLENBQUMsR0FBTWxhLEdBQU96UyxLQUNqQyxLdENuRjBCLElzQ21GbkIyc0IsRUFBSzQ1QyxVQUNWNTVDLEVBQU9BLEVBQUt5Z0MsR0FDZCxPQUFPemdDLElBQVNsYSxFQUFNLEtBQU9rYSxDQUMvQixDQUtBLHFCQUFJdVUsR0FDRixJQUFJLFdBQUNxc0MsR0FBY3Z0RSxLQUNuQixLQUFPdXRFLEdBQVksQ0FDakIsR3RDL0ZzQixJc0MrRmxCQSxFQUFXaEgsU0FDYixPQUFPZ0gsRUFDVEEsRUFBYXhELEdBQVl3RCxFQUMzQixDQUNBLE9BQU8sSUFDVCxDQUVBLGFBQUlDLEdBQ0YsTUFBTTVtRCxFQUFPNW1CLEtBQUssR0FBSyxHQUN2QixPQUFRNG1CLEVBQUsyL0MsVUFDWCxLQUFLLEdBQ0gsT0FBTzMvQyxFQUFLNG1DLEdBQ2QsS3RDMUd3QixFc0MyR3RCLE9BQU8sS0FFWCxPQUFPNW1DLElBQVM1bUIsS0FBTyxLQUFPNG1CLENBQ2hDLENBRUEsb0JBQUk4eUQsR0FDRixJQUFJLFVBQUNsTSxHQUFheHRFLEtBQ2xCLEtBQU93dEUsR0FBVyxDQUNoQixHdENwSHNCLElzQ29IbEJBLEVBQVVqSCxTQUNaLE9BQU9pSCxFQUNUQSxFQUFZMUQsR0FBZ0IwRCxFQUM5QixDQUNBLE9BQU8sSUFDVCxDQUVBLHFCQUFJbU0sR0FDRixPQUFPMzVFLEtBQUsyOUIsU0FBUzM4QixNQUN2QixDQUVBLE9BQUFnaEUsSUFBV2pDLEdBQ1R6NEMsR0FBT3RuQixLQUFNQSxLQUFLdXRFLFdBQVl4TixFQUNoQyxDQUVBLE1BQUFsbUQsSUFBVWttRCxHQUNSejRDLEdBQU90bkIsS0FBTUEsS0FBSyxHQUFNKy9ELEVBQzFCLENBRUEsZUFBQTZaLElBQW1CN1osR0FDakIsSUFBSyxDQUFDM1MsR0FBT3pnQyxFQUFNLENBQUMsR0FBTWxhLEdBQU96UyxLQUNqQyxLQUFPMnNCLElBQVNsYSxHdEN4SVUsSXNDd0lIa2EsRUFBSzQ1QyxVQUMxQjU1QyxFQUFPQSxFQUFLeWdDLEdBQ2QsS0FBT3pnQyxJQUFTbGEsR0FBSyxDQUNuQixNQUFNdzhELEVBQVEzSSxHQUFPMzVDLEdBQU15Z0MsR0FDM0J6Z0MsRUFBSzdXLFNBQ0w2VyxFQUFPc2lELENBQ1QsQ0FDSWxQLEVBQU0vK0QsUUFDUnNtQixHQUFPdG5CLEtBQU15UyxFQUFLc3RELEVBQ3RCLENBRUEsc0JBQUEyRCxDQUF1Qjd0QyxHQUNyQixNQUFNa2pELEVBQVcsSUFBSXhNLEdBQ3JCLElBQUssQ0FBQ25mLEdBQU96Z0MsRUFBTSxDQUFDLEdBQU1sYSxHQUFPelMsS0FDakMsS0FBTzJzQixJQUFTbGEsR3RDdkpRLElzQ3lKcEJrYSxFQUFLNDVDLFVBQ0w1NUMsRUFBS2lULGFBQWEsVUFDbEJqVCxFQUFLMHNELFVBQVUza0MsSUFBSTdlLElBRW5Ca2pELEVBQVM5M0UsS0FBSzByQixHQUNoQkEsRUFBT0EsRUFBS3lnQyxHQUVkLE9BQU8yckIsQ0FDVCxDQUVBLG9CQUFBdFYsQ0FBcUJ4Z0MsR0FDbkIsTUFBTTgxQyxFQUFXLElBQUl4TSxHQUNyQixJQUFLLENBQUNuZixHQUFPemdDLEVBQU0sQ0FBQyxHQUFNbGEsR0FBT3pTLEtBQ2pDLEtBQU8yc0IsSUFBU2xhLEd0Q3RLUSxJc0N1S2xCa2EsRUFBSzQ1QyxVQUNQNTVDLEVBQUtpNkMsWUFBYzNqQyxHQUNuQjBqQyxHQUFVaDZDLEtBQVVzVyxHQUVwQjgxQyxFQUFTOTNFLEtBQUswckIsR0FDaEJBLEVBQU9BLEVBQUt5Z0MsR0FFZCxPQUFPMnJCLENBQ1QsQ0FFQSxhQUFBM29ELENBQWNtcEQsR0FDWixNQUFNeHZELEVBQVV1dkQsR0FBYXQ1RSxLQUFNdTVFLEdBQ25DLElBQUssQ0FBQ25zQixHQUFPemdDLEVBQU0sQ0FBQyxHQUFNbGEsR0FBT3pTLEtBQ2pDLEtBQU8yc0IsSUFBU2xhLEdBQUssQ0FDbkIsR3RDckxzQixJc0NxTGxCa2EsRUFBSzQ1QyxVQUE2Qng4QyxFQUFRNEMsR0FDNUMsT0FBT0EsRUFDVEEsRXRDdkxzQixJc0N1TGZBLEVBQUs0NUMsVUFBZ0QsYUFBbkI1NUMsRUFBS2k2QyxVQUEyQmo2QyxFQUFLLEdBQU9BLEVBQUt5Z0MsRUFDNUYsQ0FDQSxPQUFPLElBQ1QsQ0FFQSxnQkFBQWx0QixDQUFpQnE1QyxHQUNmLE1BQU14dkQsRUFBVXV2RCxHQUFhdDVFLEtBQU11NUUsR0FDN0JSLEVBQVcsSUFBSXhNLEdBQ3JCLElBQUssQ0FBQ25mLEdBQU96Z0MsRUFBTSxDQUFDLEdBQU1sYSxHQUFPelMsS0FDakMsS0FBTzJzQixJQUFTbGEsR3RDaE1RLElzQ2lNbEJrYSxFQUFLNDVDLFVBQTZCeDhDLEVBQVE0QyxJQUM1Q29zRCxFQUFTOTNFLEtBQUswckIsR0FDaEJBLEV0Q25Nc0IsSXNDbU1mQSxFQUFLNDVDLFVBQWdELGFBQW5CNTVDLEVBQUtpNkMsVUFBMkJqNkMsRUFBSyxHQUFPQSxFQUFLeWdDLEdBRTVGLE9BQU8yckIsQ0FDVCxDQUVBLFdBQUExNUQsQ0FBWWsvQyxHQUNWLE9BQU92K0QsS0FBSzJ0RSxhQUFhcFAsRUFBTXYrRCxLQUFLLEdBQ3RDLENBRUEsUUFBQTh3QixDQUFTeXRDLEdBQ1AsSUFBSXIvQyxFQUFhcS9DLEVBQ2pCLEtBQU9yL0MsR0FBY0EsSUFBZWxmLE1BQ2xDa2YsRUFBYUEsRUFBV0EsV0FDMUIsT0FBT0EsSUFBZWxmLElBQ3hCLENBRUEsWUFBQTJ0RSxDQUFhcFAsRUFBTXgyRCxFQUFTLE1BQzFCLEdBQUl3MkQsSUFBU3gyRCxFQUNYLE9BQU93MkQsRUFDVCxHQUFJQSxJQUFTditELEtBQ1gsTUFBTSxJQUFJeUcsTUFBTSxxQ0FDbEIsTUFBTWttQixFQUFPNWtCLEdBQVUvSCxLQUFLLEdBQzVCLE9BQVF1K0QsRUFBS2dJLFVBQ1gsS3RDMU5zQixFc0MyTnBCaEksRUFBS3pvRCxTQUNMeW9ELEVBQUtyL0MsV0FBYWxmLEtBQ2xCLEdBQWdCMnNCLEVBQUssR0FBTzR4QyxFQUFNNXhDLEdBQ2xDODlDLEdBQVdsTSxFQUFNLE1BQ2pCa0osR0FBa0JsSixHQUNsQixNQUNGLEtBQUssR0FBd0IsQ0FDM0IsSUFBSyxDQUFDalIsR0FBVXB1QyxFQUFVLFdBQUVxdUQsRUFBVSxVQUFFQyxHQUFhalAsRUFDckQsR0FBSWdQLEVBQVksQ3BDbk5JLEVBQUMzbUQsRUFBTTZJLEVBQU9oZCxFQUFLa2EsS0FDN0MrNUMsR0FBYzkvQyxFQUFNNkksR0FDcEJpM0MsR0FBY0osR0FBTzd6RCxHQUFNa2EsRUFBSyxFb0NrTnhCa3RELENBQWFsdEQsRUFBSyxHQUFPNGdELEVBQVlDLEVBQVc3Z0QsR0FDaEQrNUMsR0FBY25JLEVBQU1BLEVBQUssSUFDckJyL0MsR0FDRkEsRUFBVzA2RCxrQkFDYixHQUNFck0sRUFBV3J1RCxXQUFhbGYsS0FDeEJ5cUUsR0FBVzhDLEVBQVksTXRDMU9QLElzQzJPWkEsRUFBV2hILFVBQ2JrQixHQUFrQjhGLFNBRXBCQSxJQUFlQyxJQUNkRCxFQUFheEQsR0FBWXdELElBRTlCLENBQ0EsS0FDRixDQUNBLEt0Q2xQbUIsRXNDbVBuQixLdENqUHNCLEVzQ2tQdEIsS3RDblA0QixFc0NvUDFCaFAsRUFBS3pvRCxTQUdQLFFBQ0V5b0QsRUFBS3IvQyxXQUFhbGYsS0FDbEIsR0FBYzJzQixFQUFLLEdBQU80eEMsRUFBTTV4QyxHQUNoQzg5QyxHQUFXbE0sRUFBTSxNQUdyQixPQUFPQSxDQUNULENBRUEsU0FBQTFwQixHQUNFLElBQUssQ0FBQ3VZLEdBQU96Z0MsRUFBTSxDQUFDLEdBQU1sYSxHQUFPelMsS0FDakMsS0FBTzJzQixJQUFTbGEsR0FBSyxDQUNuQixNQUFPLENBQUMyNkMsR0FBTzBzQixFQUFPLENBQUMsR0FBT0MsRUFBSyxTQUFFeFQsR0FBWTU1QyxFdENwUTlCLElzQ3FRZjQ1QyxJQUNHNTVDLEVBQUtnaEMsR0FFRG9zQixHdEN4UVEsSXNDd1FDQSxFQUFNeFQsV0FDdEJ3VCxFQUFNeDJDLGFBQWU1VyxFQUFLNFcsWUFDMUI1VyxFQUFLN1csVUFITDZXLEVBQUs3VyxVQU1UNlcsRUFBT210RCxDQUNULENBQ0YsQ0FFQSxXQUFBMzZELENBQVlvL0MsR0FDVixHQUFJQSxFQUFLci9DLGFBQWVsZixLQUN0QixNQUFNLElBQUl5RyxNQUFNLHVCQUVsQixPQURBODNELEVBQUt6b0QsU0FDRXlvRCxDQUNULENBRUEsWUFBQXVQLENBQWF2UCxFQUFNeWIsR0FDakIsTUFBTXJ0RCxFQUFPMjVDLEdBQU8wVCxHQUFVNXNCLEdBRzlCLE9BRkE0c0IsRUFBU2xrRSxTQUNUOVYsS0FBSzJ0RSxhQUFhcFAsRUFBTTV4QyxHQUNqQnF0RCxDQUNULEVDMVJLLE1BQU1DLFdBQTZCUixHQUN4QyxjQUFBalcsQ0FBZXZuRCxHQUNiLElBQUssQ0FBQ214QyxHQUFPemdDLEVBQU0sQ0FBQyxHQUFNbGEsR0FBT3pTLEtBQ2pDLEtBQU8yc0IsSUFBU2xhLEdBQUssQ0FDbkIsR3ZDVHNCLEl1Q1NsQmthLEVBQUs0NUMsVUFBNkI1NUMsRUFBSzFRLEtBQU9BLEVBQ2hELE9BQU8wUSxFQUNUQSxFQUFPQSxFQUFLeWdDLEVBQ2QsQ0FDQSxPQUFPLElBQ1QsQ0FFQSxTQUFBc2dCLENBQVV3TSxHQUNSLE1BQU0sY0FBQ3pULEVBQWEsWUFBRXJtRSxHQUFlSixLQUMvQm02RSxFQUFTLElBQUkvNUUsRUFBWXFtRSxHQUMvQixHQUFJeVQsRUFBTSxDQUNSLE1BQU8sQ0FBQyxHQUFNem5FLEdBQU8wbkUsRUFDckIsSUFBSyxNQUFNNWIsS0FBUXYrRCxLQUFLc3RFLFdBQ3RCNk0sRUFBT3hNLGFBQWFwUCxFQUFLbVAsVUFBVXdNLEdBQU96bkUsRUFDOUMsQ0FDQSxPQUFPMG5FLENBQ1QsQ0FFQSxRQUFBaDBFLEdBQ0UsTUFBTSxXQUFDbW5FLEVBQVUsVUFBRTFHLEdBQWE1bUUsS0FDaEMsTUFBTyxJQUFJNG1FLEtBQWEwRyxFQUFXbnNFLEtBQUssUUFBUXlsRSxJQUNsRCxDQUVBLE1BQUFqNUIsR0FDRSxNQUFNOVEsRUFBTyxHQUViLE1oQ2lCNEIsRUFBQzBoQyxFQUFNMWhDLEtBQ3JDQSxFQUFLNTdCLEtBQUtzOUQsRUFBS2dJLFVBQ2Y2QyxHQUFZN0ssRUFBTTFoQyxFQUFLLEVnQ3BCckJ1OUMsQ0FBaUJwNkUsS0FBTTY4QixHQUNoQkEsQ0FDVCxFQ2xDSyxNQUFNdzlDLFdBQXlCSixHQUNwQyxXQUFBNzVFLENBQVlxbUUsR0FDVnlHLE1BQU16RyxFQUFlLHFCQUFzQixHQUM3QyxFQ0RLLE1BQU0sV0FBcUIsR0FDaEMsV0FBQXJtRSxDQUFZcW1FLEVBQWV0akUsRUFBTXNtRSxFQUFXLEdBQUlDLEVBQVcsSUFDekR3RCxNQUFNekcsRUFBZSxpQkFBa0IsSUFDdkN6bUUsS0FBS21ELEtBQU9BLEVBQ1puRCxLQUFLeXBFLFNBQVdBLEVBQ2hCenBFLEtBQUswcEUsU0FBV0EsQ0FDbEIsQ0FFQSxTQUFBZ0UsR0FDRSxNQUFNLGNBQUNqSCxFQUFhLEtBQUV0akUsRUFBSSxTQUFFc21FLEVBQVEsU0FBRUMsR0FBWTFwRSxLQUNsRCxPQUFPLElBQUksR0FBYXltRSxFQUFldGpFLEVBQU1zbUUsRUFBVUMsRUFDekQsQ0FFQSxRQUFBdmpFLEdBQ0UsTUFBTSxLQUFDaEQsRUFBSSxTQUFFc21FLEVBQVEsU0FBRUMsR0FBWTFwRSxLQUM3QnM2RSxFQUFZLEVBQUk3USxFQUFTem9FLE9BQ3pCb3lCLEVBQU0sQ0FBQ2p3QixHQVFiLE9BUEltM0UsR0FDRmxuRCxFQUFJbnlCLEtBQUssU0FBVSxJQUFJd29FLE1BQ3JCQyxFQUFTMW9FLFNBQ05zNUUsR0FDSGxuRCxFQUFJbnlCLEtBQUssVUFDWG15QixFQUFJbnlCLEtBQUssSUFBSXlvRSxPQUVSLGFBQWF0MkMsRUFBSWp5QixLQUFLLE9BQy9CLENBRUEsTUFBQXdzQyxHQUNFLE1BQU05USxFQUFPLEdBRWIsT0FEQTJzQyxHQUFtQnhwRSxLQUFNNjhCLEdBQ2xCQSxDQUNULEVDN0JLLE1BQU0wOUMsR0FBZWhjLEdBQVFBLEVBQUsrTyxXQUFXbnNFLEtBQUssSUFNNUNxNUUsR0FBZSxDQUFDamMsRUFBTTNsQyxLQUNqQyxNQUFNLGNBQUM2dEMsR0FBaUJsSSxHQUNsQixZQUFDbitELEdBQWVxbUUsRUFDaEI5bkQsRUFBVyxJQUFJdmUsRUFDckJ1ZSxFQUFTK3RDLEdBQW1CK1osRUFBYy9aLEdBQzFDLE1BQU0sV0FBQzRnQixHQUFjcDlDLEdBQWdCdlIsRUFBVTZuRCxHQUFXakksR0FBTzNsQyxHQUVqRTJsQyxFQUFLcWIsbUJBQW1CdE0sRUFBV3Y0QyxJQUFJMGxELEdBQWtCaFUsR0FBZSxFQUcxRSxTQUFTZ1UsR0FBaUJsYyxHQUV4QixPQURBQSxFQUFLa0ksY0FBZ0J6bUUsS0FDYnUrRCxFQUFLZ0ksVUFDWCxLMUN6QndCLEUwQzBCeEIsS0FBSyxHQUNIaEksRUFBSytPLFdBQVd4NkQsUUFBUTJuRSxHQUFrQno2RSxNQUc5QyxPQUFPdStELENBQ1QsQ0NuQ0EsU0FBZW1jLEdBQVNBLEVBQU0xeUUsUUFBUSxvREFBcUQsYUFDN0RrTyxjQ0V4QnlrRSxHQUFPLElBQUl4eEIsUUFFWDF3QixHQUFNdDFCLEdBQVEsUUFBUSxHQUFRQSxLQUM5QnErQixHQUFPcitCLEdBQVFBLEVBQUtKLE1BQU0sR0FBR2lGLFFBQVEsYUFBYSxDQUFDeUgsRUFBR21yRSxJQUFPQSxFQUFHbmxFLGdCQUVoRW9sRSxHQUFVLENBQ2QsR0FBQWg2RSxDQUFJaTZFLEVBQVMzM0UsR0FDWCxHQUFJQSxLQUFRMjNFLEVBQ1YsT0FBT0gsR0FBSzk1RSxJQUFJaTZFLEdBQVN0OEMsYUFBYS9GLEdBQUl0MUIsR0FDOUMsRUFFQVgsSUFBRyxDQUFDczRFLEVBQVMzM0UsRUFBTUssS0FDakJzM0UsRUFBUTMzRSxHQUFRSyxFQUNoQm0zRSxHQUFLOTVFLElBQUlpNkUsR0FBU3IzQyxhQUFhaEwsR0FBSXQxQixHQUFPSyxJQUNuQyxHQUdUdTNFLGVBQWMsQ0FBQ0QsRUFBUzMzRSxLQUNsQkEsS0FBUTIzRSxHQUNWSCxHQUFLOTVFLElBQUlpNkUsR0FBU2hRLGdCQUFnQnJ5QyxHQUFJdDFCLFdBQzFCMjNFLEVBQVEzM0UsS0FPbkIsTUFBTTYzRSxHQUlYLFdBQUE1NkUsQ0FBWTY2RSxHQUNWLElBQUssTUFBTSxLQUFDOTNFLEVBQUksTUFBRUssS0FBVXkzRSxFQUFJNWEsV0FDMUIsU0FBU2w0RCxLQUFLaEYsS0FDaEJuRCxLQUFLd2hDLEdBQUtyK0IsSUFBU0ssR0FHdkIsT0FEQW0zRSxHQUFLbjRFLElBQUl4QyxLQUFNaTdFLEdBQ1IsSUFBSTF3QixNQUFNdnFELEtBQU02NkUsR0FDekIsRUFHRnpVLEdBQWU0VSxHQUFhNzZFLFVBQVcsTUN2Q3ZDLE1BQU0sSUFBQ215QixJQUFPaW9DLElBQUlwNkQsVUFDWis2RSxHQUFZLENBQUMxaEUsRUFBTSs2QixLQUN2QixJQUFLLE1BQU01dEMsS0FBUzR0QyxFQUNkNXRDLEdBQ0YyckIsR0FBSXZ5QixLQUFLeVosRUFBTTdTLEVBQ25CLEVBR0l3MEUsR0FBUyxFQUFFLENBQUM5dEIsR0FBZ0JtYixFQUFjaGxFLFlBQzlDLE1BQU0ra0UsRUFBWUMsRUFBYTRTLGlCQUFpQixTQUM1QzdTLEVBQ0ZBLEVBQVUva0UsTUFBUUEsRUFFbEJpZ0MsR0FDRStrQyxFQUNBLElBQUksR0FBS0EsRUFBYS9CLGNBQWUsUUFBU2pqRSxHQUMvQyxFQU1FLE1BQU02M0UsV0FBcUI5Z0IsSUFFaEMsV0FBQW42RCxDQUFZb29FLEdBQ1YwRSxRQUNBbHRFLEtBQUtxdEQsR0FBaUJtYixFQUN0QixNQUFNRCxFQUFZQyxFQUFhNFMsaUJBQWlCLFNBQzVDN1MsR0FDRjJTLEdBQVVsN0UsS0FBTXVvRSxFQUFVL2tFLE1BQU04RSxNQUFNLE9BQzFDLENBRUEsVUFBSXRILEdBQVcsT0FBT2hCLEtBQUt1WixJQUFNLENBRWpDLFNBQUkvVixHQUFVLE1BQU8sSUFBSXhELE1BQU1tQixLQUFLLElBQU0sQ0FLMUMsR0FBQW14QixJQUFPaWlCLEdBQ0wybUMsR0FBVWw3RSxLQUFNdTBDLEdBQ2hCNG1DLEdBQU9uN0UsS0FDVCxDQUtBLFFBQUE4d0IsQ0FBU25xQixHQUFTLE9BQU8zRyxLQUFLMDBDLElBQUkvdEMsRUFBUSxDQUsxQyxNQUFBbVAsSUFBVXkrQixHQUNSLElBQUssTUFBTTV0QyxLQUFTNHRDLEVBQ2xCdjBDLEtBQUttNEIsT0FBT3h4QixHQUNkdzBFLEdBQU9uN0UsS0FDVCxDQU1BLE1BQUFzN0UsQ0FBTzMwRSxFQUFPNDBFLEdBQ1osR0FBSXY3RSxLQUFLMDBDLElBQUkvdEMsR0FBUSxDQUNuQixHQUFJNDBFLEVBQ0YsT0FBTyxFQUNUdjdFLEtBQUttNEIsT0FBT3h4QixHQUNadzBFLEdBQU9uN0UsS0FDVCxNQUNLLEdBQUl1N0UsR0FBOEIsSUFBckJ0b0UsVUFBVWpTLE9BRzFCLE9BRkFrc0UsTUFBTTU2QyxJQUFJM3JCLEdBQ1Z3MEUsR0FBT243RSxPQUNBLEVBRVQsT0FBTyxDQUNULENBTUEsT0FBQWdJLENBQVFyQixFQUFPNjBFLEdBQ2IsUUFBSXg3RSxLQUFLMDBDLElBQUkvdEMsS0FDWDNHLEtBQUttNEIsT0FBT3h4QixHQUNadW1FLE1BQU01NkMsSUFBSWtwRCxHQUNWTCxHQUFPbjdFLE9BQ0EsRUFHWCxDQUtBLFFBQUF5N0UsR0FBYSxPQUFPLENBQU0sRUMvRjVCLE1BQU0sR0FBTyxJQUFJdHlCLFFBRVh1eUIsR0FBVXI2RSxHQUFTLElBQUlBLEVBQU1rM0IsUUFBUTNpQixRQUFPNmlCLEdBQU9BLElBQVE2MEIsSUFFM0RxdUIsR0FBYXQ2RSxJQUNqQixNQUFNZ2pDLEVBQU8sR0FBS3hqQyxJQUFJUSxHQUFPKzVFLGlCQUFpQixTQUM5QyxLQUFLLzJDLEdBQVFBLEVBQUttb0IsSUFBWW5yRCxFQUFNUixJQUFJeXNELEtBQWFqcEIsS0FDbkRoakMsRUFBTWcwQixRQUNGZ1AsR0FBTSxDQUNSaGpDLEVBQU1tQixJQUFJOHFELEVBQVNqcEIsR0FDbkIsSUFBSyxNQUFNNWlDLEtBQVE0aUMsRUFBS3NwQixHQUFPcmxELE1BQU0sV0FBWSxDQUMvQyxJQUFLbXdCLEtBQVFtakQsR0FBUW42RSxFQUFLNkcsTUFBTSxLQUNoQyxHQUFJc3pFLEVBQUs1NkUsT0FBUyxFQUFHLENBQ25CeTNCLEVBQU1BLEVBQUl6MUIsT0FDVixNQUFNUSxFQUFRbzRFLEVBQUt6NkUsS0FBSyxLQUFLNkIsT0FDekJ5MUIsR0FBT2oxQixHQUNUbkMsRUFBTW1CLElBQUlpMkIsRUFBS2oxQixFQUNuQixDQUNGLENBQ0YsQ0FFRixPQUFPNmdDLENBQUksRUFHUCxHQUFVLENBQ2R4akMsSUFBRyxDQUFDUSxFQUFPOEIsSUFDTEEsS0FBUSxHQUNIOUIsRUFBTThCLElBQ2Z3NEUsR0FBV3Q2RSxHQUNFLFdBQVQ4QixFQUNLdTRFLEdBQVFyNkUsR0FBT0wsT0FDcEIsUUFBUW1ILEtBQUtoRixHQUNSdTRFLEdBQVFyNkUsR0FBTzhCLEdBQ2pCOUIsRUFBTVIsSUFBSSxHQUFRc0MsS0FHM0IsR0FBQVgsQ0FBSW5CLEVBQU84QixFQUFNSyxHQUNmLEdBQWEsWUFBVEwsRUFDRjlCLEVBQU04QixHQUFRSyxNQUNYLENBQ0gsSUFBSTZnQyxFQUFPczNDLEdBQVd0NkUsR0FLdEIsR0FKYSxNQUFUbUMsRUFDRm5DLEVBQU04MkIsT0FBTyxHQUFRaDFCLElBRXJCOUIsRUFBTW1CLElBQUksR0FBUVcsR0FBT0ssSUFDdEI2Z0MsRUFBTSxDQUNULE1BQU0xRSxFQUFVLEdBQUs5K0IsSUFBSVEsR0FDekJnakMsRUFBTzFFLEVBQVE4bUMsY0FBY3NDLGdCQUFnQixTQUM3Q3BwQyxFQUFReW9DLGlCQUFpQi9qQyxHQUN6QmhqQyxFQUFNbUIsSUFBSThxRCxFQUFTanBCLEVBQ3JCLENBQ0FBLEVBQUttb0IsSUFBVyxFQUNoQm5vQixFQUFLc3BCLEdBQVN0c0QsRUFBTThFLFVBQ3RCLENBQ0EsT0FBTyxDQUNULEdBTUssTUFBTS9FLFdBQTRCa3FELElBQ3ZDLFdBQUFsckQsQ0FBWXUvQixHQUlWLE9BSEF1dEMsUUFDQSxHQUFLMXFFLElBQUl4QyxLQUFNMi9CLEdBRVIsSUFBSTRxQixNQUFNdnFELEtBQU0sR0FFekIsQ0FFQSxXQUFJTSxHQUNGLE9BQU9OLEtBQUttRyxVQUNkLENBRUEsV0FBSTdGLENBQVFrRCxHQUNWLEdBQUszQyxJQUFJYixNQUFNeWpDLGFBQWEsUUFBU2pnQyxFQUN2QyxDQUVBLGdCQUFBc0IsQ0FBaUIzQixHQUNmLE1BQU1xVyxFQUFPeFosS0FBS3N0RCxHQUNsQixPQUFPLEdBQVF6c0QsSUFBSTJZLEVBQU1yVyxFQUMzQixDQUVBLFdBQUE0QixDQUFZNUIsRUFBTUssR0FDaEIsTUFBTWdXLEVBQU94WixLQUFLc3RELEdBQ2xCLEdBQVE5cUQsSUFBSWdYLEVBQU1yVyxFQUFNSyxFQUMxQixDQUVBLGNBQUEwQixDQUFlL0IsR0FDYixNQUFNcVcsRUFBT3haLEtBQUtzdEQsR0FDbEIsR0FBUTlxRCxJQUFJZ1gsRUFBTXJXLEVBQU0sS0FDMUIsQ0FFQSxDQUFDeWtDLE9BQU9FLFlBQ04sTUFBTXR1QixFQUFPeFosS0FBS3N0RCxHQUNsQnF1QixHQUFXbmlFLEdBQ1gsTUFBTStlLEVBQU9takQsR0FBUWxpRSxJQUNmLE9BQUN4WSxHQUFVdTNCLEVBQ2pCLElBQUl4M0IsRUFBSSxFQUNSLE1BQU8sQ0FDTCxJQUFBNHJCLEdBQ0UsTUFBTXhCLEVBQU9wcUIsSUFBTUMsRUFDbkIsTUFBTyxDQUFDbXFCLE9BQU0zbkIsTUFBTzJuQixFQUFPLEtBQU9vTixFQUFLeDNCLEtBQzFDLEVBRUosQ0FFQSxJQUFJdXNELEtBQWEsT0FBT3R0RCxJQUFNLENBRTlCLFFBQUFtRyxHQUNFLE1BQU1xVCxFQUFPeFosS0FBS3N0RCxHQUNsQnF1QixHQUFXbmlFLEdBQ1gsTUFBTWxaLEVBQVUsR0FFaEIsT0FEQWtaLEVBQUsxRyxRQUFRN1IsR0FBTVgsR0FDWkEsRUFBUWEsS0FBSyxJQUN0QixFQUdGLE1BQU9oQixVQUFTLElBQUlpQixHQUVwQixTQUFTSCxHQUFLdUMsRUFBT2kxQixHQUNmQSxJQUFRNjBCLEdBQ1Z0dEQsS0FBS2lCLEtBQUssR0FBR3czQixLQUFPajFCLElBQ3hCLENDckhBLFNBQVNxNEUsR0FBaUJDLEdBQ3hCLE9BQU9BLEVBQUd0USxhQUNaLENBS0EsTUFBTXVRLEdBQ0YseUJBQVduUSxHQUFtQixPQWJYLENBYWtDLENBQ3JELG9CQUFXRCxHQUFjLE9BYlgsQ0FhNkIsQ0FDM0MsMEJBQVdPLEdBQW9CLE9BYlgsQ0FhbUMsQ0FDdkQsZUFBV0csR0FBUyxPQWJYLENBYXdCLENBRWpDLFdBQUFqc0UsQ0FBWU0sRUFBTXM3RSxFQUFnQixDQUFDLEdBQ2pDaDhFLEtBQUtVLEtBQU9BLEVBQ1pWLEtBQUtvc0UsVUFBWTRQLEVBQWM1UCxRQUMvQnBzRSxLQUFLOHJFLGNBQWUsRUFDcEI5ckUsS0FBS3NyRSwrQkFBZ0MsRUFDckN0ckUsS0FBS2k4RSxhQUFlRCxFQUFjQyxXQUNsQ2o4RSxLQUFLMHJFLFdBQWExckUsS0FBS3FzRSxLQUN2QnJzRSxLQUFLazhFLFVBQVkxbUUsS0FBS21hLE1BQ3RCM3ZCLEtBQUtzc0Usa0JBQW1CLEVBQ3hCdHNFLEtBQUttOEUsZUFBaUIsS0FDdEJuOEUsS0FBS284RSxZQUFjLEtBQ25CcDhFLEtBQUtxOEUsV0FBYSxLQUNsQnI4RSxLQUFLOGEsT0FBUyxLQUNkOWEsS0FBS21zRSxNQUFRLEVBQ2YsQ0FFQSxrQkFBSVAsR0FBbUIsT0FsQ0osQ0FrQzJCLENBQzlDLGFBQUlELEdBQWMsT0FsQ0osQ0FrQ3NCLENBQ3BDLG1CQUFJTyxHQUFvQixPQWxDSixDQWtDNEIsQ0FDaEQsUUFBSUcsR0FBUyxPQWxDSixDQWtDaUIsQ0FFMUIsY0FBQWlRLEdBQW1CdDhFLEtBQUtzc0Usa0JBQW1CLENBQU0sQ0FHakQsWUFBQWlRLEdBQ0UsT0FBT3Y4RSxLQUFLbXNFLE1BQU1wM0MsSUFBSThtRCxHQUN4QixDQUVBLGVBQUFXLEdBQ0V4OEUsS0FBSzhyRSxjQUFlLENBQ3RCLENBRUEsd0JBQUEyUSxHQUNFejhFLEtBQUt3OEUsa0JBQ0x4OEUsS0FBS3NyRSwrQkFBZ0MsQ0FDdkMsRUN2REcsTUFBTW9SLFdBQXFCejNFLE1BQ2hDLFdBQUE3RSxDQUFZb29FLEdBQ1YwRSxRQUNBbHRFLEtBQUt3b0UsYUFBZUEsQ0FDdEIsQ0FFQSxZQUFBbVUsQ0FBYXg1RSxHQUNYLE9BQU9uRCxLQUFLd29FLGFBQWE0UyxpQkFBaUJqNEUsRUFDNUMsQ0FFQSxZQUFBeTVFLENBQWF2NEMsR0FDWHJrQyxLQUFLd29FLGFBQWFKLGlCQUFpQi9qQyxHQUNuQ3JrQyxLQUFLb2pELFFBQVEvZSxFQUNmLENBRUEsZUFBQXc0QyxDQUFnQjE1RSxHQUNkLE1BQU02eEIsRUFBT2gxQixLQUFLMjhFLGFBQWF4NUUsR0FDL0JuRCxLQUFLd29FLGFBQWFzQyxnQkFBZ0IzbkUsR0FDbENuRCxLQUFLOEIsT0FBTzlCLEtBQUs2QyxRQUFRbXlCLEdBQU8sRUFDbEMsQ0FFQSxJQUFBQSxDQUFLdHpCLEdBQ0gsT0FBT0EsRUFBUTFCLEtBQUtnQixPQUFTaEIsS0FBSzBCLEdBQVMsSUFDN0MsQ0FHQSxjQUFBbzdFLENBQWVydEUsRUFBR3RNLEdBQ2hCLE9BQU9uRCxLQUFLMjhFLGFBQWF4NUUsRUFDM0IsQ0FFQSxjQUFBNDVFLENBQWV0dEUsRUFBRzQwQixHQUNoQixPQUFPcmtDLEtBQUs0OEUsYUFBYXY0QyxFQUMzQixDQUVBLGlCQUFBMjRDLENBQWtCdnRFLEVBQUd0TSxHQUNuQixPQUFPbkQsS0FBSzY4RSxnQkFBZ0IxNUUsRUFDOUIsRUNoQ0ssTUFBTTg1RSxXQUFtQmhELEdBQzlCLFdBQUE3NUUsQ0FBWW80QyxHQUNWMDBCLE1BQU0xMEIsRUFBS2l1QixjQUFlLGVBQWdCLElBQzFDem1FLEtBQUt3NEMsS0FBT0EsQ0FDZCxDQUVBLGFBQUl2VyxHQUNGLE9BQU9zNEMsR0FBYXY2RSxLQUN0QixDQUNBLGFBQUlpaUMsQ0FBVXJKLEdBQ1o0aEQsR0FBYXg2RSxLQUFNNDRCLEVBQ3JCLEVDcUNGLE1BQU1za0QsR0FBb0IsQ0FDeEJyOEUsSUFBRyxDQUFDaWEsRUFBUTJkLElBQ0hBLEtBQU8zZCxFQUFTQSxFQUFPMmQsR0FBTzNkLEVBQU9zbkQsTUFBSyxFQUFFai9ELFVBQVVBLElBQVNzMUIsS0FJcEUsR0FBUyxDQUFDZ3VDLEVBQWU5bUMsRUFBU2luQyxLQUN0QyxHQUFJLG9CQUFxQmpuQyxFQUFTLENBQ2hDLE1BQU13OUMsRUFBTTFXLEVBQWNxQyxnQkFBZ0IzQyxHQUFlUyxHQUV6RCxPQURBdVcsRUFBSXhVLGdCQUFrQmhwQyxFQUFRZ3BDLGdCQUN2QndVLENBQ1QsQ0FDQSxPQUFPMVcsRUFBY3puRCxjQUFjNG5ELEVBQVUsRUFHekN3VyxHQUFTLEVBQUV4VyxZQUFXSCxtQkFDbkJBLEVBQWN2WixHQUFNMk4sYUFBYTF5RCxLQUFLeStELEdBUXhDLE1BQU0sV0FBZ0I2UyxHQUMzQixXQUFBcjVFLENBQVlxbUUsRUFBZUcsR0FDekJzRyxNQUFNekcsRUFBZUcsRWxEN0VHLEdrRDhFeEI1bUUsS0FBS3lzRCxHQUFjLEtBQ25CenNELEtBQUs0c0QsR0FBVyxLQUNoQjVzRCxLQUFLeXRELEdBQVMsSUFDaEIsQ0FHQSxlQUFJNlosR0FBZ0IsT0FBT0EsR0FBWXRuRSxLQUFPLENBQzlDLGlCQUFJOCtCLEdBQWtCLE9BQU9BLEdBQWM5K0IsS0FBTyxDQUNsRCxtQkFBSThwRSxHQUFvQixPQUFPQSxHQUFnQjlwRSxLQUFPLENBQ3RELGVBQUkrcEUsR0FBZ0IsT0FBT0EsR0FBWS9wRSxLQUFPLENBQzlDLGdCQUFJcTlFLEdBQ0YsTUFBTyw4QkFDVCxDQUVBLDBCQUFJaFEsR0FBMkIsT0FBT0EsR0FBdUJydEUsS0FBTyxDQUNwRSxzQkFBSW9pQyxHQUF1QixPQUFPLEdBQW1CcGlDLEtBQU8sQ0FFNUQsTUFBQStILElBQVVnNEQsR0FBU2g0RCxHQUFPL0gsS0FBTSsvRCxFQUFRLENBQ3hDLEtBQUFrUCxJQUFTbFAsR0FBU2tQLEdBQU1qdkUsS0FBTSsvRCxFQUFRLENBQ3RDLFdBQUFtUCxJQUFlblAsR0FBU21QLEdBQVlsdkUsS0FBTSsvRCxFQUFRLENBQ2xELE1BQUFqcUQsR0FBV0EsR0FBTzlWLEtBQUssR0FBT0EsS0FBTUEsS0FBSyxHQUFLb3RELEdBQVEsQ0FJdEQsTUFBSW54QyxHQUFPLE9BQU9pdkQsR0FBZ0JycUUsSUFBSWIsS0FBTSxLQUFPLENBQ25ELE1BQUlpYyxDQUFHelksR0FBUzBuRSxHQUFnQjFvRSxJQUFJeEMsS0FBTSxLQUFNd0QsRUFBUSxDQUV4RCxhQUFJcXlCLEdBQWMsT0FBTzcxQixLQUFLcTVFLFVBQVU3MUUsS0FBTyxDQUMvQyxhQUFJcXlCLENBQVVyeUIsR0FDWixNQUFNLFVBQUM2MUUsR0FBYXI1RSxLQUNwQnE1RSxFQUFVaGtELFFBQ1Zna0QsRUFBVS9tRCxPQUFRLEdBQU85dUIsR0FBTzhFLE1BQU0sT0FDeEMsQ0FFQSxZQUFJOGtFLEdBQWEsT0FBT3pHLEdBQVUzbUUsS0FBTyxDQUN6QyxXQUFJaWpDLEdBQVksT0FBTzBqQyxHQUFVM21FLEtBQU8sQ0FFeEMsYUFBSXE1RSxHQUNGLE9BQU9yNUUsS0FBS3lzRCxLQUNWenNELEtBQUt5c0QsR0FBYyxJQUFJNHVCLEdBQWFyN0UsTUFFeEMsQ0FFQSxXQUFJODZFLEdBQ0YsT0FBTzk2RSxLQUFLNHNELEtBQ1Y1c0QsS0FBSzRzRCxHQUFXLElBQUlvdUIsR0FBYWg3RSxNQUVyQyxDQUVBLHFCQUFBczlFLEdBQ0UsTUFBTyxDQUNMdHRFLEVBQUcsRUFDSEgsRUFBRyxFQUNIMHRFLE9BQVEsRUFDUmgzQyxPQUFRLEVBQ1JpM0MsS0FBTSxFQUNOQyxNQUFPLEVBQ1BDLElBQUssRUFDTHAzQyxNQUFPLEVBRVgsQ0FFQSxTQUFJcTNDLEdBQVUsT0FBT3pTLEdBQWdCcnFFLElBQUliLEtBQU0sUUFBVSxDQUN6RCxTQUFJMjlFLENBQU1uNkUsR0FBUzBuRSxHQUFnQjFvRSxJQUFJeEMsS0FBTSxRQUFTd0QsRUFBUSxDQUU5RCxTQUFJbkMsR0FDRixPQUFPckIsS0FBS3l0RCxLQUNWenRELEtBQUt5dEQsR0FBUyxJQUFJcnNELEdBQW9CcEIsTUFFMUMsQ0FFQSxZQUFJNDlFLEdBQWEsT0FBTzVTLEdBQWlCbnFFLElBQUliLEtBQU0sY0FBZ0IsQ0FBRyxDQUN0RSxZQUFJNDlFLENBQVNwNkUsR0FBU3duRSxHQUFpQnhvRSxJQUFJeEMsS0FBTSxXQUFZd0QsRUFBUSxDQUVyRSxRQUFJcTZFLEdBQVMsT0FBTzNTLEdBQWdCcnFFLElBQUliLEtBQU0sT0FBUyxDQUN2RCxRQUFJNjlFLENBQUtyNkUsR0FBUzBuRSxHQUFnQjFvRSxJQUFJeEMsS0FBTSxPQUFRd0QsRUFBUSxDQUs1RCxhQUFJbTdCLEdBQ0YsTUFBTWw1QixFQUFPLEdBQ2IsSUFBSyxDQUFDMm5ELEdBQU96Z0MsRUFBTSxDQUFDLEdBQU1sYSxHQUFPelMsS0FDakMsS0FBTzJzQixJQUFTbGEsR2xEL0pLLElrRGdLZmthLEVBQUs0NUMsU0FDUDlnRSxFQUFLeEUsS0FBSzByQixFQUFLNFcsWUFBWXY3QixRQUFRLE9BQVEsTUFFM0N2QyxFQUFLekUsUUFBVTJyQixFQUFLeWdDLElBQVMzNkMsR0FDN0J5ekQsR0FBZXh4QixJQUFJL25CLEVBQUtzVyxVQUV4Qng5QixFQUFLeEUsS0FBSyxNQUVaMHJCLEVBQU9BLEVBQUt5Z0MsR0FFZCxPQUFPM25ELEVBQUt0RSxLQUFLLEdBQ25CLENBS0EsZUFBSW9pQyxHQUNGLE1BQU05OUIsRUFBTyxHQUNiLElBQUssQ0FBQzJuRCxHQUFPemdDLEVBQU0sQ0FBQyxHQUFNbGEsR0FBT3pTLEtBQ2pDLEtBQU8yc0IsSUFBU2xhLEdBQUssQ0FDbkIsTUFBTTh6RCxFQUFXNTVDLEVBQUs0NUMsU2xEcExILElrRHFMZkEsR2xEcEx3QixJa0RvTEVBLEdBQzVCOWdFLEVBQUt4RSxLQUFLMHJCLEVBQUs0VyxhQUNqQjVXLEVBQU9BLEVBQUt5Z0MsRUFDZCxDQUNBLE9BQU8zbkQsRUFBS3RFLEtBQUssR0FDbkIsQ0FFQSxlQUFJb2lDLENBQVk5OUIsR0FDZHpGLEtBQUs0NUUsa0JBQ08sTUFBUm4wRSxHQUF5QixLQUFUQSxHQUNsQnpGLEtBQUtxZixZQUFZLElBQUksR0FBS3JmLEtBQUt5bUUsY0FBZWhoRSxHQUNsRCxDQUVBLGFBQUl3OEIsR0FDRixPQUFPczRDLEdBQWF2NkUsS0FDdEIsQ0FDQSxhQUFJaWlDLENBQVVySixHQUNaNGhELEdBQWF4NkUsS0FBTTQ0QixFQUNyQixDQUVBLGFBQUl1TixHQUFjLE9BQU9ubUMsS0FBS21HLFVBQVksQ0FDMUMsYUFBSWdnQyxDQUFVdk4sR0FDWixNQUFNa2xELEVBQVc5OUUsS0FBS3ltRSxjQUFjem5ELGNBQWMsSUFDbEQ4K0QsRUFBUzc3QyxVQUFZckosRUFDckI1NEIsS0FBS2t2RSxlQUFlNE8sRUFBU3hRLFdBQy9CLENBSUEsY0FBSWpOLEdBQ0YsTUFBTUEsRUFBYSxJQUFJcWMsR0FBYTE4RSxNQUNwQyxJQUFJMnNCLEVBQU8zc0IsS0FBS290RCxHQUNoQixLbER0TjBCLElrRHNObkJ6Z0MsRUFBSzQ1QyxVQUNWbEcsRUFBV3AvRCxLQUFLMHJCLEdBQ2hCQSxFQUFPQSxFQUFLeWdDLEdBRWQsT0FBTyxJQUFJN0MsTUFBTThWLEVBQVk2YyxHQUMvQixDQUVBLEtBQUFhLEdBQVUvOUUsS0FBS2lzRSxjQUFjLElBQUksR0FBTSxTQUFXLENBRWxELFlBQUF6dEMsQ0FBYXI3QixHQUNYLEdBQWEsVUFBVEEsRUFDRixPQUFPbkQsS0FBSzYxQixVQUNkLE1BQU0weUMsRUFBWXZvRSxLQUFLbzdFLGlCQUFpQmo0RSxHQUN4QyxPQUFPb2xFLElBQWMvQixHQUFXeG1FLE1BQVF1b0UsRUFBVS9rRSxNQUFRLEdBQU8ra0UsRUFBVS9rRSxPQUM3RSxDQUVBLGdCQUFBNDNFLENBQWlCajRFLEdBQ2YsSUFBSXdwQixFQUFPM3NCLEtBQUtvdEQsR0FDaEIsS2xEeE8wQixJa0R3T25CemdDLEVBQUs0NUMsVUFBNkIsQ0FDdkMsR0FBSTU1QyxFQUFLeHBCLE9BQVNBLEVBQ2hCLE9BQU93cEIsRUFDVEEsRUFBT0EsRUFBS3lnQyxFQUNkLENBQ0EsT0FBTyxJQUNULENBRUEsaUJBQUE0d0IsR0FDRSxNQUFNM2QsRUFBYSxJQUFJa00sR0FDdkIsSUFBSTUvQyxFQUFPM3NCLEtBQUtvdEQsR0FDaEIsS2xEblAwQixJa0RtUG5CemdDLEVBQUs0NUMsVUFDVmxHLEVBQVdwL0QsS0FBSzByQixFQUFLeHBCLE1BQ3JCd3BCLEVBQU9BLEVBQUt5Z0MsR0FFZCxPQUFPaVQsQ0FDVCxDQUVBLFlBQUF6Z0MsQ0FBYXo4QixHQUFRLFFBQVNuRCxLQUFLbzdFLGlCQUFpQmo0RSxFQUFPLENBQzNELGFBQUE4NkUsR0FBa0IsT2xEM1BVLElrRDJQSGorRSxLQUFLb3RELEdBQU1tWixRQUE2QixDQUVqRSxlQUFBdUUsQ0FBZ0IzbkUsR0FDRCxVQUFUQSxHQUFvQm5ELEtBQUt5c0QsSUFDekJ6c0QsS0FBS3lzRCxHQUFZcDNCLFFBQ3JCLElBQUkxSSxFQUFPM3NCLEtBQUtvdEQsR0FDaEIsS2xEalEwQixJa0RpUW5CemdDLEVBQUs0NUMsVUFBNkIsQ0FDdkMsR0FBSTU1QyxFQUFLeHBCLE9BQVNBLEVBRWhCLFlBREEybkUsR0FBZ0I5cUUsS0FBTTJzQixHQUd4QkEsRUFBT0EsRUFBS3lnQyxFQUNkLENBQ0YsQ0FFQSxtQkFBQSthLENBQW9CSSxHQUNsQixJQUFJNTdDLEVBQU8zc0IsS0FBS290RCxHQUNoQixLbEQ1UTBCLElrRDRRbkJ6Z0MsRUFBSzQ1QyxVQUE2QixDQUN2QyxHQUFJNTVDLElBQVM0N0MsRUFFWCxZQURBdUMsR0FBZ0I5cUUsS0FBTTJzQixHQUd4QkEsRUFBT0EsRUFBS3lnQyxFQUNkLENBQ0YsQ0FFQSxZQUFBM3BCLENBQWF0Z0MsRUFBTUssR0FDakIsR0FBYSxVQUFUTCxFQUNGbkQsS0FBSzYxQixVQUFZcnlCLE1BQ2QsQ0FDSCxNQUFNK2tFLEVBQVl2b0UsS0FBS283RSxpQkFBaUJqNEUsR0FDcENvbEUsRUFDRkEsRUFBVS9rRSxNQUFRQSxFQUVsQmlnQyxHQUFhempDLEtBQU0sSUFBSSxHQUFLQSxLQUFLeW1FLGNBQWV0akUsRUFBTUssR0FDMUQsQ0FDRixDQUVBLGdCQUFBNGtFLENBQWlCRyxHQUNmLE1BQU0sS0FBQ3BsRSxHQUFRb2xFLEVBQ1QyVixFQUFhbCtFLEtBQUtvN0UsaUJBQWlCajRFLEdBQ3pDLEdBQUkrNkUsSUFBZTNWLEVBQVcsQ0FDeEIyVixHQUNGbCtFLEtBQUttb0Usb0JBQW9CK1YsR0FDM0IsTUFBTSxhQUFDMVYsR0FBZ0JELEVBQ25CQyxHQUNGQSxFQUFhTCxvQkFBb0JJLEdBQ25DOWtDLEdBQWF6akMsS0FBTXVvRSxFQUNyQixDQUNBLE9BQU8yVixDQUNULENBRUEsZUFBQUMsQ0FBZ0JoN0UsRUFBTW80RSxHQUNwQixPQUFJdjdFLEtBQUs0L0IsYUFBYXo4QixLQUNmbzRFLElBQ0h2N0UsS0FBSzhxRSxnQkFBZ0IzbkUsSUFDZCxNQUlGbzRFLEdBQThCLElBQXJCdG9FLFVBQVVqUyxTQUMxQmhCLEtBQUt5akMsYUFBYXRnQyxFQUFNLElBQ2pCLEdBR1gsQ0FJQSxjQUFJdWtFLEdBQ0YsR0FBSVosR0FBWXB5QixJQUFJMTBDLE1BQU8sQ0FDekIsTUFBTSxLQUFDOHJCLEVBQUksV0FBRTQ3QyxHQUFjWixHQUFZam1FLElBQUliLE1BQzNDLEdBQWEsU0FBVDhyQixFQUNGLE9BQU80N0MsQ0FDWCxDQUNBLE9BQU8sSUFDVCxDQUVBLFlBQUEwVyxDQUFhQyxHQUNYLEdBQUl2WCxHQUFZcHlCLElBQUkxMEMsTUFDbEIsTUFBTSxJQUFJeUcsTUFBTSwyQkFHbEIsTUFBTWloRSxFQUFhLElBQUl1VixHQUFXajlFLE1BS2xDLE9BSkE4bUUsR0FBWXRrRSxJQUFJeEMsS0FBTSxDQUNwQjhyQixLQUFNdXlELEVBQUt2eUQsS0FDWDQ3QyxlQUVLQSxDQUNULENBSUEsT0FBQTM5QyxDQUFRd3ZELEdBQWEsTWRqUEEsRUFBQzU1QyxFQUFTNDVDLElETjFCLFNBQVkvYSxFQUFNNXJDLEVBQU83ZixHQUM1QixNQUFNOHVDLEVBQU84MkIsR0FBcUI1bEUsR0FDbEMsT0FBeUIsbUJBQVY2ZixFQUF1QkEsRUFBUSxHQUFXQSxFQUFPaXZCLElBQU8yYyxFQUMzRSxDQ0crQyxDQUM3QzcrQixFQUNBNDVDLEVBQ0EsQ0FDRStFLFFBQVEsRUFDUnIxQyxRQUFTc3dDLEVBQVUzakQsU0FBUyxVQUFZK0osT0FBVSxFQUNsRHl6QixTQUFVb1QsR0FBVzdtQyxHQUNyQitSLGFjME8wQjNuQixDQUFRL3BCLEtBQU11NUUsRUFBWSxDQUN0RCxPQUFBdDRDLENBQVFzNEMsR0FDTixJQUFJejZDLEVBQWdCOStCLEtBQ3BCLE1BQU0rcEIsRUFBVXV2RCxHQUFheDZDLEVBQWV5NkMsR0FDNUMsS0FBT3o2QyxJQUFrQi9VLEVBQVErVSxJQUMvQkEsRUFBZ0JBLEVBQWNBLGNBQ2hDLE9BQU9BLENBQ1QsQ0FJQSxxQkFBQXkvQyxDQUFzQjV5QyxFQUFVaE0sR0FDOUIsTUFBTSxjQUFDYixHQUFpQjkrQixLQUN4QixPQUFRMnJDLEdBQ04sSUFBSyxjQUNILEdBQUk3TSxFQUFlLENBQ2pCQSxFQUFjNnVDLGFBQWFodUMsRUFBUzMvQixNQUNwQyxLQUNGLENBQ0EsT0FBTyxLQUNULElBQUssYUFDSEEsS0FBSzJ0RSxhQUFhaHVDLEVBQVMzL0IsS0FBS3V0RSxZQUNoQyxNQUNGLElBQUssWUFDSHZ0RSxLQUFLMnRFLGFBQWFodUMsRUFBUyxNQUMzQixNQUNGLElBQUssV0FDSCxHQUFJYixFQUFlLENBQ2pCQSxFQUFjNnVDLGFBQWFodUMsRUFBUzMvQixLQUFLK3BFLGFBQ3pDLEtBQ0YsQ0FDQSxPQUFPLEtBRVgsT0FBT3BxQyxDQUNULENBRUEsa0JBQUE2K0MsQ0FBbUI3eUMsRUFBVS9TLEdBQzNCLE1BQU1rbEQsRUFBVzk5RSxLQUFLeW1FLGNBQWN6bkQsY0FBYyxZQUNsRDgrRCxFQUFTNzdDLFVBQVlySixFQUNyQjU0QixLQUFLdStFLHNCQUFzQjV5QyxFQUFVbXlDLEVBQVN6a0QsUUFDaEQsQ0FFQSxrQkFBQW9sRCxDQUFtQjl5QyxFQUFVbG1DLEdBQzNCLE1BQU04NEQsRUFBT3YrRCxLQUFLeW1FLGNBQWM3bkQsZUFBZW5aLEdBQy9DekYsS0FBS3UrRSxzQkFBc0I1eUMsRUFBVTR5QixFQUN2QyxDQUdBLFNBQUFtUCxDQUFVd00sR0FBTyxHQUNmLE1BQU0sY0FBQ3pULEVBQWEsVUFBRUcsR0FBYTVtRSxLQUM3QjArRSxFQUFVL3hELElBQ2RBLEVBQUt6TixXQUFhQSxFQUNsQnduRCxHQUFjb1QsRUFBT250RCxHQUNyQm10RCxFQUFRbnRELENBQUksRUFFUi9qQixFQUFRLEdBQU82OUQsRUFBZXptRSxLQUFNNG1FLEdBQzFDLElBQUkxbkQsRUFBYXRXLEVBQU9reEUsRUFBUWx4RSxHQUMzQixDQUFDd2tELEdBQU96Z0MsRUFBTSxDQUFDLEdBQU0vRixHQUFRNW1CLEtBQ2xDLEtBQU8yc0IsSUFBUy9GLElBQVNzekQsR2xEbFpDLElrRGtaT3Z0RCxFQUFLNDVDLFdBQThCLENBQ2xFLE9BQVE1NUMsRUFBSzQ1QyxVQUNYLEtBQUssR0FDSEcsR0FBY29ULEVBQU81NkQsRUFBVyxJQUNoQzQ2RCxFQUFRNTZELEVBQVcsR0FDbkJBLEVBQWFBLEVBQVdBLFdBQ3hCLE1BQ0YsS2xEMVpvQixFa0QwWkQsQ0FDakIsTUFBTXEvQyxFQUFPLEdBQU9rSSxFQUFlOTVDLEVBQU1BLEVBQUtpNkMsV0FDOUM4WCxFQUFRbmdCLEdBQ1JyL0MsRUFBYXEvQyxFQUNiLEtBQ0YsQ0FDQSxLbEQvWnNCLEVrRCtaRCxDQUNuQixNQUFNbDZCLEVBQU8xWCxFQUFLK2dELFVBQVV3TSxHQUM1QjcxQyxFQUFLbWtDLGFBQWV0cEQsRUFDcEJ3L0QsRUFBUXI2QyxHQUNSLEtBQ0YsQ0FDQSxLbERwYWlCLEVrRHFhakIsS2xEbmFvQixFa0RvYXBCLEtsRHJhMEIsRWtEc2F4QnE2QyxFQUFRL3hELEVBQUsrZ0QsVUFBVXdNLElBRzNCdnRELEVBQU9BLEVBQUt5Z0MsRUFDZCxDQUVBLE9BREFzWixHQUFjb1QsRUFBT2x4RSxFQUFNLElBQ3BCQSxDQUNULENBR0EsUUFBQXpDLEdBQ0UsTUFBTXc0RSxFQUFNLElBQ0wsQ0FBQyxHQUFNbHNFLEdBQU96UyxLQUNyQixJQUFJMnNCLEVBQU8sQ0FBQyxDQUFDeWdDLEdBQU9wdEQsTUFDaEI0K0UsR0FBVyxFQUNmLEdBRUUsT0FEQWp5RCxFQUFPQSxFQUFLeWdDLEdBQ0p6Z0MsRUFBSzQ1QyxVQUNYLEtsRDFic0IsRWtEMGJELENBQ25CLE1BQU1saUMsRUFBTyxJQUFNMVgsRUFDbkIsT0FBUTBYLEdBQ04sSUFBSyxNQUNMLElBQUssU0FDTCxJQUFLLFNBQ0gsTUFDRixRQUNFczZDLEVBQUkxOUUsS0FBS29qQyxHQUViLEtBQ0YsQ0FDQSxLQUFLLEdBQVUsQ0FDYixNQUFNNVUsRUFBUTlDLEVBQUs2Z0MsR0FDZm94QixHQUNFLG9CQUFxQm52RCxFQUN2Qmt2RCxFQUFJMTlFLEtBQUssT0FDRm04RSxHQUFPM3RELEdBQ2RrdkQsRUFBSTE5RSxLQUFLdWxFLEdBQVcvMkMsR0FBUyxJQUFNLE9BRW5Da3ZELEVBQUkxOUUsS0FBSyxNQUFNd3VCLEVBQU1tM0MsY0FDdkJnWSxHQUFXLEdBR1hELEVBQUkxOUUsS0FBSyxLQUFLd3VCLEVBQU1tM0MsY0FDdEIsS0FDRixDQUNBLEtsRHRkb0IsRWtEdWRkZ1ksR0FDRkQsRUFBSTE5RSxLQUFLLEtBQ1AwckIsRUFBS3htQixXQUFhbkcsS0FBS21HLFVBQ3pCdzRFLEVBQUkxOUUsS0FBSzByQixFQUFLeG1CLFlBQ2R3bUIsRUFBT0EsRUFBSyxHQUNaaXlELEdBQVcsSUFHWEQsRUFBSTE5RSxLQUFLLElBQUkwckIsRUFBS2k2QyxhQUNsQmdZLEdBQVcsR0FFYixNQUNGLEtsRGplaUIsRWtEa2VqQixLbERoZW9CLEVrRGllcEIsS2xEbGUwQixFa0RtZXhCRCxFQUFJMTlFLE1BQU0yOUUsRUFBVyxJQUFNLElBQU1qeUQsR0FDakNpeUQsR0FBVyxTQUdSanlELElBQVNsYSxHQUNsQixPQUFPa3NFLEVBQUl4OUUsS0FBSyxHQUNsQixDQUVBLE1BQUF3c0MsR0FDRSxNQUFNOVEsRUFBTyxHQUViLE9BREEwc0MsR0FBY3ZwRSxLQUFNNjhCLEdBQ2JBLENBQ1QsQ0FLQSxjQUFBZ2lELENBQWVwdkUsRUFBR3RNLEdBQVEsT0FBT25ELEtBQUt3K0IsYUFBYXI3QixFQUFPLENBQzFELHNCQUFBMjdFLENBQXVCcnZFLEVBQUd0TSxHQUFRLE9BQU9uRCxLQUFLeWpFLHFCQUFxQnRnRSxFQUFPLENBQzFFLGNBQUE0N0UsQ0FBZXR2RSxFQUFHdE0sR0FBUSxPQUFPbkQsS0FBSzQvQixhQUFhejhCLEVBQU8sQ0FDMUQsaUJBQUE2N0UsQ0FBa0J2dkUsRUFBR3RNLEdBQVFuRCxLQUFLOHFFLGdCQUFnQjNuRSxFQUFPLENBQ3pELGNBQUE4N0UsQ0FBZXh2RSxFQUFHdE0sRUFBTUssR0FBU3hELEtBQUt5akMsYUFBYXRnQyxFQUFNSyxFQUFRLENBQ2pFLGtCQUFBMDdFLENBQW1CNzZDLEdBQVEsT0FBT3JrQyxLQUFLb29FLGlCQUFpQi9qQyxFQUFPLEVDN2ZqRSxNQUFNODZDLEdBQWEsSUFBSWgyQixRQUVqQixHQUFVLENBQ2R0b0QsSUFBRyxDQUFDaWEsRUFBUTNYLElBQ0gyWCxFQUFPM1gsR0FFaEJYLElBQUcsQ0FBQ3NZLEVBQVEzWCxFQUFNSyxLQUNoQnNYLEVBQU8zWCxHQUFRSyxHQUNSLElBT0osTUFBTSxXQUFtQixHQUM5QixXQUFBcEQsQ0FBWXFtRSxFQUFlRyxFQUFXK0IsRUFBa0IsTUFDdER1RSxNQUFNekcsRUFBZUcsR0FDckI1bUUsS0FBSzJvRSxnQkFBa0JBLENBQ3pCLENBRUEsYUFBSTl5QyxHQUdGLE9BRktzcEQsR0FBV3pxQyxJQUFJMTBDLE9BQ2xCbS9FLEdBQVczOEUsSUFBSXhDLEtBQU0sSUFBSXVxRCxNQUFNLENBQUM2MEIsUUFBUyxHQUFJQyxRQUFTLElBQUssS0FDdERGLEdBQVd0K0UsSUFBSWIsS0FDeEIsQ0FHQSxhQUFJNjFCLENBQVVyeUIsR0FDWixNQUFNLFVBQUM2MUUsR0FBYXI1RSxLQUNwQnE1RSxFQUFVaGtELFFBQ1Zna0QsRUFBVS9tRCxPQUFRLEdBQU85dUIsR0FBTzhFLE1BQU0sT0FDeEMsQ0FHQSxnQkFBSSswRSxHQUNGLE1BQU8sNEJBQ1QsQ0FFQSxZQUFBNytDLENBQWFyN0IsR0FDWCxNQUFnQixVQUFUQSxFQUNMLElBQUluRCxLQUFLcTVFLFdBQVdsNEUsS0FBSyxLQUN6QityRSxNQUFNMXVDLGFBQWFyN0IsRUFDdkIsQ0FFQSxZQUFBc2dDLENBQWF0Z0MsRUFBTUssR0FDakIsR0FBYSxVQUFUTCxFQUNGbkQsS0FBSzYxQixVQUFZcnlCLE9BQ2QsR0FBYSxVQUFUTCxFQUFrQixDQUN6QixNQUFNLFVBQUMweUIsR0FBYTcxQixLQUNwQjYxQixFQUFVdXBELFFBQVV2cEQsRUFBVXdwRCxRQUFVNzdFLENBQzFDLENBQ0EwcEUsTUFBTXpwQyxhQUFhdGdDLEVBQU1LLEVBQzNCLEVDekNLLE1BQU04N0UsR0FBcUIsS0FDaEMsTUFBTSxJQUFJMS9ELFVBQVUsc0JBQXNCLEVBR3JDLFNBQVMsS0FBUzAvRCxJQUFzQixDQUl4QyxTQUFTLEtBQWlCQSxJQUFzQixDQUloRCxTQUFTLEtBQWtCQSxJQUFzQixDQUlqRCxTQUFTLEtBQVlBLElBQXNCLENBSTNDLFNBQVMsS0FBcUJBLElBQXNCLENBSXBELFNBQVMsS0FBaUJBLElBQXNCLENBSWhELFNBQVMsS0FBWUEsSUFBc0IsQ0FJM0MsU0FBUyxLQUFTQSxJQUFzQixDQUl4QyxTQUFTLEtBQWVBLElBQXNCLENBSTlDLFNBQVMsS0FBU0EsSUFBc0IsQ0FJeEMsU0FBUyxLQUFlQSxJQUFzQixDQXZDckRsWixHQUFlLEdBQU0sSUFDckIsR0FBS2ptRSxVQUFZLEdBQU1BLFVBR3ZCaW1FLEdBQWUsR0FBYyxJQUM3QixHQUFham1FLFVBQVksR0FBY0EsVUFHdkNpbUUsR0FBZSxHQUFlLElBQzlCLEdBQWNqbUUsVUFBWSxHQUFlQSxVQUd6Q2ltRSxHQUFlLEdBQVMsSUFDeEIsR0FBUWptRSxVQUFZLEdBQVNBLFVBRzdCaW1FLEdBQWUsR0FBa0IsSUFDakMsR0FBaUJqbUUsVUFBWSxHQUFrQkEsVUFHL0NpbUUsR0FBZSxHQUFjLElBQzdCLEdBQWFqbUUsVUFBWSxHQUFjQSxVQUd2Q2ltRSxHQUFlLEdBQVMsSUFDeEIsR0FBUWptRSxVQUFZLEdBQVNBLFVBRzdCaW1FLEdBQWUsR0FBTSxJQUNyQixHQUFLam1FLFVBQVksR0FBTUEsVUFHdkJpbUUsR0FBZSxHQUFZLElBQzNCLEdBQVdqbUUsVUFBWSxHQUFZQSxVQUduQ2ltRSxHQUFlLEdBQU0sSUFDckIsR0FBS2ptRSxVQUFZLEdBQU1BLFVBR3ZCaW1FLEdBQWUsR0FBWSxJQUMzQixHQUFXam1FLFVBQVksR0FBWUEsVUFHNUIsTUFBTW8vRSxHQUFVLENBQ3JCQyxLQUFJLEdBQ0pDLGFBQVksR0FDWnJRLGNBQWEsR0FDYm5SLFFBQU8sR0FDUG9jLGlCQUFnQixHQUNoQnFGLGFBQVksR0FDWjNQLFFBQU8sR0FDUDRQLEtBQUksR0FDSjFDLFdBQVUsR0FDVjFwQixLQUFJLEdBQ0pxc0IsV0FBVSxJQ3BFTkMsR0FBUyxJQUFJMTJCLFFBQ2IyMkIsR0FBUyxDQUNiai9FLElBQUcsQ0FBQzgrQixFQUFTeDhCLElBQ0owOEUsR0FBT25yQyxJQUFJL1UsSUFBWWtnRCxHQUFPaC9FLElBQUk4K0IsR0FBU3g4QixJQUFTLEtBRTdELEdBQUFYLENBQUltOUIsRUFBU3g4QixFQUFNSyxHQUNacThFLEdBQU9uckMsSUFBSS9VLElBQ2RrZ0QsR0FBT3I5RSxJQUFJbTlCLEVBQVMsQ0FBQyxHQUN2QixNQUFNa1EsRUFBV2d3QyxHQUFPaC9FLElBQUk4K0IsR0FDdEJqL0IsRUFBT3lDLEVBQUtKLE1BQU0sR0FDcEI4c0MsRUFBUzFzQyxJQUNYdzhCLEVBQVE2RixvQkFBb0I5a0MsRUFBTW12QyxFQUFTMXNDLElBQU8sSUFDL0Mwc0MsRUFBUzFzQyxHQUFRSyxJQUNwQm04QixFQUFRbFIsaUJBQWlCL3RCLEVBQU04QyxHQUFPLEVBQzFDLEdBTUssTUFBTSxXQUFvQixHQUUvQiw2QkFBVzRqRSxHQUF1QixNQUFPLEVBQUksQ0FFN0MsV0FBQWhuRSxDQUFZcW1FLEVBQWdCLEtBQU1HLEVBQVksSUFDNUNzRyxNQUFNekcsRUFBZUcsR0FFckIsTUFBTW1aLEdBQWF0WixFQUNuQixJQUFJMXpELEVBRUosR0FBSWd0RSxFQUFXLENBQ2IsTUFBTzMvRSxZQUFhMm5FLEdBQVMvbkUsS0FDN0IsSUFBS2duRSxHQUFRdHlCLElBQUlxekIsR0FDZixNQUFNLElBQUl0aEUsTUFBTSw4Q0FDaEJnZ0UsZ0JBQWVHLFlBQVc3ekQsV0FBV2kwRCxHQUFRbm1FLElBQUlrbkUsR0FDckQsQ0FFQSxHQUFJdEIsRUFBYy9ZLEdBQVUsQ0FDMUIsTUFBTSxRQUFDL3RCLEVBQU8sT0FBRXQzQixHQUFVbytELEVBQWMvWSxHQUN4QytZLEVBQWMvWSxHQUFXLEtBQ3pCLElBQUssTUFBT2oxQixFQUFLajFCLEtBQVU2RSxFQUN6QnMzQixFQUFRbEgsR0FBT2oxQixFQUNqQixPQUFPbThCLENBQ1QsQ0FFSW9nRCxJQUNGLy9FLEtBQUt5bUUsY0FBZ0J6bUUsS0FBSyxHQUFLeW1FLGNBQWdCQSxFQUMvQ3ptRSxLQUFLNG1FLFVBQVlBLEVBQ2pCbjJDLEdBQWVqdUIsSUFBSXhDLEtBQU0sQ0FBQ3VuRSxXQUFXLElBQ2pDeDBELEVBQVFrMUQsSUFDVmpvRSxLQUFLeWpDLGFBQWEsS0FBTTF3QixFQUFRazFELElBRXRDLENBWUEsSUFBQStYLEdBQVNoZ0YsS0FBS2lzRSxjQUFjLElBQUksR0FBTSxRQUFVLENBQ2hELEtBQUFnVSxHQUNFLE1BQU1DLEVBQWEsSUFBSSxHQUFNLFFBQVMsQ0FBQzlULFNBQVMsRUFBTTZQLFlBQVksSUFDbEVpRSxFQUFXOUosT0FBUyxFQUVwQnAyRSxLQUFLaXNFLGNBQWNpVSxFQUNyQixDQUdBLGtCQUFJQyxHQUNGLE1BQU0sVUFBQ0MsR0FBYXBnRixLQUNwQixPQUFPb2dGLEdBQWEsYUFBYUEsR0FDbkMsQ0FDQSxxQkFBSUMsR0FBc0IsT0FBT3JnRixLQUFLNC9CLGFBQWEsa0JBQW9CLENBR3ZFLG1CQUFJMGdELEdBQW9CLE9BQU92VixHQUFpQmxxRSxJQUFJYixLQUFNLGtCQUFvQixDQUM5RSxtQkFBSXNnRixDQUFnQjk4RSxHQUFTdW5FLEdBQWlCdm9FLElBQUl4QyxLQUFNLGtCQUFtQndELEVBQVEsQ0FDbkYsYUFBSSs4RSxHQUFjLE9BQU94VixHQUFpQmxxRSxJQUFJYixLQUFNLFlBQWMsQ0FDbEUsYUFBSXVnRixDQUFVLzhFLEdBQVN1bkUsR0FBaUJ2b0UsSUFBSXhDLEtBQU0sWUFBYXdELEVBQVEsQ0FDdkUsVUFBSWc5RSxHQUFXLE9BQU96VixHQUFpQmxxRSxJQUFJYixLQUFNLFNBQVcsQ0FDNUQsVUFBSXdnRixDQUFPaDlFLEdBQVN1bkUsR0FBaUJ2b0UsSUFBSXhDLEtBQU0sU0FBVXdELEVBQVEsQ0FDakUsY0FBSWk5RSxHQUFlLE9BQU8xVixHQUFpQmxxRSxJQUFJYixLQUFNLGFBQWUsQ0FDcEUsY0FBSXlnRixDQUFXajlFLEdBQVN1bkUsR0FBaUJ2b0UsSUFBSXhDLEtBQU0sYUFBY3dELEVBQVEsQ0FHekUsYUFBSTQ4RSxHQUFjLE9BQU9sVixHQUFnQnJxRSxJQUFJYixLQUFNLFlBQWMsQ0FDakUsYUFBSW9nRixDQUFVNThFLEdBQVMwbkUsR0FBZ0Ixb0UsSUFBSXhDLEtBQU0sWUFBYXdELEVBQVEsQ0FDdEUsT0FBSWdLLEdBQVEsT0FBTzA5RCxHQUFnQnJxRSxJQUFJYixLQUFNLE1BQVEsQ0FDckQsT0FBSXdOLENBQUloSyxHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLE1BQU93RCxFQUFRLENBQzFELFFBQUlrOUUsR0FBUyxPQUFPeFYsR0FBZ0JycUUsSUFBSWIsS0FBTSxPQUFTLENBQ3ZELFFBQUkwZ0YsQ0FBS2w5RSxHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLE9BQVF3RCxFQUFRLENBQzVELFNBQUlvN0IsR0FBVSxPQUFPc3NDLEdBQWdCcnFFLElBQUliLEtBQU0sUUFBVSxDQUN6RCxTQUFJNCtCLENBQU1wN0IsR0FBUzBuRSxHQUFnQjFvRSxJQUFJeEMsS0FBTSxRQUFTd0QsRUFBUSxDQUc5RCxXQUFJcTVDLEdBQVksT0FBT2lqQyxHQUFPai9FLElBQUliLEtBQU0sVUFBWSxDQUNwRCxXQUFJNjhDLENBQVFyNUMsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLFVBQVd3RCxFQUFRLENBRXpELFVBQUltOUUsR0FBVyxPQUFPYixHQUFPai9FLElBQUliLEtBQU0sU0FBVyxDQUNsRCxVQUFJMmdGLENBQU9uOUUsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLFNBQVV3RCxFQUFRLENBRXZELFlBQUlvOUUsR0FBYSxPQUFPZCxHQUFPai9FLElBQUliLEtBQU0sV0FBYSxDQUN0RCxZQUFJNGdGLENBQVNwOUUsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLFdBQVl3RCxFQUFRLENBRTNELGFBQUlxOUUsR0FBYyxPQUFPZixHQUFPai9FLElBQUliLEtBQU0sWUFBYyxDQUN4RCxhQUFJNmdGLENBQVVyOUUsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLFlBQWF3RCxFQUFRLENBRTdELG9CQUFJczlFLEdBQXFCLE9BQU9oQixHQUFPai9FLElBQUliLEtBQU0sbUJBQXFCLENBQ3RFLG9CQUFJOGdGLENBQWlCdDlFLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxtQkFBb0J3RCxFQUFRLENBRTNFLFlBQUl1OUUsR0FBYSxPQUFPakIsR0FBT2ovRSxJQUFJYixLQUFNLFdBQWEsQ0FDdEQsWUFBSStnRixDQUFTdjlFLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxXQUFZd0QsRUFBUSxDQUUzRCxXQUFJdzlFLEdBQVksT0FBT2xCLEdBQU9qL0UsSUFBSWIsS0FBTSxVQUFZLENBQ3BELFdBQUlnaEYsQ0FBUXg5RSxHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sVUFBV3dELEVBQVEsQ0FFekQsV0FBSXk5RSxHQUFZLE9BQU9uQixHQUFPai9FLElBQUliLEtBQU0sVUFBWSxDQUNwRCxXQUFJaWhGLENBQVF6OUUsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLFVBQVd3RCxFQUFRLENBRXpELGlCQUFJMDlFLEdBQWtCLE9BQU9wQixHQUFPai9FLElBQUliLEtBQU0sZ0JBQWtCLENBQ2hFLGlCQUFJa2hGLENBQWMxOUUsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLGdCQUFpQndELEVBQVEsQ0FFckUsZUFBSTI5RSxHQUFnQixPQUFPckIsR0FBT2ovRSxJQUFJYixLQUFNLGNBQWdCLENBQzVELGVBQUltaEYsQ0FBWTM5RSxHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sY0FBZXdELEVBQVEsQ0FFakUsY0FBSTQ5RSxHQUFlLE9BQU90QixHQUFPai9FLElBQUliLEtBQU0sYUFBZSxDQUMxRCxjQUFJb2hGLENBQVc1OUUsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLGFBQWN3RCxFQUFRLENBRS9ELFVBQUk2OUUsR0FBVyxPQUFPdkIsR0FBT2ovRSxJQUFJYixLQUFNLFNBQVcsQ0FDbEQsVUFBSXFoRixDQUFPNzlFLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxTQUFVd0QsRUFBUSxDQUV2RCxhQUFJODlFLEdBQWMsT0FBT3hCLEdBQU9qL0UsSUFBSWIsS0FBTSxZQUFjLENBQ3hELGFBQUlzaEYsQ0FBVTk5RSxHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sWUFBYXdELEVBQVEsQ0FFN0QsZUFBSSs5RSxHQUFnQixPQUFPekIsR0FBT2ovRSxJQUFJYixLQUFNLGNBQWdCLENBQzVELGVBQUl1aEYsQ0FBWS85RSxHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sY0FBZXdELEVBQVEsQ0FFakUsZUFBSWcrRSxHQUFnQixPQUFPMUIsR0FBT2ovRSxJQUFJYixLQUFNLGNBQWdCLENBQzVELGVBQUl3aEYsQ0FBWWgrRSxHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sY0FBZXdELEVBQVEsQ0FFakUsY0FBSWkrRSxHQUFlLE9BQU8zQixHQUFPai9FLElBQUliLEtBQU0sYUFBZSxDQUMxRCxjQUFJeWhGLENBQVdqK0UsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLGFBQWN3RCxFQUFRLENBRS9ELGVBQUlrK0UsR0FBZ0IsT0FBTzVCLEdBQU9qL0UsSUFBSWIsS0FBTSxjQUFnQixDQUM1RCxlQUFJMGhGLENBQVlsK0UsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLGNBQWV3RCxFQUFRLENBRWpFLFVBQUltK0UsR0FBVyxPQUFPN0IsR0FBT2ovRSxJQUFJYixLQUFNLFNBQVcsQ0FDbEQsVUFBSTJoRixDQUFPbitFLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxTQUFVd0QsRUFBUSxDQUV2RCxvQkFBSW8rRSxHQUFxQixPQUFPOUIsR0FBT2ovRSxJQUFJYixLQUFNLG1CQUFxQixDQUN0RSxvQkFBSTRoRixDQUFpQnArRSxHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sbUJBQW9Cd0QsRUFBUSxDQUUzRSxhQUFJcStFLEdBQWMsT0FBTy9CLEdBQU9qL0UsSUFBSWIsS0FBTSxZQUFjLENBQ3hELGFBQUk2aEYsQ0FBVXIrRSxHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sWUFBYXdELEVBQVEsQ0FFN0QsV0FBSXMrRSxHQUFZLE9BQU9oQyxHQUFPai9FLElBQUliLEtBQU0sVUFBWSxDQUNwRCxXQUFJOGhGLENBQVF0K0UsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLFVBQVd3RCxFQUFRLENBRXpELFdBQUl1WCxHQUFZLE9BQU8ra0UsR0FBT2ovRSxJQUFJYixLQUFNLFVBQVksQ0FDcEQsV0FBSSthLENBQVF2WCxHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sVUFBV3dELEVBQVEsQ0FFekQsV0FBSXUrRSxHQUFZLE9BQU9qQyxHQUFPai9FLElBQUliLEtBQU0sVUFBWSxDQUNwRCxXQUFJK2hGLENBQVF2K0UsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLFVBQVd3RCxFQUFRLENBRXpELFdBQUl3K0UsR0FBWSxPQUFPbEMsR0FBT2ovRSxJQUFJYixLQUFNLFVBQVksQ0FDcEQsV0FBSWdpRixDQUFReCtFLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxVQUFXd0QsRUFBUSxDQUV6RCxhQUFJeStFLEdBQWMsT0FBT25DLEdBQU9qL0UsSUFBSWIsS0FBTSxZQUFjLENBQ3hELGFBQUlpaUYsQ0FBVXorRSxHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sWUFBYXdELEVBQVEsQ0FFN0QsYUFBSTArRSxHQUFjLE9BQU9wQyxHQUFPai9FLElBQUliLEtBQU0sWUFBYyxDQUN4RCxhQUFJa2lGLENBQVUxK0UsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLFlBQWF3RCxFQUFRLENBRTdELGNBQUkyK0UsR0FBZSxPQUFPckMsR0FBT2ovRSxJQUFJYixLQUFNLGFBQWUsQ0FDMUQsY0FBSW1pRixDQUFXMytFLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxhQUFjd0QsRUFBUSxDQUUvRCxXQUFJNCtFLEdBQVksT0FBT3RDLEdBQU9qL0UsSUFBSWIsS0FBTSxVQUFZLENBQ3BELFdBQUlvaUYsQ0FBUTUrRSxHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sVUFBV3dELEVBQVEsQ0FFekQsVUFBSXFYLEdBQVcsT0FBT2lsRSxHQUFPai9FLElBQUliLEtBQU0sU0FBVyxDQUNsRCxVQUFJNmEsQ0FBT3JYLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxTQUFVd0QsRUFBUSxDQUV2RCxnQkFBSTYrRSxHQUFpQixPQUFPdkMsR0FBT2ovRSxJQUFJYixLQUFNLGVBQWlCLENBQzlELGdCQUFJcWlGLENBQWE3K0UsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLGVBQWdCd0QsRUFBUSxDQUVuRSxvQkFBSTgrRSxHQUFxQixPQUFPeEMsR0FBT2ovRSxJQUFJYixLQUFNLG1CQUFxQixDQUN0RSxvQkFBSXNpRixDQUFpQjkrRSxHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sbUJBQW9Cd0QsRUFBUSxDQUUzRSxlQUFJKytFLEdBQWdCLE9BQU96QyxHQUFPai9FLElBQUliLEtBQU0sY0FBZ0IsQ0FDNUQsZUFBSXVpRixDQUFZLytFLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxjQUFld0QsRUFBUSxDQUVqRSxlQUFJZy9FLEdBQWdCLE9BQU8xQyxHQUFPai9FLElBQUliLEtBQU0sY0FBZ0IsQ0FDNUQsZUFBSXdpRixDQUFZaC9FLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxjQUFld0QsRUFBUSxDQUVqRSxnQkFBSWkvRSxHQUFpQixPQUFPM0MsR0FBT2ovRSxJQUFJYixLQUFNLGVBQWlCLENBQzlELGdCQUFJeWlGLENBQWFqL0UsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLGVBQWdCd0QsRUFBUSxDQUVuRSxnQkFBSWsvRSxHQUFpQixPQUFPNUMsR0FBT2ovRSxJQUFJYixLQUFNLGVBQWlCLENBQzlELGdCQUFJMGlGLENBQWFsL0UsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLGVBQWdCd0QsRUFBUSxDQUVuRSxlQUFJbS9FLEdBQWdCLE9BQU83QyxHQUFPai9FLElBQUliLEtBQU0sY0FBZ0IsQ0FDNUQsZUFBSTJpRixDQUFZbi9FLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxjQUFld0QsRUFBUSxDQUVqRSxjQUFJby9FLEdBQWUsT0FBTzlDLEdBQU9qL0UsSUFBSWIsS0FBTSxhQUFlLENBQzFELGNBQUk0aUYsQ0FBV3AvRSxHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sYUFBY3dELEVBQVEsQ0FFL0QsZUFBSXEvRSxHQUFnQixPQUFPL0MsR0FBT2ovRSxJQUFJYixLQUFNLGNBQWdCLENBQzVELGVBQUk2aUYsQ0FBWXIvRSxHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sY0FBZXdELEVBQVEsQ0FFakUsYUFBSXMvRSxHQUFjLE9BQU9oRCxHQUFPai9FLElBQUliLEtBQU0sWUFBYyxDQUN4RCxhQUFJOGlGLENBQVV0L0UsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLFlBQWF3RCxFQUFRLENBRTdELGdCQUFJdS9FLEdBQWlCLE9BQU9qRCxHQUFPai9FLElBQUliLEtBQU0sZUFBaUIsQ0FDOUQsZ0JBQUkraUYsQ0FBYXYvRSxHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sZUFBZ0J3RCxFQUFRLENBRW5FLFdBQUl3L0UsR0FBWSxPQUFPbEQsR0FBT2ovRSxJQUFJYixLQUFNLFVBQVksQ0FDcEQsV0FBSWdqRixDQUFReC9FLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxVQUFXd0QsRUFBUSxDQUV6RCxVQUFJeS9FLEdBQVcsT0FBT25ELEdBQU9qL0UsSUFBSWIsS0FBTSxTQUFXLENBQ2xELFVBQUlpakYsQ0FBT3ovRSxHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sU0FBVXdELEVBQVEsQ0FFdkQsYUFBSTAvRSxHQUFjLE9BQU9wRCxHQUFPai9FLElBQUliLEtBQU0sWUFBYyxDQUN4RCxhQUFJa2pGLENBQVUxL0UsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLFlBQWF3RCxFQUFRLENBRTdELGNBQUkyL0UsR0FBZSxPQUFPckQsR0FBT2ovRSxJQUFJYixLQUFNLGFBQWUsQ0FDMUQsY0FBSW1qRixDQUFXMy9FLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxhQUFjd0QsRUFBUSxDQUUvRCxnQkFBSTQvRSxHQUFpQixPQUFPdEQsR0FBT2ovRSxJQUFJYixLQUFNLGVBQWlCLENBQzlELGdCQUFJb2pGLENBQWE1L0UsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLGVBQWdCd0QsRUFBUSxDQUVuRSxXQUFJazZELEdBQVksT0FBT29pQixHQUFPai9FLElBQUliLEtBQU0sVUFBWSxDQUNwRCxXQUFJMDlELENBQVFsNkQsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLFVBQVd3RCxFQUFRLENBRXpELFlBQUk2L0UsR0FBYSxPQUFPdkQsR0FBT2ovRSxJQUFJYixLQUFNLFdBQWEsQ0FDdEQsWUFBSXFqRixDQUFTNy9FLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxXQUFZd0QsRUFBUSxDQUUzRCxZQUFJOC9FLEdBQWEsT0FBT3hELEdBQU9qL0UsSUFBSWIsS0FBTSxXQUFhLENBQ3RELFlBQUlzakYsQ0FBUzkvRSxHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sV0FBWXdELEVBQVEsQ0FFM0QsWUFBSSsvRSxHQUFhLE9BQU96RCxHQUFPai9FLElBQUliLEtBQU0sV0FBYSxDQUN0RCxZQUFJdWpGLENBQVMvL0UsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLFdBQVl3RCxFQUFRLENBRTNELGFBQUlnZ0YsR0FBYyxPQUFPMUQsR0FBT2ovRSxJQUFJYixLQUFNLFlBQWMsQ0FDeEQsYUFBSXdqRixDQUFVaGdGLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxZQUFhd0QsRUFBUSxDQUU3RCxZQUFJaWdGLEdBQWEsT0FBTzNELEdBQU9qL0UsSUFBSWIsS0FBTSxXQUFhLENBQ3RELFlBQUl5akYsQ0FBU2pnRixHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sV0FBWXdELEVBQVEsQ0FFM0QsVUFBSWtnRixHQUFXLE9BQU81RCxHQUFPai9FLElBQUliLEtBQU0sU0FBVyxDQUNsRCxVQUFJMGpGLENBQU9sZ0YsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLFNBQVV3RCxFQUFRLENBRXZELGFBQUltZ0YsR0FBYyxPQUFPN0QsR0FBT2ovRSxJQUFJYixLQUFNLFlBQWMsQ0FDeEQsYUFBSTJqRixDQUFVbmdGLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxZQUFhd0QsRUFBUSxDQUU3RCxZQUFJb2dGLEdBQWEsT0FBTzlELEdBQU9qL0UsSUFBSWIsS0FBTSxXQUFhLENBQ3RELFlBQUk0akYsQ0FBU3BnRixHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sV0FBWXdELEVBQVEsQ0FFM0QsYUFBSXFnRixHQUFjLE9BQU8vRCxHQUFPai9FLElBQUliLEtBQU0sWUFBYyxDQUN4RCxhQUFJNmpGLENBQVVyZ0YsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLFlBQWF3RCxFQUFRLENBRTdELGdCQUFJc2dGLEdBQWlCLE9BQU9oRSxHQUFPai9FLElBQUliLEtBQU0sZUFBaUIsQ0FDOUQsZ0JBQUk4akYsQ0FBYXRnRixHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sZUFBZ0J3RCxFQUFRLENBRW5FLFlBQUl1Z0YsR0FBYSxPQUFPakUsR0FBT2ovRSxJQUFJYixLQUFNLFdBQWEsQ0FDdEQsWUFBSStqRixDQUFTdmdGLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxXQUFZd0QsRUFBUSxDQUUzRCxrQkFBSXdnRixHQUFtQixPQUFPbEUsR0FBT2ovRSxJQUFJYixLQUFNLGlCQUFtQixDQUNsRSxrQkFBSWdrRixDQUFleGdGLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxpQkFBa0J3RCxFQUFRLENBRXZFLGFBQUl5Z0YsR0FBYyxPQUFPbkUsR0FBT2ovRSxJQUFJYixLQUFNLFlBQWMsQ0FDeEQsYUFBSWlrRixDQUFVemdGLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxZQUFhd0QsRUFBUSxDQUU3RCxjQUFJMGdGLEdBQWUsT0FBT3BFLEdBQU9qL0UsSUFBSWIsS0FBTSxhQUFlLENBQzFELGNBQUlra0YsQ0FBVzFnRixHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sYUFBY3dELEVBQVEsQ0FFL0QsdUJBQUkyZ0YsR0FBd0IsT0FBT3JFLEdBQU9qL0UsSUFBSWIsS0FBTSxzQkFBd0IsQ0FDNUUsdUJBQUlta0YsQ0FBb0IzZ0YsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLHNCQUF1QndELEVBQVEsQ0FFakYsd0JBQUk0Z0YsR0FBeUIsT0FBT3RFLEdBQU9qL0UsSUFBSWIsS0FBTSx1QkFBeUIsQ0FDOUUsd0JBQUlva0YsQ0FBcUI1Z0YsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLHVCQUF3QndELEVBQVEsQ0FFbkYsbUJBQUk2Z0YsR0FBb0IsT0FBT3ZFLEdBQU9qL0UsSUFBSWIsS0FBTSxrQkFBb0IsQ0FDcEUsbUJBQUlxa0YsQ0FBZ0I3Z0YsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLGtCQUFtQndELEVBQVEsQ0FFekUsaUJBQUk4Z0YsR0FBa0IsT0FBT3hFLEdBQU9qL0UsSUFBSWIsS0FBTSxnQkFBa0IsQ0FDaEUsaUJBQUlza0YsQ0FBYzlnRixHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sZ0JBQWlCd0QsRUFBUSxDQUVyRSxrQkFBSStnRixHQUFtQixPQUFPekUsR0FBT2ovRSxJQUFJYixLQUFNLGlCQUFtQixDQUNsRSxrQkFBSXVrRixDQUFlL2dGLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxpQkFBa0J3RCxFQUFRLENBRXZFLGtCQUFJZ2hGLEdBQW1CLE9BQU8xRSxHQUFPai9FLElBQUliLEtBQU0saUJBQW1CLENBQ2xFLGtCQUFJd2tGLENBQWVoaEYsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLGlCQUFrQndELEVBQVEsQ0FFdkUsaUJBQUlpaEYsR0FBa0IsT0FBTzNFLEdBQU9qL0UsSUFBSWIsS0FBTSxnQkFBa0IsQ0FDaEUsaUJBQUl5a0YsQ0FBY2poRixHQUFTczhFLEdBQU90OUUsSUFBSXhDLEtBQU0sZ0JBQWlCd0QsRUFBUSxDQUVyRSxnQkFBSWtoRixHQUFpQixPQUFPNUUsR0FBT2ovRSxJQUFJYixLQUFNLGVBQWlCLENBQzlELGdCQUFJMGtGLENBQWFsaEYsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLGVBQWdCd0QsRUFBUSxDQUVuRSxpQkFBSW1oRixHQUFrQixPQUFPN0UsR0FBT2ovRSxJQUFJYixLQUFNLGdCQUFrQixDQUNoRSxpQkFBSTJrRixDQUFjbmhGLEdBQVNzOEUsR0FBT3Q5RSxJQUFJeEMsS0FBTSxnQkFBaUJ3RCxFQUFRLENBRXJFLGVBQUlvaEYsR0FBZ0IsT0FBTzlFLEdBQU9qL0UsSUFBSWIsS0FBTSxjQUFnQixDQUM1RCxlQUFJNGtGLENBQVlwaEYsR0FBU3M4RSxHQUFPdDlFLElBQUl4QyxLQUFNLGNBQWV3RCxFQUFRLEVDclRuRSxNQUFNeS9CLEdBQVUsV0FLaEIsTUFBTTRoRCxXQUE0QixHQUNoQyxXQUFBemtGLENBQVlxbUUsR0FDVnlHLE1BQU16RyxFQUFleGpDLElBQ3JCLE1BQU01SixFQUFVcjVCLEtBQUt5bUUsY0FBY3VJLDBCQUNsQ2h2RSxLQUFLMnNELEdBQVd0ekIsR0FBU2kwQixHQUFXdHRELElBQ3ZDLENBRUEsV0FBSXE1QixHQUNGLEdBQUlyNUIsS0FBS2l1RSxrQkFBb0JqdUUsS0FBSzJzRCxHQUFTc2hCLGdCQUN6QyxJQUFLLE1BQU0xUCxLQUFRditELEtBQUtzdEUsV0FDdEJ0dEUsS0FBSzJzRCxHQUFTdHRDLFlBQVlrL0MsRUFBS21QLFdBQVUsSUFFN0MsT0FBTzF0RSxLQUFLMnNELEVBQ2QsRUFHRnVjLEdBQWtCam1DLEdBQVM0aEQsSUN6QjNCLE1BQU8xK0UsU0FBUSxJQUFJLEdBQVloRyxVQUV4QixNQUFNMmtGLFdBQW9CLEdBRS9CLGFBQUk3aUQsR0FBYyxPQUFPamlDLEtBQUt1akMsV0FBYSxDQUMzQyxhQUFJdEIsQ0FBVXJKLEdBQVE1NEIsS0FBS3VqQyxZQUFjM0ssQ0FBTSxDQUUvQyxRQUFBenlCLEdBRUUsT0FEa0IsR0FBU3BHLEtBQUtDLEtBQUswdEUsYUFDcEIxbEUsUUFBUSxNQUFNLElBQU0sSUFBSWhJLEtBQUt1akMsZ0JBQ2hELEVDUEYsTUFBTSxHQUFVLFNBS2hCLE1BQU13aEQsV0FBMEJELEdBQzlCLFdBQUExa0YsQ0FBWXFtRSxFQUFlRyxFQUFZLElBQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLENBRUEsUUFBSWxtRSxHQUNGLE9BQU93cUUsR0FBZ0JycUUsSUFBSWIsS0FBTSxPQUNuQyxDQUNBLFFBQUlVLENBQUs4QyxHQUNQMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLE9BQVF3RCxFQUNwQyxDQUVBLE9BQUl3aEYsR0FDRixPQUFPOVosR0FBZ0JycUUsSUFBSWIsS0FBTSxNQUNuQyxDQUNBLE9BQUlnbEYsQ0FBSXhoRixHQUNOMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLE1BQU93RCxFQUNuQyxDQUVBLFNBQUl5aEYsR0FDRixPQUFPbGEsR0FBaUJscUUsSUFBSWIsS0FBTSxRQUNwQyxDQUVBLFNBQUlpbEYsQ0FBTXpoRixHQUNSdW5FLEdBQWlCdm9FLElBQUl4QyxLQUFNLFFBQVN3RCxFQUN0QyxDQUVBLGVBQUkwaEYsR0FDRixPQUFPaGEsR0FBZ0JycUUsSUFBSWIsS0FBTSxjQUNuQyxDQUNBLGVBQUlrbEYsQ0FBWTFoRixHQUNkMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLGNBQWV3RCxFQUMzQyxDQUVBLFlBQUkyaEYsR0FDRixPQUFPcGEsR0FBaUJscUUsSUFBSWIsS0FBTSxXQUNwQyxDQUNBLFlBQUltbEYsQ0FBUzNoRixHQUNYdW5FLEdBQWlCdm9FLElBQUl4QyxLQUFNLFdBQVl3RCxFQUN6QyxDQUVBLGtCQUFJNGhGLEdBQ0YsT0FBT2xhLEdBQWdCcnFFLElBQUliLEtBQU0saUJBQ25DLENBQ0Esa0JBQUlvbEYsQ0FBZTVoRixHQUNqQjBuRSxHQUFnQjFvRSxJQUFJeEMsS0FBTSxpQkFBa0J3RCxFQUM5QyxDQUVBLFNBQUltNkUsR0FDRixPQUFPelMsR0FBZ0JycUUsSUFBSWIsS0FBTSxRQUNuQyxDQUNBLFNBQUkyOUUsQ0FBTW42RSxHQUNSMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLFFBQVN3RCxFQUNyQyxDQUVBLFNBQUkrYSxHQUNGLE9BQU93c0QsR0FBaUJscUUsSUFBSWIsS0FBTSxRQUNwQyxDQUNBLFNBQUl1ZSxDQUFNL2EsR0FDUnVuRSxHQUFpQnZvRSxJQUFJeEMsS0FBTSxRQUFTd0QsRUFDdEMsQ0FFQSxRQUFJaUMsR0FBUyxPQUFPekYsS0FBS3VqQyxXQUFhLENBQ3RDLFFBQUk5OUIsQ0FBSzR6QixHQUFXcjVCLEtBQUt1akMsWUFBY2xLLENBQVMsRUFHbEQ2dkMsR0FBa0IsR0FBUzZiLElDdkUzQixNQUFNLEdBQVUsU0FLaEIsTUFBTU0sV0FBMEIsR0FDOUIsV0FBQWpsRixDQUFZcW1FLEVBQWVHLEVBQVksSUFDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsQ0FHQSxPQUFJb2UsR0FBUSxPQUFPOVosR0FBZ0JycUUsSUFBSWIsS0FBTSxNQUFRLENBQ3JELE9BQUlnbEYsQ0FBSXhoRixHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLE1BQU93RCxFQUFRLENBRTFELFVBQUk4aEYsR0FBVyxPQUFPcGEsR0FBZ0JycUUsSUFBSWIsS0FBTSxTQUFXLENBQzNELFVBQUlzbEYsQ0FBTzloRixHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLFNBQVV3RCxFQUFRLENBRWhFLFFBQUlMLEdBQVMsT0FBTytuRSxHQUFnQnJxRSxJQUFJYixLQUFNLE9BQVMsQ0FDdkQsUUFBSW1ELENBQUtLLEdBQVMwbkUsR0FBZ0Ixb0UsSUFBSXhDLEtBQU0sT0FBUXdELEVBQVEsQ0FFNUQsU0FBSStoRixHQUFVLE9BQU9yYSxHQUFnQnJxRSxJQUFJYixLQUFNLFFBQVUsQ0FDekQsU0FBSXVsRixDQUFNL2hGLEdBQVMwbkUsR0FBZ0Ixb0UsSUFBSXhDLEtBQU0sUUFBU3dELEVBQVEsQ0FFOUQsbUJBQUlnaUYsR0FBb0IsT0FBT3phLEdBQWlCbHFFLElBQUliLEtBQU0sa0JBQW9CLENBQzlFLG1CQUFJd2xGLENBQWdCaGlGLEdBQVN1bkUsR0FBaUJ2b0UsSUFBSXhDLEtBQU0sa0JBQW1Cd0QsRUFBUSxDQUVuRixrQkFBSTRoRixHQUFtQixPQUFPbGEsR0FBZ0JycUUsSUFBSWIsS0FBTSxpQkFBbUIsQ0FDM0Usa0JBQUlvbEYsQ0FBZTVoRixHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLGlCQUFrQndELEVBQVEsQ0FFaEYsV0FBSWlpRixHQUFZLE9BQU92YSxHQUFnQnJxRSxJQUFJYixLQUFNLFVBQVksQ0FDN0QsV0FBSXlsRixDQUFRamlGLEdBQVMwbkUsR0FBZ0Ixb0UsSUFBSXhDLEtBQU0sVUFBV3dELEVBQVEsRUFJcEUwbEUsR0FBa0IsR0FBU21jLGtCQ2hDM0IsTUFBTSxHQUFVLFFBS2hCLE1BQU1LLFdBQXlCWixHQUM3QixXQUFBMWtGLENBQVlxbUUsRUFBZUcsRUFBWSxJQUNyQ3NHLE1BQU16RyxFQUFlRyxHQUNyQjVtRSxLQUFLdXRELEdBQVMsSUFDaEIsQ0FFQSxTQUFJbzRCLEdBQ0YsTUFBTUEsRUFBUTNsRixLQUFLdXRELEdBQ25CLE9BQWMsT0FBVm80QixFQUNLQSxFQUVGM2xGLEtBQUt1dEQsSUFBUyxLQUFBMXJELE9BQU03QixLQUFLdWpDLFlBQ2xDLENBRUEsYUFBSXRCLEdBQ0YsT0FBT2lyQyxNQUFNanJDLFdBQWEsRUFDNUIsQ0FDQSxhQUFJQSxDQUFVeitCLEdBQ1owcEUsTUFBTTNwQyxZQUFjLy9CLEVBQ3BCeEQsS0FBS3V0RCxHQUFTLElBQ2hCLENBQ0EsYUFBSTV1QixHQUNGLE9BQU91dUMsTUFBTXZ1QyxXQUFhLEVBQzVCLENBQ0EsYUFBSUEsQ0FBVW43QixHQUNaMHBFLE1BQU0zcEMsWUFBYy8vQixFQUNwQnhELEtBQUt1dEQsR0FBUyxJQUNoQixDQUNBLGVBQUlocUIsR0FDRixPQUFPMnBDLE1BQU0zcEMsYUFBZSxFQUM5QixDQUNBLGVBQUlBLENBQVkvL0IsR0FDZDBwRSxNQUFNM3BDLFlBQWMvL0IsRUFDcEJ4RCxLQUFLdXRELEdBQVMsSUFDaEIsRUFHRjJiLEdBQWtCLEdBQVN3YyxJQ3pDM0IsTUFBTUUsV0FBd0IsR0FDNUIsV0FBQXhsRixDQUFZcW1FLEVBQWVHLEVBQVksUUFDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsQ0FLQSxZQUFJaWYsR0FBYSxPQUFPM2EsR0FBZ0JycUUsSUFBSWIsS0FBTSxXQUFhLENBQy9ELFlBQUk2bEYsQ0FBU3JpRixHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLFdBQVl3RCxFQUFRLEVBR3RFMGxFLEdBQWtCLE9BQVEwYyxJQ2YxQixNQUFNLEdBQVUsUUFLaEIsTUFBTUUsV0FBeUIsR0FDN0IsV0FBQTFsRixDQUFZcW1FLEVBQWVHLEVBQVksSUFDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsQ0FHQSxhQUFJbWYsR0FBYyxPQUFPaGIsR0FBaUJscUUsSUFBSWIsS0FBTSxlQUFpQixDQUFHLENBQ3hFLGFBQUkrbEYsQ0FBVXZpRixHQUFTdW5FLEdBQWlCdm9FLElBQUl4QyxLQUFNLFlBQWF3RCxFQUFRLENBRXZFLFlBQUlveUUsR0FBYSxPQUFPN0ssR0FBaUJscUUsSUFBSWIsS0FBTSxXQUFhLENBQ2hFLFlBQUk0MUUsQ0FBU3B5RSxHQUFTdW5FLEdBQWlCdm9FLElBQUl4QyxLQUFNLFdBQVl3RCxFQUFRLENBRXJFLFFBQUlMLEdBQVMsT0FBT25ELEtBQUt3K0IsYUFBYSxPQUFTLENBQy9DLFFBQUlyN0IsQ0FBS0ssR0FBU3hELEtBQUt5akMsYUFBYSxPQUFRamdDLEVBQVEsQ0FFcEQsZUFBSXV5QixHQUFnQixPQUFPLzFCLEtBQUt3K0IsYUFBYSxjQUFnQixDQUM3RCxlQUFJekksQ0FBWXZ5QixHQUFTeEQsS0FBS3lqQyxhQUFhLGNBQWVqZ0MsRUFBUSxDQUVsRSxRQUFJOUMsR0FBUyxPQUFPVixLQUFLdytCLGFBQWEsT0FBUyxDQUMvQyxRQUFJOTlCLENBQUs4QyxHQUFTeEQsS0FBS3lqQyxhQUFhLE9BQVFqZ0MsRUFBUSxDQUVwRCxTQUFJQSxHQUFVLE9BQU8wbkUsR0FBZ0JycUUsSUFBSWIsS0FBTSxRQUFVLENBQ3pELFNBQUl3RCxDQUFNQSxHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLFFBQVN3RCxFQUFRLEVBSWhFMGxFLEdBQWtCLEdBQVM0YyxJQzNCM0IsTUFBTUUsV0FBMkIsR0FDL0IsV0FBQTVsRixDQUFZcW1FLEVBQWVHLEVBTmIsTUFPWnNHLE1BQU16RyxFQUFlRyxFQUN2QixFQUdGc0MsR0FBa0IsQ0FYRixLQVdZLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFBTzhjLGtCQ04zRCxNQUFNLGFBQUN0L0MsSUFBZ0IsR0FFakIsR0FBVSxTQUtoQixNQUFNdS9DLFdBQTBCLEdBQzlCLFdBQUE3bEYsQ0FBWXFtRSxFQUFlRyxFQUFZLElBQ3JDc0csTUFBTXpHLEVBQWVHLEdBQ3JCNW1FLEtBQUtpdEQsR0FBU3ZtQixHQUFhLElBQUssSUFDbEMsQ0FFQSxTQUFJSixHQUNGLE9BQU90bUMsS0FBS2l0RCxHQUFPM21CLEtBQ3JCLENBRUEsU0FBSUEsQ0FBTTlpQyxHQUNSd25FLEdBQWlCeG9FLElBQUl4QyxLQUFNLFFBQVN3RCxHQUNwQ3hELEtBQUtpdEQsR0FBTzNtQixNQUFROWlDLENBQ3RCLENBRUEsVUFBSStpQyxHQUNGLE9BQU92bUMsS0FBS2l0RCxHQUFPMW1CLE1BQ3JCLENBRUEsVUFBSUEsQ0FBTy9pQyxHQUNUd25FLEdBQWlCeG9FLElBQUl4QyxLQUFNLFNBQVV3RCxHQUNyQ3hELEtBQUtpdEQsR0FBTzFtQixPQUFTL2lDLENBQ3ZCLENBRUEsVUFBQWdqQyxDQUFXOWxDLEdBQ1QsT0FBT1YsS0FBS2l0RCxHQUFPem1CLFdBQVc5bEMsRUFDaEMsQ0FFQSxTQUFBK2xDLElBQWE1WCxHQUNYLE9BQU83dUIsS0FBS2l0RCxHQUFPeG1CLGFBQWE1WCxFQUNsQyxFQUdGcTZDLEdBQWtCLEdBQVMrYyxJQzdDM0IsTUFBTSxHQUFVLFNBS2hCLE1BQU1DLFdBQTBCLEdBQzlCLFdBQUE5bEYsQ0FBWXFtRSxFQUFlRyxFQUFZLElBQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLENBR0EsU0FBSXBqRSxHQUFVLE9BQU8wbkUsR0FBZ0JycUUsSUFBSWIsS0FBTSxRQUFVLENBQ3pELFNBQUl3RCxDQUFNQSxHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLFFBQVN3RCxFQUFRLENBRzlELFlBQUl3OEIsR0FBYSxPQUFPK3FDLEdBQWlCbHFFLElBQUliLEtBQU0sV0FBYSxDQUNoRSxZQUFJZ2dDLENBQVN4OEIsR0FDWCxNQUFNZzlCLEVBQVN4Z0MsS0FBSzgrQixlQUFlMU8sY0FBYyxvQkFDN0NvUSxHQUFVQSxJQUFXeGdDLE9BQ3ZCd2dDLEVBQU9SLFVBQVcsR0FDcEIrcUMsR0FBaUJ2b0UsSUFBSXhDLEtBQU0sV0FBWXdELEVBQ3pDLEVBR0YwbEUsR0FBa0IsR0FBU2dkLElDeEIzQixNQUFNLEdBQVUsUUFLaEIsTUFBTUMsV0FBeUJyQixHQUM3QixXQUFBMWtGLENBQVlxbUUsRUFBZUcsRUFBWSxJQUNyQ3NHLE1BQU16RyxFQUFlRyxFQUN2QixFQUdGc0MsR0FBa0IsR0FBU2lkLElDVDNCLE1BQU0sR0FBVSxTQUtoQixNQUFNQyxXQUEwQixHQUM5QixXQUFBaG1GLENBQVlxbUUsRUFBZUcsRUFBWSxJQUNyQ3NHLE1BQU16RyxFQUFlRyxFQUN2QixDQUVBLFdBQUk3ekQsR0FDRixJQUFJNHFCLEVBQVcsSUFBSTR1QyxJQUNmLGtCQUFDcnJDLEdBQXFCbGhDLEtBQzFCLEtBQU9raEMsR0FDNkIsYUFBOUJBLEVBQWtCK0IsUUFDcEJ0RixFQUFTMThCLFFBQVFpZ0MsRUFBa0J2RCxVQUVuQ0EsRUFBUzE4QixLQUFLaWdDLEdBQ2hCQSxFQUFvQkEsRUFBa0JrQixtQkFFeEMsT0FBT3pFLENBQ1QsQ0FHQSxZQUFJaTRDLEdBQWEsT0FBTzdLLEdBQWlCbHFFLElBQUliLEtBQU0sV0FBYSxDQUNoRSxZQUFJNDFFLENBQVNweUUsR0FBU3VuRSxHQUFpQnZvRSxJQUFJeEMsS0FBTSxXQUFZd0QsRUFBUSxDQUVyRSxRQUFJTCxHQUFTLE9BQU9uRCxLQUFLdytCLGFBQWEsT0FBUyxDQUMvQyxRQUFJcjdCLENBQUtLLEdBQVN4RCxLQUFLeWpDLGFBQWEsT0FBUWpnQyxFQUFRLENBR3BELFNBQUlBLEdBQVUsT0FBT3hELEtBQUtvd0IsY0FBYyxxQkFBcUI1c0IsS0FBTyxFQUd0RTBsRSxHQUFrQixHQUFTa2QsSUNuQzNCLE1BQU0sR0FBVSxTQUtoQixNQUFNQyxXQUEwQixHQUM5QixXQUFBam1GLENBQVlxbUUsRUFBZUcsRUFBWSxJQUNyQ3NHLE1BQU16RyxFQUFlRyxFQUN2QixDQUdBLFlBQUlnUCxHQUFhLE9BQU83SyxHQUFpQmxxRSxJQUFJYixLQUFNLFdBQWEsQ0FDaEUsWUFBSTQxRSxDQUFTcHlFLEdBQVN1bkUsR0FBaUJ2b0UsSUFBSXhDLEtBQU0sV0FBWXdELEVBQVEsQ0FFckUsUUFBSUwsR0FBUyxPQUFPbkQsS0FBS3crQixhQUFhLE9BQVMsQ0FDL0MsUUFBSXI3QixDQUFLSyxHQUFTeEQsS0FBS3lqQyxhQUFhLE9BQVFqZ0MsRUFBUSxDQUVwRCxRQUFJOUMsR0FBUyxPQUFPVixLQUFLdytCLGFBQWEsT0FBUyxDQUMvQyxRQUFJOTlCLENBQUs4QyxHQUFTeEQsS0FBS3lqQyxhQUFhLE9BQVFqZ0MsRUFBUSxFQUl0RDBsRSxHQUFrQixHQUFTbWQsSUN0QjNCLE1BQU0sR0FBVSxXQUtoQixNQUFNQyxXQUE0QnhCLEdBQ2hDLFdBQUExa0YsQ0FBWXFtRSxFQUFlRyxFQUFZLElBQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLENBR0EsWUFBSWdQLEdBQWEsT0FBTzdLLEdBQWlCbHFFLElBQUliLEtBQU0sV0FBYSxDQUNoRSxZQUFJNDFFLENBQVNweUUsR0FBU3VuRSxHQUFpQnZvRSxJQUFJeEMsS0FBTSxXQUFZd0QsRUFBUSxDQUVyRSxRQUFJTCxHQUFTLE9BQU9uRCxLQUFLdytCLGFBQWEsT0FBUyxDQUMvQyxRQUFJcjdCLENBQUtLLEdBQVN4RCxLQUFLeWpDLGFBQWEsT0FBUWpnQyxFQUFRLENBRXBELGVBQUl1eUIsR0FBZ0IsT0FBTy8xQixLQUFLdytCLGFBQWEsY0FBZ0IsQ0FDN0QsZUFBSXpJLENBQVl2eUIsR0FBU3hELEtBQUt5akMsYUFBYSxjQUFlamdDLEVBQVEsQ0FFbEUsUUFBSTlDLEdBQVMsT0FBT1YsS0FBS3crQixhQUFhLE9BQVMsQ0FDL0MsUUFBSTk5QixDQUFLOEMsR0FBU3hELEtBQUt5akMsYUFBYSxPQUFRamdDLEVBQVEsQ0FFcEQsU0FBSUEsR0FBVSxPQUFPeEQsS0FBS3VqQyxXQUFhLENBQ3ZDLFNBQUkvL0IsQ0FBTTYxQixHQUFXcjVCLEtBQUt1akMsWUFBY2xLLENBQVMsRUFJbkQ2dkMsR0FBa0IsR0FBU29kLElDNUIzQixNQUFNLEdBQVUsT0FLaEIsTUFBTUMsV0FBd0IsR0FDNUIsV0FBQW5tRixDQUFZcW1FLEVBQWVHLEVBQVksSUFDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsQ0FHQSxZQUFJZ1AsR0FBYSxPQUFPN0ssR0FBaUJscUUsSUFBSWIsS0FBTSxXQUFhLENBQ2hFLFlBQUk0MUUsQ0FBU3B5RSxHQUFTdW5FLEdBQWlCdm9FLElBQUl4QyxLQUFNLFdBQVl3RCxFQUFRLENBRXJFLFFBQUlyQixHQUFTLE9BQU8rb0UsR0FBZ0JycUUsSUFBSWIsS0FBTSxPQUFTLENBQ3ZELFFBQUltQyxDQUFLcUIsR0FBUzBuRSxHQUFnQjFvRSxJQUFJeEMsS0FBTSxPQUFRd0QsRUFBUSxDQUU1RCxZQUFJZ2pGLEdBQWEsT0FBT3RiLEdBQWdCcnFFLElBQUliLEtBQU0sV0FBYSxDQUMvRCxZQUFJd21GLENBQVNoakYsR0FBUzBuRSxHQUFnQjFvRSxJQUFJeEMsS0FBTSxXQUFZd0QsRUFBUSxDQUVwRSxTQUFJcEIsR0FBVSxPQUFPOG9FLEdBQWdCcnFFLElBQUliLEtBQU0sUUFBVSxDQUN6RCxTQUFJb0MsQ0FBTW9CLEdBQVMwbkUsR0FBZ0Ixb0UsSUFBSXhDLEtBQU0sUUFBU3dELEVBQVEsQ0FFOUQsT0FBSWlqRixHQUFRLE9BQU92YixHQUFnQnJxRSxJQUFJYixLQUFNLE1BQVEsQ0FDckQsT0FBSXltRixDQUFJampGLEdBQVMwbkUsR0FBZ0Ixb0UsSUFBSXhDLEtBQU0sTUFBT3dELEVBQVEsQ0FFMUQsUUFBSTlDLEdBQVMsT0FBT3dxRSxHQUFnQnJxRSxJQUFJYixLQUFNLE9BQVMsQ0FDdkQsUUFBSVUsQ0FBSzhDLEdBQVMwbkUsR0FBZ0Ixb0UsSUFBSXhDLEtBQU0sT0FBUXdELEVBQVEsRUFLOUQwbEUsR0FBa0IsR0FBU3FkLElDbEMzQixNQUFNLEdBQVUsT0FLaEIsTUFBTUcsV0FBd0IsR0FDNUIsV0FBQXRtRixDQUFZcW1FLEVBQWVHLEVBQVksSUFDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsQ0FHQSxRQUFJempFLEdBQVMsT0FBT25ELEtBQUt3K0IsYUFBYSxPQUFTLENBQy9DLFFBQUlyN0IsQ0FBS0ssR0FBU3hELEtBQUt5akMsYUFBYSxPQUFRamdDLEVBQVEsQ0FFcEQsTUFBQW1kLEdBQVUsQ0FFVixhQUFBZ21FLENBQWM1ekUsR0FDWixNQUFNNnpFLElBQWdCNW1GLEtBQUttRCxLQUNyQjBqRixFQUFpQjdtRixLQUFLd3VFLGNBQWNoMkIsTUFBTTgwQixZQUFjLEdBQzlELElBQUl3WixFQVFKLEdBTEVBLEVBREVGLEVBQ1csSUFBSUMsR0FBZ0JqeEUsUUFBTzJvRCxHQUFRQSxFQUFLc2YsT0FBUzc5RSxLQUFLbUQsT0FFdEQsSUFBSTBqRixHQUFnQmp4RSxRQUFPMm9ELElBQVNBLEVBQUtzZixPQUdwRDlxRSxHQUFTZzBFLFFBQVMsQ0FDcEIsTUFBTTNnRixFQUFTLEdBR2YsSUFBSyxJQUFJNGdGLEtBQWFGLEVBQ1EsU0FBeEJFLEVBQVVwZ0IsVUFDWnhnRSxFQUFPbkYsUUFBUStsRixFQUFVTCxjQUFjLENBQUVJLFNBQVMsS0FFbEQzZ0YsRUFBT25GLEtBQUsrbEYsR0FJaEJGLEVBQWExZ0YsQ0FDZixDQUdBLE9BQU8wZ0YsRUFBVzlsRixPQUFTOGxGLEVBQWEsSUFBSTltRixLQUFLc3RFLFdBQ25ELENBRUEsZ0JBQUEyWixDQUFpQmwwRSxHQUNmLE1BQU0rekUsRUFBYTltRixLQUFLMm1GLGNBQWM1ekUsR0FBUzZDLFFBQU94SyxHQUFvQixJQUFmQSxFQUFFbTdELFdBRzdELE9BQU91Z0IsRUFBVzlsRixPQUFTOGxGLEVBQWEsSUFBSTltRixLQUFLMjlCLFNBQ25ELEVBSUZ1ckMsR0FBa0IsR0FBU3dkLElDaEQzQixNQUFNUSxXQUF5QixHQUM3QixXQUFBOW1GLENBQVlxbUUsRUFBZUcsRUFOYixPQU9ac0csTUFBTXpHLEVBQWVHLEVBQ3ZCLENBR0EsT0FBSXZvQyxHQUFRLE9BQU82c0MsR0FBZ0JycUUsSUFBSWIsS0FBTSxNQUFRLENBQ3JELE9BQUlxK0IsQ0FBSTc2QixHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLE1BQU93RCxFQUFRLENBRTFELFNBQUkyakYsR0FBVSxPQUFPamMsR0FBZ0JycUUsSUFBSWIsS0FBTSxRQUFVLENBQ3pELFNBQUltbkYsQ0FBTTNqRixHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLFFBQVN3RCxFQUFRLENBRTlELE9BQUl3aEYsR0FBUSxPQUFPOVosR0FBZ0JycUUsSUFBSWIsS0FBTSxNQUFRLENBQ3JELE9BQUlnbEYsQ0FBSXhoRixHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLE1BQU93RCxFQUFRLENBRTFELFVBQUk0akYsR0FBVyxPQUFPbGMsR0FBZ0JycUUsSUFBSWIsS0FBTSxTQUFXLENBQzNELFVBQUlvbkYsQ0FBTzVqRixHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLFNBQVV3RCxFQUFRLENBRWhFLFNBQUlvN0IsR0FBVSxPQUFPc3NDLEdBQWdCcnFFLElBQUliLEtBQU0sUUFBVSxDQUN6RCxTQUFJNCtCLENBQU1wN0IsR0FBUzBuRSxHQUFnQjFvRSxJQUFJeEMsS0FBTSxRQUFTd0QsRUFBUSxDQUU5RCxTQUFJOGlDLEdBQVUsT0FBTzBrQyxHQUFpQm5xRSxJQUFJYixLQUFNLFFBQVUsQ0FDMUQsU0FBSXNtQyxDQUFNOWlDLEdBQVN3bkUsR0FBaUJ4b0UsSUFBSXhDLEtBQU0sUUFBU3dELEVBQVEsQ0FFL0QsVUFBSStpQyxHQUFXLE9BQU95a0MsR0FBaUJucUUsSUFBSWIsS0FBTSxTQUFXLENBQzVELFVBQUl1bUMsQ0FBTy9pQyxHQUFTd25FLEdBQWlCeG9FLElBQUl4QyxLQUFNLFNBQVV3RCxFQUFRLEVBSW5FMGxFLEdBbENnQixNQWtDV2dlLElDbkMzQixNQUFNLEdBQVUsT0FJVCxNQUFNRyxXQUF3QixHQUNuQyxXQUFBam5GLENBQVlxbUUsRUFBZUcsRUFBVyxJQUNwQ3NHLE1BQU16RyxFQUFlRyxFQUN2QixDQUdBLFFBQUl6akUsR0FBUyxPQUFPK25FLEdBQWdCcnFFLElBQUliLEtBQU0sT0FBUyxDQUN2RCxRQUFJbUQsQ0FBS0ssR0FBUzBuRSxHQUFnQjFvRSxJQUFJeEMsS0FBTSxPQUFRd0QsRUFBUSxDQUU1RCxhQUFJOGpGLEdBQWMsT0FBT3BjLEdBQWdCcnFFLElBQUliLEtBQU0sYUFBZSxDQUNsRSxhQUFJc25GLENBQVU5akYsR0FBUzBuRSxHQUFnQjFvRSxJQUFJeEMsS0FBTSxhQUFjd0QsRUFBUSxDQUV2RSxXQUFJNjFCLEdBQVksT0FBTzZ4QyxHQUFnQnJxRSxJQUFJYixLQUFNLFVBQVksQ0FDN0QsV0FBSXE1QixDQUFRNzFCLEdBQVMwbkUsR0FBZ0Ixb0UsSUFBSXhDLEtBQU0sVUFBV3dELEVBQVEsQ0FFbEUsV0FBSStqRixHQUFZLE9BQU9yYyxHQUFnQnJxRSxJQUFJYixLQUFNLFVBQVksQ0FDN0QsV0FBSXVuRixDQUFRL2pGLEdBQVMwbkUsR0FBZ0Ixb0UsSUFBSXhDLEtBQU0sVUFBV3dELEVBQVEsQ0FFbEUsU0FBSXBCLEdBQVUsT0FBTzhvRSxHQUFnQnJxRSxJQUFJYixLQUFNLFFBQVUsQ0FDekQsU0FBSW9DLENBQU1vQixHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLFFBQVN3RCxFQUFRLEVBS2hFMGxFLEdBQWtCLEdBQVNtZSxJQ3RCM0IsTUFBTUcsV0FBMEIsR0FDOUIsV0FBQXBuRixDQUFZcW1FLEVBQWVHLEVBTmIsS0FPWnNHLE1BQU16RyxFQUFlRyxFQUN2QixDQUdBLFFBQUl6a0UsR0FBUyxPQUFPc2xGLFVBQVVDLFVBQVV4YyxHQUFnQnJxRSxJQUFJYixLQUFNLFNBQVcsQ0FDN0UsUUFBSW1DLENBQUtxQixHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLE9BQVEwbkYsVUFBVWxrRixHQUFTLENBRXZFLFlBQUlzMEIsR0FBYSxPQUFPMnZELFVBQVVDLFVBQVV4YyxHQUFnQnJxRSxJQUFJYixLQUFNLGFBQWUsQ0FDckYsWUFBSTgzQixDQUFTdDBCLEdBQVMwbkUsR0FBZ0Ixb0UsSUFBSXhDLEtBQU0sV0FBWTBuRixVQUFVbGtGLEdBQVMsQ0FFL0UsVUFBSXNYLEdBQVcsT0FBT293RCxHQUFnQnJxRSxJQUFJYixLQUFNLFNBQVcsQ0FDM0QsVUFBSThhLENBQU90WCxHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLFNBQVV3RCxFQUFRLENBRWhFLFFBQUk5QyxHQUFTLE9BQU93cUUsR0FBZ0JycUUsSUFBSWIsS0FBTSxPQUFTLENBQ3ZELFFBQUlVLENBQUs4QyxHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLE9BQVF3RCxFQUFRLENBRTVELE9BQUlpakYsR0FBUSxPQUFPdmIsR0FBZ0JycUUsSUFBSWIsS0FBTSxNQUFRLENBQ3JELE9BQUl5bUYsQ0FBSWpqRixHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLE1BQU93RCxFQUFRLEVBSzVEMGxFLEdBN0JnQixJQTZCV3NlLElDN0IzQixNQUFNLEdBQVUsU0FLaEIsTUFBTUcsV0FBMEIsR0FDOUIsV0FBQXZuRixDQUFZcW1FLEVBQWVHLEVBQVksSUFDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsQ0FHQSxPQUFJb2UsR0FBUSxPQUFPOVosR0FBZ0JycUUsSUFBSWIsS0FBTSxNQUFRLENBQ3JELE9BQUlnbEYsQ0FBSXhoRixHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLE1BQU93RCxFQUFRLENBRTFELFVBQUk0akYsR0FBVyxPQUFPbGMsR0FBZ0JycUUsSUFBSWIsS0FBTSxTQUFXLENBQzNELFVBQUlvbkYsQ0FBTzVqRixHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLFNBQVV3RCxFQUFRLENBRWhFLFNBQUkyakYsR0FBVSxPQUFPamMsR0FBZ0JycUUsSUFBSWIsS0FBTSxRQUFVLENBQ3pELFNBQUltbkYsQ0FBTTNqRixHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLFFBQVN3RCxFQUFRLENBRTlELFFBQUk5QyxHQUFTLE9BQU93cUUsR0FBZ0JycUUsSUFBSWIsS0FBTSxPQUFTLENBQ3ZELFFBQUlVLENBQUs4QyxHQUFTMG5FLEdBQWdCMW9FLElBQUl4QyxLQUFNLE9BQVF3RCxFQUFRLEVBSTlEMGxFLEdBQWtCLEdBQVN5ZSxJQzhHcEIsTUFBTUMsR0FBYyxDQUN6QnAzRCxZQUFXLEdBQ1hxMEQsb0JBQW1CLEdBQ25CZ0QsZ0JDMUlLLGNBQThCLEdBQ25DLFdBQUF6bkYsQ0FBWXFtRSxFQUFlRyxFQUFZLFFBQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEdEd0lBbWUsa0JBQWlCLEdBQ2pCK0MsaUJFNUlLLGNBQStCLEdBQ3BDLFdBQUExbkYsQ0FBWXFtRSxFQUFlRyxFQUFZLFNBQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEdGMElBeWUsa0JBQWlCLEdBQ2pCMEMsa0JHOUlLLGNBQWdDLEdBQ3JDLFdBQUEzbkYsQ0FBWXFtRSxFQUFlRyxFQUFZLFVBQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEdINElBb2hCLGdCSS9JSyxjQUE4QixHQUNuQyxXQUFBNW5GLENBQVlxbUUsRUFBZUcsRUFBWSxRQUNyQ3NHLE1BQU16RyxFQUFlRyxFQUN2QixHSjZJQXFoQixnQktoSkssY0FBOEIsR0FDbkMsV0FBQTduRixDQUFZcW1FLEVBQWVHLEVBQVksUUFDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsR0w4SUE4ZSxpQkFBZ0IsR0FDaEJFLGdCQUFlLEdBQ2ZzQyxvQk1uSkssY0FBa0MsR0FDdkMsV0FBQTluRixDQUFZcW1FLEVBQWVHLEVBQVksWUFDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsR05pSkF1aEIsaUJPcEpLLGNBQStCLEdBQ3BDLFdBQUEvbkYsQ0FBWXFtRSxFQUFlRyxFQUFZLFNBQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEdQa0pBd2hCLGNRckpLLGNBQTRCLEdBQ2pDLFdBQUFob0YsQ0FBWXFtRSxFQUFlRyxFQUFZLE1BQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEdSbUpBeWhCLG9CU3RKSyxjQUFrQyxHQUN2QyxXQUFBam9GLENBQVlxbUUsRUFBZUcsRUFBWSxZQUNyQ3NHLE1BQU16RyxFQUFlRyxFQUN2QixHVG9KQTBoQixxQlV2SkssY0FBbUMsR0FDeEMsV0FBQWxvRixDQUFZcW1FLEVBQWVHLEVBQVksS0FDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsR1ZxSkEyaEIsaUJXeEpLLGNBQStCLEdBQ3BDLFdBQUFub0YsQ0FBWXFtRSxFQUFlRyxFQUFZLFNBQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEdYc0pBNGhCLG9CWXpKSyxjQUFrQyxHQUN2QyxXQUFBcG9GLENBQVlxbUUsRUFBZUcsRUFBWSxZQUNyQ3NHLE1BQU16RyxFQUFlRyxFQUN2QixHWnVKQTZoQixjYTFKSyxjQUE0QixHQUNqQyxXQUFBcm9GLENBQVlxbUUsRUFBZUcsRUFBWSxNQUNyQ3NHLE1BQU16RyxFQUFlRyxFQUN2QixHYndKQThoQixnQmMzSkssY0FBOEIsR0FDbkMsV0FBQXRvRixDQUFZcW1FLEVBQWVHLEVBQVksUUFDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsR2R5SkEraEIsb0JlNUpLLGNBQWtDLEdBQ3ZDLFdBQUF2b0YsQ0FBWXFtRSxFQUFlRyxFQUFZLFlBQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEdmMEpBa2YsaUJBQWdCLEdBQ2hCOEMsaUJnQjlKSyxjQUErQixHQUNwQyxXQUFBeG9GLENBQVlxbUUsRUFBZUcsRUFBWSxTQUNyQ3NHLE1BQU16RyxFQUFlRyxFQUN2QixHaEI0SkFpaUIsaUJpQi9KSyxjQUErQixHQUNwQyxXQUFBem9GLENBQVlxbUUsRUFBZUcsRUFBWSxTQUNyQ3NHLE1BQU16RyxFQUFlRyxFQUN2QixHakI2SkFraUIsaUJrQmhLSyxjQUErQixHQUNwQyxXQUFBMW9GLENBQVlxbUUsRUFBZUcsRUFBWSxTQUNyQ3NHLE1BQU16RyxFQUFlRyxFQUN2QixHbEI4SkFvZixtQkFBa0IsR0FDbEIrQyxxQm1CbEtLLGNBQW1DLEdBQ3hDLFdBQUEzb0YsQ0FBWXFtRSxFQUFlRyxFQUFZLE9BQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEduQmdLQW9pQixpQm9CbktLLGNBQStCLEdBQ3BDLFdBQUE1b0YsQ0FBWXFtRSxFQUFlRyxFQUFZLFNBQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEdwQmlLQXFmLGtCQUFpQixHQUNqQmdELGtCcUJyS0ssY0FBZ0MsR0FDckMsV0FBQTdvRixDQUFZcW1FLEVBQWVHLEVBQVksVUFDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsR3JCbUtBc2Ysa0JBQWlCLEdBQ2pCZ0QsZ0JzQnZLSyxjQUE4QixHQUNuQyxXQUFBOW9GLENBQVlxbUUsRUFBZUcsRUFBWSxRQUNyQ3NHLE1BQU16RyxFQUFlRyxFQUN2QixHdEJxS0F1aUIsaUJ1QnhLSyxjQUErQixHQUNwQyxXQUFBL29GLENBQVlxbUUsRUFBZUcsRUFBWSxTQUNyQ3NHLE1BQU16RyxFQUFlRyxFQUN2QixHdkJzS0F3aUIsaUJ3QnpLSyxjQUErQixHQUNwQyxXQUFBaHBGLENBQVlxbUUsRUFBZUcsRUFBWSxTQUNyQ3NHLE1BQU16RyxFQUFlRyxFQUN2QixHeEJ1S0F5aUIscUJ5QjFLSyxjQUFtQyxHQUN4QyxXQUFBanBGLENBQVlxbUUsRUFBZUcsRUFBWSxNQUNyQ3NHLE1BQU16RyxFQUFlRyxFQUN2QixHekJ3S0F1ZixpQkFBZ0IsR0FDaEJtRCxrQjBCNUtLLGNBQWdDLEdBQ3JDLFdBQUFscEYsQ0FBWXFtRSxFQUFlRyxFQUFZLFVBQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEcxQjBLQTJpQixvQjJCN0tLLGNBQWtDLEdBQ3ZDLFdBQUFucEYsQ0FBWXFtRSxFQUFlRyxFQUFZLE1BQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEczQjJLQTRpQixnQjRCOUtLLGNBQThCLEdBQ25DLFdBQUFwcEYsQ0FBWXFtRSxFQUFlRyxFQUFZLFFBQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEc1QjRLQTZpQixnQjZCL0tLLGNBQThCLEdBQ25DLFdBQUFycEYsQ0FBWXFtRSxFQUFlRyxFQUFZLFFBQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEc3QjZLQXdmLGtCQUFpQixHQUNqQnNELGM4QmpMSyxjQUE0QixHQUNqQyxXQUFBdHBGLENBQVlxbUUsRUFBZUcsRUFBWSxNQUNyQ3NHLE1BQU16RyxFQUFlRyxFQUN2QixHOUIrS0F5ZixrQkFBaUIsR0FDakJzRCxlK0JuTEssY0FBNkIsR0FDbEMsV0FBQXZwRixDQUFZcW1FLEVBQWVHLEVBQVksT0FDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsRy9CaUxBZ2pCLG9CZ0NwTEssY0FBa0MsR0FDdkMsV0FBQXhwRixDQUFZcW1FLEVBQWVHLEVBQVksWUFDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsR2hDa0xBaWpCLGlCaUNyTEssY0FBK0IsR0FDcEMsV0FBQXpwRixDQUFZcW1FLEVBQWVHLEVBQVksTUFDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsR2pDbUxBMGYsb0JBQW1CLEdBQ25Cd0QsZ0JrQ3ZMSyxjQUE4QixHQUNuQyxXQUFBMXBGLENBQVlxbUUsRUFBZUcsRUFBWSxRQUNyQ3NHLE1BQU16RyxFQUFlRyxFQUN2QixHbENxTEFtakIsZW1DeExLLGNBQTZCLEdBQ2xDLFdBQUEzcEYsQ0FBWXFtRSxFQUFlRyxFQUFZLE9BQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEduQ3NMQTJmLGdCQUFlLEdBQ2ZHLGdCQUFlLEdBQ2ZzRCxnQm9DM0xLLGNBQThCLEdBQ25DLFdBQUE1cEYsQ0FBWXFtRSxFQUFlRyxFQUFZLFFBQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEdwQ3lMQXNnQixpQkFBZ0IsR0FDaEIrQyxlcUM3TEssY0FBNkIsR0FDbEMsV0FBQTdwRixDQUFZcW1FLEVBQWVHLEVBQVksT0FDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsR3JDMkxBc2pCLGlCc0M5TEssY0FBK0IsR0FDcEMsV0FBQTlwRixDQUFZcW1FLEVBQWVHLEVBQVksTUFDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsR3RDNExBeWdCLGdCQUFlLEdBQ2Y4QyxtQnVDaE1LLGNBQWlDLEdBQ3RDLFdBQUEvcEYsQ0FBWXFtRSxFQUFlRyxFQUFZLFdBQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEd2QzhMQXdqQixnQndDak1LLGNBQThCLEdBQ25DLFdBQUFocUYsQ0FBWXFtRSxFQUFlRyxFQUFZLFFBQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEd4QytMQXlqQixpQnlDbE1LLGNBQStCLEdBQ3BDLFdBQUFqcUYsQ0FBWXFtRSxFQUFlRyxFQUFZLE1BQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEd6Q2dNQTBqQix3QjBDbk1LLGNBQXNDLEdBQzNDLFdBQUFscUYsQ0FBWXFtRSxFQUFlRyxFQUFZLFdBQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEcxQ2lNQTRnQixrQkFBaUIsR0FDakIrQyxpQjJDck1LLGNBQStCLEdBQ3BDLFdBQUFucUYsQ0FBWXFtRSxFQUFlRyxFQUFZLFNBQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEczQ21NQTRqQixtQjRDdE1LLGNBQWlDLEdBQ3RDLFdBQUFwcUYsQ0FBWXFtRSxFQUFlRyxFQUFZLFdBQ3JDc0csTUFBTXpHLEVBQWVHLEVBQ3ZCLEc1Q29NQTZqQixlNkN2TUssY0FBNkIsR0FDbEMsV0FBQXJxRixDQUFZcW1FLEVBQWVHLEVBQVksT0FDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsRzdDcU1BOGpCLG1COEN4TUssY0FBaUMsR0FDdEMsV0FBQXRxRixDQUFZcW1FLEVBQWVHLEVBQVksV0FDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsRzlDc01BK2dCLGtCQUFpQixHQUNqQmdELGlCK0MxTUssY0FBK0IsR0FDcEMsV0FBQXZxRixDQUFZcW1FLEVBQWVHLEVBQVksU0FDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsRy9Dd01BZ2tCLG1CZ0QzTUssY0FBaUMsR0FDdEMsV0FBQXhxRixDQUFZcW1FLEVBQWVHLEVBQVksV0FDckNzRyxNQUFNekcsRUFBZUcsRUFDdkIsSUNMSSxHQUFlLENBQUN6K0QsS0FBTSxLQUFNLEdBQ3JCMGlGLEdBQU8sQ0FDbEIsWUFBYSxDQUNYQyxRQUFTLGtCQUNUdGtCLFlBQVksRUFDWjNMLGFBQWMsK0ZBRWhCLGdCQUFpQixDQUNmaXdCLFFBQVMseUNBQ1R0a0IsWUFBWSxFQUNaM0wsYUFBWSxJQUVkLFdBQVksQ0FDVml3QixRQUFTLHlDQUNUdGtCLFlBQVksRUFDWjNMLGFBQVksSUFFZCxrQkFBbUIsQ0FDakJpd0IsUUFBUyx5Q0FDVHRrQixZQUFZLEVBQ1ozTCxhQUFZLElBRWQsd0JBQXlCLENBQ3ZCaXdCLFFBQVMseUNBQ1R0a0IsWUFBWSxFQUNaM0wsYUFBWSxLQ2pCVCxNQUFNdHFDLFdBQW9CLEdBQy9CLFdBQUFud0IsQ0FBWU0sRUFBTXM3RSxFQUFnQixDQUFDLEdBQ2pDOU8sTUFBTXhzRSxFQUFNczdFLEdBQ1poOEUsS0FBSytxRixPQUFTL08sRUFBYytPLE1BQzlCLEVDYkssTUFBTUMsR0FBYXZrQixHQUkxQixjQUFvQnlnQixHQUNsQixXQUFBOW1GLENBQVlrbUMsRUFBT0MsR0FFakIsT0FEQTJtQyxNQUFNekcsR0FDRXh6RCxVQUFValMsUUFDaEIsS0FBSyxFQUNIaEIsS0FBS3VtQyxPQUFTRCxFQUNkdG1DLEtBQUtzbUMsTUFBUUEsRUFDYixNQUNGLEtBQUssRUFDSHRtQyxLQUFLdW1DLE9BQVNBLEVBQ2R2bUMsS0FBS3NtQyxNQUFRQSxFQUduQixHQ1hJMmtELEdBQWlCLEVBQUUsQ0FBQ3o5QixHQUFRLzlCLEVBQU8sQ0FBQyxHQUFNaGQsR0FBTXM4RCxFQUFXLFFBQy9EbEksR0FBWXAzQyxFQUFNLEdBQU9oZCxFQUFJMjZDLElBQzdCLEVBQUcsQ0FDRCxNQUFNNmhCLEVBQVEzSSxHQUFPNzJDLEdBQ2Y5QyxFQUFPc2lELElBQVV4OEQsRUFBTXc4RCxFQUFRQSxFQUFNN2hCLEdBQ3ZDMmhCLEVBQ0ZBLEVBQVNwQixhQUFhbCtDLEVBQU9zL0MsRUFBUyxJQUV0Q3QvQyxFQUFNM1osU0FDUjJaLEVBQVE5QyxDQUNWLE9BQVM4QyxJQUFVaGQsRUFBSSxFQU1sQixNQUFNeTRFLEdBQ1gsV0FBQTlxRixHQUNFSixLQUFLd3RELEdBQVMsS0FDZHh0RCxLQUFLLEdBQU8sS0FDWkEsS0FBS21yRix3QkFBMEIsSUFDakMsQ0FZQSxVQUFBQyxDQUFXeGQsR0FDVDV0RSxLQUFLLEdBQUtrZixXQUFXeXVELGFBQWFDLEVBQVM1dEUsS0FBS3d0RCxHQUNsRCxDQUVBLFVBQUE2OUIsQ0FBVzlzQixHQUNUditELEtBQUt3dEQsR0FBUytRLEVBQ2R2K0QsS0FBSyxHQUFPc21FLEdBQU8vSCxFQUNyQixDQUlBLGtCQUFBK3NCLENBQW1CL3NCLEdBQ2pCditELEtBQUtxckYsV0FBVzlzQixHQUNoQnYrRCxLQUFLbXJGLHdCQUEwQjVzQixDQUNqQyxDQUVBLGdCQUFBZ3RCLENBQWlCcnNFLEdBQ2ZBLEVBQVcwNkQsZ0JBQWdCNTVFLEtBQUt3ckYsa0JBQ2xDLENBRUEsY0FBQUMsQ0FBZWx0QixHQUNiditELEtBQUt3dEQsR0FBUytRLENBQ2hCLENBRUEsYUFBQW10QixDQUFjbnRCLEdBQ1p2K0QsS0FBS3d0RCxHQUFTK1EsRUFBS3dMLFdBQ3JCLENBRUEsWUFBQTRoQixDQUFhcHRCLEdBQ1h2K0QsS0FBSyxHQUFPc21FLEdBQU8vSCxFQUFLdUwsZ0JBQzFCLENBRUEsV0FBQThoQixDQUFZcnRCLEdBQ1Z2K0QsS0FBSyxHQUFPc21FLEdBQU8vSCxFQUNyQixDQUVBLGFBQUFzdEIsR0FDRSxJQUFLLENBQUNyK0IsR0FBUS85QixFQUFPLENBQUMsR0FBTWhkLEdBQU96UyxLQUNuQyxNQUFNK3VFLEVBQVd0L0MsRUFBTWczQyxjQUFjdUkseUJBQ3JDLEtBQU92L0MsSUFBVWhkLEdBQ2ZzOEQsRUFBU3BCLGFBQWFsK0MsRUFBTWkrQyxXQUFVLEdBQU9xQixFQUFTLElBQ3REdC9DLEVBQVE2MkMsR0FBTzcyQyxHQUNYQSxJQUFVaGQsSUFDWmdkLEVBQVFBLEVBQU0yOUIsSUFFbEIsT0FBTzJoQixDQUNULENBRUEsY0FBQWtjLEdBQ0VBLEdBQWVqckYsS0FDakIsQ0FFQSxlQUFBd3JGLEdBQ0UsTUFBTXpjLEVBQVcvdUUsS0FBS3d0RCxHQUFPaVosY0FBY3VJLHlCQUUzQyxPQURBaWMsR0FBZWpyRixLQUFNK3VFLEdBQ2RBLENBQ1QsQ0FFQSx3QkFBQStjLENBQXlCbHpELEdBQ3ZCLE1BQVF1eUQsd0JBQXlCbm1CLEdBQVFobEUsS0FDbkMrckYsRUFBUSxvQkFBcUIvbUIsRUFDN0JybUQsRUFBV290RSxFQUFRL21CLEVBQUl5QixjQUFnQnpCLEVBQ3ZDOFksRUFBV24vRCxFQUFTSyxjQUFjLFlBQ3hDOCtELEVBQVM3N0MsVUFBWXJKLEVBQ3JCLElBQUksUUFBQ1MsR0FBV3lrRCxFQUNoQixHQUFJaU8sRUFBTyxDQUNULE1BQU16ZSxFQUFhLElBQUlqMEMsRUFBUWkwQyxZQUMvQmowQyxFQUFVMWEsRUFBU3F3RCx5QkFDbkJydUUsT0FBT3lsRSxlQUFlL3NDLEVBQVMsR0FBV2w1QixXQUMxQ2s1QixFQUFRc3ZDLGdCQUFrQmhxRCxFQUMxQixJQUFLLE1BQU1pakQsS0FBUzBMLEVBQ2xCM3NFLE9BQU95bEUsZUFBZXhFLEVBQU8sR0FBV3poRSxXQUN4Q3loRSxFQUFNK0csZ0JBQWtCaHFELEVBQ3hCMGEsRUFBUWhhLFlBQVl1aUQsRUFFeEIsTUFFRTVoRSxLQUFLcXJGLFdBQVdoeUQsR0FDbEIsT0FBT0EsQ0FDVCxDQUVBLFVBQUEyeUQsR0FDRSxNQUFNN3FELEVBQVEsSUFBSStwRCxHQUdsQixPQUZBL3BELEVBQU1xc0IsR0FBU3h0RCxLQUFLd3RELEdBQ3BCcnNCLEVBQU0sR0FBT25oQyxLQUFLLEdBQ1htaEMsQ0FDVCxFQ2hIRixNQUFNOHFELEdBQU8sRUFBRTFsQixZQUFXMmxCLEtBQ3hCLE9BQVEzbEIsR0FDTixLL0hid0IsRStIY3RCLE8vSEFzQixFK0hBZjJsQixFQUNULEsvSGJxQixFK0hjbkIsTy9IRG1CLEUrSENaQSxFQUNULEsvSGJ3QixFK0hjdEIsTy9IRHNCLEkrSENmQSxFQUNULEsvSGhCOEIsRStIaUI1QixPL0hKNEIsRStISXJCQSxFQUVYLE9BQU8sQ0FBQyxFQU1ILE1BQU1DLEdBQ1gsV0FBQS9yRixDQUFZZ1QsRUFBTWc1RSxHL0hoQkksRytIaUJwQnBzRixLQUFLb1QsS0FBT0EsRUFDWnBULEtBQUtxc0YsWUFBY2o1RSxFQUNuQnBULEtBQUtvc0YsV0FBYUEsRUFDbEIsSUFBSyxDQUFDaC9CLEdBQU96Z0MsRUFBTSxDQUFDLEdBQU1sYSxHQUFPVyxFQUNqQyxHL0g3QnlCLEkrSDZCckJBLEVBQUttekQsU0FBNEIsQ0FDbkMsTUFBTSxnQkFBQ25uRCxHQUFtQmhNLEVBQzFCdVosRUFBT3ZOLEVBQ1AzTSxFQUFNMk0sRUFBZ0IsRUFDeEIsQ0FDQSxNQUFNMmdELEVBQVEsR0FDZCxLQUFPcHpDLEdBQVFBLElBQVNsYSxHQUNsQnc1RSxHQUFLdC9ELEVBQU15L0QsSUFDYnJzQixFQUFNOStELEtBQUswckIsR0FDYkEsRUFBT0EsRUFBS3lnQyxHQUVkcHRELEtBQUtzdEQsR0FBVyxDQUFDdnNELEVBQUcsRUFBR2cvRCxRQUN6QixDQUVBLFFBQUF1c0IsR0FDRSxNQUFNQyxFQUFJdnNGLEtBQUtzdEQsR0FFZixPQURBdHRELEtBQUtxc0YsWUFBY0UsRUFBRXhyRixFQUFJd3JGLEVBQUV4c0IsTUFBTS8rRCxPQUFTdXJGLEVBQUV4c0IsTUFBTXdzQixFQUFFeHJGLEtBQU8sS0FDcERmLEtBQUtxc0YsV0FDZCxFQ2xCRixNQUFNejVELEdBQVEsQ0FBQ2hTLEVBQVE2bEQsRUFBZThTLEtBQ3BDLElBQUssQ0FBQ25zQixHQUFPemdDLEVBQU0sQ0FBQyxHQUFNbGEsR0FBT2cwRCxFQUNqQyxPQUFPN2xELEVBQU83Z0IsS0FBSyxDQUFDMG1FLGdCQUFlLENBQUNyWixHQUFPemdDLEVBQU0sQ0FBQyxHQUFNbGEsR0FBTThtRSxFQUFVLEVBR3BFaVQsR0FBZ0IsR0FDcEIsQ0FBQyxFQUNEak4sR0FDQXFJLEdBQ0EsQ0FDRXIzRCxZQUFXLEdBQ1hELE1BQUssR0FDTG04RCxZQUFXLEdBQ1hDLFdDeENHLGNBQXlCLEdBQzlCLFdBQUF0c0YsQ0FBWU0sRUFBTWlzRixFQUFpQixDQUFDLEdBQ2xDemYsTUFBTXhzRSxFQUFNaXNGLEdBQ1ozc0YsS0FBSzhqQyxVQUFZNm9ELEVBQWU3b0QsVUFDaEM5akMsS0FBSzBPLEtBQU9pK0UsRUFBZWorRSxLQUMzQjFPLEtBQUs0c0YsYUFBZUQsRUFBZUMsYUFDbkM1c0YsS0FBSzZzRixZQUFjRixFQUFlRSxjQUFlLEVBQ2pEN3NGLEtBQUs4c0YsT0FBU0gsRUFBZUcsTUFDL0IsR0RpQ0VwUSxhQUFZLEdBQ1puUSxTQUFRLEtBSU4sR0FBUyxJQUFJcGpCLFFBS1osTUFBTSxXQUFpQjh3QixHQUM1QixXQUFBNzVFLENBQVlNLEdBQ1Z3c0UsTUFBTSxLQUFNLFloSXZEYSxHZ0l3RHpCbHRFLEtBQUswc0QsR0FBbUIsQ0FBQzc1QixRQUFRLEVBQU9nMUMsU0FBVSxNQUNsRDduRSxLQUFLbXRELEdBQXFCLENBQUN0NkIsUUFBUSxFQUFPcU0sTUFBTyxNQUNqRGwvQixLQUFLa3RELEdBQVEyOUIsR0FBS25xRixHQUVsQlYsS0FBSzZzRCxHQUFXLEtBQ2hCN3NELEtBQUs4c0QsR0FBYyxLQUNuQjlzRCxLQUFLZ3RELEdBQVcsS0FDaEJodEQsS0FBS2l0RCxHQUFTLEtBQ2RqdEQsS0FBSzB0RCxHQUFXLElBQ2xCLENBS0EsZUFBSXI5QixHQTRERixPQTNESyxHQUFPcWtCLElBQUkxMEMsT0FDZCxHQUFPd0MsSUFBSXhDLEtBQU0sSUFBSXVxRCxNQUFNdm5CLFdBQVksQ0FDckN4Z0MsSUFBSyxDQUFDc1ksRUFBUTNYLEVBQU1LLEtBQ2xCLE9BQVFMLEdBQ04sSUFBSyxtQkFDTCxJQUFLLHNCQUNMLElBQUssZ0JBQ0huRCxLQUFLK3NELEdBQWM1cEQsR0FBUUssRUFDM0IsTUFDRixRQUNFc1gsRUFBTzNYLEdBQVFLLEVBR25CLE9BQU8sQ0FBSSxFQUViM0MsSUFBSyxDQUFDbWlDLEVBQVk3L0IsS0FDaEIsT0FBUUEsR0FDTixJQUFLLG1CQUNMLElBQUssc0JBQ0wsSUFBSyxnQkFDSCxJQUFLbkQsS0FBSytzRCxHQUFlLENBQ3ZCLE1BQU1nZ0MsRUFBSy9zRixLQUFLK3NELEdBQWdCLElBQUksR0FDcENnZ0MsRUFBRzlnQixjQUFnQjhnQixFQUFHOWdCLGNBQWNybEMsS0FBS21tRCxHQUN6Q0EsRUFBR3QrRCxpQkFBbUJzK0QsRUFBR3QrRCxpQkFBaUJtWSxLQUFLbW1ELEdBQy9DQSxFQUFHdm5ELG9CQUFzQnVuRCxFQUFHdm5ELG9CQUFvQm9CLEtBQUttbUQsRUFDdkQsQ0FDQSxPQUFPL3NGLEtBQUsrc0QsR0FBYzVwRCxHQUM1QixJQUFLLFdBQ0gsT0FBT25ELEtBRVQsSUFBSyxZQUNILE1BQU8sQ0FDTDA0QyxVQUFXLDZHQUdmLElBQUssU0FDSCxPQUFPLEdBQU83M0MsSUFBSWIsTUFDcEIsSUFBSyxpQkFHSCxPQUZLQSxLQUFLMHNELEdBQWlCbWIsV0FDekI3bkUsS0FBSzBzRCxHQUFtQixJQUFJa2IsR0FBc0I1bkUsT0FDN0NBLEtBQUswc0QsR0FDZCxJQUFLLGNBQ0gsT0FBTyxLQUNULElBQUssWUFDSCxPQUFPMXNELEtBQUs4c0QsR0FDZCxJQUFLLFFBR0gsT0FGSzlzRCxLQUFLaXRELEtBQ1JqdEQsS0FBS2l0RCxHQUFTKzlCLEdBQVdockYsT0FDcEJBLEtBQUtpdEQsR0FDZCxJQUFLLG1CQUdILE9BRktqdEQsS0FBS210RCxHQUFtQmp1QixRQUMzQmwvQixLQUFLbXRELEdBQXFCLElBQUl1ZCxHQUFzQjFxRSxPQUMvQ0EsS0FBS210RCxHQUFtQmp1QixNQUVuQyxPQUFRbC9CLEtBQUtndEQsSUFBWWh0RCxLQUFLZ3RELEdBQVM3cEQsSUFDL0JxcEYsR0FBY3JwRixJQUNkNi9CLEVBQVc3L0IsRUFBSyxLQUd2QixHQUFPdEMsSUFBSWIsS0FDcEIsQ0FFQSxXQUFJNm9FLEdBQ0YsTUFBTWlpQixFQUFVOXFGLEtBQUs2c0QsR0FDckIsR0FBSWkrQixFQUNGLE9BQU9BLEVBQ1QsTUFBTSxXQUFDdmQsR0FBY3Z0RSxLQUNyQixPQUFJdXRFLEdBQWNBLEVBQVdoSCxXQUFhLEdBQ2hDdm1FLEtBQUs2c0QsR0FBVzBnQixFQUNuQixJQUNULENBRUEsV0FBSTFFLENBQVFybEUsR0FDVixHQUFJLGtFQUFrRTJFLEtBQUszRSxHQUFRLENBQ2pGLE1BQU9vM0UsR0FBSXozRSxFQUFNNnBGLEdBQUl2akIsRUFBVXdqQixHQUFJdmpCLEdBQVl6d0IsT0FDL0NqNUMsS0FBSzZzRCxHQUFXLElBQUksR0FBYTdzRCxLQUFNbUQsRUFBTXNtRSxFQUFVQyxHQUN2RCxHQUFjMXBFLEtBQU1BLEtBQUs2c0QsR0FBVTdzRCxLQUFLb3RELEdBQzFDLENBQ0YsQ0FFQSxtQkFBSWh1QyxHQUNGLE9BQU9wZixLQUFLa2hDLGlCQUNkLENBRUEsZUFBSW9tQyxHQUFnQixPQUFPLENBQU0sQ0FLaEMsVUFBQTBFLEdBQ0MsT0FBT2hzRSxLQUFLK3NELEVBQ2QsQ0FFQSxlQUFBZ2MsQ0FBZ0I1bEUsR0FBUSxPQUFPLElBQUksR0FBS25ELEtBQU1tRCxFQUFPLENBQ3JELGtCQUFBOGxFLENBQW1CdjZELEdBQVEsT0FBTyxJQUFJLEdBQWExTyxLQUFNME8sRUFBTyxDQUNoRSxhQUFBczZELENBQWN6bEMsR0FBZSxPQUFPLElBQUksR0FBUXZqQyxLQUFNdWpDLEVBQWMsQ0FDcEUsc0JBQUF5ckMsR0FBMkIsT0FBTyxJQUFJcUwsR0FBaUJyNkUsS0FBTyxDQUM5RCxrQkFBQWt0RixDQUFtQi9wRixFQUFNc21FLEVBQVVDLEdBQVksT0FBTyxJQUFJLEdBQWExcEUsS0FBTW1ELEVBQU1zbUUsRUFBVUMsRUFBVyxDQUN4RyxhQUFBMXFELENBQWM0bkQsR0FBYSxPQUFPLElBQUksR0FBUTVtRSxLQUFNNG1FLEVBQVksQ0FDaEUsV0FBQXVtQixHQUNFLE1BQU1oc0QsRUFBUSxJQUFJK3BELEdBRWxCLE9BREEvcEQsRUFBTWdxRCx3QkFBMEJuckYsS0FDekJtaEMsQ0FDVCxDQUNBLGNBQUF2aUIsQ0FBZTJrQixHQUFlLE9BQU8sSUFBSSxHQUFLdmpDLEtBQU11akMsRUFBYyxDQUNsRSxnQkFBQTZwRCxDQUFpQmg2RSxFQUFNZzVFLEdBQWEsR0FBTSxPQUFPLElBQUlELEdBQVcvNEUsRUFBTWc1RSxFQUFhLENBQ25GLGtCQUFBaUIsQ0FBbUJqNkUsRUFBTWc1RSxHQUFhLEdBQU0sT0FBT3BzRixLQUFLb3RGLGlCQUFpQmg2RSxFQUFNZzVFLEVBQWEsQ0FFNUYsV0FBQWtCLENBQVlucUYsR0FDVixNQUFNb2lDLEVBQVFweUIsR0FBZ0IsVUFBVGhRLEVBQW1CLElBQUksR0FBTSxJQUFNLElBQUlvdEIsR0FBWSxLQWdCeEUsT0FmQWdWLEVBQU1nb0QsVUFBWWhvRCxFQUFNaW9ELGdCQUFrQixDQUN4QzlzRixFQUNBK3NGLEdBQVksRUFDWnhSLEdBQWEsRUFDYjhPLEtBRUF4bEQsRUFBTTZtQyxVQUFZcWhCLEVBRWxCbHFGLEdBQWlCZ2lDLEVBQU8sQ0FDdEI3a0MsS0FBTSxDQUFDOEMsTUFBTzlDLEdBQ2Qrc0YsVUFBVyxDQUFDanFGLE1BQU9pcUYsR0FDbkJ4UixXQUFZLENBQUN6NEUsTUFBT3k0RSxHQUNwQjhPLE9BQVEsQ0FBQ3ZuRixNQUFPdW5GLElBQ2hCLEVBRUd4bEQsQ0FDVCxDQUVBLFNBQUFtb0MsQ0FBVXdNLEdBQU8sR0FDZixNQUFNLFlBQ0o5NUUsRUFDQSxDQUFDc3NELEdBQWtCajhCLEVBQ25CLENBQUNvOEIsR0FBVWdjLEdBQ1Q3b0UsS0FDRTJlLEVBQVcsSUFBSXZlLEVBRXJCLEdBREF1ZSxFQUFTK3RDLEdBQW1CajhCLEVBQ3hCeXBELEVBQU0sQ0FDUixNQUFNem5FLEVBQU1rTSxFQUFTLElBQ2YsV0FBQzJ1RCxHQUFjdHRFLEtBQ3JCLElBQUssSUFBSSxPQUFDZ0IsR0FBVXNzRSxFQUFZdnNFLEVBQUksRUFBR0EsRUFBSUMsRUFBUUQsSUFDakQ0ZCxFQUFTZ3ZELGFBQWFMLEVBQVd2c0UsR0FBRzJzRSxXQUFVLEdBQU9qN0QsR0FDbkRvMkQsSUFDRmxxRCxFQUFTa3VDLEdBQVd5Z0IsRUFBVyxHQUNuQyxDQUNBLE9BQU8zdUQsQ0FDVCxDQUVBLFVBQUErdUUsQ0FBV0MsR0FHVCxNQUFNelQsRUFBTyxFQUFJam5FLFVBQVVqUyxVQUFZaVMsVUFBVSxHQUMzQ3NyRCxFQUFPb3ZCLEVBQWFqZ0IsVUFBVXdNLElBQzdCLENBQUN4dEIsR0FBa0JqOEIsR0FBa0J6d0IsTUFDdEMsT0FBQzZ5QixHQUFVcEMsRUFDWEcsRUFBVStPLElBQ2QsTUFBTSxjQUFDOG1DLEVBQWEsU0FBRUYsR0FBWTVtQyxFQUNsQ0EsRUFBUThtQyxjQUFnQnptRSxLQUNwQjZ5QixHQUFVNHpDLElBQWtCem1FLE1oSXpPVixJZ0l5T2tCdW1FLEdBQ3RDOTFDLEVBQWVHLFFBQVErTyxFQUFRLEVBR25DLEdBREEvTyxFQUFRMnRDLEdBQ0oyYixFQUNGLE9BQVEzYixFQUFLZ0ksVUFDWCxLaEkvT29CLEVnSWdQcEIsS0FBSyxHQUF3QixDQUMzQixJQUFLLENBQUNuWixHQUFPemdDLEVBQU0sQ0FBQyxHQUFNbGEsR0FBTzhyRCxFQUNqQyxLQUFPNXhDLElBQVNsYSxHaElsUEUsSWdJbVBaa2EsRUFBSzQ1QyxVQUNQMzFDLEVBQVFqRSxHQUNWQSxFQUFPQSxFQUFLeWdDLEdBRWQsS0FDRixFQUdKLE9BQU9tUixDQUNULENBRUEsUUFBQXA0RCxHQUFhLE9BQU9uRyxLQUFLc3RFLFdBQVduc0UsS0FBSyxHQUFLLENBRTlDLGFBQUFpdkIsQ0FBY21wRCxHQUNaLE9BQU8zbUQsR0FBTXM2QyxNQUFNOThDLGNBQWVwd0IsS0FBTXU1RSxFQUMxQyxDQUVBLGdCQUFBcjVDLENBQWlCcTVDLEdBQ2YsT0FBTzNtRCxHQUFNczZDLE1BQU1odEMsaUJBQWtCbGdDLEtBQU11NUUsRUFDN0MsQ0FHQSxzQkFBQXVGLENBQXVCcnZFLEVBQUd0TSxHQUN4QixPQUFPbkQsS0FBS3lqRSxxQkFBcUJ0Z0UsRUFDbkMsQ0FDQSxpQkFBQXlxRixDQUFrQm4rRSxFQUFHdE0sR0FDbkIsT0FBT25ELEtBQUsrb0UsZ0JBQWdCNWxFLEVBQzlCLENBQ0EsZUFBQTJsRSxDQUFnQitrQixFQUFLam5CLEVBQVc3ekQsR0FDOUIsT0FBTzg2RSxJQUFRMW5CLEdBQ1AsSUFBSSxHQUFXbm1FLEtBQU00bUUsRUFBVyxNQUNoQzVtRSxLQUFLZ2YsY0FBYzRuRCxFQUFXN3pELEVBQ3hDLEVBSUZxekQsR0FDRW9tQixHQUFjc0IsU0FBVyxXQUN2QnhPLElBQ0YsRUFDQSxJQUNBbi9FLFVBQVksR0FBU0EsVUVqUWhCLE1BQU0sV0FBcUIsR0FDaEMsV0FBQUMsR0FBZ0I4c0UsTUFBTSxZQUFjLENBRXBDLE9BQUk1NEQsR0FDRixNQUFNeTVFLEVBQVcsSUFBSXhoQixHQUNyQixJQUFLLENBQUNuZixHQUFPemdDLEVBQU0sQ0FBQyxHQUFNbGEsR0FBT3pTLEtBQ2pDLEtBQU8yc0IsSUFBU2xhLEdsSWpDUSxJa0lrQ2RrYSxFQUFLNDVDLFVBRVR3bkIsRUFBUzlzRixLQUFLMHJCLEdBR2xCQSxFQUFPQSxFQUFLeWdDLEdBRWQsT0FBTzJnQyxDQUNULENBS0EsUUFBSTdtRSxHQUNGLE1BQU0sZ0JBQUM5SCxHQUFtQnBmLEtBQzFCLElBQUksa0JBQUNraEMsR0FBcUI5aEIsRUFLMUIsT0FKSzhoQixHQUFtRCxTQUE5QkEsRUFBa0IrQixVQUMxQy9CLEVBQW9CbGhDLEtBQUtnZixjQUFjLFFBQ3ZDSSxFQUFnQjRpRCxRQUFROWdDLElBRW5CQSxDQUNULENBS0EsUUFBSXNlLEdBQ0YsTUFBTSxLQUFDdDRCLEdBQVFsbkIsS0FDZixJQUFJLG1CQUFDb2lDLEdBQXNCbGIsRUFLM0IsT0FKS2tiLEdBQXFELFNBQS9CQSxFQUFtQmEsVUFDNUNiLEVBQXFCcGlDLEtBQUtnZixjQUFjLFFBQ3hDa0ksRUFBSytuRCxNQUFNN3NDLElBRU5BLENBQ1QsQ0FLQSxTQUFJeEQsR0FDRixNQUFNLEtBQUMxWCxHQUFRbG5CLEtBQ2YsT0FBT2tuQixFQUFLdThDLHFCQUFxQixTQUFTdXFCLEdBQUcsSUFBSXpxRCxhQUFlLEVBQ2xFLENBRUEsU0FBSTNFLENBQU0yRSxHQUNSLE1BQU0sS0FBQ3JjLEdBQVFsbkIsS0FDZixJQUFJNCtCLEVBQVExWCxFQUFLdThDLHFCQUFxQixTQUFTdXFCLEdBQUcsR0FDOUNwdkQsRUFDRkEsRUFBTTJFLFlBQWNBLEVBRXBCcmMsRUFBS3ltRCxhQUNIM3RFLEtBQUtnZixjQUFjLFNBQ25Ca0ksRUFBS3FtRCxZQUNMaHFDLFlBQWNBLENBRXBCLENBRUEsYUFBQXZrQixDQUFjNG5ELEVBQVc3ekQsR0FDdkIsTUFBTWs3RSxLQUFhbDdFLElBQVdBLEVBQVFrMUQsSUFDaEN0b0MsRUF2RmdCLEVBQUM4bUMsRUFBZXduQixFQUFTcm5CLEVBQVc3ekQsS0FDNUQsSUFBS2s3RSxHQUFXLEdBQVl2NUMsSUFBSWt5QixHQUU5QixPQUFPLElBRE8sR0FBWS9sRSxJQUFJK2xFLEdBQ3ZCLENBQVVILEVBQWVHLEdBRWxDLE1BQU8sQ0FBQ2xhLElBQWtCLE9BQUM3NUIsRUFBTSxTQUFFZzFDLElBQWFwQixFQUNoRCxHQUFJNXpDLEVBQVEsQ0FDVixNQUFNcTFDLEVBQUsrbEIsRUFBVWw3RSxFQUFRazFELEdBQUtyQixFQUNsQyxHQUFJaUIsRUFBU256QixJQUFJd3pCLEdBQUssQ0FDcEIsTUFBTSxNQUFDSCxHQUFTRixFQUFTaG5FLElBQUlxbkUsR0FDdkJ2b0MsRUFBVSxJQUFJb29DLEVBQU10QixFQUFlRyxHQUV6QyxPQURBbjJDLEdBQWVqdUIsSUFBSW05QixFQUFTLENBQUM0bkMsV0FBVyxJQUNqQzVuQyxDQUNULENBQ0YsQ0FDQSxPQUFPLElBQUksR0FBWThtQyxFQUFlRyxFQUFVLEVBd0U5QnNuQixDQUFrQmx1RixLQUFNaXVGLEVBQVNybkIsRUFBVzd6RCxHQUc1RCxPQUZJazdFLEdBQ0Z0dUQsRUFBUThELGFBQWEsS0FBTTF3QixFQUFRazFELElBQzlCdG9DLENBQ1QsRUMvRkssTUFBTXd1RCxXQUFvQixHQUMvQixXQUFBL3RGLEdBQWdCOHNFLE1BQU0sZ0JBQWtCLENBQ3hDLFFBQUEvbUUsR0FDRSxPQUFPbkcsS0FBS2t0RCxHQUFNNDlCLFFBQVU1ZCxNQUFNL21FLFVBQ3BDLEVDSkssTUFBTWlvRixXQUFvQixHQUMvQixXQUFBaHVGLEdBQWdCOHNFLE1BQU0sV0FBYSxDQUNuQyxRQUFBL21FLEdBQ0UsT0FBT25HLEtBQUtrdEQsR0FBTTQ5QixRQUFVNWQsTUFBTS9tRSxVQUNwQyxFQ0FLLE1BQU0sR0FTWCxlQUFBK3BCLENBQWdCdzRDLEVBQWdCenlELEVBQVVvNEUsRUFBVSxNQUNsRCxJQUFvQjF2RSxFQUFoQjhwRCxHQUFTLEVBY2IsTUFiaUIsY0FBYnh5RCxHQUNGd3lELEdBQVMsRUFDVDlwRCxFQUFXLElBQUksSUFHZkEsRUFEb0Isa0JBQWIxSSxFQUNJLElBQUlrNEUsR0FFSixJQUFJQyxHQUNqQnp2RSxFQUFTbXVDLEdBQWMsR0FDbkJ1aEMsSUFDRjF2RSxFQUFTcXVDLEdBQVdxaEMsR0FDbEI1bEIsR0FBNkIsUUFBbkJDLElBQ1pBLEVBQWlCLDBEQUNaQSxFQUNDeDRDLEdBQWdCdlIsRUFBVThwRCxFQUFRQyxHQUNsQy9wRCxDQUNWLEVDVkYsTUFBTzljLE1BQUssSUFBSXd5QixLQ0FoQit4QyxJQUpPLFdBQ0xrWixJQUNGLEdBRXlCLElBQVduL0UsVUFBWSxHQUFVQSx1REMzQjFELE1BQ0EsR0FBaUJtdUYsV0FEb0Isb0JBQVhDLFFBQTBCQSxPQUFPRCxZQUFjQyxPQUFPRCxXQUFXMW5ELEtBQUsybkQscUNDQWhHLElBQUlDLG1CQUNKLE1BQU1DLEVBQVEsSUFBSXhpRixXQUFXLElBQ2QsU0FBU3lpRixJQUNwQixJQUFLRixFQUFpQixDQUNsQixHQUFzQixvQkFBWEQsU0FBMkJBLE9BQU9DLGdCQUN6QyxNQUFNLElBQUkvbkYsTUFBTSw0R0FFcEIrbkYsRUFBa0JELE9BQU9DLGdCQUFnQjVuRCxLQUFLMm5ELE9BQ2xELENBQ0EsT0FBT0MsRUFBZ0JDLEVBQzNCLDhDQ1RBLE1BQU1FLEVBQVksR0FDbEIsSUFBSyxJQUFJNXRGLEVBQUksRUFBR0EsRUFBSSxNQUFPQSxFQUN2QjR0RixFQUFVMXRGLE1BQU1GLEVBQUksS0FBT29GLFNBQVMsSUFBSXBELE1BQU0sSUFFM0MsU0FBUzZyRixFQUFnQi9pRCxFQUFLdmYsRUFBUyxHQUMxQyxPQUFRcWlFLEVBQVU5aUQsRUFBSXZmLEVBQVMsSUFDM0JxaUUsRUFBVTlpRCxFQUFJdmYsRUFBUyxJQUN2QnFpRSxFQUFVOWlELEVBQUl2ZixFQUFTLElBQ3ZCcWlFLEVBQVU5aUQsRUFBSXZmLEVBQVMsSUFDdkIsSUFDQXFpRSxFQUFVOWlELEVBQUl2ZixFQUFTLElBQ3ZCcWlFLEVBQVU5aUQsRUFBSXZmLEVBQVMsSUFDdkIsSUFDQXFpRSxFQUFVOWlELEVBQUl2ZixFQUFTLElBQ3ZCcWlFLEVBQVU5aUQsRUFBSXZmLEVBQVMsSUFDdkIsSUFDQXFpRSxFQUFVOWlELEVBQUl2ZixFQUFTLElBQ3ZCcWlFLEVBQVU5aUQsRUFBSXZmLEVBQVMsSUFDdkIsSUFDQXFpRSxFQUFVOWlELEVBQUl2ZixFQUFTLEtBQ3ZCcWlFLEVBQVU5aUQsRUFBSXZmLEVBQVMsS0FDdkJxaUUsRUFBVTlpRCxFQUFJdmYsRUFBUyxLQUN2QnFpRSxFQUFVOWlELEVBQUl2ZixFQUFTLEtBQ3ZCcWlFLEVBQVU5aUQsRUFBSXZmLEVBQVMsS0FDdkJxaUUsRUFBVTlpRCxFQUFJdmYsRUFBUyxNQUFNcFcsYUFDckMsNkVDTkEsUUFqQkEsU0FBWW5ELEVBQVM4N0UsRUFBS3ZpRSxHQUN0QixHQUFJLElBQU9naUUsYUFBZU8sSUFBUTk3RSxFQUM5QixPQUFPLElBQU91N0UsYUFHbEIsTUFBTVEsR0FETi83RSxFQUFVQSxHQUFXLENBQUMsR0FDRHliLFNBQVd6YixFQUFRMjdFLEtBQU8sT0FHL0MsR0FGQUksRUFBSyxHQUFnQixHQUFWQSxFQUFLLEdBQWEsR0FDN0JBLEVBQUssR0FBZ0IsR0FBVkEsRUFBSyxHQUFhLElBQ3pCRCxFQUFLLENBQ0x2aUUsRUFBU0EsR0FBVSxFQUNuQixJQUFLLElBQUl2ckIsRUFBSSxFQUFHQSxFQUFJLEtBQU1BLEVBQ3RCOHRGLEVBQUl2aUUsRUFBU3ZyQixHQUFLK3RGLEVBQUsvdEYsR0FFM0IsT0FBTzh0RixDQUNYLENBQ0EsT0FBTyxPQUFnQkMsRUFDM0IsSUNsQklDLEVBQTJCLENBQUMsRUFHaEMsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQi81RCxJQUFqQmc2RCxFQUNILE9BQU9BLEVBQWF6dkYsUUFHckIsSUFBSUQsRUFBU3V2RixFQUF5QkUsR0FBWSxDQUdqRHh2RixRQUFTLENBQUMsR0FPWCxPQUhBMHZGLEVBQW9CRixHQUFVenZGLEVBQVFBLEVBQU9DLFFBQVN1dkYsR0FHL0N4dkYsRUFBT0MsT0FDZixDelB0QklMLEVBQWtDLG1CQUFYd29DLE9BQXdCQSxPQUFPLGtCQUFvQixxQkFDMUV2b0MsRUFBbUMsbUJBQVh1b0MsT0FBd0JBLE9BQU8sbUJBQXFCLHNCQUM1RXRvQyxFQUFpQyxtQkFBWHNvQyxPQUF3QkEsT0FBTyxpQkFBbUIsb0JBQ3hFcm9DLEVBQWdCc2dCLElBQ2hCQSxHQUFTQSxFQUFNdFUsRUFBSSxJQUNyQnNVLEVBQU10VSxFQUFJLEVBQ1ZzVSxFQUFNL00sU0FBUyt6QixHQUFRQSxFQUFHMzdCLE1BQzFCMlUsRUFBTS9NLFNBQVMrekIsR0FBUUEsRUFBRzM3QixJQUFNMjdCLEVBQUczN0IsSUFBTTI3QixNQUMxQyxFQXlCRG1vRCxFQUFvQmxrRixFQUFJLENBQUN0TCxFQUFRZ2dELEVBQU00dkMsS0FDdEMsSUFBSXZ2RSxFQUNKdXZFLEtBQWN2dkUsRUFBUSxJQUFJdFUsR0FBSyxHQUMvQixJQUVJOGpGLEVBQ0FDLEVBQ0FwN0UsRUFKQXE3RSxFQUFZLElBQUloMUIsSUFDaEI5NkQsRUFBVUQsRUFBT0MsUUFJakJzZ0IsRUFBVSxJQUFJdlQsU0FBUSxDQUFDQyxFQUFTK2lGLEtBQ25DdDdFLEVBQVNzN0UsRUFDVEYsRUFBZTdpRixDQUFPLElBRXZCc1QsRUFBUTFnQixHQUFrQkksRUFDMUJzZ0IsRUFBUTNnQixHQUFrQnluQyxJQUFRaG5CLEdBQVNnbkIsRUFBR2huQixHQUFRMHZFLEVBQVV6OEUsUUFBUSt6QixHQUFLOW1CLEVBQWUsT0FBRS9QLFNBQzlGeFEsRUFBT0MsUUFBVXNnQixFQUNqQnkvQixHQUFNaXdDLElBRUwsSUFBSTVvRCxFQURKd29ELEVBdkNhLENBQUNJLEdBQVVBLEVBQUsxNkQsS0FBSzI2RCxJQUNuQyxHQUFXLE9BQVJBLEdBQStCLGlCQUFSQSxFQUFrQixDQUMzQyxHQUFHQSxFQUFJdHdGLEdBQWdCLE9BQU9zd0YsRUFDOUIsR0FBR0EsRUFBSXQ3RSxLQUFNLENBQ1osSUFBSXlMLEVBQVEsR0FDWkEsRUFBTXRVLEVBQUksRUFDVm1rRixFQUFJdDdFLE1BQU1sSixJQUNUczlCLEVBQUlucEMsR0FBa0I2TCxFQUN0QjNMLEVBQWFzZ0IsRUFBTSxJQUNoQnpXLElBQ0hvL0IsRUFBSWxwQyxHQUFnQjhKLEVBQ3BCN0osRUFBYXNnQixFQUFNLElBRXBCLElBQUkyb0IsRUFBTSxDQUFDLEVBRVgsT0FEQUEsRUFBSXBwQyxHQUFrQnluQyxHQUFRQSxFQUFHaG5CLEdBQzFCMm9CLENBQ1IsQ0FDRCxDQUNBLElBQUlvQixFQUFNLENBQUMsRUFHWCxPQUZBQSxFQUFJeHFDLEdBQWlCNFEsTUFDckI0NUIsRUFBSXZxQyxHQUFrQnF3RixFQUNmOWxELENBQUcsSUFrQksrbEQsQ0FBU0YsR0FFdkIsSUFBSUcsRUFBWSxJQUFPUCxFQUFZdDZELEtBQUt4cEIsSUFDdkMsR0FBR0EsRUFBRWpNLEdBQWUsTUFBTWlNLEVBQUVqTSxHQUM1QixPQUFPaU0sRUFBRWxNLEVBQWUsSUFFckIwZ0IsRUFBVSxJQUFJdlQsU0FBU0MsS0FDMUJvNkIsRUFBSyxJQUFPcDZCLEVBQVFtakYsSUFDakIxa0YsRUFBSSxFQUNQLElBQUkya0YsRUFBVzNoRSxHQUFPQSxJQUFNck8sSUFBVTB2RSxFQUFVNzZDLElBQUl4bUIsS0FBT3FoRSxFQUFVajlELElBQUlwRSxHQUFJQSxJQUFNQSxFQUFFM2lCLElBQU1zN0IsRUFBRzM3QixJQUFLZ2pCLEVBQUVqdEIsS0FBSzRsQyxLQUMxR3dvRCxFQUFZdDZELEtBQUsyNkQsR0FBU0EsRUFBSXR3RixHQUFleXdGLElBQVUsSUFFeEQsT0FBT2hwRCxFQUFHMzdCLEVBQUk2VSxFQUFVNnZFLEdBQVcsSUFDaEN6dUUsSUFBVUEsRUFBTWpOLEVBQU82TCxFQUFRemdCLEdBQWdCNmhCLEdBQU9tdUUsRUFBYTd2RixHQUFXRixFQUFhc2dCLE1BQy9GQSxHQUFTQSxFQUFNdFUsRUFBSSxJQUFNc1UsRUFBTXRVLEVBQUksRUFBRSxFMFA5RHRDeWpGLEVBQW9CNWpGLEVBQUs1TCxJQUN4QixJQUFJc3dGLEVBQVN0d0YsR0FBVUEsRUFBT3V3RixXQUM3QixJQUFPdndGLEVBQWlCLFFBQ3hCLElBQU0sRUFFUCxPQURBd3ZGLEVBQW9CempGLEVBQUV1a0YsRUFBUSxDQUFFaGxGLEVBQUdnbEYsSUFDNUJBLENBQU0sRUNMZGQsRUFBb0J6akYsRUFBSSxDQUFDOUwsRUFBU3V3RixLQUNqQyxJQUFJLElBQUl2M0QsS0FBT3UzRCxFQUNYaEIsRUFBb0Jqa0YsRUFBRWlsRixFQUFZdjNELEtBQVN1MkQsRUFBb0Jqa0YsRUFBRXRMLEVBQVNnNUIsSUFDNUU5M0IsT0FBT0MsZUFBZW5CLEVBQVNnNUIsRUFBSyxDQUFFLzBCLFlBQVksRUFBTTdDLElBQUttdkYsRUFBV3YzRCxJQUUxRSxFQ05EdTJELEVBQW9CdC9FLEVBQUksV0FDdkIsR0FBMEIsaUJBQWZzekIsV0FBeUIsT0FBT0EsV0FDM0MsSUFDQyxPQUFPaGpDLE1BQVEsSUFBSTJ1QixTQUFTLGNBQWIsRUFDaEIsQ0FBRSxNQUFPdmxCLEdBQ1IsR0FBc0IsaUJBQVh1VyxPQUFxQixPQUFPQSxNQUN4QyxDQUNBLENBUHVCLEdDQXhCcXZFLEVBQW9CamtGLEVBQUksQ0FBQ3k5QixFQUFLaEgsSUFBVTdnQyxPQUFPUixVQUFVZ0osZUFBZXBKLEtBQUt5b0MsRUFBS2hILEdDQ2xGd3RELEVBQW9COWpGLEVBQUt6TCxJQUNILG9CQUFYbW9DLFFBQTBCQSxPQUFPQyxhQUMxQ2xuQyxPQUFPQyxlQUFlbkIsRUFBU21vQyxPQUFPQyxZQUFhLENBQUVya0MsTUFBTyxXQUU3RDdDLE9BQU9DLGVBQWVuQixFQUFTLGFBQWMsQ0FBRStELE9BQU8sR0FBTyxFQ0ZwQ3dyRixFQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyL3dlYnBhY2svcnVudGltZS9hc3luYyBtb2R1bGUiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvYm9vbGJhc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvY3Nzb20vbGliL0NTU0NvbmRpdGlvblJ1bGUuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvY3Nzb20vbGliL0NTU0RvY3VtZW50UnVsZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9jc3NvbS9saWIvQ1NTRm9udEZhY2VSdWxlLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2Nzc29tL2xpYi9DU1NHcm91cGluZ1J1bGUuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvY3Nzb20vbGliL0NTU0hvc3RSdWxlLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2Nzc29tL2xpYi9DU1NJbXBvcnRSdWxlLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2Nzc29tL2xpYi9DU1NLZXlmcmFtZVJ1bGUuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvY3Nzb20vbGliL0NTU0tleWZyYW1lc1J1bGUuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvY3Nzb20vbGliL0NTU01lZGlhUnVsZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9jc3NvbS9saWIvQ1NTUnVsZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9jc3NvbS9saWIvQ1NTU3R5bGVEZWNsYXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9jc3NvbS9saWIvQ1NTU3R5bGVSdWxlLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2Nzc29tL2xpYi9DU1NTdHlsZVNoZWV0LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2Nzc29tL2xpYi9DU1NTdXBwb3J0c1J1bGUuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvY3Nzb20vbGliL0NTU1ZhbHVlLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2Nzc29tL2xpYi9DU1NWYWx1ZUV4cHJlc3Npb24uanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvY3Nzb20vbGliL01hdGNoZXJMaXN0LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2Nzc29tL2xpYi9NZWRpYUxpc3QuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvY3Nzb20vbGliL1N0eWxlU2hlZXQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvY3Nzb20vbGliL2Nsb25lLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2Nzc29tL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9jc3NvbS9saWIvcGFyc2UuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvanN6aXAvZGlzdC9qc3ppcC5taW4uanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9zcmMvYmFja2dyb3VuZC50cyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL3NyYy9jb25maWcudHMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9zcmMvcmVjaXBlX25ldy50cyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL3NyYy91dGlscy9lbGVtZW50LXByb2Nlc3Nvci50cyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL3NyYy91dGlscy91dGlsLnRzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2NvbW1vbmpzL2NhbnZhcy1zaGltLmNqcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9jb21tb25qcy9jYW52YXMuY2pzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2NvbW1vbmpzL3BlcmZfaG9va3MuY2pzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Zvcm1EYXRhLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvQmxvYi5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vY29tbW9uL3V0aWxzLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9pbmRleC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NIZWFkZXJzLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwZWVkb21ldGVyLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Byb2dyZXNzRXZlbnRSZWR1Y2VyLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Rocm90dGxlLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9yZXNvbHZlQ29uZmlnLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21wb3NlU2lnbmFscy5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90cmFja1N0cmVhbS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMvZmV0Y2guanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL251bGwuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9IdHRwU3RhdHVzQ29kZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9pZGIvYnVpbGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL3NoYXJlZC9zeW1ib2xzLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2h0bWxwYXJzZXIyL25vZGVfbW9kdWxlcy9lbnRpdGllcy9kaXN0L2VzbS9nZW5lcmF0ZWQvZGVjb2RlLWRhdGEtaHRtbC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9odG1scGFyc2VyMi9ub2RlX21vZHVsZXMvZW50aXRpZXMvZGlzdC9lc20vZ2VuZXJhdGVkL2RlY29kZS1kYXRhLXhtbC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9odG1scGFyc2VyMi9ub2RlX21vZHVsZXMvZW50aXRpZXMvZGlzdC9lc20vZGVjb2RlLWNvZGVwb2ludC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9odG1scGFyc2VyMi9ub2RlX21vZHVsZXMvZW50aXRpZXMvZGlzdC9lc20vZGVjb2RlLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2h0bWxwYXJzZXIyL2Rpc3QvZXNtL1Rva2VuaXplci5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9odG1scGFyc2VyMi9kaXN0L2VzbS9QYXJzZXIuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZG9tZWxlbWVudHR5cGUvbGliL2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9kb21oYW5kbGVyL2xpYi9lc20vbm9kZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9kb21oYW5kbGVyL2xpYi9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2VzbS9nZW5lcmF0ZWQvZGVjb2RlLWRhdGEtaHRtbC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvZXNtL2dlbmVyYXRlZC9kZWNvZGUtZGF0YS14bWwuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2VzbS9kZWNvZGVfY29kZXBvaW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2VudGl0aWVzL2xpYi9lc20vZGVjb2RlLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2VudGl0aWVzL2xpYi9lc20vZ2VuZXJhdGVkL2VuY29kZS1odG1sLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2VudGl0aWVzL2xpYi9lc20vZXNjYXBlLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2VudGl0aWVzL2xpYi9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZG9tLXNlcmlhbGl6ZXIvbGliL2VzbS9mb3JlaWduTmFtZXMuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZG9tLXNlcmlhbGl6ZXIvbGliL2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvZXNtL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvZXNtL3RyYXZlcnNhbC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvZXNtL21hbmlwdWxhdGlvbi5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvZXNtL3F1ZXJ5aW5nLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi9lc20vbGVnYWN5LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi9lc20vaGVscGVycy5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvZXNtL2ZlZWRzLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9zaGFyZWQvY29uc3RhbnRzLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9zaGFyZWQvb2JqZWN0LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9zaGFyZWQvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL3NoYXJlZC9zaGFkb3ctcm9vdHMuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2ludGVyZmFjZS9jdXN0b20tZWxlbWVudC1yZWdpc3RyeS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vc2hhcmVkL3BhcnNlLWZyb20tc3RyaW5nLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9zaGFyZWQvcmVnaXN0ZXItaHRtbC1jbGFzcy5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vc2hhcmVkL2pzZG9uLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9pbnRlcmZhY2UvbXV0YXRpb24tb2JzZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL3NoYXJlZC9hdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9pbnRlcmZhY2UvZXZlbnQtdGFyZ2V0LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9pbnRlcmZhY2Uvbm9kZS1saXN0LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9pbnRlcmZhY2Uvbm9kZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vc2hhcmVkL3RleHQtZXNjYXBlci5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaW50ZXJmYWNlL2F0dHIuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL3NoYXJlZC9ub2RlLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9taXhpbi9ub24tZG9jdW1lbnQtdHlwZS1jaGlsZC1ub2RlLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9taXhpbi9jaGlsZC1ub2RlLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9pbnRlcmZhY2UvY2hhcmFjdGVyLWRhdGEuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2ludGVyZmFjZS9jZGF0YS1zZWN0aW9uLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9pbnRlcmZhY2UvY29tbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9jc3Mtd2hhdC9saWIvZXMvdHlwZXMuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvY3NzLXdoYXQvbGliL2VzL3BhcnNlLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2Nzcy1zZWxlY3QvbGliL2VzbS9zb3J0LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2Nzcy1zZWxlY3QvbGliL2VzbS9hdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL250aC1jaGVjay9saWIvZXNtL3BhcnNlLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL250aC1jaGVjay9saWIvZXNtL2luZGV4LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL250aC1jaGVjay9saWIvZXNtL2NvbXBpbGUuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvY3NzLXNlbGVjdC9saWIvZXNtL3BzZXVkby1zZWxlY3RvcnMvZmlsdGVycy5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9jc3Mtc2VsZWN0L2xpYi9lc20vcHNldWRvLXNlbGVjdG9ycy9wc2V1ZG9zLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2Nzcy1zZWxlY3QvbGliL2VzbS9wc2V1ZG8tc2VsZWN0b3JzL2FsaWFzZXMuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvY3NzLXNlbGVjdC9saWIvZXNtL3BzZXVkby1zZWxlY3RvcnMvc3Vic2VsZWN0cy5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9jc3Mtc2VsZWN0L2xpYi9lc20vZ2VuZXJhbC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9jc3Mtc2VsZWN0L2xpYi9lc20vY29tcGlsZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9jc3Mtc2VsZWN0L2xpYi9lc20vcHNldWRvLXNlbGVjdG9ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9jc3Mtc2VsZWN0L2xpYi9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL3NoYXJlZC9tYXRjaGVzLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9pbnRlcmZhY2UvdGV4dC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vbWl4aW4vcGFyZW50LW5vZGUuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL21peGluL25vbi1lbGVtZW50LXBhcmVudC1ub2RlLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9pbnRlcmZhY2UvZG9jdW1lbnQtZnJhZ21lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2ludGVyZmFjZS9kb2N1bWVudC10eXBlLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9taXhpbi9pbm5lci1odG1sLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL3VoeXBoZW4vZXNtL2luZGV4LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9kb20vc3RyaW5nLW1hcC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vZG9tL3Rva2VuLWxpc3QuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2ludGVyZmFjZS9jc3Mtc3R5bGUtZGVjbGFyYXRpb24uanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2ludGVyZmFjZS9ldmVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaW50ZXJmYWNlL25hbWVkLW5vZGUtbWFwLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9pbnRlcmZhY2Uvc2hhZG93LXJvb3QuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2ludGVyZmFjZS9lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9zdmcvZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vc2hhcmVkL2ZhY2FkZXMuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC90ZW1wbGF0ZS1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL3RleHQtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9zY3JpcHQtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9pLWZyYW1lLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvc3R5bGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC90aW1lLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvaW5wdXQtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9oZWFkaW5nLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvY2FudmFzLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvb3B0aW9uLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvdGl0bGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9zZWxlY3QtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9idXR0b24tZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC90ZXh0LWFyZWEtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9saW5rLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvc2xvdC1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL2ltYWdlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvbWV0YS1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL2FuY2hvci1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL3NvdXJjZS1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9zaGFyZWQvaHRtbC1jbGFzc2VzLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL2h0bWwtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9mcmFtZS1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL29iamVjdC1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL2hlYWQtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9ib2R5LWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvZmllbGQtc2V0LWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvZW1iZWQtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9oci1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL3Byb2dyZXNzLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvcGFyYWdyYXBoLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvdGFibGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9mcmFtZS1zZXQtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9saS1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL2Jhc2UtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9kYXRhLWxpc3QtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9wYXJhbS1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL21lZGlhLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvYXVkaW8tZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9kaXJlY3RvcnktZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9xdW90ZS1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL2xlZ2VuZC1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL3NwYW4tZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9tZXRlci1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL3ZpZGVvLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvdGFibGUtY2VsbC1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL291dHB1dC1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL3RhYmxlLXJvdy1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL2RhdGEtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9tZW51LWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvYnItZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9tYXAtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9vcHQtZ3JvdXAtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9kLWxpc3QtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9mb250LWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvZGl2LWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvZm9ybS1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL3ByZS1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL3UtbGlzdC1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL3BpY3R1cmUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC9hcmVhLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvby1saXN0LWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvdGFibGUtY2FwdGlvbi1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL2xhYmVsLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2h0bWwvdW5rbm93bi1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL21vZC1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL2RldGFpbHMtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaHRtbC90cmFjay1lbGVtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL21hcnF1ZWUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vc2hhcmVkL21pbWUuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2ludGVyZmFjZS9jdXN0b20tZXZlbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2ludGVyZmFjZS9pbWFnZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaW50ZXJmYWNlL3JhbmdlLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9pbnRlcmZhY2UvdHJlZS13YWxrZXIuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2ludGVyZmFjZS9kb2N1bWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vaW50ZXJmYWNlL2lucHV0LWV2ZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9odG1sL2RvY3VtZW50LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2xpbmtlZG9tL2VzbS9zdmcvZG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL3htbC9kb2N1bWVudC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vZG9tL3BhcnNlci5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9saW5rZWRvbS9lc20vc2hhcmVkL3BhcnNlLWpzb24uanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGlua2Vkb20vZXNtL2luZGV4LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9uYXRpdmUuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3JuZy5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92NC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB3ZWJwYWNrUXVldWVzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sKFwid2VicGFjayBxdWV1ZXNcIikgOiBcIl9fd2VicGFja19xdWV1ZXNfX1wiO1xudmFyIHdlYnBhY2tFeHBvcnRzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sKFwid2VicGFjayBleHBvcnRzXCIpIDogXCJfX3dlYnBhY2tfZXhwb3J0c19fXCI7XG52YXIgd2VicGFja0Vycm9yID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sKFwid2VicGFjayBlcnJvclwiKSA6IFwiX193ZWJwYWNrX2Vycm9yX19cIjtcbnZhciByZXNvbHZlUXVldWUgPSAocXVldWUpID0+IHtcblx0aWYocXVldWUgJiYgcXVldWUuZCA8IDEpIHtcblx0XHRxdWV1ZS5kID0gMTtcblx0XHRxdWV1ZS5mb3JFYWNoKChmbikgPT4gKGZuLnItLSkpO1xuXHRcdHF1ZXVlLmZvckVhY2goKGZuKSA9PiAoZm4uci0tID8gZm4ucisrIDogZm4oKSkpO1xuXHR9XG59XG52YXIgd3JhcERlcHMgPSAoZGVwcykgPT4gKGRlcHMubWFwKChkZXApID0+IHtcblx0aWYoZGVwICE9PSBudWxsICYmIHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpIHtcblx0XHRpZihkZXBbd2VicGFja1F1ZXVlc10pIHJldHVybiBkZXA7XG5cdFx0aWYoZGVwLnRoZW4pIHtcblx0XHRcdHZhciBxdWV1ZSA9IFtdO1xuXHRcdFx0cXVldWUuZCA9IDA7XG5cdFx0XHRkZXAudGhlbigocikgPT4ge1xuXHRcdFx0XHRvYmpbd2VicGFja0V4cG9ydHNdID0gcjtcblx0XHRcdFx0cmVzb2x2ZVF1ZXVlKHF1ZXVlKTtcblx0XHRcdH0sIChlKSA9PiB7XG5cdFx0XHRcdG9ialt3ZWJwYWNrRXJyb3JdID0gZTtcblx0XHRcdFx0cmVzb2x2ZVF1ZXVlKHF1ZXVlKTtcblx0XHRcdH0pO1xuXHRcdFx0dmFyIG9iaiA9IHt9O1xuXHRcdFx0b2JqW3dlYnBhY2tRdWV1ZXNdID0gKGZuKSA9PiAoZm4ocXVldWUpKTtcblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fVxuXHR9XG5cdHZhciByZXQgPSB7fTtcblx0cmV0W3dlYnBhY2tRdWV1ZXNdID0geCA9PiB7fTtcblx0cmV0W3dlYnBhY2tFeHBvcnRzXSA9IGRlcDtcblx0cmV0dXJuIHJldDtcbn0pKTtcbl9fd2VicGFja19yZXF1aXJlX18uYSA9IChtb2R1bGUsIGJvZHksIGhhc0F3YWl0KSA9PiB7XG5cdHZhciBxdWV1ZTtcblx0aGFzQXdhaXQgJiYgKChxdWV1ZSA9IFtdKS5kID0gLTEpO1xuXHR2YXIgZGVwUXVldWVzID0gbmV3IFNldCgpO1xuXHR2YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzO1xuXHR2YXIgY3VycmVudERlcHM7XG5cdHZhciBvdXRlclJlc29sdmU7XG5cdHZhciByZWplY3Q7XG5cdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlaikgPT4ge1xuXHRcdHJlamVjdCA9IHJlajtcblx0XHRvdXRlclJlc29sdmUgPSByZXNvbHZlO1xuXHR9KTtcblx0cHJvbWlzZVt3ZWJwYWNrRXhwb3J0c10gPSBleHBvcnRzO1xuXHRwcm9taXNlW3dlYnBhY2tRdWV1ZXNdID0gKGZuKSA9PiAocXVldWUgJiYgZm4ocXVldWUpLCBkZXBRdWV1ZXMuZm9yRWFjaChmbiksIHByb21pc2VbXCJjYXRjaFwiXSh4ID0+IHt9KSk7XG5cdG1vZHVsZS5leHBvcnRzID0gcHJvbWlzZTtcblx0Ym9keSgoZGVwcykgPT4ge1xuXHRcdGN1cnJlbnREZXBzID0gd3JhcERlcHMoZGVwcyk7XG5cdFx0dmFyIGZuO1xuXHRcdHZhciBnZXRSZXN1bHQgPSAoKSA9PiAoY3VycmVudERlcHMubWFwKChkKSA9PiB7XG5cdFx0XHRpZihkW3dlYnBhY2tFcnJvcl0pIHRocm93IGRbd2VicGFja0Vycm9yXTtcblx0XHRcdHJldHVybiBkW3dlYnBhY2tFeHBvcnRzXTtcblx0XHR9KSlcblx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG5cdFx0XHRmbiA9ICgpID0+IChyZXNvbHZlKGdldFJlc3VsdCkpO1xuXHRcdFx0Zm4uciA9IDA7XG5cdFx0XHR2YXIgZm5RdWV1ZSA9IChxKSA9PiAocSAhPT0gcXVldWUgJiYgIWRlcFF1ZXVlcy5oYXMocSkgJiYgKGRlcFF1ZXVlcy5hZGQocSksIHEgJiYgIXEuZCAmJiAoZm4ucisrLCBxLnB1c2goZm4pKSkpO1xuXHRcdFx0Y3VycmVudERlcHMubWFwKChkZXApID0+IChkZXBbd2VicGFja1F1ZXVlc10oZm5RdWV1ZSkpKTtcblx0XHR9KTtcblx0XHRyZXR1cm4gZm4uciA/IHByb21pc2UgOiBnZXRSZXN1bHQoKTtcblx0fSwgKGVycikgPT4gKChlcnIgPyByZWplY3QocHJvbWlzZVt3ZWJwYWNrRXJyb3JdID0gZXJyKSA6IG91dGVyUmVzb2x2ZShleHBvcnRzKSksIHJlc29sdmVRdWV1ZShxdWV1ZSkpKTtcblx0cXVldWUgJiYgcXVldWUuZCA8IDAgJiYgKHF1ZXVlLmQgPSAwKTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cdHRydWVGdW5jOiBmdW5jdGlvbiB0cnVlRnVuYygpe1xuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXHRmYWxzZUZ1bmM6IGZ1bmN0aW9uIGZhbHNlRnVuYygpe1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTsiLCIvLy5Db21tb25KU1xudmFyIENTU09NID0ge1xuICBDU1NSdWxlOiByZXF1aXJlKFwiLi9DU1NSdWxlXCIpLkNTU1J1bGUsXG4gIENTU0dyb3VwaW5nUnVsZTogcmVxdWlyZShcIi4vQ1NTR3JvdXBpbmdSdWxlXCIpLkNTU0dyb3VwaW5nUnVsZVxufTtcbi8vL0NvbW1vbkpTXG5cblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1jb25kaXRpb25hbC0zLyN0aGUtY3NzY29uZGl0aW9ucnVsZS1pbnRlcmZhY2VcbiAqL1xuQ1NTT00uQ1NTQ29uZGl0aW9uUnVsZSA9IGZ1bmN0aW9uIENTU0NvbmRpdGlvblJ1bGUoKSB7XG4gIENTU09NLkNTU0dyb3VwaW5nUnVsZS5jYWxsKHRoaXMpO1xuICB0aGlzLmNzc1J1bGVzID0gW107XG59O1xuXG5DU1NPTS5DU1NDb25kaXRpb25SdWxlLnByb3RvdHlwZSA9IG5ldyBDU1NPTS5DU1NHcm91cGluZ1J1bGUoKTtcbkNTU09NLkNTU0NvbmRpdGlvblJ1bGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ1NTT00uQ1NTQ29uZGl0aW9uUnVsZTtcbkNTU09NLkNTU0NvbmRpdGlvblJ1bGUucHJvdG90eXBlLmNvbmRpdGlvblRleHQgPSAnJ1xuQ1NTT00uQ1NTQ29uZGl0aW9uUnVsZS5wcm90b3R5cGUuY3NzVGV4dCA9ICcnXG5cbi8vLkNvbW1vbkpTXG5leHBvcnRzLkNTU0NvbmRpdGlvblJ1bGUgPSBDU1NPTS5DU1NDb25kaXRpb25SdWxlO1xuLy8vQ29tbW9uSlNcbiIsIi8vLkNvbW1vbkpTXG52YXIgQ1NTT00gPSB7XG4gICAgQ1NTUnVsZTogcmVxdWlyZShcIi4vQ1NTUnVsZVwiKS5DU1NSdWxlLFxuICAgIE1hdGNoZXJMaXN0OiByZXF1aXJlKFwiLi9NYXRjaGVyTGlzdFwiKS5NYXRjaGVyTGlzdFxufTtcbi8vL0NvbW1vbkpTXG5cblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vQ1NTL0AtbW96LWRvY3VtZW50XG4gKi9cbkNTU09NLkNTU0RvY3VtZW50UnVsZSA9IGZ1bmN0aW9uIENTU0RvY3VtZW50UnVsZSgpIHtcbiAgICBDU1NPTS5DU1NSdWxlLmNhbGwodGhpcyk7XG4gICAgdGhpcy5tYXRjaGVyID0gbmV3IENTU09NLk1hdGNoZXJMaXN0KCk7XG4gICAgdGhpcy5jc3NSdWxlcyA9IFtdO1xufTtcblxuQ1NTT00uQ1NTRG9jdW1lbnRSdWxlLnByb3RvdHlwZSA9IG5ldyBDU1NPTS5DU1NSdWxlKCk7XG5DU1NPTS5DU1NEb2N1bWVudFJ1bGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ1NTT00uQ1NTRG9jdW1lbnRSdWxlO1xuQ1NTT00uQ1NTRG9jdW1lbnRSdWxlLnByb3RvdHlwZS50eXBlID0gMTA7XG4vL0ZJWE1FXG4vL0NTU09NLkNTU0RvY3VtZW50UnVsZS5wcm90b3R5cGUuaW5zZXJ0UnVsZSA9IENTU1N0eWxlU2hlZXQucHJvdG90eXBlLmluc2VydFJ1bGU7XG4vL0NTU09NLkNTU0RvY3VtZW50UnVsZS5wcm90b3R5cGUuZGVsZXRlUnVsZSA9IENTU1N0eWxlU2hlZXQucHJvdG90eXBlLmRlbGV0ZVJ1bGU7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShDU1NPTS5DU1NEb2N1bWVudFJ1bGUucHJvdG90eXBlLCBcImNzc1RleHRcIiwge1xuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjc3NUZXh0cyA9IFtdO1xuICAgIGZvciAodmFyIGk9MCwgbGVuZ3RoPXRoaXMuY3NzUnVsZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3NzVGV4dHMucHVzaCh0aGlzLmNzc1J1bGVzW2ldLmNzc1RleHQpO1xuICAgIH1cbiAgICByZXR1cm4gXCJALW1vei1kb2N1bWVudCBcIiArIHRoaXMubWF0Y2hlci5tYXRjaGVyVGV4dCArIFwiIHtcIiArIGNzc1RleHRzLmpvaW4oXCJcIikgKyBcIn1cIjtcbiAgfVxufSk7XG5cblxuLy8uQ29tbW9uSlNcbmV4cG9ydHMuQ1NTRG9jdW1lbnRSdWxlID0gQ1NTT00uQ1NTRG9jdW1lbnRSdWxlO1xuLy8vQ29tbW9uSlNcbiIsIi8vLkNvbW1vbkpTXG52YXIgQ1NTT00gPSB7XG5cdENTU1N0eWxlRGVjbGFyYXRpb246IHJlcXVpcmUoXCIuL0NTU1N0eWxlRGVjbGFyYXRpb25cIikuQ1NTU3R5bGVEZWNsYXJhdGlvbixcblx0Q1NTUnVsZTogcmVxdWlyZShcIi4vQ1NTUnVsZVwiKS5DU1NSdWxlXG59O1xuLy8vQ29tbW9uSlNcblxuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQHNlZSBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS8jY3NzLWZvbnQtZmFjZS1ydWxlXG4gKi9cbkNTU09NLkNTU0ZvbnRGYWNlUnVsZSA9IGZ1bmN0aW9uIENTU0ZvbnRGYWNlUnVsZSgpIHtcblx0Q1NTT00uQ1NTUnVsZS5jYWxsKHRoaXMpO1xuXHR0aGlzLnN0eWxlID0gbmV3IENTU09NLkNTU1N0eWxlRGVjbGFyYXRpb24oKTtcblx0dGhpcy5zdHlsZS5wYXJlbnRSdWxlID0gdGhpcztcbn07XG5cbkNTU09NLkNTU0ZvbnRGYWNlUnVsZS5wcm90b3R5cGUgPSBuZXcgQ1NTT00uQ1NTUnVsZSgpO1xuQ1NTT00uQ1NTRm9udEZhY2VSdWxlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENTU09NLkNTU0ZvbnRGYWNlUnVsZTtcbkNTU09NLkNTU0ZvbnRGYWNlUnVsZS5wcm90b3R5cGUudHlwZSA9IDU7XG4vL0ZJWE1FXG4vL0NTU09NLkNTU0ZvbnRGYWNlUnVsZS5wcm90b3R5cGUuaW5zZXJ0UnVsZSA9IENTU1N0eWxlU2hlZXQucHJvdG90eXBlLmluc2VydFJ1bGU7XG4vL0NTU09NLkNTU0ZvbnRGYWNlUnVsZS5wcm90b3R5cGUuZGVsZXRlUnVsZSA9IENTU1N0eWxlU2hlZXQucHJvdG90eXBlLmRlbGV0ZVJ1bGU7XG5cbi8vIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5hcHBsZS5jb20vc291cmNlL1dlYkNvcmUvV2ViQ29yZS05NTUuNjYuMS9jc3MvV2ViS2l0Q1NTRm9udEZhY2VSdWxlLmNwcFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KENTU09NLkNTU0ZvbnRGYWNlUnVsZS5wcm90b3R5cGUsIFwiY3NzVGV4dFwiLCB7XG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiQGZvbnQtZmFjZSB7XCIgKyB0aGlzLnN0eWxlLmNzc1RleHQgKyBcIn1cIjtcbiAgfVxufSk7XG5cblxuLy8uQ29tbW9uSlNcbmV4cG9ydHMuQ1NTRm9udEZhY2VSdWxlID0gQ1NTT00uQ1NTRm9udEZhY2VSdWxlO1xuLy8vQ29tbW9uSlNcbiIsIi8vLkNvbW1vbkpTXG52YXIgQ1NTT00gPSB7XG5cdENTU1J1bGU6IHJlcXVpcmUoXCIuL0NTU1J1bGVcIikuQ1NTUnVsZVxufTtcbi8vL0NvbW1vbkpTXG5cblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBzZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyN0aGUtY3NzZ3JvdXBpbmdydWxlLWludGVyZmFjZVxuICovXG5DU1NPTS5DU1NHcm91cGluZ1J1bGUgPSBmdW5jdGlvbiBDU1NHcm91cGluZ1J1bGUoKSB7XG5cdENTU09NLkNTU1J1bGUuY2FsbCh0aGlzKTtcblx0dGhpcy5jc3NSdWxlcyA9IFtdO1xufTtcblxuQ1NTT00uQ1NTR3JvdXBpbmdSdWxlLnByb3RvdHlwZSA9IG5ldyBDU1NPTS5DU1NSdWxlKCk7XG5DU1NPTS5DU1NHcm91cGluZ1J1bGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ1NTT00uQ1NTR3JvdXBpbmdSdWxlO1xuXG5cbi8qKlxuICogVXNlZCB0byBpbnNlcnQgYSBuZXcgQ1NTIHJ1bGUgdG8gYSBsaXN0IG9mIENTUyBydWxlcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogICBjc3NHcm91cGluZ1J1bGUuY3NzVGV4dFxuICogICAtPiBcImJvZHl7bWFyZ2luOjA7fVwiXG4gKiAgIGNzc0dyb3VwaW5nUnVsZS5pbnNlcnRSdWxlKFwiaW1ne2JvcmRlcjpub25lO31cIiwgMSlcbiAqICAgLT4gMVxuICogICBjc3NHcm91cGluZ1J1bGUuY3NzVGV4dFxuICogICAtPiBcImJvZHl7bWFyZ2luOjA7fWltZ3tib3JkZXI6bm9uZTt9XCJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcnVsZVxuICogQHBhcmFtIHtudW1iZXJ9IFtpbmRleF1cbiAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzc29tLTEvI2RvbS1jc3Nncm91cGluZ3J1bGUtaW5zZXJ0cnVsZVxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgaW5kZXggd2l0aGluIHRoZSBncm91cGluZyBydWxlJ3MgY29sbGVjdGlvbiBvZiB0aGUgbmV3bHkgaW5zZXJ0ZWQgcnVsZS5cbiAqL1xuIENTU09NLkNTU0dyb3VwaW5nUnVsZS5wcm90b3R5cGUuaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSwgaW5kZXgpIHtcblx0aWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRoaXMuY3NzUnVsZXMubGVuZ3RoKSB7XG5cdFx0dGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJTkRFWF9TSVpFX0VSUlwiKTtcblx0fVxuXHR2YXIgY3NzUnVsZSA9IENTU09NLnBhcnNlKHJ1bGUpLmNzc1J1bGVzWzBdO1xuXHRjc3NSdWxlLnBhcmVudFJ1bGUgPSB0aGlzO1xuXHR0aGlzLmNzc1J1bGVzLnNwbGljZShpbmRleCwgMCwgY3NzUnVsZSk7XG5cdHJldHVybiBpbmRleDtcbn07XG5cbi8qKlxuICogVXNlZCB0byBkZWxldGUgYSBydWxlIGZyb20gdGhlIGdyb3VwaW5nIHJ1bGUuXG4gKlxuICogICBjc3NHcm91cGluZ1J1bGUuY3NzVGV4dFxuICogICAtPiBcImltZ3tib3JkZXI6bm9uZTt9Ym9keXttYXJnaW46MDt9XCJcbiAqICAgY3NzR3JvdXBpbmdSdWxlLmRlbGV0ZVJ1bGUoMClcbiAqICAgY3NzR3JvdXBpbmdSdWxlLmNzc1RleHRcbiAqICAgLT4gXCJib2R5e21hcmdpbjowO31cIlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCB3aXRoaW4gdGhlIGdyb3VwaW5nIHJ1bGUncyBydWxlIGxpc3Qgb2YgdGhlIHJ1bGUgdG8gcmVtb3ZlLlxuICogQHNlZSBodHRwczovL3d3dy53My5vcmcvVFIvY3Nzb20tMS8jZG9tLWNzc2dyb3VwaW5ncnVsZS1kZWxldGVydWxlXG4gKi9cbiBDU1NPTS5DU1NHcm91cGluZ1J1bGUucHJvdG90eXBlLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKGluZGV4KSB7XG5cdGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5jc3NSdWxlcy5sZW5ndGgpIHtcblx0XHR0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIklOREVYX1NJWkVfRVJSXCIpO1xuXHR9XG5cdHRoaXMuY3NzUnVsZXMuc3BsaWNlKGluZGV4LCAxKVswXS5wYXJlbnRSdWxlID0gbnVsbDtcbn07XG5cbi8vLkNvbW1vbkpTXG5leHBvcnRzLkNTU0dyb3VwaW5nUnVsZSA9IENTU09NLkNTU0dyb3VwaW5nUnVsZTtcbi8vL0NvbW1vbkpTXG4iLCIvLy5Db21tb25KU1xudmFyIENTU09NID0ge1xuXHRDU1NSdWxlOiByZXF1aXJlKFwiLi9DU1NSdWxlXCIpLkNTU1J1bGVcbn07XG4vLy9Db21tb25KU1xuXG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL3NoYWRvdy1kb20vI2hvc3QtYXQtcnVsZVxuICovXG5DU1NPTS5DU1NIb3N0UnVsZSA9IGZ1bmN0aW9uIENTU0hvc3RSdWxlKCkge1xuXHRDU1NPTS5DU1NSdWxlLmNhbGwodGhpcyk7XG5cdHRoaXMuY3NzUnVsZXMgPSBbXTtcbn07XG5cbkNTU09NLkNTU0hvc3RSdWxlLnByb3RvdHlwZSA9IG5ldyBDU1NPTS5DU1NSdWxlKCk7XG5DU1NPTS5DU1NIb3N0UnVsZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDU1NPTS5DU1NIb3N0UnVsZTtcbkNTU09NLkNTU0hvc3RSdWxlLnByb3RvdHlwZS50eXBlID0gMTAwMTtcbi8vRklYTUVcbi8vQ1NTT00uQ1NTSG9zdFJ1bGUucHJvdG90eXBlLmluc2VydFJ1bGUgPSBDU1NTdHlsZVNoZWV0LnByb3RvdHlwZS5pbnNlcnRSdWxlO1xuLy9DU1NPTS5DU1NIb3N0UnVsZS5wcm90b3R5cGUuZGVsZXRlUnVsZSA9IENTU1N0eWxlU2hlZXQucHJvdG90eXBlLmRlbGV0ZVJ1bGU7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShDU1NPTS5DU1NIb3N0UnVsZS5wcm90b3R5cGUsIFwiY3NzVGV4dFwiLCB7XG5cdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNzc1RleHRzID0gW107XG5cdFx0Zm9yICh2YXIgaT0wLCBsZW5ndGg9dGhpcy5jc3NSdWxlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0Y3NzVGV4dHMucHVzaCh0aGlzLmNzc1J1bGVzW2ldLmNzc1RleHQpO1xuXHRcdH1cblx0XHRyZXR1cm4gXCJAaG9zdCB7XCIgKyBjc3NUZXh0cy5qb2luKFwiXCIpICsgXCJ9XCI7XG5cdH1cbn0pO1xuXG5cbi8vLkNvbW1vbkpTXG5leHBvcnRzLkNTU0hvc3RSdWxlID0gQ1NTT00uQ1NTSG9zdFJ1bGU7XG4vLy9Db21tb25KU1xuIiwiLy8uQ29tbW9uSlNcbnZhciBDU1NPTSA9IHtcblx0Q1NTUnVsZTogcmVxdWlyZShcIi4vQ1NTUnVsZVwiKS5DU1NSdWxlLFxuXHRDU1NTdHlsZVNoZWV0OiByZXF1aXJlKFwiLi9DU1NTdHlsZVNoZWV0XCIpLkNTU1N0eWxlU2hlZXQsXG5cdE1lZGlhTGlzdDogcmVxdWlyZShcIi4vTWVkaWFMaXN0XCIpLk1lZGlhTGlzdFxufTtcbi8vL0NvbW1vbkpTXG5cblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBzZWUgaHR0cDovL2Rldi53My5vcmcvY3Nzd2cvY3Nzb20vI2Nzc2ltcG9ydHJ1bGVcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItU3R5bGUvY3NzLmh0bWwjQ1NTLUNTU0ltcG9ydFJ1bGVcbiAqL1xuQ1NTT00uQ1NTSW1wb3J0UnVsZSA9IGZ1bmN0aW9uIENTU0ltcG9ydFJ1bGUoKSB7XG5cdENTU09NLkNTU1J1bGUuY2FsbCh0aGlzKTtcblx0dGhpcy5ocmVmID0gXCJcIjtcblx0dGhpcy5tZWRpYSA9IG5ldyBDU1NPTS5NZWRpYUxpc3QoKTtcblx0dGhpcy5zdHlsZVNoZWV0ID0gbmV3IENTU09NLkNTU1N0eWxlU2hlZXQoKTtcbn07XG5cbkNTU09NLkNTU0ltcG9ydFJ1bGUucHJvdG90eXBlID0gbmV3IENTU09NLkNTU1J1bGUoKTtcbkNTU09NLkNTU0ltcG9ydFJ1bGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ1NTT00uQ1NTSW1wb3J0UnVsZTtcbkNTU09NLkNTU0ltcG9ydFJ1bGUucHJvdG90eXBlLnR5cGUgPSAzO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQ1NTT00uQ1NTSW1wb3J0UnVsZS5wcm90b3R5cGUsIFwiY3NzVGV4dFwiLCB7XG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIG1lZGlhVGV4dCA9IHRoaXMubWVkaWEubWVkaWFUZXh0O1xuICAgIHJldHVybiBcIkBpbXBvcnQgdXJsKFwiICsgdGhpcy5ocmVmICsgXCIpXCIgKyAobWVkaWFUZXh0ID8gXCIgXCIgKyBtZWRpYVRleHQgOiBcIlwiKSArIFwiO1wiO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGNzc1RleHQpIHtcbiAgICB2YXIgaSA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBAaW1wb3J0IHVybChwYXJ0aWFsLmNzcykgc2NyZWVuLCBoYW5kaGVsZDtcbiAgICAgKiAgICAgICAgfHwgICAgICAgICAgICAgICB8XG4gICAgICogICAgICAgIGFmdGVyLWltcG9ydCAgICAgbWVkaWFcbiAgICAgKiAgICAgICAgIHxcbiAgICAgKiAgICAgICAgIHVybFxuICAgICAqL1xuICAgIHZhciBzdGF0ZSA9ICcnO1xuXG4gICAgdmFyIGJ1ZmZlciA9ICcnO1xuICAgIHZhciBpbmRleDtcbiAgICBmb3IgKHZhciBjaGFyYWN0ZXI7IChjaGFyYWN0ZXIgPSBjc3NUZXh0LmNoYXJBdChpKSk7IGkrKykge1xuXG4gICAgICBzd2l0Y2ggKGNoYXJhY3Rlcikge1xuICAgICAgICBjYXNlICcgJzpcbiAgICAgICAgY2FzZSAnXFx0JzpcbiAgICAgICAgY2FzZSAnXFxyJzpcbiAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgY2FzZSAnXFxmJzpcbiAgICAgICAgICBpZiAoc3RhdGUgPT09ICdhZnRlci1pbXBvcnQnKSB7XG4gICAgICAgICAgICBzdGF0ZSA9ICd1cmwnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBidWZmZXIgKz0gY2hhcmFjdGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdAJzpcbiAgICAgICAgICBpZiAoIXN0YXRlICYmIGNzc1RleHQuaW5kZXhPZignQGltcG9ydCcsIGkpID09PSBpKSB7XG4gICAgICAgICAgICBzdGF0ZSA9ICdhZnRlci1pbXBvcnQnO1xuICAgICAgICAgICAgaSArPSAnaW1wb3J0Jy5sZW5ndGg7XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAndSc6XG4gICAgICAgICAgaWYgKHN0YXRlID09PSAndXJsJyAmJiBjc3NUZXh0LmluZGV4T2YoJ3VybCgnLCBpKSA9PT0gaSkge1xuICAgICAgICAgICAgaW5kZXggPSBjc3NUZXh0LmluZGV4T2YoJyknLCBpICsgMSk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgIHRocm93IGkgKyAnOiBcIilcIiBub3QgZm91bmQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSArPSAndXJsKCcubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIHVybCA9IGNzc1RleHQuc2xpY2UoaSwgaW5kZXgpO1xuICAgICAgICAgICAgaWYgKHVybFswXSA9PT0gdXJsW3VybC5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgICBpZiAodXJsWzBdID09PSAnXCInIHx8IHVybFswXSA9PT0gXCInXCIpIHtcbiAgICAgICAgICAgICAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhyZWYgPSB1cmw7XG4gICAgICAgICAgICBpID0gaW5kZXg7XG4gICAgICAgICAgICBzdGF0ZSA9ICdtZWRpYSc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICBpZiAoc3RhdGUgPT09ICd1cmwnKSB7XG4gICAgICAgICAgICBpbmRleCA9IGNzc1RleHQuaW5kZXhPZignXCInLCBpICsgMSk7XG4gICAgICAgICAgICBpZiAoIWluZGV4KSB7XG4gICAgICAgICAgICAgIHRocm93IGkgKyBcIjogJ1xcXCInIG5vdCBmb3VuZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ocmVmID0gY3NzVGV4dC5zbGljZShpICsgMSwgaW5kZXgpO1xuICAgICAgICAgICAgaSA9IGluZGV4O1xuICAgICAgICAgICAgc3RhdGUgPSAnbWVkaWEnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiJ1wiOlxuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gJ3VybCcpIHtcbiAgICAgICAgICAgIGluZGV4ID0gY3NzVGV4dC5pbmRleE9mKFwiJ1wiLCBpICsgMSk7XG4gICAgICAgICAgICBpZiAoIWluZGV4KSB7XG4gICAgICAgICAgICAgIHRocm93IGkgKyAnOiBcIlxcJ1wiIG5vdCBmb3VuZCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhyZWYgPSBjc3NUZXh0LnNsaWNlKGkgKyAxLCBpbmRleCk7XG4gICAgICAgICAgICBpID0gaW5kZXg7XG4gICAgICAgICAgICBzdGF0ZSA9ICdtZWRpYSc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJzsnOlxuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gJ21lZGlhJykge1xuICAgICAgICAgICAgaWYgKGJ1ZmZlcikge1xuICAgICAgICAgICAgICB0aGlzLm1lZGlhLm1lZGlhVGV4dCA9IGJ1ZmZlci50cmltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKHN0YXRlID09PSAnbWVkaWEnKSB7XG4gICAgICAgICAgICBidWZmZXIgKz0gY2hhcmFjdGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG5cbi8vLkNvbW1vbkpTXG5leHBvcnRzLkNTU0ltcG9ydFJ1bGUgPSBDU1NPTS5DU1NJbXBvcnRSdWxlO1xuLy8vQ29tbW9uSlNcbiIsIi8vLkNvbW1vbkpTXG52YXIgQ1NTT00gPSB7XG5cdENTU1J1bGU6IHJlcXVpcmUoXCIuL0NTU1J1bGVcIikuQ1NTUnVsZSxcblx0Q1NTU3R5bGVEZWNsYXJhdGlvbjogcmVxdWlyZSgnLi9DU1NTdHlsZURlY2xhcmF0aW9uJykuQ1NTU3R5bGVEZWNsYXJhdGlvblxufTtcbi8vL0NvbW1vbkpTXG5cblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1hbmltYXRpb25zLyNET00tQ1NTS2V5ZnJhbWVSdWxlXG4gKi9cbkNTU09NLkNTU0tleWZyYW1lUnVsZSA9IGZ1bmN0aW9uIENTU0tleWZyYW1lUnVsZSgpIHtcblx0Q1NTT00uQ1NTUnVsZS5jYWxsKHRoaXMpO1xuXHR0aGlzLmtleVRleHQgPSAnJztcblx0dGhpcy5zdHlsZSA9IG5ldyBDU1NPTS5DU1NTdHlsZURlY2xhcmF0aW9uKCk7XG5cdHRoaXMuc3R5bGUucGFyZW50UnVsZSA9IHRoaXM7XG59O1xuXG5DU1NPTS5DU1NLZXlmcmFtZVJ1bGUucHJvdG90eXBlID0gbmV3IENTU09NLkNTU1J1bGUoKTtcbkNTU09NLkNTU0tleWZyYW1lUnVsZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDU1NPTS5DU1NLZXlmcmFtZVJ1bGU7XG5DU1NPTS5DU1NLZXlmcmFtZVJ1bGUucHJvdG90eXBlLnR5cGUgPSA4O1xuLy9GSVhNRVxuLy9DU1NPTS5DU1NLZXlmcmFtZVJ1bGUucHJvdG90eXBlLmluc2VydFJ1bGUgPSBDU1NTdHlsZVNoZWV0LnByb3RvdHlwZS5pbnNlcnRSdWxlO1xuLy9DU1NPTS5DU1NLZXlmcmFtZVJ1bGUucHJvdG90eXBlLmRlbGV0ZVJ1bGUgPSBDU1NTdHlsZVNoZWV0LnByb3RvdHlwZS5kZWxldGVSdWxlO1xuXG4vLyBodHRwOi8vd3d3Lm9wZW5zb3VyY2UuYXBwbGUuY29tL3NvdXJjZS9XZWJDb3JlL1dlYkNvcmUtOTU1LjY2LjEvY3NzL1dlYktpdENTU0tleWZyYW1lUnVsZS5jcHBcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShDU1NPTS5DU1NLZXlmcmFtZVJ1bGUucHJvdG90eXBlLCBcImNzc1RleHRcIiwge1xuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmtleVRleHQgKyBcIiB7XCIgKyB0aGlzLnN0eWxlLmNzc1RleHQgKyBcIn0gXCI7XG4gIH1cbn0pO1xuXG5cbi8vLkNvbW1vbkpTXG5leHBvcnRzLkNTU0tleWZyYW1lUnVsZSA9IENTU09NLkNTU0tleWZyYW1lUnVsZTtcbi8vL0NvbW1vbkpTXG4iLCIvLy5Db21tb25KU1xudmFyIENTU09NID0ge1xuXHRDU1NSdWxlOiByZXF1aXJlKFwiLi9DU1NSdWxlXCIpLkNTU1J1bGVcbn07XG4vLy9Db21tb25KU1xuXG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtYW5pbWF0aW9ucy8jRE9NLUNTU0tleWZyYW1lc1J1bGVcbiAqL1xuQ1NTT00uQ1NTS2V5ZnJhbWVzUnVsZSA9IGZ1bmN0aW9uIENTU0tleWZyYW1lc1J1bGUoKSB7XG5cdENTU09NLkNTU1J1bGUuY2FsbCh0aGlzKTtcblx0dGhpcy5uYW1lID0gJyc7XG5cdHRoaXMuY3NzUnVsZXMgPSBbXTtcbn07XG5cbkNTU09NLkNTU0tleWZyYW1lc1J1bGUucHJvdG90eXBlID0gbmV3IENTU09NLkNTU1J1bGUoKTtcbkNTU09NLkNTU0tleWZyYW1lc1J1bGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ1NTT00uQ1NTS2V5ZnJhbWVzUnVsZTtcbkNTU09NLkNTU0tleWZyYW1lc1J1bGUucHJvdG90eXBlLnR5cGUgPSA3O1xuLy9GSVhNRVxuLy9DU1NPTS5DU1NLZXlmcmFtZXNSdWxlLnByb3RvdHlwZS5pbnNlcnRSdWxlID0gQ1NTU3R5bGVTaGVldC5wcm90b3R5cGUuaW5zZXJ0UnVsZTtcbi8vQ1NTT00uQ1NTS2V5ZnJhbWVzUnVsZS5wcm90b3R5cGUuZGVsZXRlUnVsZSA9IENTU1N0eWxlU2hlZXQucHJvdG90eXBlLmRlbGV0ZVJ1bGU7XG5cbi8vIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5hcHBsZS5jb20vc291cmNlL1dlYkNvcmUvV2ViQ29yZS05NTUuNjYuMS9jc3MvV2ViS2l0Q1NTS2V5ZnJhbWVzUnVsZS5jcHBcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShDU1NPTS5DU1NLZXlmcmFtZXNSdWxlLnByb3RvdHlwZSwgXCJjc3NUZXh0XCIsIHtcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3NzVGV4dHMgPSBbXTtcbiAgICBmb3IgKHZhciBpPTAsIGxlbmd0aD10aGlzLmNzc1J1bGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBjc3NUZXh0cy5wdXNoKFwiICBcIiArIHRoaXMuY3NzUnVsZXNbaV0uY3NzVGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBcIkBcIiArICh0aGlzLl92ZW5kb3JQcmVmaXggfHwgJycpICsgXCJrZXlmcmFtZXMgXCIgKyB0aGlzLm5hbWUgKyBcIiB7IFxcblwiICsgY3NzVGV4dHMuam9pbihcIlxcblwiKSArIFwiXFxufVwiO1xuICB9XG59KTtcblxuXG4vLy5Db21tb25KU1xuZXhwb3J0cy5DU1NLZXlmcmFtZXNSdWxlID0gQ1NTT00uQ1NTS2V5ZnJhbWVzUnVsZTtcbi8vL0NvbW1vbkpTXG4iLCIvLy5Db21tb25KU1xudmFyIENTU09NID0ge1xuXHRDU1NSdWxlOiByZXF1aXJlKFwiLi9DU1NSdWxlXCIpLkNTU1J1bGUsXG5cdENTU0dyb3VwaW5nUnVsZTogcmVxdWlyZShcIi4vQ1NTR3JvdXBpbmdSdWxlXCIpLkNTU0dyb3VwaW5nUnVsZSxcblx0Q1NTQ29uZGl0aW9uUnVsZTogcmVxdWlyZShcIi4vQ1NTQ29uZGl0aW9uUnVsZVwiKS5DU1NDb25kaXRpb25SdWxlLFxuXHRNZWRpYUxpc3Q6IHJlcXVpcmUoXCIuL01lZGlhTGlzdFwiKS5NZWRpYUxpc3Rcbn07XG4vLy9Db21tb25KU1xuXG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAc2VlIGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzc29tLyNjc3NtZWRpYXJ1bGVcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItU3R5bGUvY3NzLmh0bWwjQ1NTLUNTU01lZGlhUnVsZVxuICovXG5DU1NPTS5DU1NNZWRpYVJ1bGUgPSBmdW5jdGlvbiBDU1NNZWRpYVJ1bGUoKSB7XG5cdENTU09NLkNTU0NvbmRpdGlvblJ1bGUuY2FsbCh0aGlzKTtcblx0dGhpcy5tZWRpYSA9IG5ldyBDU1NPTS5NZWRpYUxpc3QoKTtcbn07XG5cbkNTU09NLkNTU01lZGlhUnVsZS5wcm90b3R5cGUgPSBuZXcgQ1NTT00uQ1NTQ29uZGl0aW9uUnVsZSgpO1xuQ1NTT00uQ1NTTWVkaWFSdWxlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENTU09NLkNTU01lZGlhUnVsZTtcbkNTU09NLkNTU01lZGlhUnVsZS5wcm90b3R5cGUudHlwZSA9IDQ7XG5cbi8vIGh0dHBzOi8vb3BlbnNvdXJjZS5hcHBsZS5jb20vc291cmNlL1dlYkNvcmUvV2ViQ29yZS03NjExLjEuMjEuMTYxLjMvY3NzL0NTU01lZGlhUnVsZS5jcHBcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKENTU09NLkNTU01lZGlhUnVsZS5wcm90b3R5cGUsIHtcbiAgXCJjb25kaXRpb25UZXh0XCI6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubWVkaWEubWVkaWFUZXh0O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdGhpcy5tZWRpYS5tZWRpYVRleHQgPSB2YWx1ZTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIFwiY3NzVGV4dFwiOiB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjc3NUZXh0cyA9IFtdO1xuICAgICAgZm9yICh2YXIgaT0wLCBsZW5ndGg9dGhpcy5jc3NSdWxlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBjc3NUZXh0cy5wdXNoKHRoaXMuY3NzUnVsZXNbaV0uY3NzVGV4dCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gXCJAbWVkaWEgXCIgKyB0aGlzLm1lZGlhLm1lZGlhVGV4dCArIFwiIHtcIiArIGNzc1RleHRzLmpvaW4oXCJcIikgKyBcIn1cIjtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH1cbn0pO1xuXG5cbi8vLkNvbW1vbkpTXG5leHBvcnRzLkNTU01lZGlhUnVsZSA9IENTU09NLkNTU01lZGlhUnVsZTtcbi8vL0NvbW1vbkpTXG4iLCIvLy5Db21tb25KU1xudmFyIENTU09NID0ge307XG4vLy9Db21tb25KU1xuXG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAc2VlIGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzc29tLyN0aGUtY3NzcnVsZS1pbnRlcmZhY2VcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItU3R5bGUvY3NzLmh0bWwjQ1NTLUNTU1J1bGVcbiAqL1xuQ1NTT00uQ1NTUnVsZSA9IGZ1bmN0aW9uIENTU1J1bGUoKSB7XG5cdHRoaXMucGFyZW50UnVsZSA9IG51bGw7XG5cdHRoaXMucGFyZW50U3R5bGVTaGVldCA9IG51bGw7XG59O1xuXG5DU1NPTS5DU1NSdWxlLlVOS05PV05fUlVMRSA9IDA7ICAgICAgICAgICAgICAgICAvLyBvYnNvbGV0ZVxuQ1NTT00uQ1NTUnVsZS5TVFlMRV9SVUxFID0gMTtcbkNTU09NLkNTU1J1bGUuQ0hBUlNFVF9SVUxFID0gMjsgICAgICAgICAgICAgICAgIC8vIG9ic29sZXRlXG5DU1NPTS5DU1NSdWxlLklNUE9SVF9SVUxFID0gMztcbkNTU09NLkNTU1J1bGUuTUVESUFfUlVMRSA9IDQ7XG5DU1NPTS5DU1NSdWxlLkZPTlRfRkFDRV9SVUxFID0gNTtcbkNTU09NLkNTU1J1bGUuUEFHRV9SVUxFID0gNjtcbkNTU09NLkNTU1J1bGUuS0VZRlJBTUVTX1JVTEUgPSA3O1xuQ1NTT00uQ1NTUnVsZS5LRVlGUkFNRV9SVUxFID0gODtcbkNTU09NLkNTU1J1bGUuTUFSR0lOX1JVTEUgPSA5O1xuQ1NTT00uQ1NTUnVsZS5OQU1FU1BBQ0VfUlVMRSA9IDEwO1xuQ1NTT00uQ1NTUnVsZS5DT1VOVEVSX1NUWUxFX1JVTEUgPSAxMTtcbkNTU09NLkNTU1J1bGUuU1VQUE9SVFNfUlVMRSA9IDEyO1xuQ1NTT00uQ1NTUnVsZS5ET0NVTUVOVF9SVUxFID0gMTM7XG5DU1NPTS5DU1NSdWxlLkZPTlRfRkVBVFVSRV9WQUxVRVNfUlVMRSA9IDE0O1xuQ1NTT00uQ1NTUnVsZS5WSUVXUE9SVF9SVUxFID0gMTU7XG5DU1NPTS5DU1NSdWxlLlJFR0lPTl9TVFlMRV9SVUxFID0gMTY7XG5cblxuQ1NTT00uQ1NTUnVsZS5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBDU1NPTS5DU1NSdWxlXG5cdC8vRklYTUVcbn07XG5cblxuLy8uQ29tbW9uSlNcbmV4cG9ydHMuQ1NTUnVsZSA9IENTU09NLkNTU1J1bGU7XG4vLy9Db21tb25KU1xuIiwiLy8uQ29tbW9uSlNcbnZhciBDU1NPTSA9IHt9O1xuLy8vQ29tbW9uSlNcblxuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMi1TdHlsZS9jc3MuaHRtbCNDU1MtQ1NTU3R5bGVEZWNsYXJhdGlvblxuICovXG5DU1NPTS5DU1NTdHlsZURlY2xhcmF0aW9uID0gZnVuY3Rpb24gQ1NTU3R5bGVEZWNsYXJhdGlvbigpe1xuXHR0aGlzLmxlbmd0aCA9IDA7XG5cdHRoaXMucGFyZW50UnVsZSA9IG51bGw7XG5cblx0Ly8gTk9OLVNUQU5EQVJEXG5cdHRoaXMuX2ltcG9ydGFudHMgPSB7fTtcbn07XG5cblxuQ1NTT00uQ1NTU3R5bGVEZWNsYXJhdGlvbi5wcm90b3R5cGUgPSB7XG5cblx0Y29uc3RydWN0b3I6IENTU09NLkNTU1N0eWxlRGVjbGFyYXRpb24sXG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG5cdCAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItU3R5bGUvY3NzLmh0bWwjQ1NTLUNTU1N0eWxlRGVjbGFyYXRpb24tZ2V0UHJvcGVydHlWYWx1ZVxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHkgaWYgaXQgaGFzIGJlZW4gZXhwbGljaXRseSBzZXQgZm9yIHRoaXMgZGVjbGFyYXRpb24gYmxvY2suXG5cdCAqIFJldHVybnMgdGhlIGVtcHR5IHN0cmluZyBpZiB0aGUgcHJvcGVydHkgaGFzIG5vdCBiZWVuIHNldC5cblx0ICovXG5cdGdldFByb3BlcnR5VmFsdWU6IGZ1bmN0aW9uKG5hbWUpIHtcblx0XHRyZXR1cm4gdGhpc1tuYW1lXSB8fCBcIlwiO1xuXHR9LFxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcblx0ICogQHBhcmFtIHtzdHJpbmd9IFtwcmlvcml0eT1udWxsXSBcImltcG9ydGFudFwiIG9yIG51bGxcblx0ICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMi1TdHlsZS9jc3MuaHRtbCNDU1MtQ1NTU3R5bGVEZWNsYXJhdGlvbi1zZXRQcm9wZXJ0eVxuXHQgKi9cblx0c2V0UHJvcGVydHk6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuXHRcdGlmICh0aGlzW25hbWVdKSB7XG5cdFx0XHQvLyBQcm9wZXJ0eSBhbHJlYWR5IGV4aXN0LiBPdmVyd3JpdGUgaXQuXG5cdFx0XHR2YXIgaW5kZXggPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKHRoaXMsIG5hbWUpO1xuXHRcdFx0aWYgKGluZGV4IDwgMCkge1xuXHRcdFx0XHR0aGlzW3RoaXMubGVuZ3RoXSA9IG5hbWU7XG5cdFx0XHRcdHRoaXMubGVuZ3RoKys7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIE5ldyBwcm9wZXJ0eS5cblx0XHRcdHRoaXNbdGhpcy5sZW5ndGhdID0gbmFtZTtcblx0XHRcdHRoaXMubGVuZ3RoKys7XG5cdFx0fVxuXHRcdHRoaXNbbmFtZV0gPSB2YWx1ZSArIFwiXCI7XG5cdFx0dGhpcy5faW1wb3J0YW50c1tuYW1lXSA9IHByaW9yaXR5O1xuXHR9LFxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuXHQgKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0yLVN0eWxlL2Nzcy5odG1sI0NTUy1DU1NTdHlsZURlY2xhcmF0aW9uLXJlbW92ZVByb3BlcnR5XG5cdCAqIEByZXR1cm4ge3N0cmluZ30gdGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSBpZiBpdCBoYXMgYmVlbiBleHBsaWNpdGx5IHNldCBmb3IgdGhpcyBkZWNsYXJhdGlvbiBibG9jay5cblx0ICogUmV0dXJucyB0aGUgZW1wdHkgc3RyaW5nIGlmIHRoZSBwcm9wZXJ0eSBoYXMgbm90IGJlZW4gc2V0IG9yIHRoZSBwcm9wZXJ0eSBuYW1lIGRvZXMgbm90IGNvcnJlc3BvbmQgdG8gYSBrbm93biBDU1MgcHJvcGVydHkuXG5cdCAqL1xuXHRyZW1vdmVQcm9wZXJ0eTogZnVuY3Rpb24obmFtZSkge1xuXHRcdGlmICghKG5hbWUgaW4gdGhpcykpIHtcblx0XHRcdHJldHVybiBcIlwiO1xuXHRcdH1cblx0XHR2YXIgaW5kZXggPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKHRoaXMsIG5hbWUpO1xuXHRcdGlmIChpbmRleCA8IDApIHtcblx0XHRcdHJldHVybiBcIlwiO1xuXHRcdH1cblx0XHR2YXIgcHJldlZhbHVlID0gdGhpc1tuYW1lXTtcblx0XHR0aGlzW25hbWVdID0gXCJcIjtcblxuXHRcdC8vIFRoYXQncyB3aGF0IFdlYktpdCBhbmQgT3BlcmEgZG9cblx0XHRBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwodGhpcywgaW5kZXgsIDEpO1xuXG5cdFx0Ly8gVGhhdCdzIHdoYXQgRmlyZWZveCBkb2VzXG5cdFx0Ly90aGlzW2luZGV4XSA9IFwiXCJcblxuXHRcdHJldHVybiBwcmV2VmFsdWU7XG5cdH0sXG5cblx0Z2V0UHJvcGVydHlDU1NWYWx1ZTogZnVuY3Rpb24oKSB7XG5cdFx0Ly9GSVhNRVxuXHR9LFxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuXHQgKi9cblx0Z2V0UHJvcGVydHlQcmlvcml0eTogZnVuY3Rpb24obmFtZSkge1xuXHRcdHJldHVybiB0aGlzLl9pbXBvcnRhbnRzW25hbWVdIHx8IFwiXCI7XG5cdH0sXG5cblxuXHQvKipcblx0ICogICBlbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gXCJhdXRvXCJcblx0ICogICBlbGVtZW50LnN0eWxlLmdldFByb3BlcnR5U2hvcnRoYW5kKFwib3ZlcmZsb3cteFwiKVxuXHQgKiAgIC0+IFwib3ZlcmZsb3dcIlxuXHQgKi9cblx0Z2V0UHJvcGVydHlTaG9ydGhhbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdC8vRklYTUVcblx0fSxcblxuXHRpc1Byb3BlcnR5SW1wbGljaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdC8vRklYTUVcblx0fSxcblxuXHQvLyBEb2Vzbid0IHdvcmsgaW4gSUUgPCA5XG5cdGdldCBjc3NUZXh0KCl7XG5cdFx0dmFyIHByb3BlcnRpZXMgPSBbXTtcblx0XHRmb3IgKHZhciBpPTAsIGxlbmd0aD10aGlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgKytpKSB7XG5cdFx0XHR2YXIgbmFtZSA9IHRoaXNbaV07XG5cdFx0XHR2YXIgdmFsdWUgPSB0aGlzLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG5cdFx0XHR2YXIgcHJpb3JpdHkgPSB0aGlzLmdldFByb3BlcnR5UHJpb3JpdHkobmFtZSk7XG5cdFx0XHRpZiAocHJpb3JpdHkpIHtcblx0XHRcdFx0cHJpb3JpdHkgPSBcIiAhXCIgKyBwcmlvcml0eTtcblx0XHRcdH1cblx0XHRcdHByb3BlcnRpZXNbaV0gPSBuYW1lICsgXCI6IFwiICsgdmFsdWUgKyBwcmlvcml0eSArIFwiO1wiO1xuXHRcdH1cblx0XHRyZXR1cm4gcHJvcGVydGllcy5qb2luKFwiIFwiKTtcblx0fSxcblxuXHRzZXQgY3NzVGV4dCh0ZXh0KXtcblx0XHR2YXIgaSwgbmFtZTtcblx0XHRmb3IgKGkgPSB0aGlzLmxlbmd0aDsgaS0tOykge1xuXHRcdFx0bmFtZSA9IHRoaXNbaV07XG5cdFx0XHR0aGlzW25hbWVdID0gXCJcIjtcblx0XHR9XG5cdFx0QXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKHRoaXMsIDAsIHRoaXMubGVuZ3RoKTtcblx0XHR0aGlzLl9pbXBvcnRhbnRzID0ge307XG5cblx0XHR2YXIgZHVtbXlSdWxlID0gQ1NTT00ucGFyc2UoJyNib2d1c3snICsgdGV4dCArICd9JykuY3NzUnVsZXNbMF0uc3R5bGU7XG5cdFx0dmFyIGxlbmd0aCA9IGR1bW15UnVsZS5sZW5ndGg7XG5cdFx0Zm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG5cdFx0XHRuYW1lID0gZHVtbXlSdWxlW2ldO1xuXHRcdFx0dGhpcy5zZXRQcm9wZXJ0eShkdW1teVJ1bGVbaV0sIGR1bW15UnVsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpLCBkdW1teVJ1bGUuZ2V0UHJvcGVydHlQcmlvcml0eShuYW1lKSk7XG5cdFx0fVxuXHR9XG59O1xuXG5cbi8vLkNvbW1vbkpTXG5leHBvcnRzLkNTU1N0eWxlRGVjbGFyYXRpb24gPSBDU1NPTS5DU1NTdHlsZURlY2xhcmF0aW9uO1xuQ1NTT00ucGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJykucGFyc2U7IC8vIENhbm5vdCBiZSBpbmNsdWRlZCBzb29uZXIgZHVlIHRvIHRoZSBtdXR1YWwgZGVwZW5kZW5jeSBiZXR3ZWVuIHBhcnNlLmpzIGFuZCBDU1NTdHlsZURlY2xhcmF0aW9uLmpzXG4vLy9Db21tb25KU1xuIiwiLy8uQ29tbW9uSlNcbnZhciBDU1NPTSA9IHtcblx0Q1NTU3R5bGVEZWNsYXJhdGlvbjogcmVxdWlyZShcIi4vQ1NTU3R5bGVEZWNsYXJhdGlvblwiKS5DU1NTdHlsZURlY2xhcmF0aW9uLFxuXHRDU1NSdWxlOiByZXF1aXJlKFwiLi9DU1NSdWxlXCIpLkNTU1J1bGVcbn07XG4vLy9Db21tb25KU1xuXG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAc2VlIGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzc29tLyNjc3NzdHlsZXJ1bGVcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItU3R5bGUvY3NzLmh0bWwjQ1NTLUNTU1N0eWxlUnVsZVxuICovXG5DU1NPTS5DU1NTdHlsZVJ1bGUgPSBmdW5jdGlvbiBDU1NTdHlsZVJ1bGUoKSB7XG5cdENTU09NLkNTU1J1bGUuY2FsbCh0aGlzKTtcblx0dGhpcy5zZWxlY3RvclRleHQgPSBcIlwiO1xuXHR0aGlzLnN0eWxlID0gbmV3IENTU09NLkNTU1N0eWxlRGVjbGFyYXRpb24oKTtcblx0dGhpcy5zdHlsZS5wYXJlbnRSdWxlID0gdGhpcztcbn07XG5cbkNTU09NLkNTU1N0eWxlUnVsZS5wcm90b3R5cGUgPSBuZXcgQ1NTT00uQ1NTUnVsZSgpO1xuQ1NTT00uQ1NTU3R5bGVSdWxlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENTU09NLkNTU1N0eWxlUnVsZTtcbkNTU09NLkNTU1N0eWxlUnVsZS5wcm90b3R5cGUudHlwZSA9IDE7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShDU1NPTS5DU1NTdHlsZVJ1bGUucHJvdG90eXBlLCBcImNzc1RleHRcIiwge1xuXHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB0ZXh0O1xuXHRcdGlmICh0aGlzLnNlbGVjdG9yVGV4dCkge1xuXHRcdFx0dGV4dCA9IHRoaXMuc2VsZWN0b3JUZXh0ICsgXCIge1wiICsgdGhpcy5zdHlsZS5jc3NUZXh0ICsgXCJ9XCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRleHQgPSBcIlwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGV4dDtcblx0fSxcblx0c2V0OiBmdW5jdGlvbihjc3NUZXh0KSB7XG5cdFx0dmFyIHJ1bGUgPSBDU1NPTS5DU1NTdHlsZVJ1bGUucGFyc2UoY3NzVGV4dCk7XG5cdFx0dGhpcy5zdHlsZSA9IHJ1bGUuc3R5bGU7XG5cdFx0dGhpcy5zZWxlY3RvclRleHQgPSBydWxlLnNlbGVjdG9yVGV4dDtcblx0fVxufSk7XG5cblxuLyoqXG4gKiBOT04tU1RBTkRBUkRcbiAqIGxpZ2h0d2VpZ2h0IHZlcnNpb24gb2YgcGFyc2UuanMuXG4gKiBAcGFyYW0ge3N0cmluZ30gcnVsZVRleHRcbiAqIEByZXR1cm4gQ1NTU3R5bGVSdWxlXG4gKi9cbkNTU09NLkNTU1N0eWxlUnVsZS5wYXJzZSA9IGZ1bmN0aW9uKHJ1bGVUZXh0KSB7XG5cdHZhciBpID0gMDtcblx0dmFyIHN0YXRlID0gXCJzZWxlY3RvclwiO1xuXHR2YXIgaW5kZXg7XG5cdHZhciBqID0gaTtcblx0dmFyIGJ1ZmZlciA9IFwiXCI7XG5cblx0dmFyIFNJR05JRklDQU5UX1dISVRFU1BBQ0UgPSB7XG5cdFx0XCJzZWxlY3RvclwiOiB0cnVlLFxuXHRcdFwidmFsdWVcIjogdHJ1ZVxuXHR9O1xuXG5cdHZhciBzdHlsZVJ1bGUgPSBuZXcgQ1NTT00uQ1NTU3R5bGVSdWxlKCk7XG5cdHZhciBuYW1lLCBwcmlvcml0eT1cIlwiO1xuXG5cdGZvciAodmFyIGNoYXJhY3RlcjsgKGNoYXJhY3RlciA9IHJ1bGVUZXh0LmNoYXJBdChpKSk7IGkrKykge1xuXG5cdFx0c3dpdGNoIChjaGFyYWN0ZXIpIHtcblxuXHRcdGNhc2UgXCIgXCI6XG5cdFx0Y2FzZSBcIlxcdFwiOlxuXHRcdGNhc2UgXCJcXHJcIjpcblx0XHRjYXNlIFwiXFxuXCI6XG5cdFx0Y2FzZSBcIlxcZlwiOlxuXHRcdFx0aWYgKFNJR05JRklDQU5UX1dISVRFU1BBQ0Vbc3RhdGVdKSB7XG5cdFx0XHRcdC8vIFNxdWFzaCAyIG9yIG1vcmUgd2hpdGUtc3BhY2VzIGluIHRoZSByb3cgaW50byAxXG5cdFx0XHRcdHN3aXRjaCAocnVsZVRleHQuY2hhckF0KGkgLSAxKSkge1xuXHRcdFx0XHRcdGNhc2UgXCIgXCI6XG5cdFx0XHRcdFx0Y2FzZSBcIlxcdFwiOlxuXHRcdFx0XHRcdGNhc2UgXCJcXHJcIjpcblx0XHRcdFx0XHRjYXNlIFwiXFxuXCI6XG5cdFx0XHRcdFx0Y2FzZSBcIlxcZlwiOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGJ1ZmZlciArPSBcIiBcIjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblxuXHRcdC8vIFN0cmluZ1xuXHRcdGNhc2UgJ1wiJzpcblx0XHRcdGogPSBpICsgMTtcblx0XHRcdGluZGV4ID0gcnVsZVRleHQuaW5kZXhPZignXCInLCBqKSArIDE7XG5cdFx0XHRpZiAoIWluZGV4KSB7XG5cdFx0XHRcdHRocm93ICdcIiBpcyBtaXNzaW5nJztcblx0XHRcdH1cblx0XHRcdGJ1ZmZlciArPSBydWxlVGV4dC5zbGljZShpLCBpbmRleCk7XG5cdFx0XHRpID0gaW5kZXggLSAxO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIFwiJ1wiOlxuXHRcdFx0aiA9IGkgKyAxO1xuXHRcdFx0aW5kZXggPSBydWxlVGV4dC5pbmRleE9mKFwiJ1wiLCBqKSArIDE7XG5cdFx0XHRpZiAoIWluZGV4KSB7XG5cdFx0XHRcdHRocm93IFwiJyBpcyBtaXNzaW5nXCI7XG5cdFx0XHR9XG5cdFx0XHRidWZmZXIgKz0gcnVsZVRleHQuc2xpY2UoaSwgaW5kZXgpO1xuXHRcdFx0aSA9IGluZGV4IC0gMTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Ly8gQ29tbWVudFxuXHRcdGNhc2UgXCIvXCI6XG5cdFx0XHRpZiAocnVsZVRleHQuY2hhckF0KGkgKyAxKSA9PT0gXCIqXCIpIHtcblx0XHRcdFx0aSArPSAyO1xuXHRcdFx0XHRpbmRleCA9IHJ1bGVUZXh0LmluZGV4T2YoXCIqL1wiLCBpKTtcblx0XHRcdFx0aWYgKGluZGV4ID09PSAtMSkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBTeW50YXhFcnJvcihcIk1pc3NpbmcgKi9cIik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IGluZGV4ICsgMTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVmZmVyICs9IGNoYXJhY3Rlcjtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBcIntcIjpcblx0XHRcdGlmIChzdGF0ZSA9PT0gXCJzZWxlY3RvclwiKSB7XG5cdFx0XHRcdHN0eWxlUnVsZS5zZWxlY3RvclRleHQgPSBidWZmZXIudHJpbSgpO1xuXHRcdFx0XHRidWZmZXIgPSBcIlwiO1xuXHRcdFx0XHRzdGF0ZSA9IFwibmFtZVwiO1xuXHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIFwiOlwiOlxuXHRcdFx0aWYgKHN0YXRlID09PSBcIm5hbWVcIikge1xuXHRcdFx0XHRuYW1lID0gYnVmZmVyLnRyaW0oKTtcblx0XHRcdFx0YnVmZmVyID0gXCJcIjtcblx0XHRcdFx0c3RhdGUgPSBcInZhbHVlXCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWZmZXIgKz0gY2hhcmFjdGVyO1xuXHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIFwiIVwiOlxuXHRcdFx0aWYgKHN0YXRlID09PSBcInZhbHVlXCIgJiYgcnVsZVRleHQuaW5kZXhPZihcIiFpbXBvcnRhbnRcIiwgaSkgPT09IGkpIHtcblx0XHRcdFx0cHJpb3JpdHkgPSBcImltcG9ydGFudFwiO1xuXHRcdFx0XHRpICs9IFwiaW1wb3J0YW50XCIubGVuZ3RoO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVmZmVyICs9IGNoYXJhY3Rlcjtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBcIjtcIjpcblx0XHRcdGlmIChzdGF0ZSA9PT0gXCJ2YWx1ZVwiKSB7XG5cdFx0XHRcdHN0eWxlUnVsZS5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBidWZmZXIudHJpbSgpLCBwcmlvcml0eSk7XG5cdFx0XHRcdHByaW9yaXR5ID0gXCJcIjtcblx0XHRcdFx0YnVmZmVyID0gXCJcIjtcblx0XHRcdFx0c3RhdGUgPSBcIm5hbWVcIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1ZmZlciArPSBjaGFyYWN0ZXI7XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgXCJ9XCI6XG5cdFx0XHRpZiAoc3RhdGUgPT09IFwidmFsdWVcIikge1xuXHRcdFx0XHRzdHlsZVJ1bGUuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgYnVmZmVyLnRyaW0oKSwgcHJpb3JpdHkpO1xuXHRcdFx0XHRwcmlvcml0eSA9IFwiXCI7XG5cdFx0XHRcdGJ1ZmZlciA9IFwiXCI7XG5cdFx0XHR9IGVsc2UgaWYgKHN0YXRlID09PSBcIm5hbWVcIikge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1ZmZlciArPSBjaGFyYWN0ZXI7XG5cdFx0XHR9XG5cdFx0XHRzdGF0ZSA9IFwic2VsZWN0b3JcIjtcblx0XHRcdGJyZWFrO1xuXG5cdFx0ZGVmYXVsdDpcblx0XHRcdGJ1ZmZlciArPSBjaGFyYWN0ZXI7XG5cdFx0XHRicmVhaztcblxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBzdHlsZVJ1bGU7XG5cbn07XG5cblxuLy8uQ29tbW9uSlNcbmV4cG9ydHMuQ1NTU3R5bGVSdWxlID0gQ1NTT00uQ1NTU3R5bGVSdWxlO1xuLy8vQ29tbW9uSlNcbiIsIi8vLkNvbW1vbkpTXG52YXIgQ1NTT00gPSB7XG5cdFN0eWxlU2hlZXQ6IHJlcXVpcmUoXCIuL1N0eWxlU2hlZXRcIikuU3R5bGVTaGVldCxcblx0Q1NTU3R5bGVSdWxlOiByZXF1aXJlKFwiLi9DU1NTdHlsZVJ1bGVcIikuQ1NTU3R5bGVSdWxlXG59O1xuLy8vQ29tbW9uSlNcblxuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMi1TdHlsZS9jc3MuaHRtbCNDU1MtQ1NTU3R5bGVTaGVldFxuICovXG5DU1NPTS5DU1NTdHlsZVNoZWV0ID0gZnVuY3Rpb24gQ1NTU3R5bGVTaGVldCgpIHtcblx0Q1NTT00uU3R5bGVTaGVldC5jYWxsKHRoaXMpO1xuXHR0aGlzLmNzc1J1bGVzID0gW107XG59O1xuXG5cbkNTU09NLkNTU1N0eWxlU2hlZXQucHJvdG90eXBlID0gbmV3IENTU09NLlN0eWxlU2hlZXQoKTtcbkNTU09NLkNTU1N0eWxlU2hlZXQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ1NTT00uQ1NTU3R5bGVTaGVldDtcblxuXG4vKipcbiAqIFVzZWQgdG8gaW5zZXJ0IGEgbmV3IHJ1bGUgaW50byB0aGUgc3R5bGUgc2hlZXQuIFRoZSBuZXcgcnVsZSBub3cgYmVjb21lcyBwYXJ0IG9mIHRoZSBjYXNjYWRlLlxuICpcbiAqICAgc2hlZXQgPSBuZXcgU2hlZXQoXCJib2R5IHttYXJnaW46IDB9XCIpXG4gKiAgIHNoZWV0LnRvU3RyaW5nKClcbiAqICAgLT4gXCJib2R5e21hcmdpbjowO31cIlxuICogICBzaGVldC5pbnNlcnRSdWxlKFwiaW1nIHtib3JkZXI6IG5vbmV9XCIsIDApXG4gKiAgIC0+IDBcbiAqICAgc2hlZXQudG9TdHJpbmcoKVxuICogICAtPiBcImltZ3tib3JkZXI6bm9uZTt9Ym9keXttYXJnaW46MDt9XCJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcnVsZVxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0yLVN0eWxlL2Nzcy5odG1sI0NTUy1DU1NTdHlsZVNoZWV0LWluc2VydFJ1bGVcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGluZGV4IHdpdGhpbiB0aGUgc3R5bGUgc2hlZXQncyBydWxlIGNvbGxlY3Rpb24gb2YgdGhlIG5ld2x5IGluc2VydGVkIHJ1bGUuXG4gKi9cbkNTU09NLkNTU1N0eWxlU2hlZXQucHJvdG90eXBlLmluc2VydFJ1bGUgPSBmdW5jdGlvbihydWxlLCBpbmRleCkge1xuXHRpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gdGhpcy5jc3NSdWxlcy5sZW5ndGgpIHtcblx0XHR0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIklOREVYX1NJWkVfRVJSXCIpO1xuXHR9XG5cdHZhciBjc3NSdWxlID0gQ1NTT00ucGFyc2UocnVsZSkuY3NzUnVsZXNbMF07XG5cdGNzc1J1bGUucGFyZW50U3R5bGVTaGVldCA9IHRoaXM7XG5cdHRoaXMuY3NzUnVsZXMuc3BsaWNlKGluZGV4LCAwLCBjc3NSdWxlKTtcblx0cmV0dXJuIGluZGV4O1xufTtcblxuXG4vKipcbiAqIFVzZWQgdG8gZGVsZXRlIGEgcnVsZSBmcm9tIHRoZSBzdHlsZSBzaGVldC5cbiAqXG4gKiAgIHNoZWV0ID0gbmV3IFNoZWV0KFwiaW1ne2JvcmRlcjpub25lfSBib2R5e21hcmdpbjowfVwiKVxuICogICBzaGVldC50b1N0cmluZygpXG4gKiAgIC0+IFwiaW1ne2JvcmRlcjpub25lO31ib2R5e21hcmdpbjowO31cIlxuICogICBzaGVldC5kZWxldGVSdWxlKDApXG4gKiAgIHNoZWV0LnRvU3RyaW5nKClcbiAqICAgLT4gXCJib2R5e21hcmdpbjowO31cIlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCB3aXRoaW4gdGhlIHN0eWxlIHNoZWV0J3MgcnVsZSBsaXN0IG9mIHRoZSBydWxlIHRvIHJlbW92ZS5cbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItU3R5bGUvY3NzLmh0bWwjQ1NTLUNTU1N0eWxlU2hlZXQtZGVsZXRlUnVsZVxuICovXG5DU1NPTS5DU1NTdHlsZVNoZWV0LnByb3RvdHlwZS5kZWxldGVSdWxlID0gZnVuY3Rpb24oaW5kZXgpIHtcblx0aWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLmNzc1J1bGVzLmxlbmd0aCkge1xuXHRcdHRocm93IG5ldyBSYW5nZUVycm9yKFwiSU5ERVhfU0laRV9FUlJcIik7XG5cdH1cblx0dGhpcy5jc3NSdWxlcy5zcGxpY2UoaW5kZXgsIDEpO1xufTtcblxuXG4vKipcbiAqIE5PTi1TVEFOREFSRFxuICogQHJldHVybiB7c3RyaW5nfSBzZXJpYWxpemUgc3R5bGVzaGVldFxuICovXG5DU1NPTS5DU1NTdHlsZVNoZWV0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgcmVzdWx0ID0gXCJcIjtcblx0dmFyIHJ1bGVzID0gdGhpcy5jc3NSdWxlcztcblx0Zm9yICh2YXIgaT0wOyBpPHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0cmVzdWx0ICs9IHJ1bGVzW2ldLmNzc1RleHQgKyBcIlxcblwiO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8vLkNvbW1vbkpTXG5leHBvcnRzLkNTU1N0eWxlU2hlZXQgPSBDU1NPTS5DU1NTdHlsZVNoZWV0O1xuQ1NTT00ucGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJykucGFyc2U7IC8vIENhbm5vdCBiZSBpbmNsdWRlZCBzb29uZXIgZHVlIHRvIHRoZSBtdXR1YWwgZGVwZW5kZW5jeSBiZXR3ZWVuIHBhcnNlLmpzIGFuZCBDU1NTdHlsZVNoZWV0LmpzXG4vLy9Db21tb25KU1xuIiwiLy8uQ29tbW9uSlNcbnZhciBDU1NPTSA9IHtcbiAgQ1NTUnVsZTogcmVxdWlyZShcIi4vQ1NTUnVsZVwiKS5DU1NSdWxlLFxuICBDU1NHcm91cGluZ1J1bGU6IHJlcXVpcmUoXCIuL0NTU0dyb3VwaW5nUnVsZVwiKS5DU1NHcm91cGluZ1J1bGUsXG4gIENTU0NvbmRpdGlvblJ1bGU6IHJlcXVpcmUoXCIuL0NTU0NvbmRpdGlvblJ1bGVcIikuQ1NTQ29uZGl0aW9uUnVsZVxufTtcbi8vL0NvbW1vbkpTXG5cblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBzZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1jb25kaXRpb25hbC0zLyN0aGUtY3Nzc3VwcG9ydHNydWxlLWludGVyZmFjZVxuICovXG5DU1NPTS5DU1NTdXBwb3J0c1J1bGUgPSBmdW5jdGlvbiBDU1NTdXBwb3J0c1J1bGUoKSB7XG4gIENTU09NLkNTU0NvbmRpdGlvblJ1bGUuY2FsbCh0aGlzKTtcbn07XG5cbkNTU09NLkNTU1N1cHBvcnRzUnVsZS5wcm90b3R5cGUgPSBuZXcgQ1NTT00uQ1NTQ29uZGl0aW9uUnVsZSgpO1xuQ1NTT00uQ1NTU3VwcG9ydHNSdWxlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENTU09NLkNTU1N1cHBvcnRzUnVsZTtcbkNTU09NLkNTU1N1cHBvcnRzUnVsZS5wcm90b3R5cGUudHlwZSA9IDEyO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQ1NTT00uQ1NTU3VwcG9ydHNSdWxlLnByb3RvdHlwZSwgXCJjc3NUZXh0XCIsIHtcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3NzVGV4dHMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSB0aGlzLmNzc1J1bGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBjc3NUZXh0cy5wdXNoKHRoaXMuY3NzUnVsZXNbaV0uY3NzVGV4dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiQHN1cHBvcnRzIFwiICsgdGhpcy5jb25kaXRpb25UZXh0ICsgXCIge1wiICsgY3NzVGV4dHMuam9pbihcIlwiKSArIFwifVwiO1xuICB9XG59KTtcblxuLy8uQ29tbW9uSlNcbmV4cG9ydHMuQ1NTU3VwcG9ydHNSdWxlID0gQ1NTT00uQ1NTU3VwcG9ydHNSdWxlO1xuLy8vQ29tbW9uSlNcbiIsIi8vLkNvbW1vbkpTXG52YXIgQ1NTT00gPSB7fTtcbi8vL0NvbW1vbkpTXG5cblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItU3R5bGUvY3NzLmh0bWwjQ1NTLUNTU1ZhbHVlXG4gKlxuICogVE9ETzogYWRkIGlmIG5lZWRlZFxuICovXG5DU1NPTS5DU1NWYWx1ZSA9IGZ1bmN0aW9uIENTU1ZhbHVlKCkge1xufTtcblxuQ1NTT00uQ1NTVmFsdWUucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogQ1NTT00uQ1NTVmFsdWUsXG5cblx0Ly8gQHNlZTogaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItU3R5bGUvY3NzLmh0bWwjQ1NTLUNTU1ZhbHVlXG5cdHNldCBjc3NUZXh0KHRleHQpIHtcblx0XHR2YXIgbmFtZSA9IHRoaXMuX2dldENvbnN0cnVjdG9yTmFtZSgpO1xuXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdET01FeGNlcHRpb246IHByb3BlcnR5IFwiY3NzVGV4dFwiIG9mIFwiJyArIG5hbWUgKyAnXCIgaXMgcmVhZG9ubHkgYW5kIGNhbiBub3QgYmUgcmVwbGFjZWQgd2l0aCBcIicgKyB0ZXh0ICsgJ1wiIScpO1xuXHR9LFxuXG5cdGdldCBjc3NUZXh0KCkge1xuXHRcdHZhciBuYW1lID0gdGhpcy5fZ2V0Q29uc3RydWN0b3JOYW1lKCk7XG5cblx0XHR0aHJvdyBuZXcgRXJyb3IoJ2dldHRlciBcImNzc1RleHRcIiBvZiBcIicgKyBuYW1lICsgJ1wiIGlzIG5vdCBpbXBsZW1lbnRlZCEnKTtcblx0fSxcblxuXHRfZ2V0Q29uc3RydWN0b3JOYW1lOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcyA9IHRoaXMuY29uc3RydWN0b3IudG9TdHJpbmcoKSxcblx0XHRcdFx0YyA9IHMubWF0Y2goL2Z1bmN0aW9uXFxzKFteXFwoXSspLyksXG5cdFx0XHRcdG5hbWUgPSBjWzFdO1xuXG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cblxuLy8uQ29tbW9uSlNcbmV4cG9ydHMuQ1NTVmFsdWUgPSBDU1NPTS5DU1NWYWx1ZTtcbi8vL0NvbW1vbkpTXG4iLCIvLy5Db21tb25KU1xudmFyIENTU09NID0ge1xuXHRDU1NWYWx1ZTogcmVxdWlyZSgnLi9DU1NWYWx1ZScpLkNTU1ZhbHVlXG59O1xuLy8vQ29tbW9uSlNcblxuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQHNlZSBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1Mzc2MzQodj12cy44NSkuYXNweFxuICpcbiAqL1xuQ1NTT00uQ1NTVmFsdWVFeHByZXNzaW9uID0gZnVuY3Rpb24gQ1NTVmFsdWVFeHByZXNzaW9uKHRva2VuLCBpZHgpIHtcblx0dGhpcy5fdG9rZW4gPSB0b2tlbjtcblx0dGhpcy5faWR4ID0gaWR4O1xufTtcblxuQ1NTT00uQ1NTVmFsdWVFeHByZXNzaW9uLnByb3RvdHlwZSA9IG5ldyBDU1NPTS5DU1NWYWx1ZSgpO1xuQ1NTT00uQ1NTVmFsdWVFeHByZXNzaW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENTU09NLkNTU1ZhbHVlRXhwcmVzc2lvbjtcblxuLyoqXG4gKiBwYXJzZSBjc3MgZXhwcmVzc2lvbigpIHZhbHVlXG4gKlxuICogQHJldHVybiB7T2JqZWN0fVxuICogICAgICAgICAtIGVycm9yOlxuICogICAgICAgICBvclxuICogICAgICAgICAtIGlkeDpcbiAqICAgICAgICAgLSBleHByZXNzaW9uOlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogLnNlbGVjdG9yIHtcbiAqXHRcdHpvb206IGV4cHJlc3Npb24oZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoID4gMTAwMCA/ICcxMDAwcHgnIDogJ2F1dG8nKTtcbiAqIH1cbiAqL1xuQ1NTT00uQ1NTVmFsdWVFeHByZXNzaW9uLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdG9rZW4gPSB0aGlzLl90b2tlbixcblx0XHRcdGlkeCA9IHRoaXMuX2lkeDtcblxuXHR2YXIgY2hhcmFjdGVyID0gJycsXG5cdFx0XHRleHByZXNzaW9uID0gJycsXG5cdFx0XHRlcnJvciA9ICcnLFxuXHRcdFx0aW5mbyxcblx0XHRcdHBhcmVuID0gW107XG5cblxuXHRmb3IgKDsgOyArK2lkeCkge1xuXHRcdGNoYXJhY3RlciA9IHRva2VuLmNoYXJBdChpZHgpO1xuXG5cdFx0Ly8gZW5kIG9mIHRva2VuXG5cdFx0aWYgKGNoYXJhY3RlciA9PT0gJycpIHtcblx0XHRcdGVycm9yID0gJ2NzcyBleHByZXNzaW9uIGVycm9yOiB1bmZpbmlzaGVkIGV4cHJlc3Npb24hJztcblx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdHN3aXRjaChjaGFyYWN0ZXIpIHtcblx0XHRcdGNhc2UgJygnOlxuXHRcdFx0XHRwYXJlbi5wdXNoKGNoYXJhY3Rlcik7XG5cdFx0XHRcdGV4cHJlc3Npb24gKz0gY2hhcmFjdGVyO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnKSc6XG5cdFx0XHRcdHBhcmVuLnBvcChjaGFyYWN0ZXIpO1xuXHRcdFx0XHRleHByZXNzaW9uICs9IGNoYXJhY3Rlcjtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJy8nOlxuXHRcdFx0XHRpZiAoKGluZm8gPSB0aGlzLl9wYXJzZUpTQ29tbWVudCh0b2tlbiwgaWR4KSkpIHsgLy8gY29tbWVudD9cblx0XHRcdFx0XHRpZiAoaW5mby5lcnJvcikge1xuXHRcdFx0XHRcdFx0ZXJyb3IgPSAnY3NzIGV4cHJlc3Npb24gZXJyb3I6IHVuZmluaXNoZWQgY29tbWVudCBpbiBleHByZXNzaW9uISc7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlkeCA9IGluZm8uaWR4O1xuXHRcdFx0XHRcdFx0Ly8gaWdub3JlIHRoZSBjb21tZW50XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKChpbmZvID0gdGhpcy5fcGFyc2VKU1JleEV4cCh0b2tlbiwgaWR4KSkpIHsgLy8gcmVnZXhwXG5cdFx0XHRcdFx0aWR4ID0gaW5mby5pZHg7XG5cdFx0XHRcdFx0ZXhwcmVzc2lvbiArPSBpbmZvLnRleHQ7XG5cdFx0XHRcdH0gZWxzZSB7IC8vIG90aGVyXG5cdFx0XHRcdFx0ZXhwcmVzc2lvbiArPSBjaGFyYWN0ZXI7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCInXCI6XG5cdFx0XHRjYXNlICdcIic6XG5cdFx0XHRcdGluZm8gPSB0aGlzLl9wYXJzZUpTU3RyaW5nKHRva2VuLCBpZHgsIGNoYXJhY3Rlcik7XG5cdFx0XHRcdGlmIChpbmZvKSB7IC8vIHN0cmluZ1xuXHRcdFx0XHRcdGlkeCA9IGluZm8uaWR4O1xuXHRcdFx0XHRcdGV4cHJlc3Npb24gKz0gaW5mby50ZXh0O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGV4cHJlc3Npb24gKz0gY2hhcmFjdGVyO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRleHByZXNzaW9uICs9IGNoYXJhY3Rlcjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHQvLyBlbmQgb2YgZXhwcmVzc2lvblxuXHRcdGlmIChwYXJlbi5sZW5ndGggPT09IDApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdHZhciByZXQ7XG5cdGlmIChlcnJvcikge1xuXHRcdHJldCA9IHtcblx0XHRcdGVycm9yOiBlcnJvclxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0ge1xuXHRcdFx0aWR4OiBpZHgsXG5cdFx0XHRleHByZXNzaW9uOiBleHByZXNzaW9uXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbi8qKlxuICpcbiAqIEByZXR1cm4ge09iamVjdHxmYWxzZX1cbiAqICAgICAgICAgIC0gaWR4OlxuICogICAgICAgICAgLSB0ZXh0OlxuICogICAgICAgICAgb3JcbiAqICAgICAgICAgIC0gZXJyb3I6XG4gKiAgICAgICAgICBvclxuICogICAgICAgICAgZmFsc2VcbiAqXG4gKi9cbkNTU09NLkNTU1ZhbHVlRXhwcmVzc2lvbi5wcm90b3R5cGUuX3BhcnNlSlNDb21tZW50ID0gZnVuY3Rpb24odG9rZW4sIGlkeCkge1xuXHR2YXIgbmV4dENoYXIgPSB0b2tlbi5jaGFyQXQoaWR4ICsgMSksXG5cdFx0XHR0ZXh0O1xuXG5cdGlmIChuZXh0Q2hhciA9PT0gJy8nIHx8IG5leHRDaGFyID09PSAnKicpIHtcblx0XHR2YXIgc3RhcnRJZHggPSBpZHgsXG5cdFx0XHRcdGVuZElkeCxcblx0XHRcdFx0Y29tbWVudEVuZENoYXI7XG5cblx0XHRpZiAobmV4dENoYXIgPT09ICcvJykgeyAvLyBsaW5lIGNvbW1lbnRcblx0XHRcdGNvbW1lbnRFbmRDaGFyID0gJ1xcbic7XG5cdFx0fSBlbHNlIGlmIChuZXh0Q2hhciA9PT0gJyonKSB7IC8vIGJsb2NrIGNvbW1lbnRcblx0XHRcdGNvbW1lbnRFbmRDaGFyID0gJyovJztcblx0XHR9XG5cblx0XHRlbmRJZHggPSB0b2tlbi5pbmRleE9mKGNvbW1lbnRFbmRDaGFyLCBzdGFydElkeCArIDEgKyAxKTtcblx0XHRpZiAoZW5kSWR4ICE9PSAtMSkge1xuXHRcdFx0ZW5kSWR4ID0gZW5kSWR4ICsgY29tbWVudEVuZENoYXIubGVuZ3RoIC0gMTtcblx0XHRcdHRleHQgPSB0b2tlbi5zdWJzdHJpbmcoaWR4LCBlbmRJZHggKyAxKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGlkeDogZW5kSWR4LFxuXHRcdFx0XHR0ZXh0OiB0ZXh0XG5cdFx0XHR9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgZXJyb3IgPSAnY3NzIGV4cHJlc3Npb24gZXJyb3I6IHVuZmluaXNoZWQgY29tbWVudCBpbiBleHByZXNzaW9uISc7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRlcnJvcjogZXJyb3Jcblx0XHRcdH07XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcblxuXG4vKipcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R8ZmFsc2V9XG4gKlx0XHRcdFx0XHQtIGlkeDpcbiAqXHRcdFx0XHRcdC0gdGV4dDpcbiAqXHRcdFx0XHRcdG9yIFxuICpcdFx0XHRcdFx0ZmFsc2VcbiAqXG4gKi9cbkNTU09NLkNTU1ZhbHVlRXhwcmVzc2lvbi5wcm90b3R5cGUuX3BhcnNlSlNTdHJpbmcgPSBmdW5jdGlvbih0b2tlbiwgaWR4LCBzZXApIHtcblx0dmFyIGVuZElkeCA9IHRoaXMuX2ZpbmRNYXRjaGVkSWR4KHRva2VuLCBpZHgsIHNlcCksXG5cdFx0XHR0ZXh0O1xuXG5cdGlmIChlbmRJZHggPT09IC0xKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGVsc2Uge1xuXHRcdHRleHQgPSB0b2tlbi5zdWJzdHJpbmcoaWR4LCBlbmRJZHggKyBzZXAubGVuZ3RoKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRpZHg6IGVuZElkeCxcblx0XHRcdHRleHQ6IHRleHRcblx0XHR9O1xuXHR9XG59O1xuXG5cbi8qKlxuICogcGFyc2UgcmVnZXhwIGluIGNzcyBleHByZXNzaW9uXG4gKlxuICogQHJldHVybiB7T2JqZWN0fGZhbHNlfVxuICpcdFx0XHRcdC0gaWR4OlxuICpcdFx0XHRcdC0gcmVnRXhwOlxuICpcdFx0XHRcdG9yIFxuICpcdFx0XHRcdGZhbHNlXG4gKi9cblxuLypcblxuYWxsIGxlZ2FsIFJlZ0V4cFxuIFxuL2EvXG4oL2EvKVxuWy9hL11cblsxMiwgL2EvXVxuXG4hL2EvXG5cbisvYS9cbi0vYS9cbiogL2EvXG4vIC9hL1xuJS9hL1xuXG49PT0vYS9cbiE9PS9hL1xuPT0vYS9cbiE9L2EvXG4+L2EvXG4+PS9hL1xuPC9hL1xuPD0vYS9cblxuJi9hL1xufC9hL1xuXi9hL1xufi9hL1xuPDwvYS9cbj4+L2EvXG4+Pj4vYS9cblxuJiYvYS9cbnx8L2EvXG4/L2EvXG49L2EvXG4sL2EvXG5cblx0XHRkZWxldGUgL2EvXG5cdFx0XHRcdGluIC9hL1xuaW5zdGFuY2VvZiAvYS9cblx0XHRcdFx0bmV3IC9hL1xuXHRcdHR5cGVvZiAvYS9cblx0XHRcdHZvaWQgL2EvXG5cbiovXG5DU1NPTS5DU1NWYWx1ZUV4cHJlc3Npb24ucHJvdG90eXBlLl9wYXJzZUpTUmV4RXhwID0gZnVuY3Rpb24odG9rZW4sIGlkeCkge1xuXHR2YXIgYmVmb3JlID0gdG9rZW4uc3Vic3RyaW5nKDAsIGlkeCkucmVwbGFjZSgvXFxzKyQvLCBcIlwiKSxcblx0XHRcdGxlZ2FsUmVneCA9IFtcblx0XHRcdFx0L14kLyxcblx0XHRcdFx0L1xcKCQvLFxuXHRcdFx0XHQvXFxbJC8sXG5cdFx0XHRcdC9cXCEkLyxcblx0XHRcdFx0L1xcKyQvLFxuXHRcdFx0XHQvXFwtJC8sXG5cdFx0XHRcdC9cXCokLyxcblx0XHRcdFx0L1xcL1xccysvLFxuXHRcdFx0XHQvXFwlJC8sXG5cdFx0XHRcdC9cXD0kLyxcblx0XHRcdFx0L1xcPiQvLFxuXHRcdFx0XHQvPCQvLFxuXHRcdFx0XHQvXFwmJC8sXG5cdFx0XHRcdC9cXHwkLyxcblx0XHRcdFx0L1xcXiQvLFxuXHRcdFx0XHQvXFx+JC8sXG5cdFx0XHRcdC9cXD8kLyxcblx0XHRcdFx0L1xcLCQvLFxuXHRcdFx0XHQvZGVsZXRlJC8sXG5cdFx0XHRcdC9pbiQvLFxuXHRcdFx0XHQvaW5zdGFuY2VvZiQvLFxuXHRcdFx0XHQvbmV3JC8sXG5cdFx0XHRcdC90eXBlb2YkLyxcblx0XHRcdFx0L3ZvaWQkL1xuXHRcdFx0XTtcblxuXHR2YXIgaXNMZWdhbCA9IGxlZ2FsUmVneC5zb21lKGZ1bmN0aW9uKHJlZykge1xuXHRcdHJldHVybiByZWcudGVzdChiZWZvcmUpO1xuXHR9KTtcblxuXHRpZiAoIWlzTGVnYWwpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIHNlcCA9ICcvJztcblxuXHRcdC8vIHNhbWUgbG9naWMgYXMgc3RyaW5nXG5cdFx0cmV0dXJuIHRoaXMuX3BhcnNlSlNTdHJpbmcodG9rZW4sIGlkeCwgc2VwKTtcblx0fVxufTtcblxuXG4vKipcbiAqXG4gKiBmaW5kIG5leHQgc2VwKHNhbWUgbGluZSkgaW5kZXggaW4gYHRva2VuYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqXG4gKi9cbkNTU09NLkNTU1ZhbHVlRXhwcmVzc2lvbi5wcm90b3R5cGUuX2ZpbmRNYXRjaGVkSWR4ID0gZnVuY3Rpb24odG9rZW4sIGlkeCwgc2VwKSB7XG5cdHZhciBzdGFydElkeCA9IGlkeCxcblx0XHRcdGVuZElkeDtcblxuXHR2YXIgTk9UX0ZPVU5EID0gLTE7XG5cblx0d2hpbGUodHJ1ZSkge1xuXHRcdGVuZElkeCA9IHRva2VuLmluZGV4T2Yoc2VwLCBzdGFydElkeCArIDEpO1xuXG5cdFx0aWYgKGVuZElkeCA9PT0gLTEpIHsgLy8gbm90IGZvdW5kXG5cdFx0XHRlbmRJZHggPSBOT1RfRk9VTkQ7XG5cdFx0XHRicmVhaztcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHRleHQgPSB0b2tlbi5zdWJzdHJpbmcoaWR4ICsgMSwgZW5kSWR4KSxcblx0XHRcdFx0XHRtYXRjaGVkID0gdGV4dC5tYXRjaCgvXFxcXCskLyk7XG5cdFx0XHRpZiAoIW1hdGNoZWQgfHwgbWF0Y2hlZFswXSAlIDIgPT09IDApIHsgLy8gbm90IGVzY2FwZWRcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzdGFydElkeCA9IGVuZElkeDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBib3VuZGFyeSBtdXN0IGJlIGluIHRoZSBzYW1lIGxpbmUoanMgc3Rpbmcgb3IgcmVnZXhwKVxuXHR2YXIgbmV4dE5ld0xpbmVJZHggPSB0b2tlbi5pbmRleE9mKCdcXG4nLCBpZHggKyAxKTtcblx0aWYgKG5leHROZXdMaW5lSWR4IDwgZW5kSWR4KSB7XG5cdFx0ZW5kSWR4ID0gTk9UX0ZPVU5EO1xuXHR9XG5cblxuXHRyZXR1cm4gZW5kSWR4O1xufTtcblxuXG5cblxuLy8uQ29tbW9uSlNcbmV4cG9ydHMuQ1NTVmFsdWVFeHByZXNzaW9uID0gQ1NTT00uQ1NTVmFsdWVFeHByZXNzaW9uO1xuLy8vQ29tbW9uSlNcbiIsIi8vLkNvbW1vbkpTXG52YXIgQ1NTT00gPSB7fTtcbi8vL0NvbW1vbkpTXG5cblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vQ1NTL0AtbW96LWRvY3VtZW50XG4gKi9cbkNTU09NLk1hdGNoZXJMaXN0ID0gZnVuY3Rpb24gTWF0Y2hlckxpc3QoKXtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG59O1xuXG5DU1NPTS5NYXRjaGVyTGlzdC5wcm90b3R5cGUgPSB7XG5cbiAgICBjb25zdHJ1Y3RvcjogQ1NTT00uTWF0Y2hlckxpc3QsXG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICovXG4gICAgZ2V0IG1hdGNoZXJUZXh0KCkge1xuICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmpvaW4uY2FsbCh0aGlzLCBcIiwgXCIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICAgKi9cbiAgICBzZXQgbWF0Y2hlclRleHQodmFsdWUpIHtcbiAgICAgICAgLy8ganVzdCBhIHRlbXBvcmFyeSBzb2x1dGlvbiwgYWN0dWFsbHkgaXQgbWF5IGJlIHdyb25nIGJ5IGp1c3Qgc3BsaXQgdGhlIHZhbHVlIHdpdGggJywnLCBiZWNhdXNlIGEgdXJsIGNhbiBpbmNsdWRlICcsJy5cbiAgICAgICAgdmFyIHZhbHVlcyA9IHZhbHVlLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzW2ldID0gdmFsdWVzW2ldLnRyaW0oKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWF0Y2hlclxuICAgICAqL1xuICAgIGFwcGVuZE1hdGNoZXI6IGZ1bmN0aW9uKG1hdGNoZXIpIHtcbiAgICAgICAgaWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwodGhpcywgbWF0Y2hlcikgPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzW3RoaXMubGVuZ3RoXSA9IG1hdGNoZXI7XG4gICAgICAgICAgICB0aGlzLmxlbmd0aCsrO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtYXRjaGVyXG4gICAgICovXG4gICAgZGVsZXRlTWF0Y2hlcjogZnVuY3Rpb24obWF0Y2hlcikge1xuICAgICAgICB2YXIgaW5kZXggPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKHRoaXMsIG1hdGNoZXIpO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwodGhpcywgaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG59O1xuXG5cbi8vLkNvbW1vbkpTXG5leHBvcnRzLk1hdGNoZXJMaXN0ID0gQ1NTT00uTWF0Y2hlckxpc3Q7XG4vLy9Db21tb25KU1xuIiwiLy8uQ29tbW9uSlNcbnZhciBDU1NPTSA9IHt9O1xuLy8vQ29tbW9uSlNcblxuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQHNlZSBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS8jdGhlLW1lZGlhbGlzdC1pbnRlcmZhY2VcbiAqL1xuQ1NTT00uTWVkaWFMaXN0ID0gZnVuY3Rpb24gTWVkaWFMaXN0KCl7XG5cdHRoaXMubGVuZ3RoID0gMDtcbn07XG5cbkNTU09NLk1lZGlhTGlzdC5wcm90b3R5cGUgPSB7XG5cblx0Y29uc3RydWN0b3I6IENTU09NLk1lZGlhTGlzdCxcblxuXHQvKipcblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0Z2V0IG1lZGlhVGV4dCgpIHtcblx0XHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLmpvaW4uY2FsbCh0aGlzLCBcIiwgXCIpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcblx0ICovXG5cdHNldCBtZWRpYVRleHQodmFsdWUpIHtcblx0XHR2YXIgdmFsdWVzID0gdmFsdWUuc3BsaXQoXCIsXCIpO1xuXHRcdHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG5cdFx0Zm9yICh2YXIgaT0wOyBpPGxlbmd0aDsgaSsrKSB7XG5cdFx0XHR0aGlzW2ldID0gdmFsdWVzW2ldLnRyaW0oKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBtZWRpdW1cblx0ICovXG5cdGFwcGVuZE1lZGl1bTogZnVuY3Rpb24obWVkaXVtKSB7XG5cdFx0aWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwodGhpcywgbWVkaXVtKSA9PT0gLTEpIHtcblx0XHRcdHRoaXNbdGhpcy5sZW5ndGhdID0gbWVkaXVtO1xuXHRcdFx0dGhpcy5sZW5ndGgrKztcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBtZWRpdW1cblx0ICovXG5cdGRlbGV0ZU1lZGl1bTogZnVuY3Rpb24obWVkaXVtKSB7XG5cdFx0dmFyIGluZGV4ID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbCh0aGlzLCBtZWRpdW0pO1xuXHRcdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdEFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbCh0aGlzLCBpbmRleCwgMSk7XG5cdFx0fVxuXHR9XG5cbn07XG5cblxuLy8uQ29tbW9uSlNcbmV4cG9ydHMuTWVkaWFMaXN0ID0gQ1NTT00uTWVkaWFMaXN0O1xuLy8vQ29tbW9uSlNcbiIsIi8vLkNvbW1vbkpTXG52YXIgQ1NTT00gPSB7fTtcbi8vL0NvbW1vbkpTXG5cblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBzZWUgaHR0cDovL2Rldi53My5vcmcvY3Nzd2cvY3Nzb20vI3RoZS1zdHlsZXNoZWV0LWludGVyZmFjZVxuICovXG5DU1NPTS5TdHlsZVNoZWV0ID0gZnVuY3Rpb24gU3R5bGVTaGVldCgpIHtcblx0dGhpcy5wYXJlbnRTdHlsZVNoZWV0ID0gbnVsbDtcbn07XG5cblxuLy8uQ29tbW9uSlNcbmV4cG9ydHMuU3R5bGVTaGVldCA9IENTU09NLlN0eWxlU2hlZXQ7XG4vLy9Db21tb25KU1xuIiwiLy8uQ29tbW9uSlNcbnZhciBDU1NPTSA9IHtcblx0Q1NTU3R5bGVTaGVldDogcmVxdWlyZShcIi4vQ1NTU3R5bGVTaGVldFwiKS5DU1NTdHlsZVNoZWV0LFxuXHRDU1NSdWxlOiByZXF1aXJlKFwiLi9DU1NSdWxlXCIpLkNTU1J1bGUsXG5cdENTU1N0eWxlUnVsZTogcmVxdWlyZShcIi4vQ1NTU3R5bGVSdWxlXCIpLkNTU1N0eWxlUnVsZSxcblx0Q1NTR3JvdXBpbmdSdWxlOiByZXF1aXJlKFwiLi9DU1NHcm91cGluZ1J1bGVcIikuQ1NTR3JvdXBpbmdSdWxlLFxuXHRDU1NDb25kaXRpb25SdWxlOiByZXF1aXJlKFwiLi9DU1NDb25kaXRpb25SdWxlXCIpLkNTU0NvbmRpdGlvblJ1bGUsXG5cdENTU01lZGlhUnVsZTogcmVxdWlyZShcIi4vQ1NTTWVkaWFSdWxlXCIpLkNTU01lZGlhUnVsZSxcblx0Q1NTU3VwcG9ydHNSdWxlOiByZXF1aXJlKFwiLi9DU1NTdXBwb3J0c1J1bGVcIikuQ1NTU3VwcG9ydHNSdWxlLFxuXHRDU1NTdHlsZURlY2xhcmF0aW9uOiByZXF1aXJlKFwiLi9DU1NTdHlsZURlY2xhcmF0aW9uXCIpLkNTU1N0eWxlRGVjbGFyYXRpb24sXG5cdENTU0tleWZyYW1lUnVsZTogcmVxdWlyZSgnLi9DU1NLZXlmcmFtZVJ1bGUnKS5DU1NLZXlmcmFtZVJ1bGUsXG5cdENTU0tleWZyYW1lc1J1bGU6IHJlcXVpcmUoJy4vQ1NTS2V5ZnJhbWVzUnVsZScpLkNTU0tleWZyYW1lc1J1bGVcbn07XG4vLy9Db21tb25KU1xuXG5cbi8qKlxuICogUHJvZHVjZXMgYSBkZWVwIGNvcHkgb2Ygc3R5bGVzaGVldCDigJQgdGhlIGluc3RhbmNlIHZhcmlhYmxlcyBvZiBzdHlsZXNoZWV0IGFyZSBjb3BpZWQgcmVjdXJzaXZlbHkuXG4gKiBAcGFyYW0ge0NTU1N0eWxlU2hlZXR8Q1NTT00uQ1NTU3R5bGVTaGVldH0gc3R5bGVzaGVldFxuICogQG5vc2lkZWVmZmVjdHNcbiAqIEByZXR1cm4ge0NTU09NLkNTU1N0eWxlU2hlZXR9XG4gKi9cbkNTU09NLmNsb25lID0gZnVuY3Rpb24gY2xvbmUoc3R5bGVzaGVldCkge1xuXG5cdHZhciBjbG9uZWQgPSBuZXcgQ1NTT00uQ1NTU3R5bGVTaGVldCgpO1xuXG5cdHZhciBydWxlcyA9IHN0eWxlc2hlZXQuY3NzUnVsZXM7XG5cdGlmICghcnVsZXMpIHtcblx0XHRyZXR1cm4gY2xvbmVkO1xuXHR9XG5cblx0Zm9yICh2YXIgaSA9IDAsIHJ1bGVzTGVuZ3RoID0gcnVsZXMubGVuZ3RoOyBpIDwgcnVsZXNMZW5ndGg7IGkrKykge1xuXHRcdHZhciBydWxlID0gcnVsZXNbaV07XG5cdFx0dmFyIHJ1bGVDbG9uZSA9IGNsb25lZC5jc3NSdWxlc1tpXSA9IG5ldyBydWxlLmNvbnN0cnVjdG9yKCk7XG5cblx0XHR2YXIgc3R5bGUgPSBydWxlLnN0eWxlO1xuXHRcdGlmIChzdHlsZSkge1xuXHRcdFx0dmFyIHN0eWxlQ2xvbmUgPSBydWxlQ2xvbmUuc3R5bGUgPSBuZXcgQ1NTT00uQ1NTU3R5bGVEZWNsYXJhdGlvbigpO1xuXHRcdFx0Zm9yICh2YXIgaiA9IDAsIHN0eWxlTGVuZ3RoID0gc3R5bGUubGVuZ3RoOyBqIDwgc3R5bGVMZW5ndGg7IGorKykge1xuXHRcdFx0XHR2YXIgbmFtZSA9IHN0eWxlQ2xvbmVbal0gPSBzdHlsZVtqXTtcblx0XHRcdFx0c3R5bGVDbG9uZVtuYW1lXSA9IHN0eWxlW25hbWVdO1xuXHRcdFx0XHRzdHlsZUNsb25lLl9pbXBvcnRhbnRzW25hbWVdID0gc3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eShuYW1lKTtcblx0XHRcdH1cblx0XHRcdHN0eWxlQ2xvbmUubGVuZ3RoID0gc3R5bGUubGVuZ3RoO1xuXHRcdH1cblxuXHRcdGlmIChydWxlLmhhc093blByb3BlcnR5KCdrZXlUZXh0JykpIHtcblx0XHRcdHJ1bGVDbG9uZS5rZXlUZXh0ID0gcnVsZS5rZXlUZXh0O1xuXHRcdH1cblxuXHRcdGlmIChydWxlLmhhc093blByb3BlcnR5KCdzZWxlY3RvclRleHQnKSkge1xuXHRcdFx0cnVsZUNsb25lLnNlbGVjdG9yVGV4dCA9IHJ1bGUuc2VsZWN0b3JUZXh0O1xuXHRcdH1cblxuXHRcdGlmIChydWxlLmhhc093blByb3BlcnR5KCdtZWRpYVRleHQnKSkge1xuXHRcdFx0cnVsZUNsb25lLm1lZGlhVGV4dCA9IHJ1bGUubWVkaWFUZXh0O1xuXHRcdH1cblxuXHRcdGlmIChydWxlLmhhc093blByb3BlcnR5KCdjb25kaXRpb25UZXh0JykpIHtcblx0XHRcdHJ1bGVDbG9uZS5jb25kaXRpb25UZXh0ID0gcnVsZS5jb25kaXRpb25UZXh0O1xuXHRcdH1cblxuXHRcdGlmIChydWxlLmhhc093blByb3BlcnR5KCdjc3NSdWxlcycpKSB7XG5cdFx0XHRydWxlQ2xvbmUuY3NzUnVsZXMgPSBjbG9uZShydWxlKS5jc3NSdWxlcztcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY2xvbmVkO1xuXG59O1xuXG4vLy5Db21tb25KU1xuZXhwb3J0cy5jbG9uZSA9IENTU09NLmNsb25lO1xuLy8vQ29tbW9uSlNcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5DU1NTdHlsZURlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9DU1NTdHlsZURlY2xhcmF0aW9uJykuQ1NTU3R5bGVEZWNsYXJhdGlvbjtcbmV4cG9ydHMuQ1NTUnVsZSA9IHJlcXVpcmUoJy4vQ1NTUnVsZScpLkNTU1J1bGU7XG5leHBvcnRzLkNTU0dyb3VwaW5nUnVsZSA9IHJlcXVpcmUoJy4vQ1NTR3JvdXBpbmdSdWxlJykuQ1NTR3JvdXBpbmdSdWxlO1xuZXhwb3J0cy5DU1NDb25kaXRpb25SdWxlID0gcmVxdWlyZSgnLi9DU1NDb25kaXRpb25SdWxlJykuQ1NTQ29uZGl0aW9uUnVsZTtcbmV4cG9ydHMuQ1NTU3R5bGVSdWxlID0gcmVxdWlyZSgnLi9DU1NTdHlsZVJ1bGUnKS5DU1NTdHlsZVJ1bGU7XG5leHBvcnRzLk1lZGlhTGlzdCA9IHJlcXVpcmUoJy4vTWVkaWFMaXN0JykuTWVkaWFMaXN0O1xuZXhwb3J0cy5DU1NNZWRpYVJ1bGUgPSByZXF1aXJlKCcuL0NTU01lZGlhUnVsZScpLkNTU01lZGlhUnVsZTtcbmV4cG9ydHMuQ1NTU3VwcG9ydHNSdWxlID0gcmVxdWlyZSgnLi9DU1NTdXBwb3J0c1J1bGUnKS5DU1NTdXBwb3J0c1J1bGU7XG5leHBvcnRzLkNTU0ltcG9ydFJ1bGUgPSByZXF1aXJlKCcuL0NTU0ltcG9ydFJ1bGUnKS5DU1NJbXBvcnRSdWxlO1xuZXhwb3J0cy5DU1NGb250RmFjZVJ1bGUgPSByZXF1aXJlKCcuL0NTU0ZvbnRGYWNlUnVsZScpLkNTU0ZvbnRGYWNlUnVsZTtcbmV4cG9ydHMuQ1NTSG9zdFJ1bGUgPSByZXF1aXJlKCcuL0NTU0hvc3RSdWxlJykuQ1NTSG9zdFJ1bGU7XG5leHBvcnRzLlN0eWxlU2hlZXQgPSByZXF1aXJlKCcuL1N0eWxlU2hlZXQnKS5TdHlsZVNoZWV0O1xuZXhwb3J0cy5DU1NTdHlsZVNoZWV0ID0gcmVxdWlyZSgnLi9DU1NTdHlsZVNoZWV0JykuQ1NTU3R5bGVTaGVldDtcbmV4cG9ydHMuQ1NTS2V5ZnJhbWVzUnVsZSA9IHJlcXVpcmUoJy4vQ1NTS2V5ZnJhbWVzUnVsZScpLkNTU0tleWZyYW1lc1J1bGU7XG5leHBvcnRzLkNTU0tleWZyYW1lUnVsZSA9IHJlcXVpcmUoJy4vQ1NTS2V5ZnJhbWVSdWxlJykuQ1NTS2V5ZnJhbWVSdWxlO1xuZXhwb3J0cy5NYXRjaGVyTGlzdCA9IHJlcXVpcmUoJy4vTWF0Y2hlckxpc3QnKS5NYXRjaGVyTGlzdDtcbmV4cG9ydHMuQ1NTRG9jdW1lbnRSdWxlID0gcmVxdWlyZSgnLi9DU1NEb2N1bWVudFJ1bGUnKS5DU1NEb2N1bWVudFJ1bGU7XG5leHBvcnRzLkNTU1ZhbHVlID0gcmVxdWlyZSgnLi9DU1NWYWx1ZScpLkNTU1ZhbHVlO1xuZXhwb3J0cy5DU1NWYWx1ZUV4cHJlc3Npb24gPSByZXF1aXJlKCcuL0NTU1ZhbHVlRXhwcmVzc2lvbicpLkNTU1ZhbHVlRXhwcmVzc2lvbjtcbmV4cG9ydHMucGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJykucGFyc2U7XG5leHBvcnRzLmNsb25lID0gcmVxdWlyZSgnLi9jbG9uZScpLmNsb25lO1xuIiwiLy8uQ29tbW9uSlNcbnZhciBDU1NPTSA9IHt9O1xuLy8vQ29tbW9uSlNcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b2tlblxuICovXG5DU1NPTS5wYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKHRva2VuKSB7XG5cblx0dmFyIGkgPSAwO1xuXG5cdC8qKlxuXHRcdFwiYmVmb3JlLXNlbGVjdG9yXCIgb3Jcblx0XHRcInNlbGVjdG9yXCIgb3Jcblx0XHRcImF0UnVsZVwiIG9yXG5cdFx0XCJhdEJsb2NrXCIgb3Jcblx0XHRcImNvbmRpdGlvbkJsb2NrXCIgb3Jcblx0XHRcImJlZm9yZS1uYW1lXCIgb3Jcblx0XHRcIm5hbWVcIiBvclxuXHRcdFwiYmVmb3JlLXZhbHVlXCIgb3Jcblx0XHRcInZhbHVlXCJcblx0Ki9cblx0dmFyIHN0YXRlID0gXCJiZWZvcmUtc2VsZWN0b3JcIjtcblxuXHR2YXIgaW5kZXg7XG5cdHZhciBidWZmZXIgPSBcIlwiO1xuXHR2YXIgdmFsdWVQYXJlbnRoZXNpc0RlcHRoID0gMDtcblxuXHR2YXIgU0lHTklGSUNBTlRfV0hJVEVTUEFDRSA9IHtcblx0XHRcInNlbGVjdG9yXCI6IHRydWUsXG5cdFx0XCJ2YWx1ZVwiOiB0cnVlLFxuXHRcdFwidmFsdWUtcGFyZW50aGVzaXNcIjogdHJ1ZSxcblx0XHRcImF0UnVsZVwiOiB0cnVlLFxuXHRcdFwiaW1wb3J0UnVsZS1iZWdpblwiOiB0cnVlLFxuXHRcdFwiaW1wb3J0UnVsZVwiOiB0cnVlLFxuXHRcdFwiYXRCbG9ja1wiOiB0cnVlLFxuXHRcdFwiY29uZGl0aW9uQmxvY2tcIjogdHJ1ZSxcblx0XHQnZG9jdW1lbnRSdWxlLWJlZ2luJzogdHJ1ZVxuXHR9O1xuXG5cdHZhciBzdHlsZVNoZWV0ID0gbmV3IENTU09NLkNTU1N0eWxlU2hlZXQoKTtcblxuXHQvLyBAdHlwZSBDU1NTdHlsZVNoZWV0fENTU01lZGlhUnVsZXxDU1NTdXBwb3J0c1J1bGV8Q1NTRm9udEZhY2VSdWxlfENTU0tleWZyYW1lc1J1bGV8Q1NTRG9jdW1lbnRSdWxlXG5cdHZhciBjdXJyZW50U2NvcGUgPSBzdHlsZVNoZWV0O1xuXG5cdC8vIEB0eXBlIENTU01lZGlhUnVsZXxDU1NTdXBwb3J0c1J1bGV8Q1NTS2V5ZnJhbWVzUnVsZXxDU1NEb2N1bWVudFJ1bGVcblx0dmFyIHBhcmVudFJ1bGU7XG5cblx0dmFyIGFuY2VzdG9yUnVsZXMgPSBbXTtcblx0dmFyIGhhc0FuY2VzdG9ycyA9IGZhbHNlO1xuXHR2YXIgcHJldlNjb3BlO1xuXG5cdHZhciBuYW1lLCBwcmlvcml0eT1cIlwiLCBzdHlsZVJ1bGUsIG1lZGlhUnVsZSwgc3VwcG9ydHNSdWxlLCBpbXBvcnRSdWxlLCBmb250RmFjZVJ1bGUsIGtleWZyYW1lc1J1bGUsIGRvY3VtZW50UnVsZSwgaG9zdFJ1bGU7XG5cblx0dmFyIGF0S2V5ZnJhbWVzUmVnRXhwID0gL0AoLSg/OlxcdystKSspP2tleWZyYW1lcy9nO1xuXG5cdHZhciBwYXJzZUVycm9yID0gZnVuY3Rpb24obWVzc2FnZSkge1xuXHRcdHZhciBsaW5lcyA9IHRva2VuLnN1YnN0cmluZygwLCBpKS5zcGxpdCgnXFxuJyk7XG5cdFx0dmFyIGxpbmVDb3VudCA9IGxpbmVzLmxlbmd0aDtcblx0XHR2YXIgY2hhckNvdW50ID0gbGluZXMucG9wKCkubGVuZ3RoICsgMTtcblx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSArICcgKGxpbmUgJyArIGxpbmVDb3VudCArICcsIGNoYXIgJyArIGNoYXJDb3VudCArICcpJyk7XG5cdFx0ZXJyb3IubGluZSA9IGxpbmVDb3VudDtcblx0XHQvKiBqc2hpbnQgc3ViIDogdHJ1ZSAqL1xuXHRcdGVycm9yWydjaGFyJ10gPSBjaGFyQ291bnQ7XG5cdFx0ZXJyb3Iuc3R5bGVTaGVldCA9IHN0eWxlU2hlZXQ7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH07XG5cblx0Zm9yICh2YXIgY2hhcmFjdGVyOyAoY2hhcmFjdGVyID0gdG9rZW4uY2hhckF0KGkpKTsgaSsrKSB7XG5cblx0XHRzd2l0Y2ggKGNoYXJhY3Rlcikge1xuXG5cdFx0Y2FzZSBcIiBcIjpcblx0XHRjYXNlIFwiXFx0XCI6XG5cdFx0Y2FzZSBcIlxcclwiOlxuXHRcdGNhc2UgXCJcXG5cIjpcblx0XHRjYXNlIFwiXFxmXCI6XG5cdFx0XHRpZiAoU0lHTklGSUNBTlRfV0hJVEVTUEFDRVtzdGF0ZV0pIHtcblx0XHRcdFx0YnVmZmVyICs9IGNoYXJhY3Rlcjtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXG5cdFx0Ly8gU3RyaW5nXG5cdFx0Y2FzZSAnXCInOlxuXHRcdFx0aW5kZXggPSBpICsgMTtcblx0XHRcdGRvIHtcblx0XHRcdFx0aW5kZXggPSB0b2tlbi5pbmRleE9mKCdcIicsIGluZGV4KSArIDE7XG5cdFx0XHRcdGlmICghaW5kZXgpIHtcblx0XHRcdFx0XHRwYXJzZUVycm9yKCdVbm1hdGNoZWQgXCInKTtcblx0XHRcdFx0fVxuXHRcdFx0fSB3aGlsZSAodG9rZW5baW5kZXggLSAyXSA9PT0gJ1xcXFwnKTtcblx0XHRcdGJ1ZmZlciArPSB0b2tlbi5zbGljZShpLCBpbmRleCk7XG5cdFx0XHRpID0gaW5kZXggLSAxO1xuXHRcdFx0c3dpdGNoIChzdGF0ZSkge1xuXHRcdFx0XHRjYXNlICdiZWZvcmUtdmFsdWUnOlxuXHRcdFx0XHRcdHN0YXRlID0gJ3ZhbHVlJztcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnaW1wb3J0UnVsZS1iZWdpbic6XG5cdFx0XHRcdFx0c3RhdGUgPSAnaW1wb3J0UnVsZSc7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgXCInXCI6XG5cdFx0XHRpbmRleCA9IGkgKyAxO1xuXHRcdFx0ZG8ge1xuXHRcdFx0XHRpbmRleCA9IHRva2VuLmluZGV4T2YoXCInXCIsIGluZGV4KSArIDE7XG5cdFx0XHRcdGlmICghaW5kZXgpIHtcblx0XHRcdFx0XHRwYXJzZUVycm9yKFwiVW5tYXRjaGVkICdcIik7XG5cdFx0XHRcdH1cblx0XHRcdH0gd2hpbGUgKHRva2VuW2luZGV4IC0gMl0gPT09ICdcXFxcJyk7XG5cdFx0XHRidWZmZXIgKz0gdG9rZW4uc2xpY2UoaSwgaW5kZXgpO1xuXHRcdFx0aSA9IGluZGV4IC0gMTtcblx0XHRcdHN3aXRjaCAoc3RhdGUpIHtcblx0XHRcdFx0Y2FzZSAnYmVmb3JlLXZhbHVlJzpcblx0XHRcdFx0XHRzdGF0ZSA9ICd2YWx1ZSc7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2ltcG9ydFJ1bGUtYmVnaW4nOlxuXHRcdFx0XHRcdHN0YXRlID0gJ2ltcG9ydFJ1bGUnO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cblx0XHQvLyBDb21tZW50XG5cdFx0Y2FzZSBcIi9cIjpcblx0XHRcdGlmICh0b2tlbi5jaGFyQXQoaSArIDEpID09PSBcIipcIikge1xuXHRcdFx0XHRpICs9IDI7XG5cdFx0XHRcdGluZGV4ID0gdG9rZW4uaW5kZXhPZihcIiovXCIsIGkpO1xuXHRcdFx0XHRpZiAoaW5kZXggPT09IC0xKSB7XG5cdFx0XHRcdFx0cGFyc2VFcnJvcihcIk1pc3NpbmcgKi9cIik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IGluZGV4ICsgMTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVmZmVyICs9IGNoYXJhY3Rlcjtcblx0XHRcdH1cblx0XHRcdGlmIChzdGF0ZSA9PT0gXCJpbXBvcnRSdWxlLWJlZ2luXCIpIHtcblx0XHRcdFx0YnVmZmVyICs9IFwiIFwiO1xuXHRcdFx0XHRzdGF0ZSA9IFwiaW1wb3J0UnVsZVwiO1xuXHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cblx0XHQvLyBBdC1ydWxlXG5cdFx0Y2FzZSBcIkBcIjpcblx0XHRcdGlmICh0b2tlbi5pbmRleE9mKFwiQC1tb3otZG9jdW1lbnRcIiwgaSkgPT09IGkpIHtcblx0XHRcdFx0c3RhdGUgPSBcImRvY3VtZW50UnVsZS1iZWdpblwiO1xuXHRcdFx0XHRkb2N1bWVudFJ1bGUgPSBuZXcgQ1NTT00uQ1NTRG9jdW1lbnRSdWxlKCk7XG5cdFx0XHRcdGRvY3VtZW50UnVsZS5fX3N0YXJ0cyA9IGk7XG5cdFx0XHRcdGkgKz0gXCItbW96LWRvY3VtZW50XCIubGVuZ3RoO1xuXHRcdFx0XHRidWZmZXIgPSBcIlwiO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH0gZWxzZSBpZiAodG9rZW4uaW5kZXhPZihcIkBtZWRpYVwiLCBpKSA9PT0gaSkge1xuXHRcdFx0XHRzdGF0ZSA9IFwiYXRCbG9ja1wiO1xuXHRcdFx0XHRtZWRpYVJ1bGUgPSBuZXcgQ1NTT00uQ1NTTWVkaWFSdWxlKCk7XG5cdFx0XHRcdG1lZGlhUnVsZS5fX3N0YXJ0cyA9IGk7XG5cdFx0XHRcdGkgKz0gXCJtZWRpYVwiLmxlbmd0aDtcblx0XHRcdFx0YnVmZmVyID0gXCJcIjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9IGVsc2UgaWYgKHRva2VuLmluZGV4T2YoXCJAc3VwcG9ydHNcIiwgaSkgPT09IGkpIHtcblx0XHRcdFx0c3RhdGUgPSBcImNvbmRpdGlvbkJsb2NrXCI7XG5cdFx0XHRcdHN1cHBvcnRzUnVsZSA9IG5ldyBDU1NPTS5DU1NTdXBwb3J0c1J1bGUoKTtcblx0XHRcdFx0c3VwcG9ydHNSdWxlLl9fc3RhcnRzID0gaTtcblx0XHRcdFx0aSArPSBcInN1cHBvcnRzXCIubGVuZ3RoO1xuXHRcdFx0XHRidWZmZXIgPSBcIlwiO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH0gZWxzZSBpZiAodG9rZW4uaW5kZXhPZihcIkBob3N0XCIsIGkpID09PSBpKSB7XG5cdFx0XHRcdHN0YXRlID0gXCJob3N0UnVsZS1iZWdpblwiO1xuXHRcdFx0XHRpICs9IFwiaG9zdFwiLmxlbmd0aDtcblx0XHRcdFx0aG9zdFJ1bGUgPSBuZXcgQ1NTT00uQ1NTSG9zdFJ1bGUoKTtcblx0XHRcdFx0aG9zdFJ1bGUuX19zdGFydHMgPSBpO1xuXHRcdFx0XHRidWZmZXIgPSBcIlwiO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH0gZWxzZSBpZiAodG9rZW4uaW5kZXhPZihcIkBpbXBvcnRcIiwgaSkgPT09IGkpIHtcblx0XHRcdFx0c3RhdGUgPSBcImltcG9ydFJ1bGUtYmVnaW5cIjtcblx0XHRcdFx0aSArPSBcImltcG9ydFwiLmxlbmd0aDtcblx0XHRcdFx0YnVmZmVyICs9IFwiQGltcG9ydFwiO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH0gZWxzZSBpZiAodG9rZW4uaW5kZXhPZihcIkBmb250LWZhY2VcIiwgaSkgPT09IGkpIHtcblx0XHRcdFx0c3RhdGUgPSBcImZvbnRGYWNlUnVsZS1iZWdpblwiO1xuXHRcdFx0XHRpICs9IFwiZm9udC1mYWNlXCIubGVuZ3RoO1xuXHRcdFx0XHRmb250RmFjZVJ1bGUgPSBuZXcgQ1NTT00uQ1NTRm9udEZhY2VSdWxlKCk7XG5cdFx0XHRcdGZvbnRGYWNlUnVsZS5fX3N0YXJ0cyA9IGk7XG5cdFx0XHRcdGJ1ZmZlciA9IFwiXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YXRLZXlmcmFtZXNSZWdFeHAubGFzdEluZGV4ID0gaTtcblx0XHRcdFx0dmFyIG1hdGNoS2V5ZnJhbWVzID0gYXRLZXlmcmFtZXNSZWdFeHAuZXhlYyh0b2tlbik7XG5cdFx0XHRcdGlmIChtYXRjaEtleWZyYW1lcyAmJiBtYXRjaEtleWZyYW1lcy5pbmRleCA9PT0gaSkge1xuXHRcdFx0XHRcdHN0YXRlID0gXCJrZXlmcmFtZXNSdWxlLWJlZ2luXCI7XG5cdFx0XHRcdFx0a2V5ZnJhbWVzUnVsZSA9IG5ldyBDU1NPTS5DU1NLZXlmcmFtZXNSdWxlKCk7XG5cdFx0XHRcdFx0a2V5ZnJhbWVzUnVsZS5fX3N0YXJ0cyA9IGk7XG5cdFx0XHRcdFx0a2V5ZnJhbWVzUnVsZS5fdmVuZG9yUHJlZml4ID0gbWF0Y2hLZXlmcmFtZXNbMV07IC8vIFdpbGwgY29tZSBvdXQgYXMgdW5kZWZpbmVkIGlmIG5vIHByZWZpeCB3YXMgZm91bmRcblx0XHRcdFx0XHRpICs9IG1hdGNoS2V5ZnJhbWVzWzBdLmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0YnVmZmVyID0gXCJcIjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fSBlbHNlIGlmIChzdGF0ZSA9PT0gXCJzZWxlY3RvclwiKSB7XG5cdFx0XHRcdFx0c3RhdGUgPSBcImF0UnVsZVwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRidWZmZXIgKz0gY2hhcmFjdGVyO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIFwie1wiOlxuXHRcdFx0aWYgKHN0YXRlID09PSBcInNlbGVjdG9yXCIgfHwgc3RhdGUgPT09IFwiYXRSdWxlXCIpIHtcblx0XHRcdFx0c3R5bGVSdWxlLnNlbGVjdG9yVGV4dCA9IGJ1ZmZlci50cmltKCk7XG5cdFx0XHRcdHN0eWxlUnVsZS5zdHlsZS5fX3N0YXJ0cyA9IGk7XG5cdFx0XHRcdGJ1ZmZlciA9IFwiXCI7XG5cdFx0XHRcdHN0YXRlID0gXCJiZWZvcmUtbmFtZVwiO1xuXHRcdFx0fSBlbHNlIGlmIChzdGF0ZSA9PT0gXCJhdEJsb2NrXCIpIHtcblx0XHRcdFx0bWVkaWFSdWxlLm1lZGlhLm1lZGlhVGV4dCA9IGJ1ZmZlci50cmltKCk7XG5cblx0XHRcdFx0aWYgKHBhcmVudFJ1bGUpIHtcblx0XHRcdFx0XHRhbmNlc3RvclJ1bGVzLnB1c2gocGFyZW50UnVsZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjdXJyZW50U2NvcGUgPSBwYXJlbnRSdWxlID0gbWVkaWFSdWxlO1xuXHRcdFx0XHRtZWRpYVJ1bGUucGFyZW50U3R5bGVTaGVldCA9IHN0eWxlU2hlZXQ7XG5cdFx0XHRcdGJ1ZmZlciA9IFwiXCI7XG5cdFx0XHRcdHN0YXRlID0gXCJiZWZvcmUtc2VsZWN0b3JcIjtcblx0XHRcdH0gZWxzZSBpZiAoc3RhdGUgPT09IFwiY29uZGl0aW9uQmxvY2tcIikge1xuXHRcdFx0XHRzdXBwb3J0c1J1bGUuY29uZGl0aW9uVGV4dCA9IGJ1ZmZlci50cmltKCk7XG5cblx0XHRcdFx0aWYgKHBhcmVudFJ1bGUpIHtcblx0XHRcdFx0XHRhbmNlc3RvclJ1bGVzLnB1c2gocGFyZW50UnVsZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjdXJyZW50U2NvcGUgPSBwYXJlbnRSdWxlID0gc3VwcG9ydHNSdWxlO1xuXHRcdFx0XHRzdXBwb3J0c1J1bGUucGFyZW50U3R5bGVTaGVldCA9IHN0eWxlU2hlZXQ7XG5cdFx0XHRcdGJ1ZmZlciA9IFwiXCI7XG5cdFx0XHRcdHN0YXRlID0gXCJiZWZvcmUtc2VsZWN0b3JcIjtcblx0XHRcdH0gZWxzZSBpZiAoc3RhdGUgPT09IFwiaG9zdFJ1bGUtYmVnaW5cIikge1xuXHRcdFx0XHRpZiAocGFyZW50UnVsZSkge1xuXHRcdFx0XHRcdGFuY2VzdG9yUnVsZXMucHVzaChwYXJlbnRSdWxlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGN1cnJlbnRTY29wZSA9IHBhcmVudFJ1bGUgPSBob3N0UnVsZTtcblx0XHRcdFx0aG9zdFJ1bGUucGFyZW50U3R5bGVTaGVldCA9IHN0eWxlU2hlZXQ7XG5cdFx0XHRcdGJ1ZmZlciA9IFwiXCI7XG5cdFx0XHRcdHN0YXRlID0gXCJiZWZvcmUtc2VsZWN0b3JcIjtcblx0XHRcdH0gZWxzZSBpZiAoc3RhdGUgPT09IFwiZm9udEZhY2VSdWxlLWJlZ2luXCIpIHtcblx0XHRcdFx0aWYgKHBhcmVudFJ1bGUpIHtcblx0XHRcdFx0XHRmb250RmFjZVJ1bGUucGFyZW50UnVsZSA9IHBhcmVudFJ1bGU7XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9udEZhY2VSdWxlLnBhcmVudFN0eWxlU2hlZXQgPSBzdHlsZVNoZWV0O1xuXHRcdFx0XHRzdHlsZVJ1bGUgPSBmb250RmFjZVJ1bGU7XG5cdFx0XHRcdGJ1ZmZlciA9IFwiXCI7XG5cdFx0XHRcdHN0YXRlID0gXCJiZWZvcmUtbmFtZVwiO1xuXHRcdFx0fSBlbHNlIGlmIChzdGF0ZSA9PT0gXCJrZXlmcmFtZXNSdWxlLWJlZ2luXCIpIHtcblx0XHRcdFx0a2V5ZnJhbWVzUnVsZS5uYW1lID0gYnVmZmVyLnRyaW0oKTtcblx0XHRcdFx0aWYgKHBhcmVudFJ1bGUpIHtcblx0XHRcdFx0XHRhbmNlc3RvclJ1bGVzLnB1c2gocGFyZW50UnVsZSk7XG5cdFx0XHRcdFx0a2V5ZnJhbWVzUnVsZS5wYXJlbnRSdWxlID0gcGFyZW50UnVsZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRrZXlmcmFtZXNSdWxlLnBhcmVudFN0eWxlU2hlZXQgPSBzdHlsZVNoZWV0O1xuXHRcdFx0XHRjdXJyZW50U2NvcGUgPSBwYXJlbnRSdWxlID0ga2V5ZnJhbWVzUnVsZTtcblx0XHRcdFx0YnVmZmVyID0gXCJcIjtcblx0XHRcdFx0c3RhdGUgPSBcImtleWZyYW1lUnVsZS1iZWdpblwiO1xuXHRcdFx0fSBlbHNlIGlmIChzdGF0ZSA9PT0gXCJrZXlmcmFtZVJ1bGUtYmVnaW5cIikge1xuXHRcdFx0XHRzdHlsZVJ1bGUgPSBuZXcgQ1NTT00uQ1NTS2V5ZnJhbWVSdWxlKCk7XG5cdFx0XHRcdHN0eWxlUnVsZS5rZXlUZXh0ID0gYnVmZmVyLnRyaW0oKTtcblx0XHRcdFx0c3R5bGVSdWxlLl9fc3RhcnRzID0gaTtcblx0XHRcdFx0YnVmZmVyID0gXCJcIjtcblx0XHRcdFx0c3RhdGUgPSBcImJlZm9yZS1uYW1lXCI7XG5cdFx0XHR9IGVsc2UgaWYgKHN0YXRlID09PSBcImRvY3VtZW50UnVsZS1iZWdpblwiKSB7XG5cdFx0XHRcdC8vIEZJWE1FOiB3aGF0IGlmIHRoaXMgJ3snIGlzIGluIHRoZSB1cmwgdGV4dCBvZiB0aGUgbWF0Y2ggZnVuY3Rpb24/XG5cdFx0XHRcdGRvY3VtZW50UnVsZS5tYXRjaGVyLm1hdGNoZXJUZXh0ID0gYnVmZmVyLnRyaW0oKTtcblx0XHRcdFx0aWYgKHBhcmVudFJ1bGUpIHtcblx0XHRcdFx0XHRhbmNlc3RvclJ1bGVzLnB1c2gocGFyZW50UnVsZSk7XG5cdFx0XHRcdFx0ZG9jdW1lbnRSdWxlLnBhcmVudFJ1bGUgPSBwYXJlbnRSdWxlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGN1cnJlbnRTY29wZSA9IHBhcmVudFJ1bGUgPSBkb2N1bWVudFJ1bGU7XG5cdFx0XHRcdGRvY3VtZW50UnVsZS5wYXJlbnRTdHlsZVNoZWV0ID0gc3R5bGVTaGVldDtcblx0XHRcdFx0YnVmZmVyID0gXCJcIjtcblx0XHRcdFx0c3RhdGUgPSBcImJlZm9yZS1zZWxlY3RvclwiO1xuXHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIFwiOlwiOlxuXHRcdFx0aWYgKHN0YXRlID09PSBcIm5hbWVcIikge1xuXHRcdFx0XHRuYW1lID0gYnVmZmVyLnRyaW0oKTtcblx0XHRcdFx0YnVmZmVyID0gXCJcIjtcblx0XHRcdFx0c3RhdGUgPSBcImJlZm9yZS12YWx1ZVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVmZmVyICs9IGNoYXJhY3Rlcjtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBcIihcIjpcblx0XHRcdGlmIChzdGF0ZSA9PT0gJ3ZhbHVlJykge1xuXHRcdFx0XHQvLyBpZSBjc3MgZXhwcmVzc2lvbiBtb2RlXG5cdFx0XHRcdGlmIChidWZmZXIudHJpbSgpID09PSAnZXhwcmVzc2lvbicpIHtcblx0XHRcdFx0XHR2YXIgaW5mbyA9IChuZXcgQ1NTT00uQ1NTVmFsdWVFeHByZXNzaW9uKHRva2VuLCBpKSkucGFyc2UoKTtcblxuXHRcdFx0XHRcdGlmIChpbmZvLmVycm9yKSB7XG5cdFx0XHRcdFx0XHRwYXJzZUVycm9yKGluZm8uZXJyb3IpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRidWZmZXIgKz0gaW5mby5leHByZXNzaW9uO1xuXHRcdFx0XHRcdFx0aSA9IGluZm8uaWR4O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0ZSA9ICd2YWx1ZS1wYXJlbnRoZXNpcyc7XG5cdFx0XHRcdFx0Ly9hbHdheXMgZW5zdXJlIHRoaXMgaXMgcmVzZXQgdG8gMSBvbiB0cmFuc2l0aW9uXG5cdFx0XHRcdFx0Ly9mcm9tIHZhbHVlIHRvIHZhbHVlLXBhcmVudGhlc2lzXG5cdFx0XHRcdFx0dmFsdWVQYXJlbnRoZXNpc0RlcHRoID0gMTtcblx0XHRcdFx0XHRidWZmZXIgKz0gY2hhcmFjdGVyO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKHN0YXRlID09PSAndmFsdWUtcGFyZW50aGVzaXMnKSB7XG5cdFx0XHRcdHZhbHVlUGFyZW50aGVzaXNEZXB0aCsrO1xuXHRcdFx0XHRidWZmZXIgKz0gY2hhcmFjdGVyO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVmZmVyICs9IGNoYXJhY3Rlcjtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBcIilcIjpcblx0XHRcdGlmIChzdGF0ZSA9PT0gJ3ZhbHVlLXBhcmVudGhlc2lzJykge1xuXHRcdFx0XHR2YWx1ZVBhcmVudGhlc2lzRGVwdGgtLTtcblx0XHRcdFx0aWYgKHZhbHVlUGFyZW50aGVzaXNEZXB0aCA9PT0gMCkgc3RhdGUgPSAndmFsdWUnO1xuXHRcdFx0fVxuXHRcdFx0YnVmZmVyICs9IGNoYXJhY3Rlcjtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBcIiFcIjpcblx0XHRcdGlmIChzdGF0ZSA9PT0gXCJ2YWx1ZVwiICYmIHRva2VuLmluZGV4T2YoXCIhaW1wb3J0YW50XCIsIGkpID09PSBpKSB7XG5cdFx0XHRcdHByaW9yaXR5ID0gXCJpbXBvcnRhbnRcIjtcblx0XHRcdFx0aSArPSBcImltcG9ydGFudFwiLmxlbmd0aDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1ZmZlciArPSBjaGFyYWN0ZXI7XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgXCI7XCI6XG5cdFx0XHRzd2l0Y2ggKHN0YXRlKSB7XG5cdFx0XHRcdGNhc2UgXCJ2YWx1ZVwiOlxuXHRcdFx0XHRcdHN0eWxlUnVsZS5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBidWZmZXIudHJpbSgpLCBwcmlvcml0eSk7XG5cdFx0XHRcdFx0cHJpb3JpdHkgPSBcIlwiO1xuXHRcdFx0XHRcdGJ1ZmZlciA9IFwiXCI7XG5cdFx0XHRcdFx0c3RhdGUgPSBcImJlZm9yZS1uYW1lXCI7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJhdFJ1bGVcIjpcblx0XHRcdFx0XHRidWZmZXIgPSBcIlwiO1xuXHRcdFx0XHRcdHN0YXRlID0gXCJiZWZvcmUtc2VsZWN0b3JcIjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImltcG9ydFJ1bGVcIjpcblx0XHRcdFx0XHRpbXBvcnRSdWxlID0gbmV3IENTU09NLkNTU0ltcG9ydFJ1bGUoKTtcblx0XHRcdFx0XHRpbXBvcnRSdWxlLnBhcmVudFN0eWxlU2hlZXQgPSBpbXBvcnRSdWxlLnN0eWxlU2hlZXQucGFyZW50U3R5bGVTaGVldCA9IHN0eWxlU2hlZXQ7XG5cdFx0XHRcdFx0aW1wb3J0UnVsZS5jc3NUZXh0ID0gYnVmZmVyICsgY2hhcmFjdGVyO1xuXHRcdFx0XHRcdHN0eWxlU2hlZXQuY3NzUnVsZXMucHVzaChpbXBvcnRSdWxlKTtcblx0XHRcdFx0XHRidWZmZXIgPSBcIlwiO1xuXHRcdFx0XHRcdHN0YXRlID0gXCJiZWZvcmUtc2VsZWN0b3JcIjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRidWZmZXIgKz0gY2hhcmFjdGVyO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIFwifVwiOlxuXHRcdFx0c3dpdGNoIChzdGF0ZSkge1xuXHRcdFx0XHRjYXNlIFwidmFsdWVcIjpcblx0XHRcdFx0XHRzdHlsZVJ1bGUuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgYnVmZmVyLnRyaW0oKSwgcHJpb3JpdHkpO1xuXHRcdFx0XHRcdHByaW9yaXR5ID0gXCJcIjtcblx0XHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdGNhc2UgXCJiZWZvcmUtbmFtZVwiOlxuXHRcdFx0XHRjYXNlIFwibmFtZVwiOlxuXHRcdFx0XHRcdHN0eWxlUnVsZS5fX2VuZHMgPSBpICsgMTtcblx0XHRcdFx0XHRpZiAocGFyZW50UnVsZSkge1xuXHRcdFx0XHRcdFx0c3R5bGVSdWxlLnBhcmVudFJ1bGUgPSBwYXJlbnRSdWxlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzdHlsZVJ1bGUucGFyZW50U3R5bGVTaGVldCA9IHN0eWxlU2hlZXQ7XG5cdFx0XHRcdFx0Y3VycmVudFNjb3BlLmNzc1J1bGVzLnB1c2goc3R5bGVSdWxlKTtcblx0XHRcdFx0XHRidWZmZXIgPSBcIlwiO1xuXHRcdFx0XHRcdGlmIChjdXJyZW50U2NvcGUuY29uc3RydWN0b3IgPT09IENTU09NLkNTU0tleWZyYW1lc1J1bGUpIHtcblx0XHRcdFx0XHRcdHN0YXRlID0gXCJrZXlmcmFtZVJ1bGUtYmVnaW5cIjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c3RhdGUgPSBcImJlZm9yZS1zZWxlY3RvclwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImtleWZyYW1lUnVsZS1iZWdpblwiOlxuXHRcdFx0XHRjYXNlIFwiYmVmb3JlLXNlbGVjdG9yXCI6XG5cdFx0XHRcdGNhc2UgXCJzZWxlY3RvclwiOlxuXHRcdFx0XHRcdC8vIEVuZCBvZiBtZWRpYS9zdXBwb3J0cy9kb2N1bWVudCBydWxlLlxuXHRcdFx0XHRcdGlmICghcGFyZW50UnVsZSkge1xuXHRcdFx0XHRcdFx0cGFyc2VFcnJvcihcIlVuZXhwZWN0ZWQgfVwiKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBIYW5kbGUgcnVsZXMgbmVzdGVkIGluIEBtZWRpYSBvciBAc3VwcG9ydHNcblx0XHRcdFx0XHRoYXNBbmNlc3RvcnMgPSBhbmNlc3RvclJ1bGVzLmxlbmd0aCA+IDA7XG5cblx0XHRcdFx0XHR3aGlsZSAoYW5jZXN0b3JSdWxlcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0XHRwYXJlbnRSdWxlID0gYW5jZXN0b3JSdWxlcy5wb3AoKTtcblxuXHRcdFx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdFx0XHRwYXJlbnRSdWxlLmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiQ1NTTWVkaWFSdWxlXCJcblx0XHRcdFx0XHRcdFx0fHwgcGFyZW50UnVsZS5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIkNTU1N1cHBvcnRzUnVsZVwiXG5cdFx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdFx0cHJldlNjb3BlID0gY3VycmVudFNjb3BlO1xuXHRcdFx0XHRcdFx0XHRjdXJyZW50U2NvcGUgPSBwYXJlbnRSdWxlO1xuXHRcdFx0XHRcdFx0XHRjdXJyZW50U2NvcGUuY3NzUnVsZXMucHVzaChwcmV2U2NvcGUpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKGFuY2VzdG9yUnVsZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdGhhc0FuY2VzdG9ycyA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZiAoIWhhc0FuY2VzdG9ycykge1xuXHRcdFx0XHRcdFx0Y3VycmVudFNjb3BlLl9fZW5kcyA9IGkgKyAxO1xuXHRcdFx0XHRcdFx0c3R5bGVTaGVldC5jc3NSdWxlcy5wdXNoKGN1cnJlbnRTY29wZSk7XG5cdFx0XHRcdFx0XHRjdXJyZW50U2NvcGUgPSBzdHlsZVNoZWV0O1xuXHRcdFx0XHRcdFx0cGFyZW50UnVsZSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnVmZmVyID0gXCJcIjtcblx0XHRcdFx0XHRzdGF0ZSA9IFwiYmVmb3JlLXNlbGVjdG9yXCI7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRzd2l0Y2ggKHN0YXRlKSB7XG5cdFx0XHRcdGNhc2UgXCJiZWZvcmUtc2VsZWN0b3JcIjpcblx0XHRcdFx0XHRzdGF0ZSA9IFwic2VsZWN0b3JcIjtcblx0XHRcdFx0XHRzdHlsZVJ1bGUgPSBuZXcgQ1NTT00uQ1NTU3R5bGVSdWxlKCk7XG5cdFx0XHRcdFx0c3R5bGVSdWxlLl9fc3RhcnRzID0gaTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImJlZm9yZS1uYW1lXCI6XG5cdFx0XHRcdFx0c3RhdGUgPSBcIm5hbWVcIjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImJlZm9yZS12YWx1ZVwiOlxuXHRcdFx0XHRcdHN0YXRlID0gXCJ2YWx1ZVwiO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiaW1wb3J0UnVsZS1iZWdpblwiOlxuXHRcdFx0XHRcdHN0YXRlID0gXCJpbXBvcnRSdWxlXCI7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRidWZmZXIgKz0gY2hhcmFjdGVyO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHN0eWxlU2hlZXQ7XG59O1xuXG5cbi8vLkNvbW1vbkpTXG5leHBvcnRzLnBhcnNlID0gQ1NTT00ucGFyc2U7XG4vLyBUaGUgZm9sbG93aW5nIG1vZHVsZXMgY2Fubm90IGJlIGluY2x1ZGVkIHNvb25lciBkdWUgdG8gdGhlIG11dHVhbCBkZXBlbmRlbmN5IHdpdGggcGFyc2UuanNcbkNTU09NLkNTU1N0eWxlU2hlZXQgPSByZXF1aXJlKFwiLi9DU1NTdHlsZVNoZWV0XCIpLkNTU1N0eWxlU2hlZXQ7XG5DU1NPTS5DU1NTdHlsZVJ1bGUgPSByZXF1aXJlKFwiLi9DU1NTdHlsZVJ1bGVcIikuQ1NTU3R5bGVSdWxlO1xuQ1NTT00uQ1NTSW1wb3J0UnVsZSA9IHJlcXVpcmUoXCIuL0NTU0ltcG9ydFJ1bGVcIikuQ1NTSW1wb3J0UnVsZTtcbkNTU09NLkNTU0dyb3VwaW5nUnVsZSA9IHJlcXVpcmUoXCIuL0NTU0dyb3VwaW5nUnVsZVwiKS5DU1NHcm91cGluZ1J1bGU7XG5DU1NPTS5DU1NNZWRpYVJ1bGUgPSByZXF1aXJlKFwiLi9DU1NNZWRpYVJ1bGVcIikuQ1NTTWVkaWFSdWxlO1xuQ1NTT00uQ1NTQ29uZGl0aW9uUnVsZSA9IHJlcXVpcmUoXCIuL0NTU0NvbmRpdGlvblJ1bGVcIikuQ1NTQ29uZGl0aW9uUnVsZTtcbkNTU09NLkNTU1N1cHBvcnRzUnVsZSA9IHJlcXVpcmUoXCIuL0NTU1N1cHBvcnRzUnVsZVwiKS5DU1NTdXBwb3J0c1J1bGU7XG5DU1NPTS5DU1NGb250RmFjZVJ1bGUgPSByZXF1aXJlKFwiLi9DU1NGb250RmFjZVJ1bGVcIikuQ1NTRm9udEZhY2VSdWxlO1xuQ1NTT00uQ1NTSG9zdFJ1bGUgPSByZXF1aXJlKFwiLi9DU1NIb3N0UnVsZVwiKS5DU1NIb3N0UnVsZTtcbkNTU09NLkNTU1N0eWxlRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuL0NTU1N0eWxlRGVjbGFyYXRpb24nKS5DU1NTdHlsZURlY2xhcmF0aW9uO1xuQ1NTT00uQ1NTS2V5ZnJhbWVSdWxlID0gcmVxdWlyZSgnLi9DU1NLZXlmcmFtZVJ1bGUnKS5DU1NLZXlmcmFtZVJ1bGU7XG5DU1NPTS5DU1NLZXlmcmFtZXNSdWxlID0gcmVxdWlyZSgnLi9DU1NLZXlmcmFtZXNSdWxlJykuQ1NTS2V5ZnJhbWVzUnVsZTtcbkNTU09NLkNTU1ZhbHVlRXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4vQ1NTVmFsdWVFeHByZXNzaW9uJykuQ1NTVmFsdWVFeHByZXNzaW9uO1xuQ1NTT00uQ1NTRG9jdW1lbnRSdWxlID0gcmVxdWlyZSgnLi9DU1NEb2N1bWVudFJ1bGUnKS5DU1NEb2N1bWVudFJ1bGU7XG4vLy9Db21tb25KU1xuIiwiLyohXG5cbkpTWmlwIHYzLjEwLjEgLSBBIEphdmFTY3JpcHQgY2xhc3MgZm9yIGdlbmVyYXRpbmcgYW5kIHJlYWRpbmcgemlwIGZpbGVzXG48aHR0cDovL3N0dWFydGsuY29tL2pzemlwPlxuXG4oYykgMjAwOS0yMDE2IFN0dWFydCBLbmlnaHRsZXkgPHN0dWFydCBbYXRdIHN0dWFydGsuY29tPlxuRHVhbCBsaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2Ugb3IgR1BMdjMuIFNlZSBodHRwczovL3Jhdy5naXRodWIuY29tL1N0dWsvanN6aXAvbWFpbi9MSUNFTlNFLm1hcmtkb3duLlxuXG5KU1ppcCB1c2VzIHRoZSBsaWJyYXJ5IHBha28gcmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIDpcbmh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlY2EvcGFrby9ibG9iL21haW4vTElDRU5TRVxuKi9cblxuIWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlKW1vZHVsZS5leHBvcnRzPWUoKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW10sZSk7ZWxzZXsoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjp0aGlzKS5KU1ppcD1lKCl9fShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBzKGEsbyxoKXtmdW5jdGlvbiB1KHIsZSl7aWYoIW9bcl0pe2lmKCFhW3JdKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFlJiZ0KXJldHVybiB0KHIsITApO2lmKGwpcmV0dXJuIGwociwhMCk7dmFyIG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIityK1wiJ1wiKTt0aHJvdyBuLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbn12YXIgaT1vW3JdPXtleHBvcnRzOnt9fTthW3JdWzBdLmNhbGwoaS5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciB0PWFbcl1bMV1bZV07cmV0dXJuIHUodHx8ZSl9LGksaS5leHBvcnRzLHMsYSxvLGgpfXJldHVybiBvW3JdLmV4cG9ydHN9Zm9yKHZhciBsPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsZT0wO2U8aC5sZW5ndGg7ZSsrKXUoaFtlXSk7cmV0dXJuIHV9KHsxOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGQ9ZShcIi4vdXRpbHNcIiksYz1lKFwiLi9zdXBwb3J0XCIpLHA9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiO3IuZW5jb2RlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyLG4saSxzLGEsbyxoPVtdLHU9MCxsPWUubGVuZ3RoLGY9bCxjPVwic3RyaW5nXCIhPT1kLmdldFR5cGVPZihlKTt1PGUubGVuZ3RoOylmPWwtdSxuPWM/KHQ9ZVt1KytdLHI9dTxsP2VbdSsrXTowLHU8bD9lW3UrK106MCk6KHQ9ZS5jaGFyQ29kZUF0KHUrKykscj11PGw/ZS5jaGFyQ29kZUF0KHUrKyk6MCx1PGw/ZS5jaGFyQ29kZUF0KHUrKyk6MCksaT10Pj4yLHM9KDMmdCk8PDR8cj4+NCxhPTE8Zj8oMTUmcik8PDJ8bj4+Njo2NCxvPTI8Zj82MyZuOjY0LGgucHVzaChwLmNoYXJBdChpKStwLmNoYXJBdChzKStwLmNoYXJBdChhKStwLmNoYXJBdChvKSk7cmV0dXJuIGguam9pbihcIlwiKX0sci5kZWNvZGU9ZnVuY3Rpb24oZSl7dmFyIHQscixuLGkscyxhLG89MCxoPTAsdT1cImRhdGE6XCI7aWYoZS5zdWJzdHIoMCx1Lmxlbmd0aCk9PT11KXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYmFzZTY0IGlucHV0LCBpdCBsb29rcyBsaWtlIGEgZGF0YSB1cmwuXCIpO3ZhciBsLGY9MyooZT1lLnJlcGxhY2UoL1teQS1aYS16MC05Ky89XS9nLFwiXCIpKS5sZW5ndGgvNDtpZihlLmNoYXJBdChlLmxlbmd0aC0xKT09PXAuY2hhckF0KDY0KSYmZi0tLGUuY2hhckF0KGUubGVuZ3RoLTIpPT09cC5jaGFyQXQoNjQpJiZmLS0sZiUxIT0wKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYmFzZTY0IGlucHV0LCBiYWQgY29udGVudCBsZW5ndGguXCIpO2ZvcihsPWMudWludDhhcnJheT9uZXcgVWludDhBcnJheSgwfGYpOm5ldyBBcnJheSgwfGYpO288ZS5sZW5ndGg7KXQ9cC5pbmRleE9mKGUuY2hhckF0KG8rKykpPDwyfChpPXAuaW5kZXhPZihlLmNoYXJBdChvKyspKSk+PjQscj0oMTUmaSk8PDR8KHM9cC5pbmRleE9mKGUuY2hhckF0KG8rKykpKT4+MixuPSgzJnMpPDw2fChhPXAuaW5kZXhPZihlLmNoYXJBdChvKyspKSksbFtoKytdPXQsNjQhPT1zJiYobFtoKytdPXIpLDY0IT09YSYmKGxbaCsrXT1uKTtyZXR1cm4gbH19LHtcIi4vc3VwcG9ydFwiOjMwLFwiLi91dGlsc1wiOjMyfV0sMjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL2V4dGVybmFsXCIpLGk9ZShcIi4vc3RyZWFtL0RhdGFXb3JrZXJcIikscz1lKFwiLi9zdHJlYW0vQ3JjMzJQcm9iZVwiKSxhPWUoXCIuL3N0cmVhbS9EYXRhTGVuZ3RoUHJvYmVcIik7ZnVuY3Rpb24gbyhlLHQscixuLGkpe3RoaXMuY29tcHJlc3NlZFNpemU9ZSx0aGlzLnVuY29tcHJlc3NlZFNpemU9dCx0aGlzLmNyYzMyPXIsdGhpcy5jb21wcmVzc2lvbj1uLHRoaXMuY29tcHJlc3NlZENvbnRlbnQ9aX1vLnByb3RvdHlwZT17Z2V0Q29udGVudFdvcmtlcjpmdW5jdGlvbigpe3ZhciBlPW5ldyBpKG4uUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29tcHJlc3NlZENvbnRlbnQpKS5waXBlKHRoaXMuY29tcHJlc3Npb24udW5jb21wcmVzc1dvcmtlcigpKS5waXBlKG5ldyBhKFwiZGF0YV9sZW5ndGhcIikpLHQ9dGhpcztyZXR1cm4gZS5vbihcImVuZFwiLGZ1bmN0aW9uKCl7aWYodGhpcy5zdHJlYW1JbmZvLmRhdGFfbGVuZ3RoIT09dC51bmNvbXByZXNzZWRTaXplKXRocm93IG5ldyBFcnJvcihcIkJ1ZyA6IHVuY29tcHJlc3NlZCBkYXRhIHNpemUgbWlzbWF0Y2hcIil9KSxlfSxnZXRDb21wcmVzc2VkV29ya2VyOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBpKG4uUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29tcHJlc3NlZENvbnRlbnQpKS53aXRoU3RyZWFtSW5mbyhcImNvbXByZXNzZWRTaXplXCIsdGhpcy5jb21wcmVzc2VkU2l6ZSkud2l0aFN0cmVhbUluZm8oXCJ1bmNvbXByZXNzZWRTaXplXCIsdGhpcy51bmNvbXByZXNzZWRTaXplKS53aXRoU3RyZWFtSW5mbyhcImNyYzMyXCIsdGhpcy5jcmMzMikud2l0aFN0cmVhbUluZm8oXCJjb21wcmVzc2lvblwiLHRoaXMuY29tcHJlc3Npb24pfX0sby5jcmVhdGVXb3JrZXJGcm9tPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZS5waXBlKG5ldyBzKS5waXBlKG5ldyBhKFwidW5jb21wcmVzc2VkU2l6ZVwiKSkucGlwZSh0LmNvbXByZXNzV29ya2VyKHIpKS5waXBlKG5ldyBhKFwiY29tcHJlc3NlZFNpemVcIikpLndpdGhTdHJlYW1JbmZvKFwiY29tcHJlc3Npb25cIix0KX0sdC5leHBvcnRzPW99LHtcIi4vZXh0ZXJuYWxcIjo2LFwiLi9zdHJlYW0vQ3JjMzJQcm9iZVwiOjI1LFwiLi9zdHJlYW0vRGF0YUxlbmd0aFByb2JlXCI6MjYsXCIuL3N0cmVhbS9EYXRhV29ya2VyXCI6Mjd9XSwzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIik7ci5TVE9SRT17bWFnaWM6XCJcXDBcXDBcIixjb21wcmVzc1dvcmtlcjpmdW5jdGlvbigpe3JldHVybiBuZXcgbihcIlNUT1JFIGNvbXByZXNzaW9uXCIpfSx1bmNvbXByZXNzV29ya2VyOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBuKFwiU1RPUkUgZGVjb21wcmVzc2lvblwiKX19LHIuREVGTEFURT1lKFwiLi9mbGF0ZVwiKX0se1wiLi9mbGF0ZVwiOjcsXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6Mjh9XSw0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vdXRpbHNcIik7dmFyIG89ZnVuY3Rpb24oKXtmb3IodmFyIGUsdD1bXSxyPTA7cjwyNTY7cisrKXtlPXI7Zm9yKHZhciBuPTA7bjw4O24rKyllPTEmZT8zOTg4MjkyMzg0XmU+Pj4xOmU+Pj4xO3Rbcl09ZX1yZXR1cm4gdH0oKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwIT09ZSYmZS5sZW5ndGg/XCJzdHJpbmdcIiE9PW4uZ2V0VHlwZU9mKGUpP2Z1bmN0aW9uKGUsdCxyLG4pe3ZhciBpPW8scz1uK3I7ZV49LTE7Zm9yKHZhciBhPW47YTxzO2ErKyllPWU+Pj44XmlbMjU1JihlXnRbYV0pXTtyZXR1cm4tMV5lfSgwfHQsZSxlLmxlbmd0aCwwKTpmdW5jdGlvbihlLHQscixuKXt2YXIgaT1vLHM9bityO2VePS0xO2Zvcih2YXIgYT1uO2E8czthKyspZT1lPj4+OF5pWzI1NSYoZV50LmNoYXJDb2RlQXQoYSkpXTtyZXR1cm4tMV5lfSgwfHQsZSxlLmxlbmd0aCwwKTowfX0se1wiLi91dGlsc1wiOjMyfV0sNTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3IuYmFzZTY0PSExLHIuYmluYXJ5PSExLHIuZGlyPSExLHIuY3JlYXRlRm9sZGVycz0hMCxyLmRhdGU9bnVsbCxyLmNvbXByZXNzaW9uPW51bGwsci5jb21wcmVzc2lvbk9wdGlvbnM9bnVsbCxyLmNvbW1lbnQ9bnVsbCxyLnVuaXhQZXJtaXNzaW9ucz1udWxsLHIuZG9zUGVybWlzc2lvbnM9bnVsbH0se31dLDY6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1udWxsO249XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByb21pc2U/UHJvbWlzZTplKFwibGllXCIpLHQuZXhwb3J0cz17UHJvbWlzZTpufX0se2xpZTozN31dLDc6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhBcnJheSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQxNkFycmF5JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDMyQXJyYXksaT1lKFwicGFrb1wiKSxzPWUoXCIuL3V0aWxzXCIpLGE9ZShcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIiksbz1uP1widWludDhhcnJheVwiOlwiYXJyYXlcIjtmdW5jdGlvbiBoKGUsdCl7YS5jYWxsKHRoaXMsXCJGbGF0ZVdvcmtlci9cIitlKSx0aGlzLl9wYWtvPW51bGwsdGhpcy5fcGFrb0FjdGlvbj1lLHRoaXMuX3Bha29PcHRpb25zPXQsdGhpcy5tZXRhPXt9fXIubWFnaWM9XCJcXGJcXDBcIixzLmluaGVyaXRzKGgsYSksaC5wcm90b3R5cGUucHJvY2Vzc0NodW5rPWZ1bmN0aW9uKGUpe3RoaXMubWV0YT1lLm1ldGEsbnVsbD09PXRoaXMuX3Bha28mJnRoaXMuX2NyZWF0ZVBha28oKSx0aGlzLl9wYWtvLnB1c2gocy50cmFuc2Zvcm1UbyhvLGUuZGF0YSksITEpfSxoLnByb3RvdHlwZS5mbHVzaD1mdW5jdGlvbigpe2EucHJvdG90eXBlLmZsdXNoLmNhbGwodGhpcyksbnVsbD09PXRoaXMuX3Bha28mJnRoaXMuX2NyZWF0ZVBha28oKSx0aGlzLl9wYWtvLnB1c2goW10sITApfSxoLnByb3RvdHlwZS5jbGVhblVwPWZ1bmN0aW9uKCl7YS5wcm90b3R5cGUuY2xlYW5VcC5jYWxsKHRoaXMpLHRoaXMuX3Bha289bnVsbH0saC5wcm90b3R5cGUuX2NyZWF0ZVBha289ZnVuY3Rpb24oKXt0aGlzLl9wYWtvPW5ldyBpW3RoaXMuX3Bha29BY3Rpb25dKHtyYXc6ITAsbGV2ZWw6dGhpcy5fcGFrb09wdGlvbnMubGV2ZWx8fC0xfSk7dmFyIHQ9dGhpczt0aGlzLl9wYWtvLm9uRGF0YT1mdW5jdGlvbihlKXt0LnB1c2goe2RhdGE6ZSxtZXRhOnQubWV0YX0pfX0sci5jb21wcmVzc1dvcmtlcj1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IGgoXCJEZWZsYXRlXCIsZSl9LHIudW5jb21wcmVzc1dvcmtlcj1mdW5jdGlvbigpe3JldHVybiBuZXcgaChcIkluZmxhdGVcIix7fSl9fSx7XCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6MjgsXCIuL3V0aWxzXCI6MzIscGFrbzozOH1dLDg6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBBKGUsdCl7dmFyIHIsbj1cIlwiO2ZvcihyPTA7cjx0O3IrKyluKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDI1NSZlKSxlPj4+PTg7cmV0dXJuIG59ZnVuY3Rpb24gbihlLHQscixuLGkscyl7dmFyIGEsbyxoPWUuZmlsZSx1PWUuY29tcHJlc3Npb24sbD1zIT09Ty51dGY4ZW5jb2RlLGY9SS50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLHMoaC5uYW1lKSksYz1JLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsTy51dGY4ZW5jb2RlKGgubmFtZSkpLGQ9aC5jb21tZW50LHA9SS50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLHMoZCkpLG09SS50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLE8udXRmOGVuY29kZShkKSksXz1jLmxlbmd0aCE9PWgubmFtZS5sZW5ndGgsZz1tLmxlbmd0aCE9PWQubGVuZ3RoLGI9XCJcIix2PVwiXCIseT1cIlwiLHc9aC5kaXIsaz1oLmRhdGUseD17Y3JjMzI6MCxjb21wcmVzc2VkU2l6ZTowLHVuY29tcHJlc3NlZFNpemU6MH07dCYmIXJ8fCh4LmNyYzMyPWUuY3JjMzIseC5jb21wcmVzc2VkU2l6ZT1lLmNvbXByZXNzZWRTaXplLHgudW5jb21wcmVzc2VkU2l6ZT1lLnVuY29tcHJlc3NlZFNpemUpO3ZhciBTPTA7dCYmKFN8PTgpLGx8fCFfJiYhZ3x8KFN8PTIwNDgpO3ZhciB6PTAsQz0wO3cmJih6fD0xNiksXCJVTklYXCI9PT1pPyhDPTc5OCx6fD1mdW5jdGlvbihlLHQpe3ZhciByPWU7cmV0dXJuIGV8fChyPXQ/MTY4OTM6MzMyMDQpLCg2NTUzNSZyKTw8MTZ9KGgudW5peFBlcm1pc3Npb25zLHcpKTooQz0yMCx6fD1mdW5jdGlvbihlKXtyZXR1cm4gNjMmKGV8fDApfShoLmRvc1Blcm1pc3Npb25zKSksYT1rLmdldFVUQ0hvdXJzKCksYTw8PTYsYXw9ay5nZXRVVENNaW51dGVzKCksYTw8PTUsYXw9ay5nZXRVVENTZWNvbmRzKCkvMixvPWsuZ2V0VVRDRnVsbFllYXIoKS0xOTgwLG88PD00LG98PWsuZ2V0VVRDTW9udGgoKSsxLG88PD01LG98PWsuZ2V0VVRDRGF0ZSgpLF8mJih2PUEoMSwxKStBKEIoZiksNCkrYyxiKz1cInVwXCIrQSh2Lmxlbmd0aCwyKSt2KSxnJiYoeT1BKDEsMSkrQShCKHApLDQpK20sYis9XCJ1Y1wiK0EoeS5sZW5ndGgsMikreSk7dmFyIEU9XCJcIjtyZXR1cm4gRSs9XCJcXG5cXDBcIixFKz1BKFMsMiksRSs9dS5tYWdpYyxFKz1BKGEsMiksRSs9QShvLDIpLEUrPUEoeC5jcmMzMiw0KSxFKz1BKHguY29tcHJlc3NlZFNpemUsNCksRSs9QSh4LnVuY29tcHJlc3NlZFNpemUsNCksRSs9QShmLmxlbmd0aCwyKSxFKz1BKGIubGVuZ3RoLDIpLHtmaWxlUmVjb3JkOlIuTE9DQUxfRklMRV9IRUFERVIrRStmK2IsZGlyUmVjb3JkOlIuQ0VOVFJBTF9GSUxFX0hFQURFUitBKEMsMikrRStBKHAubGVuZ3RoLDIpK1wiXFwwXFwwXFwwXFwwXCIrQSh6LDQpK0Eobiw0KStmK2IrcH19dmFyIEk9ZShcIi4uL3V0aWxzXCIpLGk9ZShcIi4uL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpLE89ZShcIi4uL3V0ZjhcIiksQj1lKFwiLi4vY3JjMzJcIiksUj1lKFwiLi4vc2lnbmF0dXJlXCIpO2Z1bmN0aW9uIHMoZSx0LHIsbil7aS5jYWxsKHRoaXMsXCJaaXBGaWxlV29ya2VyXCIpLHRoaXMuYnl0ZXNXcml0dGVuPTAsdGhpcy56aXBDb21tZW50PXQsdGhpcy56aXBQbGF0Zm9ybT1yLHRoaXMuZW5jb2RlRmlsZU5hbWU9bix0aGlzLnN0cmVhbUZpbGVzPWUsdGhpcy5hY2N1bXVsYXRlPSExLHRoaXMuY29udGVudEJ1ZmZlcj1bXSx0aGlzLmRpclJlY29yZHM9W10sdGhpcy5jdXJyZW50U291cmNlT2Zmc2V0PTAsdGhpcy5lbnRyaWVzQ291bnQ9MCx0aGlzLmN1cnJlbnRGaWxlPW51bGwsdGhpcy5fc291cmNlcz1bXX1JLmluaGVyaXRzKHMsaSkscy5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihlKXt2YXIgdD1lLm1ldGEucGVyY2VudHx8MCxyPXRoaXMuZW50cmllc0NvdW50LG49dGhpcy5fc291cmNlcy5sZW5ndGg7dGhpcy5hY2N1bXVsYXRlP3RoaXMuY29udGVudEJ1ZmZlci5wdXNoKGUpOih0aGlzLmJ5dGVzV3JpdHRlbis9ZS5kYXRhLmxlbmd0aCxpLnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcyx7ZGF0YTplLmRhdGEsbWV0YTp7Y3VycmVudEZpbGU6dGhpcy5jdXJyZW50RmlsZSxwZXJjZW50OnI/KHQrMTAwKihyLW4tMSkpL3I6MTAwfX0pKX0scy5wcm90b3R5cGUub3BlbmVkU291cmNlPWZ1bmN0aW9uKGUpe3RoaXMuY3VycmVudFNvdXJjZU9mZnNldD10aGlzLmJ5dGVzV3JpdHRlbix0aGlzLmN1cnJlbnRGaWxlPWUuZmlsZS5uYW1lO3ZhciB0PXRoaXMuc3RyZWFtRmlsZXMmJiFlLmZpbGUuZGlyO2lmKHQpe3ZhciByPW4oZSx0LCExLHRoaXMuY3VycmVudFNvdXJjZU9mZnNldCx0aGlzLnppcFBsYXRmb3JtLHRoaXMuZW5jb2RlRmlsZU5hbWUpO3RoaXMucHVzaCh7ZGF0YTpyLmZpbGVSZWNvcmQsbWV0YTp7cGVyY2VudDowfX0pfWVsc2UgdGhpcy5hY2N1bXVsYXRlPSEwfSxzLnByb3RvdHlwZS5jbG9zZWRTb3VyY2U9ZnVuY3Rpb24oZSl7dGhpcy5hY2N1bXVsYXRlPSExO3ZhciB0PXRoaXMuc3RyZWFtRmlsZXMmJiFlLmZpbGUuZGlyLHI9bihlLHQsITAsdGhpcy5jdXJyZW50U291cmNlT2Zmc2V0LHRoaXMuemlwUGxhdGZvcm0sdGhpcy5lbmNvZGVGaWxlTmFtZSk7aWYodGhpcy5kaXJSZWNvcmRzLnB1c2goci5kaXJSZWNvcmQpLHQpdGhpcy5wdXNoKHtkYXRhOmZ1bmN0aW9uKGUpe3JldHVybiBSLkRBVEFfREVTQ1JJUFRPUitBKGUuY3JjMzIsNCkrQShlLmNvbXByZXNzZWRTaXplLDQpK0EoZS51bmNvbXByZXNzZWRTaXplLDQpfShlKSxtZXRhOntwZXJjZW50OjEwMH19KTtlbHNlIGZvcih0aGlzLnB1c2goe2RhdGE6ci5maWxlUmVjb3JkLG1ldGE6e3BlcmNlbnQ6MH19KTt0aGlzLmNvbnRlbnRCdWZmZXIubGVuZ3RoOyl0aGlzLnB1c2godGhpcy5jb250ZW50QnVmZmVyLnNoaWZ0KCkpO3RoaXMuY3VycmVudEZpbGU9bnVsbH0scy5wcm90b3R5cGUuZmx1c2g9ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcy5ieXRlc1dyaXR0ZW4sdD0wO3Q8dGhpcy5kaXJSZWNvcmRzLmxlbmd0aDt0KyspdGhpcy5wdXNoKHtkYXRhOnRoaXMuZGlyUmVjb3Jkc1t0XSxtZXRhOntwZXJjZW50OjEwMH19KTt2YXIgcj10aGlzLmJ5dGVzV3JpdHRlbi1lLG49ZnVuY3Rpb24oZSx0LHIsbixpKXt2YXIgcz1JLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsaShuKSk7cmV0dXJuIFIuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EK1wiXFwwXFwwXFwwXFwwXCIrQShlLDIpK0EoZSwyKStBKHQsNCkrQShyLDQpK0Eocy5sZW5ndGgsMikrc30odGhpcy5kaXJSZWNvcmRzLmxlbmd0aCxyLGUsdGhpcy56aXBDb21tZW50LHRoaXMuZW5jb2RlRmlsZU5hbWUpO3RoaXMucHVzaCh7ZGF0YTpuLG1ldGE6e3BlcmNlbnQ6MTAwfX0pfSxzLnByb3RvdHlwZS5wcmVwYXJlTmV4dFNvdXJjZT1mdW5jdGlvbigpe3RoaXMucHJldmlvdXM9dGhpcy5fc291cmNlcy5zaGlmdCgpLHRoaXMub3BlbmVkU291cmNlKHRoaXMucHJldmlvdXMuc3RyZWFtSW5mbyksdGhpcy5pc1BhdXNlZD90aGlzLnByZXZpb3VzLnBhdXNlKCk6dGhpcy5wcmV2aW91cy5yZXN1bWUoKX0scy5wcm90b3R5cGUucmVnaXN0ZXJQcmV2aW91cz1mdW5jdGlvbihlKXt0aGlzLl9zb3VyY2VzLnB1c2goZSk7dmFyIHQ9dGhpcztyZXR1cm4gZS5vbihcImRhdGFcIixmdW5jdGlvbihlKXt0LnByb2Nlc3NDaHVuayhlKX0pLGUub24oXCJlbmRcIixmdW5jdGlvbigpe3QuY2xvc2VkU291cmNlKHQucHJldmlvdXMuc3RyZWFtSW5mbyksdC5fc291cmNlcy5sZW5ndGg/dC5wcmVwYXJlTmV4dFNvdXJjZSgpOnQuZW5kKCl9KSxlLm9uKFwiZXJyb3JcIixmdW5jdGlvbihlKXt0LmVycm9yKGUpfSksdGhpc30scy5wcm90b3R5cGUucmVzdW1lPWZ1bmN0aW9uKCl7cmV0dXJuISFpLnByb3RvdHlwZS5yZXN1bWUuY2FsbCh0aGlzKSYmKCF0aGlzLnByZXZpb3VzJiZ0aGlzLl9zb3VyY2VzLmxlbmd0aD8odGhpcy5wcmVwYXJlTmV4dFNvdXJjZSgpLCEwKTp0aGlzLnByZXZpb3VzfHx0aGlzLl9zb3VyY2VzLmxlbmd0aHx8dGhpcy5nZW5lcmF0ZWRFcnJvcj92b2lkIDA6KHRoaXMuZW5kKCksITApKX0scy5wcm90b3R5cGUuZXJyb3I9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fc291cmNlcztpZighaS5wcm90b3R5cGUuZXJyb3IuY2FsbCh0aGlzLGUpKXJldHVybiExO2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXRyeXt0W3JdLmVycm9yKGUpfWNhdGNoKGUpe31yZXR1cm4hMH0scy5wcm90b3R5cGUubG9jaz1mdW5jdGlvbigpe2kucHJvdG90eXBlLmxvY2suY2FsbCh0aGlzKTtmb3IodmFyIGU9dGhpcy5fc291cmNlcyx0PTA7dDxlLmxlbmd0aDt0KyspZVt0XS5sb2NrKCl9LHQuZXhwb3J0cz1zfSx7XCIuLi9jcmMzMlwiOjQsXCIuLi9zaWduYXR1cmVcIjoyMyxcIi4uL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6MjgsXCIuLi91dGY4XCI6MzEsXCIuLi91dGlsc1wiOjMyfV0sOTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciB1PWUoXCIuLi9jb21wcmVzc2lvbnNcIiksbj1lKFwiLi9aaXBGaWxlV29ya2VyXCIpO3IuZ2VuZXJhdGVXb3JrZXI9ZnVuY3Rpb24oZSxhLHQpe3ZhciBvPW5ldyBuKGEuc3RyZWFtRmlsZXMsdCxhLnBsYXRmb3JtLGEuZW5jb2RlRmlsZU5hbWUpLGg9MDt0cnl7ZS5mb3JFYWNoKGZ1bmN0aW9uKGUsdCl7aCsrO3ZhciByPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZXx8dCxuPXVbcl07aWYoIW4pdGhyb3cgbmV3IEVycm9yKHIrXCIgaXMgbm90IGEgdmFsaWQgY29tcHJlc3Npb24gbWV0aG9kICFcIik7cmV0dXJuIG59KHQub3B0aW9ucy5jb21wcmVzc2lvbixhLmNvbXByZXNzaW9uKSxuPXQub3B0aW9ucy5jb21wcmVzc2lvbk9wdGlvbnN8fGEuY29tcHJlc3Npb25PcHRpb25zfHx7fSxpPXQuZGlyLHM9dC5kYXRlO3QuX2NvbXByZXNzV29ya2VyKHIsbikud2l0aFN0cmVhbUluZm8oXCJmaWxlXCIse25hbWU6ZSxkaXI6aSxkYXRlOnMsY29tbWVudDp0LmNvbW1lbnR8fFwiXCIsdW5peFBlcm1pc3Npb25zOnQudW5peFBlcm1pc3Npb25zLGRvc1Blcm1pc3Npb25zOnQuZG9zUGVybWlzc2lvbnN9KS5waXBlKG8pfSksby5lbnRyaWVzQ291bnQ9aH1jYXRjaChlKXtvLmVycm9yKGUpfXJldHVybiBvfX0se1wiLi4vY29tcHJlc3Npb25zXCI6MyxcIi4vWmlwRmlsZVdvcmtlclwiOjh9XSwxMDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oKXtpZighKHRoaXMgaW5zdGFuY2VvZiBuKSlyZXR1cm4gbmV3IG47aWYoYXJndW1lbnRzLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgY29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuXCIpO3RoaXMuZmlsZXM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLmNvbW1lbnQ9bnVsbCx0aGlzLnJvb3Q9XCJcIix0aGlzLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG47Zm9yKHZhciB0IGluIHRoaXMpXCJmdW5jdGlvblwiIT10eXBlb2YgdGhpc1t0XSYmKGVbdF09dGhpc1t0XSk7cmV0dXJuIGV9fShuLnByb3RvdHlwZT1lKFwiLi9vYmplY3RcIikpLmxvYWRBc3luYz1lKFwiLi9sb2FkXCIpLG4uc3VwcG9ydD1lKFwiLi9zdXBwb3J0XCIpLG4uZGVmYXVsdHM9ZShcIi4vZGVmYXVsdHNcIiksbi52ZXJzaW9uPVwiMy4xMC4xXCIsbi5sb2FkQXN5bmM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4obmV3IG4pLmxvYWRBc3luYyhlLHQpfSxuLmV4dGVybmFsPWUoXCIuL2V4dGVybmFsXCIpLHQuZXhwb3J0cz1ufSx7XCIuL2RlZmF1bHRzXCI6NSxcIi4vZXh0ZXJuYWxcIjo2LFwiLi9sb2FkXCI6MTEsXCIuL29iamVjdFwiOjE1LFwiLi9zdXBwb3J0XCI6MzB9XSwxMTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciB1PWUoXCIuL3V0aWxzXCIpLGk9ZShcIi4vZXh0ZXJuYWxcIiksbj1lKFwiLi91dGY4XCIpLHM9ZShcIi4vemlwRW50cmllc1wiKSxhPWUoXCIuL3N0cmVhbS9DcmMzMlByb2JlXCIpLGw9ZShcIi4vbm9kZWpzVXRpbHNcIik7ZnVuY3Rpb24gZihuKXtyZXR1cm4gbmV3IGkuUHJvbWlzZShmdW5jdGlvbihlLHQpe3ZhciByPW4uZGVjb21wcmVzc2VkLmdldENvbnRlbnRXb3JrZXIoKS5waXBlKG5ldyBhKTtyLm9uKFwiZXJyb3JcIixmdW5jdGlvbihlKXt0KGUpfSkub24oXCJlbmRcIixmdW5jdGlvbigpe3Iuc3RyZWFtSW5mby5jcmMzMiE9PW4uZGVjb21wcmVzc2VkLmNyYzMyP3QobmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcCA6IENSQzMyIG1pc21hdGNoXCIpKTplKCl9KS5yZXN1bWUoKX0pfXQuZXhwb3J0cz1mdW5jdGlvbihlLG8pe3ZhciBoPXRoaXM7cmV0dXJuIG89dS5leHRlbmQob3x8e30se2Jhc2U2NDohMSxjaGVja0NSQzMyOiExLG9wdGltaXplZEJpbmFyeVN0cmluZzohMSxjcmVhdGVGb2xkZXJzOiExLGRlY29kZUZpbGVOYW1lOm4udXRmOGRlY29kZX0pLGwuaXNOb2RlJiZsLmlzU3RyZWFtKGUpP2kuUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiSlNaaXAgY2FuJ3QgYWNjZXB0IGEgc3RyZWFtIHdoZW4gbG9hZGluZyBhIHppcCBmaWxlLlwiKSk6dS5wcmVwYXJlQ29udGVudChcInRoZSBsb2FkZWQgemlwIGZpbGVcIixlLCEwLG8ub3B0aW1pemVkQmluYXJ5U3RyaW5nLG8uYmFzZTY0KS50aGVuKGZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzKG8pO3JldHVybiB0LmxvYWQoZSksdH0pLnRoZW4oZnVuY3Rpb24oZSl7dmFyIHQ9W2kuUHJvbWlzZS5yZXNvbHZlKGUpXSxyPWUuZmlsZXM7aWYoby5jaGVja0NSQzMyKWZvcih2YXIgbj0wO248ci5sZW5ndGg7bisrKXQucHVzaChmKHJbbl0pKTtyZXR1cm4gaS5Qcm9taXNlLmFsbCh0KX0pLnRoZW4oZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuc2hpZnQoKSxyPXQuZmlsZXMsbj0wO248ci5sZW5ndGg7bisrKXt2YXIgaT1yW25dLHM9aS5maWxlTmFtZVN0cixhPXUucmVzb2x2ZShpLmZpbGVOYW1lU3RyKTtoLmZpbGUoYSxpLmRlY29tcHJlc3NlZCx7YmluYXJ5OiEwLG9wdGltaXplZEJpbmFyeVN0cmluZzohMCxkYXRlOmkuZGF0ZSxkaXI6aS5kaXIsY29tbWVudDppLmZpbGVDb21tZW50U3RyLmxlbmd0aD9pLmZpbGVDb21tZW50U3RyOm51bGwsdW5peFBlcm1pc3Npb25zOmkudW5peFBlcm1pc3Npb25zLGRvc1Blcm1pc3Npb25zOmkuZG9zUGVybWlzc2lvbnMsY3JlYXRlRm9sZGVyczpvLmNyZWF0ZUZvbGRlcnN9KSxpLmRpcnx8KGguZmlsZShhKS51bnNhZmVPcmlnaW5hbE5hbWU9cyl9cmV0dXJuIHQuemlwQ29tbWVudC5sZW5ndGgmJihoLmNvbW1lbnQ9dC56aXBDb21tZW50KSxofSl9fSx7XCIuL2V4dGVybmFsXCI6NixcIi4vbm9kZWpzVXRpbHNcIjoxNCxcIi4vc3RyZWFtL0NyYzMyUHJvYmVcIjoyNSxcIi4vdXRmOFwiOjMxLFwiLi91dGlsc1wiOjMyLFwiLi96aXBFbnRyaWVzXCI6MzN9XSwxMjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuLi91dGlsc1wiKSxpPWUoXCIuLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKTtmdW5jdGlvbiBzKGUsdCl7aS5jYWxsKHRoaXMsXCJOb2RlanMgc3RyZWFtIGlucHV0IGFkYXB0ZXIgZm9yIFwiK2UpLHRoaXMuX3Vwc3RyZWFtRW5kZWQ9ITEsdGhpcy5fYmluZFN0cmVhbSh0KX1uLmluaGVyaXRzKHMsaSkscy5wcm90b3R5cGUuX2JpbmRTdHJlYW09ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczsodGhpcy5fc3RyZWFtPWUpLnBhdXNlKCksZS5vbihcImRhdGFcIixmdW5jdGlvbihlKXt0LnB1c2goe2RhdGE6ZSxtZXRhOntwZXJjZW50OjB9fSl9KS5vbihcImVycm9yXCIsZnVuY3Rpb24oZSl7dC5pc1BhdXNlZD90aGlzLmdlbmVyYXRlZEVycm9yPWU6dC5lcnJvcihlKX0pLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXt0LmlzUGF1c2VkP3QuX3Vwc3RyZWFtRW5kZWQ9ITA6dC5lbmQoKX0pfSxzLnByb3RvdHlwZS5wYXVzZT1mdW5jdGlvbigpe3JldHVybiEhaS5wcm90b3R5cGUucGF1c2UuY2FsbCh0aGlzKSYmKHRoaXMuX3N0cmVhbS5wYXVzZSgpLCEwKX0scy5wcm90b3R5cGUucmVzdW1lPWZ1bmN0aW9uKCl7cmV0dXJuISFpLnByb3RvdHlwZS5yZXN1bWUuY2FsbCh0aGlzKSYmKHRoaXMuX3Vwc3RyZWFtRW5kZWQ/dGhpcy5lbmQoKTp0aGlzLl9zdHJlYW0ucmVzdW1lKCksITApfSx0LmV4cG9ydHM9c30se1wiLi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjoyOCxcIi4uL3V0aWxzXCI6MzJ9XSwxMzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBpPWUoXCJyZWFkYWJsZS1zdHJlYW1cIikuUmVhZGFibGU7ZnVuY3Rpb24gbihlLHQscil7aS5jYWxsKHRoaXMsdCksdGhpcy5faGVscGVyPWU7dmFyIG49dGhpcztlLm9uKFwiZGF0YVwiLGZ1bmN0aW9uKGUsdCl7bi5wdXNoKGUpfHxuLl9oZWxwZXIucGF1c2UoKSxyJiZyKHQpfSkub24oXCJlcnJvclwiLGZ1bmN0aW9uKGUpe24uZW1pdChcImVycm9yXCIsZSl9KS5vbihcImVuZFwiLGZ1bmN0aW9uKCl7bi5wdXNoKG51bGwpfSl9ZShcIi4uL3V0aWxzXCIpLmluaGVyaXRzKG4saSksbi5wcm90b3R5cGUuX3JlYWQ9ZnVuY3Rpb24oKXt0aGlzLl9oZWxwZXIucmVzdW1lKCl9LHQuZXhwb3J0cz1ufSx7XCIuLi91dGlsc1wiOjMyLFwicmVhZGFibGUtc3RyZWFtXCI6MTZ9XSwxNDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz17aXNOb2RlOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBCdWZmZXIsbmV3QnVmZmVyRnJvbTpmdW5jdGlvbihlLHQpe2lmKEJ1ZmZlci5mcm9tJiZCdWZmZXIuZnJvbSE9PVVpbnQ4QXJyYXkuZnJvbSlyZXR1cm4gQnVmZmVyLmZyb20oZSx0KTtpZihcIm51bWJlclwiPT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoJ1RoZSBcImRhdGFcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpO3JldHVybiBuZXcgQnVmZmVyKGUsdCl9LGFsbG9jQnVmZmVyOmZ1bmN0aW9uKGUpe2lmKEJ1ZmZlci5hbGxvYylyZXR1cm4gQnVmZmVyLmFsbG9jKGUpO3ZhciB0PW5ldyBCdWZmZXIoZSk7cmV0dXJuIHQuZmlsbCgwKSx0fSxpc0J1ZmZlcjpmdW5jdGlvbihlKXtyZXR1cm4gQnVmZmVyLmlzQnVmZmVyKGUpfSxpc1N0cmVhbTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5vbiYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5wYXVzZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5yZXN1bWV9fX0se31dLDE1OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcyhlLHQscil7dmFyIG4saT11LmdldFR5cGVPZih0KSxzPXUuZXh0ZW5kKHJ8fHt9LGYpO3MuZGF0ZT1zLmRhdGV8fG5ldyBEYXRlLG51bGwhPT1zLmNvbXByZXNzaW9uJiYocy5jb21wcmVzc2lvbj1zLmNvbXByZXNzaW9uLnRvVXBwZXJDYXNlKCkpLFwic3RyaW5nXCI9PXR5cGVvZiBzLnVuaXhQZXJtaXNzaW9ucyYmKHMudW5peFBlcm1pc3Npb25zPXBhcnNlSW50KHMudW5peFBlcm1pc3Npb25zLDgpKSxzLnVuaXhQZXJtaXNzaW9ucyYmMTYzODQmcy51bml4UGVybWlzc2lvbnMmJihzLmRpcj0hMCkscy5kb3NQZXJtaXNzaW9ucyYmMTYmcy5kb3NQZXJtaXNzaW9ucyYmKHMuZGlyPSEwKSxzLmRpciYmKGU9ZyhlKSkscy5jcmVhdGVGb2xkZXJzJiYobj1fKGUpKSYmYi5jYWxsKHRoaXMsbiwhMCk7dmFyIGE9XCJzdHJpbmdcIj09PWkmJiExPT09cy5iaW5hcnkmJiExPT09cy5iYXNlNjQ7ciYmdm9pZCAwIT09ci5iaW5hcnl8fChzLmJpbmFyeT0hYSksKHQgaW5zdGFuY2VvZiBjJiYwPT09dC51bmNvbXByZXNzZWRTaXplfHxzLmRpcnx8IXR8fDA9PT10Lmxlbmd0aCkmJihzLmJhc2U2ND0hMSxzLmJpbmFyeT0hMCx0PVwiXCIscy5jb21wcmVzc2lvbj1cIlNUT1JFXCIsaT1cInN0cmluZ1wiKTt2YXIgbz1udWxsO289dCBpbnN0YW5jZW9mIGN8fHQgaW5zdGFuY2VvZiBsP3Q6cC5pc05vZGUmJnAuaXNTdHJlYW0odCk/bmV3IG0oZSx0KTp1LnByZXBhcmVDb250ZW50KGUsdCxzLmJpbmFyeSxzLm9wdGltaXplZEJpbmFyeVN0cmluZyxzLmJhc2U2NCk7dmFyIGg9bmV3IGQoZSxvLHMpO3RoaXMuZmlsZXNbZV09aH12YXIgaT1lKFwiLi91dGY4XCIpLHU9ZShcIi4vdXRpbHNcIiksbD1lKFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKSxhPWUoXCIuL3N0cmVhbS9TdHJlYW1IZWxwZXJcIiksZj1lKFwiLi9kZWZhdWx0c1wiKSxjPWUoXCIuL2NvbXByZXNzZWRPYmplY3RcIiksZD1lKFwiLi96aXBPYmplY3RcIiksbz1lKFwiLi9nZW5lcmF0ZVwiKSxwPWUoXCIuL25vZGVqc1V0aWxzXCIpLG09ZShcIi4vbm9kZWpzL05vZGVqc1N0cmVhbUlucHV0QWRhcHRlclwiKSxfPWZ1bmN0aW9uKGUpe1wiL1wiPT09ZS5zbGljZSgtMSkmJihlPWUuc3Vic3RyaW5nKDAsZS5sZW5ndGgtMSkpO3ZhciB0PWUubGFzdEluZGV4T2YoXCIvXCIpO3JldHVybiAwPHQ/ZS5zdWJzdHJpbmcoMCx0KTpcIlwifSxnPWZ1bmN0aW9uKGUpe3JldHVyblwiL1wiIT09ZS5zbGljZSgtMSkmJihlKz1cIi9cIiksZX0sYj1mdW5jdGlvbihlLHQpe3JldHVybiB0PXZvaWQgMCE9PXQ/dDpmLmNyZWF0ZUZvbGRlcnMsZT1nKGUpLHRoaXMuZmlsZXNbZV18fHMuY2FsbCh0aGlzLGUsbnVsbCx7ZGlyOiEwLGNyZWF0ZUZvbGRlcnM6dH0pLHRoaXMuZmlsZXNbZV19O2Z1bmN0aW9uIGgoZSl7cmV0dXJuXCJbb2JqZWN0IFJlZ0V4cF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX12YXIgbj17bG9hZDpmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIlRoaXMgbWV0aG9kIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuXCIpfSxmb3JFYWNoOmZ1bmN0aW9uKGUpe3ZhciB0LHIsbjtmb3IodCBpbiB0aGlzLmZpbGVzKW49dGhpcy5maWxlc1t0XSwocj10LnNsaWNlKHRoaXMucm9vdC5sZW5ndGgsdC5sZW5ndGgpKSYmdC5zbGljZSgwLHRoaXMucm9vdC5sZW5ndGgpPT09dGhpcy5yb290JiZlKHIsbil9LGZpbHRlcjpmdW5jdGlvbihyKXt2YXIgbj1bXTtyZXR1cm4gdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKGUsdCl7cihlLHQpJiZuLnB1c2godCl9KSxufSxmaWxlOmZ1bmN0aW9uKGUsdCxyKXtpZigxIT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZT10aGlzLnJvb3QrZSxzLmNhbGwodGhpcyxlLHQsciksdGhpcztpZihoKGUpKXt2YXIgbj1lO3JldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbihlLHQpe3JldHVybiF0LmRpciYmbi50ZXN0KGUpfSl9dmFyIGk9dGhpcy5maWxlc1t0aGlzLnJvb3QrZV07cmV0dXJuIGkmJiFpLmRpcj9pOm51bGx9LGZvbGRlcjpmdW5jdGlvbihyKXtpZighcilyZXR1cm4gdGhpcztpZihoKHIpKXJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbihlLHQpe3JldHVybiB0LmRpciYmci50ZXN0KGUpfSk7dmFyIGU9dGhpcy5yb290K3IsdD1iLmNhbGwodGhpcyxlKSxuPXRoaXMuY2xvbmUoKTtyZXR1cm4gbi5yb290PXQubmFtZSxufSxyZW1vdmU6ZnVuY3Rpb24ocil7cj10aGlzLnJvb3Qrcjt2YXIgZT10aGlzLmZpbGVzW3JdO2lmKGV8fChcIi9cIiE9PXIuc2xpY2UoLTEpJiYocis9XCIvXCIpLGU9dGhpcy5maWxlc1tyXSksZSYmIWUuZGlyKWRlbGV0ZSB0aGlzLmZpbGVzW3JdO2Vsc2UgZm9yKHZhciB0PXRoaXMuZmlsdGVyKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQubmFtZS5zbGljZSgwLHIubGVuZ3RoKT09PXJ9KSxuPTA7bjx0Lmxlbmd0aDtuKyspZGVsZXRlIHRoaXMuZmlsZXNbdFtuXS5uYW1lXTtyZXR1cm4gdGhpc30sZ2VuZXJhdGU6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIG1ldGhvZCBoYXMgYmVlbiByZW1vdmVkIGluIEpTWmlwIDMuMCwgcGxlYXNlIGNoZWNrIHRoZSB1cGdyYWRlIGd1aWRlLlwiKX0sZ2VuZXJhdGVJbnRlcm5hbFN0cmVhbTpmdW5jdGlvbihlKXt2YXIgdCxyPXt9O3RyeXtpZigocj11LmV4dGVuZChlfHx7fSx7c3RyZWFtRmlsZXM6ITEsY29tcHJlc3Npb246XCJTVE9SRVwiLGNvbXByZXNzaW9uT3B0aW9uczpudWxsLHR5cGU6XCJcIixwbGF0Zm9ybTpcIkRPU1wiLGNvbW1lbnQ6bnVsbCxtaW1lVHlwZTpcImFwcGxpY2F0aW9uL3ppcFwiLGVuY29kZUZpbGVOYW1lOmkudXRmOGVuY29kZX0pKS50eXBlPXIudHlwZS50b0xvd2VyQ2FzZSgpLHIuY29tcHJlc3Npb249ci5jb21wcmVzc2lvbi50b1VwcGVyQ2FzZSgpLFwiYmluYXJ5c3RyaW5nXCI9PT1yLnR5cGUmJihyLnR5cGU9XCJzdHJpbmdcIiksIXIudHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJObyBvdXRwdXQgdHlwZSBzcGVjaWZpZWQuXCIpO3UuY2hlY2tTdXBwb3J0KHIudHlwZSksXCJkYXJ3aW5cIiE9PXIucGxhdGZvcm0mJlwiZnJlZWJzZFwiIT09ci5wbGF0Zm9ybSYmXCJsaW51eFwiIT09ci5wbGF0Zm9ybSYmXCJzdW5vc1wiIT09ci5wbGF0Zm9ybXx8KHIucGxhdGZvcm09XCJVTklYXCIpLFwid2luMzJcIj09PXIucGxhdGZvcm0mJihyLnBsYXRmb3JtPVwiRE9TXCIpO3ZhciBuPXIuY29tbWVudHx8dGhpcy5jb21tZW50fHxcIlwiO3Q9by5nZW5lcmF0ZVdvcmtlcih0aGlzLHIsbil9Y2F0Y2goZSl7KHQ9bmV3IGwoXCJlcnJvclwiKSkuZXJyb3IoZSl9cmV0dXJuIG5ldyBhKHQsci50eXBlfHxcInN0cmluZ1wiLHIubWltZVR5cGUpfSxnZW5lcmF0ZUFzeW5jOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZ2VuZXJhdGVJbnRlcm5hbFN0cmVhbShlKS5hY2N1bXVsYXRlKHQpfSxnZW5lcmF0ZU5vZGVTdHJlYW06ZnVuY3Rpb24oZSx0KXtyZXR1cm4oZT1lfHx7fSkudHlwZXx8KGUudHlwZT1cIm5vZGVidWZmZXJcIiksdGhpcy5nZW5lcmF0ZUludGVybmFsU3RyZWFtKGUpLnRvTm9kZWpzU3RyZWFtKHQpfX07dC5leHBvcnRzPW59LHtcIi4vY29tcHJlc3NlZE9iamVjdFwiOjIsXCIuL2RlZmF1bHRzXCI6NSxcIi4vZ2VuZXJhdGVcIjo5LFwiLi9ub2RlanMvTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyXCI6MTIsXCIuL25vZGVqc1V0aWxzXCI6MTQsXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6MjgsXCIuL3N0cmVhbS9TdHJlYW1IZWxwZXJcIjoyOSxcIi4vdXRmOFwiOjMxLFwiLi91dGlsc1wiOjMyLFwiLi96aXBPYmplY3RcIjozNX1dLDE2OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPWUoXCJzdHJlYW1cIil9LHtzdHJlYW06dm9pZCAwfV0sMTc6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9EYXRhUmVhZGVyXCIpO2Z1bmN0aW9uIGkoZSl7bi5jYWxsKHRoaXMsZSk7Zm9yKHZhciB0PTA7dDx0aGlzLmRhdGEubGVuZ3RoO3QrKyllW3RdPTI1NSZlW3RdfWUoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhpLG4pLGkucHJvdG90eXBlLmJ5dGVBdD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5kYXRhW3RoaXMuemVybytlXX0saS5wcm90b3R5cGUubGFzdEluZGV4T2ZTaWduYXR1cmU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuY2hhckNvZGVBdCgwKSxyPWUuY2hhckNvZGVBdCgxKSxuPWUuY2hhckNvZGVBdCgyKSxpPWUuY2hhckNvZGVBdCgzKSxzPXRoaXMubGVuZ3RoLTQ7MDw9czstLXMpaWYodGhpcy5kYXRhW3NdPT09dCYmdGhpcy5kYXRhW3MrMV09PT1yJiZ0aGlzLmRhdGFbcysyXT09PW4mJnRoaXMuZGF0YVtzKzNdPT09aSlyZXR1cm4gcy10aGlzLnplcm87cmV0dXJuLTF9LGkucHJvdG90eXBlLnJlYWRBbmRDaGVja1NpZ25hdHVyZT1mdW5jdGlvbihlKXt2YXIgdD1lLmNoYXJDb2RlQXQoMCkscj1lLmNoYXJDb2RlQXQoMSksbj1lLmNoYXJDb2RlQXQoMiksaT1lLmNoYXJDb2RlQXQoMykscz10aGlzLnJlYWREYXRhKDQpO3JldHVybiB0PT09c1swXSYmcj09PXNbMV0mJm49PT1zWzJdJiZpPT09c1szXX0saS5wcm90b3R5cGUucmVhZERhdGE9ZnVuY3Rpb24oZSl7aWYodGhpcy5jaGVja09mZnNldChlKSwwPT09ZSlyZXR1cm5bXTt2YXIgdD10aGlzLmRhdGEuc2xpY2UodGhpcy56ZXJvK3RoaXMuaW5kZXgsdGhpcy56ZXJvK3RoaXMuaW5kZXgrZSk7cmV0dXJuIHRoaXMuaW5kZXgrPWUsdH0sdC5leHBvcnRzPWl9LHtcIi4uL3V0aWxzXCI6MzIsXCIuL0RhdGFSZWFkZXJcIjoxOH1dLDE4OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4uL3V0aWxzXCIpO2Z1bmN0aW9uIGkoZSl7dGhpcy5kYXRhPWUsdGhpcy5sZW5ndGg9ZS5sZW5ndGgsdGhpcy5pbmRleD0wLHRoaXMuemVybz0wfWkucHJvdG90eXBlPXtjaGVja09mZnNldDpmdW5jdGlvbihlKXt0aGlzLmNoZWNrSW5kZXgodGhpcy5pbmRleCtlKX0sY2hlY2tJbmRleDpmdW5jdGlvbihlKXtpZih0aGlzLmxlbmd0aDx0aGlzLnplcm8rZXx8ZTwwKXRocm93IG5ldyBFcnJvcihcIkVuZCBvZiBkYXRhIHJlYWNoZWQgKGRhdGEgbGVuZ3RoID0gXCIrdGhpcy5sZW5ndGgrXCIsIGFza2VkIGluZGV4ID0gXCIrZStcIikuIENvcnJ1cHRlZCB6aXAgP1wiKX0sc2V0SW5kZXg6ZnVuY3Rpb24oZSl7dGhpcy5jaGVja0luZGV4KGUpLHRoaXMuaW5kZXg9ZX0sc2tpcDpmdW5jdGlvbihlKXt0aGlzLnNldEluZGV4KHRoaXMuaW5kZXgrZSl9LGJ5dGVBdDpmdW5jdGlvbigpe30scmVhZEludDpmdW5jdGlvbihlKXt2YXIgdCxyPTA7Zm9yKHRoaXMuY2hlY2tPZmZzZXQoZSksdD10aGlzLmluZGV4K2UtMTt0Pj10aGlzLmluZGV4O3QtLSlyPShyPDw4KSt0aGlzLmJ5dGVBdCh0KTtyZXR1cm4gdGhpcy5pbmRleCs9ZSxyfSxyZWFkU3RyaW5nOmZ1bmN0aW9uKGUpe3JldHVybiBuLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsdGhpcy5yZWFkRGF0YShlKSl9LHJlYWREYXRhOmZ1bmN0aW9uKCl7fSxsYXN0SW5kZXhPZlNpZ25hdHVyZTpmdW5jdGlvbigpe30scmVhZEFuZENoZWNrU2lnbmF0dXJlOmZ1bmN0aW9uKCl7fSxyZWFkRGF0ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMucmVhZEludCg0KTtyZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoMTk4MCsoZT4+MjUmMTI3KSwoZT4+MjEmMTUpLTEsZT4+MTYmMzEsZT4+MTEmMzEsZT4+NSY2MywoMzEmZSk8PDEpKX19LHQuZXhwb3J0cz1pfSx7XCIuLi91dGlsc1wiOjMyfV0sMTk6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9VaW50OEFycmF5UmVhZGVyXCIpO2Z1bmN0aW9uIGkoZSl7bi5jYWxsKHRoaXMsZSl9ZShcIi4uL3V0aWxzXCIpLmluaGVyaXRzKGksbiksaS5wcm90b3R5cGUucmVhZERhdGE9ZnVuY3Rpb24oZSl7dGhpcy5jaGVja09mZnNldChlKTt2YXIgdD10aGlzLmRhdGEuc2xpY2UodGhpcy56ZXJvK3RoaXMuaW5kZXgsdGhpcy56ZXJvK3RoaXMuaW5kZXgrZSk7cmV0dXJuIHRoaXMuaW5kZXgrPWUsdH0sdC5leHBvcnRzPWl9LHtcIi4uL3V0aWxzXCI6MzIsXCIuL1VpbnQ4QXJyYXlSZWFkZXJcIjoyMX1dLDIwOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vRGF0YVJlYWRlclwiKTtmdW5jdGlvbiBpKGUpe24uY2FsbCh0aGlzLGUpfWUoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhpLG4pLGkucHJvdG90eXBlLmJ5dGVBdD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5kYXRhLmNoYXJDb2RlQXQodGhpcy56ZXJvK2UpfSxpLnByb3RvdHlwZS5sYXN0SW5kZXhPZlNpZ25hdHVyZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5kYXRhLmxhc3RJbmRleE9mKGUpLXRoaXMuemVyb30saS5wcm90b3R5cGUucmVhZEFuZENoZWNrU2lnbmF0dXJlPWZ1bmN0aW9uKGUpe3JldHVybiBlPT09dGhpcy5yZWFkRGF0YSg0KX0saS5wcm90b3R5cGUucmVhZERhdGE9ZnVuY3Rpb24oZSl7dGhpcy5jaGVja09mZnNldChlKTt2YXIgdD10aGlzLmRhdGEuc2xpY2UodGhpcy56ZXJvK3RoaXMuaW5kZXgsdGhpcy56ZXJvK3RoaXMuaW5kZXgrZSk7cmV0dXJuIHRoaXMuaW5kZXgrPWUsdH0sdC5leHBvcnRzPWl9LHtcIi4uL3V0aWxzXCI6MzIsXCIuL0RhdGFSZWFkZXJcIjoxOH1dLDIxOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vQXJyYXlSZWFkZXJcIik7ZnVuY3Rpb24gaShlKXtuLmNhbGwodGhpcyxlKX1lKFwiLi4vdXRpbHNcIikuaW5oZXJpdHMoaSxuKSxpLnByb3RvdHlwZS5yZWFkRGF0YT1mdW5jdGlvbihlKXtpZih0aGlzLmNoZWNrT2Zmc2V0KGUpLDA9PT1lKXJldHVybiBuZXcgVWludDhBcnJheSgwKTt2YXIgdD10aGlzLmRhdGEuc3ViYXJyYXkodGhpcy56ZXJvK3RoaXMuaW5kZXgsdGhpcy56ZXJvK3RoaXMuaW5kZXgrZSk7cmV0dXJuIHRoaXMuaW5kZXgrPWUsdH0sdC5leHBvcnRzPWl9LHtcIi4uL3V0aWxzXCI6MzIsXCIuL0FycmF5UmVhZGVyXCI6MTd9XSwyMjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuLi91dGlsc1wiKSxpPWUoXCIuLi9zdXBwb3J0XCIpLHM9ZShcIi4vQXJyYXlSZWFkZXJcIiksYT1lKFwiLi9TdHJpbmdSZWFkZXJcIiksbz1lKFwiLi9Ob2RlQnVmZmVyUmVhZGVyXCIpLGg9ZShcIi4vVWludDhBcnJheVJlYWRlclwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9bi5nZXRUeXBlT2YoZSk7cmV0dXJuIG4uY2hlY2tTdXBwb3J0KHQpLFwic3RyaW5nXCIhPT10fHxpLnVpbnQ4YXJyYXk/XCJub2RlYnVmZmVyXCI9PT10P25ldyBvKGUpOmkudWludDhhcnJheT9uZXcgaChuLnRyYW5zZm9ybVRvKFwidWludDhhcnJheVwiLGUpKTpuZXcgcyhuLnRyYW5zZm9ybVRvKFwiYXJyYXlcIixlKSk6bmV3IGEoZSl9fSx7XCIuLi9zdXBwb3J0XCI6MzAsXCIuLi91dGlsc1wiOjMyLFwiLi9BcnJheVJlYWRlclwiOjE3LFwiLi9Ob2RlQnVmZmVyUmVhZGVyXCI6MTksXCIuL1N0cmluZ1JlYWRlclwiOjIwLFwiLi9VaW50OEFycmF5UmVhZGVyXCI6MjF9XSwyMzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3IuTE9DQUxfRklMRV9IRUFERVI9XCJQS1x1MDAwM1x1MDAwNFwiLHIuQ0VOVFJBTF9GSUxFX0hFQURFUj1cIlBLXHUwMDAxXHUwMDAyXCIsci5DRU5UUkFMX0RJUkVDVE9SWV9FTkQ9XCJQS1x1MDAwNVx1MDAwNlwiLHIuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUj1cIlBLXHUwMDA2XHUwMDA3XCIsci5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQ9XCJQS1x1MDAwNlx1MDAwNlwiLHIuREFUQV9ERVNDUklQVE9SPVwiUEtcdTAwMDdcXGJcIn0se31dLDI0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vR2VuZXJpY1dvcmtlclwiKSxpPWUoXCIuLi91dGlsc1wiKTtmdW5jdGlvbiBzKGUpe24uY2FsbCh0aGlzLFwiQ29udmVydFdvcmtlciB0byBcIitlKSx0aGlzLmRlc3RUeXBlPWV9aS5pbmhlcml0cyhzLG4pLHMucHJvdG90eXBlLnByb2Nlc3NDaHVuaz1mdW5jdGlvbihlKXt0aGlzLnB1c2goe2RhdGE6aS50cmFuc2Zvcm1Ubyh0aGlzLmRlc3RUeXBlLGUuZGF0YSksbWV0YTplLm1ldGF9KX0sdC5leHBvcnRzPXN9LHtcIi4uL3V0aWxzXCI6MzIsXCIuL0dlbmVyaWNXb3JrZXJcIjoyOH1dLDI1OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vR2VuZXJpY1dvcmtlclwiKSxpPWUoXCIuLi9jcmMzMlwiKTtmdW5jdGlvbiBzKCl7bi5jYWxsKHRoaXMsXCJDcmMzMlByb2JlXCIpLHRoaXMud2l0aFN0cmVhbUluZm8oXCJjcmMzMlwiLDApfWUoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhzLG4pLHMucHJvdG90eXBlLnByb2Nlc3NDaHVuaz1mdW5jdGlvbihlKXt0aGlzLnN0cmVhbUluZm8uY3JjMzI9aShlLmRhdGEsdGhpcy5zdHJlYW1JbmZvLmNyYzMyfHwwKSx0aGlzLnB1c2goZSl9LHQuZXhwb3J0cz1zfSx7XCIuLi9jcmMzMlwiOjQsXCIuLi91dGlsc1wiOjMyLFwiLi9HZW5lcmljV29ya2VyXCI6Mjh9XSwyNjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuLi91dGlsc1wiKSxpPWUoXCIuL0dlbmVyaWNXb3JrZXJcIik7ZnVuY3Rpb24gcyhlKXtpLmNhbGwodGhpcyxcIkRhdGFMZW5ndGhQcm9iZSBmb3IgXCIrZSksdGhpcy5wcm9wTmFtZT1lLHRoaXMud2l0aFN0cmVhbUluZm8oZSwwKX1uLmluaGVyaXRzKHMsaSkscy5wcm90b3R5cGUucHJvY2Vzc0NodW5rPWZ1bmN0aW9uKGUpe2lmKGUpe3ZhciB0PXRoaXMuc3RyZWFtSW5mb1t0aGlzLnByb3BOYW1lXXx8MDt0aGlzLnN0cmVhbUluZm9bdGhpcy5wcm9wTmFtZV09dCtlLmRhdGEubGVuZ3RofWkucHJvdG90eXBlLnByb2Nlc3NDaHVuay5jYWxsKHRoaXMsZSl9LHQuZXhwb3J0cz1zfSx7XCIuLi91dGlsc1wiOjMyLFwiLi9HZW5lcmljV29ya2VyXCI6Mjh9XSwyNzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuLi91dGlsc1wiKSxpPWUoXCIuL0dlbmVyaWNXb3JrZXJcIik7ZnVuY3Rpb24gcyhlKXtpLmNhbGwodGhpcyxcIkRhdGFXb3JrZXJcIik7dmFyIHQ9dGhpczt0aGlzLmRhdGFJc1JlYWR5PSExLHRoaXMuaW5kZXg9MCx0aGlzLm1heD0wLHRoaXMuZGF0YT1udWxsLHRoaXMudHlwZT1cIlwiLHRoaXMuX3RpY2tTY2hlZHVsZWQ9ITEsZS50aGVuKGZ1bmN0aW9uKGUpe3QuZGF0YUlzUmVhZHk9ITAsdC5kYXRhPWUsdC5tYXg9ZSYmZS5sZW5ndGh8fDAsdC50eXBlPW4uZ2V0VHlwZU9mKGUpLHQuaXNQYXVzZWR8fHQuX3RpY2tBbmRSZXBlYXQoKX0sZnVuY3Rpb24oZSl7dC5lcnJvcihlKX0pfW4uaW5oZXJpdHMocyxpKSxzLnByb3RvdHlwZS5jbGVhblVwPWZ1bmN0aW9uKCl7aS5wcm90b3R5cGUuY2xlYW5VcC5jYWxsKHRoaXMpLHRoaXMuZGF0YT1udWxsfSxzLnByb3RvdHlwZS5yZXN1bWU9ZnVuY3Rpb24oKXtyZXR1cm4hIWkucHJvdG90eXBlLnJlc3VtZS5jYWxsKHRoaXMpJiYoIXRoaXMuX3RpY2tTY2hlZHVsZWQmJnRoaXMuZGF0YUlzUmVhZHkmJih0aGlzLl90aWNrU2NoZWR1bGVkPSEwLG4uZGVsYXkodGhpcy5fdGlja0FuZFJlcGVhdCxbXSx0aGlzKSksITApfSxzLnByb3RvdHlwZS5fdGlja0FuZFJlcGVhdD1mdW5jdGlvbigpe3RoaXMuX3RpY2tTY2hlZHVsZWQ9ITEsdGhpcy5pc1BhdXNlZHx8dGhpcy5pc0ZpbmlzaGVkfHwodGhpcy5fdGljaygpLHRoaXMuaXNGaW5pc2hlZHx8KG4uZGVsYXkodGhpcy5fdGlja0FuZFJlcGVhdCxbXSx0aGlzKSx0aGlzLl90aWNrU2NoZWR1bGVkPSEwKSl9LHMucHJvdG90eXBlLl90aWNrPWZ1bmN0aW9uKCl7aWYodGhpcy5pc1BhdXNlZHx8dGhpcy5pc0ZpbmlzaGVkKXJldHVybiExO3ZhciBlPW51bGwsdD1NYXRoLm1pbih0aGlzLm1heCx0aGlzLmluZGV4KzE2Mzg0KTtpZih0aGlzLmluZGV4Pj10aGlzLm1heClyZXR1cm4gdGhpcy5lbmQoKTtzd2l0Y2godGhpcy50eXBlKXtjYXNlXCJzdHJpbmdcIjplPXRoaXMuZGF0YS5zdWJzdHJpbmcodGhpcy5pbmRleCx0KTticmVhaztjYXNlXCJ1aW50OGFycmF5XCI6ZT10aGlzLmRhdGEuc3ViYXJyYXkodGhpcy5pbmRleCx0KTticmVhaztjYXNlXCJhcnJheVwiOmNhc2VcIm5vZGVidWZmZXJcIjplPXRoaXMuZGF0YS5zbGljZSh0aGlzLmluZGV4LHQpfXJldHVybiB0aGlzLmluZGV4PXQsdGhpcy5wdXNoKHtkYXRhOmUsbWV0YTp7cGVyY2VudDp0aGlzLm1heD90aGlzLmluZGV4L3RoaXMubWF4KjEwMDowfX0pfSx0LmV4cG9ydHM9c30se1wiLi4vdXRpbHNcIjozMixcIi4vR2VuZXJpY1dvcmtlclwiOjI4fV0sMjg6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3RoaXMubmFtZT1lfHxcImRlZmF1bHRcIix0aGlzLnN0cmVhbUluZm89e30sdGhpcy5nZW5lcmF0ZWRFcnJvcj1udWxsLHRoaXMuZXh0cmFTdHJlYW1JbmZvPXt9LHRoaXMuaXNQYXVzZWQ9ITAsdGhpcy5pc0ZpbmlzaGVkPSExLHRoaXMuaXNMb2NrZWQ9ITEsdGhpcy5fbGlzdGVuZXJzPXtkYXRhOltdLGVuZDpbXSxlcnJvcjpbXX0sdGhpcy5wcmV2aW91cz1udWxsfW4ucHJvdG90eXBlPXtwdXNoOmZ1bmN0aW9uKGUpe3RoaXMuZW1pdChcImRhdGFcIixlKX0sZW5kOmZ1bmN0aW9uKCl7aWYodGhpcy5pc0ZpbmlzaGVkKXJldHVybiExO3RoaXMuZmx1c2goKTt0cnl7dGhpcy5lbWl0KFwiZW5kXCIpLHRoaXMuY2xlYW5VcCgpLHRoaXMuaXNGaW5pc2hlZD0hMH1jYXRjaChlKXt0aGlzLmVtaXQoXCJlcnJvclwiLGUpfXJldHVybiEwfSxlcnJvcjpmdW5jdGlvbihlKXtyZXR1cm4hdGhpcy5pc0ZpbmlzaGVkJiYodGhpcy5pc1BhdXNlZD90aGlzLmdlbmVyYXRlZEVycm9yPWU6KHRoaXMuaXNGaW5pc2hlZD0hMCx0aGlzLmVtaXQoXCJlcnJvclwiLGUpLHRoaXMucHJldmlvdXMmJnRoaXMucHJldmlvdXMuZXJyb3IoZSksdGhpcy5jbGVhblVwKCkpLCEwKX0sb246ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5fbGlzdGVuZXJzW2VdLnB1c2godCksdGhpc30sY2xlYW5VcDpmdW5jdGlvbigpe3RoaXMuc3RyZWFtSW5mbz10aGlzLmdlbmVyYXRlZEVycm9yPXRoaXMuZXh0cmFTdHJlYW1JbmZvPW51bGwsdGhpcy5fbGlzdGVuZXJzPVtdfSxlbWl0OmZ1bmN0aW9uKGUsdCl7aWYodGhpcy5fbGlzdGVuZXJzW2VdKWZvcih2YXIgcj0wO3I8dGhpcy5fbGlzdGVuZXJzW2VdLmxlbmd0aDtyKyspdGhpcy5fbGlzdGVuZXJzW2VdW3JdLmNhbGwodGhpcyx0KX0scGlwZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZWdpc3RlclByZXZpb3VzKHRoaXMpfSxyZWdpc3RlclByZXZpb3VzOmZ1bmN0aW9uKGUpe2lmKHRoaXMuaXNMb2NrZWQpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0cmVhbSAnXCIrdGhpcytcIicgaGFzIGFscmVhZHkgYmVlbiB1c2VkLlwiKTt0aGlzLnN0cmVhbUluZm89ZS5zdHJlYW1JbmZvLHRoaXMubWVyZ2VTdHJlYW1JbmZvKCksdGhpcy5wcmV2aW91cz1lO3ZhciB0PXRoaXM7cmV0dXJuIGUub24oXCJkYXRhXCIsZnVuY3Rpb24oZSl7dC5wcm9jZXNzQ2h1bmsoZSl9KSxlLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXt0LmVuZCgpfSksZS5vbihcImVycm9yXCIsZnVuY3Rpb24oZSl7dC5lcnJvcihlKX0pLHRoaXN9LHBhdXNlOmZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMuaXNQYXVzZWQmJiF0aGlzLmlzRmluaXNoZWQmJih0aGlzLmlzUGF1c2VkPSEwLHRoaXMucHJldmlvdXMmJnRoaXMucHJldmlvdXMucGF1c2UoKSwhMCl9LHJlc3VtZTpmdW5jdGlvbigpe2lmKCF0aGlzLmlzUGF1c2VkfHx0aGlzLmlzRmluaXNoZWQpcmV0dXJuITE7dmFyIGU9dGhpcy5pc1BhdXNlZD0hMTtyZXR1cm4gdGhpcy5nZW5lcmF0ZWRFcnJvciYmKHRoaXMuZXJyb3IodGhpcy5nZW5lcmF0ZWRFcnJvciksZT0hMCksdGhpcy5wcmV2aW91cyYmdGhpcy5wcmV2aW91cy5yZXN1bWUoKSwhZX0sZmx1c2g6ZnVuY3Rpb24oKXt9LHByb2Nlc3NDaHVuazpmdW5jdGlvbihlKXt0aGlzLnB1c2goZSl9LHdpdGhTdHJlYW1JbmZvOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZXh0cmFTdHJlYW1JbmZvW2VdPXQsdGhpcy5tZXJnZVN0cmVhbUluZm8oKSx0aGlzfSxtZXJnZVN0cmVhbUluZm86ZnVuY3Rpb24oKXtmb3IodmFyIGUgaW4gdGhpcy5leHRyYVN0cmVhbUluZm8pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuZXh0cmFTdHJlYW1JbmZvLGUpJiYodGhpcy5zdHJlYW1JbmZvW2VdPXRoaXMuZXh0cmFTdHJlYW1JbmZvW2VdKX0sbG9jazpmdW5jdGlvbigpe2lmKHRoaXMuaXNMb2NrZWQpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0cmVhbSAnXCIrdGhpcytcIicgaGFzIGFscmVhZHkgYmVlbiB1c2VkLlwiKTt0aGlzLmlzTG9ja2VkPSEwLHRoaXMucHJldmlvdXMmJnRoaXMucHJldmlvdXMubG9jaygpfSx0b1N0cmluZzpmdW5jdGlvbigpe3ZhciBlPVwiV29ya2VyIFwiK3RoaXMubmFtZTtyZXR1cm4gdGhpcy5wcmV2aW91cz90aGlzLnByZXZpb3VzK1wiIC0+IFwiK2U6ZX19LHQuZXhwb3J0cz1ufSx7fV0sMjk6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaD1lKFwiLi4vdXRpbHNcIiksaT1lKFwiLi9Db252ZXJ0V29ya2VyXCIpLHM9ZShcIi4vR2VuZXJpY1dvcmtlclwiKSx1PWUoXCIuLi9iYXNlNjRcIiksbj1lKFwiLi4vc3VwcG9ydFwiKSxhPWUoXCIuLi9leHRlcm5hbFwiKSxvPW51bGw7aWYobi5ub2Rlc3RyZWFtKXRyeXtvPWUoXCIuLi9ub2RlanMvTm9kZWpzU3RyZWFtT3V0cHV0QWRhcHRlclwiKX1jYXRjaChlKXt9ZnVuY3Rpb24gbChlLG8pe3JldHVybiBuZXcgYS5Qcm9taXNlKGZ1bmN0aW9uKHQscil7dmFyIG49W10saT1lLl9pbnRlcm5hbFR5cGUscz1lLl9vdXRwdXRUeXBlLGE9ZS5fbWltZVR5cGU7ZS5vbihcImRhdGFcIixmdW5jdGlvbihlLHQpe24ucHVzaChlKSxvJiZvKHQpfSkub24oXCJlcnJvclwiLGZ1bmN0aW9uKGUpe249W10scihlKX0pLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXt0cnl7dmFyIGU9ZnVuY3Rpb24oZSx0LHIpe3N3aXRjaChlKXtjYXNlXCJibG9iXCI6cmV0dXJuIGgubmV3QmxvYihoLnRyYW5zZm9ybVRvKFwiYXJyYXlidWZmZXJcIix0KSxyKTtjYXNlXCJiYXNlNjRcIjpyZXR1cm4gdS5lbmNvZGUodCk7ZGVmYXVsdDpyZXR1cm4gaC50cmFuc2Zvcm1UbyhlLHQpfX0ocyxmdW5jdGlvbihlLHQpe3ZhciByLG49MCxpPW51bGwscz0wO2ZvcihyPTA7cjx0Lmxlbmd0aDtyKyspcys9dFtyXS5sZW5ndGg7c3dpdGNoKGUpe2Nhc2VcInN0cmluZ1wiOnJldHVybiB0LmpvaW4oXCJcIik7Y2FzZVwiYXJyYXlcIjpyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSx0KTtjYXNlXCJ1aW50OGFycmF5XCI6Zm9yKGk9bmV3IFVpbnQ4QXJyYXkocykscj0wO3I8dC5sZW5ndGg7cisrKWkuc2V0KHRbcl0sbiksbis9dFtyXS5sZW5ndGg7cmV0dXJuIGk7Y2FzZVwibm9kZWJ1ZmZlclwiOnJldHVybiBCdWZmZXIuY29uY2F0KHQpO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiY29uY2F0IDogdW5zdXBwb3J0ZWQgdHlwZSAnXCIrZStcIidcIil9fShpLG4pLGEpO3QoZSl9Y2F0Y2goZSl7cihlKX1uPVtdfSkucmVzdW1lKCl9KX1mdW5jdGlvbiBmKGUsdCxyKXt2YXIgbj10O3N3aXRjaCh0KXtjYXNlXCJibG9iXCI6Y2FzZVwiYXJyYXlidWZmZXJcIjpuPVwidWludDhhcnJheVwiO2JyZWFrO2Nhc2VcImJhc2U2NFwiOm49XCJzdHJpbmdcIn10cnl7dGhpcy5faW50ZXJuYWxUeXBlPW4sdGhpcy5fb3V0cHV0VHlwZT10LHRoaXMuX21pbWVUeXBlPXIsaC5jaGVja1N1cHBvcnQobiksdGhpcy5fd29ya2VyPWUucGlwZShuZXcgaShuKSksZS5sb2NrKCl9Y2F0Y2goZSl7dGhpcy5fd29ya2VyPW5ldyBzKFwiZXJyb3JcIiksdGhpcy5fd29ya2VyLmVycm9yKGUpfX1mLnByb3RvdHlwZT17YWNjdW11bGF0ZTpmdW5jdGlvbihlKXtyZXR1cm4gbCh0aGlzLGUpfSxvbjpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7cmV0dXJuXCJkYXRhXCI9PT1lP3RoaXMuX3dvcmtlci5vbihlLGZ1bmN0aW9uKGUpe3QuY2FsbChyLGUuZGF0YSxlLm1ldGEpfSk6dGhpcy5fd29ya2VyLm9uKGUsZnVuY3Rpb24oKXtoLmRlbGF5KHQsYXJndW1lbnRzLHIpfSksdGhpc30scmVzdW1lOmZ1bmN0aW9uKCl7cmV0dXJuIGguZGVsYXkodGhpcy5fd29ya2VyLnJlc3VtZSxbXSx0aGlzLl93b3JrZXIpLHRoaXN9LHBhdXNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3dvcmtlci5wYXVzZSgpLHRoaXN9LHRvTm9kZWpzU3RyZWFtOmZ1bmN0aW9uKGUpe2lmKGguY2hlY2tTdXBwb3J0KFwibm9kZXN0cmVhbVwiKSxcIm5vZGVidWZmZXJcIiE9PXRoaXMuX291dHB1dFR5cGUpdGhyb3cgbmV3IEVycm9yKHRoaXMuX291dHB1dFR5cGUrXCIgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIG1ldGhvZFwiKTtyZXR1cm4gbmV3IG8odGhpcyx7b2JqZWN0TW9kZTpcIm5vZGVidWZmZXJcIiE9PXRoaXMuX291dHB1dFR5cGV9LGUpfX0sdC5leHBvcnRzPWZ9LHtcIi4uL2Jhc2U2NFwiOjEsXCIuLi9leHRlcm5hbFwiOjYsXCIuLi9ub2RlanMvTm9kZWpzU3RyZWFtT3V0cHV0QWRhcHRlclwiOjEzLFwiLi4vc3VwcG9ydFwiOjMwLFwiLi4vdXRpbHNcIjozMixcIi4vQ29udmVydFdvcmtlclwiOjI0LFwiLi9HZW5lcmljV29ya2VyXCI6Mjh9XSwzMDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2lmKHIuYmFzZTY0PSEwLHIuYXJyYXk9ITAsci5zdHJpbmc9ITAsci5hcnJheWJ1ZmZlcj1cInVuZGVmaW5lZFwiIT10eXBlb2YgQXJyYXlCdWZmZXImJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5LHIubm9kZWJ1ZmZlcj1cInVuZGVmaW5lZFwiIT10eXBlb2YgQnVmZmVyLHIudWludDhhcnJheT1cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhBcnJheSxcInVuZGVmaW5lZFwiPT10eXBlb2YgQXJyYXlCdWZmZXIpci5ibG9iPSExO2Vsc2V7dmFyIG49bmV3IEFycmF5QnVmZmVyKDApO3RyeXtyLmJsb2I9MD09PW5ldyBCbG9iKFtuXSx7dHlwZTpcImFwcGxpY2F0aW9uL3ppcFwifSkuc2l6ZX1jYXRjaChlKXt0cnl7dmFyIGk9bmV3KHNlbGYuQmxvYkJ1aWxkZXJ8fHNlbGYuV2ViS2l0QmxvYkJ1aWxkZXJ8fHNlbGYuTW96QmxvYkJ1aWxkZXJ8fHNlbGYuTVNCbG9iQnVpbGRlcik7aS5hcHBlbmQobiksci5ibG9iPTA9PT1pLmdldEJsb2IoXCJhcHBsaWNhdGlvbi96aXBcIikuc2l6ZX1jYXRjaChlKXtyLmJsb2I9ITF9fX10cnl7ci5ub2Rlc3RyZWFtPSEhZShcInJlYWRhYmxlLXN0cmVhbVwiKS5SZWFkYWJsZX1jYXRjaChlKXtyLm5vZGVzdHJlYW09ITF9fSx7XCJyZWFkYWJsZS1zdHJlYW1cIjoxNn1dLDMxOltmdW5jdGlvbihlLHQscyl7XCJ1c2Ugc3RyaWN0XCI7Zm9yKHZhciBvPWUoXCIuL3V0aWxzXCIpLGg9ZShcIi4vc3VwcG9ydFwiKSxyPWUoXCIuL25vZGVqc1V0aWxzXCIpLG49ZShcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIiksdT1uZXcgQXJyYXkoMjU2KSxpPTA7aTwyNTY7aSsrKXVbaV09MjUyPD1pPzY6MjQ4PD1pPzU6MjQwPD1pPzQ6MjI0PD1pPzM6MTkyPD1pPzI6MTt1WzI1NF09dVsyNTRdPTE7ZnVuY3Rpb24gYSgpe24uY2FsbCh0aGlzLFwidXRmLTggZGVjb2RlXCIpLHRoaXMubGVmdE92ZXI9bnVsbH1mdW5jdGlvbiBsKCl7bi5jYWxsKHRoaXMsXCJ1dGYtOCBlbmNvZGVcIil9cy51dGY4ZW5jb2RlPWZ1bmN0aW9uKGUpe3JldHVybiBoLm5vZGVidWZmZXI/ci5uZXdCdWZmZXJGcm9tKGUsXCJ1dGYtOFwiKTpmdW5jdGlvbihlKXt2YXIgdCxyLG4saSxzLGE9ZS5sZW5ndGgsbz0wO2ZvcihpPTA7aTxhO2krKyk1NTI5Nj09KDY0NTEyJihyPWUuY2hhckNvZGVBdChpKSkpJiZpKzE8YSYmNTYzMjA9PSg2NDUxMiYobj1lLmNoYXJDb2RlQXQoaSsxKSkpJiYocj02NTUzNisoci01NTI5Njw8MTApKyhuLTU2MzIwKSxpKyspLG8rPXI8MTI4PzE6cjwyMDQ4PzI6cjw2NTUzNj8zOjQ7Zm9yKHQ9aC51aW50OGFycmF5P25ldyBVaW50OEFycmF5KG8pOm5ldyBBcnJheShvKSxpPXM9MDtzPG87aSsrKTU1Mjk2PT0oNjQ1MTImKHI9ZS5jaGFyQ29kZUF0KGkpKSkmJmkrMTxhJiY1NjMyMD09KDY0NTEyJihuPWUuY2hhckNvZGVBdChpKzEpKSkmJihyPTY1NTM2KyhyLTU1Mjk2PDwxMCkrKG4tNTYzMjApLGkrKykscjwxMjg/dFtzKytdPXI6KHI8MjA0OD90W3MrK109MTkyfHI+Pj42OihyPDY1NTM2P3RbcysrXT0yMjR8cj4+PjEyOih0W3MrK109MjQwfHI+Pj4xOCx0W3MrK109MTI4fHI+Pj4xMiY2MyksdFtzKytdPTEyOHxyPj4+NiY2MyksdFtzKytdPTEyOHw2MyZyKTtyZXR1cm4gdH0oZSl9LHMudXRmOGRlY29kZT1mdW5jdGlvbihlKXtyZXR1cm4gaC5ub2RlYnVmZmVyP28udHJhbnNmb3JtVG8oXCJub2RlYnVmZmVyXCIsZSkudG9TdHJpbmcoXCJ1dGYtOFwiKTpmdW5jdGlvbihlKXt2YXIgdCxyLG4saSxzPWUubGVuZ3RoLGE9bmV3IEFycmF5KDIqcyk7Zm9yKHQ9cj0wO3Q8czspaWYoKG49ZVt0KytdKTwxMjgpYVtyKytdPW47ZWxzZSBpZig0PChpPXVbbl0pKWFbcisrXT02NTUzMyx0Kz1pLTE7ZWxzZXtmb3IobiY9Mj09PWk/MzE6Mz09PWk/MTU6NzsxPGkmJnQ8czspbj1uPDw2fDYzJmVbdCsrXSxpLS07MTxpP2FbcisrXT02NTUzMzpuPDY1NTM2P2FbcisrXT1uOihuLT02NTUzNixhW3IrK109NTUyOTZ8bj4+MTAmMTAyMyxhW3IrK109NTYzMjB8MTAyMyZuKX1yZXR1cm4gYS5sZW5ndGghPT1yJiYoYS5zdWJhcnJheT9hPWEuc3ViYXJyYXkoMCxyKTphLmxlbmd0aD1yKSxvLmFwcGx5RnJvbUNoYXJDb2RlKGEpfShlPW8udHJhbnNmb3JtVG8oaC51aW50OGFycmF5P1widWludDhhcnJheVwiOlwiYXJyYXlcIixlKSl9LG8uaW5oZXJpdHMoYSxuKSxhLnByb3RvdHlwZS5wcm9jZXNzQ2h1bms9ZnVuY3Rpb24oZSl7dmFyIHQ9by50cmFuc2Zvcm1UbyhoLnVpbnQ4YXJyYXk/XCJ1aW50OGFycmF5XCI6XCJhcnJheVwiLGUuZGF0YSk7aWYodGhpcy5sZWZ0T3ZlciYmdGhpcy5sZWZ0T3Zlci5sZW5ndGgpe2lmKGgudWludDhhcnJheSl7dmFyIHI9dDsodD1uZXcgVWludDhBcnJheShyLmxlbmd0aCt0aGlzLmxlZnRPdmVyLmxlbmd0aCkpLnNldCh0aGlzLmxlZnRPdmVyLDApLHQuc2V0KHIsdGhpcy5sZWZ0T3Zlci5sZW5ndGgpfWVsc2UgdD10aGlzLmxlZnRPdmVyLmNvbmNhdCh0KTt0aGlzLmxlZnRPdmVyPW51bGx9dmFyIG49ZnVuY3Rpb24oZSx0KXt2YXIgcjtmb3IoKHQ9dHx8ZS5sZW5ndGgpPmUubGVuZ3RoJiYodD1lLmxlbmd0aCkscj10LTE7MDw9ciYmMTI4PT0oMTkyJmVbcl0pOylyLS07cmV0dXJuIHI8MD90OjA9PT1yP3Q6cit1W2Vbcl1dPnQ/cjp0fSh0KSxpPXQ7biE9PXQubGVuZ3RoJiYoaC51aW50OGFycmF5PyhpPXQuc3ViYXJyYXkoMCxuKSx0aGlzLmxlZnRPdmVyPXQuc3ViYXJyYXkobix0Lmxlbmd0aCkpOihpPXQuc2xpY2UoMCxuKSx0aGlzLmxlZnRPdmVyPXQuc2xpY2Uobix0Lmxlbmd0aCkpKSx0aGlzLnB1c2goe2RhdGE6cy51dGY4ZGVjb2RlKGkpLG1ldGE6ZS5tZXRhfSl9LGEucHJvdG90eXBlLmZsdXNoPWZ1bmN0aW9uKCl7dGhpcy5sZWZ0T3ZlciYmdGhpcy5sZWZ0T3Zlci5sZW5ndGgmJih0aGlzLnB1c2goe2RhdGE6cy51dGY4ZGVjb2RlKHRoaXMubGVmdE92ZXIpLG1ldGE6e319KSx0aGlzLmxlZnRPdmVyPW51bGwpfSxzLlV0ZjhEZWNvZGVXb3JrZXI9YSxvLmluaGVyaXRzKGwsbiksbC5wcm90b3R5cGUucHJvY2Vzc0NodW5rPWZ1bmN0aW9uKGUpe3RoaXMucHVzaCh7ZGF0YTpzLnV0ZjhlbmNvZGUoZS5kYXRhKSxtZXRhOmUubWV0YX0pfSxzLlV0ZjhFbmNvZGVXb3JrZXI9bH0se1wiLi9ub2RlanNVdGlsc1wiOjE0LFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOjI4LFwiLi9zdXBwb3J0XCI6MzAsXCIuL3V0aWxzXCI6MzJ9XSwzMjpbZnVuY3Rpb24oZSx0LGEpe1widXNlIHN0cmljdFwiO3ZhciBvPWUoXCIuL3N1cHBvcnRcIiksaD1lKFwiLi9iYXNlNjRcIikscj1lKFwiLi9ub2RlanNVdGlsc1wiKSx1PWUoXCIuL2V4dGVybmFsXCIpO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGV9ZnVuY3Rpb24gbChlLHQpe2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7KytyKXRbcl09MjU1JmUuY2hhckNvZGVBdChyKTtyZXR1cm4gdH1lKFwic2V0aW1tZWRpYXRlXCIpLGEubmV3QmxvYj1mdW5jdGlvbih0LHIpe2EuY2hlY2tTdXBwb3J0KFwiYmxvYlwiKTt0cnl7cmV0dXJuIG5ldyBCbG9iKFt0XSx7dHlwZTpyfSl9Y2F0Y2goZSl7dHJ5e3ZhciBuPW5ldyhzZWxmLkJsb2JCdWlsZGVyfHxzZWxmLldlYktpdEJsb2JCdWlsZGVyfHxzZWxmLk1vekJsb2JCdWlsZGVyfHxzZWxmLk1TQmxvYkJ1aWxkZXIpO3JldHVybiBuLmFwcGVuZCh0KSxuLmdldEJsb2Iocil9Y2F0Y2goZSl7dGhyb3cgbmV3IEVycm9yKFwiQnVnIDogY2FuJ3QgY29uc3RydWN0IHRoZSBCbG9iLlwiKX19fTt2YXIgaT17c3RyaW5naWZ5QnlDaHVuazpmdW5jdGlvbihlLHQscil7dmFyIG49W10saT0wLHM9ZS5sZW5ndGg7aWYoczw9cilyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLGUpO2Zvcig7aTxzOylcImFycmF5XCI9PT10fHxcIm5vZGVidWZmZXJcIj09PXQ/bi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxlLnNsaWNlKGksTWF0aC5taW4oaStyLHMpKSkpOm4ucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsZS5zdWJhcnJheShpLE1hdGgubWluKGkrcixzKSkpKSxpKz1yO3JldHVybiBuLmpvaW4oXCJcIil9LHN0cmluZ2lmeUJ5Q2hhcjpmdW5jdGlvbihlKXtmb3IodmFyIHQ9XCJcIixyPTA7cjxlLmxlbmd0aDtyKyspdCs9U3RyaW5nLmZyb21DaGFyQ29kZShlW3JdKTtyZXR1cm4gdH0sYXBwbHlDYW5CZVVzZWQ6e3VpbnQ4YXJyYXk6ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIG8udWludDhhcnJheSYmMT09PVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxuZXcgVWludDhBcnJheSgxKSkubGVuZ3RofWNhdGNoKGUpe3JldHVybiExfX0oKSxub2RlYnVmZmVyOmZ1bmN0aW9uKCl7dHJ5e3JldHVybiBvLm5vZGVidWZmZXImJjE9PT1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsci5hbGxvY0J1ZmZlcigxKSkubGVuZ3RofWNhdGNoKGUpe3JldHVybiExfX0oKX19O2Z1bmN0aW9uIHMoZSl7dmFyIHQ9NjU1MzYscj1hLmdldFR5cGVPZihlKSxuPSEwO2lmKFwidWludDhhcnJheVwiPT09cj9uPWkuYXBwbHlDYW5CZVVzZWQudWludDhhcnJheTpcIm5vZGVidWZmZXJcIj09PXImJihuPWkuYXBwbHlDYW5CZVVzZWQubm9kZWJ1ZmZlciksbilmb3IoOzE8dDspdHJ5e3JldHVybiBpLnN0cmluZ2lmeUJ5Q2h1bmsoZSxyLHQpfWNhdGNoKGUpe3Q9TWF0aC5mbG9vcih0LzIpfXJldHVybiBpLnN0cmluZ2lmeUJ5Q2hhcihlKX1mdW5jdGlvbiBmKGUsdCl7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspdFtyXT1lW3JdO3JldHVybiB0fWEuYXBwbHlGcm9tQ2hhckNvZGU9czt2YXIgYz17fTtjLnN0cmluZz17c3RyaW5nOm4sYXJyYXk6ZnVuY3Rpb24oZSl7cmV0dXJuIGwoZSxuZXcgQXJyYXkoZS5sZW5ndGgpKX0sYXJyYXlidWZmZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGMuc3RyaW5nLnVpbnQ4YXJyYXkoZSkuYnVmZmVyfSx1aW50OGFycmF5OmZ1bmN0aW9uKGUpe3JldHVybiBsKGUsbmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgpKX0sbm9kZWJ1ZmZlcjpmdW5jdGlvbihlKXtyZXR1cm4gbChlLHIuYWxsb2NCdWZmZXIoZS5sZW5ndGgpKX19LGMuYXJyYXk9e3N0cmluZzpzLGFycmF5Om4sYXJyYXlidWZmZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBVaW50OEFycmF5KGUpLmJ1ZmZlcn0sdWludDhhcnJheTpmdW5jdGlvbihlKXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZSl9LG5vZGVidWZmZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIHIubmV3QnVmZmVyRnJvbShlKX19LGMuYXJyYXlidWZmZXI9e3N0cmluZzpmdW5jdGlvbihlKXtyZXR1cm4gcyhuZXcgVWludDhBcnJheShlKSl9LGFycmF5OmZ1bmN0aW9uKGUpe3JldHVybiBmKG5ldyBVaW50OEFycmF5KGUpLG5ldyBBcnJheShlLmJ5dGVMZW5ndGgpKX0sYXJyYXlidWZmZXI6bix1aW50OGFycmF5OmZ1bmN0aW9uKGUpe3JldHVybiBuZXcgVWludDhBcnJheShlKX0sbm9kZWJ1ZmZlcjpmdW5jdGlvbihlKXtyZXR1cm4gci5uZXdCdWZmZXJGcm9tKG5ldyBVaW50OEFycmF5KGUpKX19LGMudWludDhhcnJheT17c3RyaW5nOnMsYXJyYXk6ZnVuY3Rpb24oZSl7cmV0dXJuIGYoZSxuZXcgQXJyYXkoZS5sZW5ndGgpKX0sYXJyYXlidWZmZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuYnVmZmVyfSx1aW50OGFycmF5Om4sbm9kZWJ1ZmZlcjpmdW5jdGlvbihlKXtyZXR1cm4gci5uZXdCdWZmZXJGcm9tKGUpfX0sYy5ub2RlYnVmZmVyPXtzdHJpbmc6cyxhcnJheTpmdW5jdGlvbihlKXtyZXR1cm4gZihlLG5ldyBBcnJheShlLmxlbmd0aCkpfSxhcnJheWJ1ZmZlcjpmdW5jdGlvbihlKXtyZXR1cm4gYy5ub2RlYnVmZmVyLnVpbnQ4YXJyYXkoZSkuYnVmZmVyfSx1aW50OGFycmF5OmZ1bmN0aW9uKGUpe3JldHVybiBmKGUsbmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgpKX0sbm9kZWJ1ZmZlcjpufSxhLnRyYW5zZm9ybVRvPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxcIlwiLCFlKXJldHVybiB0O2EuY2hlY2tTdXBwb3J0KGUpO3ZhciByPWEuZ2V0VHlwZU9mKHQpO3JldHVybiBjW3JdW2VdKHQpfSxhLnJlc29sdmU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuc3BsaXQoXCIvXCIpLHI9W10sbj0wO248dC5sZW5ndGg7bisrKXt2YXIgaT10W25dO1wiLlwiPT09aXx8XCJcIj09PWkmJjAhPT1uJiZuIT09dC5sZW5ndGgtMXx8KFwiLi5cIj09PWk/ci5wb3AoKTpyLnB1c2goaSkpfXJldHVybiByLmpvaW4oXCIvXCIpfSxhLmdldFR5cGVPZj1mdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZT9cInN0cmluZ1wiOlwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKT9cImFycmF5XCI6by5ub2RlYnVmZmVyJiZyLmlzQnVmZmVyKGUpP1wibm9kZWJ1ZmZlclwiOm8udWludDhhcnJheSYmZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXk/XCJ1aW50OGFycmF5XCI6by5hcnJheWJ1ZmZlciYmZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyP1wiYXJyYXlidWZmZXJcIjp2b2lkIDB9LGEuY2hlY2tTdXBwb3J0PWZ1bmN0aW9uKGUpe2lmKCFvW2UudG9Mb3dlckNhc2UoKV0pdGhyb3cgbmV3IEVycm9yKGUrXCIgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIHBsYXRmb3JtXCIpfSxhLk1BWF9WQUxVRV8xNkJJVFM9NjU1MzUsYS5NQVhfVkFMVUVfMzJCSVRTPS0xLGEucHJldHR5PWZ1bmN0aW9uKGUpe3ZhciB0LHIsbj1cIlwiO2ZvcihyPTA7cjwoZXx8XCJcIikubGVuZ3RoO3IrKyluKz1cIlxcXFx4XCIrKCh0PWUuY2hhckNvZGVBdChyKSk8MTY/XCIwXCI6XCJcIikrdC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtyZXR1cm4gbn0sYS5kZWxheT1mdW5jdGlvbihlLHQscil7c2V0SW1tZWRpYXRlKGZ1bmN0aW9uKCl7ZS5hcHBseShyfHxudWxsLHR8fFtdKX0pfSxhLmluaGVyaXRzPWZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe31yLnByb3RvdHlwZT10LnByb3RvdHlwZSxlLnByb3RvdHlwZT1uZXcgcn0sYS5leHRlbmQ9ZnVuY3Rpb24oKXt2YXIgZSx0LHI9e307Zm9yKGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKWZvcih0IGluIGFyZ3VtZW50c1tlXSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXJndW1lbnRzW2VdLHQpJiZ2b2lkIDA9PT1yW3RdJiYoclt0XT1hcmd1bWVudHNbZV1bdF0pO3JldHVybiByfSxhLnByZXBhcmVDb250ZW50PWZ1bmN0aW9uKHIsZSxuLGkscyl7cmV0dXJuIHUuUHJvbWlzZS5yZXNvbHZlKGUpLnRoZW4oZnVuY3Rpb24obil7cmV0dXJuIG8uYmxvYiYmKG4gaW5zdGFuY2VvZiBCbG9ifHwtMSE9PVtcIltvYmplY3QgRmlsZV1cIixcIltvYmplY3QgQmxvYl1cIl0uaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobikpKSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEZpbGVSZWFkZXI/bmV3IHUuUHJvbWlzZShmdW5jdGlvbih0LHIpe3ZhciBlPW5ldyBGaWxlUmVhZGVyO2Uub25sb2FkPWZ1bmN0aW9uKGUpe3QoZS50YXJnZXQucmVzdWx0KX0sZS5vbmVycm9yPWZ1bmN0aW9uKGUpe3IoZS50YXJnZXQuZXJyb3IpfSxlLnJlYWRBc0FycmF5QnVmZmVyKG4pfSk6bn0pLnRoZW4oZnVuY3Rpb24oZSl7dmFyIHQ9YS5nZXRUeXBlT2YoZSk7cmV0dXJuIHQ/KFwiYXJyYXlidWZmZXJcIj09PXQ/ZT1hLnRyYW5zZm9ybVRvKFwidWludDhhcnJheVwiLGUpOlwic3RyaW5nXCI9PT10JiYocz9lPWguZGVjb2RlKGUpOm4mJiEwIT09aSYmKGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGwoZSxvLnVpbnQ4YXJyYXk/bmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgpOm5ldyBBcnJheShlLmxlbmd0aCkpfShlKSkpLGUpOnUuUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQ2FuJ3QgcmVhZCB0aGUgZGF0YSBvZiAnXCIrcitcIicuIElzIGl0IGluIGEgc3VwcG9ydGVkIEphdmFTY3JpcHQgdHlwZSAoU3RyaW5nLCBCbG9iLCBBcnJheUJ1ZmZlciwgZXRjKSA/XCIpKX0pfX0se1wiLi9iYXNlNjRcIjoxLFwiLi9leHRlcm5hbFwiOjYsXCIuL25vZGVqc1V0aWxzXCI6MTQsXCIuL3N1cHBvcnRcIjozMCxzZXRpbW1lZGlhdGU6NTR9XSwzMzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL3JlYWRlci9yZWFkZXJGb3JcIiksaT1lKFwiLi91dGlsc1wiKSxzPWUoXCIuL3NpZ25hdHVyZVwiKSxhPWUoXCIuL3ppcEVudHJ5XCIpLG89ZShcIi4vc3VwcG9ydFwiKTtmdW5jdGlvbiBoKGUpe3RoaXMuZmlsZXM9W10sdGhpcy5sb2FkT3B0aW9ucz1lfWgucHJvdG90eXBlPXtjaGVja1NpZ25hdHVyZTpmdW5jdGlvbihlKXtpZighdGhpcy5yZWFkZXIucmVhZEFuZENoZWNrU2lnbmF0dXJlKGUpKXt0aGlzLnJlYWRlci5pbmRleC09NDt2YXIgdD10aGlzLnJlYWRlci5yZWFkU3RyaW5nKDQpO3Rocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXAgb3IgYnVnOiB1bmV4cGVjdGVkIHNpZ25hdHVyZSAoXCIraS5wcmV0dHkodCkrXCIsIGV4cGVjdGVkIFwiK2kucHJldHR5KGUpK1wiKVwiKX19LGlzU2lnbmF0dXJlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5yZWFkZXIuaW5kZXg7dGhpcy5yZWFkZXIuc2V0SW5kZXgoZSk7dmFyIG49dGhpcy5yZWFkZXIucmVhZFN0cmluZyg0KT09PXQ7cmV0dXJuIHRoaXMucmVhZGVyLnNldEluZGV4KHIpLG59LHJlYWRCbG9ja0VuZE9mQ2VudHJhbDpmdW5jdGlvbigpe3RoaXMuZGlza051bWJlcj10aGlzLnJlYWRlci5yZWFkSW50KDIpLHRoaXMuZGlza1dpdGhDZW50cmFsRGlyU3RhcnQ9dGhpcy5yZWFkZXIucmVhZEludCgyKSx0aGlzLmNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzaz10aGlzLnJlYWRlci5yZWFkSW50KDIpLHRoaXMuY2VudHJhbERpclJlY29yZHM9dGhpcy5yZWFkZXIucmVhZEludCgyKSx0aGlzLmNlbnRyYWxEaXJTaXplPXRoaXMucmVhZGVyLnJlYWRJbnQoNCksdGhpcy5jZW50cmFsRGlyT2Zmc2V0PXRoaXMucmVhZGVyLnJlYWRJbnQoNCksdGhpcy56aXBDb21tZW50TGVuZ3RoPXRoaXMucmVhZGVyLnJlYWRJbnQoMik7dmFyIGU9dGhpcy5yZWFkZXIucmVhZERhdGEodGhpcy56aXBDb21tZW50TGVuZ3RoKSx0PW8udWludDhhcnJheT9cInVpbnQ4YXJyYXlcIjpcImFycmF5XCIscj1pLnRyYW5zZm9ybVRvKHQsZSk7dGhpcy56aXBDb21tZW50PXRoaXMubG9hZE9wdGlvbnMuZGVjb2RlRmlsZU5hbWUocil9LHJlYWRCbG9ja1ppcDY0RW5kT2ZDZW50cmFsOmZ1bmN0aW9uKCl7dGhpcy56aXA2NEVuZE9mQ2VudHJhbFNpemU9dGhpcy5yZWFkZXIucmVhZEludCg4KSx0aGlzLnJlYWRlci5za2lwKDQpLHRoaXMuZGlza051bWJlcj10aGlzLnJlYWRlci5yZWFkSW50KDQpLHRoaXMuZGlza1dpdGhDZW50cmFsRGlyU3RhcnQ9dGhpcy5yZWFkZXIucmVhZEludCg0KSx0aGlzLmNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzaz10aGlzLnJlYWRlci5yZWFkSW50KDgpLHRoaXMuY2VudHJhbERpclJlY29yZHM9dGhpcy5yZWFkZXIucmVhZEludCg4KSx0aGlzLmNlbnRyYWxEaXJTaXplPXRoaXMucmVhZGVyLnJlYWRJbnQoOCksdGhpcy5jZW50cmFsRGlyT2Zmc2V0PXRoaXMucmVhZGVyLnJlYWRJbnQoOCksdGhpcy56aXA2NEV4dGVuc2libGVEYXRhPXt9O2Zvcih2YXIgZSx0LHIsbj10aGlzLnppcDY0RW5kT2ZDZW50cmFsU2l6ZS00NDswPG47KWU9dGhpcy5yZWFkZXIucmVhZEludCgyKSx0PXRoaXMucmVhZGVyLnJlYWRJbnQoNCkscj10aGlzLnJlYWRlci5yZWFkRGF0YSh0KSx0aGlzLnppcDY0RXh0ZW5zaWJsZURhdGFbZV09e2lkOmUsbGVuZ3RoOnQsdmFsdWU6cn19LHJlYWRCbG9ja1ppcDY0RW5kT2ZDZW50cmFsTG9jYXRvcjpmdW5jdGlvbigpe2lmKHRoaXMuZGlza1dpdGhaaXA2NENlbnRyYWxEaXJTdGFydD10aGlzLnJlYWRlci5yZWFkSW50KDQpLHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpcj10aGlzLnJlYWRlci5yZWFkSW50KDgpLHRoaXMuZGlza3NDb3VudD10aGlzLnJlYWRlci5yZWFkSW50KDQpLDE8dGhpcy5kaXNrc0NvdW50KXRocm93IG5ldyBFcnJvcihcIk11bHRpLXZvbHVtZXMgemlwIGFyZSBub3Qgc3VwcG9ydGVkXCIpfSxyZWFkTG9jYWxGaWxlczpmdW5jdGlvbigpe3ZhciBlLHQ7Zm9yKGU9MDtlPHRoaXMuZmlsZXMubGVuZ3RoO2UrKyl0PXRoaXMuZmlsZXNbZV0sdGhpcy5yZWFkZXIuc2V0SW5kZXgodC5sb2NhbEhlYWRlck9mZnNldCksdGhpcy5jaGVja1NpZ25hdHVyZShzLkxPQ0FMX0ZJTEVfSEVBREVSKSx0LnJlYWRMb2NhbFBhcnQodGhpcy5yZWFkZXIpLHQuaGFuZGxlVVRGOCgpLHQucHJvY2Vzc0F0dHJpYnV0ZXMoKX0scmVhZENlbnRyYWxEaXI6ZnVuY3Rpb24oKXt2YXIgZTtmb3IodGhpcy5yZWFkZXIuc2V0SW5kZXgodGhpcy5jZW50cmFsRGlyT2Zmc2V0KTt0aGlzLnJlYWRlci5yZWFkQW5kQ2hlY2tTaWduYXR1cmUocy5DRU5UUkFMX0ZJTEVfSEVBREVSKTspKGU9bmV3IGEoe3ppcDY0OnRoaXMuemlwNjR9LHRoaXMubG9hZE9wdGlvbnMpKS5yZWFkQ2VudHJhbFBhcnQodGhpcy5yZWFkZXIpLHRoaXMuZmlsZXMucHVzaChlKTtpZih0aGlzLmNlbnRyYWxEaXJSZWNvcmRzIT09dGhpcy5maWxlcy5sZW5ndGgmJjAhPT10aGlzLmNlbnRyYWxEaXJSZWNvcmRzJiYwPT09dGhpcy5maWxlcy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcCBvciBidWc6IGV4cGVjdGVkIFwiK3RoaXMuY2VudHJhbERpclJlY29yZHMrXCIgcmVjb3JkcyBpbiBjZW50cmFsIGRpciwgZ290IFwiK3RoaXMuZmlsZXMubGVuZ3RoKX0scmVhZEVuZE9mQ2VudHJhbDpmdW5jdGlvbigpe3ZhciBlPXRoaXMucmVhZGVyLmxhc3RJbmRleE9mU2lnbmF0dXJlKHMuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKTtpZihlPDApdGhyb3chdGhpcy5pc1NpZ25hdHVyZSgwLHMuTE9DQUxfRklMRV9IRUFERVIpP25ldyBFcnJvcihcIkNhbid0IGZpbmQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5IDogaXMgdGhpcyBhIHppcCBmaWxlID8gSWYgaXQgaXMsIHNlZSBodHRwczovL3N0dWsuZ2l0aHViLmlvL2pzemlwL2RvY3VtZW50YXRpb24vaG93dG8vcmVhZF96aXAuaHRtbFwiKTpuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwOiBjYW4ndCBmaW5kIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeVwiKTt0aGlzLnJlYWRlci5zZXRJbmRleChlKTt2YXIgdD1lO2lmKHRoaXMuY2hlY2tTaWduYXR1cmUocy5DRU5UUkFMX0RJUkVDVE9SWV9FTkQpLHRoaXMucmVhZEJsb2NrRW5kT2ZDZW50cmFsKCksdGhpcy5kaXNrTnVtYmVyPT09aS5NQVhfVkFMVUVfMTZCSVRTfHx0aGlzLmRpc2tXaXRoQ2VudHJhbERpclN0YXJ0PT09aS5NQVhfVkFMVUVfMTZCSVRTfHx0aGlzLmNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzaz09PWkuTUFYX1ZBTFVFXzE2QklUU3x8dGhpcy5jZW50cmFsRGlyUmVjb3Jkcz09PWkuTUFYX1ZBTFVFXzE2QklUU3x8dGhpcy5jZW50cmFsRGlyU2l6ZT09PWkuTUFYX1ZBTFVFXzMyQklUU3x8dGhpcy5jZW50cmFsRGlyT2Zmc2V0PT09aS5NQVhfVkFMVUVfMzJCSVRTKXtpZih0aGlzLnppcDY0PSEwLChlPXRoaXMucmVhZGVyLmxhc3RJbmRleE9mU2lnbmF0dXJlKHMuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUikpPDApdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcDogY2FuJ3QgZmluZCB0aGUgWklQNjQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5IGxvY2F0b3JcIik7aWYodGhpcy5yZWFkZXIuc2V0SW5kZXgoZSksdGhpcy5jaGVja1NpZ25hdHVyZShzLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0xPQ0FUT1IpLHRoaXMucmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWxMb2NhdG9yKCksIXRoaXMuaXNTaWduYXR1cmUodGhpcy5yZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyLHMuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKSYmKHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpcj10aGlzLnJlYWRlci5sYXN0SW5kZXhPZlNpZ25hdHVyZShzLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORCksdGhpcy5yZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyPDApKXRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXA6IGNhbid0IGZpbmQgdGhlIFpJUDY0IGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeVwiKTt0aGlzLnJlYWRlci5zZXRJbmRleCh0aGlzLnJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXIpLHRoaXMuY2hlY2tTaWduYXR1cmUocy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQpLHRoaXMucmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWwoKX12YXIgcj10aGlzLmNlbnRyYWxEaXJPZmZzZXQrdGhpcy5jZW50cmFsRGlyU2l6ZTt0aGlzLnppcDY0JiYocis9MjAscis9MTIrdGhpcy56aXA2NEVuZE9mQ2VudHJhbFNpemUpO3ZhciBuPXQtcjtpZigwPG4pdGhpcy5pc1NpZ25hdHVyZSh0LHMuQ0VOVFJBTF9GSUxFX0hFQURFUil8fCh0aGlzLnJlYWRlci56ZXJvPW4pO2Vsc2UgaWYobjwwKXRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXA6IG1pc3NpbmcgXCIrTWF0aC5hYnMobikrXCIgYnl0ZXMuXCIpfSxwcmVwYXJlUmVhZGVyOmZ1bmN0aW9uKGUpe3RoaXMucmVhZGVyPW4oZSl9LGxvYWQ6ZnVuY3Rpb24oZSl7dGhpcy5wcmVwYXJlUmVhZGVyKGUpLHRoaXMucmVhZEVuZE9mQ2VudHJhbCgpLHRoaXMucmVhZENlbnRyYWxEaXIoKSx0aGlzLnJlYWRMb2NhbEZpbGVzKCl9fSx0LmV4cG9ydHM9aH0se1wiLi9yZWFkZXIvcmVhZGVyRm9yXCI6MjIsXCIuL3NpZ25hdHVyZVwiOjIzLFwiLi9zdXBwb3J0XCI6MzAsXCIuL3V0aWxzXCI6MzIsXCIuL3ppcEVudHJ5XCI6MzR9XSwzNDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL3JlYWRlci9yZWFkZXJGb3JcIikscz1lKFwiLi91dGlsc1wiKSxpPWUoXCIuL2NvbXByZXNzZWRPYmplY3RcIiksYT1lKFwiLi9jcmMzMlwiKSxvPWUoXCIuL3V0ZjhcIiksaD1lKFwiLi9jb21wcmVzc2lvbnNcIiksdT1lKFwiLi9zdXBwb3J0XCIpO2Z1bmN0aW9uIGwoZSx0KXt0aGlzLm9wdGlvbnM9ZSx0aGlzLmxvYWRPcHRpb25zPXR9bC5wcm90b3R5cGU9e2lzRW5jcnlwdGVkOmZ1bmN0aW9uKCl7cmV0dXJuIDE9PSgxJnRoaXMuYml0RmxhZyl9LHVzZVVURjg6ZnVuY3Rpb24oKXtyZXR1cm4gMjA0OD09KDIwNDgmdGhpcy5iaXRGbGFnKX0scmVhZExvY2FsUGFydDpmdW5jdGlvbihlKXt2YXIgdCxyO2lmKGUuc2tpcCgyMiksdGhpcy5maWxlTmFtZUxlbmd0aD1lLnJlYWRJbnQoMikscj1lLnJlYWRJbnQoMiksdGhpcy5maWxlTmFtZT1lLnJlYWREYXRhKHRoaXMuZmlsZU5hbWVMZW5ndGgpLGUuc2tpcChyKSwtMT09PXRoaXMuY29tcHJlc3NlZFNpemV8fC0xPT09dGhpcy51bmNvbXByZXNzZWRTaXplKXRocm93IG5ldyBFcnJvcihcIkJ1ZyBvciBjb3JydXB0ZWQgemlwIDogZGlkbid0IGdldCBlbm91Z2ggaW5mb3JtYXRpb24gZnJvbSB0aGUgY2VudHJhbCBkaXJlY3RvcnkgKGNvbXByZXNzZWRTaXplID09PSAtMSB8fCB1bmNvbXByZXNzZWRTaXplID09PSAtMSlcIik7aWYobnVsbD09PSh0PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCBpbiBoKWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChoLHQpJiZoW3RdLm1hZ2ljPT09ZSlyZXR1cm4gaFt0XTtyZXR1cm4gbnVsbH0odGhpcy5jb21wcmVzc2lvbk1ldGhvZCkpKXRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXAgOiBjb21wcmVzc2lvbiBcIitzLnByZXR0eSh0aGlzLmNvbXByZXNzaW9uTWV0aG9kKStcIiB1bmtub3duIChpbm5lciBmaWxlIDogXCIrcy50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLHRoaXMuZmlsZU5hbWUpK1wiKVwiKTt0aGlzLmRlY29tcHJlc3NlZD1uZXcgaSh0aGlzLmNvbXByZXNzZWRTaXplLHRoaXMudW5jb21wcmVzc2VkU2l6ZSx0aGlzLmNyYzMyLHQsZS5yZWFkRGF0YSh0aGlzLmNvbXByZXNzZWRTaXplKSl9LHJlYWRDZW50cmFsUGFydDpmdW5jdGlvbihlKXt0aGlzLnZlcnNpb25NYWRlQnk9ZS5yZWFkSW50KDIpLGUuc2tpcCgyKSx0aGlzLmJpdEZsYWc9ZS5yZWFkSW50KDIpLHRoaXMuY29tcHJlc3Npb25NZXRob2Q9ZS5yZWFkU3RyaW5nKDIpLHRoaXMuZGF0ZT1lLnJlYWREYXRlKCksdGhpcy5jcmMzMj1lLnJlYWRJbnQoNCksdGhpcy5jb21wcmVzc2VkU2l6ZT1lLnJlYWRJbnQoNCksdGhpcy51bmNvbXByZXNzZWRTaXplPWUucmVhZEludCg0KTt2YXIgdD1lLnJlYWRJbnQoMik7aWYodGhpcy5leHRyYUZpZWxkc0xlbmd0aD1lLnJlYWRJbnQoMiksdGhpcy5maWxlQ29tbWVudExlbmd0aD1lLnJlYWRJbnQoMiksdGhpcy5kaXNrTnVtYmVyU3RhcnQ9ZS5yZWFkSW50KDIpLHRoaXMuaW50ZXJuYWxGaWxlQXR0cmlidXRlcz1lLnJlYWRJbnQoMiksdGhpcy5leHRlcm5hbEZpbGVBdHRyaWJ1dGVzPWUucmVhZEludCg0KSx0aGlzLmxvY2FsSGVhZGVyT2Zmc2V0PWUucmVhZEludCg0KSx0aGlzLmlzRW5jcnlwdGVkKCkpdGhyb3cgbmV3IEVycm9yKFwiRW5jcnlwdGVkIHppcCBhcmUgbm90IHN1cHBvcnRlZFwiKTtlLnNraXAodCksdGhpcy5yZWFkRXh0cmFGaWVsZHMoZSksdGhpcy5wYXJzZVpJUDY0RXh0cmFGaWVsZChlKSx0aGlzLmZpbGVDb21tZW50PWUucmVhZERhdGEodGhpcy5maWxlQ29tbWVudExlbmd0aCl9LHByb2Nlc3NBdHRyaWJ1dGVzOmZ1bmN0aW9uKCl7dGhpcy51bml4UGVybWlzc2lvbnM9bnVsbCx0aGlzLmRvc1Blcm1pc3Npb25zPW51bGw7dmFyIGU9dGhpcy52ZXJzaW9uTWFkZUJ5Pj44O3RoaXMuZGlyPSEhKDE2JnRoaXMuZXh0ZXJuYWxGaWxlQXR0cmlidXRlcyksMD09ZSYmKHRoaXMuZG9zUGVybWlzc2lvbnM9NjMmdGhpcy5leHRlcm5hbEZpbGVBdHRyaWJ1dGVzKSwzPT1lJiYodGhpcy51bml4UGVybWlzc2lvbnM9dGhpcy5leHRlcm5hbEZpbGVBdHRyaWJ1dGVzPj4xNiY2NTUzNSksdGhpcy5kaXJ8fFwiL1wiIT09dGhpcy5maWxlTmFtZVN0ci5zbGljZSgtMSl8fCh0aGlzLmRpcj0hMCl9LHBhcnNlWklQNjRFeHRyYUZpZWxkOmZ1bmN0aW9uKCl7aWYodGhpcy5leHRyYUZpZWxkc1sxXSl7dmFyIGU9bih0aGlzLmV4dHJhRmllbGRzWzFdLnZhbHVlKTt0aGlzLnVuY29tcHJlc3NlZFNpemU9PT1zLk1BWF9WQUxVRV8zMkJJVFMmJih0aGlzLnVuY29tcHJlc3NlZFNpemU9ZS5yZWFkSW50KDgpKSx0aGlzLmNvbXByZXNzZWRTaXplPT09cy5NQVhfVkFMVUVfMzJCSVRTJiYodGhpcy5jb21wcmVzc2VkU2l6ZT1lLnJlYWRJbnQoOCkpLHRoaXMubG9jYWxIZWFkZXJPZmZzZXQ9PT1zLk1BWF9WQUxVRV8zMkJJVFMmJih0aGlzLmxvY2FsSGVhZGVyT2Zmc2V0PWUucmVhZEludCg4KSksdGhpcy5kaXNrTnVtYmVyU3RhcnQ9PT1zLk1BWF9WQUxVRV8zMkJJVFMmJih0aGlzLmRpc2tOdW1iZXJTdGFydD1lLnJlYWRJbnQoNCkpfX0scmVhZEV4dHJhRmllbGRzOmZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpPWUuaW5kZXgrdGhpcy5leHRyYUZpZWxkc0xlbmd0aDtmb3IodGhpcy5leHRyYUZpZWxkc3x8KHRoaXMuZXh0cmFGaWVsZHM9e30pO2UuaW5kZXgrNDxpOyl0PWUucmVhZEludCgyKSxyPWUucmVhZEludCgyKSxuPWUucmVhZERhdGEociksdGhpcy5leHRyYUZpZWxkc1t0XT17aWQ6dCxsZW5ndGg6cix2YWx1ZTpufTtlLnNldEluZGV4KGkpfSxoYW5kbGVVVEY4OmZ1bmN0aW9uKCl7dmFyIGU9dS51aW50OGFycmF5P1widWludDhhcnJheVwiOlwiYXJyYXlcIjtpZih0aGlzLnVzZVVURjgoKSl0aGlzLmZpbGVOYW1lU3RyPW8udXRmOGRlY29kZSh0aGlzLmZpbGVOYW1lKSx0aGlzLmZpbGVDb21tZW50U3RyPW8udXRmOGRlY29kZSh0aGlzLmZpbGVDb21tZW50KTtlbHNle3ZhciB0PXRoaXMuZmluZEV4dHJhRmllbGRVbmljb2RlUGF0aCgpO2lmKG51bGwhPT10KXRoaXMuZmlsZU5hbWVTdHI9dDtlbHNle3ZhciByPXMudHJhbnNmb3JtVG8oZSx0aGlzLmZpbGVOYW1lKTt0aGlzLmZpbGVOYW1lU3RyPXRoaXMubG9hZE9wdGlvbnMuZGVjb2RlRmlsZU5hbWUocil9dmFyIG49dGhpcy5maW5kRXh0cmFGaWVsZFVuaWNvZGVDb21tZW50KCk7aWYobnVsbCE9PW4pdGhpcy5maWxlQ29tbWVudFN0cj1uO2Vsc2V7dmFyIGk9cy50cmFuc2Zvcm1UbyhlLHRoaXMuZmlsZUNvbW1lbnQpO3RoaXMuZmlsZUNvbW1lbnRTdHI9dGhpcy5sb2FkT3B0aW9ucy5kZWNvZGVGaWxlTmFtZShpKX19fSxmaW5kRXh0cmFGaWVsZFVuaWNvZGVQYXRoOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5leHRyYUZpZWxkc1syODc4OV07aWYoZSl7dmFyIHQ9bihlLnZhbHVlKTtyZXR1cm4gMSE9PXQucmVhZEludCgxKT9udWxsOmEodGhpcy5maWxlTmFtZSkhPT10LnJlYWRJbnQoNCk/bnVsbDpvLnV0ZjhkZWNvZGUodC5yZWFkRGF0YShlLmxlbmd0aC01KSl9cmV0dXJuIG51bGx9LGZpbmRFeHRyYUZpZWxkVW5pY29kZUNvbW1lbnQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmV4dHJhRmllbGRzWzI1NDYxXTtpZihlKXt2YXIgdD1uKGUudmFsdWUpO3JldHVybiAxIT09dC5yZWFkSW50KDEpP251bGw6YSh0aGlzLmZpbGVDb21tZW50KSE9PXQucmVhZEludCg0KT9udWxsOm8udXRmOGRlY29kZSh0LnJlYWREYXRhKGUubGVuZ3RoLTUpKX1yZXR1cm4gbnVsbH19LHQuZXhwb3J0cz1sfSx7XCIuL2NvbXByZXNzZWRPYmplY3RcIjoyLFwiLi9jb21wcmVzc2lvbnNcIjozLFwiLi9jcmMzMlwiOjQsXCIuL3JlYWRlci9yZWFkZXJGb3JcIjoyMixcIi4vc3VwcG9ydFwiOjMwLFwiLi91dGY4XCI6MzEsXCIuL3V0aWxzXCI6MzJ9XSwzNTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0LHIpe3RoaXMubmFtZT1lLHRoaXMuZGlyPXIuZGlyLHRoaXMuZGF0ZT1yLmRhdGUsdGhpcy5jb21tZW50PXIuY29tbWVudCx0aGlzLnVuaXhQZXJtaXNzaW9ucz1yLnVuaXhQZXJtaXNzaW9ucyx0aGlzLmRvc1Blcm1pc3Npb25zPXIuZG9zUGVybWlzc2lvbnMsdGhpcy5fZGF0YT10LHRoaXMuX2RhdGFCaW5hcnk9ci5iaW5hcnksdGhpcy5vcHRpb25zPXtjb21wcmVzc2lvbjpyLmNvbXByZXNzaW9uLGNvbXByZXNzaW9uT3B0aW9uczpyLmNvbXByZXNzaW9uT3B0aW9uc319dmFyIHM9ZShcIi4vc3RyZWFtL1N0cmVhbUhlbHBlclwiKSxpPWUoXCIuL3N0cmVhbS9EYXRhV29ya2VyXCIpLGE9ZShcIi4vdXRmOFwiKSxvPWUoXCIuL2NvbXByZXNzZWRPYmplY3RcIiksaD1lKFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKTtuLnByb3RvdHlwZT17aW50ZXJuYWxTdHJlYW06ZnVuY3Rpb24oZSl7dmFyIHQ9bnVsbCxyPVwic3RyaW5nXCI7dHJ5e2lmKCFlKXRocm93IG5ldyBFcnJvcihcIk5vIG91dHB1dCB0eXBlIHNwZWNpZmllZC5cIik7dmFyIG49XCJzdHJpbmdcIj09PShyPWUudG9Mb3dlckNhc2UoKSl8fFwidGV4dFwiPT09cjtcImJpbmFyeXN0cmluZ1wiIT09ciYmXCJ0ZXh0XCIhPT1yfHwocj1cInN0cmluZ1wiKSx0PXRoaXMuX2RlY29tcHJlc3NXb3JrZXIoKTt2YXIgaT0hdGhpcy5fZGF0YUJpbmFyeTtpJiYhbiYmKHQ9dC5waXBlKG5ldyBhLlV0ZjhFbmNvZGVXb3JrZXIpKSwhaSYmbiYmKHQ9dC5waXBlKG5ldyBhLlV0ZjhEZWNvZGVXb3JrZXIpKX1jYXRjaChlKXsodD1uZXcgaChcImVycm9yXCIpKS5lcnJvcihlKX1yZXR1cm4gbmV3IHModCxyLFwiXCIpfSxhc3luYzpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmludGVybmFsU3RyZWFtKGUpLmFjY3VtdWxhdGUodCl9LG5vZGVTdHJlYW06ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5pbnRlcm5hbFN0cmVhbShlfHxcIm5vZGVidWZmZXJcIikudG9Ob2RlanNTdHJlYW0odCl9LF9jb21wcmVzc1dvcmtlcjpmdW5jdGlvbihlLHQpe2lmKHRoaXMuX2RhdGEgaW5zdGFuY2VvZiBvJiZ0aGlzLl9kYXRhLmNvbXByZXNzaW9uLm1hZ2ljPT09ZS5tYWdpYylyZXR1cm4gdGhpcy5fZGF0YS5nZXRDb21wcmVzc2VkV29ya2VyKCk7dmFyIHI9dGhpcy5fZGVjb21wcmVzc1dvcmtlcigpO3JldHVybiB0aGlzLl9kYXRhQmluYXJ5fHwocj1yLnBpcGUobmV3IGEuVXRmOEVuY29kZVdvcmtlcikpLG8uY3JlYXRlV29ya2VyRnJvbShyLGUsdCl9LF9kZWNvbXByZXNzV29ya2VyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RhdGEgaW5zdGFuY2VvZiBvP3RoaXMuX2RhdGEuZ2V0Q29udGVudFdvcmtlcigpOnRoaXMuX2RhdGEgaW5zdGFuY2VvZiBoP3RoaXMuX2RhdGE6bmV3IGkodGhpcy5fZGF0YSl9fTtmb3IodmFyIHU9W1wiYXNUZXh0XCIsXCJhc0JpbmFyeVwiLFwiYXNOb2RlQnVmZmVyXCIsXCJhc1VpbnQ4QXJyYXlcIixcImFzQXJyYXlCdWZmZXJcIl0sbD1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIlRoaXMgbWV0aG9kIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuXCIpfSxmPTA7Zjx1Lmxlbmd0aDtmKyspbi5wcm90b3R5cGVbdVtmXV09bDt0LmV4cG9ydHM9bn0se1wiLi9jb21wcmVzc2VkT2JqZWN0XCI6MixcIi4vc3RyZWFtL0RhdGFXb3JrZXJcIjoyNyxcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjoyOCxcIi4vc3RyZWFtL1N0cmVhbUhlbHBlclwiOjI5LFwiLi91dGY4XCI6MzF9XSwzNjpbZnVuY3Rpb24oZSxsLHQpeyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjt2YXIgcixuLGU9dC5NdXRhdGlvbk9ic2VydmVyfHx0LldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7aWYoZSl7dmFyIGk9MCxzPW5ldyBlKHUpLGE9dC5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKTtzLm9ic2VydmUoYSx7Y2hhcmFjdGVyRGF0YTohMH0pLHI9ZnVuY3Rpb24oKXthLmRhdGE9aT0rK2klMn19ZWxzZSBpZih0LnNldEltbWVkaWF0ZXx8dm9pZCAwPT09dC5NZXNzYWdlQ2hhbm5lbClyPVwiZG9jdW1lbnRcImluIHQmJlwib25yZWFkeXN0YXRlY2hhbmdlXCJpbiB0LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik/ZnVuY3Rpb24oKXt2YXIgZT10LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7ZS5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXt1KCksZS5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSksZT1udWxsfSx0LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChlKX06ZnVuY3Rpb24oKXtzZXRUaW1lb3V0KHUsMCl9O2Vsc2V7dmFyIG89bmV3IHQuTWVzc2FnZUNoYW5uZWw7by5wb3J0MS5vbm1lc3NhZ2U9dSxyPWZ1bmN0aW9uKCl7by5wb3J0Mi5wb3N0TWVzc2FnZSgwKX19dmFyIGg9W107ZnVuY3Rpb24gdSgpe3ZhciBlLHQ7bj0hMDtmb3IodmFyIHI9aC5sZW5ndGg7cjspe2Zvcih0PWgsaD1bXSxlPS0xOysrZTxyOyl0W2VdKCk7cj1oLmxlbmd0aH1uPSExfWwuZXhwb3J0cz1mdW5jdGlvbihlKXsxIT09aC5wdXNoKGUpfHxufHxyKCl9fSkuY2FsbCh0aGlzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7fV0sMzc6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT1lKFwiaW1tZWRpYXRlXCIpO2Z1bmN0aW9uIHUoKXt9dmFyIGw9e30scz1bXCJSRUpFQ1RFRFwiXSxhPVtcIkZVTEZJTExFRFwiXSxuPVtcIlBFTkRJTkdcIl07ZnVuY3Rpb24gbyhlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJyZXNvbHZlciBtdXN0IGJlIGEgZnVuY3Rpb25cIik7dGhpcy5zdGF0ZT1uLHRoaXMucXVldWU9W10sdGhpcy5vdXRjb21lPXZvaWQgMCxlIT09dSYmZCh0aGlzLGUpfWZ1bmN0aW9uIGgoZSx0LHIpe3RoaXMucHJvbWlzZT1lLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJih0aGlzLm9uRnVsZmlsbGVkPXQsdGhpcy5jYWxsRnVsZmlsbGVkPXRoaXMub3RoZXJDYWxsRnVsZmlsbGVkKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiByJiYodGhpcy5vblJlamVjdGVkPXIsdGhpcy5jYWxsUmVqZWN0ZWQ9dGhpcy5vdGhlckNhbGxSZWplY3RlZCl9ZnVuY3Rpb24gZih0LHIsbil7aShmdW5jdGlvbigpe3ZhciBlO3RyeXtlPXIobil9Y2F0Y2goZSl7cmV0dXJuIGwucmVqZWN0KHQsZSl9ZT09PXQ/bC5yZWplY3QodCxuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlc29sdmUgcHJvbWlzZSB3aXRoIGl0c2VsZlwiKSk6bC5yZXNvbHZlKHQsZSl9KX1mdW5jdGlvbiBjKGUpe3ZhciB0PWUmJmUudGhlbjtpZihlJiYoXCJvYmplY3RcIj09dHlwZW9mIGV8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0KXJldHVybiBmdW5jdGlvbigpe3QuYXBwbHkoZSxhcmd1bWVudHMpfX1mdW5jdGlvbiBkKHQsZSl7dmFyIHI9ITE7ZnVuY3Rpb24gbihlKXtyfHwocj0hMCxsLnJlamVjdCh0LGUpKX1mdW5jdGlvbiBpKGUpe3J8fChyPSEwLGwucmVzb2x2ZSh0LGUpKX12YXIgcz1wKGZ1bmN0aW9uKCl7ZShpLG4pfSk7XCJlcnJvclwiPT09cy5zdGF0dXMmJm4ocy52YWx1ZSl9ZnVuY3Rpb24gcChlLHQpe3ZhciByPXt9O3RyeXtyLnZhbHVlPWUodCksci5zdGF0dXM9XCJzdWNjZXNzXCJ9Y2F0Y2goZSl7ci5zdGF0dXM9XCJlcnJvclwiLHIudmFsdWU9ZX1yZXR1cm4gcn0odC5leHBvcnRzPW8pLnByb3RvdHlwZS5maW5hbGx5PWZ1bmN0aW9uKHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpcmV0dXJuIHRoaXM7dmFyIHI9dGhpcy5jb25zdHJ1Y3RvcjtyZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiByLnJlc29sdmUodCgpKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGV9KX0sZnVuY3Rpb24oZSl7cmV0dXJuIHIucmVzb2x2ZSh0KCkpLnRoZW4oZnVuY3Rpb24oKXt0aHJvdyBlfSl9KX0sby5wcm90b3R5cGUuY2F0Y2g9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMudGhlbihudWxsLGUpfSxvLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmdGhpcy5zdGF0ZT09PWF8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJnRoaXMuc3RhdGU9PT1zKXJldHVybiB0aGlzO3ZhciByPW5ldyB0aGlzLmNvbnN0cnVjdG9yKHUpO3RoaXMuc3RhdGUhPT1uP2Yocix0aGlzLnN0YXRlPT09YT9lOnQsdGhpcy5vdXRjb21lKTp0aGlzLnF1ZXVlLnB1c2gobmV3IGgocixlLHQpKTtyZXR1cm4gcn0saC5wcm90b3R5cGUuY2FsbEZ1bGZpbGxlZD1mdW5jdGlvbihlKXtsLnJlc29sdmUodGhpcy5wcm9taXNlLGUpfSxoLnByb3RvdHlwZS5vdGhlckNhbGxGdWxmaWxsZWQ9ZnVuY3Rpb24oZSl7Zih0aGlzLnByb21pc2UsdGhpcy5vbkZ1bGZpbGxlZCxlKX0saC5wcm90b3R5cGUuY2FsbFJlamVjdGVkPWZ1bmN0aW9uKGUpe2wucmVqZWN0KHRoaXMucHJvbWlzZSxlKX0saC5wcm90b3R5cGUub3RoZXJDYWxsUmVqZWN0ZWQ9ZnVuY3Rpb24oZSl7Zih0aGlzLnByb21pc2UsdGhpcy5vblJlamVjdGVkLGUpfSxsLnJlc29sdmU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1wKGMsdCk7aWYoXCJlcnJvclwiPT09ci5zdGF0dXMpcmV0dXJuIGwucmVqZWN0KGUsci52YWx1ZSk7dmFyIG49ci52YWx1ZTtpZihuKWQoZSxuKTtlbHNle2Uuc3RhdGU9YSxlLm91dGNvbWU9dDtmb3IodmFyIGk9LTEscz1lLnF1ZXVlLmxlbmd0aDsrK2k8czspZS5xdWV1ZVtpXS5jYWxsRnVsZmlsbGVkKHQpfXJldHVybiBlfSxsLnJlamVjdD1mdW5jdGlvbihlLHQpe2Uuc3RhdGU9cyxlLm91dGNvbWU9dDtmb3IodmFyIHI9LTEsbj1lLnF1ZXVlLmxlbmd0aDsrK3I8bjspZS5xdWV1ZVtyXS5jYWxsUmVqZWN0ZWQodCk7cmV0dXJuIGV9LG8ucmVzb2x2ZT1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgdGhpcylyZXR1cm4gZTtyZXR1cm4gbC5yZXNvbHZlKG5ldyB0aGlzKHUpLGUpfSxvLnJlamVjdD1mdW5jdGlvbihlKXt2YXIgdD1uZXcgdGhpcyh1KTtyZXR1cm4gbC5yZWplY3QodCxlKX0sby5hbGw9ZnVuY3Rpb24oZSl7dmFyIHI9dGhpcztpZihcIltvYmplY3QgQXJyYXldXCIhPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkpcmV0dXJuIHRoaXMucmVqZWN0KG5ldyBUeXBlRXJyb3IoXCJtdXN0IGJlIGFuIGFycmF5XCIpKTt2YXIgbj1lLmxlbmd0aCxpPSExO2lmKCFuKXJldHVybiB0aGlzLnJlc29sdmUoW10pO3ZhciBzPW5ldyBBcnJheShuKSxhPTAsdD0tMSxvPW5ldyB0aGlzKHUpO2Zvcig7Kyt0PG47KWgoZVt0XSx0KTtyZXR1cm4gbztmdW5jdGlvbiBoKGUsdCl7ci5yZXNvbHZlKGUpLnRoZW4oZnVuY3Rpb24oZSl7c1t0XT1lLCsrYSE9PW58fGl8fChpPSEwLGwucmVzb2x2ZShvLHMpKX0sZnVuY3Rpb24oZSl7aXx8KGk9ITAsbC5yZWplY3QobyxlKSl9KX19LG8ucmFjZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKFwiW29iamVjdCBBcnJheV1cIiE9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSlyZXR1cm4gdGhpcy5yZWplY3QobmV3IFR5cGVFcnJvcihcIm11c3QgYmUgYW4gYXJyYXlcIikpO3ZhciByPWUubGVuZ3RoLG49ITE7aWYoIXIpcmV0dXJuIHRoaXMucmVzb2x2ZShbXSk7dmFyIGk9LTEscz1uZXcgdGhpcyh1KTtmb3IoOysraTxyOylhPWVbaV0sdC5yZXNvbHZlKGEpLnRoZW4oZnVuY3Rpb24oZSl7bnx8KG49ITAsbC5yZXNvbHZlKHMsZSkpfSxmdW5jdGlvbihlKXtufHwobj0hMCxsLnJlamVjdChzLGUpKX0pO3ZhciBhO3JldHVybiBzfX0se2ltbWVkaWF0ZTozNn1dLDM4OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49e307KDAsZShcIi4vbGliL3V0aWxzL2NvbW1vblwiKS5hc3NpZ24pKG4sZShcIi4vbGliL2RlZmxhdGVcIiksZShcIi4vbGliL2luZmxhdGVcIiksZShcIi4vbGliL3psaWIvY29uc3RhbnRzXCIpKSx0LmV4cG9ydHM9bn0se1wiLi9saWIvZGVmbGF0ZVwiOjM5LFwiLi9saWIvaW5mbGF0ZVwiOjQwLFwiLi9saWIvdXRpbHMvY29tbW9uXCI6NDEsXCIuL2xpYi96bGliL2NvbnN0YW50c1wiOjQ0fV0sMzk6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgYT1lKFwiLi96bGliL2RlZmxhdGVcIiksbz1lKFwiLi91dGlscy9jb21tb25cIiksaD1lKFwiLi91dGlscy9zdHJpbmdzXCIpLGk9ZShcIi4vemxpYi9tZXNzYWdlc1wiKSxzPWUoXCIuL3psaWIvenN0cmVhbVwiKSx1PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsbD0wLGY9LTEsYz0wLGQ9ODtmdW5jdGlvbiBwKGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIHApKXJldHVybiBuZXcgcChlKTt0aGlzLm9wdGlvbnM9by5hc3NpZ24oe2xldmVsOmYsbWV0aG9kOmQsY2h1bmtTaXplOjE2Mzg0LHdpbmRvd0JpdHM6MTUsbWVtTGV2ZWw6OCxzdHJhdGVneTpjLHRvOlwiXCJ9LGV8fHt9KTt2YXIgdD10aGlzLm9wdGlvbnM7dC5yYXcmJjA8dC53aW5kb3dCaXRzP3Qud2luZG93Qml0cz0tdC53aW5kb3dCaXRzOnQuZ3ppcCYmMDx0LndpbmRvd0JpdHMmJnQud2luZG93Qml0czwxNiYmKHQud2luZG93Qml0cys9MTYpLHRoaXMuZXJyPTAsdGhpcy5tc2c9XCJcIix0aGlzLmVuZGVkPSExLHRoaXMuY2h1bmtzPVtdLHRoaXMuc3RybT1uZXcgcyx0aGlzLnN0cm0uYXZhaWxfb3V0PTA7dmFyIHI9YS5kZWZsYXRlSW5pdDIodGhpcy5zdHJtLHQubGV2ZWwsdC5tZXRob2QsdC53aW5kb3dCaXRzLHQubWVtTGV2ZWwsdC5zdHJhdGVneSk7aWYociE9PWwpdGhyb3cgbmV3IEVycm9yKGlbcl0pO2lmKHQuaGVhZGVyJiZhLmRlZmxhdGVTZXRIZWFkZXIodGhpcy5zdHJtLHQuaGVhZGVyKSx0LmRpY3Rpb25hcnkpe3ZhciBuO2lmKG49XCJzdHJpbmdcIj09dHlwZW9mIHQuZGljdGlvbmFyeT9oLnN0cmluZzJidWYodC5kaWN0aW9uYXJ5KTpcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT11LmNhbGwodC5kaWN0aW9uYXJ5KT9uZXcgVWludDhBcnJheSh0LmRpY3Rpb25hcnkpOnQuZGljdGlvbmFyeSwocj1hLmRlZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSxuKSkhPT1sKXRocm93IG5ldyBFcnJvcihpW3JdKTt0aGlzLl9kaWN0X3NldD0hMH19ZnVuY3Rpb24gbihlLHQpe3ZhciByPW5ldyBwKHQpO2lmKHIucHVzaChlLCEwKSxyLmVycil0aHJvdyByLm1zZ3x8aVtyLmVycl07cmV0dXJuIHIucmVzdWx0fXAucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGk9dGhpcy5zdHJtLHM9dGhpcy5vcHRpb25zLmNodW5rU2l6ZTtpZih0aGlzLmVuZGVkKXJldHVybiExO249dD09PX5+dD90OiEwPT09dD80OjAsXCJzdHJpbmdcIj09dHlwZW9mIGU/aS5pbnB1dD1oLnN0cmluZzJidWYoZSk6XCJbb2JqZWN0IEFycmF5QnVmZmVyXVwiPT09dS5jYWxsKGUpP2kuaW5wdXQ9bmV3IFVpbnQ4QXJyYXkoZSk6aS5pbnB1dD1lLGkubmV4dF9pbj0wLGkuYXZhaWxfaW49aS5pbnB1dC5sZW5ndGg7ZG97aWYoMD09PWkuYXZhaWxfb3V0JiYoaS5vdXRwdXQ9bmV3IG8uQnVmOChzKSxpLm5leHRfb3V0PTAsaS5hdmFpbF9vdXQ9cyksMSE9PShyPWEuZGVmbGF0ZShpLG4pKSYmciE9PWwpcmV0dXJuIHRoaXMub25FbmQociksISh0aGlzLmVuZGVkPSEwKTswIT09aS5hdmFpbF9vdXQmJigwIT09aS5hdmFpbF9pbnx8NCE9PW4mJjIhPT1uKXx8KFwic3RyaW5nXCI9PT10aGlzLm9wdGlvbnMudG8/dGhpcy5vbkRhdGEoaC5idWYyYmluc3RyaW5nKG8uc2hyaW5rQnVmKGkub3V0cHV0LGkubmV4dF9vdXQpKSk6dGhpcy5vbkRhdGEoby5zaHJpbmtCdWYoaS5vdXRwdXQsaS5uZXh0X291dCkpKX13aGlsZSgoMDxpLmF2YWlsX2lufHwwPT09aS5hdmFpbF9vdXQpJiYxIT09cik7cmV0dXJuIDQ9PT1uPyhyPWEuZGVmbGF0ZUVuZCh0aGlzLnN0cm0pLHRoaXMub25FbmQociksdGhpcy5lbmRlZD0hMCxyPT09bCk6MiE9PW58fCh0aGlzLm9uRW5kKGwpLCEoaS5hdmFpbF9vdXQ9MCkpfSxwLnByb3RvdHlwZS5vbkRhdGE9ZnVuY3Rpb24oZSl7dGhpcy5jaHVua3MucHVzaChlKX0scC5wcm90b3R5cGUub25FbmQ9ZnVuY3Rpb24oZSl7ZT09PWwmJihcInN0cmluZ1wiPT09dGhpcy5vcHRpb25zLnRvP3RoaXMucmVzdWx0PXRoaXMuY2h1bmtzLmpvaW4oXCJcIik6dGhpcy5yZXN1bHQ9by5mbGF0dGVuQ2h1bmtzKHRoaXMuY2h1bmtzKSksdGhpcy5jaHVua3M9W10sdGhpcy5lcnI9ZSx0aGlzLm1zZz10aGlzLnN0cm0ubXNnfSxyLkRlZmxhdGU9cCxyLmRlZmxhdGU9bixyLmRlZmxhdGVSYXc9ZnVuY3Rpb24oZSx0KXtyZXR1cm4odD10fHx7fSkucmF3PSEwLG4oZSx0KX0sci5nemlwPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKHQ9dHx8e30pLmd6aXA9ITAsbihlLHQpfX0se1wiLi91dGlscy9jb21tb25cIjo0MSxcIi4vdXRpbHMvc3RyaW5nc1wiOjQyLFwiLi96bGliL2RlZmxhdGVcIjo0NixcIi4vemxpYi9tZXNzYWdlc1wiOjUxLFwiLi96bGliL3pzdHJlYW1cIjo1M31dLDQwOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGM9ZShcIi4vemxpYi9pbmZsYXRlXCIpLGQ9ZShcIi4vdXRpbHMvY29tbW9uXCIpLHA9ZShcIi4vdXRpbHMvc3RyaW5nc1wiKSxtPWUoXCIuL3psaWIvY29uc3RhbnRzXCIpLG49ZShcIi4vemxpYi9tZXNzYWdlc1wiKSxpPWUoXCIuL3psaWIvenN0cmVhbVwiKSxzPWUoXCIuL3psaWIvZ3poZWFkZXJcIiksXz1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO2Z1bmN0aW9uIGEoZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgYSkpcmV0dXJuIG5ldyBhKGUpO3RoaXMub3B0aW9ucz1kLmFzc2lnbih7Y2h1bmtTaXplOjE2Mzg0LHdpbmRvd0JpdHM6MCx0bzpcIlwifSxlfHx7fSk7dmFyIHQ9dGhpcy5vcHRpb25zO3QucmF3JiYwPD10LndpbmRvd0JpdHMmJnQud2luZG93Qml0czwxNiYmKHQud2luZG93Qml0cz0tdC53aW5kb3dCaXRzLDA9PT10LndpbmRvd0JpdHMmJih0LndpbmRvd0JpdHM9LTE1KSksISgwPD10LndpbmRvd0JpdHMmJnQud2luZG93Qml0czwxNil8fGUmJmUud2luZG93Qml0c3x8KHQud2luZG93Qml0cys9MzIpLDE1PHQud2luZG93Qml0cyYmdC53aW5kb3dCaXRzPDQ4JiYwPT0oMTUmdC53aW5kb3dCaXRzKSYmKHQud2luZG93Qml0c3w9MTUpLHRoaXMuZXJyPTAsdGhpcy5tc2c9XCJcIix0aGlzLmVuZGVkPSExLHRoaXMuY2h1bmtzPVtdLHRoaXMuc3RybT1uZXcgaSx0aGlzLnN0cm0uYXZhaWxfb3V0PTA7dmFyIHI9Yy5pbmZsYXRlSW5pdDIodGhpcy5zdHJtLHQud2luZG93Qml0cyk7aWYociE9PW0uWl9PSyl0aHJvdyBuZXcgRXJyb3IobltyXSk7dGhpcy5oZWFkZXI9bmV3IHMsYy5pbmZsYXRlR2V0SGVhZGVyKHRoaXMuc3RybSx0aGlzLmhlYWRlcil9ZnVuY3Rpb24gbyhlLHQpe3ZhciByPW5ldyBhKHQpO2lmKHIucHVzaChlLCEwKSxyLmVycil0aHJvdyByLm1zZ3x8bltyLmVycl07cmV0dXJuIHIucmVzdWx0fWEucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGkscyxhLG8saD10aGlzLnN0cm0sdT10aGlzLm9wdGlvbnMuY2h1bmtTaXplLGw9dGhpcy5vcHRpb25zLmRpY3Rpb25hcnksZj0hMTtpZih0aGlzLmVuZGVkKXJldHVybiExO249dD09PX5+dD90OiEwPT09dD9tLlpfRklOSVNIOm0uWl9OT19GTFVTSCxcInN0cmluZ1wiPT10eXBlb2YgZT9oLmlucHV0PXAuYmluc3RyaW5nMmJ1ZihlKTpcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT1fLmNhbGwoZSk/aC5pbnB1dD1uZXcgVWludDhBcnJheShlKTpoLmlucHV0PWUsaC5uZXh0X2luPTAsaC5hdmFpbF9pbj1oLmlucHV0Lmxlbmd0aDtkb3tpZigwPT09aC5hdmFpbF9vdXQmJihoLm91dHB1dD1uZXcgZC5CdWY4KHUpLGgubmV4dF9vdXQ9MCxoLmF2YWlsX291dD11KSwocj1jLmluZmxhdGUoaCxtLlpfTk9fRkxVU0gpKT09PW0uWl9ORUVEX0RJQ1QmJmwmJihvPVwic3RyaW5nXCI9PXR5cGVvZiBsP3Auc3RyaW5nMmJ1ZihsKTpcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT1fLmNhbGwobCk/bmV3IFVpbnQ4QXJyYXkobCk6bCxyPWMuaW5mbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLG8pKSxyPT09bS5aX0JVRl9FUlJPUiYmITA9PT1mJiYocj1tLlpfT0ssZj0hMSksciE9PW0uWl9TVFJFQU1fRU5EJiZyIT09bS5aX09LKXJldHVybiB0aGlzLm9uRW5kKHIpLCEodGhpcy5lbmRlZD0hMCk7aC5uZXh0X291dCYmKDAhPT1oLmF2YWlsX291dCYmciE9PW0uWl9TVFJFQU1fRU5EJiYoMCE9PWguYXZhaWxfaW58fG4hPT1tLlpfRklOSVNIJiZuIT09bS5aX1NZTkNfRkxVU0gpfHwoXCJzdHJpbmdcIj09PXRoaXMub3B0aW9ucy50bz8oaT1wLnV0Zjhib3JkZXIoaC5vdXRwdXQsaC5uZXh0X291dCkscz1oLm5leHRfb3V0LWksYT1wLmJ1ZjJzdHJpbmcoaC5vdXRwdXQsaSksaC5uZXh0X291dD1zLGguYXZhaWxfb3V0PXUtcyxzJiZkLmFycmF5U2V0KGgub3V0cHV0LGgub3V0cHV0LGkscywwKSx0aGlzLm9uRGF0YShhKSk6dGhpcy5vbkRhdGEoZC5zaHJpbmtCdWYoaC5vdXRwdXQsaC5uZXh0X291dCkpKSksMD09PWguYXZhaWxfaW4mJjA9PT1oLmF2YWlsX291dCYmKGY9ITApfXdoaWxlKCgwPGguYXZhaWxfaW58fDA9PT1oLmF2YWlsX291dCkmJnIhPT1tLlpfU1RSRUFNX0VORCk7cmV0dXJuIHI9PT1tLlpfU1RSRUFNX0VORCYmKG49bS5aX0ZJTklTSCksbj09PW0uWl9GSU5JU0g/KHI9Yy5pbmZsYXRlRW5kKHRoaXMuc3RybSksdGhpcy5vbkVuZChyKSx0aGlzLmVuZGVkPSEwLHI9PT1tLlpfT0spOm4hPT1tLlpfU1lOQ19GTFVTSHx8KHRoaXMub25FbmQobS5aX09LKSwhKGguYXZhaWxfb3V0PTApKX0sYS5wcm90b3R5cGUub25EYXRhPWZ1bmN0aW9uKGUpe3RoaXMuY2h1bmtzLnB1c2goZSl9LGEucHJvdG90eXBlLm9uRW5kPWZ1bmN0aW9uKGUpe2U9PT1tLlpfT0smJihcInN0cmluZ1wiPT09dGhpcy5vcHRpb25zLnRvP3RoaXMucmVzdWx0PXRoaXMuY2h1bmtzLmpvaW4oXCJcIik6dGhpcy5yZXN1bHQ9ZC5mbGF0dGVuQ2h1bmtzKHRoaXMuY2h1bmtzKSksdGhpcy5jaHVua3M9W10sdGhpcy5lcnI9ZSx0aGlzLm1zZz10aGlzLnN0cm0ubXNnfSxyLkluZmxhdGU9YSxyLmluZmxhdGU9byxyLmluZmxhdGVSYXc9ZnVuY3Rpb24oZSx0KXtyZXR1cm4odD10fHx7fSkucmF3PSEwLG8oZSx0KX0sci51bmd6aXA9b30se1wiLi91dGlscy9jb21tb25cIjo0MSxcIi4vdXRpbHMvc3RyaW5nc1wiOjQyLFwiLi96bGliL2NvbnN0YW50c1wiOjQ0LFwiLi96bGliL2d6aGVhZGVyXCI6NDcsXCIuL3psaWIvaW5mbGF0ZVwiOjQ5LFwiLi96bGliL21lc3NhZ2VzXCI6NTEsXCIuL3psaWIvenN0cmVhbVwiOjUzfV0sNDE6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhBcnJheSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQxNkFycmF5JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgSW50MzJBcnJheTtyLmFzc2lnbj1mdW5jdGlvbihlKXtmb3IodmFyIHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO3QubGVuZ3RoOyl7dmFyIHI9dC5zaGlmdCgpO2lmKHIpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiByKXRocm93IG5ldyBUeXBlRXJyb3IocitcIm11c3QgYmUgbm9uLW9iamVjdFwiKTtmb3IodmFyIG4gaW4gcilyLmhhc093blByb3BlcnR5KG4pJiYoZVtuXT1yW25dKX19cmV0dXJuIGV9LHIuc2hyaW5rQnVmPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUubGVuZ3RoPT09dD9lOmUuc3ViYXJyYXk/ZS5zdWJhcnJheSgwLHQpOihlLmxlbmd0aD10LGUpfTt2YXIgaT17YXJyYXlTZXQ6ZnVuY3Rpb24oZSx0LHIsbixpKXtpZih0LnN1YmFycmF5JiZlLnN1YmFycmF5KWUuc2V0KHQuc3ViYXJyYXkocixyK24pLGkpO2Vsc2UgZm9yKHZhciBzPTA7czxuO3MrKyllW2krc109dFtyK3NdfSxmbGF0dGVuQ2h1bmtzOmZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpLHMsYTtmb3IodD1uPTAscj1lLmxlbmd0aDt0PHI7dCsrKW4rPWVbdF0ubGVuZ3RoO2ZvcihhPW5ldyBVaW50OEFycmF5KG4pLHQ9aT0wLHI9ZS5sZW5ndGg7dDxyO3QrKylzPWVbdF0sYS5zZXQocyxpKSxpKz1zLmxlbmd0aDtyZXR1cm4gYX19LHM9e2FycmF5U2V0OmZ1bmN0aW9uKGUsdCxyLG4saSl7Zm9yKHZhciBzPTA7czxuO3MrKyllW2krc109dFtyK3NdfSxmbGF0dGVuQ2h1bmtzOmZ1bmN0aW9uKGUpe3JldHVybltdLmNvbmNhdC5hcHBseShbXSxlKX19O3Iuc2V0VHlwZWQ9ZnVuY3Rpb24oZSl7ZT8oci5CdWY4PVVpbnQ4QXJyYXksci5CdWYxNj1VaW50MTZBcnJheSxyLkJ1ZjMyPUludDMyQXJyYXksci5hc3NpZ24ocixpKSk6KHIuQnVmOD1BcnJheSxyLkJ1ZjE2PUFycmF5LHIuQnVmMzI9QXJyYXksci5hc3NpZ24ocixzKSl9LHIuc2V0VHlwZWQobil9LHt9XSw0MjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBoPWUoXCIuL2NvbW1vblwiKSxpPSEwLHM9ITA7dHJ5e1N0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxbMF0pfWNhdGNoKGUpe2k9ITF9dHJ5e1N0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxuZXcgVWludDhBcnJheSgxKSl9Y2F0Y2goZSl7cz0hMX1mb3IodmFyIHU9bmV3IGguQnVmOCgyNTYpLG49MDtuPDI1NjtuKyspdVtuXT0yNTI8PW4/NjoyNDg8PW4/NToyNDA8PW4/NDoyMjQ8PW4/MzoxOTI8PW4/MjoxO2Z1bmN0aW9uIGwoZSx0KXtpZih0PDY1NTM3JiYoZS5zdWJhcnJheSYmc3x8IWUuc3ViYXJyYXkmJmkpKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsaC5zaHJpbmtCdWYoZSx0KSk7Zm9yKHZhciByPVwiXCIsbj0wO248dDtuKyspcis9U3RyaW5nLmZyb21DaGFyQ29kZShlW25dKTtyZXR1cm4gcn11WzI1NF09dVsyNTRdPTEsci5zdHJpbmcyYnVmPWZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpLHMsYT1lLmxlbmd0aCxvPTA7Zm9yKGk9MDtpPGE7aSsrKTU1Mjk2PT0oNjQ1MTImKHI9ZS5jaGFyQ29kZUF0KGkpKSkmJmkrMTxhJiY1NjMyMD09KDY0NTEyJihuPWUuY2hhckNvZGVBdChpKzEpKSkmJihyPTY1NTM2KyhyLTU1Mjk2PDwxMCkrKG4tNTYzMjApLGkrKyksbys9cjwxMjg/MTpyPDIwNDg/MjpyPDY1NTM2PzM6NDtmb3IodD1uZXcgaC5CdWY4KG8pLGk9cz0wO3M8bztpKyspNTUyOTY9PSg2NDUxMiYocj1lLmNoYXJDb2RlQXQoaSkpKSYmaSsxPGEmJjU2MzIwPT0oNjQ1MTImKG49ZS5jaGFyQ29kZUF0KGkrMSkpKSYmKHI9NjU1MzYrKHItNTUyOTY8PDEwKSsobi01NjMyMCksaSsrKSxyPDEyOD90W3MrK109cjoocjwyMDQ4P3RbcysrXT0xOTJ8cj4+PjY6KHI8NjU1MzY/dFtzKytdPTIyNHxyPj4+MTI6KHRbcysrXT0yNDB8cj4+PjE4LHRbcysrXT0xMjh8cj4+PjEyJjYzKSx0W3MrK109MTI4fHI+Pj42JjYzKSx0W3MrK109MTI4fDYzJnIpO3JldHVybiB0fSxyLmJ1ZjJiaW5zdHJpbmc9ZnVuY3Rpb24oZSl7cmV0dXJuIGwoZSxlLmxlbmd0aCl9LHIuYmluc3RyaW5nMmJ1Zj1mdW5jdGlvbihlKXtmb3IodmFyIHQ9bmV3IGguQnVmOChlLmxlbmd0aCkscj0wLG49dC5sZW5ndGg7cjxuO3IrKyl0W3JdPWUuY2hhckNvZGVBdChyKTtyZXR1cm4gdH0sci5idWYyc3RyaW5nPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpLHMsYT10fHxlLmxlbmd0aCxvPW5ldyBBcnJheSgyKmEpO2ZvcihyPW49MDtyPGE7KWlmKChpPWVbcisrXSk8MTI4KW9bbisrXT1pO2Vsc2UgaWYoNDwocz11W2ldKSlvW24rK109NjU1MzMscis9cy0xO2Vsc2V7Zm9yKGkmPTI9PT1zPzMxOjM9PT1zPzE1Ojc7MTxzJiZyPGE7KWk9aTw8Nnw2MyZlW3IrK10scy0tOzE8cz9vW24rK109NjU1MzM6aTw2NTUzNj9vW24rK109aTooaS09NjU1MzYsb1tuKytdPTU1Mjk2fGk+PjEwJjEwMjMsb1tuKytdPTU2MzIwfDEwMjMmaSl9cmV0dXJuIGwobyxuKX0sci51dGY4Ym9yZGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI7Zm9yKCh0PXR8fGUubGVuZ3RoKT5lLmxlbmd0aCYmKHQ9ZS5sZW5ndGgpLHI9dC0xOzA8PXImJjEyOD09KDE5MiZlW3JdKTspci0tO3JldHVybiByPDA/dDowPT09cj90OnIrdVtlW3JdXT50P3I6dH19LHtcIi4vY29tbW9uXCI6NDF9XSw0MzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscixuKXtmb3IodmFyIGk9NjU1MzUmZXwwLHM9ZT4+PjE2JjY1NTM1fDAsYT0wOzAhPT1yOyl7Zm9yKHItPWE9MmUzPHI/MmUzOnI7cz1zKyhpPWkrdFtuKytdfDApfDAsLS1hOyk7aSU9NjU1MjEscyU9NjU1MjF9cmV0dXJuIGl8czw8MTZ8MH19LHt9XSw0NDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz17Wl9OT19GTFVTSDowLFpfUEFSVElBTF9GTFVTSDoxLFpfU1lOQ19GTFVTSDoyLFpfRlVMTF9GTFVTSDozLFpfRklOSVNIOjQsWl9CTE9DSzo1LFpfVFJFRVM6NixaX09LOjAsWl9TVFJFQU1fRU5EOjEsWl9ORUVEX0RJQ1Q6MixaX0VSUk5POi0xLFpfU1RSRUFNX0VSUk9SOi0yLFpfREFUQV9FUlJPUjotMyxaX0JVRl9FUlJPUjotNSxaX05PX0NPTVBSRVNTSU9OOjAsWl9CRVNUX1NQRUVEOjEsWl9CRVNUX0NPTVBSRVNTSU9OOjksWl9ERUZBVUxUX0NPTVBSRVNTSU9OOi0xLFpfRklMVEVSRUQ6MSxaX0hVRkZNQU5fT05MWToyLFpfUkxFOjMsWl9GSVhFRDo0LFpfREVGQVVMVF9TVFJBVEVHWTowLFpfQklOQVJZOjAsWl9URVhUOjEsWl9VTktOT1dOOjIsWl9ERUZMQVRFRDo4fX0se31dLDQ1OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89ZnVuY3Rpb24oKXtmb3IodmFyIGUsdD1bXSxyPTA7cjwyNTY7cisrKXtlPXI7Zm9yKHZhciBuPTA7bjw4O24rKyllPTEmZT8zOTg4MjkyMzg0XmU+Pj4xOmU+Pj4xO3Rbcl09ZX1yZXR1cm4gdH0oKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIsbil7dmFyIGk9byxzPW4rcjtlXj0tMTtmb3IodmFyIGE9bjthPHM7YSsrKWU9ZT4+PjheaVsyNTUmKGVedFthXSldO3JldHVybi0xXmV9fSx7fV0sNDY6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaCxjPWUoXCIuLi91dGlscy9jb21tb25cIiksdT1lKFwiLi90cmVlc1wiKSxkPWUoXCIuL2FkbGVyMzJcIikscD1lKFwiLi9jcmMzMlwiKSxuPWUoXCIuL21lc3NhZ2VzXCIpLGw9MCxmPTQsbT0wLF89LTIsZz0tMSxiPTQsaT0yLHY9OCx5PTkscz0yODYsYT0zMCxvPTE5LHc9MipzKzEsaz0xNSx4PTMsUz0yNTgsej1TK3grMSxDPTQyLEU9MTEzLEE9MSxJPTIsTz0zLEI9NDtmdW5jdGlvbiBSKGUsdCl7cmV0dXJuIGUubXNnPW5bdF0sdH1mdW5jdGlvbiBUKGUpe3JldHVybihlPDwxKS0oNDxlPzk6MCl9ZnVuY3Rpb24gRChlKXtmb3IodmFyIHQ9ZS5sZW5ndGg7MDw9LS10OyllW3RdPTB9ZnVuY3Rpb24gRihlKXt2YXIgdD1lLnN0YXRlLHI9dC5wZW5kaW5nO3I+ZS5hdmFpbF9vdXQmJihyPWUuYXZhaWxfb3V0KSwwIT09ciYmKGMuYXJyYXlTZXQoZS5vdXRwdXQsdC5wZW5kaW5nX2J1Zix0LnBlbmRpbmdfb3V0LHIsZS5uZXh0X291dCksZS5uZXh0X291dCs9cix0LnBlbmRpbmdfb3V0Kz1yLGUudG90YWxfb3V0Kz1yLGUuYXZhaWxfb3V0LT1yLHQucGVuZGluZy09ciwwPT09dC5wZW5kaW5nJiYodC5wZW5kaW5nX291dD0wKSl9ZnVuY3Rpb24gTihlLHQpe3UuX3RyX2ZsdXNoX2Jsb2NrKGUsMDw9ZS5ibG9ja19zdGFydD9lLmJsb2NrX3N0YXJ0Oi0xLGUuc3Ryc3RhcnQtZS5ibG9ja19zdGFydCx0KSxlLmJsb2NrX3N0YXJ0PWUuc3Ryc3RhcnQsRihlLnN0cm0pfWZ1bmN0aW9uIFUoZSx0KXtlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXT10fWZ1bmN0aW9uIFAoZSx0KXtlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXT10Pj4+OCYyNTUsZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmcrK109MjU1JnR9ZnVuY3Rpb24gTChlLHQpe3ZhciByLG4saT1lLm1heF9jaGFpbl9sZW5ndGgscz1lLnN0cnN0YXJ0LGE9ZS5wcmV2X2xlbmd0aCxvPWUubmljZV9tYXRjaCxoPWUuc3Ryc3RhcnQ+ZS53X3NpemUtej9lLnN0cnN0YXJ0LShlLndfc2l6ZS16KTowLHU9ZS53aW5kb3csbD1lLndfbWFzayxmPWUucHJldixjPWUuc3Ryc3RhcnQrUyxkPXVbcythLTFdLHA9dVtzK2FdO2UucHJldl9sZW5ndGg+PWUuZ29vZF9tYXRjaCYmKGk+Pj0yKSxvPmUubG9va2FoZWFkJiYobz1lLmxvb2thaGVhZCk7ZG97aWYodVsocj10KSthXT09PXAmJnVbcithLTFdPT09ZCYmdVtyXT09PXVbc10mJnVbKytyXT09PXVbcysxXSl7cys9MixyKys7ZG97fXdoaWxlKHVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZzPGMpO2lmKG49Uy0oYy1zKSxzPWMtUyxhPG4pe2lmKGUubWF0Y2hfc3RhcnQ9dCxvPD0oYT1uKSlicmVhaztkPXVbcythLTFdLHA9dVtzK2FdfX19d2hpbGUoKHQ9Zlt0JmxdKT5oJiYwIT0tLWkpO3JldHVybiBhPD1lLmxvb2thaGVhZD9hOmUubG9va2FoZWFkfWZ1bmN0aW9uIGooZSl7dmFyIHQscixuLGkscyxhLG8saCx1LGwsZj1lLndfc2l6ZTtkb3tpZihpPWUud2luZG93X3NpemUtZS5sb29rYWhlYWQtZS5zdHJzdGFydCxlLnN0cnN0YXJ0Pj1mKyhmLXopKXtmb3IoYy5hcnJheVNldChlLndpbmRvdyxlLndpbmRvdyxmLGYsMCksZS5tYXRjaF9zdGFydC09ZixlLnN0cnN0YXJ0LT1mLGUuYmxvY2tfc3RhcnQtPWYsdD1yPWUuaGFzaF9zaXplO249ZS5oZWFkWy0tdF0sZS5oZWFkW3RdPWY8PW4/bi1mOjAsLS1yOyk7Zm9yKHQ9cj1mO249ZS5wcmV2Wy0tdF0sZS5wcmV2W3RdPWY8PW4/bi1mOjAsLS1yOyk7aSs9Zn1pZigwPT09ZS5zdHJtLmF2YWlsX2luKWJyZWFrO2lmKGE9ZS5zdHJtLG89ZS53aW5kb3csaD1lLnN0cnN0YXJ0K2UubG9va2FoZWFkLHU9aSxsPXZvaWQgMCxsPWEuYXZhaWxfaW4sdTxsJiYobD11KSxyPTA9PT1sPzA6KGEuYXZhaWxfaW4tPWwsYy5hcnJheVNldChvLGEuaW5wdXQsYS5uZXh0X2luLGwsaCksMT09PWEuc3RhdGUud3JhcD9hLmFkbGVyPWQoYS5hZGxlcixvLGwsaCk6Mj09PWEuc3RhdGUud3JhcCYmKGEuYWRsZXI9cChhLmFkbGVyLG8sbCxoKSksYS5uZXh0X2luKz1sLGEudG90YWxfaW4rPWwsbCksZS5sb29rYWhlYWQrPXIsZS5sb29rYWhlYWQrZS5pbnNlcnQ+PXgpZm9yKHM9ZS5zdHJzdGFydC1lLmluc2VydCxlLmluc19oPWUud2luZG93W3NdLGUuaW5zX2g9KGUuaW5zX2g8PGUuaGFzaF9zaGlmdF5lLndpbmRvd1tzKzFdKSZlLmhhc2hfbWFzaztlLmluc2VydCYmKGUuaW5zX2g9KGUuaW5zX2g8PGUuaGFzaF9zaGlmdF5lLndpbmRvd1tzK3gtMV0pJmUuaGFzaF9tYXNrLGUucHJldltzJmUud19tYXNrXT1lLmhlYWRbZS5pbnNfaF0sZS5oZWFkW2UuaW5zX2hdPXMscysrLGUuaW5zZXJ0LS0sIShlLmxvb2thaGVhZCtlLmluc2VydDx4KSk7KTt9d2hpbGUoZS5sb29rYWhlYWQ8eiYmMCE9PWUuc3RybS5hdmFpbF9pbil9ZnVuY3Rpb24gWihlLHQpe2Zvcih2YXIgcixuOzspe2lmKGUubG9va2FoZWFkPHope2lmKGooZSksZS5sb29rYWhlYWQ8eiYmdD09PWwpcmV0dXJuIEE7aWYoMD09PWUubG9va2FoZWFkKWJyZWFrfWlmKHI9MCxlLmxvb2thaGVhZD49eCYmKGUuaW5zX2g9KGUuaW5zX2g8PGUuaGFzaF9zaGlmdF5lLndpbmRvd1tlLnN0cnN0YXJ0K3gtMV0pJmUuaGFzaF9tYXNrLHI9ZS5wcmV2W2Uuc3Ryc3RhcnQmZS53X21hc2tdPWUuaGVhZFtlLmluc19oXSxlLmhlYWRbZS5pbnNfaF09ZS5zdHJzdGFydCksMCE9PXImJmUuc3Ryc3RhcnQtcjw9ZS53X3NpemUteiYmKGUubWF0Y2hfbGVuZ3RoPUwoZSxyKSksZS5tYXRjaF9sZW5ndGg+PXgpaWYobj11Ll90cl90YWxseShlLGUuc3Ryc3RhcnQtZS5tYXRjaF9zdGFydCxlLm1hdGNoX2xlbmd0aC14KSxlLmxvb2thaGVhZC09ZS5tYXRjaF9sZW5ndGgsZS5tYXRjaF9sZW5ndGg8PWUubWF4X2xhenlfbWF0Y2gmJmUubG9va2FoZWFkPj14KXtmb3IoZS5tYXRjaF9sZW5ndGgtLTtlLnN0cnN0YXJ0KyssZS5pbnNfaD0oZS5pbnNfaDw8ZS5oYXNoX3NoaWZ0XmUud2luZG93W2Uuc3Ryc3RhcnQreC0xXSkmZS5oYXNoX21hc2sscj1lLnByZXZbZS5zdHJzdGFydCZlLndfbWFza109ZS5oZWFkW2UuaW5zX2hdLGUuaGVhZFtlLmluc19oXT1lLnN0cnN0YXJ0LDAhPS0tZS5tYXRjaF9sZW5ndGg7KTtlLnN0cnN0YXJ0Kyt9ZWxzZSBlLnN0cnN0YXJ0Kz1lLm1hdGNoX2xlbmd0aCxlLm1hdGNoX2xlbmd0aD0wLGUuaW5zX2g9ZS53aW5kb3dbZS5zdHJzdGFydF0sZS5pbnNfaD0oZS5pbnNfaDw8ZS5oYXNoX3NoaWZ0XmUud2luZG93W2Uuc3Ryc3RhcnQrMV0pJmUuaGFzaF9tYXNrO2Vsc2Ugbj11Ll90cl90YWxseShlLDAsZS53aW5kb3dbZS5zdHJzdGFydF0pLGUubG9va2FoZWFkLS0sZS5zdHJzdGFydCsrO2lmKG4mJihOKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KSlyZXR1cm4gQX1yZXR1cm4gZS5pbnNlcnQ9ZS5zdHJzdGFydDx4LTE/ZS5zdHJzdGFydDp4LTEsdD09PWY/KE4oZSwhMCksMD09PWUuc3RybS5hdmFpbF9vdXQ/TzpCKTplLmxhc3RfbGl0JiYoTihlLCExKSwwPT09ZS5zdHJtLmF2YWlsX291dCk/QTpJfWZ1bmN0aW9uIFcoZSx0KXtmb3IodmFyIHIsbixpOzspe2lmKGUubG9va2FoZWFkPHope2lmKGooZSksZS5sb29rYWhlYWQ8eiYmdD09PWwpcmV0dXJuIEE7aWYoMD09PWUubG9va2FoZWFkKWJyZWFrfWlmKHI9MCxlLmxvb2thaGVhZD49eCYmKGUuaW5zX2g9KGUuaW5zX2g8PGUuaGFzaF9zaGlmdF5lLndpbmRvd1tlLnN0cnN0YXJ0K3gtMV0pJmUuaGFzaF9tYXNrLHI9ZS5wcmV2W2Uuc3Ryc3RhcnQmZS53X21hc2tdPWUuaGVhZFtlLmluc19oXSxlLmhlYWRbZS5pbnNfaF09ZS5zdHJzdGFydCksZS5wcmV2X2xlbmd0aD1lLm1hdGNoX2xlbmd0aCxlLnByZXZfbWF0Y2g9ZS5tYXRjaF9zdGFydCxlLm1hdGNoX2xlbmd0aD14LTEsMCE9PXImJmUucHJldl9sZW5ndGg8ZS5tYXhfbGF6eV9tYXRjaCYmZS5zdHJzdGFydC1yPD1lLndfc2l6ZS16JiYoZS5tYXRjaF9sZW5ndGg9TChlLHIpLGUubWF0Y2hfbGVuZ3RoPD01JiYoMT09PWUuc3RyYXRlZ3l8fGUubWF0Y2hfbGVuZ3RoPT09eCYmNDA5NjxlLnN0cnN0YXJ0LWUubWF0Y2hfc3RhcnQpJiYoZS5tYXRjaF9sZW5ndGg9eC0xKSksZS5wcmV2X2xlbmd0aD49eCYmZS5tYXRjaF9sZW5ndGg8PWUucHJldl9sZW5ndGgpe2ZvcihpPWUuc3Ryc3RhcnQrZS5sb29rYWhlYWQteCxuPXUuX3RyX3RhbGx5KGUsZS5zdHJzdGFydC0xLWUucHJldl9tYXRjaCxlLnByZXZfbGVuZ3RoLXgpLGUubG9va2FoZWFkLT1lLnByZXZfbGVuZ3RoLTEsZS5wcmV2X2xlbmd0aC09MjsrK2Uuc3Ryc3RhcnQ8PWkmJihlLmluc19oPShlLmluc19oPDxlLmhhc2hfc2hpZnReZS53aW5kb3dbZS5zdHJzdGFydCt4LTFdKSZlLmhhc2hfbWFzayxyPWUucHJldltlLnN0cnN0YXJ0JmUud19tYXNrXT1lLmhlYWRbZS5pbnNfaF0sZS5oZWFkW2UuaW5zX2hdPWUuc3Ryc3RhcnQpLDAhPS0tZS5wcmV2X2xlbmd0aDspO2lmKGUubWF0Y2hfYXZhaWxhYmxlPTAsZS5tYXRjaF9sZW5ndGg9eC0xLGUuc3Ryc3RhcnQrKyxuJiYoTihlLCExKSwwPT09ZS5zdHJtLmF2YWlsX291dCkpcmV0dXJuIEF9ZWxzZSBpZihlLm1hdGNoX2F2YWlsYWJsZSl7aWYoKG49dS5fdHJfdGFsbHkoZSwwLGUud2luZG93W2Uuc3Ryc3RhcnQtMV0pKSYmTihlLCExKSxlLnN0cnN0YXJ0KyssZS5sb29rYWhlYWQtLSwwPT09ZS5zdHJtLmF2YWlsX291dClyZXR1cm4gQX1lbHNlIGUubWF0Y2hfYXZhaWxhYmxlPTEsZS5zdHJzdGFydCsrLGUubG9va2FoZWFkLS19cmV0dXJuIGUubWF0Y2hfYXZhaWxhYmxlJiYobj11Ll90cl90YWxseShlLDAsZS53aW5kb3dbZS5zdHJzdGFydC0xXSksZS5tYXRjaF9hdmFpbGFibGU9MCksZS5pbnNlcnQ9ZS5zdHJzdGFydDx4LTE/ZS5zdHJzdGFydDp4LTEsdD09PWY/KE4oZSwhMCksMD09PWUuc3RybS5hdmFpbF9vdXQ/TzpCKTplLmxhc3RfbGl0JiYoTihlLCExKSwwPT09ZS5zdHJtLmF2YWlsX291dCk/QTpJfWZ1bmN0aW9uIE0oZSx0LHIsbixpKXt0aGlzLmdvb2RfbGVuZ3RoPWUsdGhpcy5tYXhfbGF6eT10LHRoaXMubmljZV9sZW5ndGg9cix0aGlzLm1heF9jaGFpbj1uLHRoaXMuZnVuYz1pfWZ1bmN0aW9uIEgoKXt0aGlzLnN0cm09bnVsbCx0aGlzLnN0YXR1cz0wLHRoaXMucGVuZGluZ19idWY9bnVsbCx0aGlzLnBlbmRpbmdfYnVmX3NpemU9MCx0aGlzLnBlbmRpbmdfb3V0PTAsdGhpcy5wZW5kaW5nPTAsdGhpcy53cmFwPTAsdGhpcy5nemhlYWQ9bnVsbCx0aGlzLmd6aW5kZXg9MCx0aGlzLm1ldGhvZD12LHRoaXMubGFzdF9mbHVzaD0tMSx0aGlzLndfc2l6ZT0wLHRoaXMud19iaXRzPTAsdGhpcy53X21hc2s9MCx0aGlzLndpbmRvdz1udWxsLHRoaXMud2luZG93X3NpemU9MCx0aGlzLnByZXY9bnVsbCx0aGlzLmhlYWQ9bnVsbCx0aGlzLmluc19oPTAsdGhpcy5oYXNoX3NpemU9MCx0aGlzLmhhc2hfYml0cz0wLHRoaXMuaGFzaF9tYXNrPTAsdGhpcy5oYXNoX3NoaWZ0PTAsdGhpcy5ibG9ja19zdGFydD0wLHRoaXMubWF0Y2hfbGVuZ3RoPTAsdGhpcy5wcmV2X21hdGNoPTAsdGhpcy5tYXRjaF9hdmFpbGFibGU9MCx0aGlzLnN0cnN0YXJ0PTAsdGhpcy5tYXRjaF9zdGFydD0wLHRoaXMubG9va2FoZWFkPTAsdGhpcy5wcmV2X2xlbmd0aD0wLHRoaXMubWF4X2NoYWluX2xlbmd0aD0wLHRoaXMubWF4X2xhenlfbWF0Y2g9MCx0aGlzLmxldmVsPTAsdGhpcy5zdHJhdGVneT0wLHRoaXMuZ29vZF9tYXRjaD0wLHRoaXMubmljZV9tYXRjaD0wLHRoaXMuZHluX2x0cmVlPW5ldyBjLkJ1ZjE2KDIqdyksdGhpcy5keW5fZHRyZWU9bmV3IGMuQnVmMTYoMiooMiphKzEpKSx0aGlzLmJsX3RyZWU9bmV3IGMuQnVmMTYoMiooMipvKzEpKSxEKHRoaXMuZHluX2x0cmVlKSxEKHRoaXMuZHluX2R0cmVlKSxEKHRoaXMuYmxfdHJlZSksdGhpcy5sX2Rlc2M9bnVsbCx0aGlzLmRfZGVzYz1udWxsLHRoaXMuYmxfZGVzYz1udWxsLHRoaXMuYmxfY291bnQ9bmV3IGMuQnVmMTYoaysxKSx0aGlzLmhlYXA9bmV3IGMuQnVmMTYoMipzKzEpLEQodGhpcy5oZWFwKSx0aGlzLmhlYXBfbGVuPTAsdGhpcy5oZWFwX21heD0wLHRoaXMuZGVwdGg9bmV3IGMuQnVmMTYoMipzKzEpLEQodGhpcy5kZXB0aCksdGhpcy5sX2J1Zj0wLHRoaXMubGl0X2J1ZnNpemU9MCx0aGlzLmxhc3RfbGl0PTAsdGhpcy5kX2J1Zj0wLHRoaXMub3B0X2xlbj0wLHRoaXMuc3RhdGljX2xlbj0wLHRoaXMubWF0Y2hlcz0wLHRoaXMuaW5zZXJ0PTAsdGhpcy5iaV9idWY9MCx0aGlzLmJpX3ZhbGlkPTB9ZnVuY3Rpb24gRyhlKXt2YXIgdDtyZXR1cm4gZSYmZS5zdGF0ZT8oZS50b3RhbF9pbj1lLnRvdGFsX291dD0wLGUuZGF0YV90eXBlPWksKHQ9ZS5zdGF0ZSkucGVuZGluZz0wLHQucGVuZGluZ19vdXQ9MCx0LndyYXA8MCYmKHQud3JhcD0tdC53cmFwKSx0LnN0YXR1cz10LndyYXA/QzpFLGUuYWRsZXI9Mj09PXQud3JhcD8wOjEsdC5sYXN0X2ZsdXNoPWwsdS5fdHJfaW5pdCh0KSxtKTpSKGUsXyl9ZnVuY3Rpb24gSyhlKXt2YXIgdD1HKGUpO3JldHVybiB0PT09bSYmZnVuY3Rpb24oZSl7ZS53aW5kb3dfc2l6ZT0yKmUud19zaXplLEQoZS5oZWFkKSxlLm1heF9sYXp5X21hdGNoPWhbZS5sZXZlbF0ubWF4X2xhenksZS5nb29kX21hdGNoPWhbZS5sZXZlbF0uZ29vZF9sZW5ndGgsZS5uaWNlX21hdGNoPWhbZS5sZXZlbF0ubmljZV9sZW5ndGgsZS5tYXhfY2hhaW5fbGVuZ3RoPWhbZS5sZXZlbF0ubWF4X2NoYWluLGUuc3Ryc3RhcnQ9MCxlLmJsb2NrX3N0YXJ0PTAsZS5sb29rYWhlYWQ9MCxlLmluc2VydD0wLGUubWF0Y2hfbGVuZ3RoPWUucHJldl9sZW5ndGg9eC0xLGUubWF0Y2hfYXZhaWxhYmxlPTAsZS5pbnNfaD0wfShlLnN0YXRlKSx0fWZ1bmN0aW9uIFkoZSx0LHIsbixpLHMpe2lmKCFlKXJldHVybiBfO3ZhciBhPTE7aWYodD09PWcmJih0PTYpLG48MD8oYT0wLG49LW4pOjE1PG4mJihhPTIsbi09MTYpLGk8MXx8eTxpfHxyIT09dnx8bjw4fHwxNTxufHx0PDB8fDk8dHx8czwwfHxiPHMpcmV0dXJuIFIoZSxfKTs4PT09biYmKG49OSk7dmFyIG89bmV3IEg7cmV0dXJuKGUuc3RhdGU9bykuc3RybT1lLG8ud3JhcD1hLG8uZ3poZWFkPW51bGwsby53X2JpdHM9bixvLndfc2l6ZT0xPDxvLndfYml0cyxvLndfbWFzaz1vLndfc2l6ZS0xLG8uaGFzaF9iaXRzPWkrNyxvLmhhc2hfc2l6ZT0xPDxvLmhhc2hfYml0cyxvLmhhc2hfbWFzaz1vLmhhc2hfc2l6ZS0xLG8uaGFzaF9zaGlmdD1+figoby5oYXNoX2JpdHMreC0xKS94KSxvLndpbmRvdz1uZXcgYy5CdWY4KDIqby53X3NpemUpLG8uaGVhZD1uZXcgYy5CdWYxNihvLmhhc2hfc2l6ZSksby5wcmV2PW5ldyBjLkJ1ZjE2KG8ud19zaXplKSxvLmxpdF9idWZzaXplPTE8PGkrNixvLnBlbmRpbmdfYnVmX3NpemU9NCpvLmxpdF9idWZzaXplLG8ucGVuZGluZ19idWY9bmV3IGMuQnVmOChvLnBlbmRpbmdfYnVmX3NpemUpLG8uZF9idWY9MSpvLmxpdF9idWZzaXplLG8ubF9idWY9MypvLmxpdF9idWZzaXplLG8ubGV2ZWw9dCxvLnN0cmF0ZWd5PXMsby5tZXRob2Q9cixLKGUpfWg9W25ldyBNKDAsMCwwLDAsZnVuY3Rpb24oZSx0KXt2YXIgcj02NTUzNTtmb3Iocj5lLnBlbmRpbmdfYnVmX3NpemUtNSYmKHI9ZS5wZW5kaW5nX2J1Zl9zaXplLTUpOzspe2lmKGUubG9va2FoZWFkPD0xKXtpZihqKGUpLDA9PT1lLmxvb2thaGVhZCYmdD09PWwpcmV0dXJuIEE7aWYoMD09PWUubG9va2FoZWFkKWJyZWFrfWUuc3Ryc3RhcnQrPWUubG9va2FoZWFkLGUubG9va2FoZWFkPTA7dmFyIG49ZS5ibG9ja19zdGFydCtyO2lmKCgwPT09ZS5zdHJzdGFydHx8ZS5zdHJzdGFydD49bikmJihlLmxvb2thaGVhZD1lLnN0cnN0YXJ0LW4sZS5zdHJzdGFydD1uLE4oZSwhMSksMD09PWUuc3RybS5hdmFpbF9vdXQpKXJldHVybiBBO2lmKGUuc3Ryc3RhcnQtZS5ibG9ja19zdGFydD49ZS53X3NpemUteiYmKE4oZSwhMSksMD09PWUuc3RybS5hdmFpbF9vdXQpKXJldHVybiBBfXJldHVybiBlLmluc2VydD0wLHQ9PT1mPyhOKGUsITApLDA9PT1lLnN0cm0uYXZhaWxfb3V0P086Qik6KGUuc3Ryc3RhcnQ+ZS5ibG9ja19zdGFydCYmKE4oZSwhMSksZS5zdHJtLmF2YWlsX291dCksQSl9KSxuZXcgTSg0LDQsOCw0LFopLG5ldyBNKDQsNSwxNiw4LFopLG5ldyBNKDQsNiwzMiwzMixaKSxuZXcgTSg0LDQsMTYsMTYsVyksbmV3IE0oOCwxNiwzMiwzMixXKSxuZXcgTSg4LDE2LDEyOCwxMjgsVyksbmV3IE0oOCwzMiwxMjgsMjU2LFcpLG5ldyBNKDMyLDEyOCwyNTgsMTAyNCxXKSxuZXcgTSgzMiwyNTgsMjU4LDQwOTYsVyldLHIuZGVmbGF0ZUluaXQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gWShlLHQsdiwxNSw4LDApfSxyLmRlZmxhdGVJbml0Mj1ZLHIuZGVmbGF0ZVJlc2V0PUssci5kZWZsYXRlUmVzZXRLZWVwPUcsci5kZWZsYXRlU2V0SGVhZGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUmJmUuc3RhdGU/MiE9PWUuc3RhdGUud3JhcD9fOihlLnN0YXRlLmd6aGVhZD10LG0pOl99LHIuZGVmbGF0ZT1mdW5jdGlvbihlLHQpe3ZhciByLG4saSxzO2lmKCFlfHwhZS5zdGF0ZXx8NTx0fHx0PDApcmV0dXJuIGU/UihlLF8pOl87aWYobj1lLnN0YXRlLCFlLm91dHB1dHx8IWUuaW5wdXQmJjAhPT1lLmF2YWlsX2lufHw2NjY9PT1uLnN0YXR1cyYmdCE9PWYpcmV0dXJuIFIoZSwwPT09ZS5hdmFpbF9vdXQ/LTU6Xyk7aWYobi5zdHJtPWUscj1uLmxhc3RfZmx1c2gsbi5sYXN0X2ZsdXNoPXQsbi5zdGF0dXM9PT1DKWlmKDI9PT1uLndyYXApZS5hZGxlcj0wLFUobiwzMSksVShuLDEzOSksVShuLDgpLG4uZ3poZWFkPyhVKG4sKG4uZ3poZWFkLnRleHQ/MTowKSsobi5nemhlYWQuaGNyYz8yOjApKyhuLmd6aGVhZC5leHRyYT80OjApKyhuLmd6aGVhZC5uYW1lPzg6MCkrKG4uZ3poZWFkLmNvbW1lbnQ/MTY6MCkpLFUobiwyNTUmbi5nemhlYWQudGltZSksVShuLG4uZ3poZWFkLnRpbWU+PjgmMjU1KSxVKG4sbi5nemhlYWQudGltZT4+MTYmMjU1KSxVKG4sbi5nemhlYWQudGltZT4+MjQmMjU1KSxVKG4sOT09PW4ubGV2ZWw/MjoyPD1uLnN0cmF0ZWd5fHxuLmxldmVsPDI/NDowKSxVKG4sMjU1Jm4uZ3poZWFkLm9zKSxuLmd6aGVhZC5leHRyYSYmbi5nemhlYWQuZXh0cmEubGVuZ3RoJiYoVShuLDI1NSZuLmd6aGVhZC5leHRyYS5sZW5ndGgpLFUobixuLmd6aGVhZC5leHRyYS5sZW5ndGg+PjgmMjU1KSksbi5nemhlYWQuaGNyYyYmKGUuYWRsZXI9cChlLmFkbGVyLG4ucGVuZGluZ19idWYsbi5wZW5kaW5nLDApKSxuLmd6aW5kZXg9MCxuLnN0YXR1cz02OSk6KFUobiwwKSxVKG4sMCksVShuLDApLFUobiwwKSxVKG4sMCksVShuLDk9PT1uLmxldmVsPzI6Mjw9bi5zdHJhdGVneXx8bi5sZXZlbDwyPzQ6MCksVShuLDMpLG4uc3RhdHVzPUUpO2Vsc2V7dmFyIGE9disobi53X2JpdHMtODw8NCk8PDg7YXw9KDI8PW4uc3RyYXRlZ3l8fG4ubGV2ZWw8Mj8wOm4ubGV2ZWw8Nj8xOjY9PT1uLmxldmVsPzI6Myk8PDYsMCE9PW4uc3Ryc3RhcnQmJihhfD0zMiksYSs9MzEtYSUzMSxuLnN0YXR1cz1FLFAobixhKSwwIT09bi5zdHJzdGFydCYmKFAobixlLmFkbGVyPj4+MTYpLFAobiw2NTUzNSZlLmFkbGVyKSksZS5hZGxlcj0xfWlmKDY5PT09bi5zdGF0dXMpaWYobi5nemhlYWQuZXh0cmEpe2ZvcihpPW4ucGVuZGluZztuLmd6aW5kZXg8KDY1NTM1Jm4uZ3poZWFkLmV4dHJhLmxlbmd0aCkmJihuLnBlbmRpbmchPT1uLnBlbmRpbmdfYnVmX3NpemV8fChuLmd6aGVhZC5oY3JjJiZuLnBlbmRpbmc+aSYmKGUuYWRsZXI9cChlLmFkbGVyLG4ucGVuZGluZ19idWYsbi5wZW5kaW5nLWksaSkpLEYoZSksaT1uLnBlbmRpbmcsbi5wZW5kaW5nIT09bi5wZW5kaW5nX2J1Zl9zaXplKSk7KVUobiwyNTUmbi5nemhlYWQuZXh0cmFbbi5nemluZGV4XSksbi5nemluZGV4Kys7bi5nemhlYWQuaGNyYyYmbi5wZW5kaW5nPmkmJihlLmFkbGVyPXAoZS5hZGxlcixuLnBlbmRpbmdfYnVmLG4ucGVuZGluZy1pLGkpKSxuLmd6aW5kZXg9PT1uLmd6aGVhZC5leHRyYS5sZW5ndGgmJihuLmd6aW5kZXg9MCxuLnN0YXR1cz03Myl9ZWxzZSBuLnN0YXR1cz03MztpZig3Mz09PW4uc3RhdHVzKWlmKG4uZ3poZWFkLm5hbWUpe2k9bi5wZW5kaW5nO2Rve2lmKG4ucGVuZGluZz09PW4ucGVuZGluZ19idWZfc2l6ZSYmKG4uZ3poZWFkLmhjcmMmJm4ucGVuZGluZz5pJiYoZS5hZGxlcj1wKGUuYWRsZXIsbi5wZW5kaW5nX2J1ZixuLnBlbmRpbmctaSxpKSksRihlKSxpPW4ucGVuZGluZyxuLnBlbmRpbmc9PT1uLnBlbmRpbmdfYnVmX3NpemUpKXtzPTE7YnJlYWt9cz1uLmd6aW5kZXg8bi5nemhlYWQubmFtZS5sZW5ndGg/MjU1Jm4uZ3poZWFkLm5hbWUuY2hhckNvZGVBdChuLmd6aW5kZXgrKyk6MCxVKG4scyl9d2hpbGUoMCE9PXMpO24uZ3poZWFkLmhjcmMmJm4ucGVuZGluZz5pJiYoZS5hZGxlcj1wKGUuYWRsZXIsbi5wZW5kaW5nX2J1ZixuLnBlbmRpbmctaSxpKSksMD09PXMmJihuLmd6aW5kZXg9MCxuLnN0YXR1cz05MSl9ZWxzZSBuLnN0YXR1cz05MTtpZig5MT09PW4uc3RhdHVzKWlmKG4uZ3poZWFkLmNvbW1lbnQpe2k9bi5wZW5kaW5nO2Rve2lmKG4ucGVuZGluZz09PW4ucGVuZGluZ19idWZfc2l6ZSYmKG4uZ3poZWFkLmhjcmMmJm4ucGVuZGluZz5pJiYoZS5hZGxlcj1wKGUuYWRsZXIsbi5wZW5kaW5nX2J1ZixuLnBlbmRpbmctaSxpKSksRihlKSxpPW4ucGVuZGluZyxuLnBlbmRpbmc9PT1uLnBlbmRpbmdfYnVmX3NpemUpKXtzPTE7YnJlYWt9cz1uLmd6aW5kZXg8bi5nemhlYWQuY29tbWVudC5sZW5ndGg/MjU1Jm4uZ3poZWFkLmNvbW1lbnQuY2hhckNvZGVBdChuLmd6aW5kZXgrKyk6MCxVKG4scyl9d2hpbGUoMCE9PXMpO24uZ3poZWFkLmhjcmMmJm4ucGVuZGluZz5pJiYoZS5hZGxlcj1wKGUuYWRsZXIsbi5wZW5kaW5nX2J1ZixuLnBlbmRpbmctaSxpKSksMD09PXMmJihuLnN0YXR1cz0xMDMpfWVsc2Ugbi5zdGF0dXM9MTAzO2lmKDEwMz09PW4uc3RhdHVzJiYobi5nemhlYWQuaGNyYz8obi5wZW5kaW5nKzI+bi5wZW5kaW5nX2J1Zl9zaXplJiZGKGUpLG4ucGVuZGluZysyPD1uLnBlbmRpbmdfYnVmX3NpemUmJihVKG4sMjU1JmUuYWRsZXIpLFUobixlLmFkbGVyPj44JjI1NSksZS5hZGxlcj0wLG4uc3RhdHVzPUUpKTpuLnN0YXR1cz1FKSwwIT09bi5wZW5kaW5nKXtpZihGKGUpLDA9PT1lLmF2YWlsX291dClyZXR1cm4gbi5sYXN0X2ZsdXNoPS0xLG19ZWxzZSBpZigwPT09ZS5hdmFpbF9pbiYmVCh0KTw9VChyKSYmdCE9PWYpcmV0dXJuIFIoZSwtNSk7aWYoNjY2PT09bi5zdGF0dXMmJjAhPT1lLmF2YWlsX2luKXJldHVybiBSKGUsLTUpO2lmKDAhPT1lLmF2YWlsX2lufHwwIT09bi5sb29rYWhlYWR8fHQhPT1sJiY2NjYhPT1uLnN0YXR1cyl7dmFyIG89Mj09PW4uc3RyYXRlZ3k/ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI7Oyl7aWYoMD09PWUubG9va2FoZWFkJiYoaihlKSwwPT09ZS5sb29rYWhlYWQpKXtpZih0PT09bClyZXR1cm4gQTticmVha31pZihlLm1hdGNoX2xlbmd0aD0wLHI9dS5fdHJfdGFsbHkoZSwwLGUud2luZG93W2Uuc3Ryc3RhcnRdKSxlLmxvb2thaGVhZC0tLGUuc3Ryc3RhcnQrKyxyJiYoTihlLCExKSwwPT09ZS5zdHJtLmF2YWlsX291dCkpcmV0dXJuIEF9cmV0dXJuIGUuaW5zZXJ0PTAsdD09PWY/KE4oZSwhMCksMD09PWUuc3RybS5hdmFpbF9vdXQ/TzpCKTplLmxhc3RfbGl0JiYoTihlLCExKSwwPT09ZS5zdHJtLmF2YWlsX291dCk/QTpJfShuLHQpOjM9PT1uLnN0cmF0ZWd5P2Z1bmN0aW9uKGUsdCl7Zm9yKHZhciByLG4saSxzLGE9ZS53aW5kb3c7Oyl7aWYoZS5sb29rYWhlYWQ8PVMpe2lmKGooZSksZS5sb29rYWhlYWQ8PVMmJnQ9PT1sKXJldHVybiBBO2lmKDA9PT1lLmxvb2thaGVhZClicmVha31pZihlLm1hdGNoX2xlbmd0aD0wLGUubG9va2FoZWFkPj14JiYwPGUuc3Ryc3RhcnQmJihuPWFbaT1lLnN0cnN0YXJ0LTFdKT09PWFbKytpXSYmbj09PWFbKytpXSYmbj09PWFbKytpXSl7cz1lLnN0cnN0YXJ0K1M7ZG97fXdoaWxlKG49PT1hWysraV0mJm49PT1hWysraV0mJm49PT1hWysraV0mJm49PT1hWysraV0mJm49PT1hWysraV0mJm49PT1hWysraV0mJm49PT1hWysraV0mJm49PT1hWysraV0mJmk8cyk7ZS5tYXRjaF9sZW5ndGg9Uy0ocy1pKSxlLm1hdGNoX2xlbmd0aD5lLmxvb2thaGVhZCYmKGUubWF0Y2hfbGVuZ3RoPWUubG9va2FoZWFkKX1pZihlLm1hdGNoX2xlbmd0aD49eD8ocj11Ll90cl90YWxseShlLDEsZS5tYXRjaF9sZW5ndGgteCksZS5sb29rYWhlYWQtPWUubWF0Y2hfbGVuZ3RoLGUuc3Ryc3RhcnQrPWUubWF0Y2hfbGVuZ3RoLGUubWF0Y2hfbGVuZ3RoPTApOihyPXUuX3RyX3RhbGx5KGUsMCxlLndpbmRvd1tlLnN0cnN0YXJ0XSksZS5sb29rYWhlYWQtLSxlLnN0cnN0YXJ0KyspLHImJihOKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KSlyZXR1cm4gQX1yZXR1cm4gZS5pbnNlcnQ9MCx0PT09Zj8oTihlLCEwKSwwPT09ZS5zdHJtLmF2YWlsX291dD9POkIpOmUubGFzdF9saXQmJihOKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KT9BOkl9KG4sdCk6aFtuLmxldmVsXS5mdW5jKG4sdCk7aWYobyE9PU8mJm8hPT1CfHwobi5zdGF0dXM9NjY2KSxvPT09QXx8bz09PU8pcmV0dXJuIDA9PT1lLmF2YWlsX291dCYmKG4ubGFzdF9mbHVzaD0tMSksbTtpZihvPT09SSYmKDE9PT10P3UuX3RyX2FsaWduKG4pOjUhPT10JiYodS5fdHJfc3RvcmVkX2Jsb2NrKG4sMCwwLCExKSwzPT09dCYmKEQobi5oZWFkKSwwPT09bi5sb29rYWhlYWQmJihuLnN0cnN0YXJ0PTAsbi5ibG9ja19zdGFydD0wLG4uaW5zZXJ0PTApKSksRihlKSwwPT09ZS5hdmFpbF9vdXQpKXJldHVybiBuLmxhc3RfZmx1c2g9LTEsbX1yZXR1cm4gdCE9PWY/bTpuLndyYXA8PTA/MTooMj09PW4ud3JhcD8oVShuLDI1NSZlLmFkbGVyKSxVKG4sZS5hZGxlcj4+OCYyNTUpLFUobixlLmFkbGVyPj4xNiYyNTUpLFUobixlLmFkbGVyPj4yNCYyNTUpLFUobiwyNTUmZS50b3RhbF9pbiksVShuLGUudG90YWxfaW4+PjgmMjU1KSxVKG4sZS50b3RhbF9pbj4+MTYmMjU1KSxVKG4sZS50b3RhbF9pbj4+MjQmMjU1KSk6KFAobixlLmFkbGVyPj4+MTYpLFAobiw2NTUzNSZlLmFkbGVyKSksRihlKSwwPG4ud3JhcCYmKG4ud3JhcD0tbi53cmFwKSwwIT09bi5wZW5kaW5nP206MSl9LHIuZGVmbGF0ZUVuZD1mdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gZSYmZS5zdGF0ZT8odD1lLnN0YXRlLnN0YXR1cykhPT1DJiY2OSE9PXQmJjczIT09dCYmOTEhPT10JiYxMDMhPT10JiZ0IT09RSYmNjY2IT09dD9SKGUsXyk6KGUuc3RhdGU9bnVsbCx0PT09RT9SKGUsLTMpOm0pOl99LHIuZGVmbGF0ZVNldERpY3Rpb25hcnk9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGkscyxhLG8saCx1LGw9dC5sZW5ndGg7aWYoIWV8fCFlLnN0YXRlKXJldHVybiBfO2lmKDI9PT0ocz0ocj1lLnN0YXRlKS53cmFwKXx8MT09PXMmJnIuc3RhdHVzIT09Q3x8ci5sb29rYWhlYWQpcmV0dXJuIF87Zm9yKDE9PT1zJiYoZS5hZGxlcj1kKGUuYWRsZXIsdCxsLDApKSxyLndyYXA9MCxsPj1yLndfc2l6ZSYmKDA9PT1zJiYoRChyLmhlYWQpLHIuc3Ryc3RhcnQ9MCxyLmJsb2NrX3N0YXJ0PTAsci5pbnNlcnQ9MCksdT1uZXcgYy5CdWY4KHIud19zaXplKSxjLmFycmF5U2V0KHUsdCxsLXIud19zaXplLHIud19zaXplLDApLHQ9dSxsPXIud19zaXplKSxhPWUuYXZhaWxfaW4sbz1lLm5leHRfaW4saD1lLmlucHV0LGUuYXZhaWxfaW49bCxlLm5leHRfaW49MCxlLmlucHV0PXQsaihyKTtyLmxvb2thaGVhZD49eDspe2ZvcihuPXIuc3Ryc3RhcnQsaT1yLmxvb2thaGVhZC0oeC0xKTtyLmluc19oPShyLmluc19oPDxyLmhhc2hfc2hpZnReci53aW5kb3dbbit4LTFdKSZyLmhhc2hfbWFzayxyLnByZXZbbiZyLndfbWFza109ci5oZWFkW3IuaW5zX2hdLHIuaGVhZFtyLmluc19oXT1uLG4rKywtLWk7KTtyLnN0cnN0YXJ0PW4sci5sb29rYWhlYWQ9eC0xLGoocil9cmV0dXJuIHIuc3Ryc3RhcnQrPXIubG9va2FoZWFkLHIuYmxvY2tfc3RhcnQ9ci5zdHJzdGFydCxyLmluc2VydD1yLmxvb2thaGVhZCxyLmxvb2thaGVhZD0wLHIubWF0Y2hfbGVuZ3RoPXIucHJldl9sZW5ndGg9eC0xLHIubWF0Y2hfYXZhaWxhYmxlPTAsZS5uZXh0X2luPW8sZS5pbnB1dD1oLGUuYXZhaWxfaW49YSxyLndyYXA9cyxtfSxyLmRlZmxhdGVJbmZvPVwicGFrbyBkZWZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KVwifSx7XCIuLi91dGlscy9jb21tb25cIjo0MSxcIi4vYWRsZXIzMlwiOjQzLFwiLi9jcmMzMlwiOjQ1LFwiLi9tZXNzYWdlc1wiOjUxLFwiLi90cmVlc1wiOjUyfV0sNDc6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt0LmV4cG9ydHM9ZnVuY3Rpb24oKXt0aGlzLnRleHQ9MCx0aGlzLnRpbWU9MCx0aGlzLnhmbGFncz0wLHRoaXMub3M9MCx0aGlzLmV4dHJhPW51bGwsdGhpcy5leHRyYV9sZW49MCx0aGlzLm5hbWU9XCJcIix0aGlzLmNvbW1lbnQ9XCJcIix0aGlzLmhjcmM9MCx0aGlzLmRvbmU9ITF9fSx7fV0sNDg6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGkscyxhLG8saCx1LGwsZixjLGQscCxtLF8sZyxiLHYseSx3LGsseCxTLHosQztyPWUuc3RhdGUsbj1lLm5leHRfaW4sej1lLmlucHV0LGk9bisoZS5hdmFpbF9pbi01KSxzPWUubmV4dF9vdXQsQz1lLm91dHB1dCxhPXMtKHQtZS5hdmFpbF9vdXQpLG89cysoZS5hdmFpbF9vdXQtMjU3KSxoPXIuZG1heCx1PXIud3NpemUsbD1yLndoYXZlLGY9ci53bmV4dCxjPXIud2luZG93LGQ9ci5ob2xkLHA9ci5iaXRzLG09ci5sZW5jb2RlLF89ci5kaXN0Y29kZSxnPSgxPDxyLmxlbmJpdHMpLTEsYj0oMTw8ci5kaXN0Yml0cyktMTtlOmRve3A8MTUmJihkKz16W24rK108PHAscCs9OCxkKz16W24rK108PHAscCs9OCksdj1tW2QmZ107dDpmb3IoOzspe2lmKGQ+Pj49eT12Pj4+MjQscC09eSwwPT09KHk9dj4+PjE2JjI1NSkpQ1tzKytdPTY1NTM1JnY7ZWxzZXtpZighKDE2JnkpKXtpZigwPT0oNjQmeSkpe3Y9bVsoNjU1MzUmdikrKGQmKDE8PHkpLTEpXTtjb250aW51ZSB0fWlmKDMyJnkpe3IubW9kZT0xMjticmVhayBlfWUubXNnPVwiaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlXCIsci5tb2RlPTMwO2JyZWFrIGV9dz02NTUzNSZ2LCh5Jj0xNSkmJihwPHkmJihkKz16W24rK108PHAscCs9OCksdys9ZCYoMTw8eSktMSxkPj4+PXkscC09eSkscDwxNSYmKGQrPXpbbisrXTw8cCxwKz04LGQrPXpbbisrXTw8cCxwKz04KSx2PV9bZCZiXTtyOmZvcig7Oyl7aWYoZD4+Pj15PXY+Pj4yNCxwLT15LCEoMTYmKHk9dj4+PjE2JjI1NSkpKXtpZigwPT0oNjQmeSkpe3Y9X1soNjU1MzUmdikrKGQmKDE8PHkpLTEpXTtjb250aW51ZSByfWUubXNnPVwiaW52YWxpZCBkaXN0YW5jZSBjb2RlXCIsci5tb2RlPTMwO2JyZWFrIGV9aWYoaz02NTUzNSZ2LHA8KHkmPTE1KSYmKGQrPXpbbisrXTw8cCwocCs9OCk8eSYmKGQrPXpbbisrXTw8cCxwKz04KSksaDwoays9ZCYoMTw8eSktMSkpe2UubXNnPVwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIixyLm1vZGU9MzA7YnJlYWsgZX1pZihkPj4+PXkscC09eSwoeT1zLWEpPGspe2lmKGw8KHk9ay15KSYmci5zYW5lKXtlLm1zZz1cImludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrXCIsci5tb2RlPTMwO2JyZWFrIGV9aWYoUz1jLCh4PTApPT09Zil7aWYoeCs9dS15LHk8dyl7Zm9yKHctPXk7Q1tzKytdPWNbeCsrXSwtLXk7KTt4PXMtayxTPUN9fWVsc2UgaWYoZjx5KXtpZih4Kz11K2YteSwoeS09Zik8dyl7Zm9yKHctPXk7Q1tzKytdPWNbeCsrXSwtLXk7KTtpZih4PTAsZjx3KXtmb3Iody09eT1mO0NbcysrXT1jW3grK10sLS15Oyk7eD1zLWssUz1DfX19ZWxzZSBpZih4Kz1mLXkseTx3KXtmb3Iody09eTtDW3MrK109Y1t4KytdLC0teTspO3g9cy1rLFM9Q31mb3IoOzI8dzspQ1tzKytdPVNbeCsrXSxDW3MrK109U1t4KytdLENbcysrXT1TW3grK10sdy09Mzt3JiYoQ1tzKytdPVNbeCsrXSwxPHcmJihDW3MrK109U1t4KytdKSl9ZWxzZXtmb3IoeD1zLWs7Q1tzKytdPUNbeCsrXSxDW3MrK109Q1t4KytdLENbcysrXT1DW3grK10sMjwody09Myk7KTt3JiYoQ1tzKytdPUNbeCsrXSwxPHcmJihDW3MrK109Q1t4KytdKSl9YnJlYWt9fWJyZWFrfX13aGlsZShuPGkmJnM8byk7bi09dz1wPj4zLGQmPSgxPDwocC09dzw8MykpLTEsZS5uZXh0X2luPW4sZS5uZXh0X291dD1zLGUuYXZhaWxfaW49bjxpP2ktbis1OjUtKG4taSksZS5hdmFpbF9vdXQ9czxvP28tcysyNTc6MjU3LShzLW8pLHIuaG9sZD1kLHIuYml0cz1wfX0se31dLDQ5OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIEk9ZShcIi4uL3V0aWxzL2NvbW1vblwiKSxPPWUoXCIuL2FkbGVyMzJcIiksQj1lKFwiLi9jcmMzMlwiKSxSPWUoXCIuL2luZmZhc3RcIiksVD1lKFwiLi9pbmZ0cmVlc1wiKSxEPTEsRj0yLE49MCxVPS0yLFA9MSxuPTg1MixpPTU5MjtmdW5jdGlvbiBMKGUpe3JldHVybihlPj4+MjQmMjU1KSsoZT4+PjgmNjUyODApKygoNjUyODAmZSk8PDgpKygoMjU1JmUpPDwyNCl9ZnVuY3Rpb24gcygpe3RoaXMubW9kZT0wLHRoaXMubGFzdD0hMSx0aGlzLndyYXA9MCx0aGlzLmhhdmVkaWN0PSExLHRoaXMuZmxhZ3M9MCx0aGlzLmRtYXg9MCx0aGlzLmNoZWNrPTAsdGhpcy50b3RhbD0wLHRoaXMuaGVhZD1udWxsLHRoaXMud2JpdHM9MCx0aGlzLndzaXplPTAsdGhpcy53aGF2ZT0wLHRoaXMud25leHQ9MCx0aGlzLndpbmRvdz1udWxsLHRoaXMuaG9sZD0wLHRoaXMuYml0cz0wLHRoaXMubGVuZ3RoPTAsdGhpcy5vZmZzZXQ9MCx0aGlzLmV4dHJhPTAsdGhpcy5sZW5jb2RlPW51bGwsdGhpcy5kaXN0Y29kZT1udWxsLHRoaXMubGVuYml0cz0wLHRoaXMuZGlzdGJpdHM9MCx0aGlzLm5jb2RlPTAsdGhpcy5ubGVuPTAsdGhpcy5uZGlzdD0wLHRoaXMuaGF2ZT0wLHRoaXMubmV4dD1udWxsLHRoaXMubGVucz1uZXcgSS5CdWYxNigzMjApLHRoaXMud29yaz1uZXcgSS5CdWYxNigyODgpLHRoaXMubGVuZHluPW51bGwsdGhpcy5kaXN0ZHluPW51bGwsdGhpcy5zYW5lPTAsdGhpcy5iYWNrPTAsdGhpcy53YXM9MH1mdW5jdGlvbiBhKGUpe3ZhciB0O3JldHVybiBlJiZlLnN0YXRlPyh0PWUuc3RhdGUsZS50b3RhbF9pbj1lLnRvdGFsX291dD10LnRvdGFsPTAsZS5tc2c9XCJcIix0LndyYXAmJihlLmFkbGVyPTEmdC53cmFwKSx0Lm1vZGU9UCx0Lmxhc3Q9MCx0LmhhdmVkaWN0PTAsdC5kbWF4PTMyNzY4LHQuaGVhZD1udWxsLHQuaG9sZD0wLHQuYml0cz0wLHQubGVuY29kZT10LmxlbmR5bj1uZXcgSS5CdWYzMihuKSx0LmRpc3Rjb2RlPXQuZGlzdGR5bj1uZXcgSS5CdWYzMihpKSx0LnNhbmU9MSx0LmJhY2s9LTEsTik6VX1mdW5jdGlvbiBvKGUpe3ZhciB0O3JldHVybiBlJiZlLnN0YXRlPygodD1lLnN0YXRlKS53c2l6ZT0wLHQud2hhdmU9MCx0LnduZXh0PTAsYShlKSk6VX1mdW5jdGlvbiBoKGUsdCl7dmFyIHIsbjtyZXR1cm4gZSYmZS5zdGF0ZT8obj1lLnN0YXRlLHQ8MD8ocj0wLHQ9LXQpOihyPTErKHQ+PjQpLHQ8NDgmJih0Jj0xNSkpLHQmJih0PDh8fDE1PHQpP1U6KG51bGwhPT1uLndpbmRvdyYmbi53Yml0cyE9PXQmJihuLndpbmRvdz1udWxsKSxuLndyYXA9cixuLndiaXRzPXQsbyhlKSkpOlV9ZnVuY3Rpb24gdShlLHQpe3ZhciByLG47cmV0dXJuIGU/KG49bmV3IHMsKGUuc3RhdGU9bikud2luZG93PW51bGwsKHI9aChlLHQpKSE9PU4mJihlLnN0YXRlPW51bGwpLHIpOlV9dmFyIGwsZixjPSEwO2Z1bmN0aW9uIGooZSl7aWYoYyl7dmFyIHQ7Zm9yKGw9bmV3IEkuQnVmMzIoNTEyKSxmPW5ldyBJLkJ1ZjMyKDMyKSx0PTA7dDwxNDQ7KWUubGVuc1t0KytdPTg7Zm9yKDt0PDI1NjspZS5sZW5zW3QrK109OTtmb3IoO3Q8MjgwOyllLmxlbnNbdCsrXT03O2Zvcig7dDwyODg7KWUubGVuc1t0KytdPTg7Zm9yKFQoRCxlLmxlbnMsMCwyODgsbCwwLGUud29yayx7Yml0czo5fSksdD0wO3Q8MzI7KWUubGVuc1t0KytdPTU7VChGLGUubGVucywwLDMyLGYsMCxlLndvcmsse2JpdHM6NX0pLGM9ITF9ZS5sZW5jb2RlPWwsZS5sZW5iaXRzPTksZS5kaXN0Y29kZT1mLGUuZGlzdGJpdHM9NX1mdW5jdGlvbiBaKGUsdCxyLG4pe3ZhciBpLHM9ZS5zdGF0ZTtyZXR1cm4gbnVsbD09PXMud2luZG93JiYocy53c2l6ZT0xPDxzLndiaXRzLHMud25leHQ9MCxzLndoYXZlPTAscy53aW5kb3c9bmV3IEkuQnVmOChzLndzaXplKSksbj49cy53c2l6ZT8oSS5hcnJheVNldChzLndpbmRvdyx0LHItcy53c2l6ZSxzLndzaXplLDApLHMud25leHQ9MCxzLndoYXZlPXMud3NpemUpOihuPChpPXMud3NpemUtcy53bmV4dCkmJihpPW4pLEkuYXJyYXlTZXQocy53aW5kb3csdCxyLW4saSxzLnduZXh0KSwobi09aSk/KEkuYXJyYXlTZXQocy53aW5kb3csdCxyLW4sbiwwKSxzLnduZXh0PW4scy53aGF2ZT1zLndzaXplKToocy53bmV4dCs9aSxzLnduZXh0PT09cy53c2l6ZSYmKHMud25leHQ9MCkscy53aGF2ZTxzLndzaXplJiYocy53aGF2ZSs9aSkpKSwwfXIuaW5mbGF0ZVJlc2V0PW8sci5pbmZsYXRlUmVzZXQyPWgsci5pbmZsYXRlUmVzZXRLZWVwPWEsci5pbmZsYXRlSW5pdD1mdW5jdGlvbihlKXtyZXR1cm4gdShlLDE1KX0sci5pbmZsYXRlSW5pdDI9dSxyLmluZmxhdGU9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGkscyxhLG8saCx1LGwsZixjLGQscCxtLF8sZyxiLHYseSx3LGsseCxTLHosQz0wLEU9bmV3IEkuQnVmOCg0KSxBPVsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XTtpZighZXx8IWUuc3RhdGV8fCFlLm91dHB1dHx8IWUuaW5wdXQmJjAhPT1lLmF2YWlsX2luKXJldHVybiBVOzEyPT09KHI9ZS5zdGF0ZSkubW9kZSYmKHIubW9kZT0xMyksYT1lLm5leHRfb3V0LGk9ZS5vdXRwdXQsaD1lLmF2YWlsX291dCxzPWUubmV4dF9pbixuPWUuaW5wdXQsbz1lLmF2YWlsX2luLHU9ci5ob2xkLGw9ci5iaXRzLGY9byxjPWgseD1OO2U6Zm9yKDs7KXN3aXRjaChyLm1vZGUpe2Nhc2UgUDppZigwPT09ci53cmFwKXtyLm1vZGU9MTM7YnJlYWt9Zm9yKDtsPDE2Oyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9aWYoMiZyLndyYXAmJjM1NjE1PT09dSl7RVtyLmNoZWNrPTBdPTI1NSZ1LEVbMV09dT4+PjgmMjU1LHIuY2hlY2s9QihyLmNoZWNrLEUsMiwwKSxsPXU9MCxyLm1vZGU9MjticmVha31pZihyLmZsYWdzPTAsci5oZWFkJiYoci5oZWFkLmRvbmU9ITEpLCEoMSZyLndyYXApfHwoKCgyNTUmdSk8PDgpKyh1Pj44KSklMzEpe2UubXNnPVwiaW5jb3JyZWN0IGhlYWRlciBjaGVja1wiLHIubW9kZT0zMDticmVha31pZig4IT0oMTUmdSkpe2UubXNnPVwidW5rbm93biBjb21wcmVzc2lvbiBtZXRob2RcIixyLm1vZGU9MzA7YnJlYWt9aWYobC09NCxrPTgrKDE1Jih1Pj4+PTQpKSwwPT09ci53Yml0cylyLndiaXRzPWs7ZWxzZSBpZihrPnIud2JpdHMpe2UubXNnPVwiaW52YWxpZCB3aW5kb3cgc2l6ZVwiLHIubW9kZT0zMDticmVha31yLmRtYXg9MTw8ayxlLmFkbGVyPXIuY2hlY2s9MSxyLm1vZGU9NTEyJnU/MTA6MTIsbD11PTA7YnJlYWs7Y2FzZSAyOmZvcig7bDwxNjspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fWlmKHIuZmxhZ3M9dSw4IT0oMjU1JnIuZmxhZ3MpKXtlLm1zZz1cInVua25vd24gY29tcHJlc3Npb24gbWV0aG9kXCIsci5tb2RlPTMwO2JyZWFrfWlmKDU3MzQ0JnIuZmxhZ3Mpe2UubXNnPVwidW5rbm93biBoZWFkZXIgZmxhZ3Mgc2V0XCIsci5tb2RlPTMwO2JyZWFrfXIuaGVhZCYmKHIuaGVhZC50ZXh0PXU+PjgmMSksNTEyJnIuZmxhZ3MmJihFWzBdPTI1NSZ1LEVbMV09dT4+PjgmMjU1LHIuY2hlY2s9QihyLmNoZWNrLEUsMiwwKSksbD11PTAsci5tb2RlPTM7Y2FzZSAzOmZvcig7bDwzMjspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fXIuaGVhZCYmKHIuaGVhZC50aW1lPXUpLDUxMiZyLmZsYWdzJiYoRVswXT0yNTUmdSxFWzFdPXU+Pj44JjI1NSxFWzJdPXU+Pj4xNiYyNTUsRVszXT11Pj4+MjQmMjU1LHIuY2hlY2s9QihyLmNoZWNrLEUsNCwwKSksbD11PTAsci5tb2RlPTQ7Y2FzZSA0OmZvcig7bDwxNjspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fXIuaGVhZCYmKHIuaGVhZC54ZmxhZ3M9MjU1JnUsci5oZWFkLm9zPXU+PjgpLDUxMiZyLmZsYWdzJiYoRVswXT0yNTUmdSxFWzFdPXU+Pj44JjI1NSxyLmNoZWNrPUIoci5jaGVjayxFLDIsMCkpLGw9dT0wLHIubW9kZT01O2Nhc2UgNTppZigxMDI0JnIuZmxhZ3Mpe2Zvcig7bDwxNjspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fXIubGVuZ3RoPXUsci5oZWFkJiYoci5oZWFkLmV4dHJhX2xlbj11KSw1MTImci5mbGFncyYmKEVbMF09MjU1JnUsRVsxXT11Pj4+OCYyNTUsci5jaGVjaz1CKHIuY2hlY2ssRSwyLDApKSxsPXU9MH1lbHNlIHIuaGVhZCYmKHIuaGVhZC5leHRyYT1udWxsKTtyLm1vZGU9NjtjYXNlIDY6aWYoMTAyNCZyLmZsYWdzJiYobzwoZD1yLmxlbmd0aCkmJihkPW8pLGQmJihyLmhlYWQmJihrPXIuaGVhZC5leHRyYV9sZW4tci5sZW5ndGgsci5oZWFkLmV4dHJhfHwoci5oZWFkLmV4dHJhPW5ldyBBcnJheShyLmhlYWQuZXh0cmFfbGVuKSksSS5hcnJheVNldChyLmhlYWQuZXh0cmEsbixzLGQsaykpLDUxMiZyLmZsYWdzJiYoci5jaGVjaz1CKHIuY2hlY2ssbixkLHMpKSxvLT1kLHMrPWQsci5sZW5ndGgtPWQpLHIubGVuZ3RoKSlicmVhayBlO3IubGVuZ3RoPTAsci5tb2RlPTc7Y2FzZSA3OmlmKDIwNDgmci5mbGFncyl7aWYoMD09PW8pYnJlYWsgZTtmb3IoZD0wO2s9bltzK2QrK10sci5oZWFkJiZrJiZyLmxlbmd0aDw2NTUzNiYmKHIuaGVhZC5uYW1lKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGspKSxrJiZkPG87KTtpZig1MTImci5mbGFncyYmKHIuY2hlY2s9QihyLmNoZWNrLG4sZCxzKSksby09ZCxzKz1kLGspYnJlYWsgZX1lbHNlIHIuaGVhZCYmKHIuaGVhZC5uYW1lPW51bGwpO3IubGVuZ3RoPTAsci5tb2RlPTg7Y2FzZSA4OmlmKDQwOTYmci5mbGFncyl7aWYoMD09PW8pYnJlYWsgZTtmb3IoZD0wO2s9bltzK2QrK10sci5oZWFkJiZrJiZyLmxlbmd0aDw2NTUzNiYmKHIuaGVhZC5jb21tZW50Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKGspKSxrJiZkPG87KTtpZig1MTImci5mbGFncyYmKHIuY2hlY2s9QihyLmNoZWNrLG4sZCxzKSksby09ZCxzKz1kLGspYnJlYWsgZX1lbHNlIHIuaGVhZCYmKHIuaGVhZC5jb21tZW50PW51bGwpO3IubW9kZT05O2Nhc2UgOTppZig1MTImci5mbGFncyl7Zm9yKDtsPDE2Oyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9aWYodSE9PSg2NTUzNSZyLmNoZWNrKSl7ZS5tc2c9XCJoZWFkZXIgY3JjIG1pc21hdGNoXCIsci5tb2RlPTMwO2JyZWFrfWw9dT0wfXIuaGVhZCYmKHIuaGVhZC5oY3JjPXIuZmxhZ3M+PjkmMSxyLmhlYWQuZG9uZT0hMCksZS5hZGxlcj1yLmNoZWNrPTAsci5tb2RlPTEyO2JyZWFrO2Nhc2UgMTA6Zm9yKDtsPDMyOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9ZS5hZGxlcj1yLmNoZWNrPUwodSksbD11PTAsci5tb2RlPTExO2Nhc2UgMTE6aWYoMD09PXIuaGF2ZWRpY3QpcmV0dXJuIGUubmV4dF9vdXQ9YSxlLmF2YWlsX291dD1oLGUubmV4dF9pbj1zLGUuYXZhaWxfaW49byxyLmhvbGQ9dSxyLmJpdHM9bCwyO2UuYWRsZXI9ci5jaGVjaz0xLHIubW9kZT0xMjtjYXNlIDEyOmlmKDU9PT10fHw2PT09dClicmVhayBlO2Nhc2UgMTM6aWYoci5sYXN0KXt1Pj4+PTcmbCxsLT03Jmwsci5tb2RlPTI3O2JyZWFrfWZvcig7bDwzOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9c3dpdGNoKHIubGFzdD0xJnUsbC09MSwzJih1Pj4+PTEpKXtjYXNlIDA6ci5tb2RlPTE0O2JyZWFrO2Nhc2UgMTppZihqKHIpLHIubW9kZT0yMCw2IT09dClicmVhazt1Pj4+PTIsbC09MjticmVhayBlO2Nhc2UgMjpyLm1vZGU9MTc7YnJlYWs7Y2FzZSAzOmUubXNnPVwiaW52YWxpZCBibG9jayB0eXBlXCIsci5tb2RlPTMwfXU+Pj49MixsLT0yO2JyZWFrO2Nhc2UgMTQ6Zm9yKHU+Pj49NyZsLGwtPTcmbDtsPDMyOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9aWYoKDY1NTM1JnUpIT0odT4+PjE2XjY1NTM1KSl7ZS5tc2c9XCJpbnZhbGlkIHN0b3JlZCBibG9jayBsZW5ndGhzXCIsci5tb2RlPTMwO2JyZWFrfWlmKHIubGVuZ3RoPTY1NTM1JnUsbD11PTAsci5tb2RlPTE1LDY9PT10KWJyZWFrIGU7Y2FzZSAxNTpyLm1vZGU9MTY7Y2FzZSAxNjppZihkPXIubGVuZ3RoKXtpZihvPGQmJihkPW8pLGg8ZCYmKGQ9aCksMD09PWQpYnJlYWsgZTtJLmFycmF5U2V0KGksbixzLGQsYSksby09ZCxzKz1kLGgtPWQsYSs9ZCxyLmxlbmd0aC09ZDticmVha31yLm1vZGU9MTI7YnJlYWs7Y2FzZSAxNzpmb3IoO2w8MTQ7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1pZihyLm5sZW49MjU3KygzMSZ1KSx1Pj4+PTUsbC09NSxyLm5kaXN0PTErKDMxJnUpLHU+Pj49NSxsLT01LHIubmNvZGU9NCsoMTUmdSksdT4+Pj00LGwtPTQsMjg2PHIubmxlbnx8MzA8ci5uZGlzdCl7ZS5tc2c9XCJ0b28gbWFueSBsZW5ndGggb3IgZGlzdGFuY2Ugc3ltYm9sc1wiLHIubW9kZT0zMDticmVha31yLmhhdmU9MCxyLm1vZGU9MTg7Y2FzZSAxODpmb3IoO3IuaGF2ZTxyLm5jb2RlOyl7Zm9yKDtsPDM7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1yLmxlbnNbQVtyLmhhdmUrK11dPTcmdSx1Pj4+PTMsbC09M31mb3IoO3IuaGF2ZTwxOTspci5sZW5zW0Fbci5oYXZlKytdXT0wO2lmKHIubGVuY29kZT1yLmxlbmR5bixyLmxlbmJpdHM9NyxTPXtiaXRzOnIubGVuYml0c30seD1UKDAsci5sZW5zLDAsMTksci5sZW5jb2RlLDAsci53b3JrLFMpLHIubGVuYml0cz1TLmJpdHMseCl7ZS5tc2c9XCJpbnZhbGlkIGNvZGUgbGVuZ3RocyBzZXRcIixyLm1vZGU9MzA7YnJlYWt9ci5oYXZlPTAsci5tb2RlPTE5O2Nhc2UgMTk6Zm9yKDtyLmhhdmU8ci5ubGVuK3IubmRpc3Q7KXtmb3IoO2c9KEM9ci5sZW5jb2RlW3UmKDE8PHIubGVuYml0cyktMV0pPj4+MTYmMjU1LGI9NjU1MzUmQywhKChfPUM+Pj4yNCk8PWwpOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9aWYoYjwxNil1Pj4+PV8sbC09XyxyLmxlbnNbci5oYXZlKytdPWI7ZWxzZXtpZigxNj09PWIpe2Zvcih6PV8rMjtsPHo7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1pZih1Pj4+PV8sbC09XywwPT09ci5oYXZlKXtlLm1zZz1cImludmFsaWQgYml0IGxlbmd0aCByZXBlYXRcIixyLm1vZGU9MzA7YnJlYWt9az1yLmxlbnNbci5oYXZlLTFdLGQ9MysoMyZ1KSx1Pj4+PTIsbC09Mn1lbHNlIGlmKDE3PT09Yil7Zm9yKHo9XyszO2w8ejspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fWwtPV8saz0wLGQ9MysoNyYodT4+Pj1fKSksdT4+Pj0zLGwtPTN9ZWxzZXtmb3Ioej1fKzc7bDx6Oyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9bC09XyxrPTAsZD0xMSsoMTI3Jih1Pj4+PV8pKSx1Pj4+PTcsbC09N31pZihyLmhhdmUrZD5yLm5sZW4rci5uZGlzdCl7ZS5tc2c9XCJpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0XCIsci5tb2RlPTMwO2JyZWFrfWZvcig7ZC0tOylyLmxlbnNbci5oYXZlKytdPWt9fWlmKDMwPT09ci5tb2RlKWJyZWFrO2lmKDA9PT1yLmxlbnNbMjU2XSl7ZS5tc2c9XCJpbnZhbGlkIGNvZGUgLS0gbWlzc2luZyBlbmQtb2YtYmxvY2tcIixyLm1vZGU9MzA7YnJlYWt9aWYoci5sZW5iaXRzPTksUz17Yml0czpyLmxlbmJpdHN9LHg9VChELHIubGVucywwLHIubmxlbixyLmxlbmNvZGUsMCxyLndvcmssUyksci5sZW5iaXRzPVMuYml0cyx4KXtlLm1zZz1cImludmFsaWQgbGl0ZXJhbC9sZW5ndGhzIHNldFwiLHIubW9kZT0zMDticmVha31pZihyLmRpc3RiaXRzPTYsci5kaXN0Y29kZT1yLmRpc3RkeW4sUz17Yml0czpyLmRpc3RiaXRzfSx4PVQoRixyLmxlbnMsci5ubGVuLHIubmRpc3Qsci5kaXN0Y29kZSwwLHIud29yayxTKSxyLmRpc3RiaXRzPVMuYml0cyx4KXtlLm1zZz1cImludmFsaWQgZGlzdGFuY2VzIHNldFwiLHIubW9kZT0zMDticmVha31pZihyLm1vZGU9MjAsNj09PXQpYnJlYWsgZTtjYXNlIDIwOnIubW9kZT0yMTtjYXNlIDIxOmlmKDY8PW8mJjI1ODw9aCl7ZS5uZXh0X291dD1hLGUuYXZhaWxfb3V0PWgsZS5uZXh0X2luPXMsZS5hdmFpbF9pbj1vLHIuaG9sZD11LHIuYml0cz1sLFIoZSxjKSxhPWUubmV4dF9vdXQsaT1lLm91dHB1dCxoPWUuYXZhaWxfb3V0LHM9ZS5uZXh0X2luLG49ZS5pbnB1dCxvPWUuYXZhaWxfaW4sdT1yLmhvbGQsbD1yLmJpdHMsMTI9PT1yLm1vZGUmJihyLmJhY2s9LTEpO2JyZWFrfWZvcihyLmJhY2s9MDtnPShDPXIubGVuY29kZVt1JigxPDxyLmxlbmJpdHMpLTFdKT4+PjE2JjI1NSxiPTY1NTM1JkMsISgoXz1DPj4+MjQpPD1sKTspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fWlmKGcmJjA9PSgyNDAmZykpe2Zvcih2PV8seT1nLHc9YjtnPShDPXIubGVuY29kZVt3KygodSYoMTw8dit5KS0xKT4+dildKT4+PjE2JjI1NSxiPTY1NTM1JkMsISh2KyhfPUM+Pj4yNCk8PWwpOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9dT4+Pj12LGwtPXYsci5iYWNrKz12fWlmKHU+Pj49XyxsLT1fLHIuYmFjays9XyxyLmxlbmd0aD1iLDA9PT1nKXtyLm1vZGU9MjY7YnJlYWt9aWYoMzImZyl7ci5iYWNrPS0xLHIubW9kZT0xMjticmVha31pZig2NCZnKXtlLm1zZz1cImludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZVwiLHIubW9kZT0zMDticmVha31yLmV4dHJhPTE1Jmcsci5tb2RlPTIyO2Nhc2UgMjI6aWYoci5leHRyYSl7Zm9yKHo9ci5leHRyYTtsPHo7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1yLmxlbmd0aCs9dSYoMTw8ci5leHRyYSktMSx1Pj4+PXIuZXh0cmEsbC09ci5leHRyYSxyLmJhY2srPXIuZXh0cmF9ci53YXM9ci5sZW5ndGgsci5tb2RlPTIzO2Nhc2UgMjM6Zm9yKDtnPShDPXIuZGlzdGNvZGVbdSYoMTw8ci5kaXN0Yml0cyktMV0pPj4+MTYmMjU1LGI9NjU1MzUmQywhKChfPUM+Pj4yNCk8PWwpOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9aWYoMD09KDI0MCZnKSl7Zm9yKHY9Xyx5PWcsdz1iO2c9KEM9ci5kaXN0Y29kZVt3KygodSYoMTw8dit5KS0xKT4+dildKT4+PjE2JjI1NSxiPTY1NTM1JkMsISh2KyhfPUM+Pj4yNCk8PWwpOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9dT4+Pj12LGwtPXYsci5iYWNrKz12fWlmKHU+Pj49XyxsLT1fLHIuYmFjays9Xyw2NCZnKXtlLm1zZz1cImludmFsaWQgZGlzdGFuY2UgY29kZVwiLHIubW9kZT0zMDticmVha31yLm9mZnNldD1iLHIuZXh0cmE9MTUmZyxyLm1vZGU9MjQ7Y2FzZSAyNDppZihyLmV4dHJhKXtmb3Ioej1yLmV4dHJhO2w8ejspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fXIub2Zmc2V0Kz11JigxPDxyLmV4dHJhKS0xLHU+Pj49ci5leHRyYSxsLT1yLmV4dHJhLHIuYmFjays9ci5leHRyYX1pZihyLm9mZnNldD5yLmRtYXgpe2UubXNnPVwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIixyLm1vZGU9MzA7YnJlYWt9ci5tb2RlPTI1O2Nhc2UgMjU6aWYoMD09PWgpYnJlYWsgZTtpZihkPWMtaCxyLm9mZnNldD5kKXtpZigoZD1yLm9mZnNldC1kKT5yLndoYXZlJiZyLnNhbmUpe2UubXNnPVwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIixyLm1vZGU9MzA7YnJlYWt9cD1kPnIud25leHQ/KGQtPXIud25leHQsci53c2l6ZS1kKTpyLnduZXh0LWQsZD5yLmxlbmd0aCYmKGQ9ci5sZW5ndGgpLG09ci53aW5kb3d9ZWxzZSBtPWkscD1hLXIub2Zmc2V0LGQ9ci5sZW5ndGg7Zm9yKGg8ZCYmKGQ9aCksaC09ZCxyLmxlbmd0aC09ZDtpW2ErK109bVtwKytdLC0tZDspOzA9PT1yLmxlbmd0aCYmKHIubW9kZT0yMSk7YnJlYWs7Y2FzZSAyNjppZigwPT09aClicmVhayBlO2lbYSsrXT1yLmxlbmd0aCxoLS0sci5tb2RlPTIxO2JyZWFrO2Nhc2UgMjc6aWYoci53cmFwKXtmb3IoO2w8MzI7KXtpZigwPT09bylicmVhayBlO28tLSx1fD1uW3MrK108PGwsbCs9OH1pZihjLT1oLGUudG90YWxfb3V0Kz1jLHIudG90YWwrPWMsYyYmKGUuYWRsZXI9ci5jaGVjaz1yLmZsYWdzP0Ioci5jaGVjayxpLGMsYS1jKTpPKHIuY2hlY2ssaSxjLGEtYykpLGM9aCwoci5mbGFncz91OkwodSkpIT09ci5jaGVjayl7ZS5tc2c9XCJpbmNvcnJlY3QgZGF0YSBjaGVja1wiLHIubW9kZT0zMDticmVha31sPXU9MH1yLm1vZGU9Mjg7Y2FzZSAyODppZihyLndyYXAmJnIuZmxhZ3Mpe2Zvcig7bDwzMjspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fWlmKHUhPT0oNDI5NDk2NzI5NSZyLnRvdGFsKSl7ZS5tc2c9XCJpbmNvcnJlY3QgbGVuZ3RoIGNoZWNrXCIsci5tb2RlPTMwO2JyZWFrfWw9dT0wfXIubW9kZT0yOTtjYXNlIDI5Ong9MTticmVhayBlO2Nhc2UgMzA6eD0tMzticmVhayBlO2Nhc2UgMzE6cmV0dXJuLTQ7Y2FzZSAzMjpkZWZhdWx0OnJldHVybiBVfXJldHVybiBlLm5leHRfb3V0PWEsZS5hdmFpbF9vdXQ9aCxlLm5leHRfaW49cyxlLmF2YWlsX2luPW8sci5ob2xkPXUsci5iaXRzPWwsKHIud3NpemV8fGMhPT1lLmF2YWlsX291dCYmci5tb2RlPDMwJiYoci5tb2RlPDI3fHw0IT09dCkpJiZaKGUsZS5vdXRwdXQsZS5uZXh0X291dCxjLWUuYXZhaWxfb3V0KT8oci5tb2RlPTMxLC00KTooZi09ZS5hdmFpbF9pbixjLT1lLmF2YWlsX291dCxlLnRvdGFsX2luKz1mLGUudG90YWxfb3V0Kz1jLHIudG90YWwrPWMsci53cmFwJiZjJiYoZS5hZGxlcj1yLmNoZWNrPXIuZmxhZ3M/QihyLmNoZWNrLGksYyxlLm5leHRfb3V0LWMpOk8oci5jaGVjayxpLGMsZS5uZXh0X291dC1jKSksZS5kYXRhX3R5cGU9ci5iaXRzKyhyLmxhc3Q/NjQ6MCkrKDEyPT09ci5tb2RlPzEyODowKSsoMjA9PT1yLm1vZGV8fDE1PT09ci5tb2RlPzI1NjowKSwoMD09ZiYmMD09PWN8fDQ9PT10KSYmeD09PU4mJih4PS01KSx4KX0sci5pbmZsYXRlRW5kPWZ1bmN0aW9uKGUpe2lmKCFlfHwhZS5zdGF0ZSlyZXR1cm4gVTt2YXIgdD1lLnN0YXRlO3JldHVybiB0LndpbmRvdyYmKHQud2luZG93PW51bGwpLGUuc3RhdGU9bnVsbCxOfSxyLmluZmxhdGVHZXRIZWFkZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcjtyZXR1cm4gZSYmZS5zdGF0ZT8wPT0oMiYocj1lLnN0YXRlKS53cmFwKT9VOigoci5oZWFkPXQpLmRvbmU9ITEsTik6VX0sci5pbmZsYXRlU2V0RGljdGlvbmFyeT1mdW5jdGlvbihlLHQpe3ZhciByLG49dC5sZW5ndGg7cmV0dXJuIGUmJmUuc3RhdGU/MCE9PShyPWUuc3RhdGUpLndyYXAmJjExIT09ci5tb2RlP1U6MTE9PT1yLm1vZGUmJk8oMSx0LG4sMCkhPT1yLmNoZWNrPy0zOlooZSx0LG4sbik/KHIubW9kZT0zMSwtNCk6KHIuaGF2ZWRpY3Q9MSxOKTpVfSxyLmluZmxhdGVJbmZvPVwicGFrbyBpbmZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KVwifSx7XCIuLi91dGlscy9jb21tb25cIjo0MSxcIi4vYWRsZXIzMlwiOjQzLFwiLi9jcmMzMlwiOjQ1LFwiLi9pbmZmYXN0XCI6NDgsXCIuL2luZnRyZWVzXCI6NTB9XSw1MDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBEPWUoXCIuLi91dGlscy9jb21tb25cIiksRj1bMyw0LDUsNiw3LDgsOSwxMCwxMSwxMywxNSwxNywxOSwyMywyNywzMSwzNSw0Myw1MSw1OSw2Nyw4Myw5OSwxMTUsMTMxLDE2MywxOTUsMjI3LDI1OCwwLDBdLE49WzE2LDE2LDE2LDE2LDE2LDE2LDE2LDE2LDE3LDE3LDE3LDE3LDE4LDE4LDE4LDE4LDE5LDE5LDE5LDE5LDIwLDIwLDIwLDIwLDIxLDIxLDIxLDIxLDE2LDcyLDc4XSxVPVsxLDIsMyw0LDUsNyw5LDEzLDE3LDI1LDMzLDQ5LDY1LDk3LDEyOSwxOTMsMjU3LDM4NSw1MTMsNzY5LDEwMjUsMTUzNywyMDQ5LDMwNzMsNDA5Nyw2MTQ1LDgxOTMsMTIyODksMTYzODUsMjQ1NzcsMCwwXSxQPVsxNiwxNiwxNiwxNiwxNywxNywxOCwxOCwxOSwxOSwyMCwyMCwyMSwyMSwyMiwyMiwyMywyMywyNCwyNCwyNSwyNSwyNiwyNiwyNywyNywyOCwyOCwyOSwyOSw2NCw2NF07dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLG4saSxzLGEsbyl7dmFyIGgsdSxsLGYsYyxkLHAsbSxfLGc9by5iaXRzLGI9MCx2PTAseT0wLHc9MCxrPTAseD0wLFM9MCx6PTAsQz0wLEU9MCxBPW51bGwsST0wLE89bmV3IEQuQnVmMTYoMTYpLEI9bmV3IEQuQnVmMTYoMTYpLFI9bnVsbCxUPTA7Zm9yKGI9MDtiPD0xNTtiKyspT1tiXT0wO2Zvcih2PTA7djxuO3YrKylPW3Rbcit2XV0rKztmb3Ioaz1nLHc9MTU7MTw9dyYmMD09PU9bd107dy0tKTtpZih3PGsmJihrPXcpLDA9PT13KXJldHVybiBpW3MrK109MjA5NzE1MjAsaVtzKytdPTIwOTcxNTIwLG8uYml0cz0xLDA7Zm9yKHk9MTt5PHcmJjA9PT1PW3ldO3krKyk7Zm9yKGs8eSYmKGs9eSksYj16PTE7Yjw9MTU7YisrKWlmKHo8PD0xLCh6LT1PW2JdKTwwKXJldHVybi0xO2lmKDA8eiYmKDA9PT1lfHwxIT09dykpcmV0dXJuLTE7Zm9yKEJbMV09MCxiPTE7YjwxNTtiKyspQltiKzFdPUJbYl0rT1tiXTtmb3Iodj0wO3Y8bjt2KyspMCE9PXRbcit2XSYmKGFbQlt0W3Irdl1dKytdPXYpO2lmKGQ9MD09PWU/KEE9Uj1hLDE5KToxPT09ZT8oQT1GLEktPTI1NyxSPU4sVC09MjU3LDI1Nik6KEE9VSxSPVAsLTEpLGI9eSxjPXMsUz12PUU9MCxsPS0xLGY9KEM9MTw8KHg9aykpLTEsMT09PWUmJjg1MjxDfHwyPT09ZSYmNTkyPEMpcmV0dXJuIDE7Zm9yKDs7KXtmb3IocD1iLVMsXz1hW3ZdPGQ/KG09MCxhW3ZdKTphW3ZdPmQ/KG09UltUK2Fbdl1dLEFbSSthW3ZdXSk6KG09OTYsMCksaD0xPDxiLVMseT11PTE8PHg7aVtjKyhFPj5TKSsodS09aCldPXA8PDI0fG08PDE2fF98MCwwIT09dTspO2ZvcihoPTE8PGItMTtFJmg7KWg+Pj0xO2lmKDAhPT1oPyhFJj1oLTEsRSs9aCk6RT0wLHYrKywwPT0tLU9bYl0pe2lmKGI9PT13KWJyZWFrO2I9dFtyK2Fbdl1dfWlmKGs8YiYmKEUmZikhPT1sKXtmb3IoMD09PVMmJihTPWspLGMrPXksej0xPDwoeD1iLVMpO3grUzx3JiYhKCh6LT1PW3grU10pPD0wKTspeCsrLHo8PD0xO2lmKEMrPTE8PHgsMT09PWUmJjg1MjxDfHwyPT09ZSYmNTkyPEMpcmV0dXJuIDE7aVtsPUUmZl09azw8MjR8eDw8MTZ8Yy1zfDB9fXJldHVybiAwIT09RSYmKGlbYytFXT1iLVM8PDI0fDY0PDwxNnwwKSxvLmJpdHM9aywwfX0se1wiLi4vdXRpbHMvY29tbW9uXCI6NDF9XSw1MTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz17MjpcIm5lZWQgZGljdGlvbmFyeVwiLDE6XCJzdHJlYW0gZW5kXCIsMDpcIlwiLFwiLTFcIjpcImZpbGUgZXJyb3JcIixcIi0yXCI6XCJzdHJlYW0gZXJyb3JcIixcIi0zXCI6XCJkYXRhIGVycm9yXCIsXCItNFwiOlwiaW5zdWZmaWNpZW50IG1lbW9yeVwiLFwiLTVcIjpcImJ1ZmZlciBlcnJvclwiLFwiLTZcIjpcImluY29tcGF0aWJsZSB2ZXJzaW9uXCJ9fSx7fV0sNTI6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT1lKFwiLi4vdXRpbHMvY29tbW9uXCIpLG89MCxoPTE7ZnVuY3Rpb24gbihlKXtmb3IodmFyIHQ9ZS5sZW5ndGg7MDw9LS10OyllW3RdPTB9dmFyIHM9MCxhPTI5LHU9MjU2LGw9dSsxK2EsZj0zMCxjPTE5LF89MipsKzEsZz0xNSxkPTE2LHA9NyxtPTI1NixiPTE2LHY9MTcseT0xOCx3PVswLDAsMCwwLDAsMCwwLDAsMSwxLDEsMSwyLDIsMiwyLDMsMywzLDMsNCw0LDQsNCw1LDUsNSw1LDBdLGs9WzAsMCwwLDAsMSwxLDIsMiwzLDMsNCw0LDUsNSw2LDYsNyw3LDgsOCw5LDksMTAsMTAsMTEsMTEsMTIsMTIsMTMsMTNdLHg9WzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMiwzLDddLFM9WzE2LDE3LDE4LDAsOCw3LDksNiwxMCw1LDExLDQsMTIsMywxMywyLDE0LDEsMTVdLHo9bmV3IEFycmF5KDIqKGwrMikpO24oeik7dmFyIEM9bmV3IEFycmF5KDIqZik7bihDKTt2YXIgRT1uZXcgQXJyYXkoNTEyKTtuKEUpO3ZhciBBPW5ldyBBcnJheSgyNTYpO24oQSk7dmFyIEk9bmV3IEFycmF5KGEpO24oSSk7dmFyIE8sQixSLFQ9bmV3IEFycmF5KGYpO2Z1bmN0aW9uIEQoZSx0LHIsbixpKXt0aGlzLnN0YXRpY190cmVlPWUsdGhpcy5leHRyYV9iaXRzPXQsdGhpcy5leHRyYV9iYXNlPXIsdGhpcy5lbGVtcz1uLHRoaXMubWF4X2xlbmd0aD1pLHRoaXMuaGFzX3N0cmVlPWUmJmUubGVuZ3RofWZ1bmN0aW9uIEYoZSx0KXt0aGlzLmR5bl90cmVlPWUsdGhpcy5tYXhfY29kZT0wLHRoaXMuc3RhdF9kZXNjPXR9ZnVuY3Rpb24gTihlKXtyZXR1cm4gZTwyNTY/RVtlXTpFWzI1NisoZT4+PjcpXX1mdW5jdGlvbiBVKGUsdCl7ZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmcrK109MjU1JnQsZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmcrK109dD4+PjgmMjU1fWZ1bmN0aW9uIFAoZSx0LHIpe2UuYmlfdmFsaWQ+ZC1yPyhlLmJpX2J1Znw9dDw8ZS5iaV92YWxpZCY2NTUzNSxVKGUsZS5iaV9idWYpLGUuYmlfYnVmPXQ+PmQtZS5iaV92YWxpZCxlLmJpX3ZhbGlkKz1yLWQpOihlLmJpX2J1Znw9dDw8ZS5iaV92YWxpZCY2NTUzNSxlLmJpX3ZhbGlkKz1yKX1mdW5jdGlvbiBMKGUsdCxyKXtQKGUsclsyKnRdLHJbMip0KzFdKX1mdW5jdGlvbiBqKGUsdCl7Zm9yKHZhciByPTA7cnw9MSZlLGU+Pj49MSxyPDw9MSwwPC0tdDspO3JldHVybiByPj4+MX1mdW5jdGlvbiBaKGUsdCxyKXt2YXIgbixpLHM9bmV3IEFycmF5KGcrMSksYT0wO2ZvcihuPTE7bjw9ZztuKyspc1tuXT1hPWErcltuLTFdPDwxO2ZvcihpPTA7aTw9dDtpKyspe3ZhciBvPWVbMippKzFdOzAhPT1vJiYoZVsyKmldPWooc1tvXSsrLG8pKX19ZnVuY3Rpb24gVyhlKXt2YXIgdDtmb3IodD0wO3Q8bDt0KyspZS5keW5fbHRyZWVbMip0XT0wO2Zvcih0PTA7dDxmO3QrKyllLmR5bl9kdHJlZVsyKnRdPTA7Zm9yKHQ9MDt0PGM7dCsrKWUuYmxfdHJlZVsyKnRdPTA7ZS5keW5fbHRyZWVbMiptXT0xLGUub3B0X2xlbj1lLnN0YXRpY19sZW49MCxlLmxhc3RfbGl0PWUubWF0Y2hlcz0wfWZ1bmN0aW9uIE0oZSl7ODxlLmJpX3ZhbGlkP1UoZSxlLmJpX2J1Zik6MDxlLmJpX3ZhbGlkJiYoZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmcrK109ZS5iaV9idWYpLGUuYmlfYnVmPTAsZS5iaV92YWxpZD0wfWZ1bmN0aW9uIEgoZSx0LHIsbil7dmFyIGk9Mip0LHM9MipyO3JldHVybiBlW2ldPGVbc118fGVbaV09PT1lW3NdJiZuW3RdPD1uW3JdfWZ1bmN0aW9uIEcoZSx0LHIpe2Zvcih2YXIgbj1lLmhlYXBbcl0saT1yPDwxO2k8PWUuaGVhcF9sZW4mJihpPGUuaGVhcF9sZW4mJkgodCxlLmhlYXBbaSsxXSxlLmhlYXBbaV0sZS5kZXB0aCkmJmkrKywhSCh0LG4sZS5oZWFwW2ldLGUuZGVwdGgpKTspZS5oZWFwW3JdPWUuaGVhcFtpXSxyPWksaTw8PTE7ZS5oZWFwW3JdPW59ZnVuY3Rpb24gSyhlLHQscil7dmFyIG4saSxzLGEsbz0wO2lmKDAhPT1lLmxhc3RfbGl0KWZvcig7bj1lLnBlbmRpbmdfYnVmW2UuZF9idWYrMipvXTw8OHxlLnBlbmRpbmdfYnVmW2UuZF9idWYrMipvKzFdLGk9ZS5wZW5kaW5nX2J1ZltlLmxfYnVmK29dLG8rKywwPT09bj9MKGUsaSx0KTooTChlLChzPUFbaV0pK3UrMSx0KSwwIT09KGE9d1tzXSkmJlAoZSxpLT1JW3NdLGEpLEwoZSxzPU4oLS1uKSxyKSwwIT09KGE9a1tzXSkmJlAoZSxuLT1UW3NdLGEpKSxvPGUubGFzdF9saXQ7KTtMKGUsbSx0KX1mdW5jdGlvbiBZKGUsdCl7dmFyIHIsbixpLHM9dC5keW5fdHJlZSxhPXQuc3RhdF9kZXNjLnN0YXRpY190cmVlLG89dC5zdGF0X2Rlc2MuaGFzX3N0cmVlLGg9dC5zdGF0X2Rlc2MuZWxlbXMsdT0tMTtmb3IoZS5oZWFwX2xlbj0wLGUuaGVhcF9tYXg9XyxyPTA7cjxoO3IrKykwIT09c1syKnJdPyhlLmhlYXBbKytlLmhlYXBfbGVuXT11PXIsZS5kZXB0aFtyXT0wKTpzWzIqcisxXT0wO2Zvcig7ZS5oZWFwX2xlbjwyOylzWzIqKGk9ZS5oZWFwWysrZS5oZWFwX2xlbl09dTwyPysrdTowKV09MSxlLmRlcHRoW2ldPTAsZS5vcHRfbGVuLS0sbyYmKGUuc3RhdGljX2xlbi09YVsyKmkrMV0pO2Zvcih0Lm1heF9jb2RlPXUscj1lLmhlYXBfbGVuPj4xOzE8PXI7ci0tKUcoZSxzLHIpO2ZvcihpPWg7cj1lLmhlYXBbMV0sZS5oZWFwWzFdPWUuaGVhcFtlLmhlYXBfbGVuLS1dLEcoZSxzLDEpLG49ZS5oZWFwWzFdLGUuaGVhcFstLWUuaGVhcF9tYXhdPXIsZS5oZWFwWy0tZS5oZWFwX21heF09bixzWzIqaV09c1syKnJdK3NbMipuXSxlLmRlcHRoW2ldPShlLmRlcHRoW3JdPj1lLmRlcHRoW25dP2UuZGVwdGhbcl06ZS5kZXB0aFtuXSkrMSxzWzIqcisxXT1zWzIqbisxXT1pLGUuaGVhcFsxXT1pKyssRyhlLHMsMSksMjw9ZS5oZWFwX2xlbjspO2UuaGVhcFstLWUuaGVhcF9tYXhdPWUuaGVhcFsxXSxmdW5jdGlvbihlLHQpe3ZhciByLG4saSxzLGEsbyxoPXQuZHluX3RyZWUsdT10Lm1heF9jb2RlLGw9dC5zdGF0X2Rlc2Muc3RhdGljX3RyZWUsZj10LnN0YXRfZGVzYy5oYXNfc3RyZWUsYz10LnN0YXRfZGVzYy5leHRyYV9iaXRzLGQ9dC5zdGF0X2Rlc2MuZXh0cmFfYmFzZSxwPXQuc3RhdF9kZXNjLm1heF9sZW5ndGgsbT0wO2ZvcihzPTA7czw9ZztzKyspZS5ibF9jb3VudFtzXT0wO2ZvcihoWzIqZS5oZWFwW2UuaGVhcF9tYXhdKzFdPTAscj1lLmhlYXBfbWF4KzE7cjxfO3IrKylwPChzPWhbMipoWzIqKG49ZS5oZWFwW3JdKSsxXSsxXSsxKSYmKHM9cCxtKyspLGhbMipuKzFdPXMsdTxufHwoZS5ibF9jb3VudFtzXSsrLGE9MCxkPD1uJiYoYT1jW24tZF0pLG89aFsyKm5dLGUub3B0X2xlbis9byoocythKSxmJiYoZS5zdGF0aWNfbGVuKz1vKihsWzIqbisxXSthKSkpO2lmKDAhPT1tKXtkb3tmb3Iocz1wLTE7MD09PWUuYmxfY291bnRbc107KXMtLTtlLmJsX2NvdW50W3NdLS0sZS5ibF9jb3VudFtzKzFdKz0yLGUuYmxfY291bnRbcF0tLSxtLT0yfXdoaWxlKDA8bSk7Zm9yKHM9cDswIT09cztzLS0pZm9yKG49ZS5ibF9jb3VudFtzXTswIT09bjspdTwoaT1lLmhlYXBbLS1yXSl8fChoWzIqaSsxXSE9PXMmJihlLm9wdF9sZW4rPShzLWhbMippKzFdKSpoWzIqaV0saFsyKmkrMV09cyksbi0tKX19KGUsdCksWihzLHUsZS5ibF9jb3VudCl9ZnVuY3Rpb24gWChlLHQscil7dmFyIG4saSxzPS0xLGE9dFsxXSxvPTAsaD03LHU9NDtmb3IoMD09PWEmJihoPTEzOCx1PTMpLHRbMioocisxKSsxXT02NTUzNSxuPTA7bjw9cjtuKyspaT1hLGE9dFsyKihuKzEpKzFdLCsrbzxoJiZpPT09YXx8KG88dT9lLmJsX3RyZWVbMippXSs9bzowIT09aT8oaSE9PXMmJmUuYmxfdHJlZVsyKmldKyssZS5ibF90cmVlWzIqYl0rKyk6bzw9MTA/ZS5ibF90cmVlWzIqdl0rKzplLmJsX3RyZWVbMip5XSsrLHM9aSx1PShvPTApPT09YT8oaD0xMzgsMyk6aT09PWE/KGg9NiwzKTooaD03LDQpKX1mdW5jdGlvbiBWKGUsdCxyKXt2YXIgbixpLHM9LTEsYT10WzFdLG89MCxoPTcsdT00O2ZvcigwPT09YSYmKGg9MTM4LHU9Myksbj0wO248PXI7bisrKWlmKGk9YSxhPXRbMioobisxKSsxXSwhKCsrbzxoJiZpPT09YSkpe2lmKG88dSlmb3IoO0woZSxpLGUuYmxfdHJlZSksMCE9LS1vOyk7ZWxzZSAwIT09aT8oaSE9PXMmJihMKGUsaSxlLmJsX3RyZWUpLG8tLSksTChlLGIsZS5ibF90cmVlKSxQKGUsby0zLDIpKTpvPD0xMD8oTChlLHYsZS5ibF90cmVlKSxQKGUsby0zLDMpKTooTChlLHksZS5ibF90cmVlKSxQKGUsby0xMSw3KSk7cz1pLHU9KG89MCk9PT1hPyhoPTEzOCwzKTppPT09YT8oaD02LDMpOihoPTcsNCl9fW4oVCk7dmFyIHE9ITE7ZnVuY3Rpb24gSihlLHQscixuKXtQKGUsKHM8PDEpKyhuPzE6MCksMyksZnVuY3Rpb24oZSx0LHIsbil7TShlKSxuJiYoVShlLHIpLFUoZSx+cikpLGkuYXJyYXlTZXQoZS5wZW5kaW5nX2J1ZixlLndpbmRvdyx0LHIsZS5wZW5kaW5nKSxlLnBlbmRpbmcrPXJ9KGUsdCxyLCEwKX1yLl90cl9pbml0PWZ1bmN0aW9uKGUpe3F8fChmdW5jdGlvbigpe3ZhciBlLHQscixuLGkscz1uZXcgQXJyYXkoZysxKTtmb3Iobj1yPTA7bjxhLTE7bisrKWZvcihJW25dPXIsZT0wO2U8MTw8d1tuXTtlKyspQVtyKytdPW47Zm9yKEFbci0xXT1uLG49aT0wO248MTY7bisrKWZvcihUW25dPWksZT0wO2U8MTw8a1tuXTtlKyspRVtpKytdPW47Zm9yKGk+Pj03O248ZjtuKyspZm9yKFRbbl09aTw8NyxlPTA7ZTwxPDxrW25dLTc7ZSsrKUVbMjU2K2krK109bjtmb3IodD0wO3Q8PWc7dCsrKXNbdF09MDtmb3IoZT0wO2U8PTE0MzspelsyKmUrMV09OCxlKyssc1s4XSsrO2Zvcig7ZTw9MjU1Oyl6WzIqZSsxXT05LGUrKyxzWzldKys7Zm9yKDtlPD0yNzk7KXpbMiplKzFdPTcsZSsrLHNbN10rKztmb3IoO2U8PTI4NzspelsyKmUrMV09OCxlKyssc1s4XSsrO2ZvcihaKHosbCsxLHMpLGU9MDtlPGY7ZSsrKUNbMiplKzFdPTUsQ1syKmVdPWooZSw1KTtPPW5ldyBEKHosdyx1KzEsbCxnKSxCPW5ldyBEKEMsaywwLGYsZyksUj1uZXcgRChuZXcgQXJyYXkoMCkseCwwLGMscCl9KCkscT0hMCksZS5sX2Rlc2M9bmV3IEYoZS5keW5fbHRyZWUsTyksZS5kX2Rlc2M9bmV3IEYoZS5keW5fZHRyZWUsQiksZS5ibF9kZXNjPW5ldyBGKGUuYmxfdHJlZSxSKSxlLmJpX2J1Zj0wLGUuYmlfdmFsaWQ9MCxXKGUpfSxyLl90cl9zdG9yZWRfYmxvY2s9SixyLl90cl9mbHVzaF9ibG9jaz1mdW5jdGlvbihlLHQscixuKXt2YXIgaSxzLGE9MDswPGUubGV2ZWw/KDI9PT1lLnN0cm0uZGF0YV90eXBlJiYoZS5zdHJtLmRhdGFfdHlwZT1mdW5jdGlvbihlKXt2YXIgdCxyPTQwOTM2MjQ0NDc7Zm9yKHQ9MDt0PD0zMTt0Kysscj4+Pj0xKWlmKDEmciYmMCE9PWUuZHluX2x0cmVlWzIqdF0pcmV0dXJuIG87aWYoMCE9PWUuZHluX2x0cmVlWzE4XXx8MCE9PWUuZHluX2x0cmVlWzIwXXx8MCE9PWUuZHluX2x0cmVlWzI2XSlyZXR1cm4gaDtmb3IodD0zMjt0PHU7dCsrKWlmKDAhPT1lLmR5bl9sdHJlZVsyKnRdKXJldHVybiBoO3JldHVybiBvfShlKSksWShlLGUubF9kZXNjKSxZKGUsZS5kX2Rlc2MpLGE9ZnVuY3Rpb24oZSl7dmFyIHQ7Zm9yKFgoZSxlLmR5bl9sdHJlZSxlLmxfZGVzYy5tYXhfY29kZSksWChlLGUuZHluX2R0cmVlLGUuZF9kZXNjLm1heF9jb2RlKSxZKGUsZS5ibF9kZXNjKSx0PWMtMTszPD10JiYwPT09ZS5ibF90cmVlWzIqU1t0XSsxXTt0LS0pO3JldHVybiBlLm9wdF9sZW4rPTMqKHQrMSkrNSs1KzQsdH0oZSksaT1lLm9wdF9sZW4rMys3Pj4+Mywocz1lLnN0YXRpY19sZW4rMys3Pj4+Myk8PWkmJihpPXMpKTppPXM9cis1LHIrNDw9aSYmLTEhPT10P0ooZSx0LHIsbik6ND09PWUuc3RyYXRlZ3l8fHM9PT1pPyhQKGUsMisobj8xOjApLDMpLEsoZSx6LEMpKTooUChlLDQrKG4/MTowKSwzKSxmdW5jdGlvbihlLHQscixuKXt2YXIgaTtmb3IoUChlLHQtMjU3LDUpLFAoZSxyLTEsNSksUChlLG4tNCw0KSxpPTA7aTxuO2krKylQKGUsZS5ibF90cmVlWzIqU1tpXSsxXSwzKTtWKGUsZS5keW5fbHRyZWUsdC0xKSxWKGUsZS5keW5fZHRyZWUsci0xKX0oZSxlLmxfZGVzYy5tYXhfY29kZSsxLGUuZF9kZXNjLm1heF9jb2RlKzEsYSsxKSxLKGUsZS5keW5fbHRyZWUsZS5keW5fZHRyZWUpKSxXKGUpLG4mJk0oZSl9LHIuX3RyX3RhbGx5PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZS5wZW5kaW5nX2J1ZltlLmRfYnVmKzIqZS5sYXN0X2xpdF09dD4+PjgmMjU1LGUucGVuZGluZ19idWZbZS5kX2J1ZisyKmUubGFzdF9saXQrMV09MjU1JnQsZS5wZW5kaW5nX2J1ZltlLmxfYnVmK2UubGFzdF9saXRdPTI1NSZyLGUubGFzdF9saXQrKywwPT09dD9lLmR5bl9sdHJlZVsyKnJdKys6KGUubWF0Y2hlcysrLHQtLSxlLmR5bl9sdHJlZVsyKihBW3JdK3UrMSldKyssZS5keW5fZHRyZWVbMipOKHQpXSsrKSxlLmxhc3RfbGl0PT09ZS5saXRfYnVmc2l6ZS0xfSxyLl90cl9hbGlnbj1mdW5jdGlvbihlKXtQKGUsMiwzKSxMKGUsbSx6KSxmdW5jdGlvbihlKXsxNj09PWUuYmlfdmFsaWQ/KFUoZSxlLmJpX2J1ZiksZS5iaV9idWY9MCxlLmJpX3ZhbGlkPTApOjg8PWUuYmlfdmFsaWQmJihlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXT0yNTUmZS5iaV9idWYsZS5iaV9idWY+Pj04LGUuYmlfdmFsaWQtPTgpfShlKX19LHtcIi4uL3V0aWxzL2NvbW1vblwiOjQxfV0sNTM6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt0LmV4cG9ydHM9ZnVuY3Rpb24oKXt0aGlzLmlucHV0PW51bGwsdGhpcy5uZXh0X2luPTAsdGhpcy5hdmFpbF9pbj0wLHRoaXMudG90YWxfaW49MCx0aGlzLm91dHB1dD1udWxsLHRoaXMubmV4dF9vdXQ9MCx0aGlzLmF2YWlsX291dD0wLHRoaXMudG90YWxfb3V0PTAsdGhpcy5tc2c9XCJcIix0aGlzLnN0YXRlPW51bGwsdGhpcy5kYXRhX3R5cGU9Mix0aGlzLmFkbGVyPTB9fSx7fV0sNTQ6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKHIsbil7XCJ1c2Ugc3RyaWN0XCI7aWYoIXIuc2V0SW1tZWRpYXRlKXt2YXIgaSxzLHQsYSxvPTEsaD17fSx1PSExLGw9ci5kb2N1bWVudCxlPU9iamVjdC5nZXRQcm90b3R5cGVPZiYmT2JqZWN0LmdldFByb3RvdHlwZU9mKHIpO2U9ZSYmZS5zZXRUaW1lb3V0P2U6cixpPVwiW29iamVjdCBwcm9jZXNzXVwiPT09e30udG9TdHJpbmcuY2FsbChyLnByb2Nlc3MpP2Z1bmN0aW9uKGUpe3Byb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKXtjKGUpfSl9OmZ1bmN0aW9uKCl7aWYoci5wb3N0TWVzc2FnZSYmIXIuaW1wb3J0U2NyaXB0cyl7dmFyIGU9ITAsdD1yLm9ubWVzc2FnZTtyZXR1cm4gci5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtlPSExfSxyLnBvc3RNZXNzYWdlKFwiXCIsXCIqXCIpLHIub25tZXNzYWdlPXQsZX19KCk/KGE9XCJzZXRJbW1lZGlhdGUkXCIrTWF0aC5yYW5kb20oKStcIiRcIixyLmFkZEV2ZW50TGlzdGVuZXI/ci5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGQsITEpOnIuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIixkKSxmdW5jdGlvbihlKXtyLnBvc3RNZXNzYWdlKGErZSxcIipcIil9KTpyLk1lc3NhZ2VDaGFubmVsPygodD1uZXcgTWVzc2FnZUNoYW5uZWwpLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbihlKXtjKGUuZGF0YSl9LGZ1bmN0aW9uKGUpe3QucG9ydDIucG9zdE1lc3NhZ2UoZSl9KTpsJiZcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiaW4gbC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpPyhzPWwuZG9jdW1lbnRFbGVtZW50LGZ1bmN0aW9uKGUpe3ZhciB0PWwuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTt0Lm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2MoZSksdC5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCxzLnJlbW92ZUNoaWxkKHQpLHQ9bnVsbH0scy5hcHBlbmRDaGlsZCh0KX0pOmZ1bmN0aW9uKGUpe3NldFRpbWVvdXQoYywwLGUpfSxlLnNldEltbWVkaWF0ZT1mdW5jdGlvbihlKXtcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiYoZT1uZXcgRnVuY3Rpb24oXCJcIitlKSk7Zm9yKHZhciB0PW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpLHI9MDtyPHQubGVuZ3RoO3IrKyl0W3JdPWFyZ3VtZW50c1tyKzFdO3ZhciBuPXtjYWxsYmFjazplLGFyZ3M6dH07cmV0dXJuIGhbb109bixpKG8pLG8rK30sZS5jbGVhckltbWVkaWF0ZT1mfWZ1bmN0aW9uIGYoZSl7ZGVsZXRlIGhbZV19ZnVuY3Rpb24gYyhlKXtpZih1KXNldFRpbWVvdXQoYywwLGUpO2Vsc2V7dmFyIHQ9aFtlXTtpZih0KXt1PSEwO3RyeXshZnVuY3Rpb24oZSl7dmFyIHQ9ZS5jYWxsYmFjayxyPWUuYXJncztzd2l0Y2goci5sZW5ndGgpe2Nhc2UgMDp0KCk7YnJlYWs7Y2FzZSAxOnQoclswXSk7YnJlYWs7Y2FzZSAyOnQoclswXSxyWzFdKTticmVhaztjYXNlIDM6dChyWzBdLHJbMV0sclsyXSk7YnJlYWs7ZGVmYXVsdDp0LmFwcGx5KG4scil9fSh0KX1maW5hbGx5e2YoZSksdT0hMX19fX1mdW5jdGlvbiBkKGUpe2Uuc291cmNlPT09ciYmXCJzdHJpbmdcIj09dHlwZW9mIGUuZGF0YSYmMD09PWUuZGF0YS5pbmRleE9mKGEpJiZjKCtlLmRhdGEuc2xpY2UoYS5sZW5ndGgpKX19KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBzZWxmP3ZvaWQgMD09PWU/dGhpczplOnNlbGYpfSkuY2FsbCh0aGlzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7fV19LHt9LFsxMF0pKDEwKX0pOyIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJ1xuaW1wb3J0IHsgbmF2LCByZWZpbmVtZW50X29wdGlvbiwgcmVjaXBlcyB9IGZyb20gJy4vcmVjaXBlX25ldydcbmltcG9ydCBKU1ppcCBmcm9tICdqc3ppcCdcbmltcG9ydCB7IHVwZGF0ZV9pY29uLCBzaG91bGRFeGNsdWRlLCBnZXRDdXN0b21RdWVzdGlvbiwgcHJvY2Vzc1JlY2lwZSwgZmluZFBhZ2VNZXRhIH0gZnJvbSAnLi91dGlscy91dGlsJ1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xuaW1wb3J0IHsgRE9NUGFyc2VyLCBwYXJzZUhUTUwgfSBmcm9tICdsaW5rZWRvbSc7XG5cbmxldCBpbnRlcmFjdGlvbnM6IGFueVtdID0gW11cbmxldCBzY3JlZW5zaG90czogW3N0cmluZywgc3RyaW5nXVtdID0gW11cbmxldCByZWFzb25zQW5ub3RhdGlvbjogYW55W10gPSBbXVxubGV0IHVwbG9hZFRpbWVyOiBOb2RlSlMuVGltZXIgfCBudWxsIHwgZmFsc2UgPSBudWxsXG5sZXQgdXNlcklkOiBzdHJpbmcgPSAnJ1xuXG5sZXQgbGFzdFRpbWVzdGFtcDogc3RyaW5nIHwgbnVsbCA9IG51bGxcbmxldCBsYXN0dXBsb2FkVGltZXN0YW1wOiBzdHJpbmcgfCBudWxsID0gbnVsbFxubGV0IGxhc3RHZW5lcmF0ZVByZXNpZ25lZFBvc3RSZXNwb25zZToge1xuICB1cmw6IHN0cmluZ1xuICBmaWVsZHM6IHsga2V5OiBzdHJpbmc7IEFXU0FjY2Vzc0tleUlkOiBzdHJpbmc7IHBvbGljeTogc3RyaW5nOyBzaWduYXR1cmU6IHN0cmluZyB9XG4gIHRpbWVzdGFtcDogbnVtYmVyXG59IHwgbnVsbCA9IG51bGxcblxuaW1wb3J0IHtcbiAgcG9wdXBfcHJvYmFiaWxpdHksXG4gIHBvcHVwX3Njcm9sbF9wcm9iYWJpbGl0eSxcbiAgcG9wdXBfY2xpY2tfcHJvYmFiaWxpdHksXG4gIHBvcHVwX25hdmlnYXRpb25fcHJvYmFiaWxpdHksXG4gIHBvcHVwX3RhYkFjdGl2YXRlX3Byb2JhYmlsaXR5LFxuICBmb2xkZXJfbmFtZSxcbiAgemlwLFxuICBiYXNlX3VybCxcbiAgZGF0YV9jb2xsZWN0b3Jfc2VjcmV0X2lkLFxuICBmaWx0ZXJfdXJsLFxuICByYXRpb25hbGVfc3RhdHVzX3VybFxufSBmcm9tICcuL2NvbmZpZydcblxuY29uc3QgdXBsb2FkX3VybCA9IGAke2Jhc2VfdXJsfS91cGxvYWRgXG5jb25zdCBpbnRlcmFjdGlvbnNfdXJsID0gYCR7YmFzZV91cmx9L2ludGVyYWN0aW9uc2BcbmNvbnN0IGdlbmVyYXRlX3ByZXNpZ25lZF9wb3N0X3VybCA9IGAke2Jhc2VfdXJsfS9nZW5lcmF0ZV9wcmVzaWduZWRfcG9zdGBcblxuaW50ZXJmYWNlIFRhYkhpc3Rvcnkge1xuICBiYWNrU3RhY2s6IHN0cmluZ1tdXG4gIGZvcndhcmRTdGFjazogc3RyaW5nW11cbiAgY3VycmVudFVybDogc3RyaW5nIHwgbnVsbFxufVxuXG5jb25zdCB0YWJOYXZpZ2F0aW9uSGlzdG9yeToge1xuICBbdGFiSWQ6IG51bWJlcl06IFRhYkhpc3Rvcnlcbn0gPSB7fVxuXG5cbmFzeW5jIGZ1bmN0aW9uIGZldGNoQ2FydEluZm8ocGF0aCkge1xuICBpZiAocGF0aCA9PT0gbnVsbCB8fCBwYXRoID09PSAnJykge1xuICAgIHJldHVybiBcIlwiXG4gIH1cbiAgdHJ5IHtcbiAgICBjb25zdCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpXG5cbiAgICAvLyBnZXQgdGhlIGh0bWwgb2YgY2FydCBwYWdlXG4gICAgY29uc3QgdXJsID0gJ2h0dHBzOi8vd3d3LmFtYXpvbi5jb20nICsgcGF0aFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKVxuICAgIGNvbnN0IGh0bWxDb250ZW50ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpXG5cbiAgICAvLyByZXR1cm4gaHRtbENvbnRlbnRcblxuICAgIGNvbnN0IG1pZCA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgY29uc29sZS5sb2coYEV4ZWN1dGlvbiBUaW1lIG9mIGZldGNoOiAke21pZCAtIHN0YXJ0fSBtc2ApXG5cblxuICAgIGNvbnN0IGRvY3VtZW50ID0gKG5ldyBET01QYXJzZXIpLnBhcnNlRnJvbVN0cmluZyhodG1sQ29udGVudClcbiAgICBjb25zdCByb290RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2h0bWwnKVxuXG4gICAgY29uc3QgeyBkZWZhdWx0Vmlldzogd2luZG93IH0gPSBkb2N1bWVudDtcblxuICAgIGNvbnN0IHtcbiAgICAgIEV2ZW50LCBDdXN0b21FdmVudCxcbiAgICAgIEhUTUxFbGVtZW50LFxuICAgICAgY3VzdG9tRWxlbWVudHNcbiAgICB9ID0gd2luZG93O1xuXG5cbiAgICAvLyBnZXQgbWV0YWRhdGEgZnJvbSB0aGUgaHRtbFxuICAgIGNvbnN0IHNpbXBsaWZpZWRIVE1MID0gcHJvY2Vzc1JlY2lwZShyb290RWxlbWVudCwgdXJsLCBkb2N1bWVudCwgd2luZG93KVxuICAgIGNvbnN0IHBhZ2VNZXRhID0gZmluZFBhZ2VNZXRhKHJvb3RFbGVtZW50LCBkb2N1bWVudClcblxuICAgIGNvbnN0IGVuZCA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgY29uc29sZS5sb2coYEV4ZWN1dGlvbiBUaW1lIG9mIHByb2Nlc3Npbmc6ICR7ZW5kIC0gbWlkfSBtc2ApXG5cbiAgICByZXR1cm4gcGFnZU1ldGFcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBjYXJ0IGluZm9ybWF0aW9uOicgKyBlcnJvcilcbiAgICByZXR1cm4gXCJcIlxuICB9XG59XG5cbmltcG9ydCB7IG9wZW5EQiB9IGZyb20gJ2lkYidcbmNvbnN0IGRiID0gYXdhaXQgb3BlbkRCKCd1c2VySW50ZXJhY3Rpb25zJywgMSwge1xuICB1cGdyYWRlKGRiKSB7XG4gICAgaWYgKCFkYi5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKCdpbnRlcmFjdGlvbnMnKSkge1xuICAgICAgY29uc3QgaW50ZXJhY3Rpb25zU3RvcmUgPSBkYi5jcmVhdGVPYmplY3RTdG9yZSgnaW50ZXJhY3Rpb25zJywge1xuICAgICAgICBrZXlQYXRoOiAnaWQnLFxuICAgICAgICBhdXRvSW5jcmVtZW50OiB0cnVlXG4gICAgICB9KVxuICAgICAgaW50ZXJhY3Rpb25zU3RvcmUuY3JlYXRlSW5kZXgoJ3RpbWVzdGFtcCcsICd0aW1lc3RhbXAnLCB7IHVuaXF1ZTogZmFsc2UgfSlcbiAgICAgIGludGVyYWN0aW9uc1N0b3JlLmNyZWF0ZUluZGV4KCd1dWlkJywgJ3V1aWQnLCB7IHVuaXF1ZTogdHJ1ZSB9KVxuICAgICAgaW50ZXJhY3Rpb25zU3RvcmUuY3JlYXRlSW5kZXgoJ3VwbG9hZGVkJywgJ3VwbG9hZGVkJywgeyB1bmlxdWU6IGZhbHNlIH0pXG4gICAgICBjb25zb2xlLmxvZygnRGF0YWJhc2UgaW50ZXJhY3Rpb25zIGluaXRpYWxpemVkJylcbiAgICB9XG4gICAgaWYgKCFkYi5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKCdzY3JlZW5zaG90cycpKSB7XG4gICAgICBjb25zdCBzY3JlZW5zaG90c1N0b3JlID0gZGIuY3JlYXRlT2JqZWN0U3RvcmUoJ3NjcmVlbnNob3RzJywge1xuICAgICAgICBrZXlQYXRoOiAnaWQnLFxuICAgICAgICBhdXRvSW5jcmVtZW50OiB0cnVlXG4gICAgICB9KVxuICAgICAgc2NyZWVuc2hvdHNTdG9yZS5jcmVhdGVJbmRleCgndGltZXN0YW1wJywgJ3RpbWVzdGFtcCcsIHsgdW5pcXVlOiBmYWxzZSB9KVxuICAgICAgc2NyZWVuc2hvdHNTdG9yZS5jcmVhdGVJbmRleCgndXVpZCcsICd1dWlkJywgeyB1bmlxdWU6IHRydWUgfSlcbiAgICAgIHNjcmVlbnNob3RzU3RvcmUuY3JlYXRlSW5kZXgoJ3VwbG9hZGVkJywgJ3VwbG9hZGVkJywgeyB1bmlxdWU6IGZhbHNlIH0pXG4gICAgICBjb25zb2xlLmxvZygnRGF0YWJhc2Ugc2NyZWVuc2hvdHMgaW5pdGlhbGl6ZWQnKVxuICAgIH1cbiAgICBpZiAoIWRiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoJ3JlYXNvbnNBbm5vdGF0aW9uJykpIHtcbiAgICAgIGNvbnN0IHJlYXNvbnNBbm5vdGF0aW9uU3RvcmUgPSBkYi5jcmVhdGVPYmplY3RTdG9yZSgncmVhc29uc0Fubm90YXRpb24nLCB7XG4gICAgICAgIGtleVBhdGg6ICdpZCcsXG4gICAgICAgIGF1dG9JbmNyZW1lbnQ6IHRydWVcbiAgICAgIH0pXG4gICAgICByZWFzb25zQW5ub3RhdGlvblN0b3JlLmNyZWF0ZUluZGV4KCd0aW1lc3RhbXAnLCAndGltZXN0YW1wJywgeyB1bmlxdWU6IGZhbHNlIH0pXG4gICAgICByZWFzb25zQW5ub3RhdGlvblN0b3JlLmNyZWF0ZUluZGV4KCd1dWlkJywgJ3V1aWQnLCB7IHVuaXF1ZTogdHJ1ZSB9KVxuICAgICAgcmVhc29uc0Fubm90YXRpb25TdG9yZS5jcmVhdGVJbmRleCgndXBsb2FkZWQnLCAndXBsb2FkZWQnLCB7IHVuaXF1ZTogZmFsc2UgfSlcbiAgICAgIGNvbnNvbGUubG9nKCdEYXRhYmFzZSByZWFzb25zQW5ub3RhdGlvbiBpbml0aWFsaXplZCcpXG4gICAgfVxuICAgIGlmICghZGIub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucygnaHRtbFNuYXBzaG90cycpKSB7XG4gICAgICBjb25zdCBodG1sU25hcHNob3RzU3RvcmUgPSBkYi5jcmVhdGVPYmplY3RTdG9yZSgnaHRtbFNuYXBzaG90cycsIHtcbiAgICAgICAga2V5UGF0aDogJ2lkJyxcbiAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZVxuICAgICAgfSlcbiAgICAgIGh0bWxTbmFwc2hvdHNTdG9yZS5jcmVhdGVJbmRleCgndGltZXN0YW1wJywgJ3RpbWVzdGFtcCcsIHsgdW5pcXVlOiBmYWxzZSB9KVxuICAgICAgaHRtbFNuYXBzaG90c1N0b3JlLmNyZWF0ZUluZGV4KCd1dWlkJywgJ3V1aWQnLCB7IHVuaXF1ZTogdHJ1ZSB9KVxuICAgICAgaHRtbFNuYXBzaG90c1N0b3JlLmNyZWF0ZUluZGV4KCd1cGxvYWRlZCcsICd1cGxvYWRlZCcsIHsgdW5pcXVlOiBmYWxzZSB9KVxuICAgICAgY29uc29sZS5sb2coJ0RhdGFiYXNlIGh0bWxTbmFwc2hvdHMgaW5pdGlhbGl6ZWQnKVxuICAgIH1cbiAgICBpZiAoIWRiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoJ29yZGVyJykpIHtcbiAgICAgIGNvbnN0IG9yZGVyU3RvcmUgPSBkYi5jcmVhdGVPYmplY3RTdG9yZSgnb3JkZXInLCB7IGtleVBhdGg6ICdpZCcsIGF1dG9JbmNyZW1lbnQ6IHRydWUgfSlcbiAgICAgIG9yZGVyU3RvcmUuY3JlYXRlSW5kZXgoJ3RpbWVzdGFtcCcsICd0aW1lc3RhbXAnLCB7IHVuaXF1ZTogdHJ1ZSB9KVxuICAgICAgb3JkZXJTdG9yZS5jcmVhdGVJbmRleCgndXBsb2FkZWQnLCAndXBsb2FkZWQnLCB7IHVuaXF1ZTogZmFsc2UgfSlcbiAgICAgIGNvbnNvbGUubG9nKCdEYXRhYmFzZSBvcmRlciBpbml0aWFsaXplZCcpXG4gICAgfVxuICB9XG59KVxuXG5mdW5jdGlvbiBhbmFseXplTmF2aWdhdGlvbih0YWJJZDogbnVtYmVyLCB1cmw6IHN0cmluZyk6ICduZXcnIHwgJ2JhY2snIHwgJ2ZvcndhcmQnIHwgJ3JlbG9hZCcge1xuICBpZiAoIXRhYk5hdmlnYXRpb25IaXN0b3J5W3RhYklkXSkge1xuICAgIHRhYk5hdmlnYXRpb25IaXN0b3J5W3RhYklkXSA9IHtcbiAgICAgIGJhY2tTdGFjazogW10sXG4gICAgICBmb3J3YXJkU3RhY2s6IFtdLFxuICAgICAgY3VycmVudFVybDogbnVsbFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGhpc3RvcnkgPSB0YWJOYXZpZ2F0aW9uSGlzdG9yeVt0YWJJZF1cblxuICBpZiAoIWhpc3RvcnkuY3VycmVudFVybCkge1xuICAgIGhpc3RvcnkuY3VycmVudFVybCA9IHVybFxuICAgIHJldHVybiAnbmV3J1xuICB9XG4gIGlmIChoaXN0b3J5LmN1cnJlbnRVcmwgPT09IHVybCkge1xuICAgIHJldHVybiAncmVsb2FkJ1xuICB9XG5cbiAgaWYgKGhpc3RvcnkuYmFja1N0YWNrLmxlbmd0aCA+IDAgJiYgaGlzdG9yeS5iYWNrU3RhY2tbaGlzdG9yeS5iYWNrU3RhY2subGVuZ3RoIC0gMV0gPT09IHVybCkge1xuICAgIGhpc3RvcnkuZm9yd2FyZFN0YWNrLnB1c2goaGlzdG9yeS5jdXJyZW50VXJsISlcbiAgICBoaXN0b3J5LmN1cnJlbnRVcmwgPSBoaXN0b3J5LmJhY2tTdGFjay5wb3AoKSFcbiAgICByZXR1cm4gJ2JhY2snXG4gIH1cblxuICBpZiAoXG4gICAgaGlzdG9yeS5mb3J3YXJkU3RhY2subGVuZ3RoID4gMCAmJlxuICAgIGhpc3RvcnkuZm9yd2FyZFN0YWNrW2hpc3RvcnkuZm9yd2FyZFN0YWNrLmxlbmd0aCAtIDFdID09PSB1cmxcbiAgKSB7XG4gICAgaGlzdG9yeS5iYWNrU3RhY2sucHVzaChoaXN0b3J5LmN1cnJlbnRVcmwhKVxuICAgIGhpc3RvcnkuY3VycmVudFVybCA9IGhpc3RvcnkuZm9yd2FyZFN0YWNrLnBvcCgpIVxuICAgIHJldHVybiAnZm9yd2FyZCdcbiAgfVxuXG4gIGhpc3RvcnkuYmFja1N0YWNrLnB1c2goaGlzdG9yeS5jdXJyZW50VXJsISlcbiAgaGlzdG9yeS5mb3J3YXJkU3RhY2sgPSBbXVxuICBoaXN0b3J5LmN1cnJlbnRVcmwgPSB1cmxcbiAgcmV0dXJuICduZXcnXG59XG5cbi8vIEFkZCBuZXcgZnVuY3Rpb24gdG8gaGFuZGxlIHNjcmVlbnNob3Qgc2F2aW5nXG5hc3luYyBmdW5jdGlvbiBzYXZlU2NyZWVuc2hvdF9pZGIoc2NyZWVuc2hvdERhdGFVcmw6IHN0cmluZywgdGltZXN0YW1wOiBzdHJpbmcsIHV1aWQ6IHN0cmluZykge1xuICBpZiAoc2NyZWVuc2hvdERhdGFVcmwpIHtcbiAgICBjb25zdCBzY3JlZW5zaG90SWQgPSBgc2NyZWVuc2hvdF8ke3RpbWVzdGFtcH1fJHt1dWlkfWBcbiAgICBjb25zdCBzY3JlZW5zaG90RGF0YSA9IHtcbiAgICAgIHNjcmVlbnNob3RJZDogc2NyZWVuc2hvdElkLFxuICAgICAgZGF0YVVybDogc2NyZWVuc2hvdERhdGFVcmwsXG4gICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcCxcbiAgICAgIHV1aWQ6IHV1aWRcbiAgICB9XG5cbiAgICBhd2FpdCBkYi5hZGQoJ3NjcmVlbnNob3RzJywge1xuICAgICAgLi4uc2NyZWVuc2hvdERhdGEsXG4gICAgICB1cGxvYWRlZDogMFxuICAgIH0pXG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1lc3NhZ2UsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSA9PiB7XG4gIDsoYXN5bmMgKCkgPT4ge1xuICAgIGlmIChtZXNzYWdlLmFjdGlvbiA9PT0gJ3NhdmVEYXRhJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdXVpZCA9IG1lc3NhZ2UuZGF0YS51dWlkXG5cbiAgICAgICAgY29uc3QgaHRtbGRhdGEgPSB7XG4gICAgICAgICAgaHRtbFNuYXBzaG90SWQ6IG1lc3NhZ2UuZGF0YS5odG1sU25hcHNob3RJZCxcbiAgICAgICAgICBodG1sQ29udGVudDogbWVzc2FnZS5kYXRhLmh0bWxDb250ZW50LFxuICAgICAgICAgIHNpbXBsaWZpZWRIVE1MOiBtZXNzYWdlLmRhdGEuc2ltcGxpZmllZEhUTUwsXG4gICAgICAgICAgdGltZXN0YW1wOiBtZXNzYWdlLmRhdGEudGltZXN0YW1wLFxuICAgICAgICAgIHV1aWQ6IHV1aWRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZldGNoVXJsID0gbWVzc2FnZS5kYXRhLmZldGNoVXJsIHx8ICcnXG5cbiAgICAgICAgZGVsZXRlIG1lc3NhZ2UuZGF0YS5odG1sQ29udGVudFxuICAgICAgICBkZWxldGUgbWVzc2FnZS5kYXRhLnNpbXBsaWZpZWRIVE1MXG4gICAgICAgIGRlbGV0ZSBtZXNzYWdlLmRhdGEuZmV0Y2hVcmxcblxuICAgICAgICBjb25zdCBzYXZlRGF0YSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnc2F2ZURhdGEgJywgbWVzc2FnZS5kYXRhLmV2ZW50VHlwZSlcbiAgICAgICAgICBjb25zb2xlLmxvZyhmZXRjaFVybClcbiAgICAgICAgICBpZiAoZmV0Y2hVcmwgIT09ICcnKSB7XG4gICAgICAgICAgICAvLyBjb25zdCBjYXJ0SW5mbyA9IGF3YWl0IGZldGNoQ2FydEluZm8oZmV0Y2hVcmwpXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjYXJ0SW5mbylcbiAgICAgICAgICAgIGZldGNoQ2FydEluZm8oZmV0Y2hVcmwpLnRoZW4oY2FydEluZm8gPT4ge1xuICAgICAgICAgICAgICBjb25zdCBjYXJ0ZGF0YSA9IHtcbiAgICAgICAgICAgICAgICB1cmw6IGZldGNoVXJsLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbWVzc2FnZS5kYXRhLnRpbWVzdGFtcCxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogSlNPTi5zdHJpbmdpZnkoY2FydEluZm8sIG51bGwsIDIpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc29sZS5sb2coY2FydGRhdGEpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBhd2FpdCBkYi5hZGQoJ2ludGVyYWN0aW9ucycsIHtcbiAgICAgICAgICAgIC4uLm1lc3NhZ2UuZGF0YSxcbiAgICAgICAgICAgIHVwbG9hZGVkOiAwXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICBzYXZlRGF0YSgpLFxuICAgICAgICAgIHNhdmVIVE1MKFxuICAgICAgICAgICAgaHRtbGRhdGEuaHRtbENvbnRlbnQsXG4gICAgICAgICAgICBodG1sZGF0YS5zaW1wbGlmaWVkSFRNTCxcbiAgICAgICAgICAgIGh0bWxkYXRhLmh0bWxTbmFwc2hvdElkLFxuICAgICAgICAgICAgaHRtbGRhdGEudGltZXN0YW1wLFxuICAgICAgICAgICAgaHRtbGRhdGEudXVpZFxuICAgICAgICAgICksXG4gICAgICAgICAgc2VuZFBvcHVwKFxuICAgICAgICAgICAgc2VuZGVyLnRhYj8uaWQsXG4gICAgICAgICAgICBtZXNzYWdlLmRhdGEudGltZXN0YW1wLFxuICAgICAgICAgICAgbWVzc2FnZS5kYXRhLmV2ZW50VHlwZSxcbiAgICAgICAgICAgIG1lc3NhZ2UuZGF0YSxcbiAgICAgICAgICAgIHV1aWRcbiAgICAgICAgICApXG4gICAgICAgIF0pXG4gICAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IHRydWUgfSlcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIHNhdmVEYXRhOicsIGVycm9yKVxuICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IChlcnJvciBhcyBFcnJvcikubWVzc2FnZSB9KVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWUgLy8gS2VlcCBtZXNzYWdlIGNoYW5uZWwgb3BlbiBmb3IgYXN5bmMgcmVzcG9uc2VcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuYWN0aW9uID09PSAnc2F2ZU9yZGVyJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc29sZS5sb2coJ3NhdmVPcmRlcicsIG1lc3NhZ2UuZGF0YSlcbiAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLmRhdGEgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgYXdhaXQgZGIuYWRkKCdvcmRlcicsIHtcbiAgICAgICAgICAgIC4uLm1lc3NhZ2UuZGF0YSxcbiAgICAgICAgICAgIHVwbG9hZGVkOiAwXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG1lc3NhZ2UuZGF0YSkpIHtcbiAgICAgICAgICBpZiAobWVzc2FnZS5kYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ29yZGVyJywgJ3JlYWR3cml0ZScpXG4gICAgICAgICAgICBjb25zdCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdvcmRlcicpXG4gICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbLi4ubWVzc2FnZS5kYXRhLm1hcCgoaXRlbSkgPT4gc3RvcmUuYWRkKGl0ZW0pKSwgdHguZG9uZV0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ludmFsaWQgZGF0YSBmb3JtYXQgZm9yIHNhdmVPcmRlcjonLCBtZXNzYWdlLmRhdGEpXG4gICAgICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdJbnZhbGlkIGRhdGEgZm9ybWF0IGZvciBzYXZlT3JkZXInIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IHRydWUgfSlcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIHNhdmVPcmRlcjonLCBlcnJvcilcbiAgICAgICAgc2VuZFJlc3BvbnNlKHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UgfSlcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIC8vIENhcHR1cmUgc2NyZWVuc2hvdCBvbiBkZW1hbmRcbiAgICBpZiAobWVzc2FnZS5hY3Rpb24gPT09ICdjYXB0dXJlU2NyZWVuc2hvdCcpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdnZXQgc2NyZWVuc2hvdCByZXF1ZXN0JylcbiAgICAgICAgY29uc3Qgc3RhcnRfdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpXG4gICAgICAgIGNvbnN0IHNjcmVlbnNob3REYXRhVXJsID0gYXdhaXQgY2FwdHVyZVNjcmVlbnNob3QoKVxuICAgICAgICAvLyBjb25zb2xlLmxvZygnY2FwdHVyZSBzY3JlZW5zaG90IHRpbWU6ICcsIG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRfdGltZSlcbiAgICAgICAgaWYgKHNjcmVlbnNob3REYXRhVXJsKSB7XG4gICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IHNhdmVTY3JlZW5zaG90X2lkYihcbiAgICAgICAgICAgIHNjcmVlbnNob3REYXRhVXJsLFxuICAgICAgICAgICAgbWVzc2FnZS50aW1lc3RhbXAsXG4gICAgICAgICAgICBtZXNzYWdlLnV1aWRcbiAgICAgICAgICApXG4gICAgICAgICAgY29uc29sZS5sb2coJ3NhdmUgc2NyZWVuc2hvdCBzdWNjZXNzJywgc3VjY2VzcylcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygndGltZTogJywgbmV3IERhdGUoKS50b0lTT1N0cmluZygpKVxuICAgICAgICAgIHNlbmRSZXNwb25zZSh7XG4gICAgICAgICAgICBzdWNjZXNzLFxuICAgICAgICAgICAgbWVzc2FnZTogc3VjY2VzcyA/IHVuZGVmaW5lZCA6ICdGYWlsZWQgdG8gY2FwdHVyZSBzY3JlZW5zaG90J1xuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VuZFJlc3BvbnNlKHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdGYWlsZWQgdG8gY2FwdHVyZSBzY3JlZW5zaG90JyB9KVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBjYXB0dXJlU2NyZWVuc2hvdDonLCBlcnJvcilcbiAgICAgICAgc2VuZFJlc3BvbnNlKHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdGYWlsZWQgdG8gY2FwdHVyZSBzY3JlZW5zaG90JyB9KVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICAvLyBEb3dubG9hZCBkYXRhIG9uIHVzZXIgcmVxdWVzdFxuICAgIGlmIChtZXNzYWdlLmFjdGlvbiA9PT0gJ2Rvd25sb2FkRGF0YScpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdkb3dubG9hZERhdGEnKVxuICAgICAgICBjb25zdCBzdWNjZXNzID0gYXdhaXQgZG93bmxvYWREYXRhTG9jYWxseSgpXG4gICAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3MgfSlcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGhhbmRsaW5nIGRvd25sb2FkOicsIGVycm9yKVxuICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IChlcnJvciBhcyBFcnJvcikubWVzc2FnZSB9KVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBpZiAobWVzc2FnZS5hY3Rpb24gPT09ICdjbGVhck1lbW9yeUNhY2hlJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gQ2xlYXIgSW5kZXhlZERCIGRhdGFcbiAgICAgICAgY29uc3QgdHggPSBkYi50cmFuc2FjdGlvbihcbiAgICAgICAgICBbJ2ludGVyYWN0aW9ucycsICdodG1sU25hcHNob3RzJywgJ29yZGVyJywgJ3NjcmVlbnNob3RzJywgJ3JlYXNvbnNBbm5vdGF0aW9uJ10sXG4gICAgICAgICAgJ3JlYWR3cml0ZSdcbiAgICAgICAgKVxuXG4gICAgICAgIGNvbnN0IGNsZWFyUHJvbWlzZXMgPSBbXVxuXG4gICAgICAgIGNsZWFyUHJvbWlzZXMucHVzaCh0eC5vYmplY3RTdG9yZSgnaW50ZXJhY3Rpb25zJykuY2xlYXIoKSlcbiAgICAgICAgY2xlYXJQcm9taXNlcy5wdXNoKHR4Lm9iamVjdFN0b3JlKCdodG1sU25hcHNob3RzJykuY2xlYXIoKSlcbiAgICAgICAgY2xlYXJQcm9taXNlcy5wdXNoKHR4Lm9iamVjdFN0b3JlKCdvcmRlcicpLmNsZWFyKCkpXG4gICAgICAgIGNsZWFyUHJvbWlzZXMucHVzaCh0eC5vYmplY3RTdG9yZSgnc2NyZWVuc2hvdHMnKS5jbGVhcigpKVxuICAgICAgICBjbGVhclByb21pc2VzLnB1c2godHgub2JqZWN0U3RvcmUoJ3JlYXNvbnNBbm5vdGF0aW9uJykuY2xlYXIoKSlcbiAgICAgICAgY2xlYXJQcm9taXNlcy5wdXNoKHR4LmRvbmUpXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKGNsZWFyUHJvbWlzZXMpXG5cbiAgICAgICAgc2VuZFJlc3BvbnNlKHsgc3VjY2VzczogdHJ1ZSB9KVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaGFuZGxpbmcgY2xlYXJNZW1vcnlDYWNoZTonLCBlcnJvcilcbiAgICAgICAgc2VuZFJlc3BvbnNlKHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UgfSlcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9KSgpXG4gIHJldHVybiB0cnVlIC8vIEtlZXBzIHRoZSBtZXNzYWdlIGNoYW5uZWwgb3BlbiBmb3IgYXN5bmMgcmVzcG9uc2VzXG59KVxuXG4vLyBDYXB0dXJlIHRoZSBzY3JlZW5zaG90IGluIHRoZSBjdXJyZW50IHRhYlxuYXN5bmMgZnVuY3Rpb24gY2FwdHVyZVNjcmVlbnNob3QoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgW3RhYl0gPSBhd2FpdCBjaHJvbWUudGFicy5xdWVyeSh7IGFjdGl2ZTogdHJ1ZSwgY3VycmVudFdpbmRvdzogdHJ1ZSB9KVxuICAgIGlmICh0YWIpIHtcbiAgICAgIHJldHVybiBhd2FpdCBjaHJvbWUudGFicy5jYXB0dXJlVmlzaWJsZVRhYih0YWIud2luZG93SWQsIHtcbiAgICAgICAgZm9ybWF0OiAnanBlZycsXG4gICAgICAgIHF1YWxpdHk6IDI1XG4gICAgICB9KVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjYXB0dXJpbmcgc2NyZWVuc2hvdDonLCBlcnJvcilcbiAgfVxuICByZXR1cm4gbnVsbFxufVxuXG5mdW5jdGlvbiBoYXNoQ29kZShzdHI6IHN0cmluZykge1xuICBsZXQgaGFzaCA9IDBcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoYXNoIHw9IDBcbiAgfVxuICBjb25zb2xlLmxvZygnSGFzaCB2YWx1ZSBiZWZvcmUgcmV0dXJuOicsIGhhc2gpXG4gIHJldHVybiBoYXNoLnRvU3RyaW5nKClcbn1cblxuY29uc3Qgc2F2ZUhUTUwgPSBhc3luYyAoXG4gIGh0bWxDb250ZW50OiBzdHJpbmcsXG4gIHNpbXBsaWZpZWRIVE1MOiBzdHJpbmcsXG4gIGN1cnJlbnRTbmFwc2hvdElkOiBzdHJpbmcsXG4gIHRpbWVzdGFtcDogc3RyaW5nLFxuICB1dWlkOiBzdHJpbmdcbikgPT4ge1xuICBhd2FpdCBkYi5hZGQoJ2h0bWxTbmFwc2hvdHMnLCB7XG4gICAgaHRtbFNuYXBzaG90SWQ6IGN1cnJlbnRTbmFwc2hvdElkLFxuICAgIGh0bWxDb250ZW50OiBodG1sQ29udGVudCxcbiAgICBzaW1wbGlmaWVkSFRNTDogc2ltcGxpZmllZEhUTUwsXG4gICAgdGltZXN0YW1wOiB0aW1lc3RhbXAsXG4gICAgdXVpZDogdXVpZCxcbiAgICB1cGxvYWRlZDogMFxuICB9KVxufVxuXG5jb25zdCBzYXZlSW50ZXJhY3Rpb24gPSBhc3luYyAoXG4gIGV2ZW50VHlwZTogc3RyaW5nLFxuICB0aW1lc3RhbXA6IHN0cmluZyxcbiAgdGFyZ2V0X3VybDogc3RyaW5nLFxuICBodG1sU25hcHNob3RJZDogc3RyaW5nLFxuICB1dWlkOiBzdHJpbmcsXG4gIG5hdmlnYXRpb25UeXBlOiBzdHJpbmcgfCBudWxsID0gbnVsbCxcbiAgcGFnZU1ldGE6IHN0cmluZyB8IG51bGwgPSBudWxsLFxuICB3aW5kb3dTaXplOiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH0gfCBudWxsID0gbnVsbFxuKSA9PiB7XG4gIGNvbnN0IGRhdGEgPSB7XG4gICAgZXZlbnRUeXBlLFxuICAgIHRpbWVzdGFtcCxcbiAgICB0YXJnZXRfdXJsLFxuICAgIGh0bWxTbmFwc2hvdElkLFxuICAgIHV1aWQsXG4gICAgcGFnZU1ldGEsXG4gICAgd2luZG93U2l6ZVxuICB9XG5cbiAgLy8gQWRkIG5hdmlnYXRpb25UeXBlIG9ubHkgaWYgaXQgZXhpc3RzXG4gIGlmIChuYXZpZ2F0aW9uVHlwZSkge1xuICAgIGRhdGFbJ25hdmlnYXRpb25UeXBlJ10gPSBuYXZpZ2F0aW9uVHlwZVxuICB9XG5cbiAgYXdhaXQgZGIuYWRkKCdpbnRlcmFjdGlvbnMnLCB7XG4gICAgLi4uZGF0YSxcbiAgICB1cGxvYWRlZDogMFxuICB9KVxufVxuXG5jb25zdCBzYXZlU2NyZWVuc2hvdCA9IGFzeW5jICh3aW5kb3dJZDogbnVtYmVyLCB0aW1lc3RhbXA6IHN0cmluZywgdXVpZDogc3RyaW5nKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3Qgc2NyZWVuc2hvdERhdGFVcmwgPSBhd2FpdCBjaHJvbWUudGFicy5jYXB0dXJlVmlzaWJsZVRhYih3aW5kb3dJZCwge1xuICAgICAgZm9ybWF0OiAnanBlZycsXG4gICAgICBxdWFsaXR5OiAyNVxuICAgIH0pXG4gICAgYXdhaXQgc2F2ZVNjcmVlbnNob3RfaWRiKHNjcmVlbnNob3REYXRhVXJsLCB0aW1lc3RhbXAsIHV1aWQpXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gc2F2ZVNjcmVlbnNob3Q6JywgZXJyb3IpXG4gIH1cbn1cblxuY29uc3Qgc2VuZFBvcHVwID0gYXN5bmMgKFxuICB0YWJJZDogbnVtYmVyLFxuICB0aW1lc3RhbXA6IHN0cmluZyxcbiAgZXZlbnRUeXBlOiBzdHJpbmcsXG4gIGRhdGE6IGFueSxcbiAgdXVpZDogc3RyaW5nXG4pID0+IHtcbiAgaWYgKFxuICAgIGRhdGEudGFyZ2V0Py5pZD8udG9Mb3dlckNhc2UoKS5pbmNsdWRlcygncnVmdXMnKSB8fFxuICAgIGRhdGEudGFyZ2V0Py5jbGFzc05hbWU/LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3J1ZnVzJylcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgLy8gY29uc29sZS5sb2coJ2RhdGEnLCBkYXRhKVxuICBjb25zdCB7IHF1ZXN0aW9uLCBwbGFjZWhvbGRlciB9ID0gZ2V0Q3VzdG9tUXVlc3Rpb24oZXZlbnRUeXBlLCBkYXRhKVxuICBsZXQgcHJvYmFiaWxpdHkgPSBwb3B1cF9wcm9iYWJpbGl0eVxuICBzd2l0Y2ggKGV2ZW50VHlwZSkge1xuICAgIGNhc2UgJ3Njcm9sbCc6XG4gICAgICBwcm9iYWJpbGl0eSA9IHBvcHVwX3Njcm9sbF9wcm9iYWJpbGl0eVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdjbGljayc6XG4gICAgY2FzZSAnY2xpY2tfYSc6XG4gICAgY2FzZSAnY2xpY2tfYic6XG4gICAgY2FzZSAnY2xpY2tfYyc6XG4gICAgICBwcm9iYWJpbGl0eSA9IHBvcHVwX2NsaWNrX3Byb2JhYmlsaXR5XG4gICAgICBicmVha1xuICAgIGNhc2UgJ25hdmlnYXRpb24nOlxuICAgICAgcHJvYmFiaWxpdHkgPSBwb3B1cF9uYXZpZ2F0aW9uX3Byb2JhYmlsaXR5XG4gICAgICBicmVha1xuICAgIGNhc2UgJ3RhYkFjdGl2YXRlJzpcbiAgICAgIHByb2JhYmlsaXR5ID0gcG9wdXBfdGFiQWN0aXZhdGVfcHJvYmFiaWxpdHlcbiAgICAgIGJyZWFrXG4gIH1cbiAgaWYgKE1hdGgucmFuZG9tKCkgPCBwcm9iYWJpbGl0eSAmJiB0YWJJZCkge1xuICAgIGNvbnNvbGUubG9nKCdzZW5kIHBvcHVwJylcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVhc29uID0gYXdhaXQgY2hyb21lLnRhYnMuc2VuZE1lc3NhZ2UodGFiSWQsIHtcbiAgICAgICAgYWN0aW9uOiAnc2hvd19wb3B1cCcsXG4gICAgICAgIHF1ZXN0aW9uOiBxdWVzdGlvbixcbiAgICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyXG4gICAgICB9KVxuICAgICAgY29uc29sZS5sb2coJ3JlYXNvbicsIHJlYXNvbilcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLmlucHV0ICE9PSBudWxsICYmIHJlYXNvbi5zdWNjZXNzICE9PSBmYWxzZSkge1xuICAgICAgICBjb25zdCBuZXdpdGVtID0ge1xuICAgICAgICAgIHV1aWQ6IHV1aWQsXG4gICAgICAgICAgdGltZXN0YW1wOiB0aW1lc3RhbXAsXG4gICAgICAgICAgZXZlbnRUeXBlOiBldmVudFR5cGUsXG4gICAgICAgICAgcmVhc29uOiByZWFzb24uaW5wdXRcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBkYi5hZGQoJ3JlYXNvbnNBbm5vdGF0aW9uJywge1xuICAgICAgICAgIC4uLm5ld2l0ZW0sXG4gICAgICAgICAgdXBsb2FkZWQ6IDBcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcG9wdXA6JywgZXJyb3IpXG4gICAgfVxuICB9XG59XG5cbi8vIGxpc3RlbiB0byBzd2l0Y2hlcyBiZXR3ZWVuIGFjdGl2YXRlZCB0YWJzXG5jaHJvbWUudGFicy5vbkFjdGl2YXRlZC5hZGRMaXN0ZW5lcihhc3luYyAoYWN0aXZlSW5mbykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHRhYklkID0gYWN0aXZlSW5mby50YWJJZFxuICAgIGNvbnN0IHRhYiA9IGF3YWl0IGNocm9tZS50YWJzLmdldCh0YWJJZClcbiAgICBpZiAoIXRhYikge1xuICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGdldCB0YWIgd2l0aCBJRDogJHt0YWJJZH1gKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGBTd2l0Y2hlZCB0byB0YWIgJHt0YWJJZH0gd2l0aCBVUkw6ICR7dGFiLnVybH1gKVxuICAgIHVwZGF0ZV9pY29uKHRhYi51cmwpXG4gICAgaWYgKHRhYi51cmwgJiYgIShhd2FpdCBzaG91bGRFeGNsdWRlKHRhYi51cmwpKSkge1xuICAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICBjb25zdCB1dWlkID0gdXVpZHY0KClcbiAgICAgIGNvbnN0IGN1cnJlbnRTbmFwc2hvdElkID0gYGh0bWxfJHtoYXNoQ29kZSh0YWIudXJsKX1fJHt0aW1lc3RhbXB9XyR7dXVpZH1gXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDApKVxuICAgICAgY2hyb21lLnRhYnMuc2VuZE1lc3NhZ2UodGFiSWQsIHsgYWN0aW9uOiAnZ2V0SFRNTCcgfSwgYXN5bmMgKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGNvbnN0IGh0bWxDb250ZW50ID0gcmVzcG9uc2U/Lmh0bWxcbiAgICAgICAgY29uc3Qgc2ltcGxpZmllZEhUTUwgPSByZXNwb25zZT8uc2ltcGxpZmllZEhUTUxcbiAgICAgICAgY29uc3QgcGFnZU1ldGEgPSByZXNwb25zZT8ucGFnZU1ldGFcbiAgICAgICAgY29uc3Qgd2luZG93U2l6ZSA9IHJlc3BvbnNlPy53aW5kb3dTaXplXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICBzYXZlSFRNTChodG1sQ29udGVudCwgc2ltcGxpZmllZEhUTUwsIGN1cnJlbnRTbmFwc2hvdElkLCB0aW1lc3RhbXAsIHV1aWQpLFxuICAgICAgICAgIHNhdmVJbnRlcmFjdGlvbihcbiAgICAgICAgICAgICd0YWJBY3RpdmF0ZScsXG4gICAgICAgICAgICB0aW1lc3RhbXAsXG4gICAgICAgICAgICB0YWIudXJsLFxuICAgICAgICAgICAgY3VycmVudFNuYXBzaG90SWQsXG4gICAgICAgICAgICB1dWlkLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHBhZ2VNZXRhLFxuICAgICAgICAgICAgd2luZG93U2l6ZVxuICAgICAgICAgICksXG4gICAgICAgICAgc2F2ZVNjcmVlbnNob3QodGFiLndpbmRvd0lkLCB0aW1lc3RhbXAsIHV1aWQpXG4gICAgICAgIF0pXG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZW5kUG9wdXAodGFiSWQsIHRpbWVzdGFtcCwgJ3RhYkFjdGl2YXRlJywge30sIHV1aWQpKVxuICAgICAgfSlcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gdGFiIGFjdGl2YXRlIGhhbmRsZXI6JywgZXJyb3IpXG4gIH1cbn0pXG5cbmNocm9tZS53ZWJOYXZpZ2F0aW9uLm9uRE9NQ29udGVudExvYWRlZC5hZGRMaXN0ZW5lcihhc3luYyAoZGV0YWlscykgPT4ge1xuICBpZiAoZGV0YWlscy5mcmFtZUlkICE9PSAwKSByZXR1cm5cbiAgY29uc29sZS5sb2coJ3dlYk5hdmlnYXRpb24gb25ET01Db250ZW50TG9hZGVkIGV2ZW50IHRyaWdnZXJlZDonLCBkZXRhaWxzKVxuICB1cGRhdGVfaWNvbihkZXRhaWxzLnVybClcbiAgaWYgKCEoYXdhaXQgc2hvdWxkRXhjbHVkZShkZXRhaWxzLnVybCkpKSB7XG4gICAgY29uc3QgbmF2aWdhdGlvblR5cGUgPSBhbmFseXplTmF2aWdhdGlvbihkZXRhaWxzLnRhYklkLCBkZXRhaWxzLnVybClcbiAgICBjb25zb2xlLmxvZyhgTmF2aWdhdGlvbiB0eXBlOiAke25hdmlnYXRpb25UeXBlfSBmb3IgdGFiICR7ZGV0YWlscy50YWJJZH0gdG8gJHtkZXRhaWxzLnVybH1gKVxuICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgIGNvbnN0IHV1aWQgPSB1dWlkdjQoKVxuICAgIGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKGRldGFpbHMudGFiSWQsIHsgYWN0aW9uOiAnZ2V0SFRNTCcgfSwgYXN5bmMgKHJlc3BvbnNlKSA9PiB7XG4gICAgICBjb25zdCBodG1sQ29udGVudCA9IHJlc3BvbnNlPy5odG1sXG4gICAgICBjb25zdCBzaW1wbGlmaWVkSFRNTCA9IHJlc3BvbnNlPy5zaW1wbGlmaWVkSFRNTFxuICAgICAgY29uc3QgcGFnZU1ldGEgPSByZXNwb25zZT8ucGFnZU1ldGFcbiAgICAgIGNvbnN0IHdpbmRvd1NpemUgPSByZXNwb25zZT8ud2luZG93U2l6ZVxuICAgICAgY29uc3QgY3VycmVudFNuYXBzaG90SWQgPSBgaHRtbF8ke2hhc2hDb2RlKGRldGFpbHMudXJsKX1fJHt0aW1lc3RhbXB9XyR7dXVpZH1gXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIHNhdmVIVE1MKGh0bWxDb250ZW50LCBzaW1wbGlmaWVkSFRNTCwgY3VycmVudFNuYXBzaG90SWQsIHRpbWVzdGFtcCwgdXVpZCksXG4gICAgICAgIHNhdmVJbnRlcmFjdGlvbihcbiAgICAgICAgICAnbmF2aWdhdGlvbicsXG4gICAgICAgICAgdGltZXN0YW1wLFxuICAgICAgICAgIGRldGFpbHMudXJsLFxuICAgICAgICAgIGN1cnJlbnRTbmFwc2hvdElkLFxuICAgICAgICAgIHV1aWQsXG4gICAgICAgICAgbmF2aWdhdGlvblR5cGUsXG4gICAgICAgICAgcGFnZU1ldGEsXG4gICAgICAgICAgd2luZG93U2l6ZVxuICAgICAgICApLFxuICAgICAgICBzYXZlU2NyZWVuc2hvdCgoYXdhaXQgY2hyb21lLnRhYnMuZ2V0KGRldGFpbHMudGFiSWQpKS53aW5kb3dJZCwgdGltZXN0YW1wLCB1dWlkKVxuICAgICAgXSlcbiAgICAgIGlmIChuYXZpZ2F0aW9uVHlwZSAhPT0gJ25ldycgJiYgbmF2aWdhdGlvblR5cGUgIT09ICdyZWxvYWQnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdzZW5kIG1lc3NhZ2UgdG8gcG9wdXAgbmF2aWdhdGlvbicpXG4gICAgICAgIGF3YWl0IHNlbmRQb3B1cChcbiAgICAgICAgICBkZXRhaWxzLnRhYklkLFxuICAgICAgICAgIHRpbWVzdGFtcCxcbiAgICAgICAgICAnbmF2aWdhdGlvbicsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmF2aWdhdGlvblR5cGU6IG5hdmlnYXRpb25UeXBlXG4gICAgICAgICAgfSxcbiAgICAgICAgICB1dWlkXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9KVxuICB9XG59KVxuXG4vLyBBZGQgY2xlYW51cCB3aGVuIHRhYiBpcyBjbG9zZWRcbmNocm9tZS50YWJzLm9uUmVtb3ZlZC5hZGRMaXN0ZW5lcigodGFiSWQpID0+IHtcbiAgZGVsZXRlIHRhYk5hdmlnYXRpb25IaXN0b3J5W3RhYklkXVxufSlcblxuLy8gQWRkIHRoaXMgZnVuY3Rpb24gdG8gaGFuZGxlIGRhdGEgdXBsb2FkXG5hc3luYyBmdW5jdGlvbiBkb3dubG9hZERhdGFMb2NhbGx5KCkge1xuICB0cnkge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5yZXBsYWNlKC9bOi5dL2csICctJylcblxuICAgIC8vIEdldCB1c2VySWQgYW5kIGRhdGEgZnJvbSBzdG9yYWdlXG4gICAgY29uc3QgdXNlcklkUmVzdWx0ID0gYXdhaXQgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KHsgdXNlcklkOiAnJyB9KVxuICAgIGNvbnN0IGN1cnJlbnRVc2VySWQgPSB1c2VySWRSZXN1bHQudXNlcklkXG5cbiAgICBsZXQgdXNlcl9pZCA9IGN1cnJlbnRVc2VySWQgfHwgJ3Vua25vd24nXG5cbiAgICBjb25zdCBmb2xkZXJOYW1lID0gYCR7Zm9sZGVyX25hbWV9L1VTRVIvJHt1c2VyX2lkfS9kYXRhXyR7dGltZXN0YW1wfWBcblxuICAgIGNvbnN0IGludGVyYWN0aW9uc1RvRG93bmxvYWQgPSBhd2FpdCBkYi5nZXRBbGwoJ2ludGVyYWN0aW9ucycpXG4gICAgY29uc3QgaHRtbFNuYXBzaG90c1RvRG93bmxvYWQgPSBhd2FpdCBkYi5nZXRBbGwoJ2h0bWxTbmFwc2hvdHMnKVxuICAgIGNvbnN0IG9yZGVyRGV0YWlsc1RvRG93bmxvYWQgPSBhd2FpdCBkYi5nZXRBbGwoJ29yZGVyJylcbiAgICBjb25zdCBzY3JlZW5zaG90c1RvRG93bmxvYWQgPSBhd2FpdCBkYi5nZXRBbGwoJ3NjcmVlbnNob3RzJylcbiAgICBjb25zdCByZWFzb25zQW5ub3RhdGlvblRvRG93bmxvYWQgPSBhd2FpdCBkYi5nZXRBbGwoJ3JlYXNvbnNBbm5vdGF0aW9uJylcblxuICAgIGNvbnNvbGUubG9nKCdkb3dubG9hZGluZyB6aXAgZmlsZScpXG4gICAgY29uc3QgemlwID0gbmV3IEpTWmlwKClcbiAgICB6aXAuZmlsZShcbiAgICAgIGBvcmRlcl9pbmZvL29yZGVyX2luZm9fJHt0aW1lc3RhbXB9LnR4dGAsXG4gICAgICBgU2Vzc2lvbiBkYXRhIGZvciB0aW1lc3RhbXA6ICR7dGltZXN0YW1wfVxuICAgICAgICBcXG4gdXNlciBpZDogJHt1c2VyX2lkfVxuICAgICAgICAgICAgICBcXG4gb3JkZXIgZGV0YWlsczpcbiAgICAgICAgICAgICAgXFxuICR7SlNPTi5zdHJpbmdpZnkob3JkZXJEZXRhaWxzVG9Eb3dubG9hZCl9YFxuICAgIClcblxuICAgIGNvbnN0IGZ1bGxEYXRhID0ge1xuICAgICAgaW50ZXJhY3Rpb25zOiBpbnRlcmFjdGlvbnNUb0Rvd25sb2FkLFxuICAgICAgcmVhc29uczogcmVhc29uc0Fubm90YXRpb25Ub0Rvd25sb2FkLFxuICAgICAgb3JkZXJEZXRhaWxzOiBvcmRlckRldGFpbHNUb0Rvd25sb2FkXG4gICAgfVxuXG4gICAgY29uc3QgaW50ZXJhY3Rpb25zX2pzb24gPSBKU09OLnN0cmluZ2lmeShmdWxsRGF0YSwgbnVsbCwgMilcbiAgICB6aXAuZmlsZShgaW50ZXJhY3Rpb25zL2ludGVyYWN0aW9uc18ke3RpbWVzdGFtcH0uanNvbmAsIGludGVyYWN0aW9uc19qc29uKVxuXG4gICAgY29uc3Qgc2NyZWVuc2hvdHNGb2xkZXIgPSB6aXAuZm9sZGVyKCdzY3JlZW5zaG90cycpXG4gICAgZm9yIChjb25zdCBzY3JlZW5zaG90IG9mIHNjcmVlbnNob3RzVG9Eb3dubG9hZCkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChzY3JlZW5zaG90LmRhdGFVcmwpXG4gICAgICBjb25zdCBibG9iID0gYXdhaXQgcmVzcG9uc2UuYmxvYigpXG4gICAgICBzY3JlZW5zaG90c0ZvbGRlci5maWxlKHNjcmVlbnNob3Quc2NyZWVuc2hvdElkLnJlcGxhY2UoL1s6Ll0vZywgJy0nKSArICcuanBnJywgYmxvYilcbiAgICB9XG5cbiAgICBjb25zdCBodG1sU25hcHNob3RzRm9sZGVyID0gemlwLmZvbGRlcignaHRtbFNuYXBzaG90cycpXG4gICAgZm9yIChjb25zdCBzbmFwc2hvdCBvZiBodG1sU25hcHNob3RzVG9Eb3dubG9hZCkge1xuICAgICAgaHRtbFNuYXBzaG90c0ZvbGRlci5maWxlKHNuYXBzaG90Lmh0bWxTbmFwc2hvdElkICsgJy5odG1sJywgc25hcHNob3QuaHRtbENvbnRlbnQpXG4gICAgICBpZiAoc25hcHNob3Quc2ltcGxpZmllZEhUTUwpIHtcbiAgICAgICAgaHRtbFNuYXBzaG90c0ZvbGRlci5maWxlKFxuICAgICAgICAgICdzaW1wbGlmaWVkXycgKyBzbmFwc2hvdC5odG1sU25hcHNob3RJZCArICcuaHRtbCcsXG4gICAgICAgICAgc25hcHNob3Quc2ltcGxpZmllZEhUTUxcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHppcEJsb2IgPSBhd2FpdCB6aXAuZ2VuZXJhdGVBc3luYyh7IHR5cGU6ICdibG9iJyB9KVxuICAgIGNvbnNvbGUubG9nKCdaSVAgZmlsZSBnZW5lcmF0ZWQnKVxuXG4gICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHJlYWRlci5vbmxvYWRlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBiYXNlNjRaaXAgPSByZWFkZXIucmVzdWx0LnNwbGl0KCcsJylbMV0gLy8gR2V0IHRoZSBiYXNlNjQgcGFydFxuICAgICAgY2hyb21lLmRvd25sb2Fkcy5kb3dubG9hZCh7XG4gICAgICAgIHVybDogJ2RhdGE6YXBwbGljYXRpb24vemlwO2Jhc2U2NCwnICsgYmFzZTY0WmlwLFxuICAgICAgICBmaWxlbmFtZTogYCR7Zm9sZGVyTmFtZX0uemlwYCxcbiAgICAgICAgc2F2ZUFzOiBmYWxzZVxuICAgICAgfSlcbiAgICB9XG4gICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoemlwQmxvYilcblxuICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oXG4gICAgICBbJ2ludGVyYWN0aW9ucycsICdodG1sU25hcHNob3RzJywgJ29yZGVyJywgJ3NjcmVlbnNob3RzJywgJ3JlYXNvbnNBbm5vdGF0aW9uJ10sXG4gICAgICAncmVhZHdyaXRlJ1xuICAgIClcbiAgICBjb25zdCBkZWxldGVQcm9taXNlcyA9IFtdXG5cbiAgICBpbnRlcmFjdGlvbnNUb0Rvd25sb2FkLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGRlbGV0ZVByb21pc2VzLnB1c2godHgub2JqZWN0U3RvcmUoJ2ludGVyYWN0aW9ucycpLmRlbGV0ZShpdGVtLmlkKSlcbiAgICB9KVxuXG4gICAgaHRtbFNuYXBzaG90c1RvRG93bmxvYWQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgZGVsZXRlUHJvbWlzZXMucHVzaCh0eC5vYmplY3RTdG9yZSgnaHRtbFNuYXBzaG90cycpLmRlbGV0ZShpdGVtLmlkKSlcbiAgICB9KVxuXG4gICAgb3JkZXJEZXRhaWxzVG9Eb3dubG9hZC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBkZWxldGVQcm9taXNlcy5wdXNoKHR4Lm9iamVjdFN0b3JlKCdvcmRlcicpLmRlbGV0ZShpdGVtLmlkKSlcbiAgICB9KVxuXG4gICAgc2NyZWVuc2hvdHNUb0Rvd25sb2FkLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGRlbGV0ZVByb21pc2VzLnB1c2godHgub2JqZWN0U3RvcmUoJ3NjcmVlbnNob3RzJykuZGVsZXRlKGl0ZW0uaWQpKVxuICAgIH0pXG5cbiAgICByZWFzb25zQW5ub3RhdGlvblRvRG93bmxvYWQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgZGVsZXRlUHJvbWlzZXMucHVzaCh0eC5vYmplY3RTdG9yZSgncmVhc29uc0Fubm90YXRpb24nKS5kZWxldGUoaXRlbS5pZCkpXG4gICAgfSlcblxuICAgIGRlbGV0ZVByb21pc2VzLnB1c2godHguZG9uZSlcbiAgICBhd2FpdCBQcm9taXNlLmFsbChkZWxldGVQcm9taXNlcylcbiAgICByZXR1cm4gdHJ1ZVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRvd25sb2FkIGRhdGE6JywgZXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24gcHJlc2lnbmVkRm9ybURhdGEobmFtZSkge1xuICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpXG4gIGZvcm1EYXRhLmFwcGVuZCgna2V5JywgbmFtZSlcblxuICBPYmplY3Qua2V5cyhsYXN0R2VuZXJhdGVQcmVzaWduZWRQb3N0UmVzcG9uc2UuZmllbGRzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpZiAoa2V5ICE9ICdrZXknKSBmb3JtRGF0YS5hcHBlbmQoa2V5LCBsYXN0R2VuZXJhdGVQcmVzaWduZWRQb3N0UmVzcG9uc2UuZmllbGRzW2tleV0pXG4gIH0pXG5cbiAgcmV0dXJuIGZvcm1EYXRhXG59XG5cbmNvbnN0IHJlcXVlc3QgPSBheGlvcy5jcmVhdGUoe1xuICBiYXNlVVJMOiBiYXNlX3VybFxufSlcblxuYXN5bmMgZnVuY3Rpb24gZ3ppcEh0bWwoY29udGVudCkge1xuICAvLyBDcmVhdGUgYSBuZXcgR1pJUCBjb21wcmVzc2lvbiBzdHJlYW1cbiAgY29uc3QgY3MgPSBuZXcgQ29tcHJlc3Npb25TdHJlYW0oJ2d6aXAnKVxuXG4gIC8vIENyZWF0ZSBhIHdyaXRhYmxlIHN0cmVhbSB0byB3aGljaCB3ZSdsbCB3cml0ZSB0aGUgY29tcHJlc3NlZCBkYXRhXG4gIGNvbnN0IHdyaXRlciA9IGNzLndyaXRhYmxlLmdldFdyaXRlcigpXG5cbiAgLy8gRW5jb2RlIHRoZSBjb250ZW50IHRvIFVpbnQ4QXJyYXlcbiAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpXG4gIGNvbnN0IGVuY29kZWRDb250ZW50ID0gZW5jb2Rlci5lbmNvZGUoY29udGVudClcblxuICAvLyBXcml0ZSB0aGUgZW5jb2RlZCBjb250ZW50IGludG8gdGhlIGNvbXByZXNzaW9uIHN0cmVhbVxuICB3cml0ZXIud3JpdGUoZW5jb2RlZENvbnRlbnQpXG5cbiAgLy8gQ2xvc2UgdGhlIHdyaXRlciB0byBmaW5pc2ggY29tcHJlc3Npb25cbiAgd3JpdGVyLmNsb3NlKClcblxuICAvLyBHZXQgdGhlIGNvbXByZXNzZWQgZGF0YSBhcyBhIEJsb2JcbiAgY29uc3QgY29tcHJlc3NlZEJsb2IgPSBhd2FpdCBuZXcgUmVzcG9uc2UoY3MucmVhZGFibGUpLmJsb2IoKVxuXG4gIHJldHVybiBjb21wcmVzc2VkQmxvYlxufVxuXG4vLyBTdGFydCB0aGUgcGVyaW9kaWMgdXBsb2FkIHRpbWVyXG5mdW5jdGlvbiBzdGFydFBlcmlvZGljVXBsb2FkKCkge1xuICBpZiAoIXVwbG9hZFRpbWVyKSB7XG4gICAgY29uc29sZS5sb2coJ3N0YXJ0UGVyaW9kaWNVcGxvYWQnKVxuICAgIHVwbG9hZFRpbWVyID0gc2V0SW50ZXJ2YWwodXBsb2FkRGF0YVRvU2VydmVyX25ldywgMTAwMDApIC8vIDEwIHNlY29uZHNcbiAgfVxufVxuXG4vLyBTdG9wIHRoZSBwZXJpb2RpYyB1cGxvYWQgdGltZXJcbmZ1bmN0aW9uIHN0b3BQZXJpb2RpY1VwbG9hZCgpIHtcbiAgaWYgKHVwbG9hZFRpbWVyKSB7XG4gICAgLy8gY29uc29sZS5sb2coJ3N0b3BQZXJpb2RpY1VwbG9hZCcpXG4gICAgY2xlYXJJbnRlcnZhbCh1cGxvYWRUaW1lcilcbiAgICB1cGxvYWRUaW1lciA9IGZhbHNlXG4gIH1cbn1cbmlmICh1cGxvYWRUaW1lciA9PSBudWxsKSB7XG4gIGNvbnNvbGUubG9nKCctLWluaXRpYWxpemluZyBpbnRlcnZhbC0tJylcbiAgc3RhcnRQZXJpb2RpY1VwbG9hZCgpXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVwbG9hZERhdGFUb1NlcnZlcl9uZXcoKSB7XG4gIHN0b3BQZXJpb2RpY1VwbG9hZCgpXG4gIHRyeSB7XG4gICAgLy8gUmV0cmlldmUgdGhlIGxhc3QgdXBsb2FkIHRpbWVzdGFtcFxuICAgIGNvbnN0IGxhc3RVcGxvYWRSZXN1bHQgPSBhd2FpdCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoeyBsYXN0dXBsb2FkVGltZXN0YW1wOiBudWxsIH0pXG4gICAgbGFzdHVwbG9hZFRpbWVzdGFtcCA9IGxhc3RVcGxvYWRSZXN1bHQubGFzdHVwbG9hZFRpbWVzdGFtcCB8fCBudWxsXG4gICAgY29uc3QgY3VycmVudFRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuXG4gICAgY29uc3QgbGFzdFRpbWVzdGFtcFJlc3VsdCA9IGF3YWl0IGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldCh7XG4gICAgICB1c2VyX2ludGVyYWN0aW9uX3RyYWNrZXJfbGFzdF90aW1lc3RhbXA6IG51bGxcbiAgICB9KVxuICAgIGxhc3RUaW1lc3RhbXAgPSBsYXN0VGltZXN0YW1wUmVzdWx0LnVzZXJfaW50ZXJhY3Rpb25fdHJhY2tlcl9sYXN0X3RpbWVzdGFtcCB8fCBudWxsXG5cbiAgICBpZiAobGFzdFRpbWVzdGFtcCkgY29uc29sZS5sb2coJ2xhc3RUaW1lc3RhbXAgcmVzdG9yZWQ6ICcsIGxhc3RUaW1lc3RhbXApXG5cbiAgICBjb25zdCB0aW1lc3RhbXAgPSBsYXN0VGltZXN0YW1wIHx8IGN1cnJlbnRUaW1lc3RhbXAucmVwbGFjZSgvWzouXS9nLCAnLScpXG5cbiAgICAvLyBVcGRhdGUgdGhlIGxhc3QgaW50ZXJhY3Rpb24gdGltZXN0YW1wXG4gICAgYXdhaXQgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHtcbiAgICAgIHVzZXJfaW50ZXJhY3Rpb25fdHJhY2tlcl9sYXN0X3RpbWVzdGFtcDogdGltZXN0YW1wXG4gICAgfSlcblxuICAgIC8vIEdldCB1c2VySWQgZnJvbSBzdG9yYWdlXG4gICAgY29uc3QgdXNlcklkUmVzdWx0ID0gYXdhaXQgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KHsgdXNlcklkOiAnJyB9KVxuICAgIGNvbnN0IGN1cnJlbnRVc2VySWQgPSB1c2VySWRSZXN1bHQudXNlcklkXG4gICAgY29uc3QgdXNlcl9pZCA9IGN1cnJlbnRVc2VySWQgfHwgJ3Vua25vd24nXG5cbiAgICBjb25zdCBmb2xkZXJOYW1lID0gYCR7Zm9sZGVyX25hbWV9L1VTRVIvJHt1c2VyX2lkfWBcblxuICAgIC8vIENyZWF0ZSBhIHRyYW5zYWN0aW9uIGZvciByZWFkaW5nIGRhdGFcbiAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKFxuICAgICAgWydpbnRlcmFjdGlvbnMnLCAnaHRtbFNuYXBzaG90cycsICdvcmRlcicsICdzY3JlZW5zaG90cycsICdyZWFzb25zQW5ub3RhdGlvbiddLFxuICAgICAgJ3JlYWRvbmx5J1xuICAgIClcblxuICAgIC8vIFJldHJpZXZlIG9ubHkgaXRlbXMgd2hlcmUgdXBsb2FkZWQgPT0gZmFsc2VcbiAgICBjb25zdCBpbnRlcmFjdGlvbnNUb1VwbG9hZCA9IGF3YWl0IHR4XG4gICAgICAub2JqZWN0U3RvcmUoJ2ludGVyYWN0aW9ucycpXG4gICAgICAuaW5kZXgoJ3VwbG9hZGVkJylcbiAgICAgIC5nZXRBbGwoSURCS2V5UmFuZ2Uub25seSgwKSlcblxuICAgIGNvbnN0IGh0bWxTbmFwc2hvdHNUb1VwbG9hZCA9IGF3YWl0IHR4XG4gICAgICAub2JqZWN0U3RvcmUoJ2h0bWxTbmFwc2hvdHMnKVxuICAgICAgLmluZGV4KCd1cGxvYWRlZCcpXG4gICAgICAuZ2V0QWxsKElEQktleVJhbmdlLm9ubHkoMCkpXG5cbiAgICBjb25zdCBvcmRlckRldGFpbHNUb1VwbG9hZCA9IGF3YWl0IHR4XG4gICAgICAub2JqZWN0U3RvcmUoJ29yZGVyJylcbiAgICAgIC5pbmRleCgndXBsb2FkZWQnKVxuICAgICAgLmdldEFsbChJREJLZXlSYW5nZS5vbmx5KDApKVxuXG4gICAgY29uc3Qgc2NyZWVuc2hvdHNUb1VwbG9hZCA9IGF3YWl0IHR4XG4gICAgICAub2JqZWN0U3RvcmUoJ3NjcmVlbnNob3RzJylcbiAgICAgIC5pbmRleCgndXBsb2FkZWQnKVxuICAgICAgLmdldEFsbChJREJLZXlSYW5nZS5vbmx5KDApKVxuXG4gICAgY29uc3QgcmVhc29uc0Fubm90YXRpb25Ub1VwbG9hZCA9IGF3YWl0IHR4XG4gICAgICAub2JqZWN0U3RvcmUoJ3JlYXNvbnNBbm5vdGF0aW9uJylcbiAgICAgIC5pbmRleCgndXBsb2FkZWQnKVxuICAgICAgLmdldEFsbChJREJLZXlSYW5nZS5vbmx5KDApKVxuXG4gICAgLy8gQ2hlY2sgaWYgdGhlcmUgYXJlIGFueSBpbnRlcmFjdGlvbnMgdG8gdXBsb2FkXG4gICAgaWYgKGludGVyYWN0aW9uc1RvVXBsb2FkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc29sZS5sb2coJ05vIGludGVyYWN0aW9ucyB0byB1cGxvYWQnKVxuICAgICAgc3RhcnRQZXJpb2RpY1VwbG9hZCgpXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBjb25zdCBmdWxsRGF0YSA9IHtcbiAgICAgIGludGVyYWN0aW9uczogaW50ZXJhY3Rpb25zVG9VcGxvYWQsXG4gICAgICByZWFzb25zOiByZWFzb25zQW5ub3RhdGlvblRvVXBsb2FkLFxuICAgICAgb3JkZXJEZXRhaWxzOiBvcmRlckRldGFpbHNUb1VwbG9hZFxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcmVzaWduZWQgcG9zdCBVUkwgZ2VuZXJhdGlvblxuICAgIGlmIChcbiAgICAgICFsYXN0R2VuZXJhdGVQcmVzaWduZWRQb3N0UmVzcG9uc2UgfHxcbiAgICAgIGxhc3RHZW5lcmF0ZVByZXNpZ25lZFBvc3RSZXNwb25zZT8uZXhwaXJlX3RpbWVzdGFtcCA8IERhdGUubm93KCkgLyAxMDAwIHx8XG4gICAgICAhbGFzdEdlbmVyYXRlUHJlc2lnbmVkUG9zdFJlc3BvbnNlPy5maWVsZHM/LmtleS5pbmNsdWRlcyh1c2VyX2lkKVxuICAgICkge1xuICAgICAgY29uc29sZS5sb2coJ0dldHRpbmcgbmV3IHByZXNpZ25lZCBwb3N0IFVSTCcpXG4gICAgICBsZXQgcG9zdFVybFJlc3VsdCA9IGF3YWl0IHJlcXVlc3QuZ2V0KGAke2dlbmVyYXRlX3ByZXNpZ25lZF9wb3N0X3VybH1gLCB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIHVzZXJfaWQ6IHVzZXJfaWRcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgbGFzdEdlbmVyYXRlUHJlc2lnbmVkUG9zdFJlc3BvbnNlID0gcG9zdFVybFJlc3VsdC5kYXRhXG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgJ05ldyBwcmVzaWduZWQgcG9zdCBVUkwgcmVjZWl2ZWQnLFxuICAgICAgICBsYXN0R2VuZXJhdGVQcmVzaWduZWRQb3N0UmVzcG9uc2U/LmV4cGlyZV90aW1lc3RhbXAgLSBEYXRlLm5vdygpIC8gMTAwMFxuICAgICAgKVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBQcmVwYXJlIHNlc3Npb24gaW5mb3JtYXRpb25cbiAgICAgIGNvbnN0IHNlc3Npb25JbmZvQ29udGVudCA9IGBTZXNzaW9uIGRhdGEgZm9yIHRpbWVzdGFtcDogJHt0aW1lc3RhbXB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuIHVzZXIgaWQ6ICR7dXNlcl9pZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG4gb3JkZXIgZGV0YWlsczpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG4gJHtKU09OLnN0cmluZ2lmeShvcmRlckRldGFpbHNUb1VwbG9hZCl9YFxuICAgICAgY29uc3Qgc2Vzc2lvbkluZm8gPSBuZXcgQmxvYihbc2Vzc2lvbkluZm9Db250ZW50XSwgeyB0eXBlOiAndGV4dC9wbGFpbicgfSlcbiAgICAgIGNvbnN0IHNlc3Npb25Gb3JtRGF0YSA9IHByZXNpZ25lZEZvcm1EYXRhKFxuICAgICAgICBgJHtmb2xkZXJOYW1lfS9vcmRlcl9pbmZvL29yZGVyX2luZm9fJHt0aW1lc3RhbXB9LnR4dGBcbiAgICAgIClcbiAgICAgIHNlc3Npb25Gb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBzZXNzaW9uSW5mbylcblxuICAgICAgY29uc29sZS5sb2coJ1VwbG9hZGluZyBzZXNzaW9uIGluZm8nKVxuICAgICAgY29uc3Qgc2Vzc2lvblVwbG9hZFByb21pc2UgPSByZXF1ZXN0LnBvc3QoXG4gICAgICAgIGxhc3RHZW5lcmF0ZVByZXNpZ25lZFBvc3RSZXNwb25zZS51cmwsXG4gICAgICAgIHNlc3Npb25Gb3JtRGF0YVxuICAgICAgKVxuXG4gICAgICAvLyBVcGxvYWQgSFRNTCBzbmFwc2hvdHNcbiAgICAgIGNvbnNvbGUubG9nKCdVcGxvYWRpbmcgSFRNTCBzbmFwc2hvdHMnKVxuICAgICAgY29uc3QgaHRtbFVwbG9hZFByb21pc2VzID0gaHRtbFNuYXBzaG90c1RvVXBsb2FkLm1hcChhc3luYyAoc25hcHNob3QpID0+IHtcbiAgICAgICAgLy8gVXBsb2FkIG9yaWdpbmFsIGh0bWxDb250ZW50XG4gICAgICAgIGNvbnN0IGh0bWxCbG9iID0gYXdhaXQgZ3ppcEh0bWwoc25hcHNob3QuaHRtbENvbnRlbnQpXG4gICAgICAgIGxldCB1cGxvYWRQcm9taXNlcyA9IFtdXG5cbiAgICAgICAgbGV0IGZvcm1EYXRhID0gcHJlc2lnbmVkRm9ybURhdGEoYCR7Zm9sZGVyTmFtZX0vaHRtbC8ke3NuYXBzaG90Lmh0bWxTbmFwc2hvdElkfS5odG1sLmd6YClcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgaHRtbEJsb2IpXG4gICAgICAgIHVwbG9hZFByb21pc2VzLnB1c2gocmVxdWVzdC5wb3N0KGxhc3RHZW5lcmF0ZVByZXNpZ25lZFBvc3RSZXNwb25zZS51cmwsIGZvcm1EYXRhKSlcblxuICAgICAgICAvLyBDaGVjayBpZiBzaW1wbGlmaWVkSFRNTCBleGlzdHNcbiAgICAgICAgaWYgKHNuYXBzaG90LnNpbXBsaWZpZWRIVE1MKSB7XG4gICAgICAgICAgLy8gVXBsb2FkIHNpbXBsaWZpZWRIVE1MXG4gICAgICAgICAgY29uc3Qgc2ltcGxpZmllZEh0bWxCbG9iID0gYXdhaXQgZ3ppcEh0bWwoc25hcHNob3Quc2ltcGxpZmllZEhUTUwpXG4gICAgICAgICAgY29uc3Qgc2ltcGxpZmllZEZvcm1EYXRhID0gcHJlc2lnbmVkRm9ybURhdGEoXG4gICAgICAgICAgICBgJHtmb2xkZXJOYW1lfS9odG1sL3NpbXBsaWZpZWQke3NuYXBzaG90Lmh0bWxTbmFwc2hvdElkfS5odG1sLmd6YFxuICAgICAgICAgIClcbiAgICAgICAgICBzaW1wbGlmaWVkRm9ybURhdGEuYXBwZW5kKCdmaWxlJywgc2ltcGxpZmllZEh0bWxCbG9iKVxuICAgICAgICAgIHVwbG9hZFByb21pc2VzLnB1c2goXG4gICAgICAgICAgICByZXF1ZXN0LnBvc3QobGFzdEdlbmVyYXRlUHJlc2lnbmVkUG9zdFJlc3BvbnNlLnVybCwgc2ltcGxpZmllZEZvcm1EYXRhKVxuICAgICAgICAgIClcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbCh1cGxvYWRQcm9taXNlcylcbiAgICAgIH0pXG5cbiAgICAgIC8vIFVwbG9hZCBzY3JlZW5zaG90c1xuICAgICAgY29uc29sZS5sb2coJ1VwbG9hZGluZyBzY3JlZW5zaG90cycpXG4gICAgICBjb25zdCBzY3JlZW5zaG90VXBsb2FkUHJvbWlzZXMgPSBzY3JlZW5zaG90c1RvVXBsb2FkLm1hcChhc3luYyAoc2NyZWVuc2hvdCkgPT4ge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHNjcmVlbnNob3QuZGF0YVVybClcbiAgICAgICAgY29uc3QgYmxvYiA9IGF3YWl0IHJlc3BvbnNlLmJsb2IoKVxuICAgICAgICBjb25zdCBmb3JtRGF0YSA9IHByZXNpZ25lZEZvcm1EYXRhKFxuICAgICAgICAgIGAke2ZvbGRlck5hbWV9L3NjcmVlbnNob3RzLyR7c2NyZWVuc2hvdC5zY3JlZW5zaG90SWQucmVwbGFjZSgvWzouXS9nLCAnLScpfS5qcGdgXG4gICAgICAgIClcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgYmxvYilcblxuICAgICAgICByZXR1cm4gcmVxdWVzdC5wb3N0KGxhc3RHZW5lcmF0ZVByZXNpZ25lZFBvc3RSZXNwb25zZS51cmwsIGZvcm1EYXRhKVxuICAgICAgfSlcblxuICAgICAgLy8gVXBsb2FkIGludGVyYWN0aW9ucyBKU09OXG4gICAgICBjb25zb2xlLmxvZygnVXBsb2FkaW5nIGludGVyYWN0aW9ucycpXG4gICAgICBjb25zdCBpbnRlcmFjdGlvbnNfanNvbiA9IEpTT04uc3RyaW5naWZ5KGZ1bGxEYXRhKVxuICAgICAgY29uc3QgaW50ZXJhY3Rpb25zQmxvYiA9IG5ldyBCbG9iKFtpbnRlcmFjdGlvbnNfanNvbl0sIHtcbiAgICAgICAgdHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICB9KVxuICAgICAgY29uc3QganNvbkZvcm1EYXRhRmlsZSA9IHByZXNpZ25lZEZvcm1EYXRhKFxuICAgICAgICBgJHtmb2xkZXJOYW1lfS9pbnRlcmFjdGlvbnMvaW50ZXJhY3Rpb25zXyR7dGltZXN0YW1wfS5qc29uYFxuICAgICAgKVxuXG4gICAgICBqc29uRm9ybURhdGFGaWxlLmFwcGVuZCgnZmlsZScsIGludGVyYWN0aW9uc0Jsb2IpXG5cbiAgICAgIGNvbnN0IGpzb25VcGxvYWRQcm9taXNlID0gcmVxdWVzdC5wb3N0KFxuICAgICAgICBsYXN0R2VuZXJhdGVQcmVzaWduZWRQb3N0UmVzcG9uc2UudXJsLFxuICAgICAgICBqc29uRm9ybURhdGFGaWxlXG4gICAgICApXG5cbiAgICAgIC8vIEFsc28gdXBsb2FkIGludGVyYWN0aW9ucyBkaXJlY3RseSB0byB0aGUgQVBJXG4gICAgICBjb25zdCBqc29uMmRiVXBsb2FkUHJvbWlzZSA9IHJlcXVlc3QucG9zdChpbnRlcmFjdGlvbnNfdXJsLCBpbnRlcmFjdGlvbnNfanNvbiwge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9LFxuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICB1c2VyX2lkOiB1c2VyX2lkXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIC8vIFdhaXQgZm9yIGFsbCB1cGxvYWRzIHRvIGNvbXBsZXRlXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIHNlc3Npb25VcGxvYWRQcm9taXNlLFxuICAgICAgICAuLi5odG1sVXBsb2FkUHJvbWlzZXMsXG4gICAgICAgIC4uLnNjcmVlbnNob3RVcGxvYWRQcm9taXNlcyxcbiAgICAgICAganNvblVwbG9hZFByb21pc2UsXG4gICAgICAgIGpzb24yZGJVcGxvYWRQcm9taXNlXG4gICAgICBdKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBzdGFydFBlcmlvZGljVXBsb2FkKClcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwbG9hZGluZyBkYXRhOicsIGVycm9yKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgLy8gQWZ0ZXIgc3VjY2Vzc2Z1bCB1cGxvYWQsIGRlY2lkZSB3aGV0aGVyIHRvIGRlbGV0ZSB0aGUgdXBsb2FkZWQgZGF0YVxuICAgIGlmICghdXNlcl9pZC5pbmNsdWRlcyhkYXRhX2NvbGxlY3Rvcl9zZWNyZXRfaWQpKSB7XG4gICAgICAvLyBJZiB1c2VyX2lkIGRvZXMgTk9UIGNvbnRhaW4gdGhlIHNlY3JldCBJRCwgZGVsZXRlIHRoZSBkYXRhXG4gICAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKFxuICAgICAgICBbJ2ludGVyYWN0aW9ucycsICdodG1sU25hcHNob3RzJywgJ29yZGVyJywgJ3NjcmVlbnNob3RzJywgJ3JlYXNvbnNBbm5vdGF0aW9uJ10sXG4gICAgICAgICdyZWFkd3JpdGUnXG4gICAgICApXG5cbiAgICAgIGNvbnN0IGRlbGV0ZVByb21pc2VzID0gW11cblxuICAgICAgaW50ZXJhY3Rpb25zVG9VcGxvYWQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBkZWxldGVQcm9taXNlcy5wdXNoKHR4Lm9iamVjdFN0b3JlKCdpbnRlcmFjdGlvbnMnKS5kZWxldGUoaXRlbS5pZCkpXG4gICAgICB9KVxuXG4gICAgICBodG1sU25hcHNob3RzVG9VcGxvYWQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBkZWxldGVQcm9taXNlcy5wdXNoKHR4Lm9iamVjdFN0b3JlKCdodG1sU25hcHNob3RzJykuZGVsZXRlKGl0ZW0uaWQpKVxuICAgICAgfSlcblxuICAgICAgb3JkZXJEZXRhaWxzVG9VcGxvYWQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBkZWxldGVQcm9taXNlcy5wdXNoKHR4Lm9iamVjdFN0b3JlKCdvcmRlcicpLmRlbGV0ZShpdGVtLmlkKSlcbiAgICAgIH0pXG5cbiAgICAgIHNjcmVlbnNob3RzVG9VcGxvYWQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBkZWxldGVQcm9taXNlcy5wdXNoKHR4Lm9iamVjdFN0b3JlKCdzY3JlZW5zaG90cycpLmRlbGV0ZShpdGVtLmlkKSlcbiAgICAgIH0pXG5cbiAgICAgIHJlYXNvbnNBbm5vdGF0aW9uVG9VcGxvYWQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBkZWxldGVQcm9taXNlcy5wdXNoKHR4Lm9iamVjdFN0b3JlKCdyZWFzb25zQW5ub3RhdGlvbicpLmRlbGV0ZShpdGVtLmlkKSlcbiAgICAgIH0pXG5cbiAgICAgIGRlbGV0ZVByb21pc2VzLnB1c2godHguZG9uZSlcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKGRlbGV0ZVByb21pc2VzKVxuXG4gICAgICAvLyBVcGRhdGUgdGhlIGxhc3QgdXBsb2FkIHRpbWVzdGFtcFxuICAgICAgbGFzdFRpbWVzdGFtcCA9IG51bGxcbiAgICAgIGxhc3R1cGxvYWRUaW1lc3RhbXAgPSBjdXJyZW50VGltZXN0YW1wXG4gICAgICBhd2FpdCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyBsYXN0dXBsb2FkVGltZXN0YW1wOiBsYXN0dXBsb2FkVGltZXN0YW1wIH0pXG4gICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5yZW1vdmUoJ3VzZXJfaW50ZXJhY3Rpb25fdHJhY2tlcl9sYXN0X3RpbWVzdGFtcCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHVzZXJfaWQgY29udGFpbnMgdGhlIHNlY3JldCBJRCwgZG8gbm90IGRlbGV0ZSBkYXRhIGZyb20gSW5kZXhlZERCXG4gICAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKFxuICAgICAgICBbJ2ludGVyYWN0aW9ucycsICdodG1sU25hcHNob3RzJywgJ29yZGVyJywgJ3NjcmVlbnNob3RzJywgJ3JlYXNvbnNBbm5vdGF0aW9uJ10sXG4gICAgICAgICdyZWFkd3JpdGUnXG4gICAgICApXG5cbiAgICAgIGNvbnN0IHVwZGF0ZVByb21pc2VzID0gW11cblxuICAgICAgaW50ZXJhY3Rpb25zVG9VcGxvYWQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpdGVtLnVwbG9hZGVkID0gMVxuICAgICAgICB1cGRhdGVQcm9taXNlcy5wdXNoKHR4Lm9iamVjdFN0b3JlKCdpbnRlcmFjdGlvbnMnKS5wdXQoaXRlbSkpXG4gICAgICB9KVxuXG4gICAgICBodG1sU25hcHNob3RzVG9VcGxvYWQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpdGVtLnVwbG9hZGVkID0gMVxuICAgICAgICB1cGRhdGVQcm9taXNlcy5wdXNoKHR4Lm9iamVjdFN0b3JlKCdodG1sU25hcHNob3RzJykucHV0KGl0ZW0pKVxuICAgICAgfSlcblxuICAgICAgb3JkZXJEZXRhaWxzVG9VcGxvYWQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpdGVtLnVwbG9hZGVkID0gMVxuICAgICAgICB1cGRhdGVQcm9taXNlcy5wdXNoKHR4Lm9iamVjdFN0b3JlKCdvcmRlcicpLnB1dChpdGVtKSlcbiAgICAgIH0pXG5cbiAgICAgIHNjcmVlbnNob3RzVG9VcGxvYWQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpdGVtLnVwbG9hZGVkID0gMVxuICAgICAgICB1cGRhdGVQcm9taXNlcy5wdXNoKHR4Lm9iamVjdFN0b3JlKCdzY3JlZW5zaG90cycpLnB1dChpdGVtKSlcbiAgICAgIH0pXG5cbiAgICAgIHJlYXNvbnNBbm5vdGF0aW9uVG9VcGxvYWQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpdGVtLnVwbG9hZGVkID0gMVxuICAgICAgICB1cGRhdGVQcm9taXNlcy5wdXNoKHR4Lm9iamVjdFN0b3JlKCdyZWFzb25zQW5ub3RhdGlvbicpLnB1dChpdGVtKSlcbiAgICAgIH0pXG5cbiAgICAgIHVwZGF0ZVByb21pc2VzLnB1c2godHguZG9uZSlcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKHVwZGF0ZVByb21pc2VzKVxuICAgICAgbGFzdFRpbWVzdGFtcCA9IG51bGxcbiAgICAgIGxhc3R1cGxvYWRUaW1lc3RhbXAgPSBjdXJyZW50VGltZXN0YW1wXG4gICAgICBhd2FpdCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyBsYXN0dXBsb2FkVGltZXN0YW1wOiBsYXN0dXBsb2FkVGltZXN0YW1wIH0pXG4gICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5yZW1vdmUoJ3VzZXJfaW50ZXJhY3Rpb25fdHJhY2tlcl9sYXN0X3RpbWVzdGFtcCcpXG4gICAgfVxuXG4gICAgc3RhcnRQZXJpb2RpY1VwbG9hZCgpXG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHN0YXJ0UGVyaW9kaWNVcGxvYWQoKVxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwbG9hZGluZyBkYXRhOicsIGVycm9yKVxuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8vIGlmIHVzZXIgaWQgY2hhbmdlXG5jaHJvbWUuc3RvcmFnZS5sb2NhbC5vbkNoYW5nZWQuYWRkTGlzdGVuZXIoKGNoYW5nZXMpID0+IHtcbiAgaWYgKGNoYW5nZXMudXNlcklkKSB7XG4gICAgY2hyb21lLnRhYnMucXVlcnkoeyBhY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWUgfSwgKHRhYnMpID0+IHtcbiAgICAgIGNvbnN0IHVybCA9IHRhYnNbMF0/LnVybFxuICAgICAgdXBkYXRlX2ljb24odXJsKVxuICAgIH0pXG4gIH1cbn0pXG5cbmxldCBoYXNBbWF6b25QYWdlID0gZmFsc2VcbmNocm9tZS50YWJzLm9uVXBkYXRlZC5hZGRMaXN0ZW5lcihhc3luYyAodGFiSWQsIGNoYW5nZUluZm8sIHRhYikgPT4ge1xuICBjb25zb2xlLmxvZygnb25VcGRhdGVkJylcbiAgaWYgKGNoYW5nZUluZm8uc3RhdHVzID09PSAnY29tcGxldGUnKSB7XG4gICAgaWYgKCEoYXdhaXQgc2hvdWxkRXhjbHVkZSh0YWIudXJsKSkgJiYgIWhhc0FtYXpvblBhZ2UpIHtcbiAgICAgIGhhc0FtYXpvblBhZ2UgPSB0cnVlXG4gICAgICBjb25zb2xlLmxvZygnc2VuZCByZW1pbmRlcicpXG4gICAgICAvLyAgIGNocm9tZS5ub3RpZmljYXRpb25zLmNyZWF0ZSh7XG4gICAgICAvLyAgICAgdHlwZTogJ2Jhc2ljJyxcbiAgICAgIC8vICAgICBpY29uVXJsOiAnLi4vaWNvbi5wbmcnLCAvLyBQYXRoIHRvIHlvdXIgbm90aWZpY2F0aW9uIGljb25cbiAgICAgIC8vICAgICB0aXRsZTogJ05vdGljZScsXG4gICAgICAvLyAgICAgbWVzc2FnZTogJ1lvdSBhcmUgb24gYW4gQW1hem9uIHBhZ2UnLFxuICAgICAgLy8gICAgIHByaW9yaXR5OiAyXG4gICAgICAvLyAgIH0pXG4gICAgICAvL1xuICAgICAgY29uc3QgdXNlcklkUmVzdWx0ID0gYXdhaXQgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KHsgdXNlcklkOiAnJyB9KVxuICAgICAgY29uc3QgY3VycmVudFVzZXJJZCA9IHVzZXJJZFJlc3VsdC51c2VySWRcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7cmF0aW9uYWxlX3N0YXR1c191cmx9P3VzZXJfaWQ9JHtjdXJyZW50VXNlcklkfWAsIHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJ1xuICAgICAgfSlcbiAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGEpXG4gICAgICAgIGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKHRhYklkLCB7IGFjdGlvbjogJ3Nob3dSZW1pbmRlcicsIGRhdGE6IGRhdGEgfSlcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nKCdzZW5kIGZpbmlzaGVkJylcbiAgICB9XG4gIH1cbn0pXG4iLCJleHBvcnQgY29uc3QgcG9wdXBfcHJvYmFiaWxpdHkgPSAwLjE1XG5leHBvcnQgY29uc3QgcG9wdXBfc2Nyb2xsX3Byb2JhYmlsaXR5ID0gMC4xXG5leHBvcnQgY29uc3QgcG9wdXBfY2xpY2tfcHJvYmFiaWxpdHkgPSAwLjJcbmV4cG9ydCBjb25zdCBwb3B1cF9uYXZpZ2F0aW9uX3Byb2JhYmlsaXR5ID0gMC4xNVxuZXhwb3J0IGNvbnN0IHBvcHVwX3RhYkFjdGl2YXRlX3Byb2JhYmlsaXR5ID0gMC4xNVxuZXhwb3J0IGNvbnN0IGZvbGRlcl9uYW1lID0gYHVzZXJfaW50ZXJhY3Rpb25fZGF0YWBcbmV4cG9ydCBjb25zdCB6aXAgPSB0cnVlXG5leHBvcnQgY29uc3QgdXBsb2FkX3VybCA9ICdodHRwOi8vdXNlcmRhdGFjb2xsZWN0LmhhaWxhYi5pby91cGxvYWQnXG5leHBvcnQgY29uc3QgYmFzZV91cmwgPSAnaHR0cDovL3VzZXJkYXRhY29sbGVjdC5oYWlsYWIuaW8nXG5leHBvcnQgY29uc3QgZGF0YV9jb2xsZWN0b3Jfc2VjcmV0X2lkID0gJ2hhaWxhYidcbmV4cG9ydCBjb25zdCB1cmxfaW5jbHVkZXMgPSBbJ3d3dy5hbWF6b24uY29tJ11cbmV4cG9ydCBjb25zdCBpbnRlcmFjdGlvbl9zdGF0dXNfdXJsID0gYCR7YmFzZV91cmx9L2ludGVyYWN0aW9uc19yZWNvcmRfc3RhdHVzYFxuZXhwb3J0IGNvbnN0IHJhdGlvbmFsZV9zdGF0dXNfdXJsID0gYCR7YmFzZV91cmx9L3JhdGlvbmFsZV9zdGF0dXNgXG5leHBvcnQgY29uc3QgY2hlY2tfdXNlcl9pZF91cmwgPSBgJHtiYXNlX3VybH0vY2hlY2tfdXNlcl9pZGBcbmV4cG9ydCBjb25zdCBmaWx0ZXJfdXJsID0gW1xuICAnaHR0cHM6Ly93d3cuYW1hem9uLmNvbS9jaGVja291dC8nLFxuICAnaHR0cHM6Ly93d3cuYW1hem9uLmNvbS9ncC9idXkvJyxcbiAgJ2h0dHBzOi8vd3d3LmFtYXpvbi5jb20vYS9hZGRyZXNzZXMnLFxuICAnaHR0cHM6Ly93d3cuYW1hem9uLmNvbS9jcGUveW91cnBheW1lbnRzLycsXG4gICdodHRwczovL3d3dy5hbWF6b24uY29tL2FwL3NpZ25pbicsXG4gICdodHRwczovL3d3dy5hbWF6b24uY29tL2FwL2N2Zi8nLFxuICAnaHR0cHM6Ly93d3cuYW1hem9uLmNvbS9hcC9wcm9maWxlLycsXG4gICdodHRwczovL3d3dy5hbWF6b24uY29tL2F4L2FjY291bnQvJyxcbiAgJ2h0dHBzOi8vd3d3LmFtYXpvbi5jb20vZ3AvcHJvZHVjdC9oYW5kbGUtYnV5LWJveC8nLFxuICAnaHR0cHM6Ly93d3cuYW1hem9uLmNvbS9ncC9jaGVja291dHBvcnRhbC8nLFxuICAnaHR0cHM6Ly93d3cuYW1hem9uLmNvbS9ncC9jYXJ0L2Rlc2t0b3AvJyxcbiAgJ2h0dHBzOi8vd3d3LmFtYXpvbi5jb20vZ3AvcHJpbWVjZW50cmFsL2VkaXRQYXltZW50UHJlZmVyZW5jZSdcbl1cbmV4cG9ydCBjb25zdCBzY3JvbGxfdGhyZXNob2xkID0gMzAwXG4iLCJleHBvcnQgY29uc3QgbmF2ID0ge1xuICBzZWxlY3RvcjogJyNuYXZiYXItbWFpbicsXG4gIG5hbWU6ICduYXZfYmFyJyxcbiAgY2hpbGRyZW46IFtcbiAgICB7XG4gICAgICBzZWxlY3RvcjogJyNuYXYtc2VhcmNoLWJhci1mb3JtJyxcbiAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBzZWxlY3RvcjogJ2lucHV0I3R3b3RhYnNlYXJjaHRleHRib3gnLFxuICAgICAgICAgIG5hbWU6ICdzZWFyY2hfaW5wdXQnLFxuICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICBnZW5lcmF0ZV9tZXRhZGF0YTogKGVtKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0ZXJtID0gZW0/LnZhbHVlXG4gICAgICAgICAgICByZXR1cm4geyBuYW1lOiAnc2VhcmNoX3Rlcm0nLCBkYXRhOiB7IHRlcm0gfSB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgc2VsZWN0b3I6ICcjbmF2LXNlYXJjaC1zdWJtaXQtYnV0dG9uJyxcbiAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgbmFtZTogJ3NlYXJjaF9idXR0b24nXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIHNlbGVjdG9yOiAnI25hdi1saW5rLWFjY291bnRMaXN0JyxcbiAgICAgIHRleHRfc2VsZWN0b3I6ICcjbmF2LWxpbmstYWNjb3VudExpc3Qgc3Bhbi5uYXYtbGluZS0yJyxcbiAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgbmFtZTogJ2FjY291bnRfYW5kX2xpc3RfYnV0dG9uJ1xuICAgIH0sXG4gICAge1xuICAgICAgc2VsZWN0b3I6ICcjbmF2LW9yZGVycycsXG4gICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgIG5hbWU6ICdvcmRlcl9idXR0b24nXG4gICAgfSxcbiAgICB7XG4gICAgICBzZWxlY3RvcjogJyNuYXYtY2FydCcsXG4gICAgICB0ZXh0X3NlbGVjdG9yOiAnI25hdi1jYXJ0IC5uYXYtbGluZS0yJyxcbiAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgbmFtZTogJ2NhcnRfYnV0dG9uJ1xuICAgIH0sXG4gICAge1xuICAgICAgc2VsZWN0b3I6ICcjbmF2LWZseW91dC1zZWFyY2hBamF4JyxcbiAgICAgIG5hbWU6ICdzdWdnZXN0ZWRfdGVybXMnLFxuICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHNlbGVjdG9yOiAnZGl2LnMtc3VnZ2VzdGlvbi1lbGxpcHNpcy1kaXJlY3Rpb24nLFxuICAgICAgICAgIG5hbWU6ICdmcm9tX3RleHQnLFxuICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICBdXG59XG5cbmV4cG9ydCBjb25zdCBjYXJ0X3NpZGVfYmFyID0ge1xuICBzZWxlY3RvcjogJyNuYXYtZmx5b3V0LWV3YycsXG4gIG5hbWU6ICdjYXJ0X3NpZGVfYmFyJyxcbiAgY2hpbGRyZW46IFtcbiAgICB7XG4gICAgICBzZWxlY3RvcjogJ2Rpdi5ld2MtY2FydC1oZWFkZXInLFxuICAgICAgYWRkX3RleHQ6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIHNlbGVjdG9yOiAnZGl2LmV3Yy1jb21wYWN0LWFjdGlvbnMgYScsXG4gICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgIG5hbWU6ICdnb190b19jYXJ0J1xuICAgIH0sXG4gICAge1xuICAgICAgc2VsZWN0b3I6ICcjZXdjLWNvbXBhY3QtYm9keSB1bCcsXG4gICAgICBuYW1lOiAncHJvZHVjdF9saXN0JyxcbiAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBzZWxlY3RvcjogXCJsaSBkaXZbaWRePSdzYy1pdGVtJ11cIixcbiAgICAgICAgICBuYW1lOiAnZnJvbV90ZXh0JyxcbiAgICAgICAgICB0ZXh0X2pzOiAoZW0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRpdGxlRW0gPSBlbS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAnZGl2LmV3Yy1pdGVtLWltYWdlIGEuc2MtcHJvZHVjdC1saW5rIGltZzpub3QoLmV3Yy1zZmwtaW1hZ2Utc21hbGwpJ1xuICAgICAgICAgICAgKVxuICAgICAgICAgICAgcmV0dXJuIHRpdGxlRW0/LmFsdCB8fCAnJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc2VsZWN0b3I6ICdkaXYuZXdjLWl0ZW0taW1hZ2UgYS5zYy1wcm9kdWN0LWxpbmsgaW1nOm5vdCguZXdjLXNmbC1pbWFnZS1zbWFsbCknLFxuICAgICAgICAgICAgICBuYW1lOiAncHJvZHVjdF9pbWFnZScsXG4gICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgIHRleHRfZm9ybWF0OiAnUHJvZHVjdCBJbWFnZSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNlbGVjdG9yOiAnc3Bhbi5ld2MtdW5pdC1wcmljZScsXG4gICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzZWxlY3RvcjogJ3NlbGVjdCcsXG4gICAgICAgICAgICAgIG5hbWU6ICdkcm9wX2Rvd25fbGlzdCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNlbGVjdG9yOlxuICAgICAgICAgICAgICAgICdkaXZbZGF0YS1hY3Rpb249XCJhLWRyb3Bkb3duLWJ1dHRvblwiXSwgc3BhbltkYXRhLWFjdGlvbj1cImEtZHJvcGRvd24tYnV0dG9uXCJdJyxcbiAgICAgICAgICAgICAgbmFtZTogJ2Ryb3BfZG93bl9saXN0JyxcbiAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc2VsZWN0b3I6ICdkaXYuZXdjLWRlbGV0ZS1pY29uLWNvbnRhaW5lciBidXR0b24nLFxuICAgICAgICAgICAgICBuYW1lOiAnZGVsZXRlJyxcbiAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgIHRleHRfZm9ybWF0OiAnZGVsZXRlJyxcbiAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBnZW5lcmF0ZV9tZXRhZGF0YTogKGVtKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhc2luID0gZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWFzaW4nKVxuICAgICAgICAgICAgY29uc3QgcHJpY2VFbSA9IGVtLnF1ZXJ5U2VsZWN0b3IoJ3NwYW4uZXdjLXVuaXQtcHJpY2UnKVxuICAgICAgICAgICAgY29uc3QgcHJpY2UgPSBwcmljZUVtPy5pbm5lclRleHQ/LnJlcGxhY2UoL1tcXG5dL2csICcnKS50cmltKClcbiAgICAgICAgICAgIGNvbnN0IHRpdGxlRW0gPSBlbS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAnZGl2LmV3Yy1pdGVtLWltYWdlIGEuc2MtcHJvZHVjdC1saW5rIGltZzpub3QoLmV3Yy1zZmwtaW1hZ2Utc21hbGwpJ1xuICAgICAgICAgICAgKVxuICAgICAgICAgICAgY29uc3QgdGl0bGUgPSB0aXRsZUVtPy5hbHRcbiAgICAgICAgICAgIGNvbnN0IHVybEVtID0gdGl0bGVFbT8ucGFyZW50RWxlbWVudFxuICAgICAgICAgICAgY29uc3QgdXJsID0gdXJsRW0/LmdldEF0dHJpYnV0ZSgnaHJlZicpXG4gICAgICAgICAgICBjb25zdCBxdWFudGl0eUVtID0gZW0ucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgJ2RpdltkYXRhLWFjdGlvbj1cImEtZHJvcGRvd24tYnV0dG9uXCJdLCBzcGFuW2RhdGEtYWN0aW9uPVwiYS1kcm9wZG93bi1idXR0b25cIl0nXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBjb25zdCBxdWFudGl0eSA9IHF1YW50aXR5RW0/LmlubmVyVGV4dFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgbmFtZTogJ2NhcnRfaXRlbXMnLFxuICAgICAgICAgICAgICBkYXRhOiB7IHRpdGxlLCBhc2luLCBwcmljZSwgdXJsLCBxdWFudGl0eSB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICBdXG59XG5cbmV4cG9ydCBjb25zdCByZWZpbmVtZW50X29wdGlvbiA9IFtcbiAge1xuICAgIHNlbGVjdG9yOiAnc3Bhbi5hLXNpemUtYmFzZS5hLWNvbG9yLWJhc2UucHVpcy1ib2xkLXdlaWdodC10ZXh0JyxcbiAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICBjbGFzczogJ3JlZmluZW1lbnQtdGl0bGUnXG4gIH0sXG4gIHtcbiAgICBzZWxlY3RvcjogJ2Eucy1uYXZpZ2F0aW9uLWNsZWFyLWxpbmsnLFxuICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgIG5hbWU6ICdjbGVhcl9zZWxlY3Rpb24nLFxuICAgIGNsaWNrYWJsZTogdHJ1ZVxuICB9LFxuICB7XG4gICAgc2VsZWN0b3I6ICd1bCA+IHNwYW4uYS1kZWNsYXJhdGl2ZSA+IHNwYW4gPiBsaTpoYXMoYS5hLWxpbmstbm9ybWFsLnMtbmF2aWdhdGlvbi1pdGVtKScsXG4gICAgYWRkX3RleHQ6IHRydWUsXG4gICAgbmFtZTogJ2Zyb21fdGV4dCcsXG4gICAgY2xpY2thYmxlOiB0cnVlLFxuICAgIC8vIGNsaWNrX3NlbGVjdG9yOiBcImFcIixcbiAgICBkaXJlY3RfY2hpbGQ6IHRydWUsXG4gICAgdGV4dF9qczogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCB0ZXh0ID0gJydcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHRleHRcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhQ2hpbGQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2EuYS1saW5rLW5vcm1hbC5zLW5hdmlnYXRpb24taXRlbScpXG4gICAgICAgIGlmIChlbGVtZW50LmlubmVyVGV4dCAmJiBlbGVtZW50LmlubmVyVGV4dC50cmltKCkpIHtcbiAgICAgICAgICB0ZXh0ICs9IGVsZW1lbnQuaW5uZXJUZXh0LnRyaW0oKVxuICAgICAgICAgIGlmIChhQ2hpbGQgJiYgYUNoaWxkLmhhc0F0dHJpYnV0ZSgndGl0bGUnKSkge1xuICAgICAgICAgICAgdGV4dCArPSAnICdcbiAgICAgICAgICAgIHRleHQgKz0gYUNoaWxkLmdldEF0dHJpYnV0ZSgndGl0bGUnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBhQ2hpbGQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2EuYS1saW5rLW5vcm1hbC5zLW5hdmlnYXRpb24taXRlbScpXG4gICAgICAgICAgaWYgKGFDaGlsZCAmJiBhQ2hpbGQuaGFzQXR0cmlidXRlKCd0aXRsZScpKSB7XG4gICAgICAgICAgICB0ZXh0ICs9IGFDaGlsZC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFDaGlsZCAmJiBhQ2hpbGQuZ2V0QXR0cmlidXRlKCdhcmlhLWN1cnJlbnQnKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgLy8gdGV4dCA9ICdDbGVhciBPcHRpb24gJyArIHRleHRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGV4dFxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhlKVxuICAgICAgICByZXR1cm4gJydcbiAgICAgIH1cbiAgICB9LFxuICAgIGdlbmVyYXRlX21ldGFkYXRhOiAoZWxlbWVudCkgPT4ge1xuICAgICAgbGV0IHRleHQgPSAnJ1xuICAgICAgY29uc3QgYUNoaWxkID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdhLmEtbGluay1ub3JtYWwucy1uYXZpZ2F0aW9uLWl0ZW0nKVxuICAgICAgaWYgKGVsZW1lbnQuaW5uZXJUZXh0ICYmIGVsZW1lbnQuaW5uZXJUZXh0LnRyaW0oKSkge1xuICAgICAgICB0ZXh0ICs9IGVsZW1lbnQuaW5uZXJUZXh0LnRyaW0oKVxuICAgICAgICBpZiAoYUNoaWxkICYmIGFDaGlsZC5oYXNBdHRyaWJ1dGUoJ3RpdGxlJykpIHtcbiAgICAgICAgICB0ZXh0ICs9ICdfJ1xuICAgICAgICAgIHRleHQgKz0gYUNoaWxkLmdldEF0dHJpYnV0ZSgndGl0bGUnKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBhQ2hpbGQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2EuYS1saW5rLW5vcm1hbC5zLW5hdmlnYXRpb24taXRlbScpXG4gICAgICAgIGlmIChhQ2hpbGQgJiYgYUNoaWxkLmhhc0F0dHJpYnV0ZSgndGl0bGUnKSkge1xuICAgICAgICAgIHRleHQgKz0gYUNoaWxkLmdldEF0dHJpYnV0ZSgndGl0bGUnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBuYW1lRW0gPSBlbGVtZW50LmNsb3Nlc3QoJ3VsJyk/LnBhcmVudEVsZW1lbnQ/LmZpcnN0RWxlbWVudENoaWxkXG4gICAgICBjb25zdCBuYW1lID0gbmFtZUVtPy5pbm5lclRleHQ/LnJlcGxhY2UoL1sgXS9nLCAnXycpLnRvTG93ZXJDYXNlKCkudHJpbSgpXG5cbiAgICAgIGxldCB1cmwgPSAnJ1xuXG4gICAgICBpZiAoYUNoaWxkICYmIGFDaGlsZC5oYXNBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgICB1cmwgPSBhQ2hpbGQuZ2V0QXR0cmlidXRlKCdocmVmJylcbiAgICAgIH1cblxuICAgICAgaWYgKGFDaGlsZCAmJiBhQ2hpbGQuZ2V0QXR0cmlidXRlKCdhcmlhLWN1cnJlbnQnKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZTogJ3JlZmluZW1lbnRzLicgKyBuYW1lLFxuICAgICAgICAgIGRhdGE6IHsgdGl0bGU6IHRleHQ/LnRyaW0oKSB8fCAnJywgc2VsZWN0ZWQ6IHRydWUsIHVybCB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6ICdyZWZpbmVtZW50cy4nICsgbmFtZSxcbiAgICAgICAgZGF0YTogeyB0aXRsZTogdGV4dD8udHJpbSgpIHx8ICcnLCBzZWxlY3RlZDogZmFsc2UsIHVybCB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjaGlsZHJlbjogW1xuICAgICAge1xuICAgICAgICBzZWxlY3RvcjogXCJpbnB1dFt0eXBlPSdjaGVja2JveCddXCJcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBzZWxlY3RvcjpcbiAgICAgIFwidWwgPiBzcGFuLmEtZGVjbGFyYXRpdmUgPiBsaSA+IHNwYW4gPiBkaXZbZGF0YS1hLWV4cGFuZGVyLW5hbWU9J2ZpbHRlci1jb250ZW50LWV4cGFuZGVyJ11cIixcbiAgICBuYW1lOiAnbW9yZV9vcHRpb25zJyxcbiAgICBjaGlsZHJlbjogW1xuICAgICAge1xuICAgICAgICBzZWxlY3RvcjogXCJhW2RhdGEtY3NhLWMtZnVuYy1kZXBzPSdhdWktZGEtYS1leHBhbmRlci10b2dnbGUnXVwiLFxuICAgICAgICBuYW1lOiAndG9nZ2xlX2V4cGFuc2lvbicsXG4gICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzZWxlY3RvcjogJ2xpJyxcbiAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgIG5hbWU6ICdmcm9tX3RleHQnLFxuICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgIC8vIGNsaWNrX3NlbGVjdG9yOiBcImFcIixcbiAgICAgICAgdGV4dF9qczogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IHRleHQgPSAnJ1xuICAgICAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0ZXh0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhQ2hpbGQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2EuYS1saW5rLW5vcm1hbC5zLW5hdmlnYXRpb24taXRlbScpXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5pbm5lclRleHQgJiYgZWxlbWVudC5pbm5lclRleHQudHJpbSgpKSB7XG4gICAgICAgICAgICAgIHRleHQgKz0gZWxlbWVudC5pbm5lclRleHQudHJpbSgpXG4gICAgICAgICAgICAgIGlmIChhQ2hpbGQgJiYgYUNoaWxkLmhhc0F0dHJpYnV0ZSgndGl0bGUnKSkge1xuICAgICAgICAgICAgICAgIHRleHQgKz0gJyAnXG4gICAgICAgICAgICAgICAgdGV4dCArPSBhQ2hpbGQuZ2V0QXR0cmlidXRlKCd0aXRsZScpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnN0IGFDaGlsZCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignYS5hLWxpbmstbm9ybWFsLnMtbmF2aWdhdGlvbi1pdGVtJylcbiAgICAgICAgICAgICAgaWYgKGFDaGlsZCAmJiBhQ2hpbGQuaGFzQXR0cmlidXRlKCd0aXRsZScpKSB7XG4gICAgICAgICAgICAgICAgdGV4dCArPSBhQ2hpbGQuZ2V0QXR0cmlidXRlKCd0aXRsZScpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhQ2hpbGQgJiYgYUNoaWxkLmdldEF0dHJpYnV0ZSgnYXJpYS1jdXJyZW50JykgPT09ICd0cnVlJykge1xuICAgICAgICAgICAgICAvLyB0ZXh0ID0gJ0NsZWFyIE9wdGlvbiAnICsgdGV4dFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRleHRcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKVxuICAgICAgICAgICAgcmV0dXJuICcnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBnZW5lcmF0ZV9tZXRhZGF0YTogKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICBsZXQgdGV4dCA9ICcnXG4gICAgICAgICAgY29uc3QgYUNoaWxkID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdhLmEtbGluay1ub3JtYWwucy1uYXZpZ2F0aW9uLWl0ZW0nKVxuICAgICAgICAgIGlmIChlbGVtZW50LmlubmVyVGV4dCAmJiBlbGVtZW50LmlubmVyVGV4dC50cmltKCkpIHtcbiAgICAgICAgICAgIHRleHQgKz0gZWxlbWVudC5pbm5lclRleHQudHJpbSgpXG4gICAgICAgICAgICBpZiAoYUNoaWxkICYmIGFDaGlsZC5oYXNBdHRyaWJ1dGUoJ3RpdGxlJykpIHtcbiAgICAgICAgICAgICAgdGV4dCArPSAnXydcbiAgICAgICAgICAgICAgdGV4dCArPSBhQ2hpbGQuZ2V0QXR0cmlidXRlKCd0aXRsZScpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGFDaGlsZCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignYS5hLWxpbmstbm9ybWFsLnMtbmF2aWdhdGlvbi1pdGVtJylcbiAgICAgICAgICAgIGlmIChhQ2hpbGQgJiYgYUNoaWxkLmhhc0F0dHJpYnV0ZSgndGl0bGUnKSkge1xuICAgICAgICAgICAgICB0ZXh0ICs9IGFDaGlsZC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgbmFtZUVtID0gZWxlbWVudC5jbG9zZXN0KCd1bCcpPy5wYXJlbnRFbGVtZW50Py5jbG9zZXN0KCd1bCcpXG4gICAgICAgICAgICA/LnBhcmVudEVsZW1lbnQ/LmZpcnN0RWxlbWVudENoaWxkXG4gICAgICAgICAgY29uc3QgbmFtZSA9IG5hbWVFbT8uaW5uZXJUZXh0Py5yZXBsYWNlKC9bIF0vZywgJ18nKS50b0xvd2VyQ2FzZSgpLnRyaW0oKVxuXG4gICAgICAgICAgbGV0IHVybCA9ICcnXG5cbiAgICAgICAgICBpZiAoYUNoaWxkICYmIGFDaGlsZC5oYXNBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgICAgICAgdXJsID0gYUNoaWxkLmdldEF0dHJpYnV0ZSgnaHJlZicpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGFDaGlsZCAmJiBhQ2hpbGQuZ2V0QXR0cmlidXRlKCdhcmlhLWN1cnJlbnQnKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBuYW1lOiAncmVmaW5lbWVudHMuJyArIG5hbWUsXG4gICAgICAgICAgICAgIGRhdGE6IHsgdGl0bGU6IHRleHQ/LnRyaW0oKSB8fCAnJywgc2VsZWN0ZWQ6IHRydWUsIHVybCB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiAncmVmaW5lbWVudHMuJyArIG5hbWUsXG4gICAgICAgICAgICBkYXRhOiB7IHRpdGxlOiB0ZXh0Py50cmltKCkgfHwgJycsIHNlbGVjdGVkOiBmYWxzZSwgdXJsIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6IFwiaW5wdXRbdHlwZT0nY2hlY2tib3gnXVwiXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgXVxuICB9XG5dXG5cbmV4cG9ydCBjb25zdCBwcm9kdWN0X2ZhY3RzID0ge1xuICBzZWxlY3RvcjogJyNwcm9kdWN0RmFjdHNEZXNrdG9wRXhwYW5kZXInLFxuICBhZGRfdGV4dDogdHJ1ZSxcbiAgY2xhc3M6ICdwcm9kdWN0LWZhY3RzJ1xufVxuXG5leHBvcnQgY29uc3QgcHJvZHVjdF9kZWxpdmVyeSA9IHtcbiAgc2VsZWN0b3I6ICdkaXYubWlyLWxheW91dC1ERUxJVkVSWV9CTE9DSy1zbG90LVBSSU1BUllfREVMSVZFUllfTUVTU0FHRV9MQVJHRScsXG4gIGFkZF90ZXh0OiB0cnVlLFxuICBjbGFzczogJ3Byb2R1Y3QtZGVsaXZlcnknXG59XG5cbmV4cG9ydCBjb25zdCBxdWFudGl0eV9zZWxlY3RvciA9IHtcbiAgc2VsZWN0b3I6ICcjc2VsZWN0UXVhbnRpdHksIGRpdltpZF49XCJxcy13aWRnZXQtYnV0dG9uLWNvbnRhaW5lci1hdGZjXCJdJyxcbiAgbmFtZTogJ3F1YW50aXR5X3NlbGVjdG9yJyxcbiAgY2hpbGRyZW46IFtcbiAgICB7XG4gICAgICBzZWxlY3RvcjogJ2xhYmVsJyxcbiAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBzZWxlY3RvcjogJ3NwYW4uYS1kcm9wZG93bi1wcm9tcHQnLFxuICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICBnZW5lcmF0ZV9tZXRhZGF0YTogKGVtKSA9PiB7XG4gICAgICAgIHJldHVybiB7IG5hbWU6ICdwcm9kdWN0X3F1YW50aXR5JywgZGF0YTogeyBxdWFudGl0eTogZW0uaW5uZXJUZXh0IH0gfVxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgc2VsZWN0b3I6ICdzZWxlY3QnLFxuICAgICAgLy8gY2xpY2thYmxlOiB0cnVlLFxuICAgICAgbmFtZTogJ2Ryb3BfZG93bl9saXN0J1xuICAgIH0sXG4gICAge1xuICAgICAgc2VsZWN0b3I6ICdidXR0b24nLFxuICAgICAgbmFtZTogJ2Ryb3BfZG93bl9saXN0JyxcbiAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBzZWxlY3RvcjogJ2Rpdi5xcy13aWRnZXQtZHJvcGRvd24td3JhcHBlciBzcGFuW2RhdGEtYWN0aW9uPVwicXMtd2lkZ2V0LWRyb3Bkb3duLWRlY2xcIl0nLFxuICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICB1c2Vfcm9vdDogdHJ1ZSxcbiAgICAgIG5hbWU6ICdmcm9tX3RleHQnLFxuICAgICAgdGV4dF9mb3JtYXQ6ICdEcm9wIERvd24gT3B0aW9uIHt9J1xuICAgIH1cbiAgXVxufVxuXG5leHBvcnQgY29uc3QgZGVsaXZlcnlfZnJlcXVlbmN5X3NlbGVjdG9yID0ge1xuICBzZWxlY3RvcjogJyNyZXBsZW5pc2htZW50RnJlcXVlbmN5X2ZlYXR1cmVfZGl2JyxcbiAgbmFtZTogJ2RlbGl2ZXJ5X2ZyZXF1ZW5jeV9zZWxlY3RvcicsXG4gIHRleHRfc2VsZWN0b3I6ICdkaXYuYS1zZWN0aW9uLmEtc3BhY2luZy1taWNybyA+IHNwYW4nLFxuICBhZGRfdGV4dDogdHJ1ZSxcbiAgY2hpbGRyZW46IFtcbiAgICB7XG4gICAgICBzZWxlY3RvcjogJyNyY3hPcmRGcmVxT25tbFdyYXBwZXIgc3Bhbi5hLWRyb3Bkb3duLXByb21wdCcsXG4gICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgc2VsZWN0b3I6ICcjcmN4T3JkRnJlcU9ubWxXcmFwcGVyIHNlbGVjdCcsXG4gICAgICAvLyBjbGlja2FibGU6IHRydWUsXG4gICAgICBuYW1lOiAnZHJvcF9kb3duX2xpc3QnXG4gICAgfVxuICBdXG59XG5cbmV4cG9ydCBjb25zdCBzZXRfdXBfbm93X2J1dHRvbiA9IHtcbiAgc2VsZWN0b3I6ICcjcmN4LXN1YnNjcmliZS1zdWJtaXQtYnV0dG9uLWFubm91bmNlJyxcbiAgYWRkX3RleHQ6IHRydWUsXG4gIGNsaWNrYWJsZTogdHJ1ZSxcbiAgbmFtZTogJ3NldF91cF9ub3cnLFxuICBjbGFzczogJ3Byb2R1Y3Qtc2V0LXVwLW5vdydcbn1cblxuZXhwb3J0IGNvbnN0IGFkZF90b19jYXJ0X2J1dHRvbiA9IHtcbiAgc2VsZWN0b3I6XG4gICAgXCJpbnB1dFtuYW1lPSdzdWJtaXQuYWRkLXRvLWNhcnQnXSwgaW5wdXRbbmFtZT0nc3VibWl0LmFkZC10by1jYXJ0LXViYiddLCAjZnJlc2hBZGRUb0NhcnRCdXR0b24gaW5wdXRcIixcbiAgYWRkX3RleHQ6IHRydWUsXG4gIGNsaWNrYWJsZTogdHJ1ZSxcbiAgbmFtZTogJ2FkZF90b19jYXJ0JyxcbiAgY2xhc3M6ICdwcm9kdWN0LWFkZC10by1jYXJ0J1xufVxuXG5leHBvcnQgY29uc3QgYnV5X25vd19idXR0b24gPSB7XG4gIHNlbGVjdG9yOiBcImlucHV0W25hbWU9J3N1Ym1pdC5idXktbm93J11cIixcbiAgYWRkX3RleHQ6IHRydWUsXG4gIGNsaWNrYWJsZTogdHJ1ZSxcbiAgbmFtZTogJ2J1eV9ub3cnLFxuICBjbGFzczogJ3Byb2R1Y3QtYnV5LW5vdydcbn1cblxuZXhwb3J0IGNvbnN0IGJ1eV9ib3hfd2l0aF9hY2NvcmRpb24gPSB7XG4gIHNlbGVjdG9yOiAnI2J1eUJveEFjY29yZGlvbiA+IGRpdi5hLWJveC5jZWx3aWRnZXQnLFxuICBuYW1lOiAnZnJvbV90ZXh0JyxcbiAgdGV4dF9zZWxlY3RvcjogJ2Rpdi5hY2NvcmRpb24tY2FwdGlvbiA+IHNwYW4nLFxuICBjaGlsZHJlbjogW1xuICAgIHtcbiAgICAgIHNlbGVjdG9yOlxuICAgICAgICBcImRpdltkYXRhLWNzYS1jLWNvbnRlbnQtaWQ9J29mZmVyX2Rpc3BsYXlfZGVza3RvcF9hY2NvcmRpb25faGVhZGVyJ10sIGRpdltkYXRhLWNzYS1jLWNvbnRlbnQtaWQ9J29mZmVyX2Rpc3BsYXlfbW9iaWxlX2FjY29yZGlvbl9oZWFkZXInXVwiLFxuICAgICAgbmFtZTogJ2FjY29yZGlvbl9zZWxlY3RvcicsXG4gICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgIHRleHRfc2VsZWN0b3I6ICdoNSBzcGFuLmEtdGV4dC1ib2xkJ1xuICAgIH0sXG4gICAge1xuICAgICAgc2VsZWN0b3I6ICdkaXYuYS1hY2NvcmRpb24taW5uZXIuYWNjb3JkaW9uLXJvdy1jb250ZW50JyxcbiAgICAgIG5hbWU6ICdwdXJjaGFzZV9mb3JtJyxcbiAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgIHByb2R1Y3RfZmFjdHMsXG4gICAgICAgIHByb2R1Y3RfZGVsaXZlcnksXG4gICAgICAgIHF1YW50aXR5X3NlbGVjdG9yLFxuICAgICAgICBkZWxpdmVyeV9mcmVxdWVuY3lfc2VsZWN0b3IsXG4gICAgICAgIHNldF91cF9ub3dfYnV0dG9uLFxuICAgICAgICBhZGRfdG9fY2FydF9idXR0b24sXG4gICAgICAgIGJ1eV9ub3dfYnV0dG9uXG4gICAgICBdXG4gICAgfVxuICBdXG59XG5cbmV4cG9ydCBjb25zdCBidXlfYm94X3dpdGhvdXRfYWNjb3JkaW9uX2RlbGl2ZXJ5ID0ge1xuICBzZWxlY3RvcjogJyNnc29kX3NpbmdsZU9mZmVyRGlzcGxheV9EZXNrdG9wJyxcbiAgY2hpbGRyZW46IFtcbiAgICB7XG4gICAgICBzZWxlY3RvcjogJyNhZGRUb0NhcnQnLFxuICAgICAgbmFtZTogJ3B1cmNoYXNlX2Zvcm0nLFxuICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgcHJvZHVjdF9mYWN0cyxcbiAgICAgICAgcHJvZHVjdF9kZWxpdmVyeSxcbiAgICAgICAgcXVhbnRpdHlfc2VsZWN0b3IsXG4gICAgICAgIGFkZF90b19jYXJ0X2J1dHRvbixcbiAgICAgICAgYnV5X25vd19idXR0b25cbiAgICAgIF1cbiAgICB9XG4gIF1cbn1cblxuZXhwb3J0IGNvbnN0IGJ1eV9ib3hfd2l0aG91dF9hY2NvcmRpb25fcGlja191cCA9IHtcbiAgc2VsZWN0b3I6ICcjZ3NvZF9zaW5nbGVPZmZlckRpc3BsYXlfZ3JvdXBfMl9EZXNrdG9wJyxcbiAgY2hpbGRyZW46IFtcbiAgICB7XG4gICAgICBzZWxlY3RvcjogJyNwaWNrVXBPZmZlckRpc3BsYXknLFxuICAgICAgbmFtZTogJ3B1cmNoYXNlX2Zvcm0nLFxuICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgcHJvZHVjdF9mYWN0cyxcbiAgICAgICAgcHJvZHVjdF9kZWxpdmVyeSxcbiAgICAgICAgcXVhbnRpdHlfc2VsZWN0b3IsXG4gICAgICAgIGFkZF90b19jYXJ0X2J1dHRvbixcbiAgICAgICAgYnV5X25vd19idXR0b25cbiAgICAgIF1cbiAgICB9XG4gIF1cbn1cblxuZXhwb3J0IGNvbnN0IGNhcnQgPSBbXG4gIG5hdixcbiAge1xuICAgIHNlbGVjdG9yOiAnI3NjLWNvbGxhcHNlZC1jYXJ0cy1jb250YWluZXInLFxuICAgIG5hbWU6ICdjYXJ0JyxcbiAgICBjaGlsZHJlbjogW1xuICAgICAge1xuICAgICAgICBzZWxlY3RvcjogJ2Rpdi5zYy1sb2NhbG1hcmtldC10ZXh0LWxvZ28nLFxuICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc2VsZWN0b3I6ICdkaXZbZGF0YS1uYW1lPVwiY29sbGFwc2VkX2l0ZW1fbGlzdFwiXScsXG4gICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgbmFtZTogJ2l0ZW1fbGlzdCdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHNlbGVjdG9yOiAnZGl2LnNjLWJ1eS1ib3gtaW5uZXItYm94IGlucHV0W25hbWVePVwicHJvY2VlZFRvQUxNQ2hlY2tvdXRcIl0nLFxuICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgIG5hbWU6ICdjaGVja19vdXQnLFxuICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc2VsZWN0b3I6ICdkaXYuc2MtYnV5LWJveC1pbm5lci1ib3ggYScsXG4gICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgbmFtZTogJ2Zyb21fdGV4dCcsXG4gICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgc2VsZWN0b3I6IFwiZGl2W2RhdGEtbmFtZT0nQWN0aXZlIEl0ZW1zJ11cIixcbiAgICBuYW1lOiAnYWN0aXZlX2l0ZW1fbGlzdCcsXG4gICAgY2hpbGRyZW46IFtcbiAgICAgIHtcbiAgICAgICAgc2VsZWN0b3I6ICdkaXYuc2MtbGlzdC1pdGVtLWNvbnRlbnQnLFxuICAgICAgICB0ZXh0X3NlbGVjdG9yOlxuICAgICAgICAgICdkaXYuc2MtaXRlbS1jb250ZW50LWdyb3VwIHVsID4gbGkgPiBzcGFuLmEtbGlzdC1pdGVtID4gYS5zYy1wcm9kdWN0LXRpdGxlIHNwYW4uYS10cnVuY2F0ZS1mdWxsJyxcbiAgICAgICAgbmFtZTogJ2Zyb21fdGV4dCcsXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6ICdkaXYuc2MtaXRlbS1jaGVjay1jaGVja2JveC1zZWxlY3RvciBsYWJlbCcsXG4gICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICBuYW1lOiAnY2hlY2tib3gnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5zYy1pbWFnZS13cmFwcGVyIGEnLFxuICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgbmFtZTogJ3Byb2R1Y3RfaW1hZ2UnLFxuICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICB0ZXh0X2Zvcm1hdDogJ1Byb2R1Y3QgSW1hZ2UnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5zYy1pdGVtLWNvbnRlbnQtZ3JvdXAgdWwgPiBsaSA+IHNwYW4uYS1saXN0LWl0ZW0gPiBhLnNjLXByb2R1Y3QtdGl0bGUnLFxuICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgdGV4dF9zZWxlY3RvcjogJ3NwYW4uYS10cnVuY2F0ZS1mdWxsJyxcbiAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgbmFtZTogJ3Byb2R1Y3RfZGV0YWlsJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6ICdsaS5zYy1kZWxpdmVyeS1tZXNzYWdpbmcnLFxuICAgICAgICAgICAgYWRkX3RleHQ6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnZGl2LnNjLWJhZGdlLXByaWNlLXRvLXBheSBzcGFuLnNjLXByb2R1Y3QtcHJpY2Ugc3Bhbjpub3QoLmEtb2Zmc2NyZWVuKScsXG4gICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6ICdsaS5zYy1wcm9kdWN0LXZhcmlhdGlvbicsXG4gICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6ICdkaXYuc2MtaXRlbS1jb250ZW50LWdyb3VwIHNwYW4uc2MtcXVhbnRpdHktc3RlcHBlcicsXG4gICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6IFwiYnV0dG9uW2FyaWEtbGFiZWw9J0RlY3JlYXNlIHF1YW50aXR5IGJ5IG9uZSddXCIsXG4gICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgdGV4dF9qczogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdkZWNyZWFzZV9xdWFudGl0eV9ieV9vbmUnXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogXCJkaXZbcm9sZT0nc3BpbmJ1dHRvbiddXCIsXG4gICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgdGV4dF9mb3JtYXQ6ICdDdXJyZW50IFF1YW50aXR5OiB7fSdcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBcImJ1dHRvblthcmlhLWxhYmVsPSdJbmNyZWFzZSBxdWFudGl0eSBieSBvbmUnXVwiLFxuICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHRleHRfanM6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuICcnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2luY3JlYXNlX3F1YW50aXR5X2J5X29uZSdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6IFwiZGl2LnNjLWl0ZW0tY29udGVudC1ncm91cCBpbnB1dFtkYXRhLWFjdGlvbj0nZGVsZXRlJ11cIixcbiAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgbmFtZTogJ2RlbGV0ZSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiBcImRpdi5zYy1pdGVtLWNvbnRlbnQtZ3JvdXAgaW5wdXRbZGF0YS1hY3Rpb249J3NhdmUtZm9yLWxhdGVyJ11cIixcbiAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgbmFtZTogJ3NhdmVfZm9yX2xhdGVyJ1xuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgZ2VuZXJhdGVfbWV0YWRhdGE6IChlbSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGFzaW4gPSBlbS5wYXJlbnRFbGVtZW50Py5nZXRBdHRyaWJ1dGUoJ2RhdGEtYXNpbicpXG4gICAgICAgICAgY29uc3QgcHJpY2VFbSA9IGVtLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAnZGl2LnNjLWJhZGdlLXByaWNlLXRvLXBheSBzcGFuLnNjLXByb2R1Y3QtcHJpY2Ugc3Bhbjpub3QoLmEtb2Zmc2NyZWVuKSdcbiAgICAgICAgICApXG4gICAgICAgICAgY29uc3QgcHJpY2UgPSBwcmljZUVtPy5pbm5lclRleHQ/LnJlcGxhY2UoL1tcXG5dL2csICcnKVxuICAgICAgICAgIGNvbnN0IHRpdGxlRW0gPSBlbS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgJ2Rpdi5zYy1pdGVtLWNvbnRlbnQtZ3JvdXAgdWwgPiBsaSA+IHNwYW4uYS1saXN0LWl0ZW0gPiBhLnNjLXByb2R1Y3QtdGl0bGUgc3Bhbi5hLXRydW5jYXRlLWZ1bGwnXG4gICAgICAgICAgKVxuICAgICAgICAgIGNvbnN0IHRpdGxlID0gdGl0bGVFbT8uaW5uZXJUZXh0XG4gICAgICAgICAgY29uc3QgdXJsRW0gPSBlbS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgJ2Rpdi5zYy1pdGVtLWNvbnRlbnQtZ3JvdXAgdWwgPiBsaSA+IHNwYW4uYS1saXN0LWl0ZW0gPiBhLnNjLXByb2R1Y3QtdGl0bGUnXG4gICAgICAgICAgKVxuICAgICAgICAgIGNvbnN0IHVybCA9IHVybEVtPy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKVxuICAgICAgICAgIGNvbnN0IGRlbGl2ZXJ5RW0gPSBlbS5xdWVyeVNlbGVjdG9yKCdsaS5zYy1kZWxpdmVyeS1tZXNzYWdpbmcnKVxuICAgICAgICAgIGNvbnN0IGRlbGl2ZXJ5ID0gZGVsaXZlcnlFbT8uaW5uZXJUZXh0LnJlcGxhY2UoL1tcXG5dL2csICcgJylcbiAgICAgICAgICBjb25zdCBxdWFudGl0eUVtID0gZW0ucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgIFwiZGl2LnNjLWl0ZW0tY29udGVudC1ncm91cCBzcGFuLnNjLXF1YW50aXR5LXN0ZXBwZXIgZGl2W3JvbGU9J3NwaW5idXR0b24nXVwiXG4gICAgICAgICAgKVxuICAgICAgICAgIGNvbnN0IHF1YW50aXR5ID0gcXVhbnRpdHlFbT8uaW5uZXJUZXh0XG4gICAgICAgICAgY29uc3Qgc2VsZWN0ZWRFbSA9IGVtLnF1ZXJ5U2VsZWN0b3IoJ2Rpdi5zYy1pdGVtLWNoZWNrLWNoZWNrYm94LXNlbGVjdG9yIGlucHV0JylcbiAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHNlbGVjdGVkRW0/LmdldEF0dHJpYnV0ZSgnY2hlY2tlZCcpICE9PSBudWxsXG4gICAgICAgICAgY29uc3Qgb3B0aW9uc0VtID0gZW0ucXVlcnlTZWxlY3RvckFsbCgnbGkuc2MtcHJvZHVjdC12YXJpYXRpb24gPiBzcGFuJylcbiAgICAgICAgICBjb25zdCBvcHRpb25zID0gW11cbiAgICAgICAgICBmb3IgKGNvbnN0IG9wdGlvbkVtIG9mIG9wdGlvbnNFbSkge1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9uS2V5RW0gPSBvcHRpb25FbT8ucXVlcnlTZWxlY3Rvcignc3Bhbi5hLXRleHQtYm9sZCcpXG4gICAgICAgICAgICBjb25zdCBvcHRpb25WYWx1ZUVtID0gb3B0aW9uRW0/LnF1ZXJ5U2VsZWN0b3IoJ3NwYW46bm90KC5hLXRleHQtYm9sZCknKVxuICAgICAgICAgICAgY29uc3Qgb3B0aW9uS2V5ID0gb3B0aW9uS2V5RW0/LmlubmVyVGV4dC5yZXBsYWNlKC9bOlxcbl0vZywgJycpLnRyaW0oKVxuICAgICAgICAgICAgY29uc3Qgb3B0aW9uVmFsdWUgPSBvcHRpb25WYWx1ZUVtPy5pbm5lclRleHQucmVwbGFjZSgvWzpcXG5dL2csICcnKS50cmltKClcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IHsgW29wdGlvbktleV06IG9wdGlvblZhbHVlIH1cbiAgICAgICAgICAgIG9wdGlvbnMucHVzaChvcHRpb24pXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6ICdhY3RpdmVfaXRlbXMnLFxuICAgICAgICAgICAgZGF0YTogeyB0aXRsZSwgYXNpbiwgcHJpY2UsIHVybCwgZGVsaXZlcnksIHF1YW50aXR5LCBzZWxlY3RlZCwgb3B0aW9ucyB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgc2VsZWN0b3I6ICcjc2MtYnV5LWJveC1wdGMtYnV0dG9uIGlucHV0JyxcbiAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICBjbGlja2FibGU6IHRydWUsXG4gICAgbmFtZTogJ2NoZWNrX291dCdcbiAgfVxuXVxuXG5leHBvcnQgY29uc3QgZnJlc2hfY2Fyb3VzZWxfY2FyZCA9IHtcbiAgc2VsZWN0b3I6ICdsaS5hLWNhcm91c2VsLWNhcmQsIGRpdltpZF49XCJncmlkRWxlbWVudFwiXScsXG4gIG5hbWU6ICdmcm9tX3RleHQnLFxuICB0ZXh0X3NlbGVjdG9yOiAnc3Bhbi5hLXRydW5jYXRlLWZ1bGwnLFxuICBjaGlsZHJlbjogW1xuICAgIHtcbiAgICAgIHNlbGVjdG9yOiAnYTpoYXMoZGl2LmEtaW1hZ2UtY29udGFpbmVyKScsXG4gICAgICBuYW1lOiAncHJvZHVjdF9pbWFnZScsXG4gICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgIHRleHRfZm9ybWF0OiAnUHJvZHVjdCBJbWFnZScsXG4gICAgICBjbGlja2FibGU6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIHNlbGVjdG9yOiBcInNwYW5baWRePSdxcy13aWRnZXQtYXRjLWJ1dHRvbiddXCIsXG4gICAgICBuYW1lOiAnYWRkX3RvX2NhcnQnLFxuICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICB0ZXh0X2Zvcm1hdDogJ0FkZCBUbyBDYXJ0JyxcbiAgICAgIGNsaWNrYWJsZTogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgc2VsZWN0b3I6ICdkaXZbaWRePVwicXMtd2lkZ2V0LWJ1dHRvbi1jb250YWluZXItYXRmY1wiXScsXG4gICAgICBuYW1lOiAncXVhbnRpdHlfc2VsZWN0b3InLFxuICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHNlbGVjdG9yOiBcImlucHV0W2FyaWEtbGFiZWxePSdSZW1vdmUnXVwiLFxuICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgIHRleHRfZm9ybWF0OiAnRGVjcmVhc2UgcXVhbnRpdHkgYnkgMScsXG4gICAgICAgICAgbmFtZTogJ2Zyb21fdGV4dCcsXG4gICAgICAgICAgY2xpY2thYmxlOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBzZWxlY3RvcjogXCJidXR0b25baWRePSdxcy13aWRnZXQtYnV0dG9uLWF0ZmMnXVwiLFxuICAgICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBzZWxlY3RvcjogXCJpbnB1dFthcmlhLWxhYmVsXj0nQWRkJ11cIixcbiAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICB0ZXh0X2Zvcm1hdDogJ0luY3JlYXNlIHF1YW50aXR5IGJ5IDEnLFxuICAgICAgICAgIG5hbWU6ICdmcm9tX3RleHQnLFxuICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBzZWxlY3RvcjogJ2EgPiBzcGFuID4gc3BhbiA+IHNwYW4uYS10cnVuY2F0ZS1mdWxsJyxcbiAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgbmFtZTogJ3Byb2R1Y3RfZGV0YWlsJyxcbiAgICAgIGNsaWNrYWJsZTogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgc2VsZWN0b3I6ICdkaXYgPiBzcGFuID4gc3BhbiA+IHNwYW4uYS10cnVuY2F0ZS1mdWxsJyxcbiAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBzZWxlY3RvcjogJ2RpdltjbGFzcyo9XCJwcmljZVRvUGF5XCJdIHNwYW4uYS1vZmZzY3JlZW4nLFxuICAgICAgYWRkX3RleHQ6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIHNlbGVjdG9yOiAnbGkuYS1jYXJvdXNlbC1jYXJkIGEuYS1zaXplLW1pbmknLFxuICAgICAgbmFtZTogJ2Zyb21fdGV4dCcsXG4gICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgIH1cbiAgXSxcbiAgZ2VuZXJhdGVfbWV0YWRhdGE6IChlbSkgPT4ge1xuICAgIGNvbnN0IGFzaW5FbSA9IGVtLnF1ZXJ5U2VsZWN0b3IoJ2RpdltkYXRhLWNzYS1jLWl0ZW0taWRePVwiYW16bjEuYXNpblwiXScpXG4gICAgY29uc3QgYXNpbiA9IGFzaW5FbT8uZ2V0QXR0cmlidXRlKCdkYXRhLWNzYS1jLWl0ZW0taWQnKT8uc3BsaXQoJzonKVswXS5zcGxpdCgnLicpLnBvcCgpXG4gICAgY29uc3QgcHJpY2VFbSA9IGVtLnF1ZXJ5U2VsZWN0b3IoJ2RpdltjbGFzcyo9XCJwcmljZVRvUGF5XCJdIHNwYW4uYS1vZmZzY3JlZW4nKVxuICAgIGNvbnN0IHByaWNlID0gcHJpY2VFbT8uaW5uZXJUZXh0Py5yZXBsYWNlKC9bXFxuXS9nLCAnJylcbiAgICBjb25zdCB0aXRsZUVtID0gZW0ucXVlcnlTZWxlY3Rvcignc3Bhbi5hLXRydW5jYXRlLWZ1bGwnKVxuICAgIGNvbnN0IHRpdGxlID0gdGl0bGVFbT8uaW5uZXJUZXh0XG4gICAgY29uc3QgdXJsRW0gPSBlbS5xdWVyeVNlbGVjdG9yKCdhOmhhcyhzcGFuLmEtdHJ1bmNhdGUtZnVsbCknKVxuICAgIGNvbnN0IHVybCA9IHVybEVtPy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKVxuICAgIGNvbnN0IHF1YW50aXR5RW0gPSBlbS5xdWVyeVNlbGVjdG9yKFxuICAgICAgJ2RpdltpZF49XCJxcy13aWRnZXQtYnV0dG9uLWNvbnRhaW5lci1hdGZjXCJdIGJ1dHRvbltpZF49XCJxcy13aWRnZXQtYnV0dG9uLWF0ZmNcIl0nXG4gICAgKVxuICAgIGNvbnN0IHF1YW50aXR5ID0gcXVhbnRpdHlFbT8uaW5uZXJUZXh0XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6ICdwcm9tb3Rpb25faXRlbXMnLFxuICAgICAgZGF0YTogeyB0aXRsZSwgYXNpbiwgcHJpY2UsIHVybCwgcXVhbnRpdHkgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZnJlc2hfc3Vic3RpdHV0aW9uX2NhcmQgPSB7XG4gIHNlbGVjdG9yOiAnZGl2LnN1YnMtY2FydC1pdGVtJyxcbiAgbmFtZTogJ2Zyb21fdGV4dCcsXG4gIHRleHRfc2VsZWN0b3I6ICdkaXYuYS1zcGFjaW5nLXRvcC1iYXNlIHNwYW4uYS1zaXplLWJhc2UnLFxuICBjaGlsZHJlbjogW1xuICAgIHtcbiAgICAgIHNlbGVjdG9yOiAnZGl2LmEtc3BhY2luZy10b3AtYmFzZSBzcGFuLmEtc2l6ZS1iYXNlJyxcbiAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBzZWxlY3RvcjogJ2Rpdi5hLXNwYWNpbmctdG9wLW1pbmkgc3Bhbi5hLWNvbG9yLXByaWNlJyxcbiAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgfVxuICBdLFxuICBnZW5lcmF0ZV9tZXRhZGF0YTogKGVtKSA9PiB7XG4gICAgY29uc3QgYXNpbkVtID0gZW0ucXVlcnlTZWxlY3RvcignZGl2W2RhdGEtY2FydC1pdGVtLWFzaW5dJylcbiAgICBjb25zdCBhc2luID0gYXNpbkVtPy5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2FydC1pdGVtLWFzaW4nKVxuICAgIGNvbnN0IHRpdGxlRW0gPSBlbS5xdWVyeVNlbGVjdG9yKCdkaXYuYS1zcGFjaW5nLXRvcC1iYXNlIHNwYW4uYS1zaXplLWJhc2UnKVxuICAgIGNvbnN0IHRpdGxlID0gdGl0bGVFbT8uaW5uZXJUZXh0XG4gICAgY29uc3QgcHJpY2VFbSA9IGVtLnF1ZXJ5U2VsZWN0b3IoJ2Rpdi5hLXNwYWNpbmctdG9wLW1pbmkgc3Bhbi5hLWNvbG9yLXByaWNlJylcbiAgICBjb25zdCBwcmljZSA9IHByaWNlRW0/LmlubmVyVGV4dFxuICAgIHJldHVybiB7IG5hbWU6ICdhY3RpdmVfaXRlbXMnLCBkYXRhOiB7IGFzaW4sIHRpdGxlLCBwcmljZSB9IH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZnJlc2hfY2FydCA9IFtcbiAgbmF2LFxuICB7XG4gICAgc2VsZWN0b3I6IFwiZGl2W2RhdGEtbmFtZT0nQWN0aXZlIEl0ZW1zJ11cIixcbiAgICBuYW1lOiAnYWN0aXZlX2l0ZW1fbGlzdCcsXG4gICAgY2hpbGRyZW46IFtcbiAgICAgIHtcbiAgICAgICAgc2VsZWN0b3I6ICdkaXYuc2MtbGlzdC1pdGVtLWNvbnRlbnQnLFxuICAgICAgICB0ZXh0X3NlbGVjdG9yOiAndWwgPiBsaSA+IHNwYW4uYS1saXN0LWl0ZW0gPiBhLnNjLXByb2R1Y3QtdGl0bGUgc3Bhbi5hLXRydW5jYXRlLWZ1bGwnLFxuICAgICAgICBuYW1lOiAnZnJvbV90ZXh0JyxcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5zYy1wcm9kdWN0LWltYWdlLWRlc2t0b3AgYSBpbWcnLFxuICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgbmFtZTogJ3Byb2R1Y3RfaW1hZ2UnLFxuICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICB0ZXh0X2Zvcm1hdDogJ1Byb2R1Y3QgSW1hZ2UnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjogJ3VsID4gbGkgPiBzcGFuLmEtbGlzdC1pdGVtID4gYS5zYy1wcm9kdWN0LXRpdGxlJyxcbiAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHRleHRfc2VsZWN0b3I6ICdzcGFuLmEtdHJ1bmNhdGUtZnVsbCcsXG4gICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgIG5hbWU6ICdwcm9kdWN0X2RldGFpbCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnZGl2LnNjLWJhZGdlLXByaWNlLXRvLXBheSBzcGFuLnNjLXByaWNlJyxcbiAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5zYy1hY3Rpb24tbGlua3MnLFxuICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnZGl2LnFzLXdpZGdldC1jb250YWluZXInLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBcImlucHV0W2FyaWEtbGFiZWw9J1JlbW92ZSddXCIsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0X2pzOiBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdkZWNyZWFzZV9xdWFudGl0eV9ieV9vbmUnXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5xcy13aWRnZXQtZHJvcGRvd24tZmxleC13cmFwcGVyIGJ1dHRvbicsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdxdWFudGl0eV9kcm9wX2Rvd25fbGlzdCcsXG4gICAgICAgICAgICAgICAgICAgIHRleHRfZm9ybWF0OiAnQ3VycmVudCBRdWFudGl0eToge30nXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjpcbiAgICAgICAgICAgICAgICAgICAgICAnZGl2LnFzLXdpZGdldC1kcm9wZG93bi13cmFwcGVyIHNwYW5bZGF0YS1hY3Rpb249XCJxcy13aWRnZXQtZHJvcGRvd24tZGVjbFwiXScsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHVzZV9yb290OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZnJvbV90ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dF9mb3JtYXQ6ICdEcm9wIERvd24gT3B0aW9uIHt9J1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6XG4gICAgICAgICAgICAgICAgICAgICAgJ2RpdltpZF49XCJxcy13aWRnZXQtcXVhbnRpdHktY29udGFpbmVyLWF0ZmNcIl0gc3BhbltkYXRhLWFjdGlvbj1cInFzLXdpZGdldC1xdWFudGl0eS1jaGFuZ2VsaW5rLWRlY2xcIl0nLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB1c2Vfcm9vdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2Zyb21fdGV4dCdcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOlxuICAgICAgICAgICAgICAgICAgICAgICdkaXZbaWRePVwicXMtd2lkZ2V0LXN1bW1hcnktY29udGFpbmVyLWF0ZmNcIl0gc3BhbltpZF49XCJxcy13aWRnZXQtc3VtbWFyeS1hdGMtYXRmY1wiXScsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHVzZV9yb290OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZnJvbV90ZXh0J1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6IFwiaW5wdXRbYXJpYS1sYWJlbD0nQWRkJ11cIixcbiAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHRleHRfanM6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCdhcmlhLWxhYmVsJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdpbmNyZWFzZV9xdWFudGl0eV9ieV9vbmUnXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjogXCJpbnB1dFtkYXRhLWFjdGlvbj0nZGVsZXRlJ11cIixcbiAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgbmFtZTogJ2RlbGV0ZSdcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGdlbmVyYXRlX21ldGFkYXRhOiAoZW0pID0+IHtcbiAgICAgICAgICBjb25zdCBhc2luID0gZW0ucGFyZW50RWxlbWVudD8uZ2V0QXR0cmlidXRlKCdkYXRhLWFzaW4nKVxuICAgICAgICAgIGNvbnN0IHByaWNlRW0gPSBlbS5xdWVyeVNlbGVjdG9yKCdkaXYuc2MtYmFkZ2UtcHJpY2UtdG8tcGF5IHNwYW4uc2MtcHJpY2UnKVxuICAgICAgICAgIGNvbnN0IHByaWNlID0gcHJpY2VFbT8uaW5uZXJUZXh0Py5yZXBsYWNlKC9bXFxuXS9nLCAnJylcbiAgICAgICAgICBjb25zdCB0aXRsZUVtID0gZW0ucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICd1bCA+IGxpID4gc3Bhbi5hLWxpc3QtaXRlbSA+IGEuc2MtcHJvZHVjdC10aXRsZSBzcGFuLmEtdHJ1bmNhdGUtZnVsbCdcbiAgICAgICAgICApXG4gICAgICAgICAgY29uc3QgdGl0bGUgPSB0aXRsZUVtPy5pbm5lclRleHRcbiAgICAgICAgICBjb25zdCB1cmxFbSA9IGVtLnF1ZXJ5U2VsZWN0b3IoJ3VsID4gbGkgPiBzcGFuLmEtbGlzdC1pdGVtID4gYS5zYy1wcm9kdWN0LXRpdGxlJylcbiAgICAgICAgICBjb25zdCB1cmwgPSB1cmxFbT8uZ2V0QXR0cmlidXRlKCdocmVmJylcbiAgICAgICAgICBjb25zdCBxdWFudGl0eUVtID0gZW0ucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICdkaXYuc2MtYWN0aW9uLWxpbmtzIGRpdi5xcy13aWRnZXQtZHJvcGRvd24tZmxleC13cmFwcGVyIGJ1dHRvbidcbiAgICAgICAgICApXG4gICAgICAgICAgY29uc3QgcXVhbnRpdHkgPSBxdWFudGl0eUVtPy5pbm5lclRleHRcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogJ2FjdGl2ZV9pdGVtcycsXG4gICAgICAgICAgICBkYXRhOiB7IHRpdGxlLCBhc2luLCBwcmljZSwgdXJsLCBxdWFudGl0eSB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9LFxuICBmcmVzaF9jYXJvdXNlbF9jYXJkLFxuICB7XG4gICAgc2VsZWN0b3I6ICdkaXYuc2MtYnV5LWJveC1pbm5lci1ib3ggaW5wdXRbbmFtZV49XCJwcm9jZWVkVG9BTE1DaGVja291dFwiXScsXG4gICAgY2xpY2thYmxlOiB0cnVlLFxuICAgIG5hbWU6ICdjaGVja19vdXQnLFxuICAgIGFkZF90ZXh0OiB0cnVlXG4gIH0sXG4gIHtcbiAgICBzZWxlY3RvcjogJ2Rpdi5zYy1idXktYm94LWlubmVyLWJveCBhJyxcbiAgICBjbGlja2FibGU6IHRydWUsXG4gICAgbmFtZTogJ2Zyb21fdGV4dCcsXG4gICAgYWRkX3RleHQ6IHRydWVcbiAgfSxcbiAge1xuICAgIHNlbGVjdG9yOiAnI3NjLWNhcnQtYWJvdmUtYWN0aW9ucyBidXR0b24sICNzYy1jYXJ0LWFib3ZlLWFjdGlvbnMgYScsXG4gICAgY2xpY2thYmxlOiB0cnVlLFxuICAgIG5hbWU6ICdmcm9tX3RleHQnLFxuICAgIGFkZF90ZXh0OiB0cnVlXG4gIH1cbl1cblxuZXhwb3J0IGNvbnN0IGJ1eV9hZ2FpbiA9IFtcbiAgbmF2LFxuICBjYXJ0X3NpZGVfYmFyLFxuICB7XG4gICAgc2VsZWN0b3I6ICdkaXYuYS1zZWN0aW9uOmhhcyhkaXYuZmlsdGVyLWNvbnRhaW5lciknLFxuICAgIG5hbWU6ICdmaWx0ZXJzJyxcbiAgICBjaGlsZHJlbjogW1xuICAgICAge1xuICAgICAgICBzZWxlY3RvcjogJ2Rpdi5maWx0ZXItY29udGFpbmVyJyxcbiAgICAgICAgdGV4dF9zZWxlY3RvcjogJ3NwYW4jZmlsdGVyLWNvbnRhaW5lci1oZWFkZXInLFxuICAgICAgICBuYW1lOiAnZnJvbV90ZXh0JyxcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjogJ3NwYW4jZmlsdGVyLWNvbnRhaW5lci1oZWFkZXInLFxuICAgICAgICAgICAgYWRkX3RleHQ6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnbGFiZWwnLFxuICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICBuYW1lOiAnZnJvbV90ZXh0JyxcbiAgICAgICAgICAgIGdlbmVyYXRlX21ldGFkYXRhOiAoZW0pID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBlbS5pbm5lclRleHRcbiAgICAgICAgICAgICAgY29uc3QgbmFtZUVtID0gZW1cbiAgICAgICAgICAgICAgICAuY2xvc2VzdCgnZGl2LmZpbHRlci1jb250YWluZXInKVxuICAgICAgICAgICAgICAgID8ucXVlcnlTZWxlY3RvcignI2ZpbHRlci1jb250YWluZXItaGVhZGVyJylcbiAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IG5hbWVFbT8uaW5uZXJUZXh0Py5yZXBsYWNlKC9bIF0vZywgJ18nKS50b0xvd2VyQ2FzZSgpLnRyaW0oKVxuICAgICAgICAgICAgICBjb25zdCBpbnB1dCA9IGVtLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JylcbiAgICAgICAgICAgICAgaWYgKGlucHV0ICYmIGlucHV0LmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgbmFtZTogJ2ZpbHRlcnMuJyArIG5hbWUsXG4gICAgICAgICAgICAgICAgICBkYXRhOiB7IHRpdGxlOiB0aXRsZT8udHJpbSgpIHx8ICcnLCBzZWxlY3RlZDogdHJ1ZSB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2ZpbHRlcnMuJyArIG5hbWUsXG4gICAgICAgICAgICAgICAgZGF0YTogeyB0aXRsZTogdGl0bGU/LnRyaW0oKSB8fCAnJywgc2VsZWN0ZWQ6IGZhbHNlIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIHNlbGVjdG9yOiAnZGl2LmFsbS1ncmlkLWRlc2t0b3AtZ3JpZC1jb250YWluZXInLFxuICAgIG5hbWU6ICdwcm9kdWN0X2xpc3QnLFxuICAgIGNoaWxkcmVuOiBbXG4gICAgICB7XG4gICAgICAgIHNlbGVjdG9yOiAnZGl2W2lkXj1cImdyaWRDZWxsXCJdJyxcbiAgICAgICAgbmFtZTogJ2Zyb21fdGV4dCcsXG4gICAgICAgIHRleHRfc2VsZWN0b3I6IFwiZGl2W2lkXj0nY2xvc2VkQ2FyZCddIGFbaWRePSd0aXRsZSddIHNwYW4uYS10cnVuY2F0ZS1mdWxsXCIsXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6IFwiZGl2W2lkXj0nZ3JpZEVsZW1lbnQnXVwiLFxuICAgICAgICAgICAgbmFtZTogJ3Byb2R1Y3RfY2FyZCcsXG4gICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6IFwiZGl2W2lkXj0nY2xvc2VkQ2FyZCddXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2Nsb3NlZF9wcm9kdWN0X2NhcmQnLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBcImRpdltpZF49J2luZm8nXVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnb3Blbl9wcm9kdWN0X2NhcmQnLFxuICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHRleHRfZm9ybWF0OiAnT3BlbiBQcm9kdWN0IENhcmQnXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Zvcm0gc3Bhbi5hLWJ1dHRvbi1pbm5lcicsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdhZGRfdG9fY2FydCcsXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWVcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnZGl2W2lkXj1cInNlZUJ1eWluZ09wdGlvbnNXcmFwcGVyXCJdIGEnLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnc2VlX2J1eWluZ19vcHRpb25zJyxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnZGl2W25hbWU9XCJheC1xc1wiXScsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6IFwiYnV0dG9uW2FyaWEtbGFiZWw9J0RlY3JlYXNlIHF1YW50aXR5IGJ5IG9uZSddXCIsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0X2pzOiBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdkZWNyZWFzZV9xdWFudGl0eV9ieV9vbmUnXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogXCJkaXZbcm9sZT0nc3BpbmJ1dHRvbiddXCIsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0X2Zvcm1hdDogJ0N1cnJlbnQgUXVhbnRpdHk6IHt9J1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6IFwiYnV0dG9uW2FyaWEtbGFiZWw9J0luY3JlYXNlIHF1YW50aXR5IGJ5IG9uZSddXCIsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0X2pzOiBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnaW5jcmVhc2VfcXVhbnRpdHlfYnlfb25lJ1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBcImRpdltpZF49J2V4cGFuZGVkSW1hZ2UnXVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdjbG9zZV9wcm9kdWN0X2NhcmQnLFxuICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0X2Zvcm1hdDogJ0Nsb3NlIFByb2R1Y3QgQ2FyZCdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgZ2VuZXJhdGVfbWV0YWRhdGE6IChlbSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGFzaW5FbSA9IGVtLnF1ZXJ5U2VsZWN0b3IoXCJkaXZbaWRePSdjbG9zZWRDYXJkJ10gZGl2W2lkXj0naW5mbyddXCIpXG4gICAgICAgICAgY29uc3QgYXNpbiA9IGFzaW5FbT8uZ2V0QXR0cmlidXRlKCdkYXRhLWFzaW4nKVxuICAgICAgICAgIGNvbnN0IHByaWNlRW0gPSBlbS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgJ2RpdltpZF49XCJjbG9zZWRDYXJkXCJdIGRpdltpZF49XCJpbmZvXCJdIHNwYW5bY2xhc3MqPVwicHJpY2VCbG9ja1dpdGhNYXJnaW5SaWdodFwiXSBzcGFuLmEtcHJpY2UgPiBzcGFuOm5vdCguYS1vZmZzY3JlZW4pJ1xuICAgICAgICAgIClcbiAgICAgICAgICBjb25zdCBwcmljZSA9IHByaWNlRW0/LmlubmVyVGV4dD8ucmVwbGFjZSgvW1xcbl0vZywgJycpXG4gICAgICAgICAgY29uc3QgdGl0bGVFbSA9IGVtLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICBcImRpdltpZF49J2Nsb3NlZENhcmQnXSBhW2lkXj0ndGl0bGUnXSBzcGFuLmEtdHJ1bmNhdGUtZnVsbFwiXG4gICAgICAgICAgKVxuICAgICAgICAgIGNvbnN0IHRpdGxlID0gdGl0bGVFbT8uaW5uZXJUZXh0XG4gICAgICAgICAgY29uc3QgZGVsaXZlcnlFbSA9IGVtLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAnZGl2W2lkXj1cImNsb3NlZENhcmRcIl0gZGl2W2lkXj1cImluZm9cIl0gI3VkbURlbGl2ZXJ5TWVzc2FnZUNvbXBvbmVudCdcbiAgICAgICAgICApXG4gICAgICAgICAgY29uc3QgZGVsaXZlcnkgPSBkZWxpdmVyeUVtPy5pbm5lclRleHQucmVwbGFjZSgvW1xcbl0vZywgJyAnKVxuICAgICAgICAgIHJldHVybiB7IG5hbWU6ICdhY3RpdmVfaXRlbXNfY2xvc2VkJywgZGF0YTogeyB0aXRsZSwgYXNpbiwgcHJpY2UsIGRlbGl2ZXJ5IH0gfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzZWxlY3RvcjogJ2RpdltpZF49XCJmZWF0dXJlZFwiXScsXG4gICAgICAgIG5hbWU6ICdmcm9tX3RleHQnLFxuICAgICAgICB0ZXh0X3NlbGVjdG9yOiBcImFbaWRePSd0aXRsZSddIHNwYW4uYS10cnVuY2F0ZS1mdWxsXCIsXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6ICdkaXZbaWRePVwiZGV0YWlsQ29udGVudFdyYXBwZXJcIl0gZGl2W2lkXj1cImRldGFpbENvbnRlbnRcIl0nLFxuICAgICAgICAgICAgbmFtZTogJ2RldGFpbGVkX2NvbnRlbnQnLFxuICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnZGl2Omhhcyg+IGltZyknLFxuICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBuYW1lOiAncHJvZHVjdF9pbWFnZScsXG4gICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgdGV4dF9mb3JtYXQ6ICdQcm9kdWN0IEltYWdlJ1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6IFwiYVtpZF49J3RpdGxlJ11cIixcbiAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3Byb2R1Y3RfdGl0bGUnLFxuICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHRleHRfc2VsZWN0b3I6ICdzcGFuLmEtdHJ1bmNhdGUtZnVsbCdcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBcImRpdltjbGFzcyo9J211bHRpT2ZmZXJQaWxsQ29udGFpbmVyJ10gYVwiLFxuICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnZnJvbV90ZXh0JyxcbiAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6XG4gICAgICAgICAgICAgICAgICBcImRpdltkYXRhLWJ1eWluZ29wdGlvbnR5cGU9J05FVyddLCBkaXZbY2xhc3MqPSdhc2luRGV0YWlsSW5mb0NvbHVtbnMnXTpoYXMoaW5wdXRbbmFtZT0nc3VibWl0LmFkZFRvQ2FydCddXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogJ29uZV90aW1lX3B1cmNoYXNlJyxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjpcbiAgICAgICAgICAgICAgICAgICAgICAnc3BhbltjbGFzcyo9XCJwcmljZUJsb2NrV2l0aE1hcmdpblJpZ2h0XCJdIHNwYW4uYS1wcmljZSA+IHNwYW46bm90KC5hLW9mZnNjcmVlbiknLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3ByaWNlJ1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICcjdWRtRGVsaXZlcnlNZXNzYWdlQ29tcG9uZW50JyxcbiAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdkZWxpdmVyeSdcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnZGl2W2NsYXNzKj1cImFjdGlvbkJ1dHRvbnNSb3dcIl0sIGRpdltjbGFzcyo9XCJhc2luRGV0YWlsQWN0aW9uc1Jvd1wiXScsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdidXR0b25zJyxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2lucHV0W25hbWU9XCJzdWJtaXQuYWRkVG9DYXJ0XCJdJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2FkZF90b19jYXJ0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdpbnB1dFtpZF49XCJidXktbm93XCJdJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2J1eV9ub3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2RpdltpZF49XCJmZWVkYmFja0J1dHRvblNlY3Rpb25cIl0gaW5wdXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAncmVtb3ZlX2l0ZW0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2RpdltuYW1lPVwiYXgtcXNcIl0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBcImJ1dHRvblthcmlhLWxhYmVsPSdEZWNyZWFzZSBxdWFudGl0eSBieSBvbmUnXVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfanM6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZGVjcmVhc2VfcXVhbnRpdHlfYnlfb25lJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6IFwiZGl2W3JvbGU9J3NwaW5idXR0b24nXVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfZm9ybWF0OiAnQ3VycmVudCBRdWFudGl0eToge30nXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogXCJidXR0b25bYXJpYS1sYWJlbD0nSW5jcmVhc2UgcXVhbnRpdHkgYnkgb25lJ11cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0X2pzOiBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCdhcmlhLWxhYmVsJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdpbmNyZWFzZV9xdWFudGl0eV9ieV9vbmUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGdlbmVyYXRlX21ldGFkYXRhOiAoZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGFzaW5FbSA9IGVtLmNsb3Nlc3QoJ2RpdltkYXRhLWFzaW5dJylcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGFzaW4gPSBhc2luRW0/LmdldEF0dHJpYnV0ZSgnZGF0YS1hc2luJylcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlRW0gPSBlbS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgICAgICAnc3BhbltjbGFzcyo9XCJwcmljZUJsb2NrV2l0aE1hcmdpblJpZ2h0XCJdIHNwYW4uYS1wcmljZSA+IHNwYW46bm90KC5hLW9mZnNjcmVlbiknXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBjb25zdCBwcmljZSA9IHByaWNlRW0/LmlubmVyVGV4dD8ucmVwbGFjZSgvW1xcbl0vZywgJycpXG4gICAgICAgICAgICAgICAgICBjb25zdCB0aXRsZUVtID0gZW0ucGFyZW50RWxlbWVudD8ucGFyZW50RWxlbWVudD8ucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICAgICAgXCJhW2lkXj0ndGl0bGUnXSBzcGFuLmEtdHJ1bmNhdGUtZnVsbFwiXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBjb25zdCB0aXRsZSA9IHRpdGxlRW0/LmlubmVyVGV4dFxuICAgICAgICAgICAgICAgICAgY29uc3QgdXJsRW0gPSBlbS5wYXJlbnRFbGVtZW50Py5wYXJlbnRFbGVtZW50Py5xdWVyeVNlbGVjdG9yKFwiYVtpZF49J3RpdGxlJ11cIilcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IHVybEVtPy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKVxuICAgICAgICAgICAgICAgICAgY29uc3QgZGVsaXZlcnlFbSA9IGVtLnF1ZXJ5U2VsZWN0b3IoJyN1ZG1EZWxpdmVyeU1lc3NhZ2VDb21wb25lbnQnKVxuICAgICAgICAgICAgICAgICAgY29uc3QgZGVsaXZlcnkgPSBkZWxpdmVyeUVtPy5pbm5lclRleHQucmVwbGFjZSgvW1xcbl0vZywgJyAnKVxuICAgICAgICAgICAgICAgICAgY29uc3QgcXVhbnRpdHlFbSA9IGVtLnF1ZXJ5U2VsZWN0b3IoJ2RpdltuYW1lPVwiYXgtcXNcIl0gZGl2W3JvbGU9XCJzcGluYnV0dG9uXCJdJylcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHF1YW50aXR5ID0gcXVhbnRpdHlFbT8uaW5uZXJUZXh0IHx8ICcxJ1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2FjdGl2ZV9pdGVtc19vcGVuZWRfcHVyY2hhc2UnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IHRpdGxlLCBhc2luLCBwcmljZSwgdXJsLCBkZWxpdmVyeSwgcXVhbnRpdHkgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBcImRpdltkYXRhLWJ1eWluZ29wdGlvbnR5cGU9J1NOUyddLCBkaXZbY2xhc3MqPSdzbnNVcHNlbGxCbG9ja0NvbnRhaW5lciddXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3N1YnNjcmliZV9hbmRfc2F2ZScsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6XG4gICAgICAgICAgICAgICAgICAgICAgJ3NwYW5bY2xhc3MqPVwicHJpY2VCbG9ja1dpdGhNYXJnaW5SaWdodFwiXSBzcGFuLmEtcHJpY2UgPiBzcGFuOm5vdCguYS1vZmZzY3JlZW4pJyxcbiAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdwcmljZSdcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnI3VkbURlbGl2ZXJ5TWVzc2FnZUNvbXBvbmVudCcsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZGVsaXZlcnknXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2RpdltjbGFzcyo9XCJhY3Rpb25CdXR0b25zUm93XCJdJyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2J1dHRvbnMnLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnaW5wdXRbbmFtZT1cInN1Ym1pdC5hZGRUb0NhcnRcIl0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnYWRkX3RvX2NhcnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ3NwYW5bY2xhc3MqPVwic25zQnV0dG9uXCJdIGlucHV0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3N1YnNjcmliZV9hbmRfc2F2ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnZGl2W2lkXj1cImZlZWRiYWNrQnV0dG9uU2VjdGlvblwiXSBpbnB1dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdyZW1vdmVfaXRlbScsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnc3BhbltjbGFzcyo9XCJzdWJzY3JpcHRpb25CdXR0b25cIl0gaW5wdXQnLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3NldF91cF9zdWJzY3JpcHRpb24nLFxuICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGdlbmVyYXRlX21ldGFkYXRhOiAoZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGFzaW5FbSA9IGVtLmNsb3Nlc3QoJ2RpdltkYXRhLWFzaW5dJylcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGFzaW4gPSBhc2luRW0/LmdldEF0dHJpYnV0ZSgnZGF0YS1hc2luJylcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlRW0gPSBlbS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgICAgICAnc3BhbltjbGFzcyo9XCJwcmljZUJsb2NrV2l0aE1hcmdpblJpZ2h0XCJdIHNwYW4uYS1wcmljZSA+IHNwYW46bm90KC5hLW9mZnNjcmVlbiknXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBjb25zdCBwcmljZSA9IHByaWNlRW0/LmlubmVyVGV4dD8ucmVwbGFjZSgvW1xcbl0vZywgJycpXG4gICAgICAgICAgICAgICAgICBjb25zdCB0aXRsZUVtID0gZW0ucGFyZW50RWxlbWVudD8ucGFyZW50RWxlbWVudD8ucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICAgICAgXCJhW2lkXj0ndGl0bGUnXSBzcGFuLmEtdHJ1bmNhdGUtZnVsbFwiXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBjb25zdCB0aXRsZSA9IHRpdGxlRW0/LmlubmVyVGV4dFxuICAgICAgICAgICAgICAgICAgY29uc3QgdXJsRW0gPSBlbS5wYXJlbnRFbGVtZW50Py5wYXJlbnRFbGVtZW50Py5xdWVyeVNlbGVjdG9yKFwiYVtpZF49J3RpdGxlJ11cIilcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IHVybEVtPy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKVxuICAgICAgICAgICAgICAgICAgY29uc3QgZGVsaXZlcnlFbSA9IGVtLnF1ZXJ5U2VsZWN0b3IoJyN1ZG1EZWxpdmVyeU1lc3NhZ2VDb21wb25lbnQnKVxuICAgICAgICAgICAgICAgICAgY29uc3QgZGVsaXZlcnkgPSBkZWxpdmVyeUVtPy5pbm5lclRleHQucmVwbGFjZSgvW1xcbl0vZywgJyAnKVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2FjdGl2ZV9pdGVtc19vcGVuZWRfc25zJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogeyB0aXRsZSwgYXNpbiwgcHJpY2UsIHVybCwgZGVsaXZlcnkgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6IFwiZGl2W2lkXj0nZGV0YWlsLXZpZXctc2ltaWxhci1pdGVtcyddXCIsXG4gICAgICAgICAgICBuYW1lOiAnc2ltaWxhcl9pdGVtcycsXG4gICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdsaS5hLWNhcm91c2VsLWNhcmQnLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdmcm9tX3RleHQnLFxuICAgICAgICAgICAgICAgIHRleHRfc2VsZWN0b3I6IFwiYVtpZF49J3RpdGxlJ10gc3Bhbi5hLXRydW5jYXRlLWZ1bGxcIixcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5hLWltYWdlLWNvbnRhaW5lcjpoYXMoPiBpbWcpJyxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAncHJvZHVjdF9pbWFnZScsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0X2Zvcm1hdDogJ1Byb2R1Y3QgSW1hZ2UnXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogXCJhW2lkXj0ndGl0bGUnXVwiLFxuICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdwcm9kdWN0X3RpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHRleHRfc2VsZWN0b3I6ICdzcGFuLmEtdHJ1bmNhdGUtZnVsbCdcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOlxuICAgICAgICAgICAgICAgICAgICAgICdzcGFuW2NsYXNzKj1cInByaWNlQmxvY2tXaXRoTWFyZ2luUmlnaHRcIl0gc3Bhbi5hLXByaWNlID4gc3Bhbjpub3QoLmEtb2Zmc2NyZWVuKScsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAncHJpY2UnXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJyN1ZG1EZWxpdmVyeU1lc3NhZ2VDb21wb25lbnQnLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2RlbGl2ZXJ5J1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6XG4gICAgICAgICAgICAgICAgICAgICAgJ2lucHV0W25hbWU9XCJzdWJtaXQuYWRkVG9DYXJ0XCJdLCBpbnB1dFtuYW1lXj1cImF0ZmNTaGltXCJdLCBidXR0b25bYXJpYS1sYWJlbD1cIkFkZCB0byBDYXJ0LiBDbGljayB0byBjaGFuZ2UgcXVhbnRpdHlcIl0nLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2FkZF90b19jYXJ0JyxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2RpdltpZF49XCJzZWVCdXlpbmdPcHRpb25zV3JhcHBlclwiXSBhJyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3NlZV9idXlpbmdfb3B0aW9ucycsXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWVcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnZGl2W25hbWU9XCJheC1xc1wiXScsXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6IFwiYnV0dG9uW2FyaWEtbGFiZWw9J0RlY3JlYXNlIHF1YW50aXR5IGJ5IG9uZSddXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfanM6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdkZWNyZWFzZV9xdWFudGl0eV9ieV9vbmUnXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogXCJkaXZbcm9sZT0nc3BpbmJ1dHRvbiddXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfZm9ybWF0OiAnQ3VycmVudCBRdWFudGl0eToge30nXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogXCJidXR0b25bYXJpYS1sYWJlbD0nSW5jcmVhc2UgcXVhbnRpdHkgYnkgb25lJ11cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dF9qczogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCdhcmlhLWxhYmVsJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdpbmNyZWFzZV9xdWFudGl0eV9ieV9vbmUnXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5xcy13aWRnZXQtY29udGFpbmVyJyxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogXCJpbnB1dFthcmlhLWxhYmVsPSdSZW1vdmUnXVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0X2pzOiBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZGVjcmVhc2VfcXVhbnRpdHlfYnlfb25lJ1xuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdkaXYucXMtd2lkZ2V0LWRyb3Bkb3duLWZsZXgtd3JhcHBlciBidXR0b24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZHJvcF9kb3duX2xpc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dF9mb3JtYXQ6ICdDdXJyZW50IFF1YW50aXR5OiB7fSdcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2LnFzLXdpZGdldC1kcm9wZG93bi13cmFwcGVyIHNwYW5bZGF0YS1hY3Rpb249XCJxcy13aWRnZXQtZHJvcGRvd24tZGVjbFwiXScsXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZV9yb290OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2Zyb21fdGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0X2Zvcm1hdDogJ0Ryb3AgRG93biBPcHRpb24ge30nXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdltpZF49XCJxcy13aWRnZXQtcXVhbnRpdHktY29udGFpbmVyLWF0ZmNcIl0gc3BhbltkYXRhLWFjdGlvbj1cInFzLXdpZGdldC1xdWFudGl0eS1jaGFuZ2VsaW5rLWRlY2xcIl0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2Vfcm9vdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdmcm9tX3RleHQnXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdltpZF49XCJxcy13aWRnZXQtc3VtbWFyeS1jb250YWluZXItYXRmY1wiXSBzcGFuW2lkXj1cInFzLXdpZGdldC1zdW1tYXJ5LWF0Yy1hdGZjXCJdJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlX3Jvb3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZnJvbV90ZXh0J1xuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6IFwiaW5wdXRbYXJpYS1sYWJlbD0nQWRkJ11cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dF9qczogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCdhcmlhLWxhYmVsJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdpbmNyZWFzZV9xdWFudGl0eV9ieV9vbmUnXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZV9tZXRhZGF0YTogKGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRUaXRsZUVtID0gZW1cbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJ2RpdltpZF49XCJmZWF0dXJlZFwiXScpXG4gICAgICAgICAgICAgICAgICAgID8ucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICAgICAgICAnZGl2W2lkXj1cImRldGFpbENvbnRlbnRXcmFwcGVyXCJdIGFbaWRePVwidGl0bGVcIl0gc3Bhbi5hLXRydW5jYXRlLWZ1bGwnXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudFRpdGxlID0gcGFyZW50VGl0bGVFbT8uaW5uZXJUZXh0XG4gICAgICAgICAgICAgICAgICAgID8udG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvW15cXHddKy9nLCAnXycpXG4gICAgICAgICAgICAgICAgICBjb25zdCBhc2luRW0gPSBlbS5xdWVyeVNlbGVjdG9yKCdkaXZbY2xhc3MqPVwiZGVsaWdodEZhY2VvdXRcIl0nKVxuICAgICAgICAgICAgICAgICAgY29uc3QgYXNpbiA9IGFzaW5FbT8uZ2V0QXR0cmlidXRlKCdkYXRhLWFzaW4nKVxuICAgICAgICAgICAgICAgICAgY29uc3QgcHJpY2VFbSA9IGVtLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAgICAgICAgICdzcGFuW2NsYXNzKj1cInByaWNlQmxvY2tXaXRoTWFyZ2luUmlnaHRcIl0gc3Bhbi5hLXByaWNlID4gc3Bhbjpub3QoLmEtb2Zmc2NyZWVuKSdcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlID0gcHJpY2VFbT8uaW5uZXJUZXh0Py5yZXBsYWNlKC9bXFxuXS9nLCAnJylcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHRpdGxlRW0gPSBlbS5xdWVyeVNlbGVjdG9yKFwiYVtpZF49J3RpdGxlJ10gc3Bhbi5hLXRydW5jYXRlLWZ1bGxcIilcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gdGl0bGVFbT8uaW5uZXJUZXh0XG4gICAgICAgICAgICAgICAgICBjb25zdCB1cmxFbSA9IGVtLnF1ZXJ5U2VsZWN0b3IoXCJhW2lkXj0ndGl0bGUnXVwiKVxuICAgICAgICAgICAgICAgICAgY29uc3QgdXJsID0gdXJsRW0/LmdldEF0dHJpYnV0ZSgnaHJlZicpXG4gICAgICAgICAgICAgICAgICBjb25zdCBkZWxpdmVyeUVtID0gZW0ucXVlcnlTZWxlY3RvcignI3VkbURlbGl2ZXJ5TWVzc2FnZUNvbXBvbmVudCcpXG4gICAgICAgICAgICAgICAgICBjb25zdCBkZWxpdmVyeSA9IGRlbGl2ZXJ5RW0/LmlubmVyVGV4dC5yZXBsYWNlKC9bXFxuXS9nLCAnICcpXG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBwYXJlbnRUaXRsZSArICcuc2ltaWxhcl9pdGVtcycsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgdGl0bGUsIGFzaW4sIHByaWNlLCB1cmwsIGRlbGl2ZXJ5IH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBzZWxlY3RvcjogJyNzbnNVcHNlbGxNb2RhbCcsXG4gICAgbmFtZTogJ3N1YnNjcmliZV9hbmRfc2F2ZV9wb3BvdmVyJyxcbiAgICBjaGlsZHJlbjogW1xuICAgICAge1xuICAgICAgICBzZWxlY3RvcjogJ2RpdltjbGFzcyo9XCJtb2RhbEhlYWRlclwiXScsXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6ICdzcGFuW2NsYXNzKj1cIm1vZGFsSGVhZGVyVGV4dFwiXScsXG4gICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6ICdzcGFuW2RhdGEtYWN0aW9uPVwiYS1wb3BvdmVyLWNsb3NlXCJdJyxcbiAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgdGV4dF9mb3JtYXQ6ICdDbG9zZScsXG4gICAgICAgICAgICBuYW1lOiAnZnJvbV90ZXh0J1xuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc2VsZWN0b3I6ICdkaXZbY2xhc3MqPVwibW9kYWxDb250ZW50XCJdJyxcbiAgICAgICAgZGlyZWN0X2NoaWxkOiB0cnVlLFxuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnZGl2Om5vdChbY2xhc3MqPVwiYnV0dG9uQ29udGFpbmVyXCJdKTpub3QoOmhhcyhzZWxlY3QpKScsXG4gICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6ICdzZWxlY3QnLFxuICAgICAgICAgICAgbmFtZTogJ2Ryb3BfZG93bl9saXN0J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgLy8ge1xuICAgICAgICAgIC8vICAgc2VsZWN0b3I6ICdzcGFuLmEtZHJvcGRvd24tcHJvbXB0JyxcbiAgICAgICAgICAvLyAgIG5hbWU6ICdvcGVuX2Ryb3BfZG93bl9saXN0JyxcbiAgICAgICAgICAvLyAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAvLyAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgIC8vICAgdGV4dF9mb3JtYXQ6IFwiRGVsaXZlcnkgZXZlcnk6IHt9XCIsXG4gICAgICAgICAgLy8gfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjogJ2RpdltjbGFzcyo9XCJidXR0b25Db250YWluZXJcIl0nLFxuICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnZGl2W2NsYXNzKj1cImNhbmNlbEJ1dHRvbkNvbnRhaW5lclwiXSBpbnB1dCcsXG4gICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgdGV4dF9mb3JtYXQ6ICdDYW5jZWwnLFxuICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnZnJvbV90ZXh0J1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6XG4gICAgICAgICAgICAgICAgICAnZGl2W2NsYXNzKj1cInN1YnNjcmlwdGlvbkJ1dHRvbkNvbnRhaW5lclwiXSBpbnB1dFtuYW1lPVwic3VibWl0LmFkZFRvQ2FydFwiXScsXG4gICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgdGV4dF9mb3JtYXQ6ICdBZGQgU3Vic2NyaXB0aW9uIHRvIENhcnQnLFxuICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnZnJvbV90ZXh0J1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgXSxcbiAgICBnZW5lcmF0ZV9tZXRhZGF0YTogKGVtKSA9PiB7XG4gICAgICBjb25zdCBhc2luRW0gPSBlbS5xdWVyeVNlbGVjdG9yKCdkaXZbY2xhc3MqPVwibW9kYWxDb250ZW50XCJdJylcbiAgICAgIGNvbnN0IGFzaW4gPSBhc2luRW0/LmlkPy5zcGxpdCgnLScpWzFdPy50cmltKClcbiAgICAgIHJldHVybiB7IG5hbWU6ICdwb3BvdmVyX2l0ZW0nLCBkYXRhOiB7IGFzaW4gfSB9XG4gICAgfVxuICB9XG5dXG5cbmV4cG9ydCBjb25zdCByZWNpcGVzID0gW1xuICB7XG4gICAgbWF0Y2g6ICcvJyxcbiAgICBtYXRjaF9tZXRob2Q6ICd1cmwnLFxuICAgIG1hdGNoX3dpdGhfcmVmOiB0cnVlLFxuICAgIHNlbGVjdG9yOiAnaHRtbCcsXG4gICAgY2hpbGRyZW46IFtcbiAgICAgIHtcbiAgICAgICAgc2VsZWN0b3I6ICdoZWFkJyxcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjogJ3RpdGxlJyxcbiAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzZWxlY3RvcjogJ2JvZHknLFxuICAgICAgICBjaGlsZHJlbjogW25hdiwgY2FydF9zaWRlX2Jhcl1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBtYXRjaDogJy9mbWMvc3RvcmVmcm9udCcsXG4gICAgbWF0Y2hfbWV0aG9kOiAndXJsJyxcbiAgICBtYXRjaF93aXRoX3JlZjogdHJ1ZSxcbiAgICBzZWxlY3RvcjogJ2h0bWwnLFxuICAgIGNoaWxkcmVuOiBbXG4gICAgICB7XG4gICAgICAgIHNlbGVjdG9yOiAnaGVhZCcsXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6ICd0aXRsZScsXG4gICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc2VsZWN0b3I6ICdib2R5JyxcbiAgICAgICAgY2hpbGRyZW46IFtuYXYsIGNhcnRfc2lkZV9iYXJdXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgbWF0Y2g6ICcvcycsXG4gICAgbWF0Y2hfbWV0aG9kOiAndXJsJyxcbiAgICBzZWxlY3RvcjogJ2h0bWwnLFxuICAgIGNoaWxkcmVuOiBbXG4gICAgICB7XG4gICAgICAgIHNlbGVjdG9yOiAnaGVhZCcsXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6ICd0aXRsZScsXG4gICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc2VsZWN0b3I6ICdib2R5JyxcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICBuYXYsXG4gICAgICAgICAgY2FydF9zaWRlX2JhcixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjogJyNzLXJlZmluZW1lbnRzJyxcbiAgICAgICAgICAgIG5hbWU6ICdyZWZpbmVtZW50cycsXG4gICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICcjdG9wUmVmaW5lbWVudHNcXFxcLzAnLFxuICAgICAgICAgICAgICAgIG5hbWU6ICd0b3BfcmVmaW5lbWVudHMnLFxuICAgICAgICAgICAgICAgIGFkZF90ZXh0OiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgdGV4dF9mb3JtYXQ6ICdSZWNlbnRseSB1c2VkIGZpbHRlcnMnLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnbGknLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2Zyb21fdGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdGV4dF9qczogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQgPSAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhQ2hpbGQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2EuYS1saW5rLW5vcm1hbC5zLW5hdmlnYXRpb24taXRlbScpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5pbm5lclRleHQgJiYgZWxlbWVudC5pbm5lclRleHQudHJpbSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgKz0gZWxlbWVudC5pbm5lclRleHQudHJpbSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhQ2hpbGQgJiYgYUNoaWxkLmhhc0F0dHJpYnV0ZSgndGl0bGUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgKz0gJyAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSBhQ2hpbGQuZ2V0QXR0cmlidXRlKCd0aXRsZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFDaGlsZCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignYS5hLWxpbmstbm9ybWFsLnMtbmF2aWdhdGlvbi1pdGVtJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFDaGlsZCAmJiBhQ2hpbGQuaGFzQXR0cmlidXRlKCd0aXRsZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSBhQ2hpbGQuZ2V0QXR0cmlidXRlKCd0aXRsZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogXCJpbnB1dFt0eXBlPSdjaGVja2JveCddXCJcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjpcbiAgICAgICAgICAgICAgICAgICdkaXYuYS1zZWN0aW9uLmEtc3BhY2luZy1ub25lOm5vdCg6aGFzKCNuLXRpdGxlKSk6aGFzKHNwYW4uYS1zaXplLWJhc2UuYS1jb2xvci1iYXNlLnB1aXMtYm9sZC13ZWlnaHQtdGV4dCk6aGFzKHVsIHNwYW4uYS1kZWNsYXJhdGl2ZSA+IHNwYW4gPiBsaSk6bm90KCNyZXZpZXdzUmVmaW5lbWVudHMpOm5vdCgjZGVwYXJ0bWVudHMpOm5vdCgjcHJpY2VSZWZpbmVtZW50cyk6bm90KCNmaWx0ZXJzKScsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2Zyb21fdGV4dCcsXG4gICAgICAgICAgICAgICAgdGV4dF9zZWxlY3RvcjogJ3NwYW4uYS1zaXplLWJhc2UuYS1jb2xvci1iYXNlLnB1aXMtYm9sZC13ZWlnaHQtdGV4dCcsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IHJlZmluZW1lbnRfb3B0aW9uXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJyNkZXBhcnRtZW50cycsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2RlcGFydG1lbnRzJyxcbiAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0X2Zvcm1hdDogJ0RlcGFydG1lbnQnLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnbGkgYScsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZnJvbV90ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZV9tZXRhZGF0YTogKGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBlbT8uZ2V0QXR0cmlidXRlKCdhcmlhLWN1cnJlbnQnKVxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gZW0/LmlubmVyVGV4dFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IGVtPy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKVxuICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZCAmJiBzZWxlY3RlZCA9PSAndHJ1ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdyZWZpbmVtZW50cy5kZXBhcnRtZW50cycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgdGl0bGUsIHNlbGVjdGVkOiB0cnVlLCB1cmwgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAncmVmaW5lbWVudHMuZGVwYXJ0bWVudHMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IHRpdGxlLCBzZWxlY3RlZDogZmFsc2UsIHVybCB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICcjcmV2aWV3c1JlZmluZW1lbnRzJyxcbiAgICAgICAgICAgICAgICBuYW1lOiAncmV2aWV3c19yZWZpbmVtZW50cycsXG4gICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgdGV4dF9mb3JtYXQ6ICdDdXN0b21lciBSZXZpZXdzJyxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Eucy1uYXZpZ2F0aW9uLWNsZWFyLWxpbmsnLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2NsZWFyX3NlbGVjdGlvbicsXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6IFwibGkgYVthcmlhLWN1cnJlbnQ9J3RydWUnXVwiLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2Zyb21fdGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgLy8gdGV4dF9mb3JtYXQ6ICdDbGVhciBPcHRpb24ge30nLFxuICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZV9tZXRhZGF0YTogKGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBlbT8uaW5uZXJUZXh0Py5yZXBsYWNlKC9cXG4vZywgJyAnKVxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IGVtPy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKVxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IG5hbWU6ICdyZWZpbmVtZW50cy5yZXZpZXdzJywgZGF0YTogeyB0aXRsZSwgc2VsZWN0ZWQ6IHRydWUsIHVybCB9IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6IFwibGkgYVthcmlhLWN1cnJlbnQ9J2ZhbHNlJ11cIixcbiAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdmcm9tX3RleHQnLFxuICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlX21ldGFkYXRhOiAoZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aXRsZSA9IGVtPy5pbm5lclRleHQ/LnJlcGxhY2UoL1xcbi9nLCAnICcpXG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJsID0gZW0/LmdldEF0dHJpYnV0ZSgnaHJlZicpXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgbmFtZTogJ3JlZmluZW1lbnRzLnJldmlld3MnLCBkYXRhOiB7IHRpdGxlLCBzZWxlY3RlZDogZmFsc2UsIHVybCB9IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnI3ByaWNlUmVmaW5lbWVudHMnLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdwcmljZV9yZWZpbmVtZW50cycsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgIC8vIDIgY2FzZXM6IHNlbGVjdGlvbiAvIHNsaWRlclxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJyNwXzM2LXRpdGxlLCBkaXYuc2YtcmVmaW5lbWVudC1oZWFkaW5nIHNwYW4nLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3ByaWNlX2hlYWRpbmcnXG4gICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAvLyBjYXNlIDE6IHNlbGVjdGlvblxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogXCJkaXZbYXJpYS1sYWJlbGxlZGJ5PSdwXzM2LXRpdGxlJ10gPiBhXCIsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnY2xlYXJfcHJpY2Vfc2VsZWN0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogXCJ1bFthcmlhLWxhYmVsbGVkYnk9J3BfMzYtdGl0bGUnXSBhW2FyaWEtY3VycmVudD0ndHJ1ZSddXCIsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZnJvbV90ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAvLyB0ZXh0X2Zvcm1hdDogJ0NsZWFyIE9wdGlvbiB7fScsXG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlX21ldGFkYXRhOiAoZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aXRsZSA9IGVtPy5pbm5lclRleHRcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBlbT8uZ2V0QXR0cmlidXRlKCdocmVmJylcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBuYW1lOiAncmVmaW5lbWVudHMucHJpY2UnLCBkYXRhOiB7IHRpdGxlLCBzZWxlY3RlZDogdHJ1ZSwgdXJsIH0gfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogXCJ1bFthcmlhLWxhYmVsbGVkYnk9J3BfMzYtdGl0bGUnXSBhW2FyaWEtY3VycmVudD0nZmFsc2UnXVwiLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2Zyb21fdGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVfbWV0YWRhdGE6IChlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gZW0/LmlubmVyVGV4dFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IGVtPy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKVxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IG5hbWU6ICdyZWZpbmVtZW50cy5wcmljZScsIGRhdGE6IHsgdGl0bGUsIHNlbGVjdGVkOiBmYWxzZSwgdXJsIH0gfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAvLyBjYXNlIDI6IHNsaWRlclxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5zZi1yYW5nZS1zbGlkZXItcm93Om50aC1vZi10eXBlKDEpJyxcbiAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlX21ldGFkYXRhOiAoZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCByYW5nZSA9IGVtPy5pbm5lclRleHQ/LnJlcGxhY2UoL1xcbi9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBuYW1lOiAncmVmaW5lbWVudHMucHJpY2UnLCBkYXRhOiB7IHRpdGxlOiAncHJpY2VfcmFuZ2UnLCByYW5nZSB9IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdkaXYuc2YtcmFuZ2Utc2xpZGVyLXJvdzpudGgtb2YtdHlwZSgyKSBkaXYucy1sb3dlci1ib3VuZCBpbnB1dCcsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdwcmljZV9taW5fdmFsdWUnLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgLy8gdGV4dF9qczogKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICBjb25zdCB0ZXh0ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVldGV4dFwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAgIGNvbnNvbGUubG9nKHRleHQpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgaWYgKHRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHJldHVybiB0ZXh0O1xuICAgICAgICAgICAgICAgICAgICAvLyAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgLy8gICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAga2VlcF9hdHRyOiBbJ21pbicsICdtYXgnLCAnc3RlcCddLFxuICAgICAgICAgICAgICAgICAgICBvdmVycmlkZV9hdHRyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgc3RlcF92YWx1ZXM6IChlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybUVtID0gZW0uY2xvc2VzdCgnZm9ybScpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybUVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3AgPSBmb3JtRW0uZ2V0QXR0cmlidXRlKCdkYXRhLXNsaWRlci1wcm9wcycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RlcHMgPSBKU09OLnBhcnNlKHByb3ApLnN0ZXBMYWJlbHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RlcHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3ZhbHVlOiAoZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gTnVtYmVyLnBhcnNlSW50KGVtLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtRW0gPSBlbS5jbG9zZXN0KCdmb3JtJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1FbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3AgPSBmb3JtRW0uZ2V0QXR0cmlidXRlKCdkYXRhLXNsaWRlci1wcm9wcycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0ZXBzID0gSlNPTi5wYXJzZShwcm9wKS5zdGVwTGFiZWxzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RlcHNbdmFsdWVdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnZGl2LnNmLXJhbmdlLXNsaWRlci1yb3c6bnRoLW9mLXR5cGUoMikgZGl2LnMtdXBwZXItYm91bmQgaW5wdXQnLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAncHJpY2VfbWF4X3ZhbHVlJyxcbiAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIC8vIHRleHRfanM6IChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgY29uc3QgdGV4dCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZXRleHRcIilcbiAgICAgICAgICAgICAgICAgICAgLy8gICBpZiAodGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgcmV0dXJuIHRleHQ7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAvLyAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBrZWVwX2F0dHI6IFsnbWluJywgJ21heCcsICdzdGVwJ10sXG4gICAgICAgICAgICAgICAgICAgIG92ZXJyaWRlX2F0dHI6IHtcbiAgICAgICAgICAgICAgICAgICAgICBzdGVwX3ZhbHVlczogKGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtRW0gPSBlbS5jbG9zZXN0KCdmb3JtJylcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtRW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcCA9IGZvcm1FbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2xpZGVyLXByb3BzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGVwcyA9IEpTT04ucGFyc2UocHJvcCkuc3RlcExhYmVsc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGVwc1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfdmFsdWU6IChlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBOdW1iZXIucGFyc2VJbnQoZW0uZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1FbSA9IGVtLmNsb3Nlc3QoJ2Zvcm0nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybUVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcCA9IGZvcm1FbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2xpZGVyLXByb3BzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RlcHMgPSBKU09OLnBhcnNlKHByb3ApLnN0ZXBMYWJlbHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGVwc1t2YWx1ZV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdkaXYuc2Ytc3VibWl0LXJhbmdlLWJ1dHRvbiBpbnB1dCcsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdzdWJtaXRfcHJpY2VfcmFuZ2UnLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdGV4dF9mb3JtYXQ6ICdHbycsXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdkaXYuc2YtcmVzZXQtcmFuZ2UtbGluayBhJyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3Jlc2V0X3ByaWNlX3NlbGVjdGlvbicsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICcjcF9uX2RlYWxfdHlwZS10aXRsZScsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZGVhbHNfZGlzY291bnRzX2hlYWRpbmcnXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogXCJkaXZbYXJpYS1sYWJlbGxlZGJ5PSdwX25fZGVhbF90eXBlLXRpdGxlJ10gPiBhXCIsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnY2xlYXJfZGVhbHNfZGlzY291bnRfc2VsZWN0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogXCJ1bFthcmlhLWxhYmVsbGVkYnk9J3Bfbl9kZWFsX3R5cGUtdGl0bGUnXSBhW2FyaWEtY3VycmVudD0ndHJ1ZSddXCIsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZnJvbV90ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAvLyB0ZXh0X2Zvcm1hdDogJ0NsZWFyIE9wdGlvbiB7fScsXG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlX21ldGFkYXRhOiAoZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aXRsZSA9IGVtPy5pbm5lclRleHRcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBlbT8uZ2V0QXR0cmlidXRlKCdocmVmJylcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBuYW1lOiAncmVmaW5lbWVudHMucHJpY2UnLCBkYXRhOiB7IHRpdGxlLCBzZWxlY3RlZDogdHJ1ZSwgdXJsIH0gfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogXCJ1bFthcmlhLWxhYmVsbGVkYnk9J3Bfbl9kZWFsX3R5cGUtdGl0bGUnXSBhW2FyaWEtY3VycmVudD0nZmFsc2UnXVwiLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2Zyb21fdGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVfbWV0YWRhdGE6IChlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gZW0/LmlubmVyVGV4dFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IGVtPy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKVxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IG5hbWU6ICdyZWZpbmVtZW50cy5wcmljZScsIGRhdGE6IHsgdGl0bGUsIHNlbGVjdGVkOiBmYWxzZSwgdXJsIH0gfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5zLW1haW4tc2xvdC5zLXJlc3VsdC1saXN0LnMtc2VhcmNoLXJlc3VsdHMnLFxuICAgICAgICAgICAgbmFtZTogJ3NlYXJjaF9yZXN1bHRzJyxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5BZEhvbGRlcicsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2FkcycsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdkaXZbZGF0YS1hc2luXScsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdmcm9tX3RleHQnLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0X2pzOiAoZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aXRsZUVtID0gZW0ucXVlcnlTZWxlY3RvcignaW1nJylcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gdGl0bGVFbT8uZ2V0QXR0cmlidXRlKCdhbHQnKVxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0LnRyaW0oKSB8fCAnJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZV9tZXRhZGF0YTogKGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXNpbkVtID0gZW1cbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhc2luID0gYXNpbkVtPy5nZXRBdHRyaWJ1dGUoJ2RhdGEtYXNpbicpXG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGl0bGVFbSA9IGVtLnF1ZXJ5U2VsZWN0b3IoJ2ltZycpXG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGl0bGUgPSB0aXRsZUVtPy5nZXRBdHRyaWJ1dGUoJ2FsdCcpXG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJsRW0gPSBlbS5xdWVyeVNlbGVjdG9yKFwiYVtkYXRhLXR5cGU9J3Byb2R1Y3RUaXRsZSddXCIpXG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJsID0gdXJsRW0/LmdldEF0dHJpYnV0ZSgnaHJlZicpXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgbmFtZTogJ2FkcycsIGRhdGE6IHsgdGl0bGUsIGFzaW4sIHVybCB9IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluc2VydF9zcGxpdF9tYXJrZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgaW5zZXJ0X3NwbGl0X21hcmtlcl9ldmVyeTogNCxcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2RpdltkYXRhLWNvbXBvbmVudC10eXBlPVwicy1zZWFyY2gtcmVzdWx0XCJdJyxcbiAgICAgICAgICAgICAgICB0ZXh0X3NlbGVjdG9yOlxuICAgICAgICAgICAgICAgICAgJ3NwYW4uYS1jb2xvci1iYXNlLmEtdGV4dC1ub3JtYWwsIGgyLmEtY29sb3ItYmFzZS5hLXRleHQtbm9ybWFsIHNwYW4nLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdmcm9tX3RleHQnLFxuICAgICAgICAgICAgICAgIGNsYXNzOiAnc2VhcmNoLXJlc3VsdCcsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6XG4gICAgICAgICAgICAgICAgICAgICAgXCJkaXZbZGF0YS1jeT0ndGl0bGUtcmVjaXBlJ10gYS5hLWxpbmstbm9ybWFsLnMtbGluay1zdHlsZS5hLXRleHQtbm9ybWFsXCIsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjbGFzczogJ3Byb2R1Y3QtbmFtZScsXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3Byb2R1Y3RfbmFtZSdcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnZGl2LnMtcHJvZHVjdC1pbWFnZS1jb250YWluZXInLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3Byb2R1Y3RfaW1hZ2UnLFxuICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHRleHRfZm9ybWF0OiAnUHJvZHVjdCBJbWFnZSdcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnZGl2LnMtY29sb3Itc3dhdGNoLWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdhdmFpbGFibGVfY29sb3JzJyxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5zLWNvbG9yLXN3YXRjaC1wYWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2Zyb21fdGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfanM6IChlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhQ2hpbGQgPSBlbS5xdWVyeVNlbGVjdG9yKCdhJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhQ2hpbGQuZ2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJykgfHwgJydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBcImRpdltkYXRhLWNzYS1jLXR5cGU9J2xpbmsnXSBhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RfY2hpbGQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZnJvbV90ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjpcbiAgICAgICAgICAgICAgICAgICAgICAnZGl2LnMtdmFyaWF0aW9ucy1vcHRpb25zLWVsZXZhdGVkLCBkaXYucy12YXJpYXRpb25zLW9wdGlvbnMtanVzdGlmeS1jb250ZW50JyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ29wdGlvbnMnLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjbGlja19zZWxlY3RvcjogJ2EnXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogXCJkaXZbZGF0YS1jeT0ncmV2aWV3cy1ibG9jayddXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiAncHJvZHVjdC1yZXZpZXcnLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnc3Bhbi5hLWljb24tYWx0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdwcm9kdWN0LXJhdGluZydcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnc3Bhbi5hLXNpemUtYmFzZS5zLXVuZGVybGluZS10ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dF9mb3JtYXQ6ICd7fSByZXZpZXdzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAncHJvZHVjdC1yYXRpbmctY291bnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3Byb2R1Y3RfcmF0aW5nX2NvdW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6IFwiZGl2W2RhdGEtY3k9J3ByaWNlLXJlY2lwZSddXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiAncHJvZHVjdC1wcmljZScsXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdhLmEtbGluay1ub3JtYWwgPiBzcGFuLmEtcHJpY2UgPiBzcGFuLmEtb2Zmc2NyZWVuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogXCJkaXZbZGF0YS1jeT0nZGVsaXZlcnktcmVjaXBlJ11cIixcbiAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiAncHJvZHVjdC1kZWxpdmVyeSdcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBcImRpdltkYXRhLWN5PSdhZGQtdG8tY2FydCddIGJ1dHRvbiwgc3BhbltpZCo9J2FkZC10by1jYXJ0J10gaW5wdXRcIixcbiAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2FkZF90b19jYXJ0J1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6IFwiZGl2W2RhdGEtY3NhLWMtY29udGVudC1pZD0ncy1zZWFyY2gtc2VlLWRldGFpbHMtYnV0dG9uJ10gYVwiLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnc2VlX29wdGlvbnMnXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2RpdltuYW1lPVwiYXgtcXNcIl0nLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBcImJ1dHRvblthcmlhLWxhYmVsPSdEZWNyZWFzZSBxdWFudGl0eSBieSBvbmUnXVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0X2pzOiBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZGVjcmVhc2VfcXVhbnRpdHlfYnlfb25lJ1xuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6IFwiZGl2W3JvbGU9J3NwaW5idXR0b24nXVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0X2Zvcm1hdDogJ0N1cnJlbnQgUXVhbnRpdHk6IHt9J1xuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6IFwiYnV0dG9uW2FyaWEtbGFiZWw9J0luY3JlYXNlIHF1YW50aXR5IGJ5IG9uZSddXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfanM6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnaW5jcmVhc2VfcXVhbnRpdHlfYnlfb25lJ1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVfbWV0YWRhdGE6IChlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgYXNpbiA9IGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1hc2luJylcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlRW0gPSBlbS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgICAgICBcImRpdltkYXRhLWN5PSdwcmljZS1yZWNpcGUnXSBhLmEtbGluay1ub3JtYWwgPiBzcGFuLmEtcHJpY2UgPiBzcGFuLmEtb2Zmc2NyZWVuXCJcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlID0gcHJpY2VFbT8uaW5uZXJUZXh0XG4gICAgICAgICAgICAgICAgICBjb25zdCB0aXRsZUVtID0gZW0ucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICAgICAgJ3NwYW4uYS1jb2xvci1iYXNlLmEtdGV4dC1ub3JtYWwsIGgyLmEtY29sb3ItYmFzZS5hLXRleHQtbm9ybWFsIHNwYW4nXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBjb25zdCB0aXRsZSA9IHRpdGxlRW0/LmlubmVyVGV4dFxuICAgICAgICAgICAgICAgICAgY29uc3QgdXJsRW0gPSBlbS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgICAgICBcImRpdltkYXRhLWN5PSd0aXRsZS1yZWNpcGUnXSBhLmEtbGluay1ub3JtYWwucy1saW5rLXN0eWxlLmEtdGV4dC1ub3JtYWxcIlxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgY29uc3QgdXJsID0gdXJsRW0/LmdldEF0dHJpYnV0ZSgnaHJlZicpXG4gICAgICAgICAgICAgICAgICBjb25zdCBkZWxpdmVyeUVtID0gZW0ucXVlcnlTZWxlY3RvcihcImRpdltkYXRhLWN5PSdkZWxpdmVyeS1yZWNpcGUnXVwiKVxuICAgICAgICAgICAgICAgICAgY29uc3QgZGVsaXZlcnkgPSBkZWxpdmVyeUVtPy5pbm5lclRleHQucmVwbGFjZSgvW1xcbl0vZywgJyAnKVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgbmFtZTogJ3NlYXJjaF9yZXN1bHRzJywgZGF0YTogeyB0aXRsZSwgYXNpbiwgcHJpY2UsIHVybCwgZGVsaXZlcnkgfSB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjogJ3NwYW4ucy1wYWdpbmF0aW9uLXN0cmlwJyxcbiAgICAgICAgICAgIG5hbWU6ICdwYWdpbmF0aW9uJyxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJy5zLXBhZ2luYXRpb24taXRlbScsXG4gICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2Zyb21fdGV4dCcsXG4gICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnZGl2LmEtcG9wb3Zlci13cmFwcGVyJyxcbiAgICAgICAgICAgIG5hbWU6ICdwb3BvdmVyJyxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2hlYWRlci5hLXBvcG92ZXItaGVhZGVyIGJ1dHRvbicsXG4gICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdjbG9zZScsXG4gICAgICAgICAgICAgICAgdGV4dF9mb3JtYXQ6ICdDbG9zZSdcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnZGl2LmEtcG9wb3Zlci1pbm5lciBkaXYucHVpcy1hdGMtc2l6ZS12YXJpYXRpb24nLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnZGl2LmEtcm93Om50aC1vZi10eXBlKDEpJyxcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0X2NoaWxkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBcInNwYW5bZGF0YS1jb21wb25lbnQtdHlwZT0ncy1wcm9kdWN0LWltYWdlJ10gYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3Byb2R1Y3RfaW1hZ2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0X2Zvcm1hdDogJ1Byb2R1Y3QgSW1hZ2UnXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5wdWlzLXNpemUtdmFyaWF0aW9uLXRpdGxlIGEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3Byb2R1Y3RfdGl0bGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnZGl2LnB1aXMtc2l6ZS12YXJpYXRpb24tcHJvZHVjdC1zcGVjJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdwcm9kdWN0X3NwZWNpZmljYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja19zZWxlY3RvcjogJ2EnXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5hLXJvdzpudGgtb2YtdHlwZSgyKScsXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdF9jaGlsZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5wdWlzLXNpemUtdmFyaWF0aW9uLXByb2R1Y3Qtb3B0aW9ucycsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZnJvbV90ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfc2VsZWN0b3I6ICdzcGFuLmEtc2l6ZS1iYXNlLmEtY29sb3Itc2Vjb25kYXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ3NwYW4uYS1zaXplLWJhc2UuYS1jb2xvci1zZWNvbmRhcnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ3NwYW4uYS1kcm9wZG93bi1wcm9tcHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ3NlbGVjdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2Ryb3BfZG93bl9saXN0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5wdWlzLXNpemUtdmFyaWF0aW9uLXByaWNlIGEuYS10ZXh0LW5vcm1hbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAncHJpY2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0X3NlbGVjdG9yOiBcInNwYW5bYXJpYS1oaWRkZW49J3RydWUnXVwiXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5wdWlzLXNpemUtdmFyaWF0aW9uLWRlbGl2ZXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2RlbGl2ZXJ5J1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdkaXYuYS1yb3c6bnRoLW9mLXR5cGUoMyknLFxuICAgICAgICAgICAgICAgICAgICBkaXJlY3RfY2hpbGQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdzcGFuLnMtbm8tanMtaGlkZSBpbnB1dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnY2FuY2VsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dF9mb3JtYXQ6ICdDYW5jZWwnXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5wdWlzLWF0Y2ItYWRkLWNvbnRhaW5lciBidXR0b24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2FkZF90b19jYXJ0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZ2VuZXJhdGVfbWV0YWRhdGE6IChlbSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBhc2luID0gZW0ucXVlcnlTZWxlY3RvcignZGl2W2RhdGEtYXNpbl0nKT8uZ2V0QXR0cmlidXRlKCdkYXRhLWFzaW4nKVxuICAgICAgICAgICAgICBjb25zdCBwcmljZUVtID0gZW0ucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICAnZGl2LmEtcG9wb3Zlci1pbm5lciBkaXYucHVpcy1hdGMtc2l6ZS12YXJpYXRpb24gZGl2LmEtcm93Om50aC1vZi10eXBlKDIpIGRpdi5wdWlzLXNpemUtdmFyaWF0aW9uLXByaWNlIGEuYS10ZXh0LW5vcm1hbCBzcGFuW2FyaWEtaGlkZGVuPVwidHJ1ZVwiXSdcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBjb25zdCBwcmljZSA9IHByaWNlRW0/LmlubmVyVGV4dD8ucmVwbGFjZSgvW1xcbl0vZywgJycpXG4gICAgICAgICAgICAgIGNvbnN0IHRpdGxlRW0gPSBlbS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgICdkaXYuYS1wb3BvdmVyLWlubmVyIGRpdi5wdWlzLWF0Yy1zaXplLXZhcmlhdGlvbiBkaXYuYS1yb3c6bnRoLW9mLXR5cGUoMSkgZGl2LnB1aXMtc2l6ZS12YXJpYXRpb24tdGl0bGUgYSdcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBjb25zdCB0aXRsZSA9IHRpdGxlRW0/LmlubmVyVGV4dFxuICAgICAgICAgICAgICBjb25zdCB1cmxFbSA9IHRpdGxlRW1cbiAgICAgICAgICAgICAgY29uc3QgdXJsID0gdXJsRW0/LmdldEF0dHJpYnV0ZSgnaHJlZicpXG4gICAgICAgICAgICAgIGNvbnN0IHF1YW50aXR5RW0gPSBlbS5xdWVyeVNlbGVjdG9yKCdkaXZbZGF0YS1hY3Rpb249XCJhLWRyb3Bkb3duLWJ1dHRvblwiXScpXG4gICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnNFbSA9IGVtLnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICAgICAgICAgJ2Rpdi5hLXBvcG92ZXItaW5uZXIgZGl2LnB1aXMtYXRjLXNpemUtdmFyaWF0aW9uIGRpdi5hLXJvdzpudGgtb2YtdHlwZSgxKSBkaXYucHVpcy1zaXplLXZhcmlhdGlvbi1wcm9kdWN0LXNwZWMsIGRpdi5hLXBvcG92ZXItaW5uZXIgZGl2LnB1aXMtYXRjLXNpemUtdmFyaWF0aW9uIGRpdi5hLXJvdzpudGgtb2YtdHlwZSgyKSBkaXYucHVpcy1zaXplLXZhcmlhdGlvbi1wcm9kdWN0LW9wdGlvbnMnXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IFtdXG4gICAgICAgICAgICAgIGZvciAoY29uc3Qgb3B0aW9uRW0gb2Ygb3B0aW9uc0VtKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uS2V5RW0gPSBvcHRpb25FbT8ucXVlcnlTZWxlY3Rvcignc3Bhbi5hLXNpemUtYmFzZS5hLWNvbG9yLXNlY29uZGFyeScpXG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uVmFsdWVFbSA9IG9wdGlvbkVtPy5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgICAgJ3NwYW4uYS1zaXplLWJhc2UuYS1jb2xvci1iYXNlLCBzcGFuLmEtZHJvcGRvd24tcHJvbXB0J1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBjb25zdCBvcHRpb25LZXkgPSBvcHRpb25LZXlFbT8uaW5uZXJUZXh0LnJlcGxhY2UoL1s6XFxuXS9nLCAnJykudHJpbSgpXG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uVmFsdWUgPSBvcHRpb25WYWx1ZUVtPy5pbm5lclRleHQucmVwbGFjZSgvWzpcXG5dL2csICcnKS50cmltKClcbiAgICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSB7IFtvcHRpb25LZXldOiBvcHRpb25WYWx1ZSB9XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKG9wdGlvbilcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdwb3BvdmVyX2l0ZW0nLFxuICAgICAgICAgICAgICAgIGRhdGE6IHsgdGl0bGUsIGFzaW4sIHByaWNlLCB1cmwsIG9wdGlvbnMgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgbWF0Y2g6ICcjcHJvZHVjdFRpdGxlJyxcbiAgICBtYXRjaF90ZXh0OiAnJyxcbiAgICBzZWxlY3RvcjogJ2h0bWwnLFxuICAgIGNoaWxkcmVuOiBbXG4gICAgICB7XG4gICAgICAgIHNlbGVjdG9yOiAnaGVhZCcsXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6ICd0aXRsZScsXG4gICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc2VsZWN0b3I6ICdib2R5JyxcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICBuYXYsXG4gICAgICAgICAgY2FydF9zaWRlX2JhcixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjogJyNjZW50ZXJDb2wnLFxuICAgICAgICAgICAgY2xhc3M6ICdwcm9kdWN0LWNhcmQnLFxuICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnI3RpdGxlJyxcbiAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBrZWVwX2F0dHI6IFsnaWQnXSxcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZV9tZXRhZGF0YTogKGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAncHJvZHVjdF9kZXRhaWxzJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogeyB0aXRsZTogZW0/LmlubmVyVGV4dCB8fCAnJyB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICcjYXZlcmFnZUN1c3RvbWVyUmV2aWV3cycsXG4gICAgICAgICAgICAgICAgY2xhc3M6ICdyZXZpZXcnLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnc3Bhbi5hLWljb24tYWx0JyxcbiAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWVcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnI2FjckN1c3RvbWVyUmV2aWV3VGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6XG4gICAgICAgICAgICAgICAgICAnI2FwZXhfZGVza3RvcCA+IGRpdltkYXRhLWNzYS1jLXNsb3QtaWQ9XCJhcGV4X2RwX2NlbnRlcl9jb2x1bW5cIl0nICtcbiAgICAgICAgICAgICAgICAgICcgPiBkaXZbY2xhc3M9XCJvZmZlcnNDb25zaXN0ZW5jeUVuYWJsZWRcIl0gPiBkaXY6bm90KFtzdHlsZT1cImRpc3BsYXk6bm9uZTtcIl0pOm5vdChbc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiXSkgJyArXG4gICAgICAgICAgICAgICAgICAnI2NvcmVQcmljZURpc3BsYXlfZGVza3RvcF9mZWF0dXJlX2RpdjpoYXMoI3Nucy1iYXNlLXByaWNlKSAjc25zLWJhc2UtcHJpY2Ugc3Bhbi5hLXByaWNlLmFvay1hbGlnbi1jZW50ZXIucmVpbnZlbnRQcmljZVByaWNlVG9QYXlNYXJnaW4ucHJpY2VUb1BheSwgJyArXG4gICAgICAgICAgICAgICAgICAnI2FwZXhfZGVza3RvcCA+IGRpdltkYXRhLWNzYS1jLXNsb3QtaWQ9XCJhcGV4X2RwX2NlbnRlcl9jb2x1bW5cIl0nICtcbiAgICAgICAgICAgICAgICAgICcgPiBkaXZbY2xhc3M9XCJvZmZlcnNDb25zaXN0ZW5jeUVuYWJsZWRcIl0gPiBkaXY6bm90KFtzdHlsZT1cImRpc3BsYXk6bm9uZTtcIl0pOm5vdChbc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiXSkgJyArXG4gICAgICAgICAgICAgICAgICAnI2NvcmVQcmljZURpc3BsYXlfZGVza3RvcF9mZWF0dXJlX2Rpdjpub3QoOmhhcygjc25zLWJhc2UtcHJpY2UpKSBzcGFuLmEtcHJpY2UuYW9rLWFsaWduLWNlbnRlci5yZWludmVudFByaWNlUHJpY2VUb1BheU1hcmdpbi5wcmljZVRvUGF5LCAnICtcbiAgICAgICAgICAgICAgICAgICcjYXBleF9kZXNrdG9wID4gZGl2W2RhdGEtY3NhLWMtc2xvdC1pZD1cImFwZXhfZHBfY2VudGVyX2NvbHVtblwiXSA+IGRpdltkYXRhLWNzYS1jLWNvbnRlbnQtaWQ9XCJhcGV4X3dpdGhfcmlvX2N4XCJdICcgK1xuICAgICAgICAgICAgICAgICAgJyNjb3JlUHJpY2VEaXNwbGF5X2Rlc2t0b3BfZmVhdHVyZV9kaXYgc3Bhbi5hLXByaWNlLmFvay1hbGlnbi1jZW50ZXIucmVpbnZlbnRQcmljZVByaWNlVG9QYXlNYXJnaW4ucHJpY2VUb1BheScsXG4gICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgdGV4dF9mb3JtYXQ6ICdQcmljZToge30nLFxuICAgICAgICAgICAgICAgIGNsYXNzOiAncHJvZHVjdC1wcmljZScsXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVfbWV0YWRhdGE6IChlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3Byb2R1Y3RfZGV0YWlscycsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgcHJpY2U6IGVtPy5pbm5lclRleHQ/LnJlcGxhY2UoL1xcbi9nLCAnJykgfHwgJycgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGV4dF9qczogKGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZW0/LmlubmVyVGV4dD8ucmVwbGFjZSgvXFxuL2csICcnKSB8fCAnJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnI3R3aXN0ZXInLFxuICAgICAgICAgICAgICAgIGNsYXNzOiAncHJvZHVjdC1vcHRpb25zJyxcbiAgICAgICAgICAgICAgICBuYW1lOiAncHJvZHVjdF9vcHRpb25zJyxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5hLXNlY3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0X3NlbGVjdG9yOiAnZGl2LmEtcm93OmhhcyhsYWJlbC5hLWZvcm0tbGFiZWwpID4gbGFiZWwuYS1mb3JtLWxhYmVsJyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2Zyb21fdGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdF9jaGlsZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVfbWV0YWRhdGE6IChlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gZW1cbiAgICAgICAgICAgICAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKCdkaXYuYS1yb3c6aGFzKGxhYmVsLmEtZm9ybS1sYWJlbCkgbGFiZWwuYS1mb3JtLWxhYmVsJylcbiAgICAgICAgICAgICAgICAgICAgICAgID8uaW5uZXJIVE1MLnJlcGxhY2UoL1s6XFxuXS9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC50cmltKClcbiAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBlbS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpdi5hLXJvdzpoYXMobGFiZWwuYS1mb3JtLWxhYmVsKSBzcGFuLnNlbGVjdGlvbidcbiAgICAgICAgICAgICAgICAgICAgICApPy5pbm5lckhUTUxcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBlbS5xdWVyeVNlbGVjdG9yKCdzZWxlY3QnKT8ucXVlcnlTZWxlY3RvckFsbCgnb3B0aW9uJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvcHRpb24gb2Ygb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG9wdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbiAmJiBvcHRpb24uZ2V0QXR0cmlidXRlKCdzZWxlY3RlZCcpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9wdGlvbi5pbm5lckhUTUwudHJpbSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IG5hbWU6ICdwcm9kdWN0X29wdGlvbnMnLCBkYXRhOiB7IFtsYWJlbF06IHZhbHVlLnRyaW0oKSB9IH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5hLXJvdzpoYXMobGFiZWwuYS1mb3JtLWxhYmVsKScsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdsYWJlbC5hLWZvcm0tbGFiZWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ3NwYW4uc2VsZWN0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ3NlbGVjdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdkcm9wX2Rvd25fbGlzdCdcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAndWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2J1dHRvbl9saXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2xpIGJ1dHRvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdmcm9tX3RleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfanM6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dCA9ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5pbm5lclRleHQudHJpbSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgKz0gZWxlbWVudC5pbm5lclRleHQudHJpbSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGltZ0NoaWxkID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpbWcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1nQ2hpbGQgJiYgaW1nQ2hpbGQuYWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSAnICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IGltZ0NoaWxkLmFsdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWdDaGlsZCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignaW1nJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltZ0NoaWxkICYmIGltZ0NoaWxkLmFsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgKz0gaW1nQ2hpbGQuYWx0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0LnRyaW0oKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgLy8gaGFuZGxlIG5ldyB0d2lzdGVyc1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICcjdHdpc3Rlci1wbHVzLWlubGluZS10d2lzdGVyJyxcbiAgICAgICAgICAgICAgICBjbGFzczogJ3Byb2R1Y3Qtb3B0aW9ucycsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3Byb2R1Y3Rfb3B0aW9ucycsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdkaXYuaW5saW5lLXR3aXN0ZXItcm93JyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dF9zZWxlY3RvcjpcbiAgICAgICAgICAgICAgICAgICAgICAnZGl2LmlubGluZS10d2lzdGVyLWRpbS10aXRsZS12YWx1ZS10cnVuY2F0ZS1leHBhbmRlZCBzcGFuLmEtc2l6ZS1iYXNlLmEtY29sb3Itc2Vjb25kYXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2Zyb21fdGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdF9jaGlsZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVfbWV0YWRhdGE6IChlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gZW1cbiAgICAgICAgICAgICAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2LmlubGluZS10d2lzdGVyLWRpbS10aXRsZS12YWx1ZS10cnVuY2F0ZS1leHBhbmRlZCBzcGFuLmEtc2l6ZS1iYXNlLmEtY29sb3Itc2Vjb25kYXJ5J1xuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgPy5pbm5lckhUTUwucmVwbGFjZSgvWzpcXG5dL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRyaW0oKVxuICAgICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IGVtLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2LmlubGluZS10d2lzdGVyLWRpbS10aXRsZS12YWx1ZS10cnVuY2F0ZS1leHBhbmRlZCBzcGFuLmlubGluZS10d2lzdGVyLWRpbS10aXRsZS12YWx1ZSdcbiAgICAgICAgICAgICAgICAgICAgICApPy5pbm5lckhUTUxcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBlbS5xdWVyeVNlbGVjdG9yKCdzZWxlY3QnKT8ucXVlcnlTZWxlY3RvckFsbCgnb3B0aW9uJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvcHRpb24gb2Ygb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG9wdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbiAmJiBvcHRpb24uZ2V0QXR0cmlidXRlKCdzZWxlY3RlZCcpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9wdGlvbi5pbm5lckhUTUwudHJpbSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IG5hbWU6ICdwcm9kdWN0X29wdGlvbnMnLCBkYXRhOiB7IFtsYWJlbF06IHZhbHVlLnRyaW0oKSB9IH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5pbmxpbmUtdHdpc3Rlci1kaW0tdGl0bGUtdmFsdWUtdHJ1bmNhdGUtZXhwYW5kZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnc3Bhbi5hLXNpemUtYmFzZS5hLWNvbG9yLXNlY29uZGFyeScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnc3Bhbi5pbmxpbmUtdHdpc3Rlci1kaW0tdGl0bGUtdmFsdWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2Ryb3BfZG93bl9saXN0J1xuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICd1bCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnYnV0dG9uX2xpc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnbGkgc3Bhbjpub3QoLmFvay1oaWRkZW4pIGlucHV0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2Zyb21fdGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dF9qczogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHRFbSA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dCA9ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dEVtLmlubmVyVGV4dC50cmltKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSB0ZXh0RW0uaW5uZXJUZXh0LnRyaW0oKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWdDaGlsZCA9IHRleHRFbS5xdWVyeVNlbGVjdG9yKCdpbWcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1nQ2hpbGQgJiYgaW1nQ2hpbGQuYWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSAnICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IGltZ0NoaWxkLmFsdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWdDaGlsZCA9IHRleHRFbS5xdWVyeVNlbGVjdG9yKCdpbWcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1nQ2hpbGQgJiYgaW1nQ2hpbGQuYWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSBpbWdDaGlsZC5hbHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRleHQudHJpbSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5pbmxpbmUtdHdpc3Rlci1zaW5nbGV0b24taGVhZGVyJyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dF9zZWxlY3RvcjogJ3NwYW4uYS1zaXplLWJhc2UuYS1jb2xvci1zZWNvbmRhcnknLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZnJvbV90ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ3NwYW4uYS1zaXplLWJhc2UuYS1jb2xvci1zZWNvbmRhcnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnc3Bhbi5pbmxpbmUtdHdpc3Rlci1kaW0tdGl0bGUtdmFsdWUtdHJ1bmNhdGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlX21ldGFkYXRhOiAoZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsYWJlbCA9IGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAucXVlcnlTZWxlY3Rvcignc3Bhbi5hLXNpemUtYmFzZS5hLWNvbG9yLXNlY29uZGFyeScpXG4gICAgICAgICAgICAgICAgICAgICAgICA/LmlubmVySFRNTC5yZXBsYWNlKC9bOlxcbl0vZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAudHJpbSgpXG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBlbS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3NwYW4uaW5saW5lLXR3aXN0ZXItZGltLXRpdGxlLXZhbHVlLXRydW5jYXRlJ1xuICAgICAgICAgICAgICAgICAgICAgICk/LmlubmVySFRNTFxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IG5hbWU6ICdwcm9kdWN0X29wdGlvbnMnLCBkYXRhOiB7IFtsYWJlbF06IHZhbHVlLnRyaW0oKSB9IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOlxuICAgICAgICAgICAgICAgICAgJyNwcm9kdWN0RmFjdHNEZXNrdG9wRXhwYW5kZXIgdWwuYS11bm9yZGVyZWQtbGlzdCwgI2ZlYXR1cmVidWxsZXRzX2ZlYXR1cmVfZGl2IHVsLmEtdW5vcmRlcmVkLWxpc3QnLFxuICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdhYm91dF90aGlzX2l0ZW0nLFxuICAgICAgICAgICAgICAgIHRleHRfZm9ybWF0OiAnQWJvdXQgdGhpcyBpdGVtOiAnLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnbGknLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVfbWV0YWRhdGE6IChlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3Byb2R1Y3RfZGV0YWlscycsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICBidWxsZXRfbGlzdDogZW0/LmlubmVyVGV4dD8ucmVwbGFjZSgvXFxuL2csICcgJykgfHwgJydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6ICcjYnV5Ym94OmhhcyhkaXYuYS10YWItY29udGFpbmVyKTpub3QoOmhhcygjcGFydGlhbFN0YXRlX2J1eWJveF9kZXNrdG9wKSknLFxuICAgICAgICAgICAgbmFtZTogJ2J1eWJveCcsXG4gICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICcjdGFiX2hlYWRpbmdfZGVza3RvcF9idXlib3hfZ3JvdXBfMSBhJyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnZGVsaXZlcl90YWInLFxuICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICcjdGFiX2hlYWRpbmdfZGVza3RvcF9idXlib3hfZ3JvdXBfMiBhJyxcbiAgICAgICAgICAgICAgICBuYW1lOiAncGlja191cF90YWInLFxuICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICcjdGFiX2Rlc2t0b3BfYnV5Ym94X2dyb3VwXzEnLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdkZWxpdmVyeScsXG4gICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgdGV4dF9mb3JtYXQ6ICdEZWxpdmVyeScsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtidXlfYm94X3dpdGhfYWNjb3JkaW9uLCBidXlfYm94X3dpdGhvdXRfYWNjb3JkaW9uX2RlbGl2ZXJ5XVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICcjdGFiX2Rlc2t0b3BfYnV5Ym94X2dyb3VwXzInLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdwaWNrX3VwJyxcbiAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0X2Zvcm1hdDogJ1BpY2sgVXAnLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbYnV5X2JveF93aXRob3V0X2FjY29yZGlvbl9waWNrX3VwXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZ2VuZXJhdGVfbWV0YWRhdGE6IChlbSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBhc2luRW0gPSBlbS5xdWVyeVNlbGVjdG9yKCdpbnB1dCNBU0lOJylcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAncHJvZHVjdF9kZXRhaWxzJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB7IGFzaW46IGFzaW5FbT8udmFsdWUgfHwgJycgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjpcbiAgICAgICAgICAgICAgJyNidXlib3g6bm90KDpoYXMoZGl2LmEtdGFiLWNvbnRhaW5lcikpOm5vdCg6aGFzKCNwYXJ0aWFsU3RhdGVfYnV5Ym94X2Rlc2t0b3ApKScsXG4gICAgICAgICAgICBuYW1lOiAnYnV5Ym94JyxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbYnV5X2JveF93aXRoX2FjY29yZGlvbiwgYnV5X2JveF93aXRob3V0X2FjY29yZGlvbl9kZWxpdmVyeV0sXG4gICAgICAgICAgICBnZW5lcmF0ZV9tZXRhZGF0YTogKGVtKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGFzaW5FbSA9IGVtLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0I0FTSU4nKVxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdwcm9kdWN0X2RldGFpbHMnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHsgYXNpbjogYXNpbkVtPy52YWx1ZSB8fCAnJyB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnI3BhcnRpYWxTdGF0ZV9idXlib3hfZGVza3RvcCcsXG4gICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICcjcGFydGlhbFN0YXRlQnV5Ym94IGRpdi5hLXNlY3Rpb24uYS10ZXh0LWNlbnRlci5hLXNwYWNpbmctc21hbGwnLFxuICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBnZW5lcmF0ZV9tZXRhZGF0YTogKGVtKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGFzaW5FbSA9IGVtLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0I0FTSU4nKVxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdwcm9kdWN0X2RldGFpbHMnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHsgYXNpbjogYXNpbkVtPy52YWx1ZSB8fCAnJyB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnI2F0dGFjaC13YXJyYW50eS1wYW5lICNhdHRhY2gtd2FycmFudHktZGlzcGxheScsXG4gICAgICAgICAgICBuYW1lOiAnd2FycmFudHktYm94JyxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5hdHRhY2gtd2FycmFudHktYm94JyxcbiAgICAgICAgICAgICAgICB0ZXh0X3NlbGVjdG9yOiAnI2F0dGFjaC13YXJyYW50eS1jYXJkLWRpc3BsYXktdGl0bGUnLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdmcm9tX3RleHQnLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnaS5hLWljb24tY2hlY2tib3gnLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJyNhdHRhY2gtd2FycmFudHktY2FyZC1kaXNwbGF5LXRpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWVcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnI2F0dGFjaC13YXJyYW50eS1jYXJkLXByaWNlJyxcbiAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWVcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2Rpdi5hLXNlY3Rpb24uYXR0YWNoLXdhcnJhbnR5LWJ1dHRvbi1yb3cnLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBcImlucHV0W2FyaWEtbGFiZWxsZWRieT0nYXR0YWNoU2lBZGRDb3ZlcmFnZS1hbm5vdW5jZSddXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdhZGRfcHJvdGVjdGlvbicsXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHRleHRfZm9ybWF0OiAnQWRkIFByb3RlY3Rpb24nXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogXCJpbnB1dFthcmlhLWxhYmVsbGVkYnk9J2F0dGFjaFNpTm9Db3ZlcmFnZS1hbm5vdW5jZSddXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdub19wcm90ZWN0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdGV4dF9mb3JtYXQ6ICdObyBUaGFua3MnXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgbWF0Y2g6ICcvY2FydC9hZGQtdG8tY2FydCcsXG4gICAgbWF0Y2hfbWV0aG9kOiAndXJsJyxcbiAgICBzZWxlY3RvcjogJ2h0bWwnLFxuICAgIG1hdGNoX3dpdGhfcmVmOiB0cnVlLFxuICAgIGNoaWxkcmVuOiBbXG4gICAgICB7XG4gICAgICAgIHNlbGVjdG9yOiAnaGVhZCcsXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6ICd0aXRsZScsXG4gICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc2VsZWN0b3I6ICdib2R5JyxcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICBuYXYsXG4gICAgICAgICAgY2FydF9zaWRlX2JhcixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjogJyNzdy1hdGMtYnV5LWJveCcsXG4gICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICcjc3ctc3VidG90YWwnLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnI3N3LXN1YnRvdGFsLWl0ZW0tY291bnQnLFxuICAgICAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6IFwic3BhblthcmlhLWhpZGRlbj0ndHJ1ZSddXCIsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICcjc2MtYnV5LWJveC1wdGMtYnV0dG9uIHNwYW4uYS1idXR0b24taW5uZXIgaW5wdXQnLFxuICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHRleHRfc2VsZWN0b3I6ICdkaXYuc2Mtd2l0aG91dC1tdWx0aWNhcnQnLFxuICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnY2hlY2tfb3V0JyxcbiAgICAgICAgICAgICAgICBmZXRjaF91cmw6ICcvY2FydCdcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnI3N3LWd0YyBhJyxcbiAgICAgICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2dvX3RvX2NhcnQnXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBtYXRjaDogJy9jYXJ0L3NtYXJ0LXdhZ29uJyxcbiAgICBtYXRjaF9tZXRob2Q6ICd1cmwnLFxuICAgIHNlbGVjdG9yOiAnaHRtbCcsXG4gICAgY2hpbGRyZW46IFtcbiAgICAgIHtcbiAgICAgICAgc2VsZWN0b3I6ICdoZWFkJyxcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjogJ3RpdGxlJyxcbiAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzZWxlY3RvcjogJ2JvZHknLFxuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgIG5hdixcbiAgICAgICAgICBjYXJ0X3NpZGVfYmFyLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnI3N3LWF0Yy1idXktYm94JyxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJyNzdy1zdWJ0b3RhbCcsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICcjc3ctc3VidG90YWwtaXRlbS1jb3VudCcsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogXCJzcGFuW2FyaWEtaGlkZGVuPSd0cnVlJ11cIixcbiAgICAgICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWVcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJyNzYy1idXktYm94LXB0Yy1idXR0b24gc3Bhbi5hLWJ1dHRvbi1pbm5lciBpbnB1dCcsXG4gICAgICAgICAgICAgICAgYWRkX3RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgdGV4dF9zZWxlY3RvcjogJ2Rpdi5zYy13aXRob3V0LW11bHRpY2FydCcsXG4gICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdjaGVja19vdXQnLFxuICAgICAgICAgICAgICAgIGZldGNoX3VybDogJy9jYXJ0J1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICcjc3ctZ3RjIGEnLFxuICAgICAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnZ29fdG9fY2FydCdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIG1hdGNoOiAnL2dwL2NhcnQvdmlldy5odG1sJyxcbiAgICBtYXRjaF9tZXRob2Q6ICd1cmwnLFxuICAgIHNlbGVjdG9yOiAnaHRtbCcsXG4gICAgY2hpbGRyZW46IFtcbiAgICAgIHtcbiAgICAgICAgc2VsZWN0b3I6ICdoZWFkJyxcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjogJ3RpdGxlJyxcbiAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzZWxlY3RvcjogJ2JvZHknLFxuICAgICAgICBjaGlsZHJlbjogY2FydFxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIG1hdGNoOiAnL2NhcnQnLFxuICAgIG1hdGNoX21ldGhvZDogJ3VybCcsXG4gICAgbWF0Y2hfd2l0aF9yZWY6IHRydWUsXG4gICAgc2VsZWN0b3I6ICdodG1sJyxcbiAgICBjaGlsZHJlbjogW1xuICAgICAge1xuICAgICAgICBzZWxlY3RvcjogJ2hlYWQnLFxuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiAndGl0bGUnLFxuICAgICAgICAgICAgYWRkX3RleHQ6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHNlbGVjdG9yOiAnYm9keScsXG4gICAgICAgIGNoaWxkcmVuOiBjYXJ0XG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgbWF0Y2g6ICcvY2FydC9sb2NhbG1hcmtldCcsXG4gICAgbWF0Y2hfbWV0aG9kOiAndXJsJyxcbiAgICBtYXRjaF93aXRoX3JlZjogdHJ1ZSxcbiAgICBzZWxlY3RvcjogJ2h0bWwnLFxuICAgIGNoaWxkcmVuOiBbXG4gICAgICB7XG4gICAgICAgIHNlbGVjdG9yOiAnaGVhZCcsXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6ICd0aXRsZScsXG4gICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc2VsZWN0b3I6ICdib2R5JyxcbiAgICAgICAgY2hpbGRyZW46IGZyZXNoX2NhcnRcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBtYXRjaDogJy9hbG0vYnlnJyxcbiAgICBtYXRjaF9tZXRob2Q6ICd1cmwnLFxuICAgIHNlbGVjdG9yOiAnaHRtbCcsXG4gICAgY2hpbGRyZW46IFtcbiAgICAgIHtcbiAgICAgICAgc2VsZWN0b3I6ICdoZWFkJyxcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjogJ3RpdGxlJyxcbiAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzZWxlY3RvcjogJ2JvZHknLFxuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnYVtuYW1lPVwicHJvY2VlZFRvQ2hlY2tvdXRcIl0nLFxuICAgICAgICAgICAgbmFtZTogJ2NoZWNrX291dCcsXG4gICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZnJlc2hfY2Fyb3VzZWxfY2FyZFxuICAgICAgICBdXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgbWF0Y2g6ICcvYWxtL3N1YnN0aXR1dGlvbicsXG4gICAgbWF0Y2hfbWV0aG9kOiAndXJsJyxcbiAgICBzZWxlY3RvcjogJ2h0bWwnLFxuICAgIGNoaWxkcmVuOiBbXG4gICAgICB7XG4gICAgICAgIHNlbGVjdG9yOiAnaGVhZCcsXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2VsZWN0b3I6ICd0aXRsZScsXG4gICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc2VsZWN0b3I6ICdib2R5JyxcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjogJyNzdWJzQ29udGludWVCdXR0b24gaW5wdXQnLFxuICAgICAgICAgICAgbmFtZTogJ2NoZWNrX291dCcsXG4gICAgICAgICAgICBhZGRfdGV4dDogdHJ1ZSxcbiAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHRleHRfZm9ybWF0OiAnQ29udGludWUnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmcmVzaF9zdWJzdGl0dXRpb25fY2FyZFxuICAgICAgICBdXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgbWF0Y2g6ICcvYXAvc2lnbmluJyxcbiAgICBtYXRjaF9tZXRob2Q6ICd1cmwnLFxuICAgIHRlcm1pbmF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICEhYXJndW1lbnRzWzBdXG4gICAgfSxcbiAgICB0ZXJtaW5hdGVfY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHNbMF1cbiAgICB9LFxuICAgIHNlbGVjdG9yOiAnaHRtbCdcbiAgfSxcbiAge1xuICAgIG1hdGNoOiAnL2dwL2J1eS9zcGMvaGFuZGxlcnMvZGlzcGxheS5odG1sJyxcbiAgICBtYXRjaF9tZXRob2Q6ICd1cmwnLFxuICAgIHRlcm1pbmF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICEhYXJndW1lbnRzWzBdXG4gICAgfSxcbiAgICB0ZXJtaW5hdGVfY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHNbMF1cbiAgICB9LFxuICAgIHNlbGVjdG9yOiAnaHRtbCdcbiAgfSxcbiAge1xuICAgIG1hdGNoOiAnL2dwL2J1eWFnYWluJyxcbiAgICBtYXRjaF9tZXRob2Q6ICd1cmwnLFxuICAgIG1hdGNoX3dpdGhfcmVmOiB0cnVlLFxuICAgIHNlbGVjdG9yOiAnaHRtbCcsXG4gICAgY2hpbGRyZW46IFtcbiAgICAgIHtcbiAgICAgICAgc2VsZWN0b3I6ICdoZWFkJyxcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZWxlY3RvcjogJ3RpdGxlJyxcbiAgICAgICAgICAgIGFkZF90ZXh0OiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzZWxlY3RvcjogJ2JvZHknLFxuICAgICAgICBjaGlsZHJlbjogYnV5X2FnYWluXG4gICAgICB9XG4gICAgXVxuICB9XG5dXG4iLCJkZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIGNsaWNrYWJsZV9yZWNpcGVzOiBhbnlcbiAgICBpbnB1dF9yZWNpcGVzOiBhbnlcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0VsZW1lbnQoZWxlbWVudDogYW55LCByZWNpcGU6IGFueSwgcGFyZW50TmFtZSA9ICcnLCBudGhDaGlsZCA9IDAsIGRvY3VtZW50PWdsb2JhbFRoaXMuZG9jdW1lbnQsIHdpbmRvdz1nbG9iYWxUaGlzLndpbmRvdykge1xuICAvLyBjb25zb2xlLmxvZyhcInByb2Nlc3NpbmcgZWxlbWVudDogXCIsIGVsZW1lbnQsIHJlY2lwZSk7XG4gIC8vIENyZWF0ZSBhIG5ldyBlbGVtZW50IHVzaW5nIHRoZSBET00gQVBJXG4gIGxldCB0YWdOYW1lID0gcmVjaXBlLnRhZ19uYW1lIHx8IGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpXG4gIC8vIEhhbmRsZSB1bmRlcnNjb3JlZCB0YWdzXG4gIGlmICh0YWdOYW1lLmVuZHNXaXRoKCdfJykpIHtcbiAgICB0YWdOYW1lID0gdGFnTmFtZS5zbGljZSgwLCAtMSlcbiAgfVxuICBjb25zdCBuZXdFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKVxuXG4gIC8vIEV4dHJhY3QgdGV4dCBjb250ZW50IGJhc2VkIG9uIHRoZSByZWNpcGVcbiAgbGV0IGVsZW1lbnRUZXh0ID0gJydcbiAgaWYgKHJlY2lwZS50ZXh0X3NlbGVjdG9yKSB7XG4gICAgY29uc3QgdGV4dEVsZW1lbnQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IocmVjaXBlLnRleHRfc2VsZWN0b3IpXG4gICAgaWYgKHRleHRFbGVtZW50KSB7XG4gICAgICBlbGVtZW50VGV4dCA9IHRleHRFbGVtZW50LmlubmVyVGV4dCB8fCB0ZXh0RWxlbWVudC50ZXh0Q29udGVudCB8fCAnJ1xuICAgIH1cbiAgfSBlbHNlIGlmIChyZWNpcGUudGV4dF9qcykge1xuICAgIGVsZW1lbnRUZXh0ID0gcmVjaXBlLnRleHRfanMoZWxlbWVudClcbiAgICBpZiAoZWxlbWVudFRleHQgPT09ICcnIHx8IGVsZW1lbnRUZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd0ZXh0IGpzIGRvZXMgbm90IGRldGVjdCB0ZXh0IGZvciBlbGVtZW50ICcsIGVsZW1lbnQpXG4gICAgfVxuICB9IGVsc2UgaWYgKHJlY2lwZS5hZGRfdGV4dCkge1xuICAgIGVsZW1lbnRUZXh0ID0gZWxlbWVudC5pbm5lclRleHQgfHwgZWxlbWVudC50ZXh0Q29udGVudCB8fCAnJ1xuICB9XG4gIGVsZW1lbnRUZXh0ID0gZWxlbWVudFRleHQucmVwbGFjZSgvXFxzKy9nLCAnICcpLnRyaW0oKVxuICBpZiAocmVjaXBlLnRleHRfZm9ybWF0KSB7XG4gICAgZWxlbWVudFRleHQgPSByZWNpcGUudGV4dF9mb3JtYXQucmVwbGFjZSgne30nLCBlbGVtZW50VGV4dClcbiAgfSBlbHNlIGlmIChyZWNpcGUudGV4dF9mb3JtYXQpIHtcbiAgICBlbGVtZW50VGV4dCA9IHJlY2lwZS50ZXh0X2Zvcm1hdFxuICB9XG5cbiAgaWYgKGVsZW1lbnRUZXh0ICYmIHJlY2lwZS5hZGRfdGV4dCkge1xuICAgIG5ld0VsZW1lbnQudGV4dENvbnRlbnQgPSBlbGVtZW50VGV4dFxuICB9XG5cbiAgLy8gQnVpbGQgdGhlIG5vZGUgYXR0cmlidXRlc1xuICBsZXQgZWxlbWVudE5hbWUgPSAnJ1xuICBpZiAocmVjaXBlLm5hbWUpIHtcbiAgICBpZiAocmVjaXBlLm5hbWUgPT09ICdmcm9tX3RleHQnKSB7XG4gICAgICBpZiAoIWVsZW1lbnRUZXh0KSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdlbGVtZW50VGV4dCBpcyBlbXB0eScsIHJlY2lwZSwgZWxlbWVudClcbiAgICAgICAgLy8gZGVidWdnZXJcbiAgICAgIH1cbiAgICAgIGVsZW1lbnROYW1lID0gcGFyZW50TmFtZSA/IHBhcmVudE5hbWUgKyAnLicgOiAnJ1xuICAgICAgaWYgKCFlbGVtZW50VGV4dCkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImVsZW1lbnQgdGV4dCBub3QgZm91bmRcIik7XG4gICAgICAgIGVsZW1lbnROYW1lID0gJydcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnROYW1lICs9IGVsZW1lbnRUZXh0LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW15cXHddKy9nLCAnXycpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChyZWNpcGUubmFtZSA9PT0gJ2Zyb21fbnRoX2NoaWxkJykge1xuICAgICAgZWxlbWVudE5hbWUgPSBwYXJlbnROYW1lID8gcGFyZW50TmFtZSArICcuJyA6ICcnXG4gICAgICBlbGVtZW50TmFtZSArPSBudGhDaGlsZC50b1N0cmluZygpXG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnROYW1lID0gcGFyZW50TmFtZSA/IHBhcmVudE5hbWUgKyAnLicgOiAnJ1xuICAgICAgZWxlbWVudE5hbWUgKz0gcmVjaXBlLm5hbWVcbiAgICB9XG4gICAgbmV3RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ25hbWUnLCBlbGVtZW50TmFtZSlcbiAgICBwYXJlbnROYW1lID0gZWxlbWVudE5hbWVcbiAgfVxuXG4gIGlmIChyZWNpcGUuZ2VuZXJhdGVfbWV0YWRhdGEpIHtcbiAgICBjb25zdCBtZXRhb2JqID0gcmVjaXBlLmdlbmVyYXRlX21ldGFkYXRhKGVsZW1lbnQpXG4gICAgY29uc3QgbWV0YWRhdGEgPSBKU09OLnN0cmluZ2lmeShtZXRhb2JqLmRhdGEpXG4gICAgY29uc3QgbWV0YW5hbWUgPSBtZXRhb2JqLm5hbWVcblxuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWVsZW1lbnQtbWV0YS1uYW1lJywgbWV0YW5hbWUpXG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZWxlbWVudC1tZXRhLWRhdGEnLCBtZXRhZGF0YSlcbiAgICAvLyBjb25zb2xlLmxvZygnbWV0YWRhdGEgZ2VuZXJhdGVkOiAnLCBtZXRhZGF0YSwgJyB3aXRoIG5hbWU6ICcsIG1ldGFuYW1lKVxuICB9XG5cbiAgLy8gSGFuZGxlIGNsaWNrYWJsZXMgYW5kIGlucHV0c1xuICBpZiAocmVjaXBlLmNsaWNrYWJsZSkge1xuICAgIGlmICghcmVjaXBlLm5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY2xpY2thYmxlIGVsZW1lbnQgbXVzdCBoYXZlIGEgbmFtZScpXG4gICAgfVxuICAgIC8vIGhhbmRsZSBjbGlja19zZWxlY3RvclxuICAgIGxldCBjbGlja19lbGVtZW50OiBFbGVtZW50IHwgbnVsbFxuICAgIGlmIChyZWNpcGUuY2xpY2tfc2VsZWN0b3IpIHtcbiAgICAgIGNsaWNrX2VsZW1lbnQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IocmVjaXBlLmNsaWNrX3NlbGVjdG9yKVxuICAgIH0gZWxzZSB7XG4gICAgICBjbGlja19lbGVtZW50ID0gZWxlbWVudFxuICAgIH1cbiAgICBpZiAoY2xpY2tfZWxlbWVudCkge1xuICAgICAgY2xpY2tfZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtY2xpY2thYmxlLWlkJywgZWxlbWVudE5hbWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdjbGljay1lbGVtZW50IG5vdCBmb3VuZCcsIGVsZW1lbnQsIHJlY2lwZSlcbiAgICB9XG4gICAgaWYgKCF3aW5kb3cuY2xpY2thYmxlX3JlY2lwZXMpIHtcbiAgICAgIHdpbmRvdy5jbGlja2FibGVfcmVjaXBlcyA9IHt9XG4gICAgfVxuICAgIHdpbmRvdy5jbGlja2FibGVfcmVjaXBlc1tlbGVtZW50TmFtZV0gPSByZWNpcGVcbiAgfVxuXG4gIGlmIChyZWNpcGUuZmV0Y2hfdXJsKSB7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZmV0Y2gtdXJsJywgcmVjaXBlLmZldGNoX3VybClcbiAgfVxuXG4gIGlmICh0YWdOYW1lID09PSAnaW5wdXQnKSB7XG4gICAgY29uc3QgaW5wdXRUeXBlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKVxuICAgIGlmIChbJ3RleHQnLCAnbnVtYmVyJ10uaW5jbHVkZXMoaW5wdXRUeXBlKSkge1xuICAgICAgbmV3RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgZWxlbWVudC52YWx1ZSlcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWlucHV0LWlkJywgZWxlbWVudE5hbWUpXG4gICAgfSBlbHNlIGlmIChpbnB1dFR5cGUgPT09ICdjaGVja2JveCcpIHtcbiAgICAgIG5ld0VsZW1lbnQuc2V0QXR0cmlidXRlKCdjaGVja2VkJywgZWxlbWVudC5jaGVja2VkLnRvU3RyaW5nKCkpXG4gICAgfSBlbHNlIGlmIChpbnB1dFR5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgIG5ld0VsZW1lbnQuc2V0QXR0cmlidXRlKCdjaGVja2VkJywgZWxlbWVudC5jaGVja2VkLnRvU3RyaW5nKCkpXG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1jbGlja2FibGUtaWQnLCBlbGVtZW50TmFtZSlcbiAgICB9XG4gICAgaWYgKCF3aW5kb3cuaW5wdXRfcmVjaXBlcykge1xuICAgICAgd2luZG93LmlucHV0X3JlY2lwZXMgPSB7fVxuICAgIH1cbiAgICB3aW5kb3cuaW5wdXRfcmVjaXBlc1tlbGVtZW50TmFtZV0gPSByZWNpcGVcbiAgfVxuICAvLyAqKkhhbmRsZSBzZWxlY3QgZWxlbWVudHMqKlxuICBpZiAodGFnTmFtZSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAvLyBUYWcgdGhlIHNlbGVjdCBlbGVtZW50IHdpdGggZGF0YS1zZWxlY3QtaWRcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1zZWxlY3QtaWQnLCBlbGVtZW50TmFtZSlcblxuICAgIGNvbnN0IHNlbGVjdElkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2lkJylcblxuICAgIGNvbnN0IG5hbWVJZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCduYW1lJylcblxuICAgIGNvbnN0IHRhZyA9IGVsZW1lbnQucGFyZW50RWxlbWVudD8ucXVlcnlTZWxlY3Rvcignc3Bhbi5hLWJ1dHRvbi1kcm9wZG93biBzcGFuLmEtYnV0dG9uLXRleHQnKVxuICAgIGNvbnN0IG5ld1RhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKVxuICAgIG5ld1RhZy50ZXh0Q29udGVudCA9IHRhZy50ZXh0Q29udGVudFxuICAgIGNvbnN0IHRhZ05hbWUgPSBlbGVtZW50TmFtZSArICcub3Blbl9kcm9wX2Rvd25fbGlzdCdcbiAgICBuZXdUYWcuc2V0QXR0cmlidXRlKCduYW1lJywgdGFnTmFtZSlcbiAgICB0YWcuc2V0QXR0cmlidXRlKCdkYXRhLWNsaWNrYWJsZS1pZCcsIHRhZ05hbWUpIC8vIFRhZyBhY3R1YWwgRE9NIG9wdGlvbiBlbGVtZW50XG5cbiAgICBuZXdFbGVtZW50LmFwcGVuZENoaWxkKG5ld1RhZylcblxuICAgIGNvbnN0IG9wdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhW2lkXj1cIicgKyBzZWxlY3RJZCArICdcIl0nKVxuICAgIG9wdGlvbnMuZm9yRWFjaChhc3luYyAob3B0aW9uKSA9PiB7XG4gICAgICBjb25zdCBvcHRpb25WYWx1ZSA9IG9wdGlvbi50ZXh0Q29udGVudC50cmltKCkgfHwgb3B0aW9uLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykudmFsdWVcbiAgICAgIGNvbnN0IG9wdGlvbk5hbWUgPSBlbGVtZW50TmFtZSArICcuJyArIG9wdGlvblZhbHVlXG4gICAgICBjb25zdCBuZXdPcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJylcbiAgICAgIG5ld09wdGlvbi50ZXh0Q29udGVudCA9IG9wdGlvbi50ZXh0Q29udGVudFxuICAgICAgbmV3T3B0aW9uLnNldEF0dHJpYnV0ZSgndmFsdWUnLCBvcHRpb25WYWx1ZSlcbiAgICAgIG5ld09wdGlvbi5zZXRBdHRyaWJ1dGUoJ25hbWUnLCBvcHRpb25OYW1lKVxuICAgICAgbmV3T3B0aW9uLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCBvcHRpb24uZ2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJykpXG4gICAgICBvcHRpb24uc2V0QXR0cmlidXRlKCdkYXRhLWNsaWNrYWJsZS1pZCcsIG9wdGlvbk5hbWUpIC8vIFRhZyBhY3R1YWwgRE9NIG9wdGlvbiBlbGVtZW50XG4gICAgICBuZXdFbGVtZW50LmFwcGVuZENoaWxkKG5ld09wdGlvbilcbiAgICB9KVxuICB9XG4gIC8vIENvcHkgc3BlY2lmaWVkIGF0dHJpYnV0ZXNcbiAgY29uc3QgYXR0cnNUb0NvcHkgPSBbXG4gICAgJ2FsdCcsXG4gICAgJ3RpdGxlJyxcbiAgICAndHlwZScsXG4gICAgJ3ZhbHVlJyxcbiAgICAncm9sZScsXG4gICAgJ2FyaWEtbGFiZWwnLFxuICAgICdhcmlhLWhpZGRlbicsXG4gICAgJ2FyaWEtc2VsZWN0ZWQnXG4gIF1cbiAgYXR0cnNUb0NvcHkuZm9yRWFjaCgoYXR0cikgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cilcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIG5ld0VsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHIsIHZhbHVlKVxuICAgIH1cbiAgfSlcbiAgaWYgKHJlY2lwZS5rZWVwX2F0dHIpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhcImF0dHJpYnV0ZXMgdG8ga2VlcDogXCIsIHJlY2lwZS5rZWVwX2F0dHIpO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIHJlY2lwZS5rZWVwX2F0dHIpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoa2V5KVxuICAgICAgLy8gY29uc29sZS5sb2coa2V5LCB2YWx1ZSlcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBuZXdFbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAocmVjaXBlWydjbGFzcyddKSB7XG4gICAgbmV3RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgcmVjaXBlWydjbGFzcyddKVxuICB9XG4gIGlmIChyZWNpcGVbJ2lkJ10pIHtcbiAgICBuZXdFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCByZWNpcGVbJ2lkJ10pXG4gIH1cblxuICAvLyBPdmVycmlkZSBhdHRyaWJ1dGVzIGlmIHNwZWNpZmllZFxuICBpZiAocmVjaXBlLm92ZXJyaWRlX2F0dHIpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiByZWNpcGUub3ZlcnJpZGVfYXR0cikge1xuICAgICAgbmV3RWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCByZWNpcGUub3ZlcnJpZGVfYXR0cltrZXldKGVsZW1lbnQpKVxuICAgIH1cbiAgfVxuXG4gIC8vIFByb2Nlc3MgY2hpbGRyZW5cbiAgaWYgKHJlY2lwZS5jaGlsZHJlbiAmJiByZWNpcGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgIGZvciAoY29uc3QgY2hpbGRSZWNpcGUgb2YgcmVjaXBlLmNoaWxkcmVuKSB7XG4gICAgICBjb25zdCBzZWxlY3RvciA9IGNoaWxkUmVjaXBlLmRpcmVjdF9jaGlsZFxuICAgICAgICA/IGA6c2NvcGUgPiAke2NoaWxkUmVjaXBlLnNlbGVjdG9yfWBcbiAgICAgICAgOiBjaGlsZFJlY2lwZS5zZWxlY3RvclxuICAgICAgbGV0IGNoaWxkRWxlbWVudHNcbiAgICAgIGlmIChjaGlsZFJlY2lwZS51c2Vfcm9vdCkge1xuICAgICAgICBjaGlsZEVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcilcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3VzZSByb290IGZvciAnLCBjaGlsZEVsZW1lbnRzKVxuICAgICAgfSBlbHNlIGNoaWxkRWxlbWVudHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpXG4gICAgICBjaGlsZEVsZW1lbnRzLmZvckVhY2goKGNoaWxkRWxlbWVudDogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IHByb2Nlc3NFbGVtZW50KGNoaWxkRWxlbWVudCwgY2hpbGRSZWNpcGUsIHBhcmVudE5hbWUsIGluZGV4LCBkb2N1bWVudCwgd2luZG93KVxuICAgICAgICBuZXdFbGVtZW50LmFwcGVuZENoaWxkKGNoaWxkTm9kZSlcbiAgICAgICAgaWYgKGNoaWxkUmVjaXBlLmluc2VydF9zcGxpdF9tYXJrZXIpIHtcbiAgICAgICAgICBjb25zdCBldmVyeSA9IGNoaWxkUmVjaXBlLmluc2VydF9zcGxpdF9tYXJrZXJfZXZlcnkgfHwgMVxuICAgICAgICAgIGlmIChpbmRleCAlIGV2ZXJ5ID09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHNwbGl0TWFya2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BsaXQtbWFya2VyJylcbiAgICAgICAgICAgIG5ld0VsZW1lbnQuYXBwZW5kQ2hpbGQoc3BsaXRNYXJrZXIpXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImluc2VydGluZyBzcGxpdCBtYXJrZXIgMVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkUmVjaXBlLmluc2VydF9zcGxpdF9tYXJrZXIpIHtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImluc2VydGluZyBzcGxpdCBtYXJrZXIgMlwiKTtcbiAgICAgICAgICBjb25zdCBzcGxpdE1hcmtlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwbGl0LW1hcmtlcicpXG4gICAgICAgICAgbmV3RWxlbWVudC5hcHBlbmRDaGlsZChzcGxpdE1hcmtlcilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnbm8gc3BsaXQgbWFya2VyJylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICAvLyBIYW5kbGUgZW1wdHkgbWVzc2FnZXNcbiAgaWYgKHJlY2lwZS5lbXB0eV9tZXNzYWdlICYmIG5ld0VsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgY29uc3QgZW1wdHlUZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJlY2lwZS5lbXB0eV9tZXNzYWdlKVxuICAgIG5ld0VsZW1lbnQuYXBwZW5kQ2hpbGQoZW1wdHlUZXh0Tm9kZSlcbiAgfVxuXG4gIHJldHVybiBuZXdFbGVtZW50XG59XG4iLCJpbXBvcnQgeyBzdGFydHNXaXRoIH0gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0IHsgZmlsdGVyX3VybCwgdXJsX2luY2x1ZGVzLCBjaGVja191c2VyX2lkX3VybCB9IGZyb20gJy4uL2NvbmZpZydcblxuZXhwb3J0IGZ1bmN0aW9uIGlzRnJvbVBvcHVwKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XG4gIHJldHVybiBlbGVtZW50LmNsb3Nlc3QoJyNyZWFzb24tbW9kYWwnKSAhPT0gbnVsbFxufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZV9pY29uKHVybCkge1xuICBjb25zb2xlLmxvZygndXBkYXRlX2ljb24nLCB1cmwpXG4gIGlmICghKGF3YWl0IHNob3VsZEV4Y2x1ZGUodXJsKSkpIHtcbiAgICBjb25zb2xlLmxvZygnYWN0aXZlIGljb24nKVxuICAgIGNocm9tZS5hY3Rpb24uc2V0SWNvbih7XG4gICAgICBwYXRoOiAnLi4vaWNvbi5wbmcnXG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZygnaW5hY3RpdmUgaWNvbicpXG4gICAgY2hyb21lLmFjdGlvbi5zZXRJY29uKHtcbiAgICAgIHBhdGg6ICcuLi9pbmFjdGl2ZV9pY29uLnBuZydcbiAgICB9KVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kUGFnZU1ldGEocm9vdCA9IG51bGwsIGRvY3VtZW50PWdsb2JhbFRoaXMuZG9jdW1lbnQpIHtcbiAgbGV0IGFsbF9lbGVtZW50X3dpdGhfbWV0YV9kYXRhXG4gIGlmIChyb290KSB7XG4gICAgYWxsX2VsZW1lbnRfd2l0aF9tZXRhX2RhdGEgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWVsZW1lbnQtbWV0YS1uYW1lXScpXG4gIH0gZWxzZSB7XG4gICAgYWxsX2VsZW1lbnRfd2l0aF9tZXRhX2RhdGEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1lbGVtZW50LW1ldGEtbmFtZV0nKVxuICB9XG5cbiAgY29uc3QgZ3JvdXBlZFJlc3VsdCA9IHt9XG5cbiAgYWxsX2VsZW1lbnRfd2l0aF9tZXRhX2RhdGEuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgIGNvbnN0IG1ldGFOYW1lID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZWxlbWVudC1tZXRhLW5hbWUnKVxuICAgIGNvbnN0IG1ldGFEYXRhID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZWxlbWVudC1tZXRhLWRhdGEnKVxuXG4gICAgaWYgKCFncm91cGVkUmVzdWx0W21ldGFOYW1lXSkge1xuICAgICAgZ3JvdXBlZFJlc3VsdFttZXRhTmFtZV0gPSBbXVxuICAgIH1cbiAgICBncm91cGVkUmVzdWx0W21ldGFOYW1lXS5wdXNoKEpTT04ucGFyc2UobWV0YURhdGEpKVxuICB9KVxuXG4gIHJldHVybiBncm91cGVkUmVzdWx0XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDbGlja2FibGVFbGVtZW50c0luVmlld3BvcnQoKSB7XG4gIC8vIFNlbGVjdCBhbGwgcG90ZW50aWFsIGNsaWNrYWJsZSBlbGVtZW50c1xuICBjb25zdCBkb2N1bWVudENvcHkgPSBkb2N1bWVudC5jbG9uZU5vZGUodHJ1ZSkgYXMgRG9jdW1lbnRcbiAgY29uc3QgYWxsRWxlbWVudHMgPSBkb2N1bWVudENvcHkucXVlcnlTZWxlY3RvckFsbChcbiAgICAnYSwgYnV0dG9uLCBbb25jbGlja10sIGlucHV0W3R5cGU9XCJidXR0b25cIl0sIGlucHV0W3R5cGU9XCJzdWJtaXRcIl0nXG4gIClcblxuICAvLyBDaGVjayBpZiBlYWNoIGVsZW1lbnQgaXMgaW4gdGhlIHZpZXdwb3J0IGFuZCBhZGQgbWFya2VyXG4gIGFsbEVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIGlmIChcbiAgICAgIHJlY3QudG9wID49IDAgJiZcbiAgICAgIHJlY3QubGVmdCA+PSAwICYmXG4gICAgICByZWN0LmJvdHRvbSA8PSAod2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQpICYmXG4gICAgICByZWN0LnJpZ2h0IDw9ICh3aW5kb3cuaW5uZXJXaWR0aCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgpXG4gICAgKSB7XG4gICAgICAvLyBBZGQgbWFya2VyIGF0dHJpYnV0ZSB0byB0aGUgZWxlbWVudFxuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3Zpc2libGUtY2xpY2thYmxlLWVsZW1lbnQtbWFya2VyJywgJ3RydWUnKVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIGRvY3VtZW50Q29weVxufVxuXG5leHBvcnQgZnVuY3Rpb24gTWFya1ZpZXdhYmxlRWxlbWVudHMoKSB7XG4gIC8vIENyZWF0ZSBhIGNvcHkgb2YgdGhlIGRvY3VtZW50XG5cbiAgLy8gU2VsZWN0IGFsbCBlbGVtZW50c1xuICBjb25zdCBhbGxFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgJ2EsIGJ1dHRvbiwgW29uY2xpY2tdLCBpbnB1dFt0eXBlPVwiYnV0dG9uXCJdLCBpbnB1dFt0eXBlPVwic3VibWl0XCJdJ1xuICApXG4gIC8vIENoZWNrIGlmIGVhY2ggZWxlbWVudCBpcyBpbiB0aGUgdmlld3BvcnQgYW5kIGFkZCBtYXJrZXJcbiAgYWxsRWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgIGNvbnN0IHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgY29uc3QgaW5WaWV3cG9ydCA9XG4gICAgICByZWN0LnRvcCA+PSAwICYmXG4gICAgICByZWN0LmxlZnQgPj0gMCAmJlxuICAgICAgcmVjdC5ib3R0b20gPD0gKHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSAmJlxuICAgICAgcmVjdC5yaWdodCA8PSAod2luZG93LmlubmVyV2lkdGggfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKVxuICAgIC8vIEFkZCBtYXJrZXIgYXR0cmlidXRlIHRvIHRoZSBlbGVtZW50XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3Zpc2libGUtY2xpY2thYmxlLWVsZW1lbnQtbWFya2VyJywgaW5WaWV3cG9ydCA/ICd0cnVlJyA6ICdmYWxzZScpXG4gIH0pXG59XG5cbi8vIEFkZCBjbGVhbnVwIGZ1bmN0aW9uIHRvIHJlbW92ZSBtYXJrZXJzIHdoZW4gbmVlZGVkXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQ2xpY2thYmxlTWFya2VycygpIHtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW3Zpc2libGUtY2xpY2thYmxlLWVsZW1lbnQtbWFya2VyXScpLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgndmlzaWJsZS1jbGlja2FibGUtZWxlbWVudC1tYXJrZXInKVxuICB9KVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2hvdWxkRXhjbHVkZSh1cmw6IHN0cmluZywgaWdub3JlVXNlcklkOiBib29sZWFuID0gZmFsc2UpIHtcbiAgaWYgKCFpZ25vcmVVc2VySWQpIHtcbiAgICBpZiAoY2hyb21lLnN0b3JhZ2UpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldCgndXNlcklkJylcbiAgICAgIGlmICghcmVzdWx0LnVzZXJJZCkge1xuICAgICAgICBjb25zb2xlLmxvZygnbm8gdXNlciBpZCcpXG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIHVzZXIgaWQsIHdlIHNob3VsZCBub3QgYmUgcmVjb3JkaW5nIGFueXRoaW5nXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IG5ldyBQcm9taXNlPHN0cmluZz4oKHJlc29sdmUpID0+IHtcbiAgICAgICAgY29uc3QgaGFuZGxlTWVzc2FnZSA9IChldmVudDogTWVzc2FnZUV2ZW50KSA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50LmRhdGEudHlwZSA9PT0gJ0dFVF9VU0VSX0lEX1JFU1BPTlNFJykge1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBoYW5kbGVNZXNzYWdlKVxuICAgICAgICAgICAgcmVzb2x2ZShldmVudC5kYXRhLnVzZXJJZClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBoYW5kbGVNZXNzYWdlKVxuICAgICAgICB3aW5kb3cucG9zdE1lc3NhZ2UoeyB0eXBlOiAnR0VUX1VTRVJfSUQnIH0sICcqJylcbiAgICAgIH0pXG4gICAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyB1c2VyIGlkLCB3ZSBzaG91bGQgbm90IGJlIHJlY29yZGluZyBhbnl0aGluZ1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmV0dXJuIChcbiAgICAhdXJsX2luY2x1ZGVzLnNvbWUoKGluY2x1ZGVVcmwpID0+IHVybC5pbmNsdWRlcyhpbmNsdWRlVXJsKSkgfHxcbiAgICBmaWx0ZXJfdXJsLnNvbWUoKGV4Y2x1ZGVVcmwpID0+IHVybC5pbmNsdWRlcyhleGNsdWRlVXJsKSlcbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVIdG1sU25hcHNob3RJZCh0aW1lc3RhbXA6IHN0cmluZywgdXVpZDogc3RyaW5nKSB7XG4gIGNvbnN0IHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG4gIHJldHVybiBgaHRtbF8ke2hhc2hDb2RlKHVybCl9XyR7dGltZXN0YW1wfV8ke3V1aWR9YFxufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc2hDb2RlKHN0cjogc3RyaW5nKSB7XG4gIGxldCBoYXNoID0gMFxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGhhc2ggPSAoaGFzaCA8PCA1KSAtIGhhc2ggKyBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhhc2ggfD0gMFxuICB9XG4gIGNvbnNvbGUubG9nKCdIYXNoIHZhbHVlIGJlZm9yZSByZXR1cm46JywgaGFzaClcbiAgcmV0dXJuIGhhc2gudG9TdHJpbmcoKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2hlY2tfdXNlcl9pZCh1c2VyX2lkOiBzdHJpbmcpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke2NoZWNrX3VzZXJfaWRfdXJsfT91c2VyX2lkPSR7dXNlcl9pZH1gLCB7XG4gICAgICBtZXRob2Q6ICdHRVQnXG4gICAgfSlcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG5cbiAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgIHJldHVybiAnc3VjY2VzcydcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRhdGEgfHwgJ1Vua25vd24gZXJyb3InXG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUubG9nKGBFcnJvcjogJHsoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2V9YClcbiAgfVxuICByZXR1cm4gJ1Vua25vd24gZXJyb3InXG59XG5cbmltcG9ydCB7IGNhcnQsIHJlY2lwZXMgfSBmcm9tICcuLi9yZWNpcGVfbmV3J1xuaW1wb3J0IHsgcHJvY2Vzc0VsZW1lbnQgfSBmcm9tICcuL2VsZW1lbnQtcHJvY2Vzc29yJ1xuZnVuY3Rpb24gc2VsZWN0UmVjaXBlKHVybCA9IG51bGwsIGRvY3VtZW50ID0gZ2xvYmFsVGhpcy5kb2N1bWVudCwgd2luZG93ID0gZ2xvYmFsVGhpcy53aW5kb3cpIHtcbiAgbGV0IHBhcnNlZFVybFxuICBpZiAodXJsKSB7XG4gICAgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpXG4gIH0gZWxzZSB7XG4gICAgcGFyc2VkVXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZilcbiAgfVxuICBsZXQgcGF0aCA9IHBhcnNlZFVybC5wYXRobmFtZVxuICBwYXRoID0gcGF0aCAhPT0gJy8nID8gcGF0aC5yZXBsYWNlKC9cXC8rJC8sICcnKSA6IHBhdGhcblxuICBmb3IgKGNvbnN0IHJlY2lwZSBvZiByZWNpcGVzKSB7XG4gICAgY29uc3QgbWF0Y2hNZXRob2QgPSByZWNpcGUubWF0Y2hfbWV0aG9kIHx8ICd0ZXh0J1xuICAgIGlmIChtYXRjaE1ldGhvZCA9PT0gJ3RleHQnKSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBFeGVjdXRlIHNjcmlwdCBpbiB0YWIgdG8gY2hlY2sgZm9yIG1hdGNoaW5nIGVsZW1lbnRcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocmVjaXBlLm1hdGNoKVxuXG4gICAgICAgIGNvbnN0IGhhc01hdGNoID1cbiAgICAgICAgICBlbGVtZW50ICYmXG4gICAgICAgICAgKCFyZWNpcGUubWF0Y2hfdGV4dCB8fFxuICAgICAgICAgICAgKGVsZW1lbnQudGV4dENvbnRlbnQ/LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocmVjaXBlLm1hdGNoX3RleHQudG9Mb3dlckNhc2UoKSkgPz8gZmFsc2UpKVxuXG4gICAgICAgIGlmIChoYXNNYXRjaCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdtYXRjaGVkIHdpdGggcmVjaXBlICcsIHJlY2lwZS5tYXRjaClcbiAgICAgICAgICByZXR1cm4gcmVjaXBlXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNoZWNraW5nIHRleHQgbWF0Y2g6JywgZXJyb3IpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChtYXRjaE1ldGhvZCA9PT0gJ3VybCcpIHtcbiAgICAgIGlmIChyZWNpcGUubWF0Y2ggPT09IHBhdGgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ21hdGNoZWQgd2l0aCByZWNpcGUgJywgcmVjaXBlLm1hdGNoKVxuICAgICAgICByZXR1cm4gcmVjaXBlXG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICByZWNpcGUubWF0Y2hfd2l0aF9yZWYgJiZcbiAgICAgICAgKHBhdGguc3RhcnRzV2l0aChyZWNpcGUubWF0Y2ggKyAnL3JlZj0nKSB8fCBwYXRoLnN0YXJ0c1dpdGgocmVjaXBlLm1hdGNoICsgJ3JlZj0nKSlcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlLmxvZygnbWF0Y2hlZCB3aXRoIHJlY2lwZSAnLCByZWNpcGUubWF0Y2gpXG4gICAgICAgIHJldHVybiByZWNpcGVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoYE5vIG1hdGNoaW5nIHJlY2lwZSBmb3VuZCBmb3IgcGF0aDogJHtwYXRofWApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzUmVjaXBlKHJvb3QgPSBudWxsLCB1cmwgPSBudWxsLCBkb2N1bWVudCA9IGdsb2JhbFRoaXMuZG9jdW1lbnQsIHdpbmRvdyA9IGdsb2JhbFRoaXMud2luZG93KSB7XG4gIGNvbnNvbGUubG9nKCdzdGFydCBwcm9jZXNzIHJlY2lwZScpXG4gIHRyeSB7XG4gICAgY29uc3QgcmVjaXBlID0gc2VsZWN0UmVjaXBlKHVybCwgZG9jdW1lbnQsIHdpbmRvdylcbiAgICBsZXQgcm9vdEVsZW1lbnRcbiAgICBpZiAocm9vdCkge1xuICAgICAgcm9vdEVsZW1lbnQgPSByb290XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3RFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihyZWNpcGUuc2VsZWN0b3IpXG4gICAgfVxuICAgIGlmIChyb290RWxlbWVudCkge1xuICAgICAgLy8gY29uc29sZS5sb2coZG9jdW1lbnQpXG4gICAgICBjb25zdCBuZXdSb290ID0gcHJvY2Vzc0VsZW1lbnQocm9vdEVsZW1lbnQsIHJlY2lwZSwgJycsIDAsIGRvY3VtZW50LCB3aW5kb3cpXG4gICAgICBjb25zdCBzaW1wbGlmaWVkSFRNTCA9IG5ld1Jvb3Qub3V0ZXJIVE1MXG4gICAgICByZXR1cm4gc2ltcGxpZmllZEhUTUxcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJvY2Vzc2luZyByZWNpcGU6JywgZXJyb3IpXG4gIH1cbn1cblxuLy8gUmVwbGFjZSB0aGUgc2ltcGxlIHF1ZXN0aW9uIHdpdGggYSBtb3JlIGRldGFpbGVkIG9uZSBiYXNlZCBvbiBldmVudCB0eXBlXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VzdG9tUXVlc3Rpb24oXG4gIGV2ZW50VHlwZTogc3RyaW5nLFxuICBkYXRhOiBhbnlcbik6IHsgcXVlc3Rpb246IHN0cmluZzsgcGxhY2Vob2xkZXI6IHN0cmluZyB9IHtcbiAgbGV0IHF1ZXN0aW9uID0gJydcbiAgbGV0IHBsYWNlaG9sZGVyID0gJ0VudGVyIHlvdXIgcmVhc29uIGhlcmUuLi4nXG4gIHN3aXRjaCAoZXZlbnRUeXBlKSB7XG4gICAgY2FzZSAnY2xpY2tfYSc6XG4gICAgY2FzZSAnY2xpY2tfYic6XG4gICAgY2FzZSAnY2xpY2tfYyc6XG4gICAgICAvLyBDaGVjayBpZiBpdCdzIGEgc3BlY2lmaWMgdHlwZSBvZiBjbGlja1xuICAgICAgaWYgKFxuICAgICAgICBkYXRhWydkYXRhLXNlbWFudGljLWlkJ10gPT09ICdidXlib3guZGVsaXZlcnkuc3Vic2NyaWJlX3NhdmVfLnB1cmNoYXNlX2Zvcm0uc2V0X3VwX25vdycgfHxcbiAgICAgICAgZGF0YS50YXJnZXQuaW5uZXJUZXh0ID09PSAnU2V0IFVwIE5vdydcbiAgICAgICkge1xuICAgICAgICBxdWVzdGlvbiA9XG4gICAgICAgICAgJ1lvdSA8c3BhbiBjbGFzcz1cImhpZ2hsaWdodC1xdWVzdGlvblwiPmNsaWNrZWQ8L3NwYW4+IG9uIHRoZSBzZXQgdXAgbm93IGJ1dHRvbi4gV2hhdCBtYWtlcyB5b3UgY2hvb3NlIHRvIHN1YnNjcmliZSB0byB0aGlzIHByb2R1Y3Q/J1xuICAgICAgICBwbGFjZWhvbGRlciA9ICdJIGNob29zZSB0byBzdWJzY3JpYmUgYmVjYXVzZS4uLidcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIGRhdGFbJ2RhdGEtc2VtYW50aWMtaWQnXSA9PT0gJ2J1eWJveC5kZWxpdmVyeS5vbmVfdGltZV9wdXJjaGFzZV8ucHVyY2hhc2VfZm9ybS5idXlfbm93JyB8fFxuICAgICAgICBkYXRhWydkYXRhLXNlbWFudGljLWlkJ10gPT09ICdidXlib3guZGVsaXZlcnkucHVyY2hhc2VfZm9ybS5idXknIHx8XG4gICAgICAgIGRhdGEudGFyZ2V0LmlkID09PSAnYnV5LW5vdy1idXR0b24nXG4gICAgICApIHtcbiAgICAgICAgcXVlc3Rpb24gPVxuICAgICAgICAgICdZb3UgPHNwYW4gY2xhc3M9XCJoaWdobGlnaHQtcXVlc3Rpb25cIj5jbGlja2VkPC9zcGFuPiBvbiB0aGUgYnV5IG5vdyBidXR0b24uIFdoYXQgZG8geW91IGxpa2UgYWJvdXQgdGhpcyBwYXJ0aWN1bGFyIHByb2R1Y3Q/J1xuICAgICAgICBwbGFjZWhvbGRlciA9ICdJIGFtIGJ1eWluZyB0aGlzIHByb2R1Y3QgYmVjYXVzZS4uLidcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIGRhdGFbJ2RhdGEtc2VtYW50aWMtaWQnXT8uc3RhcnRzV2l0aCgnc2VhcmNoX3Jlc3VsdHMuJykgfHxcbiAgICAgICAgZGF0YVsnZGF0YS1zZW1hbnRpYy1pZCddPy5zdGFydHNXaXRoKCdwcm9kdWN0X2xpc3QuJykgfHxcbiAgICAgICAgKGRhdGFbJ2RhdGEtc2VtYW50aWMtaWQnXT8uc3RhcnRzV2l0aCgnYWN0aXZlX2l0ZW1fbGlzdC4nKSAmJlxuICAgICAgICAgIGRhdGFbJ2RhdGEtc2VtYW50aWMtaWQnXT8uZW5kc1dpdGgoJy5wcm9kdWN0X2RldGFpbCcpKSB8fFxuICAgICAgICBkYXRhLnRhcmdldC5jbGFzc05hbWU/LmluY2x1ZGVzKCdzYy1wcm9kdWN0LWxpbmsnKVxuICAgICAgKSB7XG4gICAgICAgIHF1ZXN0aW9uID1cbiAgICAgICAgICAnWW91IDxzcGFuIGNsYXNzPVwiaGlnaGxpZ2h0LXF1ZXN0aW9uXCI+Y2xpY2tlZDwvc3Bhbj4gb24gdGhpcyBwcm9kdWN0LiBXaGF0IGNhdWdodCB5b3VyIGF0dGVudGlvbiBjb21wYXJlZCB0byB0aGUgb3RoZXIgb3B0aW9ucyB5b3Ugc2F3PydcbiAgICAgICAgcGxhY2Vob2xkZXIgPSAnSSBsaWtlIHRoaXMgcHJvZHVjdCBiZWNhdXNlw58uLi4nXG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBkYXRhWydkYXRhLXNlbWFudGljLWlkJ10/LmVuZHNXaXRoKCdhZGRfdG9fY2FydCcpIHx8XG4gICAgICAgIGRhdGEudGFyZ2V0LmlkID09PSAnYWRkLXRvLWNhcnQtYnV0dG9uJyB8fFxuICAgICAgICBkYXRhLnRhcmdldC5uYW1lID09PSAnc3VibWl0LmFkZFRvQ2FydCcgfHxcbiAgICAgICAgZGF0YS50YXJnZXQuaW5uZXJUZXh0ID09PSAnQWRkIHRvIENhcnQnXG4gICAgICApIHtcbiAgICAgICAgcXVlc3Rpb24gPVxuICAgICAgICAgICdZb3UgPHNwYW4gY2xhc3M9XCJoaWdobGlnaHQtcXVlc3Rpb25cIj5jbGlja2VkPC9zcGFuPiBvbiB0aGUgYWRkIHRvIGNhcnQgYnV0dG9uLiBXaGF0IG1ha2VzIHlvdSBkZWNpZGUgdG8gYWRkIHRoaXMgaXRlbSB0byB5b3VyIGNhcnQ/J1xuICAgICAgICBwbGFjZWhvbGRlciA9ICdJIGFkZCB0aGlzIGl0ZW0gdG8gbXkgY2FydCBiZWNhdXNlLi4uJ1xuICAgICAgfSBlbHNlIGlmIChkYXRhWydkYXRhLXNlbWFudGljLWlkJ10gPT09ICduYXZfYmFyLnNlYXJjaF9idXR0b24nKSB7XG4gICAgICAgIHF1ZXN0aW9uID1cbiAgICAgICAgICAnWW91IDxzcGFuIGNsYXNzPVwiaGlnaGxpZ2h0LXF1ZXN0aW9uXCI+Y2xpY2tlZDwvc3Bhbj4gb24gdGhlIHNlYXJjaCBidXR0b24uIFdoYXQgYXJlIHlvdSBzZWFyY2hpbmcgZm9yPydcbiAgICAgICAgcGxhY2Vob2xkZXIgPSAnSSB3YW50IHRvIGZpbmQgLi4uJ1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgZGF0YVsnZGF0YS1zZW1hbnRpYy1pZCddPy5zdGFydHNXaXRoKCdyZWZpbmVtZW50cy4nKSB8fFxuICAgICAgICBkYXRhWydkYXRhLXNlbWFudGljLWlkJ10/LnN0YXJ0c1dpdGgoJ2ZpbHRlcnMuJylcbiAgICAgICkge1xuICAgICAgICBxdWVzdGlvbiA9XG4gICAgICAgICAgJ1lvdSA8c3BhbiBjbGFzcz1cImhpZ2hsaWdodC1xdWVzdGlvblwiPmNsaWNrZWQ8L3NwYW4+IG9uIHRoaXMgZmlsdGVyLiBXaGF0IGFyZSB5b3UgaG9waW5nIHRvIGZpbmQgd2l0aCB0aGlzIGZpbHRlcj8nXG4gICAgICAgIHBsYWNlaG9sZGVyID0gJ0kgd2FudCB0byBmaW5kIC4uLidcbiAgICAgIH0gZWxzZSBpZiAoZGF0YVsnZGF0YS1zZW1hbnRpYy1pZCddPy5zdGFydHNXaXRoKCdwcm9kdWN0X29wdGlvbnMuJykpIHtcbiAgICAgICAgcXVlc3Rpb24gPVxuICAgICAgICAgICdZb3UgPHNwYW4gY2xhc3M9XCJoaWdobGlnaHQtcXVlc3Rpb25cIj5jbGlja2VkPC9zcGFuPiBvbiB0aGlzIHByb2R1Y3Qgb3B0aW9uLiBXaGF0IGRvIHlvdSBsaWtlIGFib3V0IHRoaXMgcHJvZHVjdCBvcHRpb24/J1xuICAgICAgICBpZiAoZGF0YVsnZWxlbWVudC1tZXRhLW5hbWUnXSA9PT0gJ3Byb2R1Y3Rfb3B0aW9ucycgJiYgZGF0YVsnZWxlbWVudC1tZXRhLWRhdGEnXSAhPT0gJycpIHtcbiAgICAgICAgICBxdWVzdGlvbiA9IGBZb3UgPHNwYW4gY2xhc3M9XCJoaWdobGlnaHQtcXVlc3Rpb25cIj5jbGlja2VkPC9zcGFuPiBvbiAke2RhdGFbJ2VsZW1lbnQtbWV0YS1kYXRhJ11bJ3ZhbHVlJ119LiBXaGF0IGRvIHlvdSBsaWtlIGFib3V0IHRoaXMgcHJvZHVjdCBvcHRpb24/YFxuICAgICAgICB9XG4gICAgICAgIHBsYWNlaG9sZGVyID0gJ0kgbGlrZSB0aGlzIHByb2R1Y3Qgb3B0aW9uIGJlY2F1c2UuLi7DnydcbiAgICAgIH0gZWxzZSBpZiAoZGF0YVsnZGF0YS1zZW1hbnRpYy1pZCddPy5lbmRzV2l0aCgnY2hlY2tfb3V0JykpIHtcbiAgICAgICAgcXVlc3Rpb24gPVxuICAgICAgICAgICdZb3UgPHNwYW4gY2xhc3M9XCJoaWdobGlnaHQtcXVlc3Rpb25cIj5jbGlja2VkPC9zcGFuPiBjaGVja291dCBidXR0b24uIFdoYXQgbWFrZXMgeW91IGNob29zZSB0byBjaGVja291dD8nXG4gICAgICAgIHBsYWNlaG9sZGVyID0gJ0kgY2hvb3NlIHRvIGNoZWNrb3V0IGJlY2F1c2UuLi4nXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxdWVzdGlvbiA9XG4gICAgICAgICAgJ1lvdSA8c3BhbiBjbGFzcz1cImhpZ2hsaWdodC1xdWVzdGlvblwiPmNsaWNrZWQ8L3NwYW4+IG9uIHRoaXMgZWxlbWVudC4gQ291bGQgeW91IHNoYXJlIHdoYXQgeW91IHdlcmUgdHJ5aW5nIHRvIGRvIG9yIGZpbmQ/J1xuICAgICAgICBwbGFjZWhvbGRlciA9ICdFbnRlciB5b3VyIHJlYXNvbiBoZXJlLi4uJ1xuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzY3JvbGwnOlxuICAgICAgcXVlc3Rpb24gPVxuICAgICAgICAnWW91IDxzcGFuIGNsYXNzPVwiaGlnaGxpZ2h0LXF1ZXN0aW9uXCI+c2Nyb2xsZWQ8L3NwYW4+IG9uIHRoaXMgcGFnZS4gV2hhdCBpbmZvcm1hdGlvbiBhcmUgeW91IGxvb2tpbmcgZm9yPydcbiAgICAgIHBsYWNlaG9sZGVyID0gJ0kgd2FudCB0byBmaW5kIC4uLidcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnaW5wdXQnOlxuICAgICAgcXVlc3Rpb24gPVxuICAgICAgICAnWW91IDxzcGFuIGNsYXNzPVwiaGlnaGxpZ2h0LXF1ZXN0aW9uXCI+dHlwZWQ8L3NwYW4+IGluIHRoaXMgaW5wdXQgZmllbGQuIFdoYXQgYXJlIHlvdSBzZWFyY2hpbmcgZm9yPydcbiAgICAgIHBsYWNlaG9sZGVyID0gJ0kgd2FudCB0byBmaW5kIC4uLidcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnbmF2aWdhdGlvbic6XG4gICAgICBpZiAoZGF0YS5uYXZpZ2F0aW9uVHlwZSA9PT0gJ2JhY2snKSB7XG4gICAgICAgIHF1ZXN0aW9uID1cbiAgICAgICAgICAnV2h5IGRpZCB5b3UgZGVjaWRlIHRvIDxzcGFuIGNsYXNzPVwiaGlnaGxpZ2h0LXF1ZXN0aW9uXCI+Z28gYmFjazwvc3Bhbj4gdG8gdGhlIHByZXZpb3VzIHBhZ2U/J1xuICAgICAgICBwbGFjZWhvbGRlciA9IFwiSSdtIGJhY2sgYmVjYXVzZS4uLlwiXG4gICAgICB9IGVsc2UgaWYgKGRhdGEubmF2aWdhdGlvblR5cGUgPT09ICdmb3J3YXJkJykge1xuICAgICAgICBxdWVzdGlvbiA9XG4gICAgICAgICAgJ1doeSBkaWQgeW91IGRlY2lkZSB0byA8c3BhbiBjbGFzcz1cImhpZ2hsaWdodC1xdWVzdGlvblwiPnJldHVybjwvc3Bhbj4gdG8gdGhpcyBwYWdlID8nXG4gICAgICAgIHBsYWNlaG9sZGVyID0gJ0kgd2FudCB0byBmaW5kIC4uLidcbiAgICAgIH1cbiAgICAgIHF1ZXN0aW9uID0gYFdoYXQgaXMgdGhlIHJlYXNvbiBmb3IgdGhpcyA8c3BhbiBjbGFzcz1cImhpZ2hsaWdodC1xdWVzdGlvblwiPiR7ZGF0YS5uYXZpZ2F0aW9uVHlwZX0gbmF2aWdhdGlvbjwvc3Bhbj4/YFxuICAgICAgcGxhY2Vob2xkZXIgPSAnRW50ZXIgeW91ciByZWFzb24gaGVyZS4uLidcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndGFiQWN0aXZhdGUnOlxuICAgICAgcXVlc3Rpb24gPSBgV2h5IGRpZCB5b3UgPHNwYW4gY2xhc3M9XCJoaWdobGlnaHQtcXVlc3Rpb25cIj5zd2l0Y2ggdG8gdGhpcyB0YWI8L3NwYW4+P2BcbiAgICAgIHBsYWNlaG9sZGVyID0gJ0kgc3dpdGNoZWQgdG8gdGhpcyB0YWIgYmVjYXVzZS4uLidcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIHF1ZXN0aW9uID0gYFdoYXQgaXMgdGhlIHJlYXNvbiBmb3IgdGhlICR7ZXZlbnRUeXBlfSBhY3Rpb24/YFxuICAgICAgcGxhY2Vob2xkZXIgPSAnRW50ZXIgeW91ciByZWFzb24gaGVyZS4uLidcbiAgICAgIGJyZWFrXG4gIH1cbiAgcmV0dXJuIHsgcXVlc3Rpb24sIHBsYWNlaG9sZGVyIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRSZWFzb24ocmVhc29uOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgaWYgKCFyZWFzb24gfHwgcmVhc29uLnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZmFsc2UgLy8gRW1wdHkgaW5wdXRcbiAgfVxuICBpZiAocmVhc29uLnRyaW0oKS5sZW5ndGggPCAyIHx8IHJlYXNvbi5sZW5ndGggPCA1KSB7XG4gICAgcmV0dXJuIGZhbHNlIC8vIFRvbyBzaG9ydCB0byBiZSBtZWFuaW5nZnVsLCBhdCBsZWFzdCA1IGNoYXJhY3RlcnMgYW5kIDIgd29yZHNcbiAgfVxuICAvLyBDaGVjayBmb3IgcmVwZXRpdGl2ZSBvciBtZWFuaW5nbGVzcyBpbnB1dCAoZS5nLiwgXCJhYWFcIixcIiEhIVwiKVxuICBjb25zdCBtZWFuaW5nbGVzc1BhdHRlcm5zID0gWy9eKC4pXFwxezMsfSQvLCAvXlteYS16QS1aMC05XSskL11cbiAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIG1lYW5pbmdsZXNzUGF0dGVybnMpIHtcbiAgICBpZiAocGF0dGVybi50ZXN0KHJlYXNvbi50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccysvZywgJycpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG4iLCJjbGFzcyBDYW52YXMge1xuICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICB9XG4gIGdldENvbnRleHQoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdG9EYXRhVVJMKCkge1xuICAgIHJldHVybiAnJztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlQ2FudmFzOiAod2lkdGgsIGhlaWdodCkgPT4gbmV3IENhbnZhcyh3aWR0aCwgaGVpZ2h0KSxcbn07XG4iLCIvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbnRyeSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnY2FudmFzJyk7XG59IGNhdGNoIChmYWxsYmFjaykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2FudmFzLXNoaW0uY2pzJyk7XG59XG4vKiBjOCBpZ25vcmUgc3RvcCAqL1xuIiwiLyogYzggaWdub3JlIHN0YXJ0ICovXG50cnkge1xuICBjb25zdCB7cGVyZm9ybWFuY2V9ID0gcmVxdWlyZSgncGVyZl9ob29rcycpO1xuICBleHBvcnRzLnBlcmZvcm1hbmNlID0gcGVyZm9ybWFuY2U7XG59XG5jYXRjaCAoZmFsbGJhY2spIHtcbiAgZXhwb3J0cy5wZXJmb3JtYW5jZSA9IHtub3coKSB7IHJldHVybiArbmV3IERhdGU7IH19O1xufVxuLyogYzggaWdub3JlIHN0b3AgKi9cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJndW1lbnRzKTtcbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG5jb25zdCB7dG9TdHJpbmd9ID0gT2JqZWN0LnByb3RvdHlwZTtcbmNvbnN0IHtnZXRQcm90b3R5cGVPZn0gPSBPYmplY3Q7XG5cbmNvbnN0IGtpbmRPZiA9IChjYWNoZSA9PiB0aGluZyA9PiB7XG4gICAgY29uc3Qgc3RyID0gdG9TdHJpbmcuY2FsbCh0aGluZyk7XG4gICAgcmV0dXJuIGNhY2hlW3N0cl0gfHwgKGNhY2hlW3N0cl0gPSBzdHIuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkpO1xufSkoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG5cbmNvbnN0IGtpbmRPZlRlc3QgPSAodHlwZSkgPT4ge1xuICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKHRoaW5nKSA9PiBraW5kT2YodGhpbmcpID09PSB0eXBlXG59XG5cbmNvbnN0IHR5cGVPZlRlc3QgPSB0eXBlID0+IHRoaW5nID0+IHR5cGVvZiB0aGluZyA9PT0gdHlwZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IHtpc0FycmF5fSA9IEFycmF5O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVW5kZWZpbmVkID0gdHlwZU9mVGVzdCgndW5kZWZpbmVkJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgaXNGdW5jdGlvbih2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIpICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQXJyYXlCdWZmZXIgPSBraW5kT2ZUZXN0KCdBcnJheUJ1ZmZlcicpO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgbGV0IHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAoaXNBcnJheUJ1ZmZlcih2YWwuYnVmZmVyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmluZyA9IHR5cGVPZlRlc3QoJ3N0cmluZycpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRnVuY3Rpb24gPSB0eXBlT2ZUZXN0KCdmdW5jdGlvbicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzTnVtYmVyID0gdHlwZU9mVGVzdCgnbnVtYmVyJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyAhPT0gbnVsbCAmJiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQm9vbGVhblxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQm9vbGVhbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQm9vbGVhbiA9IHRoaW5nID0+IHRoaW5nID09PSB0cnVlIHx8IHRoaW5nID09PSBmYWxzZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4ge1xuICBpZiAoa2luZE9mKHZhbCkgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgcHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIChwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90b3R5cGUpID09PSBudWxsKSAmJiAhKFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWwpICYmICEoU3ltYm9sLml0ZXJhdG9yIGluIHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0RhdGUgPSBraW5kT2ZUZXN0KCdEYXRlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0ZpbGUgPSBraW5kT2ZUZXN0KCdGaWxlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jsb2IgPSBraW5kT2ZUZXN0KCdCbG9iJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlTGlzdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlTGlzdCA9IGtpbmRPZlRlc3QoJ0ZpbGVMaXN0Jyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJlYW0gPSAodmFsKSA9PiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Zvcm1EYXRhID0gKHRoaW5nKSA9PiB7XG4gIGxldCBraW5kO1xuICByZXR1cm4gdGhpbmcgJiYgKFxuICAgICh0eXBlb2YgRm9ybURhdGEgPT09ICdmdW5jdGlvbicgJiYgdGhpbmcgaW5zdGFuY2VvZiBGb3JtRGF0YSkgfHwgKFxuICAgICAgaXNGdW5jdGlvbih0aGluZy5hcHBlbmQpICYmIChcbiAgICAgICAgKGtpbmQgPSBraW5kT2YodGhpbmcpKSA9PT0gJ2Zvcm1kYXRhJyB8fFxuICAgICAgICAvLyBkZXRlY3QgZm9ybS1kYXRhIGluc3RhbmNlXG4gICAgICAgIChraW5kID09PSAnb2JqZWN0JyAmJiBpc0Z1bmN0aW9uKHRoaW5nLnRvU3RyaW5nKSAmJiB0aGluZy50b1N0cmluZygpID09PSAnW29iamVjdCBGb3JtRGF0YV0nKVxuICAgICAgKVxuICAgIClcbiAgKVxufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNVUkxTZWFyY2hQYXJhbXMgPSBraW5kT2ZUZXN0KCdVUkxTZWFyY2hQYXJhbXMnKTtcblxuY29uc3QgW2lzUmVhZGFibGVTdHJlYW0sIGlzUmVxdWVzdCwgaXNSZXNwb25zZSwgaXNIZWFkZXJzXSA9IFsnUmVhZGFibGVTdHJlYW0nLCAnUmVxdWVzdCcsICdSZXNwb25zZScsICdIZWFkZXJzJ10ubWFwKGtpbmRPZlRlc3QpO1xuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5jb25zdCB0cmltID0gKHN0cikgPT4gc3RyLnRyaW0gP1xuICBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLCAnJyk7XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzID0gZmFsc2VdXG4gKiBAcmV0dXJucyB7YW55fVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4sIHthbGxPd25LZXlzID0gZmFsc2V9ID0ge30pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgaTtcbiAgbGV0IGw7XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGNvbnN0IGtleXMgPSBhbGxPd25LZXlzID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKSA6IE9iamVjdC5rZXlzKG9iaik7XG4gICAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGtleTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmosIGtleSkge1xuICBrZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIGxldCBfa2V5O1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIF9rZXkgPSBrZXlzW2ldO1xuICAgIGlmIChrZXkgPT09IF9rZXkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgcmV0dXJuIF9rZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5jb25zdCBfZ2xvYmFsID0gKCgpID0+IHtcbiAgLyplc2xpbnQgbm8tdW5kZWY6MCovXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIGdsb2JhbFRoaXM7XG4gIHJldHVybiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpXG59KSgpO1xuXG5jb25zdCBpc0NvbnRleHREZWZpbmVkID0gKGNvbnRleHQpID0+ICFpc1VuZGVmaW5lZChjb250ZXh0KSAmJiBjb250ZXh0ICE9PSBfZ2xvYmFsO1xuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIGNvbnN0IHtjYXNlbGVzc30gPSBpc0NvbnRleHREZWZpbmVkKHRoaXMpICYmIHRoaXMgfHwge307XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBjb25zdCBhc3NpZ25WYWx1ZSA9ICh2YWwsIGtleSkgPT4ge1xuICAgIGNvbnN0IHRhcmdldEtleSA9IGNhc2VsZXNzICYmIGZpbmRLZXkocmVzdWx0LCBrZXkpIHx8IGtleTtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRbdGFyZ2V0S2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IG1lcmdlKHJlc3VsdFt0YXJnZXRLZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBhcmd1bWVudHNbaV0gJiYgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBbYWxsT3duS2V5c11cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuY29uc3QgZXh0ZW5kID0gKGEsIGIsIHRoaXNBcmcsIHthbGxPd25LZXlzfT0ge30pID0+IHtcbiAgZm9yRWFjaChiLCAodmFsLCBrZXkpID0+IHtcbiAgICBpZiAodGhpc0FyZyAmJiBpc0Z1bmN0aW9uKHZhbCkpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSwge2FsbE93bktleXN9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmNvbnN0IHN0cmlwQk9NID0gKGNvbnRlbnQpID0+IHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDb25zdHJ1Y3RvclxuICogQHBhcmFtIHtvYmplY3R9IFtwcm9wc11cbiAqIEBwYXJhbSB7b2JqZWN0fSBbZGVzY3JpcHRvcnNdXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGluaGVyaXRzID0gKGNvbnN0cnVjdG9yLCBzdXBlckNvbnN0cnVjdG9yLCBwcm9wcywgZGVzY3JpcHRvcnMpID0+IHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZSwgZGVzY3JpcHRvcnMpO1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvcjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnN0cnVjdG9yLCAnc3VwZXInLCB7XG4gICAgdmFsdWU6IHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlXG4gIH0pO1xuICBwcm9wcyAmJiBPYmplY3QuYXNzaWduKGNvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvcHMpO1xufVxuXG4vKipcbiAqIFJlc29sdmUgb2JqZWN0IHdpdGggZGVlcCBwcm90b3R5cGUgY2hhaW4gdG8gYSBmbGF0IG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZU9iaiBzb3VyY2Ugb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gW2Rlc3RPYmpdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEJvb2xlYW59IFtmaWx0ZXJdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJvcEZpbHRlcl1cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5jb25zdCB0b0ZsYXRPYmplY3QgPSAoc291cmNlT2JqLCBkZXN0T2JqLCBmaWx0ZXIsIHByb3BGaWx0ZXIpID0+IHtcbiAgbGV0IHByb3BzO1xuICBsZXQgaTtcbiAgbGV0IHByb3A7XG4gIGNvbnN0IG1lcmdlZCA9IHt9O1xuXG4gIGRlc3RPYmogPSBkZXN0T2JqIHx8IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgaWYgKHNvdXJjZU9iaiA9PSBudWxsKSByZXR1cm4gZGVzdE9iajtcblxuICBkbyB7XG4gICAgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VPYmopO1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgIHByb3AgPSBwcm9wc1tpXTtcbiAgICAgIGlmICgoIXByb3BGaWx0ZXIgfHwgcHJvcEZpbHRlcihwcm9wLCBzb3VyY2VPYmosIGRlc3RPYmopKSAmJiAhbWVyZ2VkW3Byb3BdKSB7XG4gICAgICAgIGRlc3RPYmpbcHJvcF0gPSBzb3VyY2VPYmpbcHJvcF07XG4gICAgICAgIG1lcmdlZFtwcm9wXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvdXJjZU9iaiA9IGZpbHRlciAhPT0gZmFsc2UgJiYgZ2V0UHJvdG90eXBlT2Yoc291cmNlT2JqKTtcbiAgfSB3aGlsZSAoc291cmNlT2JqICYmICghZmlsdGVyIHx8IGZpbHRlcihzb3VyY2VPYmosIGRlc3RPYmopKSAmJiBzb3VyY2VPYmogIT09IE9iamVjdC5wcm90b3R5cGUpO1xuXG4gIHJldHVybiBkZXN0T2JqO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhIHN0cmluZyBlbmRzIHdpdGggdGhlIGNoYXJhY3RlcnMgb2YgYSBzcGVjaWZpZWQgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtTdHJpbmd9IHNlYXJjaFN0cmluZ1xuICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbj0gMF1cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgZW5kc1dpdGggPSAoc3RyLCBzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKSA9PiB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fCBwb3NpdGlvbiA+IHN0ci5sZW5ndGgpIHtcbiAgICBwb3NpdGlvbiA9IHN0ci5sZW5ndGg7XG4gIH1cbiAgcG9zaXRpb24gLT0gc2VhcmNoU3RyaW5nLmxlbmd0aDtcbiAgY29uc3QgbGFzdEluZGV4ID0gc3RyLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbik7XG4gIHJldHVybiBsYXN0SW5kZXggIT09IC0xICYmIGxhc3RJbmRleCA9PT0gcG9zaXRpb247XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIG5ldyBhcnJheSBmcm9tIGFycmF5IGxpa2Ugb2JqZWN0IG9yIG51bGwgaWYgZmFpbGVkXG4gKlxuICogQHBhcmFtIHsqfSBbdGhpbmddXG4gKlxuICogQHJldHVybnMgez9BcnJheX1cbiAqL1xuY29uc3QgdG9BcnJheSA9ICh0aGluZykgPT4ge1xuICBpZiAoIXRoaW5nKSByZXR1cm4gbnVsbDtcbiAgaWYgKGlzQXJyYXkodGhpbmcpKSByZXR1cm4gdGhpbmc7XG4gIGxldCBpID0gdGhpbmcubGVuZ3RoO1xuICBpZiAoIWlzTnVtYmVyKGkpKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgYXJyID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGFycltpXSA9IHRoaW5nW2ldO1xuICB9XG4gIHJldHVybiBhcnI7XG59XG5cbi8qKlxuICogQ2hlY2tpbmcgaWYgdGhlIFVpbnQ4QXJyYXkgZXhpc3RzIGFuZCBpZiBpdCBkb2VzLCBpdCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgdGhlXG4gKiB0aGluZyBwYXNzZWQgaW4gaXMgYW4gaW5zdGFuY2Ugb2YgVWludDhBcnJheVxuICpcbiAqIEBwYXJhbSB7VHlwZWRBcnJheX1cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5jb25zdCBpc1R5cGVkQXJyYXkgPSAoVHlwZWRBcnJheSA9PiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiB0aGluZyA9PiB7XG4gICAgcmV0dXJuIFR5cGVkQXJyYXkgJiYgdGhpbmcgaW5zdGFuY2VvZiBUeXBlZEFycmF5O1xuICB9O1xufSkodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnICYmIGdldFByb3RvdHlwZU9mKFVpbnQ4QXJyYXkpKTtcblxuLyoqXG4gKiBGb3IgZWFjaCBlbnRyeSBpbiB0aGUgb2JqZWN0LCBjYWxsIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBrZXkgYW5kIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGVudHJ5LlxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5jb25zdCBmb3JFYWNoRW50cnkgPSAob2JqLCBmbikgPT4ge1xuICBjb25zdCBnZW5lcmF0b3IgPSBvYmogJiYgb2JqW1N5bWJvbC5pdGVyYXRvcl07XG5cbiAgY29uc3QgaXRlcmF0b3IgPSBnZW5lcmF0b3IuY2FsbChvYmopO1xuXG4gIGxldCByZXN1bHQ7XG5cbiAgd2hpbGUgKChyZXN1bHQgPSBpdGVyYXRvci5uZXh0KCkpICYmICFyZXN1bHQuZG9uZSkge1xuICAgIGNvbnN0IHBhaXIgPSByZXN1bHQudmFsdWU7XG4gICAgZm4uY2FsbChvYmosIHBhaXJbMF0sIHBhaXJbMV0pO1xuICB9XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSByZWd1bGFyIGV4cHJlc3Npb24gYW5kIGEgc3RyaW5nLCBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiBhbGwgdGhlIG1hdGNoZXNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVnRXhwIC0gVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBhZ2FpbnN0LlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gc2VhcmNoLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheTxib29sZWFuPn1cbiAqL1xuY29uc3QgbWF0Y2hBbGwgPSAocmVnRXhwLCBzdHIpID0+IHtcbiAgbGV0IG1hdGNoZXM7XG4gIGNvbnN0IGFyciA9IFtdO1xuXG4gIHdoaWxlICgobWF0Y2hlcyA9IHJlZ0V4cC5leGVjKHN0cikpICE9PSBudWxsKSB7XG4gICAgYXJyLnB1c2gobWF0Y2hlcyk7XG4gIH1cblxuICByZXR1cm4gYXJyO1xufVxuXG4vKiBDaGVja2luZyBpZiB0aGUga2luZE9mVGVzdCBmdW5jdGlvbiByZXR1cm5zIHRydWUgd2hlbiBwYXNzZWQgYW4gSFRNTEZvcm1FbGVtZW50LiAqL1xuY29uc3QgaXNIVE1MRm9ybSA9IGtpbmRPZlRlc3QoJ0hUTUxGb3JtRWxlbWVudCcpO1xuXG5jb25zdCB0b0NhbWVsQ2FzZSA9IHN0ciA9PiB7XG4gIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bLV9cXHNdKFthLXpcXGRdKShcXHcqKS9nLFxuICAgIGZ1bmN0aW9uIHJlcGxhY2VyKG0sIHAxLCBwMikge1xuICAgICAgcmV0dXJuIHAxLnRvVXBwZXJDYXNlKCkgKyBwMjtcbiAgICB9XG4gICk7XG59O1xuXG4vKiBDcmVhdGluZyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBjaGVjayBpZiBhbiBvYmplY3QgaGFzIGEgcHJvcGVydHkuICovXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9ICgoe2hhc093blByb3BlcnR5fSkgPT4gKG9iaiwgcHJvcCkgPT4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKShPYmplY3QucHJvdG90eXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzUmVnRXhwID0ga2luZE9mVGVzdCgnUmVnRXhwJyk7XG5cbmNvbnN0IHJlZHVjZURlc2NyaXB0b3JzID0gKG9iaiwgcmVkdWNlcikgPT4ge1xuICBjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iaik7XG4gIGNvbnN0IHJlZHVjZWREZXNjcmlwdG9ycyA9IHt9O1xuXG4gIGZvckVhY2goZGVzY3JpcHRvcnMsIChkZXNjcmlwdG9yLCBuYW1lKSA9PiB7XG4gICAgbGV0IHJldDtcbiAgICBpZiAoKHJldCA9IHJlZHVjZXIoZGVzY3JpcHRvciwgbmFtZSwgb2JqKSkgIT09IGZhbHNlKSB7XG4gICAgICByZWR1Y2VkRGVzY3JpcHRvcnNbbmFtZV0gPSByZXQgfHwgZGVzY3JpcHRvcjtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwgcmVkdWNlZERlc2NyaXB0b3JzKTtcbn1cblxuLyoqXG4gKiBNYWtlcyBhbGwgbWV0aG9kcyByZWFkLW9ubHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqL1xuXG5jb25zdCBmcmVlemVNZXRob2RzID0gKG9iaikgPT4ge1xuICByZWR1Y2VEZXNjcmlwdG9ycyhvYmosIChkZXNjcmlwdG9yLCBuYW1lKSA9PiB7XG4gICAgLy8gc2tpcCByZXN0cmljdGVkIHByb3BzIGluIHN0cmljdCBtb2RlXG4gICAgaWYgKGlzRnVuY3Rpb24ob2JqKSAmJiBbJ2FyZ3VtZW50cycsICdjYWxsZXInLCAnY2FsbGVlJ10uaW5kZXhPZihuYW1lKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZSA9IG9ialtuYW1lXTtcblxuICAgIGlmICghaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybjtcblxuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGZhbHNlO1xuXG4gICAgaWYgKCd3cml0YWJsZScgaW4gZGVzY3JpcHRvcikge1xuICAgICAgZGVzY3JpcHRvci53cml0YWJsZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZGVzY3JpcHRvci5zZXQpIHtcbiAgICAgIGRlc2NyaXB0b3Iuc2V0ID0gKCkgPT4ge1xuICAgICAgICB0aHJvdyBFcnJvcignQ2FuIG5vdCByZXdyaXRlIHJlYWQtb25seSBtZXRob2QgXFwnJyArIG5hbWUgKyAnXFwnJyk7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG5cbmNvbnN0IHRvT2JqZWN0U2V0ID0gKGFycmF5T3JTdHJpbmcsIGRlbGltaXRlcikgPT4ge1xuICBjb25zdCBvYmogPSB7fTtcblxuICBjb25zdCBkZWZpbmUgPSAoYXJyKSA9PiB7XG4gICAgYXJyLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgb2JqW3ZhbHVlXSA9IHRydWU7XG4gICAgfSk7XG4gIH1cblxuICBpc0FycmF5KGFycmF5T3JTdHJpbmcpID8gZGVmaW5lKGFycmF5T3JTdHJpbmcpIDogZGVmaW5lKFN0cmluZyhhcnJheU9yU3RyaW5nKS5zcGxpdChkZWxpbWl0ZXIpKTtcblxuICByZXR1cm4gb2JqO1xufVxuXG5jb25zdCBub29wID0gKCkgPT4ge31cblxuY29uc3QgdG9GaW5pdGVOdW1iZXIgPSAodmFsdWUsIGRlZmF1bHRWYWx1ZSkgPT4ge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBOdW1iZXIuaXNGaW5pdGUodmFsdWUgPSArdmFsdWUpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG59XG5cbmNvbnN0IEFMUEhBID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6J1xuXG5jb25zdCBESUdJVCA9ICcwMTIzNDU2Nzg5JztcblxuY29uc3QgQUxQSEFCRVQgPSB7XG4gIERJR0lULFxuICBBTFBIQSxcbiAgQUxQSEFfRElHSVQ6IEFMUEhBICsgQUxQSEEudG9VcHBlckNhc2UoKSArIERJR0lUXG59XG5cbmNvbnN0IGdlbmVyYXRlU3RyaW5nID0gKHNpemUgPSAxNiwgYWxwaGFiZXQgPSBBTFBIQUJFVC5BTFBIQV9ESUdJVCkgPT4ge1xuICBsZXQgc3RyID0gJyc7XG4gIGNvbnN0IHtsZW5ndGh9ID0gYWxwaGFiZXQ7XG4gIHdoaWxlIChzaXplLS0pIHtcbiAgICBzdHIgKz0gYWxwaGFiZXRbTWF0aC5yYW5kb20oKSAqIGxlbmd0aHwwXVxuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn1cblxuLyoqXG4gKiBJZiB0aGUgdGhpbmcgaXMgYSBGb3JtRGF0YSBvYmplY3QsIHJldHVybiB0cnVlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gdGhpbmcgLSBUaGUgdGhpbmcgdG8gY2hlY2suXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzU3BlY0NvbXBsaWFudEZvcm0odGhpbmcpIHtcbiAgcmV0dXJuICEhKHRoaW5nICYmIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiB0aGluZ1tTeW1ib2wudG9TdHJpbmdUYWddID09PSAnRm9ybURhdGEnICYmIHRoaW5nW1N5bWJvbC5pdGVyYXRvcl0pO1xufVxuXG5jb25zdCB0b0pTT05PYmplY3QgPSAob2JqKSA9PiB7XG4gIGNvbnN0IHN0YWNrID0gbmV3IEFycmF5KDEwKTtcblxuICBjb25zdCB2aXNpdCA9IChzb3VyY2UsIGkpID0+IHtcblxuICAgIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgICBpZiAoc3RhY2suaW5kZXhPZihzb3VyY2UpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZighKCd0b0pTT04nIGluIHNvdXJjZSkpIHtcbiAgICAgICAgc3RhY2tbaV0gPSBzb3VyY2U7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGlzQXJyYXkoc291cmNlKSA/IFtdIDoge307XG5cbiAgICAgICAgZm9yRWFjaChzb3VyY2UsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVkdWNlZFZhbHVlID0gdmlzaXQodmFsdWUsIGkgKyAxKTtcbiAgICAgICAgICAhaXNVbmRlZmluZWQocmVkdWNlZFZhbHVlKSAmJiAodGFyZ2V0W2tleV0gPSByZWR1Y2VkVmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzdGFja1tpXSA9IHVuZGVmaW5lZDtcblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICByZXR1cm4gdmlzaXQob2JqLCAwKTtcbn1cblxuY29uc3QgaXNBc3luY0ZuID0ga2luZE9mVGVzdCgnQXN5bmNGdW5jdGlvbicpO1xuXG5jb25zdCBpc1RoZW5hYmxlID0gKHRoaW5nKSA9PlxuICB0aGluZyAmJiAoaXNPYmplY3QodGhpbmcpIHx8IGlzRnVuY3Rpb24odGhpbmcpKSAmJiBpc0Z1bmN0aW9uKHRoaW5nLnRoZW4pICYmIGlzRnVuY3Rpb24odGhpbmcuY2F0Y2gpO1xuXG4vLyBvcmlnaW5hbCBjb2RlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vRGlnaXRhbEJyYWluSlMvQXhpb3NQcm9taXNlL2Jsb2IvMTZkZWFiMTM3MTBlYzA5Nzc5OTIyMTMxZjNmYTU5NTQzMjBmODNhYi9saWIvdXRpbHMuanMjTDExLUwzNFxuXG5jb25zdCBfc2V0SW1tZWRpYXRlID0gKChzZXRJbW1lZGlhdGVTdXBwb3J0ZWQsIHBvc3RNZXNzYWdlU3VwcG9ydGVkKSA9PiB7XG4gIGlmIChzZXRJbW1lZGlhdGVTdXBwb3J0ZWQpIHtcbiAgICByZXR1cm4gc2V0SW1tZWRpYXRlO1xuICB9XG5cbiAgcmV0dXJuIHBvc3RNZXNzYWdlU3VwcG9ydGVkID8gKCh0b2tlbiwgY2FsbGJhY2tzKSA9PiB7XG4gICAgX2dsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCAoe3NvdXJjZSwgZGF0YX0pID0+IHtcbiAgICAgIGlmIChzb3VyY2UgPT09IF9nbG9iYWwgJiYgZGF0YSA9PT0gdG9rZW4pIHtcbiAgICAgICAgY2FsbGJhY2tzLmxlbmd0aCAmJiBjYWxsYmFja3Muc2hpZnQoKSgpO1xuICAgICAgfVxuICAgIH0sIGZhbHNlKTtcblxuICAgIHJldHVybiAoY2IpID0+IHtcbiAgICAgIGNhbGxiYWNrcy5wdXNoKGNiKTtcbiAgICAgIF9nbG9iYWwucG9zdE1lc3NhZ2UodG9rZW4sIFwiKlwiKTtcbiAgICB9XG4gIH0pKGBheGlvc0Ake01hdGgucmFuZG9tKCl9YCwgW10pIDogKGNiKSA9PiBzZXRUaW1lb3V0KGNiKTtcbn0pKFxuICB0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAnZnVuY3Rpb24nLFxuICBpc0Z1bmN0aW9uKF9nbG9iYWwucG9zdE1lc3NhZ2UpXG4pO1xuXG5jb25zdCBhc2FwID0gdHlwZW9mIHF1ZXVlTWljcm90YXNrICE9PSAndW5kZWZpbmVkJyA/XG4gIHF1ZXVlTWljcm90YXNrLmJpbmQoX2dsb2JhbCkgOiAoIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLm5leHRUaWNrIHx8IF9zZXRJbW1lZGlhdGUpO1xuXG4vLyAqKioqKioqKioqKioqKioqKioqKipcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nLFxuICBpc051bWJlcixcbiAgaXNCb29sZWFuLFxuICBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdCxcbiAgaXNSZWFkYWJsZVN0cmVhbSxcbiAgaXNSZXF1ZXN0LFxuICBpc1Jlc3BvbnNlLFxuICBpc0hlYWRlcnMsXG4gIGlzVW5kZWZpbmVkLFxuICBpc0RhdGUsXG4gIGlzRmlsZSxcbiAgaXNCbG9iLFxuICBpc1JlZ0V4cCxcbiAgaXNGdW5jdGlvbixcbiAgaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1R5cGVkQXJyYXksXG4gIGlzRmlsZUxpc3QsXG4gIGZvckVhY2gsXG4gIG1lcmdlLFxuICBleHRlbmQsXG4gIHRyaW0sXG4gIHN0cmlwQk9NLFxuICBpbmhlcml0cyxcbiAgdG9GbGF0T2JqZWN0LFxuICBraW5kT2YsXG4gIGtpbmRPZlRlc3QsXG4gIGVuZHNXaXRoLFxuICB0b0FycmF5LFxuICBmb3JFYWNoRW50cnksXG4gIG1hdGNoQWxsLFxuICBpc0hUTUxGb3JtLFxuICBoYXNPd25Qcm9wZXJ0eSxcbiAgaGFzT3duUHJvcDogaGFzT3duUHJvcGVydHksIC8vIGFuIGFsaWFzIHRvIGF2b2lkIEVTTGludCBuby1wcm90b3R5cGUtYnVpbHRpbnMgZGV0ZWN0aW9uXG4gIHJlZHVjZURlc2NyaXB0b3JzLFxuICBmcmVlemVNZXRob2RzLFxuICB0b09iamVjdFNldCxcbiAgdG9DYW1lbENhc2UsXG4gIG5vb3AsXG4gIHRvRmluaXRlTnVtYmVyLFxuICBmaW5kS2V5LFxuICBnbG9iYWw6IF9nbG9iYWwsXG4gIGlzQ29udGV4dERlZmluZWQsXG4gIEFMUEhBQkVULFxuICBnZW5lcmF0ZVN0cmluZyxcbiAgaXNTcGVjQ29tcGxpYW50Rm9ybSxcbiAgdG9KU09OT2JqZWN0LFxuICBpc0FzeW5jRm4sXG4gIGlzVGhlbmFibGUsXG4gIHNldEltbWVkaWF0ZTogX3NldEltbWVkaWF0ZSxcbiAgYXNhcFxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtjb25maWddIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIEF4aW9zRXJyb3IobWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBFcnJvci5jYWxsKHRoaXMpO1xuXG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrO1xuICB9XG5cbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgdGhpcy5uYW1lID0gJ0F4aW9zRXJyb3InO1xuICBjb2RlICYmICh0aGlzLmNvZGUgPSBjb2RlKTtcbiAgY29uZmlnICYmICh0aGlzLmNvbmZpZyA9IGNvbmZpZyk7XG4gIHJlcXVlc3QgJiYgKHRoaXMucmVxdWVzdCA9IHJlcXVlc3QpO1xuICBpZiAocmVzcG9uc2UpIHtcbiAgICB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgdGhpcy5zdGF0dXMgPSByZXNwb25zZS5zdGF0dXMgPyByZXNwb25zZS5zdGF0dXMgOiBudWxsO1xuICB9XG59XG5cbnV0aWxzLmluaGVyaXRzKEF4aW9zRXJyb3IsIEVycm9yLCB7XG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHV0aWxzLnRvSlNPTk9iamVjdCh0aGlzLmNvbmZpZyksXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzXG4gICAgfTtcbiAgfVxufSk7XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zRXJyb3IucHJvdG90eXBlO1xuY29uc3QgZGVzY3JpcHRvcnMgPSB7fTtcblxuW1xuICAnRVJSX0JBRF9PUFRJT05fVkFMVUUnLFxuICAnRVJSX0JBRF9PUFRJT04nLFxuICAnRUNPTk5BQk9SVEVEJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFUlJfTkVUV09SSycsXG4gICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJyxcbiAgJ0VSUl9ERVBSRUNBVEVEJyxcbiAgJ0VSUl9CQURfUkVTUE9OU0UnLFxuICAnRVJSX0JBRF9SRVFVRVNUJyxcbiAgJ0VSUl9DQU5DRUxFRCcsXG4gICdFUlJfTk9UX1NVUFBPUlQnLFxuICAnRVJSX0lOVkFMSURfVVJMJ1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbl0uZm9yRWFjaChjb2RlID0+IHtcbiAgZGVzY3JpcHRvcnNbY29kZV0gPSB7dmFsdWU6IGNvZGV9O1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEF4aW9zRXJyb3IsIGRlc2NyaXB0b3JzKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICdpc0F4aW9zRXJyb3InLCB7dmFsdWU6IHRydWV9KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbkF4aW9zRXJyb3IuZnJvbSA9IChlcnJvciwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSwgY3VzdG9tUHJvcHMpID0+IHtcbiAgY29uc3QgYXhpb3NFcnJvciA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlKTtcblxuICB1dGlscy50b0ZsYXRPYmplY3QoZXJyb3IsIGF4aW9zRXJyb3IsIGZ1bmN0aW9uIGZpbHRlcihvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBFcnJvci5wcm90b3R5cGU7XG4gIH0sIHByb3AgPT4ge1xuICAgIHJldHVybiBwcm9wICE9PSAnaXNBeGlvc0Vycm9yJztcbiAgfSk7XG5cbiAgQXhpb3NFcnJvci5jYWxsKGF4aW9zRXJyb3IsIGVycm9yLm1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpO1xuXG4gIGF4aW9zRXJyb3IuY2F1c2UgPSBlcnJvcjtcblxuICBheGlvc0Vycm9yLm5hbWUgPSBlcnJvci5uYW1lO1xuXG4gIGN1c3RvbVByb3BzICYmIE9iamVjdC5hc3NpZ24oYXhpb3NFcnJvciwgY3VzdG9tUHJvcHMpO1xuXG4gIHJldHVybiBheGlvc0Vycm9yO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG4vLyB0ZW1wb3JhcnkgaG90Zml4IHRvIGF2b2lkIGNpcmN1bGFyIHJlZmVyZW5jZXMgdW50aWwgQXhpb3NVUkxTZWFyY2hQYXJhbXMgaXMgcmVmYWN0b3JlZFxuaW1wb3J0IFBsYXRmb3JtRm9ybURhdGEgZnJvbSAnLi4vcGxhdGZvcm0vbm9kZS9jbGFzc2VzL0Zvcm1EYXRhLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiB0aGluZyBpcyBhIGFycmF5IG9yIGpzIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGhpbmcgLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIHZpc2l0ZWQuXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmlzaXRhYmxlKHRoaW5nKSB7XG4gIHJldHVybiB1dGlscy5pc1BsYWluT2JqZWN0KHRoaW5nKSB8fCB1dGlscy5pc0FycmF5KHRoaW5nKTtcbn1cblxuLyoqXG4gKiBJdCByZW1vdmVzIHRoZSBicmFja2V0cyBmcm9tIHRoZSBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBrZXkgd2l0aG91dCB0aGUgYnJhY2tldHMuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUJyYWNrZXRzKGtleSkge1xuICByZXR1cm4gdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSA/IGtleS5zbGljZSgwLCAtMikgOiBrZXk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXRoLCBhIGtleSwgYW5kIGEgYm9vbGVhbiwgYW5kIHJldHVybnMgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGtleS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBjdXJyZW50IG9iamVjdCBiZWluZyBpdGVyYXRlZCBvdmVyLlxuICogQHBhcmFtIHtzdHJpbmd9IGRvdHMgLSBJZiB0cnVlLCB0aGUga2V5IHdpbGwgYmUgcmVuZGVyZWQgd2l0aCBkb3RzIGluc3RlYWQgb2YgYnJhY2tldHMuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICovXG5mdW5jdGlvbiByZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSB7XG4gIGlmICghcGF0aCkgcmV0dXJuIGtleTtcbiAgcmV0dXJuIHBhdGguY29uY2F0KGtleSkubWFwKGZ1bmN0aW9uIGVhY2godG9rZW4sIGkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB0b2tlbiA9IHJlbW92ZUJyYWNrZXRzKHRva2VuKTtcbiAgICByZXR1cm4gIWRvdHMgJiYgaSA/ICdbJyArIHRva2VuICsgJ10nIDogdG9rZW47XG4gIH0pLmpvaW4oZG90cyA/ICcuJyA6ICcnKTtcbn1cblxuLyoqXG4gKiBJZiB0aGUgYXJyYXkgaXMgYW4gYXJyYXkgYW5kIG5vbmUgb2YgaXRzIGVsZW1lbnRzIGFyZSB2aXNpdGFibGUsIHRoZW4gaXQncyBhIGZsYXQgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgLSBUaGUgYXJyYXkgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGbGF0QXJyYXkoYXJyKSB7XG4gIHJldHVybiB1dGlscy5pc0FycmF5KGFycikgJiYgIWFyci5zb21lKGlzVmlzaXRhYmxlKTtcbn1cblxuY29uc3QgcHJlZGljYXRlcyA9IHV0aWxzLnRvRmxhdE9iamVjdCh1dGlscywge30sIG51bGwsIGZ1bmN0aW9uIGZpbHRlcihwcm9wKSB7XG4gIHJldHVybiAvXmlzW0EtWl0vLnRlc3QocHJvcCk7XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgZGF0YSBvYmplY3QgdG8gRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0gez9PYmplY3R9IFtmb3JtRGF0YV1cbiAqIEBwYXJhbSB7P09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy52aXNpdG9yXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tZXRhVG9rZW5zID0gdHJ1ZV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZG90cyA9IGZhbHNlXVxuICogQHBhcmFtIHs/Qm9vbGVhbn0gW29wdGlvbnMuaW5kZXhlcyA9IGZhbHNlXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiovXG5cbi8qKlxuICogSXQgY29udmVydHMgYW4gb2JqZWN0IGludG8gYSBGb3JtRGF0YSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gY29udmVydCB0byBmb3JtIGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybURhdGEgLSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGFwcGVuZCB0by5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIHRvRm9ybURhdGEob2JqLCBmb3JtRGF0YSwgb3B0aW9ucykge1xuICBpZiAoIXV0aWxzLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0YXJnZXQgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBmb3JtRGF0YSA9IGZvcm1EYXRhIHx8IG5ldyAoUGxhdGZvcm1Gb3JtRGF0YSB8fCBGb3JtRGF0YSkoKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgb3B0aW9ucyA9IHV0aWxzLnRvRmxhdE9iamVjdChvcHRpb25zLCB7XG4gICAgbWV0YVRva2VuczogdHJ1ZSxcbiAgICBkb3RzOiBmYWxzZSxcbiAgICBpbmRleGVzOiBmYWxzZVxuICB9LCBmYWxzZSwgZnVuY3Rpb24gZGVmaW5lZChvcHRpb24sIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICAgIHJldHVybiAhdXRpbHMuaXNVbmRlZmluZWQoc291cmNlW29wdGlvbl0pO1xuICB9KTtcblxuICBjb25zdCBtZXRhVG9rZW5zID0gb3B0aW9ucy5tZXRhVG9rZW5zO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgY29uc3QgdmlzaXRvciA9IG9wdGlvbnMudmlzaXRvciB8fCBkZWZhdWx0VmlzaXRvcjtcbiAgY29uc3QgZG90cyA9IG9wdGlvbnMuZG90cztcbiAgY29uc3QgaW5kZXhlcyA9IG9wdGlvbnMuaW5kZXhlcztcbiAgY29uc3QgX0Jsb2IgPSBvcHRpb25zLkJsb2IgfHwgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIEJsb2I7XG4gIGNvbnN0IHVzZUJsb2IgPSBfQmxvYiAmJiB1dGlscy5pc1NwZWNDb21wbGlhbnRGb3JtKGZvcm1EYXRhKTtcblxuICBpZiAoIXV0aWxzLmlzRnVuY3Rpb24odmlzaXRvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2aXNpdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udmVydFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJyc7XG5cbiAgICBpZiAodXRpbHMuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKCF1c2VCbG9iICYmIHV0aWxzLmlzQmxvYih2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdCbG9iIGlzIG5vdCBzdXBwb3J0ZWQuIFVzZSBhIEJ1ZmZlciBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKHZhbHVlKSB8fCB1dGlscy5pc1R5cGVkQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdXNlQmxvYiAmJiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBCbG9iKFt2YWx1ZV0pIDogQnVmZmVyLmZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHZpc2l0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXlcbiAgICogQHBhcmFtIHtBcnJheTxTdHJpbmd8TnVtYmVyPn0gcGF0aFxuICAgKiBAdGhpcyB7Rm9ybURhdGF9XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm4gdHJ1ZSB0byB2aXNpdCB0aGUgZWFjaCBwcm9wIG9mIHRoZSB2YWx1ZSByZWN1cnNpdmVseVxuICAgKi9cbiAgZnVuY3Rpb24gZGVmYXVsdFZpc2l0b3IodmFsdWUsIGtleSwgcGF0aCkge1xuICAgIGxldCBhcnIgPSB2YWx1ZTtcblxuICAgIGlmICh2YWx1ZSAmJiAhcGF0aCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAne30nKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gbWV0YVRva2VucyA/IGtleSA6IGtleS5zbGljZSgwLCAtMik7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICh1dGlscy5pc0FycmF5KHZhbHVlKSAmJiBpc0ZsYXRBcnJheSh2YWx1ZSkpIHx8XG4gICAgICAgICgodXRpbHMuaXNGaWxlTGlzdCh2YWx1ZSkgfHwgdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSkgJiYgKGFyciA9IHV0aWxzLnRvQXJyYXkodmFsdWUpKVxuICAgICAgICApKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSByZW1vdmVCcmFja2V0cyhrZXkpO1xuXG4gICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIGVhY2goZWwsIGluZGV4KSB7XG4gICAgICAgICAgISh1dGlscy5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgICAgICAgICAgaW5kZXhlcyA9PT0gdHJ1ZSA/IHJlbmRlcktleShba2V5XSwgaW5kZXgsIGRvdHMpIDogKGluZGV4ZXMgPT09IG51bGwgPyBrZXkgOiBrZXkgKyAnW10nKSxcbiAgICAgICAgICAgIGNvbnZlcnRWYWx1ZShlbClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1Zpc2l0YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvcm1EYXRhLmFwcGVuZChyZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSwgY29udmVydFZhbHVlKHZhbHVlKSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzdGFjayA9IFtdO1xuXG4gIGNvbnN0IGV4cG9zZWRIZWxwZXJzID0gT2JqZWN0LmFzc2lnbihwcmVkaWNhdGVzLCB7XG4gICAgZGVmYXVsdFZpc2l0b3IsXG4gICAgY29udmVydFZhbHVlLFxuICAgIGlzVmlzaXRhYmxlXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkKHZhbHVlLCBwYXRoKSB7XG4gICAgaWYgKHV0aWxzLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgaWYgKHN0YWNrLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBkZXRlY3RlZCBpbiAnICsgcGF0aC5qb2luKCcuJykpO1xuICAgIH1cblxuICAgIHN0YWNrLnB1c2godmFsdWUpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24gZWFjaChlbCwga2V5KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgdmlzaXRvci5jYWxsKFxuICAgICAgICBmb3JtRGF0YSwgZWwsIHV0aWxzLmlzU3RyaW5nKGtleSkgPyBrZXkudHJpbSgpIDoga2V5LCBwYXRoLCBleHBvc2VkSGVscGVyc1xuICAgICAgKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICBidWlsZChlbCwgcGF0aCA/IHBhdGguY29uY2F0KGtleSkgOiBba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGEgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIGJ1aWxkKG9iaik7XG5cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0Zvcm1EYXRhO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIEl0IGVuY29kZXMgYSBzdHJpbmcgYnkgcmVwbGFjaW5nIGFsbCBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBpbiB0aGUgdW5yZXNlcnZlZCBzZXQgd2l0aFxuICogdGhlaXIgcGVyY2VudC1lbmNvZGVkIGVxdWl2YWxlbnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gZW5jb2RlLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHN0cikge1xuICBjb25zdCBjaGFyTWFwID0ge1xuICAgICchJzogJyUyMScsXG4gICAgXCInXCI6ICclMjcnLFxuICAgICcoJzogJyUyOCcsXG4gICAgJyknOiAnJTI5JyxcbiAgICAnfic6ICclN0UnLFxuICAgICclMjAnOiAnKycsXG4gICAgJyUwMCc6ICdcXHgwMCdcbiAgfTtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpfl18JTIwfCUwMC9nLCBmdW5jdGlvbiByZXBsYWNlcihtYXRjaCkge1xuICAgIHJldHVybiBjaGFyTWFwW21hdGNoXTtcbiAgfSk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXJhbXMgb2JqZWN0IGFuZCBjb252ZXJ0cyBpdCB0byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gcGFyYW1zIC0gVGhlIHBhcmFtZXRlcnMgdG8gYmUgY29udmVydGVkIHRvIGEgRm9ybURhdGEgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB0byB0aGUgQXhpb3MgY29uc3RydWN0b3IuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykge1xuICB0aGlzLl9wYWlycyA9IFtdO1xuXG4gIHBhcmFtcyAmJiB0b0Zvcm1EYXRhKHBhcmFtcywgdGhpcywgb3B0aW9ucyk7XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZTtcblxucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICB0aGlzLl9wYWlycy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xufTtcblxucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoZW5jb2Rlcikge1xuICBjb25zdCBfZW5jb2RlID0gZW5jb2RlciA/IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVuY29kZXIuY2FsbCh0aGlzLCB2YWx1ZSwgZW5jb2RlKTtcbiAgfSA6IGVuY29kZTtcblxuICByZXR1cm4gdGhpcy5fcGFpcnMubWFwKGZ1bmN0aW9uIGVhY2gocGFpcikge1xuICAgIHJldHVybiBfZW5jb2RlKHBhaXJbMF0pICsgJz0nICsgX2VuY29kZShwYWlyWzFdKTtcbiAgfSwgJycpLmpvaW4oJyYnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4uL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMnO1xuXG4vKipcbiAqIEl0IHJlcGxhY2VzIGFsbCBpbnN0YW5jZXMgb2YgdGhlIGNoYXJhY3RlcnMgYDpgLCBgJGAsIGAsYCwgYCtgLCBgW2AsIGFuZCBgXWAgd2l0aCB0aGVpclxuICogVVJJIGVuY29kZWQgY291bnRlcnBhcnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbCBUaGUgdmFsdWUgdG8gYmUgZW5jb2RlZC5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEBwYXJhbSB7PyhvYmplY3R8RnVuY3Rpb24pfSBvcHRpb25zXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBcbiAgY29uc3QgX2VuY29kZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5lbmNvZGUgfHwgZW5jb2RlO1xuXG4gIGlmICh1dGlscy5pc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHNlcmlhbGl6ZTogb3B0aW9uc1xuICAgIH07XG4gIH0gXG5cbiAgY29uc3Qgc2VyaWFsaXplRm4gPSBvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplO1xuXG4gIGxldCBzZXJpYWxpemVkUGFyYW1zO1xuXG4gIGlmIChzZXJpYWxpemVGbikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBzZXJpYWxpemVGbihwYXJhbXMsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSB1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpID9cbiAgICAgIHBhcmFtcy50b1N0cmluZygpIDpcbiAgICAgIG5ldyBBeGlvc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMsIG9wdGlvbnMpLnRvU3RyaW5nKF9lbmNvZGUpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICBjb25zdCBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoXCIjXCIpO1xuXG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuY2xhc3MgSW50ZXJjZXB0b3JNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gICAqL1xuICB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICAgIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgICBmdWxmaWxsZWQsXG4gICAgICByZWplY3RlZCxcbiAgICAgIHN5bmNocm9ub3VzOiBvcHRpb25zID8gb3B0aW9ucy5zeW5jaHJvbm91cyA6IGZhbHNlLFxuICAgICAgcnVuV2hlbjogb3B0aW9ucyA/IG9wdGlvbnMucnVuV2hlbiA6IG51bGxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gICAqXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGludGVyY2VwdG9yIHdhcyByZW1vdmVkLCBgZmFsc2VgIG90aGVyd2lzZVxuICAgKi9cbiAgZWplY3QoaWQpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgYWxsIGludGVyY2VwdG9ycyBmcm9tIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGNsZWFyKCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gICAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGZvckVhY2goZm4pIHtcbiAgICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICAgIGZuKGgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzaWxlbnRKU09OUGFyc2luZzogdHJ1ZSxcbiAgZm9yY2VkSlNPTlBhcnNpbmc6IHRydWUsXG4gIGNsYXJpZnlUaW1lb3V0RXJyb3I6IGZhbHNlXG59O1xuIiwiaW1wb3J0IFVSTFNlYXJjaFBhcmFtcyBmcm9tICcuL2NsYXNzZXMvVVJMU2VhcmNoUGFyYW1zLmpzJ1xuaW1wb3J0IEZvcm1EYXRhIGZyb20gJy4vY2xhc3Nlcy9Gb3JtRGF0YS5qcydcbmltcG9ydCBCbG9iIGZyb20gJy4vY2xhc3Nlcy9CbG9iLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzQnJvd3NlcjogdHJ1ZSxcbiAgY2xhc3Nlczoge1xuICAgIFVSTFNlYXJjaFBhcmFtcyxcbiAgICBGb3JtRGF0YSxcbiAgICBCbG9iXG4gIH0sXG4gIHByb3RvY29sczogWydodHRwJywgJ2h0dHBzJywgJ2ZpbGUnLCAnYmxvYicsICd1cmwnLCAnZGF0YSddXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi4vLi4vLi4vaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyc7XG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyA/IFVSTFNlYXJjaFBhcmFtcyA6IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnID8gRm9ybURhdGEgOiBudWxsO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyA/IEJsb2IgOiBudWxsXG4iLCJjb25zdCBoYXNCcm93c2VyRW52ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcblxuY29uc3QgX25hdmlnYXRvciA9IHR5cGVvZiBuYXZpZ2F0b3IgPT09ICdvYmplY3QnICYmIG5hdmlnYXRvciB8fCB1bmRlZmluZWQ7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBoYXNTdGFuZGFyZEJyb3dzZXJFbnYgPSBoYXNCcm93c2VyRW52ICYmXG4gICghX25hdmlnYXRvciB8fCBbJ1JlYWN0TmF0aXZlJywgJ05hdGl2ZVNjcmlwdCcsICdOUyddLmluZGV4T2YoX25hdmlnYXRvci5wcm9kdWN0KSA8IDApO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciB3ZWJXb3JrZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBBbHRob3VnaCB0aGUgYGlzU3RhbmRhcmRCcm93c2VyRW52YCBtZXRob2QgaW5kaWNhdGVzIHRoYXRcbiAqIGBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlcmAsIHRoZSBXZWJXb3JrZXIgd2lsbCBzdGlsbCBiZVxuICogZmlsdGVyZWQgb3V0IGR1ZSB0byBpdHMganVkZ21lbnQgc3RhbmRhcmRcbiAqIGB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnYC5cbiAqIFRoaXMgbGVhZHMgdG8gYSBwcm9ibGVtIHdoZW4gYXhpb3MgcG9zdCBgRm9ybURhdGFgIGluIHdlYldvcmtlclxuICovXG5jb25zdCBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYgPSAoKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICBzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUgJiZcbiAgICB0eXBlb2Ygc2VsZi5pbXBvcnRTY3JpcHRzID09PSAnZnVuY3Rpb24nXG4gICk7XG59KSgpO1xuXG5jb25zdCBvcmlnaW4gPSBoYXNCcm93c2VyRW52ICYmIHdpbmRvdy5sb2NhdGlvbi5ocmVmIHx8ICdodHRwOi8vbG9jYWxob3N0JztcblxuZXhwb3J0IHtcbiAgaGFzQnJvd3NlckVudixcbiAgaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52LFxuICBoYXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIF9uYXZpZ2F0b3IgYXMgbmF2aWdhdG9yLFxuICBvcmlnaW5cbn1cbiIsImltcG9ydCBwbGF0Zm9ybSBmcm9tICcuL25vZGUvaW5kZXguanMnO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi9jb21tb24vdXRpbHMuanMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIC4uLnV0aWxzLFxuICAuLi5wbGF0Zm9ybVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIEl0IHRha2VzIGEgc3RyaW5nIGxpa2UgYGZvb1t4XVt5XVt6XWAgYW5kIHJldHVybnMgYW4gYXJyYXkgbGlrZSBgWydmb28nLCAneCcsICd5JywgJ3onXVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqXG4gKiBAcmV0dXJucyBBbiBhcnJheSBvZiBzdHJpbmdzLlxuICovXG5mdW5jdGlvbiBwYXJzZVByb3BQYXRoKG5hbWUpIHtcbiAgLy8gZm9vW3hdW3ldW3pdXG4gIC8vIGZvby54LnkuelxuICAvLyBmb28teC15LXpcbiAgLy8gZm9vIHggeSB6XG4gIHJldHVybiB1dGlscy5tYXRjaEFsbCgvXFx3K3xcXFsoXFx3KildL2csIG5hbWUpLm1hcChtYXRjaCA9PiB7XG4gICAgcmV0dXJuIG1hdGNoWzBdID09PSAnW10nID8gJycgOiBtYXRjaFsxXSB8fCBtYXRjaFswXTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ29udmVydCBhbiBhcnJheSB0byBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgLSBUaGUgYXJyYXkgdG8gY29udmVydCB0byBhbiBvYmplY3QuXG4gKlxuICogQHJldHVybnMgQW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhbmQgdmFsdWVzIGFzIHRoZSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb09iamVjdChhcnIpIHtcbiAgY29uc3Qgb2JqID0ge307XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhhcnIpO1xuICBsZXQgaTtcbiAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7XG4gIGxldCBrZXk7XG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgb2JqW2tleV0gPSBhcnJba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgRm9ybURhdGEgb2JqZWN0IGFuZCByZXR1cm5zIGEgSmF2YVNjcmlwdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybURhdGEgVGhlIEZvcm1EYXRhIG9iamVjdCB0byBjb252ZXJ0IHRvIEpTT04uXG4gKlxuICogQHJldHVybnMge09iamVjdDxzdHJpbmcsIGFueT4gfCBudWxsfSBUaGUgY29udmVydGVkIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZm9ybURhdGFUb0pTT04oZm9ybURhdGEpIHtcbiAgZnVuY3Rpb24gYnVpbGRQYXRoKHBhdGgsIHZhbHVlLCB0YXJnZXQsIGluZGV4KSB7XG4gICAgbGV0IG5hbWUgPSBwYXRoW2luZGV4KytdO1xuXG4gICAgaWYgKG5hbWUgPT09ICdfX3Byb3RvX18nKSByZXR1cm4gdHJ1ZTtcblxuICAgIGNvbnN0IGlzTnVtZXJpY0tleSA9IE51bWJlci5pc0Zpbml0ZSgrbmFtZSk7XG4gICAgY29uc3QgaXNMYXN0ID0gaW5kZXggPj0gcGF0aC5sZW5ndGg7XG4gICAgbmFtZSA9ICFuYW1lICYmIHV0aWxzLmlzQXJyYXkodGFyZ2V0KSA/IHRhcmdldC5sZW5ndGggOiBuYW1lO1xuXG4gICAgaWYgKGlzTGFzdCkge1xuICAgICAgaWYgKHV0aWxzLmhhc093blByb3AodGFyZ2V0LCBuYW1lKSkge1xuICAgICAgICB0YXJnZXRbbmFtZV0gPSBbdGFyZ2V0W25hbWVdLCB2YWx1ZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICFpc051bWVyaWNLZXk7XG4gICAgfVxuXG4gICAgaWYgKCF0YXJnZXRbbmFtZV0gfHwgIXV0aWxzLmlzT2JqZWN0KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IFtdO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0W25hbWVdLCBpbmRleCk7XG5cbiAgICBpZiAocmVzdWx0ICYmIHV0aWxzLmlzQXJyYXkodGFyZ2V0W25hbWVdKSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gYXJyYXlUb09iamVjdCh0YXJnZXRbbmFtZV0pO1xuICAgIH1cblxuICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICB9XG5cbiAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZm9ybURhdGEpICYmIHV0aWxzLmlzRnVuY3Rpb24oZm9ybURhdGEuZW50cmllcykpIHtcbiAgICBjb25zdCBvYmogPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2hFbnRyeShmb3JtRGF0YSwgKG5hbWUsIHZhbHVlKSA9PiB7XG4gICAgICBidWlsZFBhdGgocGFyc2VQcm9wUGF0aChuYW1lKSwgdmFsdWUsIG9iaiwgMCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1EYXRhVG9KU09OO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCB0cmFuc2l0aW9uYWxEZWZhdWx0cyBmcm9tICcuL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuLi9oZWxwZXJzL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IHRvVVJMRW5jb2RlZEZvcm0gZnJvbSAnLi4vaGVscGVycy90b1VSTEVuY29kZWRGb3JtLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybURhdGFUb0pTT04gZnJvbSAnLi4vaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyc7XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcsIHRyaWVzIHRvIHBhcnNlIGl0LCBhbmQgaWYgaXQgZmFpbHMsIGl0IHJldHVybnMgdGhlIHN0cmluZ2lmaWVkIHZlcnNpb25cbiAqIG9mIHRoZSBpbnB1dFxuICpcbiAqIEBwYXJhbSB7YW55fSByYXdWYWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSBzdHJpbmdpZmllZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBhcnNlciAtIEEgZnVuY3Rpb24gdGhhdCBwYXJzZXMgYSBzdHJpbmcgaW50byBhIEphdmFTY3JpcHQgb2JqZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZW5jb2RlciAtIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIHZhbHVlIGFuZCByZXR1cm5zIGEgc3RyaW5nLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5naWZpZWQgdmVyc2lvbiBvZiB0aGUgcmF3VmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG5jb25zdCBkZWZhdWx0cyA9IHtcblxuICB0cmFuc2l0aW9uYWw6IHRyYW5zaXRpb25hbERlZmF1bHRzLFxuXG4gIGFkYXB0ZXI6IFsneGhyJywgJ2h0dHAnLCAnZmV0Y2gnXSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgY29uc3QgY29udGVudFR5cGUgPSBoZWFkZXJzLmdldENvbnRlbnRUeXBlKCkgfHwgJyc7XG4gICAgY29uc3QgaGFzSlNPTkNvbnRlbnRUeXBlID0gY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24vanNvbicpID4gLTE7XG4gICAgY29uc3QgaXNPYmplY3RQYXlsb2FkID0gdXRpbHMuaXNPYmplY3QoZGF0YSk7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkICYmIHV0aWxzLmlzSFRNTEZvcm0oZGF0YSkpIHtcbiAgICAgIGRhdGEgPSBuZXcgRm9ybURhdGEoZGF0YSk7XG4gICAgfVxuXG4gICAgY29uc3QgaXNGb3JtRGF0YSA9IHV0aWxzLmlzRm9ybURhdGEoZGF0YSk7XG5cbiAgICBpZiAoaXNGb3JtRGF0YSkge1xuICAgICAgcmV0dXJuIGhhc0pTT05Db250ZW50VHlwZSA/IEpTT04uc3RyaW5naWZ5KGZvcm1EYXRhVG9KU09OKGRhdGEpKSA6IGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzUmVhZGFibGVTdHJlYW0oZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcsIGZhbHNlKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgbGV0IGlzRmlsZUxpc3Q7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkKSB7XG4gICAgICBpZiAoY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJykgPiAtMSkge1xuICAgICAgICByZXR1cm4gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCB0aGlzLmZvcm1TZXJpYWxpemVyKS50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoKGlzRmlsZUxpc3QgPSB1dGlscy5pc0ZpbGVMaXN0KGRhdGEpKSB8fCBjb250ZW50VHlwZS5pbmRleE9mKCdtdWx0aXBhcnQvZm9ybS1kYXRhJykgPiAtMSkge1xuICAgICAgICBjb25zdCBfRm9ybURhdGEgPSB0aGlzLmVudiAmJiB0aGlzLmVudi5Gb3JtRGF0YTtcblxuICAgICAgICByZXR1cm4gdG9Gb3JtRGF0YShcbiAgICAgICAgICBpc0ZpbGVMaXN0ID8geydmaWxlc1tdJzogZGF0YX0gOiBkYXRhLFxuICAgICAgICAgIF9Gb3JtRGF0YSAmJiBuZXcgX0Zvcm1EYXRhKCksXG4gICAgICAgICAgdGhpcy5mb3JtU2VyaWFsaXplclxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgfHwgaGFzSlNPTkNvbnRlbnRUeXBlICkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24vanNvbicsIGZhbHNlKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsIHx8IGRlZmF1bHRzLnRyYW5zaXRpb25hbDtcbiAgICBjb25zdCBmb3JjZWRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuZm9yY2VkSlNPTlBhcnNpbmc7XG4gICAgY29uc3QgSlNPTlJlcXVlc3RlZCA9IHRoaXMucmVzcG9uc2VUeXBlID09PSAnanNvbic7XG5cbiAgICBpZiAodXRpbHMuaXNSZXNwb25zZShkYXRhKSB8fCB1dGlscy5pc1JlYWRhYmxlU3RyZWFtKGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YSAmJiB1dGlscy5pc1N0cmluZyhkYXRhKSAmJiAoKGZvcmNlZEpTT05QYXJzaW5nICYmICF0aGlzLnJlc3BvbnNlVHlwZSkgfHwgSlNPTlJlcXVlc3RlZCkpIHtcbiAgICAgIGNvbnN0IHNpbGVudEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5zaWxlbnRKU09OUGFyc2luZztcbiAgICAgIGNvbnN0IHN0cmljdEpTT05QYXJzaW5nID0gIXNpbGVudEpTT05QYXJzaW5nICYmIEpTT05SZXF1ZXN0ZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcpIHtcbiAgICAgICAgICBpZiAoZS5uYW1lID09PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBBeGlvc0Vycm9yLmZyb20oZSwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFLCB0aGlzLCBudWxsLCB0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgZW52OiB7XG4gICAgRm9ybURhdGE6IHBsYXRmb3JtLmNsYXNzZXMuRm9ybURhdGEsXG4gICAgQmxvYjogcGxhdGZvcm0uY2xhc3Nlcy5CbG9iXG4gIH0sXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKicsXG4gICAgICAnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkXG4gICAgfVxuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIChtZXRob2QpID0+IHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b0Zvcm1EYXRhKGRhdGEsIG5ldyBwbGF0Zm9ybS5jbGFzc2VzLlVSTFNlYXJjaFBhcmFtcygpLCBPYmplY3QuYXNzaWduKHtcbiAgICB2aXNpdG9yOiBmdW5jdGlvbih2YWx1ZSwga2V5LCBwYXRoLCBoZWxwZXJzKSB7XG4gICAgICBpZiAocGxhdGZvcm0uaXNOb2RlICYmIHV0aWxzLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICB0aGlzLmFwcGVuZChrZXksIHZhbHVlLnRvU3RyaW5nKCdiYXNlNjQnKSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlbHBlcnMuZGVmYXVsdFZpc2l0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sIG9wdGlvbnMpKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG4vLyBSYXdBeGlvc0hlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG5jb25zdCBpZ25vcmVEdXBsaWNhdGVPZiA9IHV0aWxzLnRvT2JqZWN0U2V0KFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dKTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJhd0hlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IHJhd0hlYWRlcnMgPT4ge1xuICBjb25zdCBwYXJzZWQgPSB7fTtcbiAgbGV0IGtleTtcbiAgbGV0IHZhbDtcbiAgbGV0IGk7XG5cbiAgcmF3SGVhZGVycyAmJiByYXdIZWFkZXJzLnNwbGl0KCdcXG4nKS5mb3JFYWNoKGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IGxpbmUuc3Vic3RyaW5nKDAsIGkpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IGxpbmUuc3Vic3RyaW5nKGkgKyAxKS50cmltKCk7XG5cbiAgICBpZiAoIWtleSB8fCAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2Zba2V5XSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSkge1xuICAgICAgICBwYXJzZWRba2V5XS5wdXNoKHZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IFt2YWxdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgcGFyc2VIZWFkZXJzIGZyb20gJy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzJztcblxuY29uc3QgJGludGVybmFscyA9IFN5bWJvbCgnaW50ZXJuYWxzJyk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlciAmJiBTdHJpbmcoaGVhZGVyKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKG5vcm1hbGl6ZVZhbHVlKSA6IFN0cmluZyh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVG9rZW5zKHN0cikge1xuICBjb25zdCB0b2tlbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCB0b2tlbnNSRSA9IC8oW15cXHMsOz1dKylcXHMqKD86PVxccyooW14sO10rKSk/L2c7XG4gIGxldCBtYXRjaDtcblxuICB3aGlsZSAoKG1hdGNoID0gdG9rZW5zUkUuZXhlYyhzdHIpKSkge1xuICAgIHRva2Vuc1ttYXRjaFsxXV0gPSBtYXRjaFsyXTtcbiAgfVxuXG4gIHJldHVybiB0b2tlbnM7XG59XG5cbmNvbnN0IGlzVmFsaWRIZWFkZXJOYW1lID0gKHN0cikgPT4gL15bLV9hLXpBLVowLTleYHx+LCEjJCUmJyorLl0rJC8udGVzdChzdHIudHJpbSgpKTtcblxuZnVuY3Rpb24gbWF0Y2hIZWFkZXJWYWx1ZShjb250ZXh0LCB2YWx1ZSwgaGVhZGVyLCBmaWx0ZXIsIGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICBpZiAodXRpbHMuaXNGdW5jdGlvbihmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci5jYWxsKHRoaXMsIHZhbHVlLCBoZWFkZXIpO1xuICB9XG5cbiAgaWYgKGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICAgIHZhbHVlID0gaGVhZGVyO1xuICB9XG5cbiAgaWYgKCF1dGlscy5pc1N0cmluZyh2YWx1ZSkpIHJldHVybjtcblxuICBpZiAodXRpbHMuaXNTdHJpbmcoZmlsdGVyKSkge1xuICAgIHJldHVybiB2YWx1ZS5pbmRleE9mKGZpbHRlcikgIT09IC0xO1xuICB9XG5cbiAgaWYgKHV0aWxzLmlzUmVnRXhwKGZpbHRlcikpIHtcbiAgICByZXR1cm4gZmlsdGVyLnRlc3QodmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlci50cmltKClcbiAgICAudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8oW2EtelxcZF0pKFxcdyopL2csICh3LCBjaGFyLCBzdHIpID0+IHtcbiAgICAgIHJldHVybiBjaGFyLnRvVXBwZXJDYXNlKCkgKyBzdHI7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQWNjZXNzb3JzKG9iaiwgaGVhZGVyKSB7XG4gIGNvbnN0IGFjY2Vzc29yTmFtZSA9IHV0aWxzLnRvQ2FtZWxDYXNlKCcgJyArIGhlYWRlcik7XG5cbiAgWydnZXQnLCAnc2V0JywgJ2hhcyddLmZvckVhY2gobWV0aG9kTmFtZSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbWV0aG9kTmFtZSArIGFjY2Vzc29yTmFtZSwge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbbWV0aG9kTmFtZV0uY2FsbCh0aGlzLCBoZWFkZXIsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgICAgfSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9KTtcbn1cblxuY2xhc3MgQXhpb3NIZWFkZXJzIHtcbiAgY29uc3RydWN0b3IoaGVhZGVycykge1xuICAgIGhlYWRlcnMgJiYgdGhpcy5zZXQoaGVhZGVycyk7XG4gIH1cblxuICBzZXQoaGVhZGVyLCB2YWx1ZU9yUmV3cml0ZSwgcmV3cml0ZSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgZnVuY3Rpb24gc2V0SGVhZGVyKF92YWx1ZSwgX2hlYWRlciwgX3Jld3JpdGUpIHtcbiAgICAgIGNvbnN0IGxIZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmICghbEhlYWRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hlYWRlciBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoc2VsZiwgbEhlYWRlcik7XG5cbiAgICAgIGlmKCFrZXkgfHwgc2VsZltrZXldID09PSB1bmRlZmluZWQgfHwgX3Jld3JpdGUgPT09IHRydWUgfHwgKF9yZXdyaXRlID09PSB1bmRlZmluZWQgJiYgc2VsZltrZXldICE9PSBmYWxzZSkpIHtcbiAgICAgICAgc2VsZltrZXkgfHwgX2hlYWRlcl0gPSBub3JtYWxpemVWYWx1ZShfdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHNldEhlYWRlcnMgPSAoaGVhZGVycywgX3Jld3JpdGUpID0+XG4gICAgICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIChfdmFsdWUsIF9oZWFkZXIpID0+IHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSk7XG5cbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChoZWFkZXIpIHx8IGhlYWRlciBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IpIHtcbiAgICAgIHNldEhlYWRlcnMoaGVhZGVyLCB2YWx1ZU9yUmV3cml0ZSlcbiAgICB9IGVsc2UgaWYodXRpbHMuaXNTdHJpbmcoaGVhZGVyKSAmJiAoaGVhZGVyID0gaGVhZGVyLnRyaW0oKSkgJiYgIWlzVmFsaWRIZWFkZXJOYW1lKGhlYWRlcikpIHtcbiAgICAgIHNldEhlYWRlcnMocGFyc2VIZWFkZXJzKGhlYWRlciksIHZhbHVlT3JSZXdyaXRlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzSGVhZGVycyhoZWFkZXIpKSB7XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBoZWFkZXIuZW50cmllcygpKSB7XG4gICAgICAgIHNldEhlYWRlcih2YWx1ZSwga2V5LCByZXdyaXRlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZGVyICE9IG51bGwgJiYgc2V0SGVhZGVyKHZhbHVlT3JSZXdyaXRlLCBoZWFkZXIsIHJld3JpdGUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0KGhlYWRlciwgcGFyc2VyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzW2tleV07XG5cbiAgICAgICAgaWYgKCFwYXJzZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyc2VyID09PSB0cnVlKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5zKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc0Z1bmN0aW9uKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmNhbGwodGhpcywgdmFsdWUsIGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNSZWdFeHAocGFyc2VyKSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZXIuZXhlYyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJzZXIgbXVzdCBiZSBib29sZWFufHJlZ2V4cHxmdW5jdGlvbicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhcyhoZWFkZXIsIG1hdGNoZXIpIHtcbiAgICBoZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoaGVhZGVyKTtcblxuICAgIGlmIChoZWFkZXIpIHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkodGhpcywgaGVhZGVyKTtcblxuICAgICAgcmV0dXJuICEhKGtleSAmJiB0aGlzW2tleV0gIT09IHVuZGVmaW5lZCAmJiAoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZSh0aGlzLCB0aGlzW2tleV0sIGtleSwgbWF0Y2hlcikpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBkZWxldGUoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGRlbGV0ZUhlYWRlcihfaGVhZGVyKSB7XG4gICAgICBfaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoX2hlYWRlcikge1xuICAgICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIF9oZWFkZXIpO1xuXG4gICAgICAgIGlmIChrZXkgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUoc2VsZiwgc2VsZltrZXldLCBrZXksIG1hdGNoZXIpKSkge1xuICAgICAgICAgIGRlbGV0ZSBzZWxmW2tleV07XG5cbiAgICAgICAgICBkZWxldGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5KGhlYWRlcikpIHtcbiAgICAgIGhlYWRlci5mb3JFYWNoKGRlbGV0ZUhlYWRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZUhlYWRlcihoZWFkZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgY2xlYXIobWF0Y2hlcikge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKTtcbiAgICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZSh0aGlzLCB0aGlzW2tleV0sIGtleSwgbWF0Y2hlciwgdHJ1ZSkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXNba2V5XTtcbiAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XG4gIH1cblxuICBub3JtYWxpemUoZm9ybWF0KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShoZWFkZXJzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHNlbGZba2V5XSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICAgICAgZGVsZXRlIHNlbGZbaGVhZGVyXTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBub3JtYWxpemVkID0gZm9ybWF0ID8gZm9ybWF0SGVhZGVyKGhlYWRlcikgOiBTdHJpbmcoaGVhZGVyKS50cmltKCk7XG5cbiAgICAgIGlmIChub3JtYWxpemVkICE9PSBoZWFkZXIpIHtcbiAgICAgICAgZGVsZXRlIHNlbGZbaGVhZGVyXTtcbiAgICAgIH1cblxuICAgICAgc2VsZltub3JtYWxpemVkXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcblxuICAgICAgaGVhZGVyc1tub3JtYWxpemVkXSA9IHRydWU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNvbmNhdCguLi50YXJnZXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuY29uY2F0KHRoaXMsIC4uLnRhcmdldHMpO1xuICB9XG5cbiAgdG9KU09OKGFzU3RyaW5ncykge1xuICAgIGNvbnN0IG9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICB1dGlscy5mb3JFYWNoKHRoaXMsICh2YWx1ZSwgaGVhZGVyKSA9PiB7XG4gICAgICB2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9PSBmYWxzZSAmJiAob2JqW2hlYWRlcl0gPSBhc1N0cmluZ3MgJiYgdXRpbHMuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5qb2luKCcsICcpIDogdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLnRvSlNPTigpKVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSkubWFwKChbaGVhZGVyLCB2YWx1ZV0pID0+IGhlYWRlciArICc6ICcgKyB2YWx1ZSkuam9pbignXFxuJyk7XG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdBeGlvc0hlYWRlcnMnO1xuICB9XG5cbiAgc3RhdGljIGZyb20odGhpbmcpIHtcbiAgICByZXR1cm4gdGhpbmcgaW5zdGFuY2VvZiB0aGlzID8gdGhpbmcgOiBuZXcgdGhpcyh0aGluZyk7XG4gIH1cblxuICBzdGF0aWMgY29uY2F0KGZpcnN0LCAuLi50YXJnZXRzKSB7XG4gICAgY29uc3QgY29tcHV0ZWQgPSBuZXcgdGhpcyhmaXJzdCk7XG5cbiAgICB0YXJnZXRzLmZvckVhY2goKHRhcmdldCkgPT4gY29tcHV0ZWQuc2V0KHRhcmdldCkpO1xuXG4gICAgcmV0dXJuIGNvbXB1dGVkO1xuICB9XG5cbiAgc3RhdGljIGFjY2Vzc29yKGhlYWRlcikge1xuICAgIGNvbnN0IGludGVybmFscyA9IHRoaXNbJGludGVybmFsc10gPSAodGhpc1skaW50ZXJuYWxzXSA9IHtcbiAgICAgIGFjY2Vzc29yczoge31cbiAgICB9KTtcblxuICAgIGNvbnN0IGFjY2Vzc29ycyA9IGludGVybmFscy5hY2Nlc3NvcnM7XG4gICAgY29uc3QgcHJvdG90eXBlID0gdGhpcy5wcm90b3R5cGU7XG5cbiAgICBmdW5jdGlvbiBkZWZpbmVBY2Nlc3NvcihfaGVhZGVyKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWFjY2Vzc29yc1tsSGVhZGVyXSkge1xuICAgICAgICBidWlsZEFjY2Vzc29ycyhwcm90b3R5cGUsIF9oZWFkZXIpO1xuICAgICAgICBhY2Nlc3NvcnNbbEhlYWRlcl0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHV0aWxzLmlzQXJyYXkoaGVhZGVyKSA/IGhlYWRlci5mb3JFYWNoKGRlZmluZUFjY2Vzc29yKSA6IGRlZmluZUFjY2Vzc29yKGhlYWRlcik7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5BeGlvc0hlYWRlcnMuYWNjZXNzb3IoWydDb250ZW50LVR5cGUnLCAnQ29udGVudC1MZW5ndGgnLCAnQWNjZXB0JywgJ0FjY2VwdC1FbmNvZGluZycsICdVc2VyLUFnZW50JywgJ0F1dGhvcml6YXRpb24nXSk7XG5cbi8vIHJlc2VydmVkIG5hbWVzIGhvdGZpeFxudXRpbHMucmVkdWNlRGVzY3JpcHRvcnMoQXhpb3NIZWFkZXJzLnByb3RvdHlwZSwgKHt2YWx1ZX0sIGtleSkgPT4ge1xuICBsZXQgbWFwcGVkID0ga2V5WzBdLnRvVXBwZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSk7IC8vIG1hcCBgc2V0YCA9PiBgU2V0YFxuICByZXR1cm4ge1xuICAgIGdldDogKCkgPT4gdmFsdWUsXG4gICAgc2V0KGhlYWRlclZhbHVlKSB7XG4gICAgICB0aGlzW21hcHBlZF0gPSBoZWFkZXJWYWx1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG51dGlscy5mcmVlemVNZXRob2RzKEF4aW9zSGVhZGVycyk7XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zSGVhZGVycztcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi4vY29yZS9BeGlvc0hlYWRlcnMuanMnO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcGFyYW0gez9PYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZSBvYmplY3RcbiAqXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZm5zLCByZXNwb25zZSkge1xuICBjb25zdCBjb25maWcgPSB0aGlzIHx8IGRlZmF1bHRzO1xuICBjb25zdCBjb250ZXh0ID0gcmVzcG9uc2UgfHwgY29uZmlnO1xuICBjb25zdCBoZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29udGV4dC5oZWFkZXJzKTtcbiAgbGV0IGRhdGEgPSBjb250ZXh0LmRhdGE7XG5cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbi5jYWxsKGNvbmZpZywgZGF0YSwgaGVhZGVycy5ub3JtYWxpemUoKSwgcmVzcG9uc2UgPyByZXNwb25zZS5zdGF0dXMgOiB1bmRlZmluZWQpO1xuICB9KTtcblxuICBoZWFkZXJzLm5vcm1hbGl6ZSgpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIEEgYENhbmNlbGVkRXJyb3JgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3Q9fSByZXF1ZXN0IFRoZSByZXF1ZXN0LlxuICpcbiAqIEByZXR1cm5zIHtDYW5jZWxlZEVycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIEF4aW9zRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlID09IG51bGwgPyAnY2FuY2VsZWQnIDogbWVzc2FnZSwgQXhpb3NFcnJvci5FUlJfQ0FOQ0VMRUQsIGNvbmZpZywgcmVxdWVzdCk7XG4gIHRoaXMubmFtZSA9ICdDYW5jZWxlZEVycm9yJztcbn1cblxudXRpbHMuaW5oZXJpdHMoQ2FuY2VsZWRFcnJvciwgQXhpb3NFcnJvciwge1xuICBfX0NBTkNFTF9fOiB0cnVlXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsZWRFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi9BeGlvc0Vycm9yLmpzJztcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgcmVzcG9uc2UuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICBbQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRV1bTWF0aC5mbG9vcihyZXNwb25zZS5zdGF0dXMgLyAxMDApIC0gNF0sXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENhbGN1bGF0ZSBkYXRhIG1heFJhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc2FtcGxlc0NvdW50PSAxMF1cbiAqIEBwYXJhbSB7TnVtYmVyfSBbbWluPSAxMDAwXVxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBzcGVlZG9tZXRlcihzYW1wbGVzQ291bnQsIG1pbikge1xuICBzYW1wbGVzQ291bnQgPSBzYW1wbGVzQ291bnQgfHwgMTA7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IEFycmF5KHNhbXBsZXNDb3VudCk7XG4gIGNvbnN0IHRpbWVzdGFtcHMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgbGV0IGhlYWQgPSAwO1xuICBsZXQgdGFpbCA9IDA7XG4gIGxldCBmaXJzdFNhbXBsZVRTO1xuXG4gIG1pbiA9IG1pbiAhPT0gdW5kZWZpbmVkID8gbWluIDogMTAwMDtcblxuICByZXR1cm4gZnVuY3Rpb24gcHVzaChjaHVua0xlbmd0aCkge1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgICBjb25zdCBzdGFydGVkQXQgPSB0aW1lc3RhbXBzW3RhaWxdO1xuXG4gICAgaWYgKCFmaXJzdFNhbXBsZVRTKSB7XG4gICAgICBmaXJzdFNhbXBsZVRTID0gbm93O1xuICAgIH1cblxuICAgIGJ5dGVzW2hlYWRdID0gY2h1bmtMZW5ndGg7XG4gICAgdGltZXN0YW1wc1toZWFkXSA9IG5vdztcblxuICAgIGxldCBpID0gdGFpbDtcbiAgICBsZXQgYnl0ZXNDb3VudCA9IDA7XG5cbiAgICB3aGlsZSAoaSAhPT0gaGVhZCkge1xuICAgICAgYnl0ZXNDb3VudCArPSBieXRlc1tpKytdO1xuICAgICAgaSA9IGkgJSBzYW1wbGVzQ291bnQ7XG4gICAgfVxuXG4gICAgaGVhZCA9IChoZWFkICsgMSkgJSBzYW1wbGVzQ291bnQ7XG5cbiAgICBpZiAoaGVhZCA9PT0gdGFpbCkge1xuICAgICAgdGFpbCA9ICh0YWlsICsgMSkgJSBzYW1wbGVzQ291bnQ7XG4gICAgfVxuXG4gICAgaWYgKG5vdyAtIGZpcnN0U2FtcGxlVFMgPCBtaW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwYXNzZWQgPSBzdGFydGVkQXQgJiYgbm93IC0gc3RhcnRlZEF0O1xuXG4gICAgcmV0dXJuIHBhc3NlZCA/IE1hdGgucm91bmQoYnl0ZXNDb3VudCAqIDEwMDAgLyBwYXNzZWQpIDogdW5kZWZpbmVkO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzcGVlZG9tZXRlcjtcbiIsImltcG9ydCBzcGVlZG9tZXRlciBmcm9tIFwiLi9zcGVlZG9tZXRlci5qc1wiO1xuaW1wb3J0IHRocm90dGxlIGZyb20gXCIuL3Rocm90dGxlLmpzXCI7XG5pbXBvcnQgdXRpbHMgZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5cbmV4cG9ydCBjb25zdCBwcm9ncmVzc0V2ZW50UmVkdWNlciA9IChsaXN0ZW5lciwgaXNEb3dubG9hZFN0cmVhbSwgZnJlcSA9IDMpID0+IHtcbiAgbGV0IGJ5dGVzTm90aWZpZWQgPSAwO1xuICBjb25zdCBfc3BlZWRvbWV0ZXIgPSBzcGVlZG9tZXRlcig1MCwgMjUwKTtcblxuICByZXR1cm4gdGhyb3R0bGUoZSA9PiB7XG4gICAgY29uc3QgbG9hZGVkID0gZS5sb2FkZWQ7XG4gICAgY29uc3QgdG90YWwgPSBlLmxlbmd0aENvbXB1dGFibGUgPyBlLnRvdGFsIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHByb2dyZXNzQnl0ZXMgPSBsb2FkZWQgLSBieXRlc05vdGlmaWVkO1xuICAgIGNvbnN0IHJhdGUgPSBfc3BlZWRvbWV0ZXIocHJvZ3Jlc3NCeXRlcyk7XG4gICAgY29uc3QgaW5SYW5nZSA9IGxvYWRlZCA8PSB0b3RhbDtcblxuICAgIGJ5dGVzTm90aWZpZWQgPSBsb2FkZWQ7XG5cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbG9hZGVkLFxuICAgICAgdG90YWwsXG4gICAgICBwcm9ncmVzczogdG90YWwgPyAobG9hZGVkIC8gdG90YWwpIDogdW5kZWZpbmVkLFxuICAgICAgYnl0ZXM6IHByb2dyZXNzQnl0ZXMsXG4gICAgICByYXRlOiByYXRlID8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGVzdGltYXRlZDogcmF0ZSAmJiB0b3RhbCAmJiBpblJhbmdlID8gKHRvdGFsIC0gbG9hZGVkKSAvIHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBldmVudDogZSxcbiAgICAgIGxlbmd0aENvbXB1dGFibGU6IHRvdGFsICE9IG51bGwsXG4gICAgICBbaXNEb3dubG9hZFN0cmVhbSA/ICdkb3dubG9hZCcgOiAndXBsb2FkJ106IHRydWVcbiAgICB9O1xuXG4gICAgbGlzdGVuZXIoZGF0YSk7XG4gIH0sIGZyZXEpO1xufVxuXG5leHBvcnQgY29uc3QgcHJvZ3Jlc3NFdmVudERlY29yYXRvciA9ICh0b3RhbCwgdGhyb3R0bGVkKSA9PiB7XG4gIGNvbnN0IGxlbmd0aENvbXB1dGFibGUgPSB0b3RhbCAhPSBudWxsO1xuXG4gIHJldHVybiBbKGxvYWRlZCkgPT4gdGhyb3R0bGVkWzBdKHtcbiAgICBsZW5ndGhDb21wdXRhYmxlLFxuICAgIHRvdGFsLFxuICAgIGxvYWRlZFxuICB9KSwgdGhyb3R0bGVkWzFdXTtcbn1cblxuZXhwb3J0IGNvbnN0IGFzeW5jRGVjb3JhdG9yID0gKGZuKSA9PiAoLi4uYXJncykgPT4gdXRpbHMuYXNhcCgoKSA9PiBmbiguLi5hcmdzKSk7XG4iLCIvKipcbiAqIFRocm90dGxlIGRlY29yYXRvclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7TnVtYmVyfSBmcmVxXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gdGhyb3R0bGUoZm4sIGZyZXEpIHtcbiAgbGV0IHRpbWVzdGFtcCA9IDA7XG4gIGxldCB0aHJlc2hvbGQgPSAxMDAwIC8gZnJlcTtcbiAgbGV0IGxhc3RBcmdzO1xuICBsZXQgdGltZXI7XG5cbiAgY29uc3QgaW52b2tlID0gKGFyZ3MsIG5vdyA9IERhdGUubm93KCkpID0+IHtcbiAgICB0aW1lc3RhbXAgPSBub3c7XG4gICAgbGFzdEFyZ3MgPSBudWxsO1xuICAgIGlmICh0aW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIHRpbWVyID0gbnVsbDtcbiAgICB9XG4gICAgZm4uYXBwbHkobnVsbCwgYXJncyk7XG4gIH1cblxuICBjb25zdCB0aHJvdHRsZWQgPSAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgY29uc3QgcGFzc2VkID0gbm93IC0gdGltZXN0YW1wO1xuICAgIGlmICggcGFzc2VkID49IHRocmVzaG9sZCkge1xuICAgICAgaW52b2tlKGFyZ3MsIG5vdyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3RBcmdzID0gYXJncztcbiAgICAgIGlmICghdGltZXIpIHtcbiAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICAgICAgaW52b2tlKGxhc3RBcmdzKVxuICAgICAgICB9LCB0aHJlc2hvbGQgLSBwYXNzZWQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGZsdXNoID0gKCkgPT4gbGFzdEFyZ3MgJiYgaW52b2tlKGxhc3RBcmdzKTtcblxuICByZXR1cm4gW3Rocm90dGxlZCwgZmx1c2hdO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0aHJvdHRsZTtcbiIsImltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/ICgob3JpZ2luLCBpc01TSUUpID0+ICh1cmwpID0+IHtcbiAgdXJsID0gbmV3IFVSTCh1cmwsIHBsYXRmb3JtLm9yaWdpbik7XG5cbiAgcmV0dXJuIChcbiAgICBvcmlnaW4ucHJvdG9jb2wgPT09IHVybC5wcm90b2NvbCAmJlxuICAgIG9yaWdpbi5ob3N0ID09PSB1cmwuaG9zdCAmJlxuICAgIChpc01TSUUgfHwgb3JpZ2luLnBvcnQgPT09IHVybC5wb3J0KVxuICApO1xufSkoXG4gIG5ldyBVUkwocGxhdGZvcm0ub3JpZ2luKSxcbiAgcGxhdGZvcm0ubmF2aWdhdG9yICYmIC8obXNpZXx0cmlkZW50KS9pLnRlc3QocGxhdGZvcm0ubmF2aWdhdG9yLnVzZXJBZ2VudClcbikgOiAoKSA9PiB0cnVlO1xuIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52ID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAge1xuICAgIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgY29uc3QgY29va2llID0gW25hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpXTtcblxuICAgICAgdXRpbHMuaXNOdW1iZXIoZXhwaXJlcykgJiYgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuXG4gICAgICB1dGlscy5pc1N0cmluZyhwYXRoKSAmJiBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG5cbiAgICAgIHV0aWxzLmlzU3RyaW5nKGRvbWFpbikgJiYgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcblxuICAgICAgc2VjdXJlID09PSB0cnVlICYmIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcblxuICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgfSxcblxuICAgIHJlYWQobmFtZSkge1xuICAgICAgY29uc3QgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlKG5hbWUpIHtcbiAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgfVxuICB9XG5cbiAgOlxuXG4gIC8vIE5vbi1zdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAge1xuICAgIHdyaXRlKCkge30sXG4gICAgcmVhZCgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgcmVtb3ZlKCkge31cbiAgfTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgaXNBYnNvbHV0ZVVSTCBmcm9tICcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMnO1xuaW1wb3J0IGNvbWJpbmVVUkxzIGZyb20gJy4uL2hlbHBlcnMvY29tYmluZVVSTHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLz9cXC8kLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL0F4aW9zSGVhZGVycy5qc1wiO1xuXG5jb25zdCBoZWFkZXJzVG9PYmplY3QgPSAodGhpbmcpID0+IHRoaW5nIGluc3RhbmNlb2YgQXhpb3NIZWFkZXJzID8geyAuLi50aGluZyB9IDogdGhpbmc7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIGNvbnN0IGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlLCBwcm9wLCBjYXNlbGVzcykge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UuY2FsbCh7Y2FzZWxlc3N9LCB0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMoYSwgYiwgcHJvcCAsIGNhc2VsZXNzKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIsIHByb3AgLCBjYXNlbGVzcyk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEsIHByb3AgLCBjYXNlbGVzcyk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhhLCBiLCBwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBtZXJnZU1hcCA9IHtcbiAgICB1cmw6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgbWV0aG9kOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGRhdGE6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgYmFzZVVSTDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHBhcmFtc1NlcmlhbGl6ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0TWVzc2FnZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoQ3JlZGVudGlhbHM6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgd2l0aFhTUkZUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBhZGFwdGVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlVHlwZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmQ29va2llTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmSGVhZGVyTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvblVwbG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uRG93bmxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBkZWNvbXByZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heENvbnRlbnRMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Qm9keUxlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBiZWZvcmVSZWRpcmVjdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc3BvcnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cEFnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBzQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgY2FuY2VsVG9rZW46IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgc29ja2V0UGF0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZUVuY29kaW5nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHZhbGlkYXRlU3RhdHVzOiBtZXJnZURpcmVjdEtleXMsXG4gICAgaGVhZGVyczogKGEsIGIgLCBwcm9wKSA9PiBtZXJnZURlZXBQcm9wZXJ0aWVzKGhlYWRlcnNUb09iamVjdChhKSwgaGVhZGVyc1RvT2JqZWN0KGIpLHByb3AsIHRydWUpXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBjb25maWcxLCBjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgY29uc3QgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIGNvbnN0IGNvbmZpZ1ZhbHVlID0gbWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSwgcHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufVxuIiwiaW1wb3J0IHBsYXRmb3JtIGZyb20gXCIuLi9wbGF0Zm9ybS9pbmRleC5qc1wiO1xuaW1wb3J0IHV0aWxzIGZyb20gXCIuLi91dGlscy5qc1wiO1xuaW1wb3J0IGlzVVJMU2FtZU9yaWdpbiBmcm9tIFwiLi9pc1VSTFNhbWVPcmlnaW4uanNcIjtcbmltcG9ydCBjb29raWVzIGZyb20gXCIuL2Nvb2tpZXMuanNcIjtcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gXCIuLi9jb3JlL2J1aWxkRnVsbFBhdGguanNcIjtcbmltcG9ydCBtZXJnZUNvbmZpZyBmcm9tIFwiLi4vY29yZS9tZXJnZUNvbmZpZy5qc1wiO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi4vY29yZS9BeGlvc0hlYWRlcnMuanNcIjtcbmltcG9ydCBidWlsZFVSTCBmcm9tIFwiLi9idWlsZFVSTC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoY29uZmlnKSA9PiB7XG4gIGNvbnN0IG5ld0NvbmZpZyA9IG1lcmdlQ29uZmlnKHt9LCBjb25maWcpO1xuXG4gIGxldCB7ZGF0YSwgd2l0aFhTUkZUb2tlbiwgeHNyZkhlYWRlck5hbWUsIHhzcmZDb29raWVOYW1lLCBoZWFkZXJzLCBhdXRofSA9IG5ld0NvbmZpZztcblxuICBuZXdDb25maWcuaGVhZGVycyA9IGhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShoZWFkZXJzKTtcblxuICBuZXdDb25maWcudXJsID0gYnVpbGRVUkwoYnVpbGRGdWxsUGF0aChuZXdDb25maWcuYmFzZVVSTCwgbmV3Q29uZmlnLnVybCksIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKTtcblxuICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gIGlmIChhdXRoKSB7XG4gICAgaGVhZGVycy5zZXQoJ0F1dGhvcml6YXRpb24nLCAnQmFzaWMgJyArXG4gICAgICBidG9hKChhdXRoLnVzZXJuYW1lIHx8ICcnKSArICc6JyArIChhdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGF1dGgucGFzc3dvcmQpKSA6ICcnKSlcbiAgICApO1xuICB9XG5cbiAgbGV0IGNvbnRlbnRUeXBlO1xuXG4gIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpKSB7XG4gICAgaWYgKHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiB8fCBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYpIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUodW5kZWZpbmVkKTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH0gZWxzZSBpZiAoKGNvbnRlbnRUeXBlID0gaGVhZGVycy5nZXRDb250ZW50VHlwZSgpKSAhPT0gZmFsc2UpIHtcbiAgICAgIC8vIGZpeCBzZW1pY29sb24gZHVwbGljYXRpb24gaXNzdWUgZm9yIFJlYWN0TmF0aXZlIEZvcm1EYXRhIGltcGxlbWVudGF0aW9uXG4gICAgICBjb25zdCBbdHlwZSwgLi4udG9rZW5zXSA9IGNvbnRlbnRUeXBlID8gY29udGVudFR5cGUuc3BsaXQoJzsnKS5tYXAodG9rZW4gPT4gdG9rZW4udHJpbSgpKS5maWx0ZXIoQm9vbGVhbikgOiBbXTtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoW3R5cGUgfHwgJ211bHRpcGFydC9mb3JtLWRhdGEnLCAuLi50b2tlbnNdLmpvaW4oJzsgJykpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCB4c3JmIGhlYWRlclxuICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cblxuICBpZiAocGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52KSB7XG4gICAgd2l0aFhTUkZUb2tlbiAmJiB1dGlscy5pc0Z1bmN0aW9uKHdpdGhYU1JGVG9rZW4pICYmICh3aXRoWFNSRlRva2VuID0gd2l0aFhTUkZUb2tlbihuZXdDb25maWcpKTtcblxuICAgIGlmICh3aXRoWFNSRlRva2VuIHx8ICh3aXRoWFNSRlRva2VuICE9PSBmYWxzZSAmJiBpc1VSTFNhbWVPcmlnaW4obmV3Q29uZmlnLnVybCkpKSB7XG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIGNvbnN0IHhzcmZWYWx1ZSA9IHhzcmZIZWFkZXJOYW1lICYmIHhzcmZDb29raWVOYW1lICYmIGNvb2tpZXMucmVhZCh4c3JmQ29va2llTmFtZSk7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgaGVhZGVycy5zZXQoeHNyZkhlYWRlck5hbWUsIHhzcmZWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0NvbmZpZztcbn1cblxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHNldHRsZSBmcm9tICcuLy4uL2NvcmUvc2V0dGxlLmpzJztcbmltcG9ydCB0cmFuc2l0aW9uYWxEZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBwYXJzZVByb3RvY29sIGZyb20gJy4uL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQge3Byb2dyZXNzRXZlbnRSZWR1Y2VyfSBmcm9tICcuLi9oZWxwZXJzL3Byb2dyZXNzRXZlbnRSZWR1Y2VyLmpzJztcbmltcG9ydCByZXNvbHZlQ29uZmlnIGZyb20gXCIuLi9oZWxwZXJzL3Jlc29sdmVDb25maWcuanNcIjtcblxuY29uc3QgaXNYSFJBZGFwdGVyU3VwcG9ydGVkID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJztcblxuZXhwb3J0IGRlZmF1bHQgaXNYSFJBZGFwdGVyU3VwcG9ydGVkICYmIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBjb25zdCBfY29uZmlnID0gcmVzb2x2ZUNvbmZpZyhjb25maWcpO1xuICAgIGxldCByZXF1ZXN0RGF0YSA9IF9jb25maWcuZGF0YTtcbiAgICBjb25zdCByZXF1ZXN0SGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKF9jb25maWcuaGVhZGVycykubm9ybWFsaXplKCk7XG4gICAgbGV0IHtyZXNwb25zZVR5cGUsIG9uVXBsb2FkUHJvZ3Jlc3MsIG9uRG93bmxvYWRQcm9ncmVzc30gPSBfY29uZmlnO1xuICAgIGxldCBvbkNhbmNlbGVkO1xuICAgIGxldCB1cGxvYWRUaHJvdHRsZWQsIGRvd25sb2FkVGhyb3R0bGVkO1xuICAgIGxldCBmbHVzaFVwbG9hZCwgZmx1c2hEb3dubG9hZDtcblxuICAgIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICBmbHVzaFVwbG9hZCAmJiBmbHVzaFVwbG9hZCgpOyAvLyBmbHVzaCBldmVudHNcbiAgICAgIGZsdXNoRG93bmxvYWQgJiYgZmx1c2hEb3dubG9hZCgpOyAvLyBmbHVzaCBldmVudHNcblxuICAgICAgX2NvbmZpZy5jYW5jZWxUb2tlbiAmJiBfY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuXG4gICAgICBfY29uZmlnLnNpZ25hbCAmJiBfY29uZmlnLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgIH1cblxuICAgIGxldCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICByZXF1ZXN0Lm9wZW4oX2NvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgX2NvbmZpZy51cmwsIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBfY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIGNvbnN0IHJlc3BvbnNlSGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKFxuICAgICAgICAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ICYmIHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcbiAgICAgICk7XG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nID9cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKGZ1bmN0aW9uIF9yZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCBmdW5jdGlvbiBfcmVqZWN0KGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoJ29ubG9hZGVuZCcgaW4gcmVxdWVzdCkge1xuICAgICAgLy8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbiAgICAgIHJlcXVlc3Qub25sb2FkZW5kID0gb25sb2FkZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG4gICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVhZHlzdGF0ZSBoYW5kbGVyIGlzIGNhbGxpbmcgYmVmb3JlIG9uZXJyb3Igb3Igb250aW1lb3V0IGhhbmRsZXJzLFxuICAgICAgICAvLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG4gICAgICAgIHNldFRpbWVvdXQob25sb2FkZW5kKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCwgY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdOZXR3b3JrIEVycm9yJywgQXhpb3NFcnJvci5FUlJfTkVUV09SSywgY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIGxldCB0aW1lb3V0RXJyb3JNZXNzYWdlID0gX2NvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIF9jb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcgOiAndGltZW91dCBleGNlZWRlZCc7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSBfY29uZmlnLnRyYW5zaXRpb25hbCB8fCB0cmFuc2l0aW9uYWxEZWZhdWx0cztcbiAgICAgIGlmIChfY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IF9jb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyBBeGlvc0Vycm9yLkVUSU1FRE9VVCA6IEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICByZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkICYmIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKG51bGwpO1xuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMudG9KU09OKCksIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKF9jb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIV9jb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IF9jb25maWcucmVzcG9uc2VUeXBlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAob25Eb3dubG9hZFByb2dyZXNzKSB7XG4gICAgICAoW2Rvd25sb2FkVGhyb3R0bGVkLCBmbHVzaERvd25sb2FkXSA9IHByb2dyZXNzRXZlbnRSZWR1Y2VyKG9uRG93bmxvYWRQcm9ncmVzcywgdHJ1ZSkpO1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGRvd25sb2FkVGhyb3R0bGVkKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmIChvblVwbG9hZFByb2dyZXNzICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICAoW3VwbG9hZFRocm90dGxlZCwgZmx1c2hVcGxvYWRdID0gcHJvZ3Jlc3NFdmVudFJlZHVjZXIob25VcGxvYWRQcm9ncmVzcykpO1xuXG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHVwbG9hZFRocm90dGxlZCk7XG5cbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlbmQnLCBmbHVzaFVwbG9hZCk7XG4gICAgfVxuXG4gICAgaWYgKF9jb25maWcuY2FuY2VsVG9rZW4gfHwgX2NvbmZpZy5zaWduYWwpIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBvbkNhbmNlbGVkID0gY2FuY2VsID0+IHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdCghY2FuY2VsIHx8IGNhbmNlbC50eXBlID8gbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnLCByZXF1ZXN0KSA6IGNhbmNlbCk7XG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBfY29uZmlnLmNhbmNlbFRva2VuICYmIF9jb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKF9jb25maWcuc2lnbmFsKSB7XG4gICAgICAgIF9jb25maWcuc2lnbmFsLmFib3J0ZWQgPyBvbkNhbmNlbGVkKCkgOiBfY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RvY29sID0gcGFyc2VQcm90b2NvbChfY29uZmlnLnVybCk7XG5cbiAgICBpZiAocHJvdG9jb2wgJiYgcGxhdGZvcm0ucHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wgKyAnOicsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBjb25maWcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZVByb3RvY29sKHVybCkge1xuICBjb25zdCBtYXRjaCA9IC9eKFstK1xcd117MSwyNX0pKDo/XFwvXFwvfDopLy5leGVjKHVybCk7XG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXSB8fCAnJztcbn1cbiIsImltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gXCIuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qc1wiO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuY29uc3QgY29tcG9zZVNpZ25hbHMgPSAoc2lnbmFscywgdGltZW91dCkgPT4ge1xuICBjb25zdCB7bGVuZ3RofSA9IChzaWduYWxzID0gc2lnbmFscyA/IHNpZ25hbHMuZmlsdGVyKEJvb2xlYW4pIDogW10pO1xuXG4gIGlmICh0aW1lb3V0IHx8IGxlbmd0aCkge1xuICAgIGxldCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuXG4gICAgbGV0IGFib3J0ZWQ7XG5cbiAgICBjb25zdCBvbmFib3J0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgaWYgKCFhYm9ydGVkKSB7XG4gICAgICAgIGFib3J0ZWQgPSB0cnVlO1xuICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICBjb25zdCBlcnIgPSByZWFzb24gaW5zdGFuY2VvZiBFcnJvciA/IHJlYXNvbiA6IHRoaXMucmVhc29uO1xuICAgICAgICBjb250cm9sbGVyLmFib3J0KGVyciBpbnN0YW5jZW9mIEF4aW9zRXJyb3IgPyBlcnIgOiBuZXcgQ2FuY2VsZWRFcnJvcihlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogZXJyKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHRpbWVyID0gdGltZW91dCAmJiBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgIG9uYWJvcnQobmV3IEF4aW9zRXJyb3IoYHRpbWVvdXQgJHt0aW1lb3V0fSBvZiBtcyBleGNlZWRlZGAsIEF4aW9zRXJyb3IuRVRJTUVET1VUKSlcbiAgICB9LCB0aW1lb3V0KVxuXG4gICAgY29uc3QgdW5zdWJzY3JpYmUgPSAoKSA9PiB7XG4gICAgICBpZiAoc2lnbmFscykge1xuICAgICAgICB0aW1lciAmJiBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICAgIHNpZ25hbHMuZm9yRWFjaChzaWduYWwgPT4ge1xuICAgICAgICAgIHNpZ25hbC51bnN1YnNjcmliZSA/IHNpZ25hbC51bnN1YnNjcmliZShvbmFib3J0KSA6IHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uYWJvcnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2lnbmFscyA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2lnbmFscy5mb3JFYWNoKChzaWduYWwpID0+IHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uYWJvcnQpKTtcblxuICAgIGNvbnN0IHtzaWduYWx9ID0gY29udHJvbGxlcjtcblxuICAgIHNpZ25hbC51bnN1YnNjcmliZSA9ICgpID0+IHV0aWxzLmFzYXAodW5zdWJzY3JpYmUpO1xuXG4gICAgcmV0dXJuIHNpZ25hbDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb3NlU2lnbmFscztcbiIsIlxuZXhwb3J0IGNvbnN0IHN0cmVhbUNodW5rID0gZnVuY3Rpb24qIChjaHVuaywgY2h1bmtTaXplKSB7XG4gIGxldCBsZW4gPSBjaHVuay5ieXRlTGVuZ3RoO1xuXG4gIGlmICghY2h1bmtTaXplIHx8IGxlbiA8IGNodW5rU2l6ZSkge1xuICAgIHlpZWxkIGNodW5rO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBwb3MgPSAwO1xuICBsZXQgZW5kO1xuXG4gIHdoaWxlIChwb3MgPCBsZW4pIHtcbiAgICBlbmQgPSBwb3MgKyBjaHVua1NpemU7XG4gICAgeWllbGQgY2h1bmsuc2xpY2UocG9zLCBlbmQpO1xuICAgIHBvcyA9IGVuZDtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgcmVhZEJ5dGVzID0gYXN5bmMgZnVuY3Rpb24qIChpdGVyYWJsZSwgY2h1bmtTaXplKSB7XG4gIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgcmVhZFN0cmVhbShpdGVyYWJsZSkpIHtcbiAgICB5aWVsZCogc3RyZWFtQ2h1bmsoY2h1bmssIGNodW5rU2l6ZSk7XG4gIH1cbn1cblxuY29uc3QgcmVhZFN0cmVhbSA9IGFzeW5jIGZ1bmN0aW9uKiAoc3RyZWFtKSB7XG4gIGlmIChzdHJlYW1bU3ltYm9sLmFzeW5jSXRlcmF0b3JdKSB7XG4gICAgeWllbGQqIHN0cmVhbTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCByZWFkZXIgPSBzdHJlYW0uZ2V0UmVhZGVyKCk7XG4gIHRyeSB7XG4gICAgZm9yICg7Oykge1xuICAgICAgY29uc3Qge2RvbmUsIHZhbHVlfSA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG4gICAgICBpZiAoZG9uZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHlpZWxkIHZhbHVlO1xuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICBhd2FpdCByZWFkZXIuY2FuY2VsKCk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHRyYWNrU3RyZWFtID0gKHN0cmVhbSwgY2h1bmtTaXplLCBvblByb2dyZXNzLCBvbkZpbmlzaCkgPT4ge1xuICBjb25zdCBpdGVyYXRvciA9IHJlYWRCeXRlcyhzdHJlYW0sIGNodW5rU2l6ZSk7XG5cbiAgbGV0IGJ5dGVzID0gMDtcbiAgbGV0IGRvbmU7XG4gIGxldCBfb25GaW5pc2ggPSAoZSkgPT4ge1xuICAgIGlmICghZG9uZSkge1xuICAgICAgZG9uZSA9IHRydWU7XG4gICAgICBvbkZpbmlzaCAmJiBvbkZpbmlzaChlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICBhc3luYyBwdWxsKGNvbnRyb2xsZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHtkb25lLCB2YWx1ZX0gPSBhd2FpdCBpdGVyYXRvci5uZXh0KCk7XG5cbiAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgIF9vbkZpbmlzaCgpO1xuICAgICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbGVuID0gdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKG9uUHJvZ3Jlc3MpIHtcbiAgICAgICAgICBsZXQgbG9hZGVkQnl0ZXMgPSBieXRlcyArPSBsZW47XG4gICAgICAgICAgb25Qcm9ncmVzcyhsb2FkZWRCeXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKG5ldyBVaW50OEFycmF5KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX29uRmluaXNoKGVycik7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNhbmNlbChyZWFzb24pIHtcbiAgICAgIF9vbkZpbmlzaChyZWFzb24pO1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yLnJldHVybigpO1xuICAgIH1cbiAgfSwge1xuICAgIGhpZ2hXYXRlck1hcms6IDJcbiAgfSlcbn1cbiIsImltcG9ydCBwbGF0Zm9ybSBmcm9tIFwiLi4vcGxhdGZvcm0vaW5kZXguanNcIjtcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gXCIuLi9jb3JlL0F4aW9zRXJyb3IuanNcIjtcbmltcG9ydCBjb21wb3NlU2lnbmFscyBmcm9tIFwiLi4vaGVscGVycy9jb21wb3NlU2lnbmFscy5qc1wiO1xuaW1wb3J0IHt0cmFja1N0cmVhbX0gZnJvbSBcIi4uL2hlbHBlcnMvdHJhY2tTdHJlYW0uanNcIjtcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQge3Byb2dyZXNzRXZlbnRSZWR1Y2VyLCBwcm9ncmVzc0V2ZW50RGVjb3JhdG9yLCBhc3luY0RlY29yYXRvcn0gZnJvbSBcIi4uL2hlbHBlcnMvcHJvZ3Jlc3NFdmVudFJlZHVjZXIuanNcIjtcbmltcG9ydCByZXNvbHZlQ29uZmlnIGZyb20gXCIuLi9oZWxwZXJzL3Jlc29sdmVDb25maWcuanNcIjtcbmltcG9ydCBzZXR0bGUgZnJvbSBcIi4uL2NvcmUvc2V0dGxlLmpzXCI7XG5cbmNvbnN0IGlzRmV0Y2hTdXBwb3J0ZWQgPSB0eXBlb2YgZmV0Y2ggPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFJlcXVlc3QgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFJlc3BvbnNlID09PSAnZnVuY3Rpb24nO1xuY29uc3QgaXNSZWFkYWJsZVN0cmVhbVN1cHBvcnRlZCA9IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgdHlwZW9mIFJlYWRhYmxlU3RyZWFtID09PSAnZnVuY3Rpb24nO1xuXG4vLyB1c2VkIG9ubHkgaW5zaWRlIHRoZSBmZXRjaCBhZGFwdGVyXG5jb25zdCBlbmNvZGVUZXh0ID0gaXNGZXRjaFN1cHBvcnRlZCAmJiAodHlwZW9mIFRleHRFbmNvZGVyID09PSAnZnVuY3Rpb24nID9cbiAgICAoKGVuY29kZXIpID0+IChzdHIpID0+IGVuY29kZXIuZW5jb2RlKHN0cikpKG5ldyBUZXh0RW5jb2RlcigpKSA6XG4gICAgYXN5bmMgKHN0cikgPT4gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgbmV3IFJlc3BvbnNlKHN0cikuYXJyYXlCdWZmZXIoKSlcbik7XG5cbmNvbnN0IHRlc3QgPSAoZm4sIC4uLmFyZ3MpID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFmbiguLi5hcmdzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmNvbnN0IHN1cHBvcnRzUmVxdWVzdFN0cmVhbSA9IGlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQgJiYgdGVzdCgoKSA9PiB7XG4gIGxldCBkdXBsZXhBY2Nlc3NlZCA9IGZhbHNlO1xuXG4gIGNvbnN0IGhhc0NvbnRlbnRUeXBlID0gbmV3IFJlcXVlc3QocGxhdGZvcm0ub3JpZ2luLCB7XG4gICAgYm9keTogbmV3IFJlYWRhYmxlU3RyZWFtKCksXG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgZ2V0IGR1cGxleCgpIHtcbiAgICAgIGR1cGxleEFjY2Vzc2VkID0gdHJ1ZTtcbiAgICAgIHJldHVybiAnaGFsZic7XG4gICAgfSxcbiAgfSkuaGVhZGVycy5oYXMoJ0NvbnRlbnQtVHlwZScpO1xuXG4gIHJldHVybiBkdXBsZXhBY2Nlc3NlZCAmJiAhaGFzQ29udGVudFR5cGU7XG59KTtcblxuY29uc3QgREVGQVVMVF9DSFVOS19TSVpFID0gNjQgKiAxMDI0O1xuXG5jb25zdCBzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtID0gaXNSZWFkYWJsZVN0cmVhbVN1cHBvcnRlZCAmJlxuICB0ZXN0KCgpID0+IHV0aWxzLmlzUmVhZGFibGVTdHJlYW0obmV3IFJlc3BvbnNlKCcnKS5ib2R5KSk7XG5cblxuY29uc3QgcmVzb2x2ZXJzID0ge1xuICBzdHJlYW06IHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gJiYgKChyZXMpID0+IHJlcy5ib2R5KVxufTtcblxuaXNGZXRjaFN1cHBvcnRlZCAmJiAoKChyZXMpID0+IHtcbiAgWyd0ZXh0JywgJ2FycmF5QnVmZmVyJywgJ2Jsb2InLCAnZm9ybURhdGEnLCAnc3RyZWFtJ10uZm9yRWFjaCh0eXBlID0+IHtcbiAgICAhcmVzb2x2ZXJzW3R5cGVdICYmIChyZXNvbHZlcnNbdHlwZV0gPSB1dGlscy5pc0Z1bmN0aW9uKHJlc1t0eXBlXSkgPyAocmVzKSA9PiByZXNbdHlwZV0oKSA6XG4gICAgICAoXywgY29uZmlnKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKGBSZXNwb25zZSB0eXBlICcke3R5cGV9JyBpcyBub3Qgc3VwcG9ydGVkYCwgQXhpb3NFcnJvci5FUlJfTk9UX1NVUFBPUlQsIGNvbmZpZyk7XG4gICAgICB9KVxuICB9KTtcbn0pKG5ldyBSZXNwb25zZSkpO1xuXG5jb25zdCBnZXRCb2R5TGVuZ3RoID0gYXN5bmMgKGJvZHkpID0+IHtcbiAgaWYgKGJvZHkgPT0gbnVsbCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgaWYodXRpbHMuaXNCbG9iKGJvZHkpKSB7XG4gICAgcmV0dXJuIGJvZHkuc2l6ZTtcbiAgfVxuXG4gIGlmKHV0aWxzLmlzU3BlY0NvbXBsaWFudEZvcm0oYm9keSkpIHtcbiAgICBjb25zdCBfcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHBsYXRmb3JtLm9yaWdpbiwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5LFxuICAgIH0pO1xuICAgIHJldHVybiAoYXdhaXQgX3JlcXVlc3QuYXJyYXlCdWZmZXIoKSkuYnl0ZUxlbmd0aDtcbiAgfVxuXG4gIGlmKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpIHx8IHV0aWxzLmlzQXJyYXlCdWZmZXIoYm9keSkpIHtcbiAgICByZXR1cm4gYm9keS5ieXRlTGVuZ3RoO1xuICB9XG5cbiAgaWYodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoYm9keSkpIHtcbiAgICBib2R5ID0gYm9keSArICcnO1xuICB9XG5cbiAgaWYodXRpbHMuaXNTdHJpbmcoYm9keSkpIHtcbiAgICByZXR1cm4gKGF3YWl0IGVuY29kZVRleHQoYm9keSkpLmJ5dGVMZW5ndGg7XG4gIH1cbn1cblxuY29uc3QgcmVzb2x2ZUJvZHlMZW5ndGggPSBhc3luYyAoaGVhZGVycywgYm9keSkgPT4ge1xuICBjb25zdCBsZW5ndGggPSB1dGlscy50b0Zpbml0ZU51bWJlcihoZWFkZXJzLmdldENvbnRlbnRMZW5ndGgoKSk7XG5cbiAgcmV0dXJuIGxlbmd0aCA9PSBudWxsID8gZ2V0Qm9keUxlbmd0aChib2R5KSA6IGxlbmd0aDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNGZXRjaFN1cHBvcnRlZCAmJiAoYXN5bmMgKGNvbmZpZykgPT4ge1xuICBsZXQge1xuICAgIHVybCxcbiAgICBtZXRob2QsXG4gICAgZGF0YSxcbiAgICBzaWduYWwsXG4gICAgY2FuY2VsVG9rZW4sXG4gICAgdGltZW91dCxcbiAgICBvbkRvd25sb2FkUHJvZ3Jlc3MsXG4gICAgb25VcGxvYWRQcm9ncmVzcyxcbiAgICByZXNwb25zZVR5cGUsXG4gICAgaGVhZGVycyxcbiAgICB3aXRoQ3JlZGVudGlhbHMgPSAnc2FtZS1vcmlnaW4nLFxuICAgIGZldGNoT3B0aW9uc1xuICB9ID0gcmVzb2x2ZUNvbmZpZyhjb25maWcpO1xuXG4gIHJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZSA/IChyZXNwb25zZVR5cGUgKyAnJykudG9Mb3dlckNhc2UoKSA6ICd0ZXh0JztcblxuICBsZXQgY29tcG9zZWRTaWduYWwgPSBjb21wb3NlU2lnbmFscyhbc2lnbmFsLCBjYW5jZWxUb2tlbiAmJiBjYW5jZWxUb2tlbi50b0Fib3J0U2lnbmFsKCldLCB0aW1lb3V0KTtcblxuICBsZXQgcmVxdWVzdDtcblxuICBjb25zdCB1bnN1YnNjcmliZSA9IGNvbXBvc2VkU2lnbmFsICYmIGNvbXBvc2VkU2lnbmFsLnVuc3Vic2NyaWJlICYmICgoKSA9PiB7XG4gICAgICBjb21wb3NlZFNpZ25hbC51bnN1YnNjcmliZSgpO1xuICB9KTtcblxuICBsZXQgcmVxdWVzdENvbnRlbnRMZW5ndGg7XG5cbiAgdHJ5IHtcbiAgICBpZiAoXG4gICAgICBvblVwbG9hZFByb2dyZXNzICYmIHN1cHBvcnRzUmVxdWVzdFN0cmVhbSAmJiBtZXRob2QgIT09ICdnZXQnICYmIG1ldGhvZCAhPT0gJ2hlYWQnICYmXG4gICAgICAocmVxdWVzdENvbnRlbnRMZW5ndGggPSBhd2FpdCByZXNvbHZlQm9keUxlbmd0aChoZWFkZXJzLCBkYXRhKSkgIT09IDBcbiAgICApIHtcbiAgICAgIGxldCBfcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHVybCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogZGF0YSxcbiAgICAgICAgZHVwbGV4OiBcImhhbGZcIlxuICAgICAgfSk7XG5cbiAgICAgIGxldCBjb250ZW50VHlwZUhlYWRlcjtcblxuICAgICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgJiYgKGNvbnRlbnRUeXBlSGVhZGVyID0gX3JlcXVlc3QuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSkge1xuICAgICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKGNvbnRlbnRUeXBlSGVhZGVyKVxuICAgICAgfVxuXG4gICAgICBpZiAoX3JlcXVlc3QuYm9keSkge1xuICAgICAgICBjb25zdCBbb25Qcm9ncmVzcywgZmx1c2hdID0gcHJvZ3Jlc3NFdmVudERlY29yYXRvcihcbiAgICAgICAgICByZXF1ZXN0Q29udGVudExlbmd0aCxcbiAgICAgICAgICBwcm9ncmVzc0V2ZW50UmVkdWNlcihhc3luY0RlY29yYXRvcihvblVwbG9hZFByb2dyZXNzKSlcbiAgICAgICAgKTtcblxuICAgICAgICBkYXRhID0gdHJhY2tTdHJlYW0oX3JlcXVlc3QuYm9keSwgREVGQVVMVF9DSFVOS19TSVpFLCBvblByb2dyZXNzLCBmbHVzaCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF1dGlscy5pc1N0cmluZyh3aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICB3aXRoQ3JlZGVudGlhbHMgPSB3aXRoQ3JlZGVudGlhbHMgPyAnaW5jbHVkZScgOiAnb21pdCc7XG4gICAgfVxuXG4gICAgLy8gQ2xvdWRmbGFyZSBXb3JrZXJzIHRocm93cyB3aGVuIGNyZWRlbnRpYWxzIGFyZSBkZWZpbmVkXG4gICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jbG91ZGZsYXJlL3dvcmtlcmQvaXNzdWVzLzkwMlxuICAgIGNvbnN0IGlzQ3JlZGVudGlhbHNTdXBwb3J0ZWQgPSBcImNyZWRlbnRpYWxzXCIgaW4gUmVxdWVzdC5wcm90b3R5cGU7XG4gICAgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHVybCwge1xuICAgICAgLi4uZmV0Y2hPcHRpb25zLFxuICAgICAgc2lnbmFsOiBjb21wb3NlZFNpZ25hbCxcbiAgICAgIG1ldGhvZDogbWV0aG9kLnRvVXBwZXJDYXNlKCksXG4gICAgICBoZWFkZXJzOiBoZWFkZXJzLm5vcm1hbGl6ZSgpLnRvSlNPTigpLFxuICAgICAgYm9keTogZGF0YSxcbiAgICAgIGR1cGxleDogXCJoYWxmXCIsXG4gICAgICBjcmVkZW50aWFsczogaXNDcmVkZW50aWFsc1N1cHBvcnRlZCA/IHdpdGhDcmVkZW50aWFscyA6IHVuZGVmaW5lZFxuICAgIH0pO1xuXG4gICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gocmVxdWVzdCk7XG5cbiAgICBjb25zdCBpc1N0cmVhbVJlc3BvbnNlID0gc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAocmVzcG9uc2VUeXBlID09PSAnc3RyZWFtJyB8fCByZXNwb25zZVR5cGUgPT09ICdyZXNwb25zZScpO1xuXG4gICAgaWYgKHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gJiYgKG9uRG93bmxvYWRQcm9ncmVzcyB8fCAoaXNTdHJlYW1SZXNwb25zZSAmJiB1bnN1YnNjcmliZSkpKSB7XG4gICAgICBjb25zdCBvcHRpb25zID0ge307XG5cbiAgICAgIFsnc3RhdHVzJywgJ3N0YXR1c1RleHQnLCAnaGVhZGVycyddLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICAgIG9wdGlvbnNbcHJvcF0gPSByZXNwb25zZVtwcm9wXTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNwb25zZUNvbnRlbnRMZW5ndGggPSB1dGlscy50b0Zpbml0ZU51bWJlcihyZXNwb25zZS5oZWFkZXJzLmdldCgnY29udGVudC1sZW5ndGgnKSk7XG5cbiAgICAgIGNvbnN0IFtvblByb2dyZXNzLCBmbHVzaF0gPSBvbkRvd25sb2FkUHJvZ3Jlc3MgJiYgcHJvZ3Jlc3NFdmVudERlY29yYXRvcihcbiAgICAgICAgcmVzcG9uc2VDb250ZW50TGVuZ3RoLFxuICAgICAgICBwcm9ncmVzc0V2ZW50UmVkdWNlcihhc3luY0RlY29yYXRvcihvbkRvd25sb2FkUHJvZ3Jlc3MpLCB0cnVlKVxuICAgICAgKSB8fCBbXTtcblxuICAgICAgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoXG4gICAgICAgIHRyYWNrU3RyZWFtKHJlc3BvbnNlLmJvZHksIERFRkFVTFRfQ0hVTktfU0laRSwgb25Qcm9ncmVzcywgKCkgPT4ge1xuICAgICAgICAgIGZsdXNoICYmIGZsdXNoKCk7XG4gICAgICAgICAgdW5zdWJzY3JpYmUgJiYgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfSksXG4gICAgICAgIG9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlIHx8ICd0ZXh0JztcblxuICAgIGxldCByZXNwb25zZURhdGEgPSBhd2FpdCByZXNvbHZlcnNbdXRpbHMuZmluZEtleShyZXNvbHZlcnMsIHJlc3BvbnNlVHlwZSkgfHwgJ3RleHQnXShyZXNwb25zZSwgY29uZmlnKTtcblxuICAgICFpc1N0cmVhbVJlc3BvbnNlICYmIHVuc3Vic2NyaWJlICYmIHVuc3Vic2NyaWJlKCk7XG5cbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIGhlYWRlcnM6IEF4aW9zSGVhZGVycy5mcm9tKHJlc3BvbnNlLmhlYWRlcnMpLFxuICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0XG4gICAgICB9KVxuICAgIH0pXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHVuc3Vic2NyaWJlICYmIHVuc3Vic2NyaWJlKCk7XG5cbiAgICBpZiAoZXJyICYmIGVyci5uYW1lID09PSAnVHlwZUVycm9yJyAmJiAvZmV0Y2gvaS50ZXN0KGVyci5tZXNzYWdlKSkge1xuICAgICAgdGhyb3cgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgbmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBjb25maWcsIHJlcXVlc3QpLFxuICAgICAgICB7XG4gICAgICAgICAgY2F1c2U6IGVyci5jYXVzZSB8fCBlcnJcbiAgICAgICAgfVxuICAgICAgKVxuICAgIH1cblxuICAgIHRocm93IEF4aW9zRXJyb3IuZnJvbShlcnIsIGVyciAmJiBlcnIuY29kZSwgY29uZmlnLCByZXF1ZXN0KTtcbiAgfVxufSk7XG5cblxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBodHRwQWRhcHRlciBmcm9tICcuL2h0dHAuanMnO1xuaW1wb3J0IHhockFkYXB0ZXIgZnJvbSAnLi94aHIuanMnO1xuaW1wb3J0IGZldGNoQWRhcHRlciBmcm9tICcuL2ZldGNoLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gXCIuLi9jb3JlL0F4aW9zRXJyb3IuanNcIjtcblxuY29uc3Qga25vd25BZGFwdGVycyA9IHtcbiAgaHR0cDogaHR0cEFkYXB0ZXIsXG4gIHhocjogeGhyQWRhcHRlcixcbiAgZmV0Y2g6IGZldGNoQWRhcHRlclxufVxuXG51dGlscy5mb3JFYWNoKGtub3duQWRhcHRlcnMsIChmbiwgdmFsdWUpID0+IHtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ25hbWUnLCB7dmFsdWV9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnYWRhcHRlck5hbWUnLCB7dmFsdWV9KTtcbiAgfVxufSk7XG5cbmNvbnN0IHJlbmRlclJlYXNvbiA9IChyZWFzb24pID0+IGAtICR7cmVhc29ufWA7XG5cbmNvbnN0IGlzUmVzb2x2ZWRIYW5kbGUgPSAoYWRhcHRlcikgPT4gdXRpbHMuaXNGdW5jdGlvbihhZGFwdGVyKSB8fCBhZGFwdGVyID09PSBudWxsIHx8IGFkYXB0ZXIgPT09IGZhbHNlO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldEFkYXB0ZXI6IChhZGFwdGVycykgPT4ge1xuICAgIGFkYXB0ZXJzID0gdXRpbHMuaXNBcnJheShhZGFwdGVycykgPyBhZGFwdGVycyA6IFthZGFwdGVyc107XG5cbiAgICBjb25zdCB7bGVuZ3RofSA9IGFkYXB0ZXJzO1xuICAgIGxldCBuYW1lT3JBZGFwdGVyO1xuICAgIGxldCBhZGFwdGVyO1xuXG4gICAgY29uc3QgcmVqZWN0ZWRSZWFzb25zID0ge307XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBuYW1lT3JBZGFwdGVyID0gYWRhcHRlcnNbaV07XG4gICAgICBsZXQgaWQ7XG5cbiAgICAgIGFkYXB0ZXIgPSBuYW1lT3JBZGFwdGVyO1xuXG4gICAgICBpZiAoIWlzUmVzb2x2ZWRIYW5kbGUobmFtZU9yQWRhcHRlcikpIHtcbiAgICAgICAgYWRhcHRlciA9IGtub3duQWRhcHRlcnNbKGlkID0gU3RyaW5nKG5hbWVPckFkYXB0ZXIpKS50b0xvd2VyQ2FzZSgpXTtcblxuICAgICAgICBpZiAoYWRhcHRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoYFVua25vd24gYWRhcHRlciAnJHtpZH0nYCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFkYXB0ZXIpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJlamVjdGVkUmVhc29uc1tpZCB8fCAnIycgKyBpXSA9IGFkYXB0ZXI7XG4gICAgfVxuXG4gICAgaWYgKCFhZGFwdGVyKSB7XG5cbiAgICAgIGNvbnN0IHJlYXNvbnMgPSBPYmplY3QuZW50cmllcyhyZWplY3RlZFJlYXNvbnMpXG4gICAgICAgIC5tYXAoKFtpZCwgc3RhdGVdKSA9PiBgYWRhcHRlciAke2lkfSBgICtcbiAgICAgICAgICAoc3RhdGUgPT09IGZhbHNlID8gJ2lzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGVudmlyb25tZW50JyA6ICdpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBidWlsZCcpXG4gICAgICAgICk7XG5cbiAgICAgIGxldCBzID0gbGVuZ3RoID9cbiAgICAgICAgKHJlYXNvbnMubGVuZ3RoID4gMSA/ICdzaW5jZSA6XFxuJyArIHJlYXNvbnMubWFwKHJlbmRlclJlYXNvbikuam9pbignXFxuJykgOiAnICcgKyByZW5kZXJSZWFzb24ocmVhc29uc1swXSkpIDpcbiAgICAgICAgJ2FzIG5vIGFkYXB0ZXIgc3BlY2lmaWVkJztcblxuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGBUaGVyZSBpcyBubyBzdWl0YWJsZSBhZGFwdGVyIHRvIGRpc3BhdGNoIHRoZSByZXF1ZXN0IGAgKyBzLFxuICAgICAgICAnRVJSX05PVF9TVVBQT1JUJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRhcHRlcjtcbiAgfSxcbiAgYWRhcHRlcnM6IGtub3duQWRhcHRlcnNcbn1cbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzdHJpY3RcbmV4cG9ydCBkZWZhdWx0IG51bGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0cmFuc2Zvcm1EYXRhIGZyb20gJy4vdHJhbnNmb3JtRGF0YS5qcyc7XG5pbXBvcnQgaXNDYW5jZWwgZnJvbSAnLi4vY2FuY2VsL2lzQ2FuY2VsLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCBhZGFwdGVycyBmcm9tIFwiLi4vYWRhcHRlcnMvYWRhcHRlcnMuanNcIjtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxuXG4gIGlmIChjb25maWcuc2lnbmFsICYmIGNvbmZpZy5zaWduYWwuYWJvcnRlZCkge1xuICAgIHRocm93IG5ldyBDYW5jZWxlZEVycm9yKG51bGwsIGNvbmZpZyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICBjb25maWcuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbmZpZy5oZWFkZXJzKTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIGlmIChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10uaW5kZXhPZihjb25maWcubWV0aG9kKSAhPT0gLTEpIHtcbiAgICBjb25maWcuaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywgZmFsc2UpO1xuICB9XG5cbiAgY29uc3QgYWRhcHRlciA9IGFkYXB0ZXJzLmdldEFkYXB0ZXIoY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcik7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICByZXNwb25zZVxuICAgICk7XG5cbiAgICByZXNwb25zZS5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20ocmVzcG9uc2UuaGVhZGVycyk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20ocmVhc29uLnJlc3BvbnNlLmhlYWRlcnMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn1cbiIsImV4cG9ydCBjb25zdCBWRVJTSU9OID0gXCIxLjcuOVwiOyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtWRVJTSU9OfSBmcm9tICcuLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuXG5jb25zdCB2YWxpZGF0b3JzID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5bJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdmdW5jdGlvbicsICdzdHJpbmcnLCAnc3ltYm9sJ10uZm9yRWFjaCgodHlwZSwgaSkgPT4ge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxuY29uc3QgZGVwcmVjYXRlZFdhcm5pbmdzID0ge307XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gKi9cbnZhbGlkYXRvcnMudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgVkVSU0lPTiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gKHZhbHVlLCBvcHQsIG9wdHMpID0+IHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSxcbiAgICAgICAgQXhpb3NFcnJvci5FUlJfREVQUkVDQVRFRFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxudmFsaWRhdG9ycy5zcGVsbGluZyA9IGZ1bmN0aW9uIHNwZWxsaW5nKGNvcnJlY3RTcGVsbGluZykge1xuICByZXR1cm4gKHZhbHVlLCBvcHQpID0+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUud2FybihgJHtvcHR9IGlzIGxpa2VseSBhIG1pc3NwZWxsaW5nIG9mICR7Y29ycmVjdFNwZWxsaW5nfWApO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKlxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICB9XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBjb25zdCBvcHQgPSBrZXlzW2ldO1xuICAgIGNvbnN0IHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yc1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IGJ1aWxkVVJMIGZyb20gJy4uL2hlbHBlcnMvYnVpbGRVUkwuanMnO1xuaW1wb3J0IEludGVyY2VwdG9yTWFuYWdlciBmcm9tICcuL0ludGVyY2VwdG9yTWFuYWdlci5qcyc7XG5pbXBvcnQgZGlzcGF0Y2hSZXF1ZXN0IGZyb20gJy4vZGlzcGF0Y2hSZXF1ZXN0LmpzJztcbmltcG9ydCBtZXJnZUNvbmZpZyBmcm9tICcuL21lcmdlQ29uZmlnLmpzJztcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gJy4vYnVpbGRGdWxsUGF0aC5qcyc7XG5pbXBvcnQgdmFsaWRhdG9yIGZyb20gJy4uL2hlbHBlcnMvdmFsaWRhdG9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi9BeGlvc0hlYWRlcnMuanMnO1xuXG5jb25zdCB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKlxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmNsYXNzIEF4aW9zIHtcbiAgY29uc3RydWN0b3IoaW5zdGFuY2VDb25maWcpIHtcbiAgICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBjb25maWdPclVybCBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gICAqIEBwYXJhbSB7P09iamVjdH0gY29uZmlnXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAgICovXG4gIGFzeW5jIHJlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5fcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBsZXQgZHVtbXkgPSB7fTtcblxuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA/IEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGR1bW15KSA6IChkdW1teSA9IG5ldyBFcnJvcigpKTtcblxuICAgICAgICAvLyBzbGljZSBvZmYgdGhlIEVycm9yOiAuLi4gbGluZVxuICAgICAgICBjb25zdCBzdGFjayA9IGR1bW15LnN0YWNrID8gZHVtbXkuc3RhY2sucmVwbGFjZSgvXi4rXFxuLywgJycpIDogJyc7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFlcnIuc3RhY2spIHtcbiAgICAgICAgICAgIGVyci5zdGFjayA9IHN0YWNrO1xuICAgICAgICAgICAgLy8gbWF0Y2ggd2l0aG91dCB0aGUgMiB0b3Agc3RhY2sgbGluZXNcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YWNrICYmICFTdHJpbmcoZXJyLnN0YWNrKS5lbmRzV2l0aChzdGFjay5yZXBsYWNlKC9eLitcXG4uK1xcbi8sICcnKSkpIHtcbiAgICAgICAgICAgIGVyci5zdGFjayArPSAnXFxuJyArIHN0YWNrXG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaWdub3JlIHRoZSBjYXNlIHdoZXJlIFwic3RhY2tcIiBpcyBhbiB1bi13cml0YWJsZSBwcm9wZXJ0eVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cblxuICBfcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICAgIGlmICh0eXBlb2YgY29uZmlnT3JVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgICBjb25maWcudXJsID0gY29uZmlnT3JVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZ09yVXJsIHx8IHt9O1xuICAgIH1cblxuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgICBjb25zdCB7dHJhbnNpdGlvbmFsLCBwYXJhbXNTZXJpYWxpemVyLCBoZWFkZXJzfSA9IGNvbmZpZztcblxuICAgIGlmICh0cmFuc2l0aW9uYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICAgIHNpbGVudEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBmb3JjZWRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKVxuICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXNTZXJpYWxpemVyICE9IG51bGwpIHtcbiAgICAgIGlmICh1dGlscy5pc0Z1bmN0aW9uKHBhcmFtc1NlcmlhbGl6ZXIpKSB7XG4gICAgICAgIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyID0ge1xuICAgICAgICAgIHNlcmlhbGl6ZTogcGFyYW1zU2VyaWFsaXplclxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyhwYXJhbXNTZXJpYWxpemVyLCB7XG4gICAgICAgICAgZW5jb2RlOiB2YWxpZGF0b3JzLmZ1bmN0aW9uLFxuICAgICAgICAgIHNlcmlhbGl6ZTogdmFsaWRhdG9ycy5mdW5jdGlvblxuICAgICAgICB9LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyhjb25maWcsIHtcbiAgICAgIGJhc2VVcmw6IHZhbGlkYXRvcnMuc3BlbGxpbmcoJ2Jhc2VVUkwnKSxcbiAgICAgIHdpdGhYc3JmVG9rZW46IHZhbGlkYXRvcnMuc3BlbGxpbmcoJ3dpdGhYU1JGVG9rZW4nKVxuICAgIH0sIHRydWUpO1xuXG4gICAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgICBjb25maWcubWV0aG9kID0gKGNvbmZpZy5tZXRob2QgfHwgdGhpcy5kZWZhdWx0cy5tZXRob2QgfHwgJ2dldCcpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgICBsZXQgY29udGV4dEhlYWRlcnMgPSBoZWFkZXJzICYmIHV0aWxzLm1lcmdlKFxuICAgICAgaGVhZGVycy5jb21tb24sXG4gICAgICBoZWFkZXJzW2NvbmZpZy5tZXRob2RdXG4gICAgKTtcblxuICAgIGhlYWRlcnMgJiYgdXRpbHMuZm9yRWFjaChcbiAgICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgICAgKG1ldGhvZCkgPT4ge1xuICAgICAgICBkZWxldGUgaGVhZGVyc1ttZXRob2RdO1xuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25maWcuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5jb25jYXQoY29udGV4dEhlYWRlcnMsIGhlYWRlcnMpO1xuXG4gICAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICAgIGNvbnN0IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgbGV0IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGxldCBwcm9taXNlO1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgbGVuO1xuXG4gICAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICAgIGNvbnN0IGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdC5iaW5kKHRoaXMpLCB1bmRlZmluZWRdO1xuICAgICAgY2hhaW4udW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgY2hhaW4ucHVzaC5hcHBseShjaGFpbiwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGxlbiA9IGNoYWluLmxlbmd0aDtcblxuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluW2krK10sIGNoYWluW2krK10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICBsZW4gPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICBsZXQgbmV3Q29uZmlnID0gY29uZmlnO1xuXG4gICAgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgY29uc3Qgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgY29uc3Qgb25SZWplY3RlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICB0cnkge1xuICAgICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgb25SZWplY3RlZC5jYWxsKHRoaXMsIGVycm9yKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QuY2FsbCh0aGlzLCBuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIGkgPSAwO1xuICAgIGxlbiA9IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihyZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10pO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgZ2V0VXJpKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gICAgY29uc3QgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXR1cm4gYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKTtcbiAgfVxufVxuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUhUVFBNZXRob2QoaXNGb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGh0dHBNZXRob2QodXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgaGVhZGVyczogaXNGb3JtID8ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSdcbiAgICAgICAgfSA6IHt9LFxuICAgICAgICB1cmwsXG4gICAgICAgIGRhdGFcbiAgICAgIH0pKTtcbiAgICB9O1xuICB9XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBnZW5lcmF0ZUhUVFBNZXRob2QoKTtcblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kICsgJ0Zvcm0nXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCh0cnVlKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi9DYW5jZWxlZEVycm9yLmpzJztcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsVG9rZW59XG4gKi9cbmNsYXNzIENhbmNlbFRva2VuIHtcbiAgY29uc3RydWN0b3IoZXhlY3V0b3IpIHtcbiAgICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgbGV0IHJlc29sdmVQcm9taXNlO1xuXG4gICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHRva2VuID0gdGhpcztcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4oY2FuY2VsID0+IHtcbiAgICAgIGlmICghdG9rZW4uX2xpc3RlbmVycykgcmV0dXJuO1xuXG4gICAgICBsZXQgaSA9IHRva2VuLl9saXN0ZW5lcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICB0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7XG4gICAgICB9XG4gICAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgICB9KTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4gPSBvbmZ1bGZpbGxlZCA9PiB7XG4gICAgICBsZXQgX3Jlc29sdmU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICB0b2tlbi5zdWJzY3JpYmUocmVzb2x2ZSk7XG4gICAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgICBwcm9taXNlLmNhbmNlbCA9IGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgICAgdG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfTtcblxuICAgIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KTtcbiAgICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gICAqL1xuICB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICAgIGlmICh0aGlzLnJlYXNvbikge1xuICAgICAgdGhyb3cgdGhpcy5yZWFzb247XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICAgKi9cblxuICBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIGxpc3RlbmVyKHRoaXMucmVhc29uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycyA9IFtsaXN0ZW5lcl07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVuc3Vic2NyaWJlIGZyb20gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAoIXRoaXMuX2xpc3RlbmVycykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cblxuICB0b0Fib3J0U2lnbmFsKCkge1xuICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgICBjb25zdCBhYm9ydCA9IChlcnIpID0+IHtcbiAgICAgIGNvbnRyb2xsZXIuYWJvcnQoZXJyKTtcbiAgICB9O1xuXG4gICAgdGhpcy5zdWJzY3JpYmUoYWJvcnQpO1xuXG4gICAgY29udHJvbGxlci5zaWduYWwudW5zdWJzY3JpYmUgPSAoKSA9PiB0aGlzLnVuc3Vic2NyaWJlKGFib3J0KTtcblxuICAgIHJldHVybiBjb250cm9sbGVyLnNpZ25hbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gICAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gICAqL1xuICBzdGF0aWMgc291cmNlKCkge1xuICAgIGxldCBjYW5jZWw7XG4gICAgY29uc3QgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgICAgY2FuY2VsID0gYztcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW4sXG4gICAgICBjYW5jZWxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbFRva2VuO1xuIiwiY29uc3QgSHR0cFN0YXR1c0NvZGUgPSB7XG4gIENvbnRpbnVlOiAxMDAsXG4gIFN3aXRjaGluZ1Byb3RvY29sczogMTAxLFxuICBQcm9jZXNzaW5nOiAxMDIsXG4gIEVhcmx5SGludHM6IDEwMyxcbiAgT2s6IDIwMCxcbiAgQ3JlYXRlZDogMjAxLFxuICBBY2NlcHRlZDogMjAyLFxuICBOb25BdXRob3JpdGF0aXZlSW5mb3JtYXRpb246IDIwMyxcbiAgTm9Db250ZW50OiAyMDQsXG4gIFJlc2V0Q29udGVudDogMjA1LFxuICBQYXJ0aWFsQ29udGVudDogMjA2LFxuICBNdWx0aVN0YXR1czogMjA3LFxuICBBbHJlYWR5UmVwb3J0ZWQ6IDIwOCxcbiAgSW1Vc2VkOiAyMjYsXG4gIE11bHRpcGxlQ2hvaWNlczogMzAwLFxuICBNb3ZlZFBlcm1hbmVudGx5OiAzMDEsXG4gIEZvdW5kOiAzMDIsXG4gIFNlZU90aGVyOiAzMDMsXG4gIE5vdE1vZGlmaWVkOiAzMDQsXG4gIFVzZVByb3h5OiAzMDUsXG4gIFVudXNlZDogMzA2LFxuICBUZW1wb3JhcnlSZWRpcmVjdDogMzA3LFxuICBQZXJtYW5lbnRSZWRpcmVjdDogMzA4LFxuICBCYWRSZXF1ZXN0OiA0MDAsXG4gIFVuYXV0aG9yaXplZDogNDAxLFxuICBQYXltZW50UmVxdWlyZWQ6IDQwMixcbiAgRm9yYmlkZGVuOiA0MDMsXG4gIE5vdEZvdW5kOiA0MDQsXG4gIE1ldGhvZE5vdEFsbG93ZWQ6IDQwNSxcbiAgTm90QWNjZXB0YWJsZTogNDA2LFxuICBQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IDQwNyxcbiAgUmVxdWVzdFRpbWVvdXQ6IDQwOCxcbiAgQ29uZmxpY3Q6IDQwOSxcbiAgR29uZTogNDEwLFxuICBMZW5ndGhSZXF1aXJlZDogNDExLFxuICBQcmVjb25kaXRpb25GYWlsZWQ6IDQxMixcbiAgUGF5bG9hZFRvb0xhcmdlOiA0MTMsXG4gIFVyaVRvb0xvbmc6IDQxNCxcbiAgVW5zdXBwb3J0ZWRNZWRpYVR5cGU6IDQxNSxcbiAgUmFuZ2VOb3RTYXRpc2ZpYWJsZTogNDE2LFxuICBFeHBlY3RhdGlvbkZhaWxlZDogNDE3LFxuICBJbUFUZWFwb3Q6IDQxOCxcbiAgTWlzZGlyZWN0ZWRSZXF1ZXN0OiA0MjEsXG4gIFVucHJvY2Vzc2FibGVFbnRpdHk6IDQyMixcbiAgTG9ja2VkOiA0MjMsXG4gIEZhaWxlZERlcGVuZGVuY3k6IDQyNCxcbiAgVG9vRWFybHk6IDQyNSxcbiAgVXBncmFkZVJlcXVpcmVkOiA0MjYsXG4gIFByZWNvbmRpdGlvblJlcXVpcmVkOiA0MjgsXG4gIFRvb01hbnlSZXF1ZXN0czogNDI5LFxuICBSZXF1ZXN0SGVhZGVyRmllbGRzVG9vTGFyZ2U6IDQzMSxcbiAgVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnM6IDQ1MSxcbiAgSW50ZXJuYWxTZXJ2ZXJFcnJvcjogNTAwLFxuICBOb3RJbXBsZW1lbnRlZDogNTAxLFxuICBCYWRHYXRld2F5OiA1MDIsXG4gIFNlcnZpY2VVbmF2YWlsYWJsZTogNTAzLFxuICBHYXRld2F5VGltZW91dDogNTA0LFxuICBIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZDogNTA1LFxuICBWYXJpYW50QWxzb05lZ290aWF0ZXM6IDUwNixcbiAgSW5zdWZmaWNpZW50U3RvcmFnZTogNTA3LFxuICBMb29wRGV0ZWN0ZWQ6IDUwOCxcbiAgTm90RXh0ZW5kZWQ6IDUxMCxcbiAgTmV0d29ya0F1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IDUxMSxcbn07XG5cbk9iamVjdC5lbnRyaWVzKEh0dHBTdGF0dXNDb2RlKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgSHR0cFN0YXR1c0NvZGVbdmFsdWVdID0ga2V5O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEh0dHBTdGF0dXNDb2RlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgYmluZCBmcm9tICcuL2hlbHBlcnMvYmluZC5qcyc7XG5pbXBvcnQgQXhpb3MgZnJvbSAnLi9jb3JlL0F4aW9zLmpzJztcbmltcG9ydCBtZXJnZUNvbmZpZyBmcm9tICcuL2NvcmUvbWVyZ2VDb25maWcuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1EYXRhVG9KU09OIGZyb20gJy4vaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyc7XG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBDYW5jZWxUb2tlbiBmcm9tICcuL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyc7XG5pbXBvcnQgaXNDYW5jZWwgZnJvbSAnLi9jYW5jZWwvaXNDYW5jZWwuanMnO1xuaW1wb3J0IHtWRVJTSU9OfSBmcm9tICcuL2Vudi9kYXRhLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vaGVscGVycy90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCBzcHJlYWQgZnJvbSAnLi9oZWxwZXJzL3NwcmVhZC5qcyc7XG5pbXBvcnQgaXNBeGlvc0Vycm9yIGZyb20gJy4vaGVscGVycy9pc0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi9jb3JlL0F4aW9zSGVhZGVycy5qc1wiO1xuaW1wb3J0IGFkYXB0ZXJzIGZyb20gJy4vYWRhcHRlcnMvYWRhcHRlcnMuanMnO1xuaW1wb3J0IEh0dHBTdGF0dXNDb2RlIGZyb20gJy4vaGVscGVycy9IdHRwU3RhdHVzQ29kZS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJucyB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgY29uc3QgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgY29uc3QgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCwge2FsbE93bktleXM6IHRydWV9KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0LCBudWxsLCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbiAgaW5zdGFuY2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGRlZmF1bHRDb25maWcsIGluc3RhbmNlQ29uZmlnKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbmNvbnN0IGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsZWRFcnJvciA9IENhbmNlbGVkRXJyb3I7XG5heGlvcy5DYW5jZWxUb2tlbiA9IENhbmNlbFRva2VuO1xuYXhpb3MuaXNDYW5jZWwgPSBpc0NhbmNlbDtcbmF4aW9zLlZFUlNJT04gPSBWRVJTSU9OO1xuYXhpb3MudG9Gb3JtRGF0YSA9IHRvRm9ybURhdGE7XG5cbi8vIEV4cG9zZSBBeGlvc0Vycm9yIGNsYXNzXG5heGlvcy5BeGlvc0Vycm9yID0gQXhpb3NFcnJvcjtcblxuLy8gYWxpYXMgZm9yIENhbmNlbGVkRXJyb3IgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbmF4aW9zLkNhbmNlbCA9IGF4aW9zLkNhbmNlbGVkRXJyb3I7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5cbmF4aW9zLnNwcmVhZCA9IHNwcmVhZDtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gaXNBeGlvc0Vycm9yO1xuXG4vLyBFeHBvc2UgbWVyZ2VDb25maWdcbmF4aW9zLm1lcmdlQ29uZmlnID0gbWVyZ2VDb25maWc7XG5cbmF4aW9zLkF4aW9zSGVhZGVycyA9IEF4aW9zSGVhZGVycztcblxuYXhpb3MuZm9ybVRvSlNPTiA9IHRoaW5nID0+IGZvcm1EYXRhVG9KU09OKHV0aWxzLmlzSFRNTEZvcm0odGhpbmcpID8gbmV3IEZvcm1EYXRhKHRoaW5nKSA6IHRoaW5nKTtcblxuYXhpb3MuZ2V0QWRhcHRlciA9IGFkYXB0ZXJzLmdldEFkYXB0ZXI7XG5cbmF4aW9zLkh0dHBTdGF0dXNDb2RlID0gSHR0cFN0YXR1c0NvZGU7XG5cbmF4aW9zLmRlZmF1bHQgPSBheGlvcztcblxuLy8gdGhpcyBtb2R1bGUgc2hvdWxkIG9ubHkgaGF2ZSBhIGRlZmF1bHQgZXhwb3J0XG5leHBvcnQgZGVmYXVsdCBheGlvc1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3NcbiAqXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0F4aW9zRXJyb3IocGF5bG9hZCkge1xuICByZXR1cm4gdXRpbHMuaXNPYmplY3QocGF5bG9hZCkgJiYgKHBheWxvYWQuaXNBeGlvc0Vycm9yID09PSB0cnVlKTtcbn1cbiIsImNvbnN0IGluc3RhbmNlT2ZBbnkgPSAob2JqZWN0LCBjb25zdHJ1Y3RvcnMpID0+IGNvbnN0cnVjdG9ycy5zb21lKChjKSA9PiBvYmplY3QgaW5zdGFuY2VvZiBjKTtcblxubGV0IGlkYlByb3h5YWJsZVR5cGVzO1xubGV0IGN1cnNvckFkdmFuY2VNZXRob2RzO1xuLy8gVGhpcyBpcyBhIGZ1bmN0aW9uIHRvIHByZXZlbnQgaXQgdGhyb3dpbmcgdXAgaW4gbm9kZSBlbnZpcm9ubWVudHMuXG5mdW5jdGlvbiBnZXRJZGJQcm94eWFibGVUeXBlcygpIHtcbiAgICByZXR1cm4gKGlkYlByb3h5YWJsZVR5cGVzIHx8XG4gICAgICAgIChpZGJQcm94eWFibGVUeXBlcyA9IFtcbiAgICAgICAgICAgIElEQkRhdGFiYXNlLFxuICAgICAgICAgICAgSURCT2JqZWN0U3RvcmUsXG4gICAgICAgICAgICBJREJJbmRleCxcbiAgICAgICAgICAgIElEQkN1cnNvcixcbiAgICAgICAgICAgIElEQlRyYW5zYWN0aW9uLFxuICAgICAgICBdKSk7XG59XG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdG8gcHJldmVudCBpdCB0aHJvd2luZyB1cCBpbiBub2RlIGVudmlyb25tZW50cy5cbmZ1bmN0aW9uIGdldEN1cnNvckFkdmFuY2VNZXRob2RzKCkge1xuICAgIHJldHVybiAoY3Vyc29yQWR2YW5jZU1ldGhvZHMgfHxcbiAgICAgICAgKGN1cnNvckFkdmFuY2VNZXRob2RzID0gW1xuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5hZHZhbmNlLFxuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5jb250aW51ZSxcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWVQcmltYXJ5S2V5LFxuICAgICAgICBdKSk7XG59XG5jb25zdCB0cmFuc2FjdGlvbkRvbmVNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgdHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHByb21pc2lmeVJlcXVlc3QocmVxdWVzdCkge1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVubGlzdGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgc3VjY2Vzcyk7XG4gICAgICAgICAgICByZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSh3cmFwKHJlcXVlc3QucmVzdWx0KSk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChyZXF1ZXN0LmVycm9yKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpO1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgIH0pO1xuICAgIC8vIFRoaXMgbWFwcGluZyBleGlzdHMgaW4gcmV2ZXJzZVRyYW5zZm9ybUNhY2hlIGJ1dCBkb2Vzbid0IGV4aXN0IGluIHRyYW5zZm9ybUNhY2hlLiBUaGlzXG4gICAgLy8gaXMgYmVjYXVzZSB3ZSBjcmVhdGUgbWFueSBwcm9taXNlcyBmcm9tIGEgc2luZ2xlIElEQlJlcXVlc3QuXG4gICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChwcm9taXNlLCByZXF1ZXN0KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGNhY2hlRG9uZVByb21pc2VGb3JUcmFuc2FjdGlvbih0eCkge1xuICAgIC8vIEVhcmx5IGJhaWwgaWYgd2UndmUgYWxyZWFkeSBjcmVhdGVkIGEgZG9uZSBwcm9taXNlIGZvciB0aGlzIHRyYW5zYWN0aW9uLlxuICAgIGlmICh0cmFuc2FjdGlvbkRvbmVNYXAuaGFzKHR4KSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGRvbmUgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVubGlzdGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCBjb21wbGV0ZSk7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KHR4LmVycm9yIHx8IG5ldyBET01FeGNlcHRpb24oJ0Fib3J0RXJyb3InLCAnQWJvcnRFcnJvcicpKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgY29tcGxldGUpO1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBlcnJvcik7XG4gICAgfSk7XG4gICAgLy8gQ2FjaGUgaXQgZm9yIGxhdGVyIHJldHJpZXZhbC5cbiAgICB0cmFuc2FjdGlvbkRvbmVNYXAuc2V0KHR4LCBkb25lKTtcbn1cbmxldCBpZGJQcm94eVRyYXBzID0ge1xuICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgLy8gU3BlY2lhbCBoYW5kbGluZyBmb3IgdHJhbnNhY3Rpb24uZG9uZS5cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnZG9uZScpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uRG9uZU1hcC5nZXQodGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIE1ha2UgdHguc3RvcmUgcmV0dXJuIHRoZSBvbmx5IHN0b3JlIGluIHRoZSB0cmFuc2FjdGlvbiwgb3IgdW5kZWZpbmVkIGlmIHRoZXJlIGFyZSBtYW55LlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdzdG9yZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZXIub2JqZWN0U3RvcmVOYW1lc1sxXVxuICAgICAgICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA6IHJlY2VpdmVyLm9iamVjdFN0b3JlKHJlY2VpdmVyLm9iamVjdFN0b3JlTmFtZXNbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEVsc2UgdHJhbnNmb3JtIHdoYXRldmVyIHdlIGdldCBiYWNrLlxuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXRbcHJvcF0pO1xuICAgIH0sXG4gICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgaGFzKHRhcmdldCwgcHJvcCkge1xuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24gJiZcbiAgICAgICAgICAgIChwcm9wID09PSAnZG9uZScgfHwgcHJvcCA9PT0gJ3N0b3JlJykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9wIGluIHRhcmdldDtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIHJlcGxhY2VUcmFwcyhjYWxsYmFjaykge1xuICAgIGlkYlByb3h5VHJhcHMgPSBjYWxsYmFjayhpZGJQcm94eVRyYXBzKTtcbn1cbmZ1bmN0aW9uIHdyYXBGdW5jdGlvbihmdW5jKSB7XG4gICAgLy8gRHVlIHRvIGV4cGVjdGVkIG9iamVjdCBlcXVhbGl0eSAod2hpY2ggaXMgZW5mb3JjZWQgYnkgdGhlIGNhY2hpbmcgaW4gYHdyYXBgKSwgd2VcbiAgICAvLyBvbmx5IGNyZWF0ZSBvbmUgbmV3IGZ1bmMgcGVyIGZ1bmMuXG4gICAgLy8gQ3Vyc29yIG1ldGhvZHMgYXJlIHNwZWNpYWwsIGFzIHRoZSBiZWhhdmlvdXIgaXMgYSBsaXR0bGUgbW9yZSBkaWZmZXJlbnQgdG8gc3RhbmRhcmQgSURCLiBJblxuICAgIC8vIElEQiwgeW91IGFkdmFuY2UgdGhlIGN1cnNvciBhbmQgd2FpdCBmb3IgYSBuZXcgJ3N1Y2Nlc3MnIG9uIHRoZSBJREJSZXF1ZXN0IHRoYXQgZ2F2ZSB5b3UgdGhlXG4gICAgLy8gY3Vyc29yLiBJdCdzIGtpbmRhIGxpa2UgYSBwcm9taXNlIHRoYXQgY2FuIHJlc29sdmUgd2l0aCBtYW55IHZhbHVlcy4gVGhhdCBkb2Vzbid0IG1ha2Ugc2Vuc2VcbiAgICAvLyB3aXRoIHJlYWwgcHJvbWlzZXMsIHNvIGVhY2ggYWR2YW5jZSBtZXRob2RzIHJldHVybnMgYSBuZXcgcHJvbWlzZSBmb3IgdGhlIGN1cnNvciBvYmplY3QsIG9yXG4gICAgLy8gdW5kZWZpbmVkIGlmIHRoZSBlbmQgb2YgdGhlIGN1cnNvciBoYXMgYmVlbiByZWFjaGVkLlxuICAgIGlmIChnZXRDdXJzb3JBZHZhbmNlTWV0aG9kcygpLmluY2x1ZGVzKGZ1bmMpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgLy8gQ2FsbGluZyB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJveHkgYXMgJ3RoaXMnIGNhdXNlcyBJTExFR0FMIElOVk9DQVRJT04sIHNvIHdlIHVzZVxuICAgICAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAgICAgICAgICAgIGZ1bmMuYXBwbHkodW53cmFwKHRoaXMpLCBhcmdzKTtcbiAgICAgICAgICAgIHJldHVybiB3cmFwKHRoaXMucmVxdWVzdCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAvLyBDYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm94eSBhcyAndGhpcycgY2F1c2VzIElMTEVHQUwgSU5WT0NBVElPTiwgc28gd2UgdXNlXG4gICAgICAgIC8vIHRoZSBvcmlnaW5hbCBvYmplY3QuXG4gICAgICAgIHJldHVybiB3cmFwKGZ1bmMuYXBwbHkodW53cmFwKHRoaXMpLCBhcmdzKSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybUNhY2hhYmxlVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKVxuICAgICAgICByZXR1cm4gd3JhcEZ1bmN0aW9uKHZhbHVlKTtcbiAgICAvLyBUaGlzIGRvZXNuJ3QgcmV0dXJuLCBpdCBqdXN0IGNyZWF0ZXMgYSAnZG9uZScgcHJvbWlzZSBmb3IgdGhlIHRyYW5zYWN0aW9uLFxuICAgIC8vIHdoaWNoIGlzIGxhdGVyIHJldHVybmVkIGZvciB0cmFuc2FjdGlvbi5kb25lIChzZWUgaWRiT2JqZWN0SGFuZGxlcikuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24pXG4gICAgICAgIGNhY2hlRG9uZVByb21pc2VGb3JUcmFuc2FjdGlvbih2YWx1ZSk7XG4gICAgaWYgKGluc3RhbmNlT2ZBbnkodmFsdWUsIGdldElkYlByb3h5YWJsZVR5cGVzKCkpKVxuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHZhbHVlLCBpZGJQcm94eVRyYXBzKTtcbiAgICAvLyBSZXR1cm4gdGhlIHNhbWUgdmFsdWUgYmFjayBpZiB3ZSdyZSBub3QgZ29pbmcgdG8gdHJhbnNmb3JtIGl0LlxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHdyYXAodmFsdWUpIHtcbiAgICAvLyBXZSBzb21ldGltZXMgZ2VuZXJhdGUgbXVsdGlwbGUgcHJvbWlzZXMgZnJvbSBhIHNpbmdsZSBJREJSZXF1ZXN0IChlZyB3aGVuIGN1cnNvcmluZyksIGJlY2F1c2VcbiAgICAvLyBJREIgaXMgd2VpcmQgYW5kIGEgc2luZ2xlIElEQlJlcXVlc3QgY2FuIHlpZWxkIG1hbnkgcmVzcG9uc2VzLCBzbyB0aGVzZSBjYW4ndCBiZSBjYWNoZWQuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCUmVxdWVzdClcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3QodmFsdWUpO1xuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgdHJhbnNmb3JtZWQgdGhpcyB2YWx1ZSBiZWZvcmUsIHJldXNlIHRoZSB0cmFuc2Zvcm1lZCB2YWx1ZS5cbiAgICAvLyBUaGlzIGlzIGZhc3RlciwgYnV0IGl0IGFsc28gcHJvdmlkZXMgb2JqZWN0IGVxdWFsaXR5LlxuICAgIGlmICh0cmFuc2Zvcm1DYWNoZS5oYXModmFsdWUpKVxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtQ2FjaGUuZ2V0KHZhbHVlKTtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHRyYW5zZm9ybUNhY2hhYmxlVmFsdWUodmFsdWUpO1xuICAgIC8vIE5vdCBhbGwgdHlwZXMgYXJlIHRyYW5zZm9ybWVkLlxuICAgIC8vIFRoZXNlIG1heSBiZSBwcmltaXRpdmUgdHlwZXMsIHNvIHRoZXkgY2FuJ3QgYmUgV2Vha01hcCBrZXlzLlxuICAgIGlmIChuZXdWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgdHJhbnNmb3JtQ2FjaGUuc2V0KHZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICAgIHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5zZXQobmV3VmFsdWUsIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1ZhbHVlO1xufVxuY29uc3QgdW53cmFwID0gKHZhbHVlKSA9PiByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuZ2V0KHZhbHVlKTtcblxuLyoqXG4gKiBPcGVuIGEgZGF0YWJhc2UuXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZGF0YWJhc2UuXG4gKiBAcGFyYW0gdmVyc2lvbiBTY2hlbWEgdmVyc2lvbi5cbiAqIEBwYXJhbSBjYWxsYmFja3MgQWRkaXRpb25hbCBjYWxsYmFja3MuXG4gKi9cbmZ1bmN0aW9uIG9wZW5EQihuYW1lLCB2ZXJzaW9uLCB7IGJsb2NrZWQsIHVwZ3JhZGUsIGJsb2NraW5nLCB0ZXJtaW5hdGVkIH0gPSB7fSkge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihuYW1lLCB2ZXJzaW9uKTtcbiAgICBjb25zdCBvcGVuUHJvbWlzZSA9IHdyYXAocmVxdWVzdCk7XG4gICAgaWYgKHVwZ3JhZGUpIHtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCd1cGdyYWRlbmVlZGVkJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB1cGdyYWRlKHdyYXAocmVxdWVzdC5yZXN1bHQpLCBldmVudC5vbGRWZXJzaW9uLCBldmVudC5uZXdWZXJzaW9uLCB3cmFwKHJlcXVlc3QudHJhbnNhY3Rpb24pLCBldmVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoYmxvY2tlZCkge1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Jsb2NrZWQnLCAoZXZlbnQpID0+IGJsb2NrZWQoXG4gICAgICAgIC8vIENhc3RpbmcgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC1ET00tbGliLWdlbmVyYXRvci9wdWxsLzE0MDVcbiAgICAgICAgZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQubmV3VmVyc2lvbiwgZXZlbnQpKTtcbiAgICB9XG4gICAgb3BlblByb21pc2VcbiAgICAgICAgLnRoZW4oKGRiKSA9PiB7XG4gICAgICAgIGlmICh0ZXJtaW5hdGVkKVxuICAgICAgICAgICAgZGIuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCAoKSA9PiB0ZXJtaW5hdGVkKCkpO1xuICAgICAgICBpZiAoYmxvY2tpbmcpIHtcbiAgICAgICAgICAgIGRiLmFkZEV2ZW50TGlzdGVuZXIoJ3ZlcnNpb25jaGFuZ2UnLCAoZXZlbnQpID0+IGJsb2NraW5nKGV2ZW50Lm9sZFZlcnNpb24sIGV2ZW50Lm5ld1ZlcnNpb24sIGV2ZW50KSk7XG4gICAgICAgIH1cbiAgICB9KVxuICAgICAgICAuY2F0Y2goKCkgPT4geyB9KTtcbiAgICByZXR1cm4gb3BlblByb21pc2U7XG59XG4vKipcbiAqIERlbGV0ZSBhIGRhdGFiYXNlLlxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGRhdGFiYXNlLlxuICovXG5mdW5jdGlvbiBkZWxldGVEQihuYW1lLCB7IGJsb2NrZWQgfSA9IHt9KSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5kZWxldGVEYXRhYmFzZShuYW1lKTtcbiAgICBpZiAoYmxvY2tlZCkge1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Jsb2NrZWQnLCAoZXZlbnQpID0+IGJsb2NrZWQoXG4gICAgICAgIC8vIENhc3RpbmcgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC1ET00tbGliLWdlbmVyYXRvci9wdWxsLzE0MDVcbiAgICAgICAgZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyYXAocmVxdWVzdCkudGhlbigoKSA9PiB1bmRlZmluZWQpO1xufVxuXG5jb25zdCByZWFkTWV0aG9kcyA9IFsnZ2V0JywgJ2dldEtleScsICdnZXRBbGwnLCAnZ2V0QWxsS2V5cycsICdjb3VudCddO1xuY29uc3Qgd3JpdGVNZXRob2RzID0gWydwdXQnLCAnYWRkJywgJ2RlbGV0ZScsICdjbGVhciddO1xuY29uc3QgY2FjaGVkTWV0aG9kcyA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHtcbiAgICBpZiAoISh0YXJnZXQgaW5zdGFuY2VvZiBJREJEYXRhYmFzZSAmJlxuICAgICAgICAhKHByb3AgaW4gdGFyZ2V0KSAmJlxuICAgICAgICB0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhY2hlZE1ldGhvZHMuZ2V0KHByb3ApKVxuICAgICAgICByZXR1cm4gY2FjaGVkTWV0aG9kcy5nZXQocHJvcCk7XG4gICAgY29uc3QgdGFyZ2V0RnVuY05hbWUgPSBwcm9wLnJlcGxhY2UoL0Zyb21JbmRleCQvLCAnJyk7XG4gICAgY29uc3QgdXNlSW5kZXggPSBwcm9wICE9PSB0YXJnZXRGdW5jTmFtZTtcbiAgICBjb25zdCBpc1dyaXRlID0gd3JpdGVNZXRob2RzLmluY2x1ZGVzKHRhcmdldEZ1bmNOYW1lKTtcbiAgICBpZiAoXG4gICAgLy8gQmFpbCBpZiB0aGUgdGFyZ2V0IGRvZXNuJ3QgZXhpc3Qgb24gdGhlIHRhcmdldC4gRWcsIGdldEFsbCBpc24ndCBpbiBFZGdlLlxuICAgICEodGFyZ2V0RnVuY05hbWUgaW4gKHVzZUluZGV4ID8gSURCSW5kZXggOiBJREJPYmplY3RTdG9yZSkucHJvdG90eXBlKSB8fFxuICAgICAgICAhKGlzV3JpdGUgfHwgcmVhZE1ldGhvZHMuaW5jbHVkZXModGFyZ2V0RnVuY05hbWUpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1ldGhvZCA9IGFzeW5jIGZ1bmN0aW9uIChzdG9yZU5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgLy8gaXNXcml0ZSA/ICdyZWFkd3JpdGUnIDogdW5kZWZpbmVkIGd6aXBwcyBiZXR0ZXIsIGJ1dCBmYWlscyBpbiBFZGdlIDooXG4gICAgICAgIGNvbnN0IHR4ID0gdGhpcy50cmFuc2FjdGlvbihzdG9yZU5hbWUsIGlzV3JpdGUgPyAncmVhZHdyaXRlJyA6ICdyZWFkb25seScpO1xuICAgICAgICBsZXQgdGFyZ2V0ID0gdHguc3RvcmU7XG4gICAgICAgIGlmICh1c2VJbmRleClcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5pbmRleChhcmdzLnNoaWZ0KCkpO1xuICAgICAgICAvLyBNdXN0IHJlamVjdCBpZiBvcCByZWplY3RzLlxuICAgICAgICAvLyBJZiBpdCdzIGEgd3JpdGUgb3BlcmF0aW9uLCBtdXN0IHJlamVjdCBpZiB0eC5kb25lIHJlamVjdHMuXG4gICAgICAgIC8vIE11c3QgcmVqZWN0IHdpdGggb3AgcmVqZWN0aW9uIGZpcnN0LlxuICAgICAgICAvLyBNdXN0IHJlc29sdmUgd2l0aCBvcCB2YWx1ZS5cbiAgICAgICAgLy8gTXVzdCBoYW5kbGUgYm90aCBwcm9taXNlcyAobm8gdW5oYW5kbGVkIHJlamVjdGlvbnMpXG4gICAgICAgIHJldHVybiAoYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgdGFyZ2V0W3RhcmdldEZ1bmNOYW1lXSguLi5hcmdzKSxcbiAgICAgICAgICAgIGlzV3JpdGUgJiYgdHguZG9uZSxcbiAgICAgICAgXSkpWzBdO1xuICAgIH07XG4gICAgY2FjaGVkTWV0aG9kcy5zZXQocHJvcCwgbWV0aG9kKTtcbiAgICByZXR1cm4gbWV0aG9kO1xufVxucmVwbGFjZVRyYXBzKChvbGRUcmFwcykgPT4gKHtcbiAgICAuLi5vbGRUcmFwcyxcbiAgICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PiBnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB8fCBvbGRUcmFwcy5nZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlciksXG4gICAgaGFzOiAodGFyZ2V0LCBwcm9wKSA9PiAhIWdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmhhcyh0YXJnZXQsIHByb3ApLFxufSkpO1xuXG5jb25zdCBhZHZhbmNlTWV0aG9kUHJvcHMgPSBbJ2NvbnRpbnVlJywgJ2NvbnRpbnVlUHJpbWFyeUtleScsICdhZHZhbmNlJ107XG5jb25zdCBtZXRob2RNYXAgPSB7fTtcbmNvbnN0IGFkdmFuY2VSZXN1bHRzID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IGl0dHJQcm94aWVkQ3Vyc29yVG9PcmlnaW5hbFByb3h5ID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IGN1cnNvckl0ZXJhdG9yVHJhcHMgPSB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCkge1xuICAgICAgICBpZiAoIWFkdmFuY2VNZXRob2RQcm9wcy5pbmNsdWRlcyhwcm9wKSlcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRbcHJvcF07XG4gICAgICAgIGxldCBjYWNoZWRGdW5jID0gbWV0aG9kTWFwW3Byb3BdO1xuICAgICAgICBpZiAoIWNhY2hlZEZ1bmMpIHtcbiAgICAgICAgICAgIGNhY2hlZEZ1bmMgPSBtZXRob2RNYXBbcHJvcF0gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgICAgIGFkdmFuY2VSZXN1bHRzLnNldCh0aGlzLCBpdHRyUHJveGllZEN1cnNvclRvT3JpZ2luYWxQcm94eS5nZXQodGhpcylbcHJvcF0oLi4uYXJncykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGVkRnVuYztcbiAgICB9LFxufTtcbmFzeW5jIGZ1bmN0aW9uKiBpdGVyYXRlKC4uLmFyZ3MpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdGhpcy1hc3NpZ25tZW50XG4gICAgbGV0IGN1cnNvciA9IHRoaXM7XG4gICAgaWYgKCEoY3Vyc29yIGluc3RhbmNlb2YgSURCQ3Vyc29yKSkge1xuICAgICAgICBjdXJzb3IgPSBhd2FpdCBjdXJzb3Iub3BlbkN1cnNvciguLi5hcmdzKTtcbiAgICB9XG4gICAgaWYgKCFjdXJzb3IpXG4gICAgICAgIHJldHVybjtcbiAgICBjdXJzb3IgPSBjdXJzb3I7XG4gICAgY29uc3QgcHJveGllZEN1cnNvciA9IG5ldyBQcm94eShjdXJzb3IsIGN1cnNvckl0ZXJhdG9yVHJhcHMpO1xuICAgIGl0dHJQcm94aWVkQ3Vyc29yVG9PcmlnaW5hbFByb3h5LnNldChwcm94aWVkQ3Vyc29yLCBjdXJzb3IpO1xuICAgIC8vIE1hcCB0aGlzIGRvdWJsZS1wcm94eSBiYWNrIHRvIHRoZSBvcmlnaW5hbCwgc28gb3RoZXIgY3Vyc29yIG1ldGhvZHMgd29yay5cbiAgICByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuc2V0KHByb3hpZWRDdXJzb3IsIHVud3JhcChjdXJzb3IpKTtcbiAgICB3aGlsZSAoY3Vyc29yKSB7XG4gICAgICAgIHlpZWxkIHByb3hpZWRDdXJzb3I7XG4gICAgICAgIC8vIElmIG9uZSBvZiB0aGUgYWR2YW5jaW5nIG1ldGhvZHMgd2FzIG5vdCBjYWxsZWQsIGNhbGwgY29udGludWUoKS5cbiAgICAgICAgY3Vyc29yID0gYXdhaXQgKGFkdmFuY2VSZXN1bHRzLmdldChwcm94aWVkQ3Vyc29yKSB8fCBjdXJzb3IuY29udGludWUoKSk7XG4gICAgICAgIGFkdmFuY2VSZXN1bHRzLmRlbGV0ZShwcm94aWVkQ3Vyc29yKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc0l0ZXJhdG9yUHJvcCh0YXJnZXQsIHByb3ApIHtcbiAgICByZXR1cm4gKChwcm9wID09PSBTeW1ib2wuYXN5bmNJdGVyYXRvciAmJlxuICAgICAgICBpbnN0YW5jZU9mQW55KHRhcmdldCwgW0lEQkluZGV4LCBJREJPYmplY3RTdG9yZSwgSURCQ3Vyc29yXSkpIHx8XG4gICAgICAgIChwcm9wID09PSAnaXRlcmF0ZScgJiYgaW5zdGFuY2VPZkFueSh0YXJnZXQsIFtJREJJbmRleCwgSURCT2JqZWN0U3RvcmVdKSkpO1xufVxucmVwbGFjZVRyYXBzKChvbGRUcmFwcykgPT4gKHtcbiAgICAuLi5vbGRUcmFwcyxcbiAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICBpZiAoaXNJdGVyYXRvclByb3AodGFyZ2V0LCBwcm9wKSlcbiAgICAgICAgICAgIHJldHVybiBpdGVyYXRlO1xuICAgICAgICByZXR1cm4gb2xkVHJhcHMuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpO1xuICAgIH0sXG4gICAgaGFzKHRhcmdldCwgcHJvcCkge1xuICAgICAgICByZXR1cm4gaXNJdGVyYXRvclByb3AodGFyZ2V0LCBwcm9wKSB8fCBvbGRUcmFwcy5oYXModGFyZ2V0LCBwcm9wKTtcbiAgICB9LFxufSkpO1xuXG5leHBvcnQgeyBkZWxldGVEQiwgb3BlbkRCLCB1bndyYXAsIHdyYXAgfTtcbiIsIi8vIHVzZWQgaW4gQXR0ciB0byBzaWduYWwgY2hhbmdlc1xuZXhwb3J0IGNvbnN0IENIQU5HRUQgPSBTeW1ib2woJ2NoYW5nZWQnKTtcblxuLy8gdXNlZCBpbiBFbGVtZW50IHRvIHNldHVwIG9uY2UgY2xhc3NMaXN0XG5leHBvcnQgY29uc3QgQ0xBU1NfTElTVCA9IFN5bWJvbCgnY2xhc3NMaXN0Jyk7XG5cbi8vIHVzZWQgaW4gRG9jdW1lbnQgdG8gYXR0YWNoIG9uY2UgY3VzdG9tRWxlbWVudHNcbmV4cG9ydCBjb25zdCBDVVNUT01fRUxFTUVOVFMgPSBTeW1ib2woJ0N1c3RvbUVsZW1lbnRzJyk7XG5cbi8vIHVzZWQgaW4gSFRNTFRlbXBsYXRlRWxlbWVudFxuZXhwb3J0IGNvbnN0IENPTlRFTlQgPSBTeW1ib2woJ2NvbnRlbnQnKTtcblxuLy8gdXNlZCBpbiBFbGVtZW50IGZvciBkYXRhIGF0dHJpYnV0ZXNcbmV4cG9ydCBjb25zdCBEQVRBU0VUID0gU3ltYm9sKCdkYXRhc2V0Jyk7XG5cbi8vIHVzZWQgaW4gRG9jdW1lbnQgdG8gYXR0YWNoIHRoZSBEb2NUeXBlXG5leHBvcnQgY29uc3QgRE9DVFlQRSA9IFN5bWJvbCgnZG9jdHlwZScpO1xuXG4vLyB1c2VkIGluIHBhcnNlciBhbmQgRG9jdW1lbnQgdG8gYXR0YWNoIG9uY2UgYSBET01QYXJzZXJcbmV4cG9ydCBjb25zdCBET01fUEFSU0VSID0gU3ltYm9sKCdET01QYXJzZXInKTtcblxuLy8gdXNlZCB0byByZWZlcmVuY2UgYW4gZW5kIG5vZGVcbmV4cG9ydCBjb25zdCBFTkQgPSBTeW1ib2woJ2VuZCcpO1xuXG4vLyB1c2VkIGluIERvY3VtZW50IHRvIG1ha2UgdGhlIGdsb2JhbFRoaXMgYW4gZXZlbnQgdGFyZ2V0XG5leHBvcnQgY29uc3QgRVZFTlRfVEFSR0VUID0gU3ltYm9sKCdFdmVudFRhcmdldCcpO1xuXG4vLyB1c2VkIHRvIGF1Z21lbnQgYSBjcmVhdGVkIGRvY3VtZW50IGRlZmF1bHRWaWV3XG5leHBvcnQgY29uc3QgR0xPQkFMUyA9IFN5bWJvbCgnZ2xvYmFscycpO1xuXG4vLyB1c2VkIGluIGJvdGggQ2FudmFzIGFuZCBEb2N1bWVudCB0byBwcm92aWRlIGltYWdlc1xuZXhwb3J0IGNvbnN0IElNQUdFID0gU3ltYm9sKCdpbWFnZScpO1xuXG4vLyB1c2VkIHRvIGRlZmluZSBEb2N1bWVudCBtaW1lIHR5cGVcbmV4cG9ydCBjb25zdCBNSU1FID0gU3ltYm9sKCdtaW1lJyk7XG5cbi8vIHVzZWQgaW4gRG9jdW1lbnQgdG8gYXR0YWNoIG9uY2UgTXV0YXRpb25PYnNlcnZlclxuZXhwb3J0IGNvbnN0IE1VVEFUSU9OX09CU0VSVkVSID0gU3ltYm9sKCdNdXRhdGlvbk9ic2VydmVyJyk7XG5cbi8vIHVzZWQgdG8gZGVmaW5lIG5leHQgbm9kZSByZWZlcmVuY2VcbmV4cG9ydCBjb25zdCBORVhUID0gU3ltYm9sKCduZXh0Jyk7XG5cbi8vIHVzZWQgdG8gZGVmaW5lIEF0dHIgb3duZXIgZWxlbWVudHNcbmV4cG9ydCBjb25zdCBPV05FUl9FTEVNRU5UID0gU3ltYm9sKCdvd25lckVsZW1lbnQnKTtcblxuLy8gdXNlZCB0byBkZWZpbmUgcHJldmlvdXMgbm9kZSByZWZlcmVuY2VcbmV4cG9ydCBjb25zdCBQUkVWID0gU3ltYm9sKCdwcmV2Jyk7XG5cbi8vIHVzZWQgdG8gZGVmaW5lIHZhcmlvdXMgXCJwcml2YXRlXCIgcHJvcGVydGllc1xuZXhwb3J0IGNvbnN0IFBSSVZBVEUgPSBTeW1ib2woJ3ByaXZhdGUnKTtcblxuLy8gdXNlZCB0byBkZWZpbmUgdGhlIENTU1N0eWxlU2hlZXQuc2hlZXRcbmV4cG9ydCBjb25zdCBTSEVFVCA9IFN5bWJvbCgnc2hlZXQnKTtcblxuLy8gdXNlZCB0byBkZWZpbmUgc3RhcnQgbm9kZSByZWZlcmVuY2VcbmV4cG9ydCBjb25zdCBTVEFSVCA9IFN5bWJvbCgnc3RhcnQnKTtcblxuLy8gdXNlZCB0byBkZWZpbmUgc3BlY2lhbCBDU1Mgc3R5bGUgYXR0cmlidXRlXG5leHBvcnQgY29uc3QgU1RZTEUgPSBTeW1ib2woJ3N0eWxlJyk7XG5cbi8vIHVzZWQgdG8gdXBncmFkZSBDdXN0b20gRWxlbWVudHNcbmV4cG9ydCBjb25zdCBVUEdSQURFID0gU3ltYm9sKCd1cGdyYWRlJyk7XG5cbi8vIHVzZWQgdG8gZGVmaW5lIGdlbmVyaWMgdmFsdWVzXG5leHBvcnQgY29uc3QgVkFMVUUgPSBTeW1ib2woJ3ZhbHVlJyk7XG4iLCIvLyBHZW5lcmF0ZWQgdXNpbmcgc2NyaXB0cy93cml0ZS1kZWNvZGUtbWFwLnRzXG5leHBvcnQgY29uc3QgaHRtbERlY29kZVRyZWUgPSAvKiAjX19QVVJFX18gKi8gbmV3IFVpbnQxNkFycmF5KFxuLy8gcHJldHRpZXItaWdub3JlXG4vKiAjX19QVVJFX18gKi8gXCJcXHUxZDQxPFxceGQ1XFx1MDEzMVxcdTAyOGFcXHUwNDlkXFx1MDU3YlxcdTA1ZDBcXHUwNjc1XFx1MDZkZVxcdTA3YTJcXHUwN2Q2XFx1MDgwZlxcdTBhNGFcXHUwYTkxXFx1MGRhMVxcdTBlNmRcXHUwZjA5XFx1MGYyNlxcdTEwY2FcXHUxMjI4XFx1MTJlMVxcdTE0MTVcXHUxNDlkXFx1MTRjM1xcdTE0ZGZcXHUxNTI1XFwwXFwwXFwwXFwwXFwwXFwwXFx1MTU2YlxcdTE2Y2RcXHUxOThkXFx1MWMxMlxcdTFkZGRcXHUxZjdlXFx1MjA2MFxcdTIxYjBcXHUyMjhkXFx1MjNjMFxcdTIzZmJcXHUyNDQyXFx1MjgyNFxcdTI5MTJcXHUyZDA4XFx1MmU0OFxcdTJmY2VcXHUzMDE2XFx1MzJiYVxcdTM2MzlcXHUzN2FjXFx1MzhmZVxcdTNhMjhcXHUzYTcxXFx1M2FlMFxcdTNiMmVcXHUwODAwRU1hYmNmZ2xtbm9wcnN0dVxcXFxiZm1zXFx4N2ZcXHg4NFxceDhiXFx4OTBcXHg5NVxceDk4XFx4YTZcXHhiM1xceGI5XFx4YzhcXHhjZmxpZ1xcdTgwM2JcXHhjNlxcdTQwYzZQXFx1ODAzYiZcXHU0MDI2Y3V0ZVxcdTgwM2JcXHhjMVxcdTQwYzFyZXZlO1xcdTQxMDJcXHUwMTAwaXl4fXJjXFx1ODAzYlxceGMyXFx1NDBjMjtcXHU0NDEwcjtcXHVjMDAwXFx1ZDgzNVxcdWRkMDRyYXZlXFx1ODAzYlxceGMwXFx1NDBjMHBoYTtcXHU0MzkxYWNyO1xcdTQxMDBkO1xcdTZhNTNcXHUwMTAwZ3BcXHg5ZFxceGExb247XFx1NDEwNGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDM4cGx5RnVuY3Rpb247XFx1NjA2MWluZ1xcdTgwM2JcXHhjNVxcdTQwYzVcXHUwMTAwY3NcXHhiZVxceGMzcjtcXHVjMDAwXFx1ZDgzNVxcdWRjOWNpZ247XFx1NjI1NGlsZGVcXHU4MDNiXFx4YzNcXHU0MGMzbWxcXHU4MDNiXFx4YzRcXHU0MGM0XFx1MDQwMGFjZWZvcnN1XFx4ZTVcXHhmYlxceGZlXFx1MDExN1xcdTAxMWNcXHUwMTIyXFx1MDEyN1xcdTAxMmFcXHUwMTAwY3JcXHhlYVxceGYya3NsYXNoO1xcdTYyMTZcXHUwMTc2XFx4ZjZcXHhmODtcXHU2YWU3ZWQ7XFx1NjMwNnk7XFx1NDQxMVxcdTAxODBjcnRcXHUwMTA1XFx1MDEwYlxcdTAxMTRhdXNlO1xcdTYyMzVub3VsbGlzO1xcdTYxMmNhO1xcdTQzOTJyO1xcdWMwMDBcXHVkODM1XFx1ZGQwNXBmO1xcdWMwMDBcXHVkODM1XFx1ZGQzOWV2ZTtcXHU0MmQ4Y1xceGYyXFx1MDExM21wZXE7XFx1NjI0ZVxcdTA3MDBIT2FjZGVmaGlsb3JzdVxcdTAxNGRcXHUwMTUxXFx1MDE1NlxcdTAxODBcXHUwMTllXFx1MDFhMlxcdTAxYjVcXHUwMWI3XFx1MDFiYVxcdTAxZGNcXHUwMjE1XFx1MDI3M1xcdTAyNzhcXHUwMjdlY3k7XFx1NDQyN1BZXFx1ODAzYlxceGE5XFx1NDBhOVxcdTAxODBjcHlcXHUwMTVkXFx1MDE2MlxcdTAxN2F1dGU7XFx1NDEwNlxcdTAxMDA7aVxcdTAxNjdcXHUwMTY4XFx1NjJkMnRhbERpZmZlcmVudGlhbEQ7XFx1NjE0NWxleXM7XFx1NjEyZFxcdTAyMDBhZWlvXFx1MDE4OVxcdTAxOGVcXHUwMTk0XFx1MDE5OHJvbjtcXHU0MTBjZGlsXFx1ODAzYlxceGM3XFx1NDBjN3JjO1xcdTQxMDhuaW50O1xcdTYyMzBvdDtcXHU0MTBhXFx1MDEwMGRuXFx1MDFhN1xcdTAxYWRpbGxhO1xcdTQwYjh0ZXJEb3Q7XFx1NDBiN1xceGYyXFx1MDE3Zmk7XFx1NDNhN3JjbGVcXHUwMjAwRE1QVFxcdTAxYzdcXHUwMWNiXFx1MDFkMVxcdTAxZDZvdDtcXHU2Mjk5aW51cztcXHU2Mjk2bHVzO1xcdTYyOTVpbWVzO1xcdTYyOTdvXFx1MDEwMGNzXFx1MDFlMlxcdTAxZjhrd2lzZUNvbnRvdXJJbnRlZ3JhbDtcXHU2MjMyZUN1cmx5XFx1MDEwMERRXFx1MDIwM1xcdTAyMGZvdWJsZVF1b3RlO1xcdTYwMWR1b3RlO1xcdTYwMTlcXHUwMjAwbG5wdVxcdTAyMWVcXHUwMjI4XFx1MDI0N1xcdTAyNTVvblxcdTAxMDA7ZVxcdTAyMjVcXHUwMjI2XFx1NjIzNztcXHU2YTc0XFx1MDE4MGdpdFxcdTAyMmZcXHUwMjM2XFx1MDIzYXJ1ZW50O1xcdTYyNjFudDtcXHU2MjJmb3VySW50ZWdyYWw7XFx1NjIyZVxcdTAxMDBmclxcdTAyNGNcXHUwMjRlO1xcdTYxMDJvZHVjdDtcXHU2MjEwbnRlckNsb2Nrd2lzZUNvbnRvdXJJbnRlZ3JhbDtcXHU2MjMzb3NzO1xcdTZhMmZjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjOWVwXFx1MDEwMDtDXFx1MDI4NFxcdTAyODVcXHU2MmQzYXA7XFx1NjI0ZFxcdTA1ODBESlNaYWNlZmlvc1xcdTAyYTBcXHUwMmFjXFx1MDJiMFxcdTAyYjRcXHUwMmI4XFx1MDJjYlxcdTAyZDdcXHUwMmUxXFx1MDJlNlxcdTAzMzNcXHUwNDhkXFx1MDEwMDtvXFx1MDE3OVxcdTAyYTV0cmFoZDtcXHU2OTExY3k7XFx1NDQwMmN5O1xcdTQ0MDVjeTtcXHU0NDBmXFx1MDE4MGdyc1xcdTAyYmZcXHUwMmM0XFx1MDJjN2dlcjtcXHU2MDIxcjtcXHU2MWExaHY7XFx1NmFlNFxcdTAxMDBheVxcdTAyZDBcXHUwMmQ1cm9uO1xcdTQxMGU7XFx1NDQxNGxcXHUwMTAwO3RcXHUwMmRkXFx1MDJkZVxcdTYyMDdhO1xcdTQzOTRyO1xcdWMwMDBcXHVkODM1XFx1ZGQwN1xcdTAxMDBhZlxcdTAyZWJcXHUwMzI3XFx1MDEwMGNtXFx1MDJmMFxcdTAzMjJyaXRpY2FsXFx1MDIwMEFER1RcXHUwMzAwXFx1MDMwNlxcdTAzMTZcXHUwMzFjY3V0ZTtcXHU0MGI0b1xcdTAxNzRcXHUwMzBiXFx1MDMwZDtcXHU0MmQ5YmxlQWN1dGU7XFx1NDJkZHJhdmU7XFx1NDA2MGlsZGU7XFx1NDJkY29uZDtcXHU2MmM0ZmVyZW50aWFsRDtcXHU2MTQ2XFx1MDQ3MFxcdTAzM2RcXDBcXDBcXDBcXHUwMzQyXFx1MDM1NFxcMFxcdTA0MDVmO1xcdWMwMDBcXHVkODM1XFx1ZGQzYlxcdTAxODA7REVcXHUwMzQ4XFx1MDM0OVxcdTAzNGRcXHU0MGE4b3Q7XFx1NjBkY3F1YWw7XFx1NjI1MGJsZVxcdTAzMDBDRExSVVZcXHUwMzYzXFx1MDM3MlxcdTAzODJcXHUwM2NmXFx1MDNlMlxcdTAzZjhvbnRvdXJJbnRlZ3JhXFx4ZWNcXHUwMjM5b1xcdTAyNzRcXHUwMzc5XFwwXFwwXFx1MDM3YlxceGJiXFx1MDM0OW5BcnJvdztcXHU2MWQzXFx1MDEwMGVvXFx1MDM4N1xcdTAzYTRmdFxcdTAxODBBUlRcXHUwMzkwXFx1MDM5NlxcdTAzYTFycm93O1xcdTYxZDBpZ2h0QXJyb3c7XFx1NjFkNGVcXHhlNVxcdTAyY2FuZ1xcdTAxMDBMUlxcdTAzYWJcXHUwM2M0ZWZ0XFx1MDEwMEFSXFx1MDNiM1xcdTAzYjlycm93O1xcdTY3ZjhpZ2h0QXJyb3c7XFx1NjdmYWlnaHRBcnJvdztcXHU2N2Y5aWdodFxcdTAxMDBBVFxcdTAzZDhcXHUwM2RlcnJvdztcXHU2MWQyZWU7XFx1NjJhOHBcXHUwMjQxXFx1MDNlOVxcMFxcMFxcdTAzZWZycm93O1xcdTYxZDFvd25BcnJvdztcXHU2MWQ1ZXJ0aWNhbEJhcjtcXHU2MjI1blxcdTAzMDBBQkxSVGFcXHUwNDEyXFx1MDQyYVxcdTA0MzBcXHUwNDVlXFx1MDQ3ZlxcdTAzN2Nycm93XFx1MDE4MDtCVVxcdTA0MWRcXHUwNDFlXFx1MDQyMlxcdTYxOTNhcjtcXHU2OTEzcEFycm93O1xcdTYxZjVyZXZlO1xcdTQzMTFlZnRcXHUwMmQyXFx1MDQzYVxcMFxcdTA0NDZcXDBcXHUwNDUwaWdodFZlY3RvcjtcXHU2OTUwZWVWZWN0b3I7XFx1Njk1ZWVjdG9yXFx1MDEwMDtCXFx1MDQ1OVxcdTA0NWFcXHU2MWJkYXI7XFx1Njk1NmlnaHRcXHUwMWQ0XFx1MDQ2N1xcMFxcdTA0NzFlZVZlY3RvcjtcXHU2OTVmZWN0b3JcXHUwMTAwO0JcXHUwNDdhXFx1MDQ3YlxcdTYxYzFhcjtcXHU2OTU3ZWVcXHUwMTAwO0FcXHUwNDg2XFx1MDQ4N1xcdTYyYTRycm93O1xcdTYxYTdcXHUwMTAwY3RcXHUwNDkyXFx1MDQ5N3I7XFx1YzAwMFxcdWQ4MzVcXHVkYzlmcm9rO1xcdTQxMTBcXHUwODAwTlRhY2RmZ2xtb3Bxc3R1eFxcdTA0YmRcXHUwNGMwXFx1MDRjNFxcdTA0Y2JcXHUwNGRlXFx1MDRlMlxcdTA0ZTdcXHUwNGVlXFx1MDRmNVxcdTA1MjFcXHUwNTJmXFx1MDUzNlxcdTA1NTJcXHUwNTVkXFx1MDU2MFxcdTA1NjVHO1xcdTQxNGFIXFx1ODAzYlxceGQwXFx1NDBkMGN1dGVcXHU4MDNiXFx4YzlcXHU0MGM5XFx1MDE4MGFpeVxcdTA0ZDJcXHUwNGQ3XFx1MDRkY3JvbjtcXHU0MTFhcmNcXHU4MDNiXFx4Y2FcXHU0MGNhO1xcdTQ0MmRvdDtcXHU0MTE2cjtcXHVjMDAwXFx1ZDgzNVxcdWRkMDhyYXZlXFx1ODAzYlxceGM4XFx1NDBjOGVtZW50O1xcdTYyMDhcXHUwMTAwYXBcXHUwNGZhXFx1MDRmZWNyO1xcdTQxMTJ0eVxcdTAyNTNcXHUwNTA2XFwwXFwwXFx1MDUxMm1hbGxTcXVhcmU7XFx1NjVmYmVyeVNtYWxsU3F1YXJlO1xcdTY1YWJcXHUwMTAwZ3BcXHUwNTI2XFx1MDUyYW9uO1xcdTQxMThmO1xcdWMwMDBcXHVkODM1XFx1ZGQzY3NpbG9uO1xcdTQzOTV1XFx1MDEwMGFpXFx1MDUzY1xcdTA1NDlsXFx1MDEwMDtUXFx1MDU0MlxcdTA1NDNcXHU2YTc1aWxkZTtcXHU2MjQybGlicml1bTtcXHU2MWNjXFx1MDEwMGNpXFx1MDU1N1xcdTA1NWFyO1xcdTYxMzBtO1xcdTZhNzNhO1xcdTQzOTdtbFxcdTgwM2JcXHhjYlxcdTQwY2JcXHUwMTAwaXBcXHUwNTZhXFx1MDU2ZnN0cztcXHU2MjAzb25lbnRpYWxFO1xcdTYxNDdcXHUwMjgwY2Zpb3NcXHUwNTg1XFx1MDU4OFxcdTA1OGRcXHUwNWIyXFx1MDVjY3k7XFx1NDQyNHI7XFx1YzAwMFxcdWQ4MzVcXHVkZDA5bGxlZFxcdTAyNTNcXHUwNTk3XFwwXFwwXFx1MDVhM21hbGxTcXVhcmU7XFx1NjVmY2VyeVNtYWxsU3F1YXJlO1xcdTY1YWFcXHUwMzcwXFx1MDViYVxcMFxcdTA1YmZcXDBcXDBcXHUwNWM0ZjtcXHVjMDAwXFx1ZDgzNVxcdWRkM2RBbGw7XFx1NjIwMHJpZXJ0cmY7XFx1NjEzMWNcXHhmMlxcdTA1Y2JcXHUwNjAwSlRhYmNkZmdvcnN0XFx1MDVlOFxcdTA1ZWNcXHUwNWVmXFx1MDVmYVxcdTA2MDBcXHUwNjEyXFx1MDYxNlxcdTA2MWJcXHUwNjFkXFx1MDYyM1xcdTA2NmNcXHUwNjcyY3k7XFx1NDQwM1xcdTgwM2I+XFx1NDAzZW1tYVxcdTAxMDA7ZFxcdTA1ZjdcXHUwNWY4XFx1NDM5MztcXHU0M2RjcmV2ZTtcXHU0MTFlXFx1MDE4MGVpeVxcdTA2MDdcXHUwNjBjXFx1MDYxMGRpbDtcXHU0MTIycmM7XFx1NDExYztcXHU0NDEzb3Q7XFx1NDEyMHI7XFx1YzAwMFxcdWQ4MzVcXHVkZDBhO1xcdTYyZDlwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkM2VlYXRlclxcdTAzMDBFRkdMU1RcXHUwNjM1XFx1MDY0NFxcdTA2NGVcXHUwNjU2XFx1MDY1YlxcdTA2NjZxdWFsXFx1MDEwMDtMXFx1MDYzZVxcdTA2M2ZcXHU2MjY1ZXNzO1xcdTYyZGJ1bGxFcXVhbDtcXHU2MjY3cmVhdGVyO1xcdTZhYTJlc3M7XFx1NjI3N2xhbnRFcXVhbDtcXHU2YTdlaWxkZTtcXHU2MjczY3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2EyO1xcdTYyNmJcXHUwNDAwQWFjZmlvc3VcXHUwNjg1XFx1MDY4YlxcdTA2OTZcXHUwNjliXFx1MDY5ZVxcdTA2YWFcXHUwNmJlXFx1MDZjYVJEY3k7XFx1NDQyYVxcdTAxMDBjdFxcdTA2OTBcXHUwNjk0ZWs7XFx1NDJjNztcXHU0MDVlaXJjO1xcdTQxMjRyO1xcdTYxMGNsYmVydFNwYWNlO1xcdTYxMGJcXHUwMWYwXFx1MDZhZlxcMFxcdTA2YjJmO1xcdTYxMGRpem9udGFsTGluZTtcXHU2NTAwXFx1MDEwMGN0XFx1MDZjM1xcdTA2YzVcXHhmMlxcdTA2YTlyb2s7XFx1NDEyNm1wXFx1MDE0NFxcdTA2ZDBcXHUwNmQ4b3duSHVtXFx4ZjBcXHUwMTJmcXVhbDtcXHU2MjRmXFx1MDcwMEVKT2FjZGZnbW5vc3R1XFx1MDZmYVxcdTA2ZmVcXHUwNzAzXFx1MDcwN1xcdTA3MGVcXHUwNzFhXFx1MDcxZVxcdTA3MjFcXHUwNzI4XFx1MDc0NFxcdTA3NzhcXHUwNzhiXFx1MDc4ZlxcdTA3OTVjeTtcXHU0NDE1bGlnO1xcdTQxMzJjeTtcXHU0NDAxY3V0ZVxcdTgwM2JcXHhjZFxcdTQwY2RcXHUwMTAwaXlcXHUwNzEzXFx1MDcxOHJjXFx1ODAzYlxceGNlXFx1NDBjZTtcXHU0NDE4b3Q7XFx1NDEzMHI7XFx1NjExMXJhdmVcXHU4MDNiXFx4Y2NcXHU0MGNjXFx1MDE4MDthcFxcdTA3MjBcXHUwNzJmXFx1MDczZlxcdTAxMDBjZ1xcdTA3MzRcXHUwNzM3cjtcXHU0MTJhaW5hcnlJO1xcdTYxNDhsaWVcXHhmM1xcdTAzZGRcXHUwMWY0XFx1MDc0OVxcMFxcdTA3NjJcXHUwMTAwO2VcXHUwNzRkXFx1MDc0ZVxcdTYyMmNcXHUwMTAwZ3JcXHUwNzUzXFx1MDc1OHJhbDtcXHU2MjJic2VjdGlvbjtcXHU2MmMyaXNpYmxlXFx1MDEwMENUXFx1MDc2Y1xcdTA3NzJvbW1hO1xcdTYwNjNpbWVzO1xcdTYwNjJcXHUwMTgwZ3B0XFx1MDc3ZlxcdTA3ODNcXHUwNzg4b247XFx1NDEyZWY7XFx1YzAwMFxcdWQ4MzVcXHVkZDQwYTtcXHU0Mzk5Y3I7XFx1NjExMGlsZGU7XFx1NDEyOFxcdTAxZWJcXHUwNzlhXFwwXFx1MDc5ZWN5O1xcdTQ0MDZsXFx1ODAzYlxceGNmXFx1NDBjZlxcdTAyODBjZm9zdVxcdTA3YWNcXHUwN2I3XFx1MDdiY1xcdTA3YzJcXHUwN2QwXFx1MDEwMGl5XFx1MDdiMVxcdTA3YjVyYztcXHU0MTM0O1xcdTQ0MTlyO1xcdWMwMDBcXHVkODM1XFx1ZGQwZHBmO1xcdWMwMDBcXHVkODM1XFx1ZGQ0MVxcdTAxZTNcXHUwN2M3XFwwXFx1MDdjY3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2E1cmN5O1xcdTQ0MDhrY3k7XFx1NDQwNFxcdTAzODBISmFjZm9zXFx1MDdlNFxcdTA3ZThcXHUwN2VjXFx1MDdmMVxcdTA3ZmRcXHUwODAyXFx1MDgwOGN5O1xcdTQ0MjVjeTtcXHU0NDBjcHBhO1xcdTQzOWFcXHUwMTAwZXlcXHUwN2Y2XFx1MDdmYmRpbDtcXHU0MTM2O1xcdTQ0MWFyO1xcdWMwMDBcXHVkODM1XFx1ZGQwZXBmO1xcdWMwMDBcXHVkODM1XFx1ZGQ0MmNyO1xcdWMwMDBcXHVkODM1XFx1ZGNhNlxcdTA1ODBKVGFjZWZsbW9zdFxcdTA4MjVcXHUwODI5XFx1MDgyY1xcdTA4NTBcXHUwODYzXFx1MDliM1xcdTA5YjhcXHUwOWM3XFx1MDljZFxcdTBhMzdcXHUwYTQ3Y3k7XFx1NDQwOVxcdTgwM2I8XFx1NDAzY1xcdTAyODBjbW5wclxcdTA4MzdcXHUwODNjXFx1MDg0MVxcdTA4NDRcXHUwODRkdXRlO1xcdTQxMzliZGE7XFx1NDM5Ymc7XFx1NjdlYWxhY2V0cmY7XFx1NjExMnI7XFx1NjE5ZVxcdTAxODBhZXlcXHUwODU3XFx1MDg1Y1xcdTA4NjFyb247XFx1NDEzZGRpbDtcXHU0MTNiO1xcdTQ0MWJcXHUwMTAwZnNcXHUwODY4XFx1MDk3MHRcXHUwNTAwQUNERlJUVVZhclxcdTA4N2VcXHUwOGE5XFx1MDhiMVxcdTA4ZTBcXHUwOGU2XFx1MDhmY1xcdTA5MmZcXHUwOTViXFx1MDM5MFxcdTA5NmFcXHUwMTAwbnJcXHUwODgzXFx1MDg4ZmdsZUJyYWNrZXQ7XFx1NjdlOHJvd1xcdTAxODA7QlJcXHUwODk5XFx1MDg5YVxcdTA4OWVcXHU2MTkwYXI7XFx1NjFlNGlnaHRBcnJvdztcXHU2MWM2ZWlsaW5nO1xcdTYzMDhvXFx1MDFmNVxcdTA4YjdcXDBcXHUwOGMzYmxlQnJhY2tldDtcXHU2N2U2blxcdTAxZDRcXHUwOGM4XFwwXFx1MDhkMmVlVmVjdG9yO1xcdTY5NjFlY3RvclxcdTAxMDA7QlxcdTA4ZGJcXHUwOGRjXFx1NjFjM2FyO1xcdTY5NTlsb29yO1xcdTYzMGFpZ2h0XFx1MDEwMEFWXFx1MDhlZlxcdTA4ZjVycm93O1xcdTYxOTRlY3RvcjtcXHU2OTRlXFx1MDEwMGVyXFx1MDkwMVxcdTA5MTdlXFx1MDE4MDtBVlxcdTA5MDlcXHUwOTBhXFx1MDkxMFxcdTYyYTNycm93O1xcdTYxYTRlY3RvcjtcXHU2OTVhaWFuZ2xlXFx1MDE4MDtCRVxcdTA5MjRcXHUwOTI1XFx1MDkyOVxcdTYyYjJhcjtcXHU2OWNmcXVhbDtcXHU2MmI0cFxcdTAxODBEVFZcXHUwOTM3XFx1MDk0MlxcdTA5NGNvd25WZWN0b3I7XFx1Njk1MWVlVmVjdG9yO1xcdTY5NjBlY3RvclxcdTAxMDA7QlxcdTA5NTZcXHUwOTU3XFx1NjFiZmFyO1xcdTY5NThlY3RvclxcdTAxMDA7QlxcdTA5NjVcXHUwOTY2XFx1NjFiY2FyO1xcdTY5NTJpZ2h0XFx4ZTFcXHUwMzljc1xcdTAzMDBFRkdMU1RcXHUwOTdlXFx1MDk4YlxcdTA5OTVcXHUwOTlkXFx1MDlhMlxcdTA5YWRxdWFsR3JlYXRlcjtcXHU2MmRhdWxsRXF1YWw7XFx1NjI2NnJlYXRlcjtcXHU2Mjc2ZXNzO1xcdTZhYTFsYW50RXF1YWw7XFx1NmE3ZGlsZGU7XFx1NjI3MnI7XFx1YzAwMFxcdWQ4MzVcXHVkZDBmXFx1MDEwMDtlXFx1MDliZFxcdTA5YmVcXHU2MmQ4ZnRhcnJvdztcXHU2MWRhaWRvdDtcXHU0MTNmXFx1MDE4MG5wd1xcdTA5ZDRcXHUwYTE2XFx1MGExYmdcXHUwMjAwTFJsclxcdTA5ZGVcXHUwOWY3XFx1MGEwMlxcdTBhMTBlZnRcXHUwMTAwQVJcXHUwOWU2XFx1MDllY3Jyb3c7XFx1NjdmNWlnaHRBcnJvdztcXHU2N2Y3aWdodEFycm93O1xcdTY3ZjZlZnRcXHUwMTAwYXJcXHUwM2IzXFx1MGEwYWlnaHRcXHhlMVxcdTAzYmZpZ2h0XFx4ZTFcXHUwM2NhZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNDNlclxcdTAxMDBMUlxcdTBhMjJcXHUwYTJjZWZ0QXJyb3c7XFx1NjE5OWlnaHRBcnJvdztcXHU2MTk4XFx1MDE4MGNodFxcdTBhM2VcXHUwYTQwXFx1MGE0MlxceGYyXFx1MDg0YztcXHU2MWIwcm9rO1xcdTQxNDE7XFx1NjI2YVxcdTA0MDBhY2VmaW9zdVxcdTBhNWFcXHUwYTVkXFx1MGE2MFxcdTBhNzdcXHUwYTdjXFx1MGE4NVxcdTBhOGJcXHUwYThlcDtcXHU2OTA1eTtcXHU0NDFjXFx1MDEwMGRsXFx1MGE2NVxcdTBhNmZpdW1TcGFjZTtcXHU2MDVmbGludHJmO1xcdTYxMzNyO1xcdWMwMDBcXHVkODM1XFx1ZGQxMG51c1BsdXM7XFx1NjIxM3BmO1xcdWMwMDBcXHVkODM1XFx1ZGQ0NGNcXHhmMlxcdTBhNzY7XFx1NDM5Y1xcdTA0ODBKYWNlZm9zdHVcXHUwYWEzXFx1MGFhN1xcdTBhYWRcXHUwYWMwXFx1MGIxNFxcdTBiMTlcXHUwZDkxXFx1MGQ5N1xcdTBkOWVjeTtcXHU0NDBhY3V0ZTtcXHU0MTQzXFx1MDE4MGFleVxcdTBhYjRcXHUwYWI5XFx1MGFiZXJvbjtcXHU0MTQ3ZGlsO1xcdTQxNDU7XFx1NDQxZFxcdTAxODBnc3dcXHUwYWM3XFx1MGFmMFxcdTBiMGVhdGl2ZVxcdTAxODBNVFZcXHUwYWQzXFx1MGFkZlxcdTBhZThlZGl1bVNwYWNlO1xcdTYwMGJoaVxcdTAxMDBjblxcdTBhZTZcXHUwYWQ4XFx4ZWJcXHUwYWQ5ZXJ5VGhpXFx4ZWVcXHUwYWQ5dGVkXFx1MDEwMEdMXFx1MGFmOFxcdTBiMDZyZWF0ZXJHcmVhdGVcXHhmMlxcdTA2NzNlc3NMZXNcXHhmM1xcdTBhNDhMaW5lO1xcdTQwMGFyO1xcdWMwMDBcXHVkODM1XFx1ZGQxMVxcdTAyMDBCbnB0XFx1MGIyMlxcdTBiMjhcXHUwYjM3XFx1MGIzYXJlYWs7XFx1NjA2MEJyZWFraW5nU3BhY2U7XFx1NDBhMGY7XFx1NjExNVxcdTA2ODA7Q0RFR0hMTlBSU1RWXFx1MGI1NVxcdTBiNTZcXHUwYjZhXFx1MGI3Y1xcdTBiYTFcXHUwYmViXFx1MGMwNFxcdTBjNWVcXHUwYzg0XFx1MGNhNlxcdTBjZDhcXHUwZDYxXFx1MGQ4NVxcdTZhZWNcXHUwMTAwb3VcXHUwYjViXFx1MGI2NG5ncnVlbnQ7XFx1NjI2MnBDYXA7XFx1NjI2ZG91YmxlVmVydGljYWxCYXI7XFx1NjIyNlxcdTAxODBscXhcXHUwYjgzXFx1MGI4YVxcdTBiOWJlbWVudDtcXHU2MjA5dWFsXFx1MDEwMDtUXFx1MGI5MlxcdTBiOTNcXHU2MjYwaWxkZTtcXHVjMDAwXFx1MjI0MlxcdTAzMzhpc3RzO1xcdTYyMDRyZWF0ZXJcXHUwMzgwO0VGR0xTVFxcdTBiYjZcXHUwYmI3XFx1MGJiZFxcdTBiYzlcXHUwYmQzXFx1MGJkOFxcdTBiZTVcXHU2MjZmcXVhbDtcXHU2MjcxdWxsRXF1YWw7XFx1YzAwMFxcdTIyNjdcXHUwMzM4cmVhdGVyO1xcdWMwMDBcXHUyMjZiXFx1MDMzOGVzcztcXHU2Mjc5bGFudEVxdWFsO1xcdWMwMDBcXHUyYTdlXFx1MDMzOGlsZGU7XFx1NjI3NXVtcFxcdTAxNDRcXHUwYmYyXFx1MGJmZG93bkh1bXA7XFx1YzAwMFxcdTIyNGVcXHUwMzM4cXVhbDtcXHVjMDAwXFx1MjI0ZlxcdTAzMzhlXFx1MDEwMGZzXFx1MGMwYVxcdTBjMjd0VHJpYW5nbGVcXHUwMTgwO0JFXFx1MGMxYVxcdTBjMWJcXHUwYzIxXFx1NjJlYWFyO1xcdWMwMDBcXHUyOWNmXFx1MDMzOHF1YWw7XFx1NjJlY3NcXHUwMzAwO0VHTFNUXFx1MGMzNVxcdTBjMzZcXHUwYzNjXFx1MGM0NFxcdTBjNGJcXHUwYzU4XFx1NjI2ZXF1YWw7XFx1NjI3MHJlYXRlcjtcXHU2Mjc4ZXNzO1xcdWMwMDBcXHUyMjZhXFx1MDMzOGxhbnRFcXVhbDtcXHVjMDAwXFx1MmE3ZFxcdTAzMzhpbGRlO1xcdTYyNzRlc3RlZFxcdTAxMDBHTFxcdTBjNjhcXHUwYzc5cmVhdGVyR3JlYXRlcjtcXHVjMDAwXFx1MmFhMlxcdTAzMzhlc3NMZXNzO1xcdWMwMDBcXHUyYWExXFx1MDMzOHJlY2VkZXNcXHUwMTgwO0VTXFx1MGM5MlxcdTBjOTNcXHUwYzliXFx1NjI4MHF1YWw7XFx1YzAwMFxcdTJhYWZcXHUwMzM4bGFudEVxdWFsO1xcdTYyZTBcXHUwMTAwZWlcXHUwY2FiXFx1MGNiOXZlcnNlRWxlbWVudDtcXHU2MjBjZ2h0VHJpYW5nbGVcXHUwMTgwO0JFXFx1MGNjYlxcdTBjY2NcXHUwY2QyXFx1NjJlYmFyO1xcdWMwMDBcXHUyOWQwXFx1MDMzOHF1YWw7XFx1NjJlZFxcdTAxMDBxdVxcdTBjZGRcXHUwZDBjdWFyZVN1XFx1MDEwMGJwXFx1MGNlOFxcdTBjZjlzZXRcXHUwMTAwO0VcXHUwY2YwXFx1MGNmM1xcdWMwMDBcXHUyMjhmXFx1MDMzOHF1YWw7XFx1NjJlMmVyc2V0XFx1MDEwMDtFXFx1MGQwM1xcdTBkMDZcXHVjMDAwXFx1MjI5MFxcdTAzMzhxdWFsO1xcdTYyZTNcXHUwMTgwYmNwXFx1MGQxM1xcdTBkMjRcXHUwZDRlc2V0XFx1MDEwMDtFXFx1MGQxYlxcdTBkMWVcXHVjMDAwXFx1MjI4MlxcdTIwZDJxdWFsO1xcdTYyODhjZWVkc1xcdTAyMDA7RVNUXFx1MGQzMlxcdTBkMzNcXHUwZDNiXFx1MGQ0NlxcdTYyODFxdWFsO1xcdWMwMDBcXHUyYWIwXFx1MDMzOGxhbnRFcXVhbDtcXHU2MmUxaWxkZTtcXHVjMDAwXFx1MjI3ZlxcdTAzMzhlcnNldFxcdTAxMDA7RVxcdTBkNThcXHUwZDViXFx1YzAwMFxcdTIyODNcXHUyMGQycXVhbDtcXHU2Mjg5aWxkZVxcdTAyMDA7RUZUXFx1MGQ2ZVxcdTBkNmZcXHUwZDc1XFx1MGQ3ZlxcdTYyNDFxdWFsO1xcdTYyNDR1bGxFcXVhbDtcXHU2MjQ3aWxkZTtcXHU2MjQ5ZXJ0aWNhbEJhcjtcXHU2MjI0Y3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2E5aWxkZVxcdTgwM2JcXHhkMVxcdTQwZDE7XFx1NDM5ZFxcdTA3MDBFYWNkZmdtb3Byc3R1dlxcdTBkYmRcXHUwZGMyXFx1MGRjOVxcdTBkZDVcXHUwZGRiXFx1MGRlMFxcdTBkZTdcXHUwZGZjXFx1MGUwMlxcdTBlMjBcXHUwZTIyXFx1MGUzMlxcdTBlM2ZcXHUwZTQ0bGlnO1xcdTQxNTJjdXRlXFx1ODAzYlxceGQzXFx1NDBkM1xcdTAxMDBpeVxcdTBkY2VcXHUwZGQzcmNcXHU4MDNiXFx4ZDRcXHU0MGQ0O1xcdTQ0MWVibGFjO1xcdTQxNTByO1xcdWMwMDBcXHVkODM1XFx1ZGQxMnJhdmVcXHU4MDNiXFx4ZDJcXHU0MGQyXFx1MDE4MGFlaVxcdTBkZWVcXHUwZGYyXFx1MGRmNmNyO1xcdTQxNGNnYTtcXHU0M2E5Y3JvbjtcXHU0MzlmcGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDQ2ZW5DdXJseVxcdTAxMDBEUVxcdTBlMGVcXHUwZTFhb3VibGVRdW90ZTtcXHU2MDFjdW90ZTtcXHU2MDE4O1xcdTZhNTRcXHUwMTAwY2xcXHUwZTI3XFx1MGUyY3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2FhYXNoXFx1ODAzYlxceGQ4XFx1NDBkOGlcXHUwMTZjXFx1MGUzN1xcdTBlM2NkZVxcdTgwM2JcXHhkNVxcdTQwZDVlcztcXHU2YTM3bWxcXHU4MDNiXFx4ZDZcXHU0MGQ2ZXJcXHUwMTAwQlBcXHUwZTRiXFx1MGU2MFxcdTAxMDBhclxcdTBlNTBcXHUwZTUzcjtcXHU2MDNlYWNcXHUwMTAwZWtcXHUwZTVhXFx1MGU1YztcXHU2M2RlZXQ7XFx1NjNiNGFyZW50aGVzaXM7XFx1NjNkY1xcdTA0ODBhY2ZoaWxvcnNcXHUwZTdmXFx1MGU4N1xcdTBlOGFcXHUwZThmXFx1MGU5MlxcdTBlOTRcXHUwZTlkXFx1MGViMFxcdTBlZmNydGlhbEQ7XFx1NjIwMnk7XFx1NDQxZnI7XFx1YzAwMFxcdWQ4MzVcXHVkZDEzaTtcXHU0M2E2O1xcdTQzYTB1c01pbnVzO1xcdTQwYjFcXHUwMTAwaXBcXHUwZWEyXFx1MGVhZG5jYXJlcGxhblxceGU1XFx1MDY5ZGY7XFx1NjExOVxcdTAyMDA7ZWlvXFx1MGViOVxcdTBlYmFcXHUwZWUwXFx1MGVlNFxcdTZhYmJjZWRlc1xcdTAyMDA7RVNUXFx1MGVjOFxcdTBlYzlcXHUwZWNmXFx1MGVkYVxcdTYyN2FxdWFsO1xcdTZhYWZsYW50RXF1YWw7XFx1NjI3Y2lsZGU7XFx1NjI3ZW1lO1xcdTYwMzNcXHUwMTAwZHBcXHUwZWU5XFx1MGVlZXVjdDtcXHU2MjBmb3J0aW9uXFx1MDEwMDthXFx1MDIyNVxcdTBlZjlsO1xcdTYyMWRcXHUwMTAwY2lcXHUwZjAxXFx1MGYwNnI7XFx1YzAwMFxcdWQ4MzVcXHVkY2FiO1xcdTQzYThcXHUwMjAwVWZvc1xcdTBmMTFcXHUwZjE2XFx1MGYxYlxcdTBmMWZPVFxcdTgwM2JcXFwiXFx1NDAyMnI7XFx1YzAwMFxcdWQ4MzVcXHVkZDE0cGY7XFx1NjExYWNyO1xcdWMwMDBcXHVkODM1XFx1ZGNhY1xcdTA2MDBCRWFjZWZoaW9yc3VcXHUwZjNlXFx1MGY0M1xcdTBmNDdcXHUwZjYwXFx1MGY3M1xcdTBmYTdcXHUwZmFhXFx1MGZhZFxcdTEwOTZcXHUxMGE5XFx1MTBiNFxcdTEwYmVhcnI7XFx1NjkxMEdcXHU4MDNiXFx4YWVcXHU0MGFlXFx1MDE4MGNuclxcdTBmNGVcXHUwZjUzXFx1MGY1NnV0ZTtcXHU0MTU0ZztcXHU2N2ViclxcdTAxMDA7dFxcdTBmNWNcXHUwZjVkXFx1NjFhMGw7XFx1NjkxNlxcdTAxODBhZXlcXHUwZjY3XFx1MGY2Y1xcdTBmNzFyb247XFx1NDE1OGRpbDtcXHU0MTU2O1xcdTQ0MjBcXHUwMTAwO3ZcXHUwZjc4XFx1MGY3OVxcdTYxMWNlcnNlXFx1MDEwMEVVXFx1MGY4MlxcdTBmOTlcXHUwMTAwbHFcXHUwZjg3XFx1MGY4ZWVtZW50O1xcdTYyMGJ1aWxpYnJpdW07XFx1NjFjYnBFcXVpbGlicml1bTtcXHU2OTZmclxceGJiXFx1MGY3OW87XFx1NDNhMWdodFxcdTA0MDBBQ0RGVFVWYVxcdTBmYzFcXHUwZmViXFx1MGZmM1xcdTEwMjJcXHUxMDI4XFx1MTA1YlxcdTEwODdcXHUwM2Q4XFx1MDEwMG5yXFx1MGZjNlxcdTBmZDJnbGVCcmFja2V0O1xcdTY3ZTlyb3dcXHUwMTgwO0JMXFx1MGZkY1xcdTBmZGRcXHUwZmUxXFx1NjE5MmFyO1xcdTYxZTVlZnRBcnJvdztcXHU2MWM0ZWlsaW5nO1xcdTYzMDlvXFx1MDFmNVxcdTBmZjlcXDBcXHUxMDA1YmxlQnJhY2tldDtcXHU2N2U3blxcdTAxZDRcXHUxMDBhXFwwXFx1MTAxNGVlVmVjdG9yO1xcdTY5NWRlY3RvclxcdTAxMDA7QlxcdTEwMWRcXHUxMDFlXFx1NjFjMmFyO1xcdTY5NTVsb29yO1xcdTYzMGJcXHUwMTAwZXJcXHUxMDJkXFx1MTA0M2VcXHUwMTgwO0FWXFx1MTAzNVxcdTEwMzZcXHUxMDNjXFx1NjJhMnJyb3c7XFx1NjFhNmVjdG9yO1xcdTY5NWJpYW5nbGVcXHUwMTgwO0JFXFx1MTA1MFxcdTEwNTFcXHUxMDU1XFx1NjJiM2FyO1xcdTY5ZDBxdWFsO1xcdTYyYjVwXFx1MDE4MERUVlxcdTEwNjNcXHUxMDZlXFx1MTA3OG93blZlY3RvcjtcXHU2OTRmZWVWZWN0b3I7XFx1Njk1Y2VjdG9yXFx1MDEwMDtCXFx1MTA4MlxcdTEwODNcXHU2MWJlYXI7XFx1Njk1NGVjdG9yXFx1MDEwMDtCXFx1MTA5MVxcdTEwOTJcXHU2MWMwYXI7XFx1Njk1M1xcdTAxMDBwdVxcdTEwOWJcXHUxMDllZjtcXHU2MTFkbmRJbXBsaWVzO1xcdTY5NzBpZ2h0YXJyb3c7XFx1NjFkYlxcdTAxMDBjaFxcdTEwYjlcXHUxMGJjcjtcXHU2MTFiO1xcdTYxYjFsZURlbGF5ZWQ7XFx1NjlmNFxcdTA2ODBIT2FjZmhpbW9xc3R1XFx1MTBlNFxcdTEwZjFcXHUxMGY3XFx1MTBmZFxcdTExMTlcXHUxMTFlXFx1MTE1MVxcdTExNTZcXHUxMTYxXFx1MTE2N1xcdTExYjVcXHUxMWJiXFx1MTFiZlxcdTAxMDBDY1xcdTEwZTlcXHUxMGVlSGN5O1xcdTQ0Mjl5O1xcdTQ0MjhGVGN5O1xcdTQ0MmNjdXRlO1xcdTQxNWFcXHUwMjgwO2FlaXlcXHUxMTA4XFx1MTEwOVxcdTExMGVcXHUxMTEzXFx1MTExN1xcdTZhYmNyb247XFx1NDE2MGRpbDtcXHU0MTVlcmM7XFx1NDE1YztcXHU0NDIxcjtcXHVjMDAwXFx1ZDgzNVxcdWRkMTZvcnRcXHUwMjAwRExSVVxcdTExMmFcXHUxMTM0XFx1MTEzZVxcdTExNDlvd25BcnJvd1xceGJiXFx1MDQxZWVmdEFycm93XFx4YmJcXHUwODlhaWdodEFycm93XFx4YmJcXHUwZmRkcEFycm93O1xcdTYxOTFnbWE7XFx1NDNhM2FsbENpcmNsZTtcXHU2MjE4cGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDRhXFx1MDI3MlxcdTExNmRcXDBcXDBcXHUxMTcwdDtcXHU2MjFhYXJlXFx1MDIwMDtJU1VcXHUxMTdiXFx1MTE3Y1xcdTExODlcXHUxMWFmXFx1NjVhMW50ZXJzZWN0aW9uO1xcdTYyOTN1XFx1MDEwMGJwXFx1MTE4ZlxcdTExOWVzZXRcXHUwMTAwO0VcXHUxMTk3XFx1MTE5OFxcdTYyOGZxdWFsO1xcdTYyOTFlcnNldFxcdTAxMDA7RVxcdTExYThcXHUxMWE5XFx1NjI5MHF1YWw7XFx1NjI5Mm5pb247XFx1NjI5NGNyO1xcdWMwMDBcXHVkODM1XFx1ZGNhZWFyO1xcdTYyYzZcXHUwMjAwYmNtcFxcdTExYzhcXHUxMWRiXFx1MTIwOVxcdTEyMGJcXHUwMTAwO3NcXHUxMWNkXFx1MTFjZVxcdTYyZDBldFxcdTAxMDA7RVxcdTExY2RcXHUxMWQ1cXVhbDtcXHU2Mjg2XFx1MDEwMGNoXFx1MTFlMFxcdTEyMDVlZWRzXFx1MDIwMDtFU1RcXHUxMWVkXFx1MTFlZVxcdTExZjRcXHUxMWZmXFx1NjI3YnF1YWw7XFx1NmFiMGxhbnRFcXVhbDtcXHU2MjdkaWxkZTtcXHU2MjdmVGhcXHhlMVxcdTBmOGM7XFx1NjIxMVxcdTAxODA7ZXNcXHUxMjEyXFx1MTIxM1xcdTEyMjNcXHU2MmQxcnNldFxcdTAxMDA7RVxcdTEyMWNcXHUxMjFkXFx1NjI4M3F1YWw7XFx1NjI4N2V0XFx4YmJcXHUxMjEzXFx1MDU4MEhSU2FjZmhpb3JzXFx1MTIzZVxcdTEyNDRcXHUxMjQ5XFx1MTI1NVxcdTEyNWVcXHUxMjcxXFx1MTI3NlxcdTEyOWZcXHUxMmMyXFx1MTJjOFxcdTEyZDFPUk5cXHU4MDNiXFx4ZGVcXHU0MGRlQURFO1xcdTYxMjJcXHUwMTAwSGNcXHUxMjRlXFx1MTI1MmN5O1xcdTQ0MGJ5O1xcdTQ0MjZcXHUwMTAwYnVcXHUxMjVhXFx1MTI1YztcXHU0MDA5O1xcdTQzYTRcXHUwMTgwYWV5XFx1MTI2NVxcdTEyNmFcXHUxMjZmcm9uO1xcdTQxNjRkaWw7XFx1NDE2MjtcXHU0NDIycjtcXHVjMDAwXFx1ZDgzNVxcdWRkMTdcXHUwMTAwZWlcXHUxMjdiXFx1MTI4OVxcdTAxZjJcXHUxMjgwXFwwXFx1MTI4N2Vmb3JlO1xcdTYyMzRhO1xcdTQzOThcXHUwMTAwY25cXHUxMjhlXFx1MTI5OGtTcGFjZTtcXHVjMDAwXFx1MjA1ZlxcdTIwMGFTcGFjZTtcXHU2MDA5bGRlXFx1MDIwMDtFRlRcXHUxMmFiXFx1MTJhY1xcdTEyYjJcXHUxMmJjXFx1NjIzY3F1YWw7XFx1NjI0M3VsbEVxdWFsO1xcdTYyNDVpbGRlO1xcdTYyNDhwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNGJpcGxlRG90O1xcdTYwZGJcXHUwMTAwY3RcXHUxMmQ2XFx1MTJkYnI7XFx1YzAwMFxcdWQ4MzVcXHVkY2Fmcm9rO1xcdTQxNjZcXHUwYWUxXFx1MTJmN1xcdTEzMGVcXHUxMzFhXFx1MTMyNlxcMFxcdTEzMmNcXHUxMzMxXFwwXFwwXFwwXFwwXFwwXFx1MTMzOFxcdTEzM2RcXHUxMzc3XFx1MTM4NVxcMFxcdTEzZmZcXHUxNDA0XFx1MTQwYVxcdTE0MTBcXHUwMTAwY3JcXHUxMmZiXFx1MTMwMXV0ZVxcdTgwM2JcXHhkYVxcdTQwZGFyXFx1MDEwMDtvXFx1MTMwN1xcdTEzMDhcXHU2MTlmY2lyO1xcdTY5NDlyXFx1MDFlM1xcdTEzMTNcXDBcXHUxMzE2eTtcXHU0NDBldmU7XFx1NDE2Y1xcdTAxMDBpeVxcdTEzMWVcXHUxMzIzcmNcXHU4MDNiXFx4ZGJcXHU0MGRiO1xcdTQ0MjNibGFjO1xcdTQxNzByO1xcdWMwMDBcXHVkODM1XFx1ZGQxOHJhdmVcXHU4MDNiXFx4ZDlcXHU0MGQ5YWNyO1xcdTQxNmFcXHUwMTAwZGlcXHUxMzQxXFx1MTM2OWVyXFx1MDEwMEJQXFx1MTM0OFxcdTEzNWRcXHUwMTAwYXJcXHUxMzRkXFx1MTM1MHI7XFx1NDA1ZmFjXFx1MDEwMGVrXFx1MTM1N1xcdTEzNTk7XFx1NjNkZmV0O1xcdTYzYjVhcmVudGhlc2lzO1xcdTYzZGRvblxcdTAxMDA7UFxcdTEzNzBcXHUxMzcxXFx1NjJjM2x1cztcXHU2MjhlXFx1MDEwMGdwXFx1MTM3YlxcdTEzN2ZvbjtcXHU0MTcyZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNGNcXHUwNDAwQURFVGFkcHNcXHUxMzk1XFx1MTNhZVxcdTEzYjhcXHUxM2M0XFx1MDNlOFxcdTEzZDJcXHUxM2Q3XFx1MTNmM3Jyb3dcXHUwMTgwO0JEXFx1MTE1MFxcdTEzYTBcXHUxM2E0YXI7XFx1NjkxMm93bkFycm93O1xcdTYxYzVvd25BcnJvdztcXHU2MTk1cXVpbGlicml1bTtcXHU2OTZlZWVcXHUwMTAwO0FcXHUxM2NiXFx1MTNjY1xcdTYyYTVycm93O1xcdTYxYTVvd25cXHhlMVxcdTAzZjNlclxcdTAxMDBMUlxcdTEzZGVcXHUxM2U4ZWZ0QXJyb3c7XFx1NjE5NmlnaHRBcnJvdztcXHU2MTk3aVxcdTAxMDA7bFxcdTEzZjlcXHUxM2ZhXFx1NDNkMm9uO1xcdTQzYTVpbmc7XFx1NDE2ZWNyO1xcdWMwMDBcXHVkODM1XFx1ZGNiMGlsZGU7XFx1NDE2OG1sXFx1ODAzYlxceGRjXFx1NDBkY1xcdTA0ODBEYmNkZWZvc3ZcXHUxNDI3XFx1MTQyY1xcdTE0MzBcXHUxNDMzXFx1MTQzZVxcdTE0ODVcXHUxNDhhXFx1MTQ5MFxcdTE0OTZhc2g7XFx1NjJhYmFyO1xcdTZhZWJ5O1xcdTQ0MTJhc2hcXHUwMTAwO2xcXHUxNDNiXFx1MTQzY1xcdTYyYTk7XFx1NmFlNlxcdTAxMDBlclxcdTE0NDNcXHUxNDQ1O1xcdTYyYzFcXHUwMTgwYnR5XFx1MTQ0Y1xcdTE0NTBcXHUxNDdhYXI7XFx1NjAxNlxcdTAxMDA7aVxcdTE0NGZcXHUxNDU1Y2FsXFx1MDIwMEJMU1RcXHUxNDYxXFx1MTQ2NVxcdTE0NmFcXHUxNDc0YXI7XFx1NjIyM2luZTtcXHU0MDdjZXBhcmF0b3I7XFx1Njc1OGlsZGU7XFx1NjI0MFRoaW5TcGFjZTtcXHU2MDBhcjtcXHVjMDAwXFx1ZDgzNVxcdWRkMTlwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNGRjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYjFkYXNoO1xcdTYyYWFcXHUwMjgwY2Vmb3NcXHUxNGE3XFx1MTRhY1xcdTE0YjFcXHUxNGI2XFx1MTRiY2lyYztcXHU0MTc0ZGdlO1xcdTYyYzByO1xcdWMwMDBcXHVkODM1XFx1ZGQxYXBmO1xcdWMwMDBcXHVkODM1XFx1ZGQ0ZWNyO1xcdWMwMDBcXHVkODM1XFx1ZGNiMlxcdTAyMDBmaW9zXFx1MTRjYlxcdTE0ZDBcXHUxNGQyXFx1MTRkOHI7XFx1YzAwMFxcdWQ4MzVcXHVkZDFiO1xcdTQzOWVwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNGZjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYjNcXHUwNDgwQUlVYWNmb3N1XFx1MTRmMVxcdTE0ZjVcXHUxNGY5XFx1MTRmZFxcdTE1MDRcXHUxNTBmXFx1MTUxNFxcdTE1MWFcXHUxNTIwY3k7XFx1NDQyZmN5O1xcdTQ0MDdjeTtcXHU0NDJlY3V0ZVxcdTgwM2JcXHhkZFxcdTQwZGRcXHUwMTAwaXlcXHUxNTA5XFx1MTUwZHJjO1xcdTQxNzY7XFx1NDQyYnI7XFx1YzAwMFxcdWQ4MzVcXHVkZDFjcGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDUwY3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2I0bWw7XFx1NDE3OFxcdTA0MDBIYWNkZWZvc1xcdTE1MzVcXHUxNTM5XFx1MTUzZlxcdTE1NGJcXHUxNTRmXFx1MTU1ZFxcdTE1NjBcXHUxNTY0Y3k7XFx1NDQxNmN1dGU7XFx1NDE3OVxcdTAxMDBheVxcdTE1NDRcXHUxNTQ5cm9uO1xcdTQxN2Q7XFx1NDQxN290O1xcdTQxN2JcXHUwMWYyXFx1MTU1NFxcMFxcdTE1NWJvV2lkdFxceGU4XFx1MGFkOWE7XFx1NDM5NnI7XFx1NjEyOHBmO1xcdTYxMjRjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYjVcXHUwYmUxXFx1MTU4M1xcdTE1OGFcXHUxNTkwXFwwXFx1MTViMFxcdTE1YjZcXHUxNWJmXFwwXFwwXFwwXFwwXFx1MTVjNlxcdTE1ZGJcXHUxNWViXFx1MTY1ZlxcdTE2NmRcXDBcXHUxNjk1XFx1MTY5YlxcdTE2YjJcXHUxNmI5XFwwXFx1MTZiZWN1dGVcXHU4MDNiXFx4ZTFcXHU0MGUxcmV2ZTtcXHU0MTAzXFx1MDMwMDtFZGl1eVxcdTE1OWNcXHUxNTlkXFx1MTVhMVxcdTE1YTNcXHUxNWE4XFx1MTVhZFxcdTYyM2U7XFx1YzAwMFxcdTIyM2VcXHUwMzMzO1xcdTYyM2ZyY1xcdTgwM2JcXHhlMlxcdTQwZTJ0ZVxcdTgwYmJcXHhiNFxcdTAzMDY7XFx1NDQzMGxpZ1xcdTgwM2JcXHhlNlxcdTQwZTZcXHUwMTAwO3JcXHhiMlxcdTE1YmE7XFx1YzAwMFxcdWQ4MzVcXHVkZDFlcmF2ZVxcdTgwM2JcXHhlMFxcdTQwZTBcXHUwMTAwZXBcXHUxNWNhXFx1MTVkNlxcdTAxMDBmcFxcdTE1Y2ZcXHUxNWQ0c3ltO1xcdTYxMzVcXHhlOFxcdTE1ZDNoYTtcXHU0M2IxXFx1MDEwMGFwXFx1MTVkZmNcXHUwMTAwY2xcXHUxNWU0XFx1MTVlN3I7XFx1NDEwMWc7XFx1NmEzZlxcdTAyNjRcXHUxNWYwXFwwXFwwXFx1MTYwYVxcdTAyODA7YWRzdlxcdTE1ZmFcXHUxNWZiXFx1MTVmZlxcdTE2MDFcXHUxNjA3XFx1NjIyN25kO1xcdTZhNTU7XFx1NmE1Y2xvcGU7XFx1NmE1ODtcXHU2YTVhXFx1MDM4MDtlbG1yc3pcXHUxNjE4XFx1MTYxOVxcdTE2MWJcXHUxNjFlXFx1MTYzZlxcdTE2NGZcXHUxNjU5XFx1NjIyMDtcXHU2OWE0ZVxceGJiXFx1MTYxOXNkXFx1MDEwMDthXFx1MTYyNVxcdTE2MjZcXHU2MjIxXFx1MDQ2MVxcdTE2MzBcXHUxNjMyXFx1MTYzNFxcdTE2MzZcXHUxNjM4XFx1MTYzYVxcdTE2M2NcXHUxNjNlO1xcdTY5YTg7XFx1NjlhOTtcXHU2OWFhO1xcdTY5YWI7XFx1NjlhYztcXHU2OWFkO1xcdTY5YWU7XFx1NjlhZnRcXHUwMTAwO3ZcXHUxNjQ1XFx1MTY0NlxcdTYyMWZiXFx1MDEwMDtkXFx1MTY0Y1xcdTE2NGRcXHU2MmJlO1xcdTY5OWRcXHUwMTAwcHRcXHUxNjU0XFx1MTY1N2g7XFx1NjIyMlxceGJiXFx4YjlhcnI7XFx1NjM3Y1xcdTAxMDBncFxcdTE2NjNcXHUxNjY3b247XFx1NDEwNWY7XFx1YzAwMFxcdWQ4MzVcXHVkZDUyXFx1MDM4MDtFYWVpb3BcXHUxMmMxXFx1MTY3YlxcdTE2N2RcXHUxNjgyXFx1MTY4NFxcdTE2ODdcXHUxNjhhO1xcdTZhNzBjaXI7XFx1NmE2ZjtcXHU2MjRhZDtcXHU2MjRicztcXHU0MDI3cm94XFx1MDEwMDtlXFx1MTJjMVxcdTE2OTJcXHhmMVxcdTE2ODNpbmdcXHU4MDNiXFx4ZTVcXHU0MGU1XFx1MDE4MGN0eVxcdTE2YTFcXHUxNmE2XFx1MTZhOHI7XFx1YzAwMFxcdWQ4MzVcXHVkY2I2O1xcdTQwMmFtcFxcdTAxMDA7ZVxcdTEyYzFcXHUxNmFmXFx4ZjFcXHUwMjg4aWxkZVxcdTgwM2JcXHhlM1xcdTQwZTNtbFxcdTgwM2JcXHhlNFxcdTQwZTRcXHUwMTAwY2lcXHUxNmMyXFx1MTZjOG9uaW5cXHhmNFxcdTAyNzJudDtcXHU2YTExXFx1MDgwME5hYmNkZWZpa2xub3Byc3VcXHUxNmVkXFx1MTZmMVxcdTE3MzBcXHUxNzNjXFx1MTc0M1xcdTE3NDhcXHUxNzc4XFx1MTc3ZFxcdTE3ZTBcXHUxN2U2XFx1MTgzOVxcdTE4NTBcXHUxNzBkXFx1MTkzZFxcdTE5NDhcXHUxOTcwb3Q7XFx1NmFlZFxcdTAxMDBjclxcdTE2ZjZcXHUxNzFla1xcdTAyMDBjZXBzXFx1MTcwMFxcdTE3MDVcXHUxNzBkXFx1MTcxM29uZztcXHU2MjRjcHNpbG9uO1xcdTQzZjZyaW1lO1xcdTYwMzVpbVxcdTAxMDA7ZVxcdTE3MWFcXHUxNzFiXFx1NjIzZHE7XFx1NjJjZFxcdTAxNzZcXHUxNzIyXFx1MTcyNmVlO1xcdTYyYmRlZFxcdTAxMDA7Z1xcdTE3MmNcXHUxNzJkXFx1NjMwNWVcXHhiYlxcdTE3MmRya1xcdTAxMDA7dFxcdTEzNWNcXHUxNzM3YnJrO1xcdTYzYjZcXHUwMTAwb3lcXHUxNzAxXFx1MTc0MTtcXHU0NDMxcXVvO1xcdTYwMWVcXHUwMjgwY21wcnRcXHUxNzUzXFx1MTc1YlxcdTE3NjFcXHUxNzY0XFx1MTc2OGF1c1xcdTAxMDA7ZVxcdTAxMGFcXHUwMTA5cHR5djtcXHU2OWIwc1xceGU5XFx1MTcwY25vXFx4ZjVcXHUwMTEzXFx1MDE4MGFod1xcdTE3NmZcXHUxNzcxXFx1MTc3MztcXHU0M2IyO1xcdTYxMzZlZW47XFx1NjI2Y3I7XFx1YzAwMFxcdWQ4MzVcXHVkZDFmZ1xcdTAzODBjb3N0dXZ3XFx1MTc4ZFxcdTE3OWRcXHUxN2IzXFx1MTdjMVxcdTE3ZDVcXHUxN2RiXFx1MTdkZVxcdTAxODBhaXVcXHUxNzk0XFx1MTc5NlxcdTE3OWFcXHhmMFxcdTA3NjByYztcXHU2NWVmcFxceGJiXFx1MTM3MVxcdTAxODBkcHRcXHUxN2E0XFx1MTdhOFxcdTE3YWRvdDtcXHU2YTAwbHVzO1xcdTZhMDFpbWVzO1xcdTZhMDJcXHUwMjcxXFx1MTdiOVxcMFxcMFxcdTE3YmVjdXA7XFx1NmEwNmFyO1xcdTY2MDVyaWFuZ2xlXFx1MDEwMGR1XFx1MTdjZFxcdTE3ZDJvd247XFx1NjViZHA7XFx1NjViM3BsdXM7XFx1NmEwNGVcXHhlNVxcdTE0NDRcXHhlNVxcdTE0YWRhcm93O1xcdTY5MGRcXHUwMTgwYWtvXFx1MTdlZFxcdTE4MjZcXHUxODM1XFx1MDEwMGNuXFx1MTdmMlxcdTE4MjNrXFx1MDE4MGxzdFxcdTE3ZmFcXHUwNWFiXFx1MTgwMm96ZW5nZTtcXHU2OWVicmlhbmdsZVxcdTAyMDA7ZGxyXFx1MTgxMlxcdTE4MTNcXHUxODE4XFx1MTgxZFxcdTY1YjRvd247XFx1NjViZWVmdDtcXHU2NWMyaWdodDtcXHU2NWI4aztcXHU2NDIzXFx1MDFiMVxcdTE4MmJcXDBcXHUxODMzXFx1MDFiMlxcdTE4MmZcXDBcXHUxODMxO1xcdTY1OTI7XFx1NjU5MTQ7XFx1NjU5M2NrO1xcdTY1ODhcXHUwMTAwZW9cXHUxODNlXFx1MTg0ZFxcdTAxMDA7cVxcdTE4NDNcXHUxODQ2XFx1YzAwMD1cXHUyMGU1dWl2O1xcdWMwMDBcXHUyMjYxXFx1MjBlNXQ7XFx1NjMxMFxcdTAyMDBwdHd4XFx1MTg1OVxcdTE4NWVcXHUxODY3XFx1MTg2Y2Y7XFx1YzAwMFxcdWQ4MzVcXHVkZDUzXFx1MDEwMDt0XFx1MTNjYlxcdTE4NjNvbVxceGJiXFx1MTNjY3RpZTtcXHU2MmM4XFx1MDYwMERIVVZiZGhtcHR1dlxcdTE4ODVcXHUxODk2XFx1MThhYVxcdTE4YmJcXHUxOGQ3XFx1MThkYlxcdTE4ZWNcXHUxOGZmXFx1MTkwNVxcdTE5MGFcXHUxOTEwXFx1MTkyMVxcdTAyMDBMUmxyXFx1MTg4ZVxcdTE4OTBcXHUxODkyXFx1MTg5NDtcXHU2NTU3O1xcdTY1NTQ7XFx1NjU1NjtcXHU2NTUzXFx1MDI4MDtEVWR1XFx1MThhMVxcdTE4YTJcXHUxOGE0XFx1MThhNlxcdTE4YThcXHU2NTUwO1xcdTY1NjY7XFx1NjU2OTtcXHU2NTY0O1xcdTY1NjdcXHUwMjAwTFJsclxcdTE4YjNcXHUxOGI1XFx1MThiN1xcdTE4Yjk7XFx1NjU1ZDtcXHU2NTVhO1xcdTY1NWM7XFx1NjU1OVxcdTAzODA7SExSaGxyXFx1MThjYVxcdTE4Y2JcXHUxOGNkXFx1MThjZlxcdTE4ZDFcXHUxOGQzXFx1MThkNVxcdTY1NTE7XFx1NjU2YztcXHU2NTYzO1xcdTY1NjA7XFx1NjU2YjtcXHU2NTYyO1xcdTY1NWZveDtcXHU2OWM5XFx1MDIwMExSbHJcXHUxOGU0XFx1MThlNlxcdTE4ZThcXHUxOGVhO1xcdTY1NTU7XFx1NjU1MjtcXHU2NTEwO1xcdTY1MGNcXHUwMjgwO0RVZHVcXHUwNmJkXFx1MThmN1xcdTE4ZjlcXHUxOGZiXFx1MThmZDtcXHU2NTY1O1xcdTY1Njg7XFx1NjUyYztcXHU2NTM0aW51cztcXHU2MjlmbHVzO1xcdTYyOWVpbWVzO1xcdTYyYTBcXHUwMjAwTFJsclxcdTE5MTlcXHUxOTFiXFx1MTkxZFxcdTE5MWY7XFx1NjU1YjtcXHU2NTU4O1xcdTY1MTg7XFx1NjUxNFxcdTAzODA7SExSaGxyXFx1MTkzMFxcdTE5MzFcXHUxOTMzXFx1MTkzNVxcdTE5MzdcXHUxOTM5XFx1MTkzYlxcdTY1MDI7XFx1NjU2YTtcXHU2NTYxO1xcdTY1NWU7XFx1NjUzYztcXHU2NTI0O1xcdTY1MWNcXHUwMTAwZXZcXHUwMTIzXFx1MTk0MmJhclxcdTgwM2JcXHhhNlxcdTQwYTZcXHUwMjAwY2Vpb1xcdTE5NTFcXHUxOTU2XFx1MTk1YVxcdTE5NjByO1xcdWMwMDBcXHVkODM1XFx1ZGNiN21pO1xcdTYwNGZtXFx1MDEwMDtlXFx1MTcxYVxcdTE3MWNsXFx1MDE4MDtiaFxcdTE5NjhcXHUxOTY5XFx1MTk2YlxcdTQwNWM7XFx1NjljNXN1YjtcXHU2N2M4XFx1MDE2Y1xcdTE5NzRcXHUxOTdlbFxcdTAxMDA7ZVxcdTE5NzlcXHUxOTdhXFx1NjAyMnRcXHhiYlxcdTE5N2FwXFx1MDE4MDtFZVxcdTAxMmZcXHUxOTg1XFx1MTk4NztcXHU2YWFlXFx1MDEwMDtxXFx1MDZkY1xcdTA2ZGJcXHUwY2UxXFx1MTlhN1xcMFxcdTE5ZThcXHUxYTExXFx1MWExNVxcdTFhMzJcXDBcXHUxYTM3XFx1MWE1MFxcMFxcMFxcdTFhYjRcXDBcXDBcXHUxYWMxXFwwXFwwXFx1MWIyMVxcdTFiMmVcXHUxYjRkXFx1MWI1MlxcMFxcdTFiZmRcXDBcXHUxYzBjXFx1MDE4MGNwclxcdTE5YWRcXHUxOWIyXFx1MTlkZHV0ZTtcXHU0MTA3XFx1MDMwMDthYmNkc1xcdTE5YmZcXHUxOWMwXFx1MTljNFxcdTE5Y2FcXHUxOWQ1XFx1MTlkOVxcdTYyMjluZDtcXHU2YTQ0cmN1cDtcXHU2YTQ5XFx1MDEwMGF1XFx1MTljZlxcdTE5ZDJwO1xcdTZhNGJwO1xcdTZhNDdvdDtcXHU2YTQwO1xcdWMwMDBcXHUyMjI5XFx1ZmUwMFxcdTAxMDBlb1xcdTE5ZTJcXHUxOWU1dDtcXHU2MDQxXFx4ZWVcXHUwNjkzXFx1MDIwMGFlaXVcXHUxOWYwXFx1MTlmYlxcdTFhMDFcXHUxYTA1XFx1MDFmMFxcdTE5ZjVcXDBcXHUxOWY4cztcXHU2YTRkb247XFx1NDEwZGRpbFxcdTgwM2JcXHhlN1xcdTQwZTdyYztcXHU0MTA5cHNcXHUwMTAwO3NcXHUxYTBjXFx1MWEwZFxcdTZhNGNtO1xcdTZhNTBvdDtcXHU0MTBiXFx1MDE4MGRtblxcdTFhMWJcXHUxYTIwXFx1MWEyNmlsXFx1ODBiYlxceGI4XFx1MDFhZHB0eXY7XFx1NjliMnRcXHU4MTAwXFx4YTI7ZVxcdTFhMmRcXHUxYTJlXFx1NDBhMnJcXHhlNFxcdTAxYjJyO1xcdWMwMDBcXHVkODM1XFx1ZGQyMFxcdTAxODBjZWlcXHUxYTNkXFx1MWE0MFxcdTFhNGR5O1xcdTQ0NDdja1xcdTAxMDA7bVxcdTFhNDdcXHUxYTQ4XFx1NjcxM2Fya1xceGJiXFx1MWE0ODtcXHU0M2M3clxcdTAzODA7RWNlZm1zXFx1MWE1ZlxcdTFhNjBcXHUxYTYyXFx1MWE2YlxcdTFhYTRcXHUxYWFhXFx1MWFhZVxcdTY1Y2I7XFx1NjljM1xcdTAxODA7ZWxcXHUxYTY5XFx1MWE2YVxcdTFhNmRcXHU0MmM2cTtcXHU2MjU3ZVxcdTAyNjFcXHUxYTc0XFwwXFwwXFx1MWE4OHJyb3dcXHUwMTAwbHJcXHUxYTdjXFx1MWE4MWVmdDtcXHU2MWJhaWdodDtcXHU2MWJiXFx1MDI4MFJTYWNkXFx1MWE5MlxcdTFhOTRcXHUxYTk2XFx1MWE5YVxcdTFhOWZcXHhiYlxcdTBmNDc7XFx1NjRjOHN0O1xcdTYyOWJpcmM7XFx1NjI5YWFzaDtcXHU2MjlkbmludDtcXHU2YTEwaWQ7XFx1NmFlZmNpcjtcXHU2OWMydWJzXFx1MDEwMDt1XFx1MWFiYlxcdTFhYmNcXHU2NjYzaXRcXHhiYlxcdTFhYmNcXHUwMmVjXFx1MWFjN1xcdTFhZDRcXHUxYWZhXFwwXFx1MWIwYW9uXFx1MDEwMDtlXFx1MWFjZFxcdTFhY2VcXHU0MDNhXFx1MDEwMDtxXFx4YzdcXHhjNlxcdTAyNmRcXHUxYWQ5XFwwXFwwXFx1MWFlMmFcXHUwMTAwO3RcXHUxYWRlXFx1MWFkZlxcdTQwMmM7XFx1NDA0MFxcdTAxODA7ZmxcXHUxYWU4XFx1MWFlOVxcdTFhZWJcXHU2MjAxXFx4ZWVcXHUxMTYwZVxcdTAxMDBteFxcdTFhZjFcXHUxYWY2ZW50XFx4YmJcXHUxYWU5ZVxceGYzXFx1MDI0ZFxcdTAxZTdcXHUxYWZlXFwwXFx1MWIwN1xcdTAxMDA7ZFxcdTEyYmJcXHUxYjAyb3Q7XFx1NmE2ZG5cXHhmNFxcdTAyNDZcXHUwMTgwZnJ5XFx1MWIxMFxcdTFiMTRcXHUxYjE3O1xcdWMwMDBcXHVkODM1XFx1ZGQ1NG9cXHhlNFxcdTAyNTRcXHU4MTAwXFx4YTk7c1xcdTAxNTVcXHUxYjFkcjtcXHU2MTE3XFx1MDEwMGFvXFx1MWIyNVxcdTFiMjlycjtcXHU2MWI1c3M7XFx1NjcxN1xcdTAxMDBjdVxcdTFiMzJcXHUxYjM3cjtcXHVjMDAwXFx1ZDgzNVxcdWRjYjhcXHUwMTAwYnBcXHUxYjNjXFx1MWI0NFxcdTAxMDA7ZVxcdTFiNDFcXHUxYjQyXFx1NmFjZjtcXHU2YWQxXFx1MDEwMDtlXFx1MWI0OVxcdTFiNGFcXHU2YWQwO1xcdTZhZDJkb3Q7XFx1NjJlZlxcdTAzODBkZWxwcnZ3XFx1MWI2MFxcdTFiNmNcXHUxYjc3XFx1MWI4MlxcdTFiYWNcXHUxYmQ0XFx1MWJmOWFyclxcdTAxMDBsclxcdTFiNjhcXHUxYjZhO1xcdTY5Mzg7XFx1NjkzNVxcdTAyNzBcXHUxYjcyXFwwXFwwXFx1MWI3NXI7XFx1NjJkZWM7XFx1NjJkZmFyclxcdTAxMDA7cFxcdTFiN2ZcXHUxYjgwXFx1NjFiNjtcXHU2OTNkXFx1MDMwMDtiY2Rvc1xcdTFiOGZcXHUxYjkwXFx1MWI5NlxcdTFiYTFcXHUxYmE1XFx1MWJhOFxcdTYyMmFyY2FwO1xcdTZhNDhcXHUwMTAwYXVcXHUxYjliXFx1MWI5ZXA7XFx1NmE0NnA7XFx1NmE0YW90O1xcdTYyOGRyO1xcdTZhNDU7XFx1YzAwMFxcdTIyMmFcXHVmZTAwXFx1MDIwMGFscnZcXHUxYmI1XFx1MWJiZlxcdTFiZGVcXHUxYmUzcnJcXHUwMTAwO21cXHUxYmJjXFx1MWJiZFxcdTYxYjc7XFx1NjkzY3lcXHUwMTgwZXZ3XFx1MWJjN1xcdTFiZDRcXHUxYmQ4cVxcdTAyNzBcXHUxYmNlXFwwXFwwXFx1MWJkMnJlXFx4ZTNcXHUxYjczdVxceGUzXFx1MWI3NWVlO1xcdTYyY2VlZGdlO1xcdTYyY2ZlblxcdTgwM2JcXHhhNFxcdTQwYTRlYXJyb3dcXHUwMTAwbHJcXHUxYmVlXFx1MWJmM2VmdFxceGJiXFx1MWI4MGlnaHRcXHhiYlxcdTFiYmRlXFx4ZTRcXHUxYmRkXFx1MDEwMGNpXFx1MWMwMVxcdTFjMDdvbmluXFx4ZjRcXHUwMWY3bnQ7XFx1NjIzMWxjdHk7XFx1NjMyZFxcdTA5ODBBSGFiY2RlZmhpamxvcnN0dXd6XFx1MWMzOFxcdTFjM2JcXHUxYzNmXFx1MWM1ZFxcdTFjNjlcXHUxYzc1XFx1MWM4YVxcdTFjOWVcXHUxY2FjXFx1MWNiN1xcdTFjZmJcXHUxY2ZmXFx1MWQwZFxcdTFkN2JcXHUxZDkxXFx1MWRhYlxcdTFkYmJcXHUxZGM2XFx1MWRjZHJcXHhmMlxcdTAzODFhcjtcXHU2OTY1XFx1MDIwMGdscnNcXHUxYzQ4XFx1MWM0ZFxcdTFjNTJcXHUxYzU0Z2VyO1xcdTYwMjBldGg7XFx1NjEzOFxceGYyXFx1MTEzM2hcXHUwMTAwO3ZcXHUxYzVhXFx1MWM1YlxcdTYwMTBcXHhiYlxcdTA5MGFcXHUwMTZiXFx1MWM2MVxcdTFjNjdhcm93O1xcdTY5MGZhXFx4ZTNcXHUwMzE1XFx1MDEwMGF5XFx1MWM2ZVxcdTFjNzNyb247XFx1NDEwZjtcXHU0NDM0XFx1MDE4MDthb1xcdTAzMzJcXHUxYzdjXFx1MWM4NFxcdTAxMDBnclxcdTAyYmZcXHUxYzgxcjtcXHU2MWNhdHNlcTtcXHU2YTc3XFx1MDE4MGdsbVxcdTFjOTFcXHUxYzk0XFx1MWM5OFxcdTgwM2JcXHhiMFxcdTQwYjB0YTtcXHU0M2I0cHR5djtcXHU2OWIxXFx1MDEwMGlyXFx1MWNhM1xcdTFjYThzaHQ7XFx1Njk3ZjtcXHVjMDAwXFx1ZDgzNVxcdWRkMjFhclxcdTAxMDBsclxcdTFjYjNcXHUxY2I1XFx4YmJcXHUwOGRjXFx4YmJcXHUxMDFlXFx1MDI4MGFlZ3N2XFx1MWNjMlxcdTAzNzhcXHUxY2Q2XFx1MWNkY1xcdTFjZTBtXFx1MDE4MDtvc1xcdTAzMjZcXHUxY2NhXFx1MWNkNG5kXFx1MDEwMDtzXFx1MDMyNlxcdTFjZDF1aXQ7XFx1NjY2NmFtbWE7XFx1NDNkZGluO1xcdTYyZjJcXHUwMTgwO2lvXFx1MWNlN1xcdTFjZThcXHUxY2Y4XFx1NDBmN2RlXFx1ODEwMFxceGY3O29cXHUxY2U3XFx1MWNmMG50aW1lcztcXHU2MmM3blxceGY4XFx1MWNmN2N5O1xcdTQ0NTJjXFx1MDI2ZlxcdTFkMDZcXDBcXDBcXHUxZDBhcm47XFx1NjMxZW9wO1xcdTYzMGRcXHUwMjgwbHB0dXdcXHUxZDE4XFx1MWQxZFxcdTFkMjJcXHUxZDQ5XFx1MWQ1NWxhcjtcXHU0MDI0ZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNTVcXHUwMjgwO2VtcHNcXHUwMzBiXFx1MWQyZFxcdTFkMzdcXHUxZDNkXFx1MWQ0MnFcXHUwMTAwO2RcXHUwMzUyXFx1MWQzM290O1xcdTYyNTFpbnVzO1xcdTYyMzhsdXM7XFx1NjIxNHF1YXJlO1xcdTYyYTFibGViYXJ3ZWRnXFx4ZTVcXHhmYW5cXHUwMTgwYWRoXFx1MTEyZVxcdTFkNWRcXHUxZDY3b3duYXJyb3dcXHhmM1xcdTFjODNhcnBvb25cXHUwMTAwbHJcXHUxZDcyXFx1MWQ3NmVmXFx4ZjRcXHUxY2I0aWdoXFx4ZjRcXHUxY2I2XFx1MDE2MlxcdTFkN2ZcXHUxZDg1a2Fyb1xceGY3XFx1MGY0MlxcdTAyNmZcXHUxZDhhXFwwXFwwXFx1MWQ4ZXJuO1xcdTYzMWZvcDtcXHU2MzBjXFx1MDE4MGNvdFxcdTFkOThcXHUxZGEzXFx1MWRhNlxcdTAxMDByeVxcdTFkOWRcXHUxZGExO1xcdWMwMDBcXHVkODM1XFx1ZGNiOTtcXHU0NDU1bDtcXHU2OWY2cm9rO1xcdTQxMTFcXHUwMTAwZHJcXHUxZGIwXFx1MWRiNG90O1xcdTYyZjFpXFx1MDEwMDtmXFx1MWRiYVxcdTE4MTZcXHU2NWJmXFx1MDEwMGFoXFx1MWRjMFxcdTFkYzNyXFx4ZjJcXHUwNDI5YVxceGYyXFx1MGZhNmFuZ2xlO1xcdTY5YTZcXHUwMTAwY2lcXHUxZGQyXFx1MWRkNXk7XFx1NDQ1ZmdyYXJyO1xcdTY3ZmZcXHUwOTAwRGFjZGVmZ2xtbm9wcXJzdHV4XFx1MWUwMVxcdTFlMDlcXHUxZTE5XFx1MWUzOFxcdTA1NzhcXHUxZTNjXFx1MWU0OVxcdTFlNjFcXHUxZTdlXFx1MWVhNVxcdTFlYWZcXHUxZWJkXFx1MWVlMVxcdTFmMmFcXHUxZjM3XFx1MWY0NFxcdTFmNGVcXHUxZjVhXFx1MDEwMERvXFx1MWUwNlxcdTFkMzRvXFx4ZjRcXHUxYzg5XFx1MDEwMGNzXFx1MWUwZVxcdTFlMTR1dGVcXHU4MDNiXFx4ZTlcXHU0MGU5dGVyO1xcdTZhNmVcXHUwMjAwYWlveVxcdTFlMjJcXHUxZTI3XFx1MWUzMVxcdTFlMzZyb247XFx1NDExYnJcXHUwMTAwO2NcXHUxZTJkXFx1MWUyZVxcdTYyNTZcXHU4MDNiXFx4ZWFcXHU0MGVhbG9uO1xcdTYyNTU7XFx1NDQ0ZG90O1xcdTQxMTdcXHUwMTAwRHJcXHUxZTQxXFx1MWU0NW90O1xcdTYyNTI7XFx1YzAwMFxcdWQ4MzVcXHVkZDIyXFx1MDE4MDtyc1xcdTFlNTBcXHUxZTUxXFx1MWU1N1xcdTZhOWFhdmVcXHU4MDNiXFx4ZThcXHU0MGU4XFx1MDEwMDtkXFx1MWU1Y1xcdTFlNWRcXHU2YTk2b3Q7XFx1NmE5OFxcdTAyMDA7aWxzXFx1MWU2YVxcdTFlNmJcXHUxZTcyXFx1MWU3NFxcdTZhOTludGVycztcXHU2M2U3O1xcdTYxMTNcXHUwMTAwO2RcXHUxZTc5XFx1MWU3YVxcdTZhOTVvdDtcXHU2YTk3XFx1MDE4MGFwc1xcdTFlODVcXHUxZTg5XFx1MWU5N2NyO1xcdTQxMTN0eVxcdTAxODA7c3ZcXHUxZTkyXFx1MWU5M1xcdTFlOTVcXHU2MjA1ZXRcXHhiYlxcdTFlOTNwXFx1MDEwMDE7XFx1MWU5ZFxcdTFlYTRcXHUwMTMzXFx1MWVhMVxcdTFlYTM7XFx1NjAwNDtcXHU2MDA1XFx1NjAwM1xcdTAxMDBnc1xcdTFlYWFcXHUxZWFjO1xcdTQxNGJwO1xcdTYwMDJcXHUwMTAwZ3BcXHUxZWI0XFx1MWViOG9uO1xcdTQxMTlmO1xcdWMwMDBcXHVkODM1XFx1ZGQ1NlxcdTAxODBhbHNcXHUxZWM0XFx1MWVjZVxcdTFlZDJyXFx1MDEwMDtzXFx1MWVjYVxcdTFlY2JcXHU2MmQ1bDtcXHU2OWUzdXM7XFx1NmE3MWlcXHUwMTgwO2x2XFx1MWVkYVxcdTFlZGJcXHUxZWRmXFx1NDNiNW9uXFx4YmJcXHUxZWRiO1xcdTQzZjVcXHUwMjAwY3N1dlxcdTFlZWFcXHUxZWYzXFx1MWYwYlxcdTFmMjNcXHUwMTAwaW9cXHUxZWVmXFx1MWUzMXJjXFx4YmJcXHUxZTJlXFx1MDI2OVxcdTFlZjlcXDBcXDBcXHUxZWZiXFx4ZWRcXHUwNTQ4YW50XFx1MDEwMGdsXFx1MWYwMlxcdTFmMDZ0clxceGJiXFx1MWU1ZGVzc1xceGJiXFx1MWU3YVxcdTAxODBhZWlcXHUxZjEyXFx1MWYxNlxcdTFmMWFscztcXHU0MDNkc3Q7XFx1NjI1ZnZcXHUwMTAwO0RcXHUwMjM1XFx1MWYyMEQ7XFx1NmE3OHBhcnNsO1xcdTY5ZTVcXHUwMTAwRGFcXHUxZjJmXFx1MWYzM290O1xcdTYyNTNycjtcXHU2OTcxXFx1MDE4MGNkaVxcdTFmM2VcXHUxZjQxXFx1MWVmOHI7XFx1NjEyZm9cXHhmNFxcdTAzNTJcXHUwMTAwYWhcXHUxZjQ5XFx1MWY0YjtcXHU0M2I3XFx1ODAzYlxceGYwXFx1NDBmMFxcdTAxMDBtclxcdTFmNTNcXHUxZjU3bFxcdTgwM2JcXHhlYlxcdTQwZWJvO1xcdTYwYWNcXHUwMTgwY2lwXFx1MWY2MVxcdTFmNjRcXHUxZjY3bDtcXHU0MDIxc1xceGY0XFx1MDU2ZVxcdTAxMDBlb1xcdTFmNmNcXHUxZjc0Y3RhdGlvXFx4ZWVcXHUwNTU5bmVudGlhbFxceGU1XFx1MDU3OVxcdTA5ZTFcXHUxZjkyXFwwXFx1MWY5ZVxcMFxcdTFmYTFcXHUxZmE3XFwwXFwwXFx1MWZjNlxcdTFmY2NcXDBcXHUxZmQzXFwwXFx1MWZlNlxcdTFmZWFcXHUyMDAwXFwwXFx1MjAwOFxcdTIwNWFsbGluZ2RvdHNlXFx4ZjFcXHUxZTQ0eTtcXHU0NDQ0bWFsZTtcXHU2NjQwXFx1MDE4MGlsclxcdTFmYWRcXHUxZmIzXFx1MWZjMWxpZztcXHU4MDAwXFx1ZmIwM1xcdTAyNjlcXHUxZmI5XFwwXFwwXFx1MWZiZGc7XFx1ODAwMFxcdWZiMDBpZztcXHU4MDAwXFx1ZmIwNDtcXHVjMDAwXFx1ZDgzNVxcdWRkMjNsaWc7XFx1ODAwMFxcdWZiMDFsaWc7XFx1YzAwMGZqXFx1MDE4MGFsdFxcdTFmZDlcXHUxZmRjXFx1MWZlMXQ7XFx1NjY2ZGlnO1xcdTgwMDBcXHVmYjAybnM7XFx1NjViMW9mO1xcdTQxOTJcXHUwMWYwXFx1MWZlZVxcMFxcdTFmZjNmO1xcdWMwMDBcXHVkODM1XFx1ZGQ1N1xcdTAxMDBha1xcdTA1YmZcXHUxZmY3XFx1MDEwMDt2XFx1MWZmY1xcdTFmZmRcXHU2MmQ0O1xcdTZhZDlhcnRpbnQ7XFx1NmEwZFxcdTAxMDBhb1xcdTIwMGNcXHUyMDU1XFx1MDEwMGNzXFx1MjAxMVxcdTIwNTJcXHUwM2IxXFx1MjAxYVxcdTIwMzBcXHUyMDM4XFx1MjA0NVxcdTIwNDhcXDBcXHUyMDUwXFx1MDNiMlxcdTIwMjJcXHUyMDI1XFx1MjAyN1xcdTIwMmFcXHUyMDJjXFwwXFx1MjAyZVxcdTgwM2JcXHhiZFxcdTQwYmQ7XFx1NjE1M1xcdTgwM2JcXHhiY1xcdTQwYmM7XFx1NjE1NTtcXHU2MTU5O1xcdTYxNWJcXHUwMWIzXFx1MjAzNFxcMFxcdTIwMzY7XFx1NjE1NDtcXHU2MTU2XFx1MDJiNFxcdTIwM2VcXHUyMDQxXFwwXFwwXFx1MjA0M1xcdTgwM2JcXHhiZVxcdTQwYmU7XFx1NjE1NztcXHU2MTVjNTtcXHU2MTU4XFx1MDFiNlxcdTIwNGNcXDBcXHUyMDRlO1xcdTYxNWE7XFx1NjE1ZDg7XFx1NjE1ZWw7XFx1NjA0NHduO1xcdTYzMjJjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYmJcXHUwODgwRWFiY2RlZmdpamxub3JzdHZcXHUyMDgyXFx1MjA4OVxcdTIwOWZcXHUyMGE1XFx1MjBiMFxcdTIwYjRcXHUyMGYwXFx1MjBmNVxcdTIwZmFcXHUyMGZmXFx1MjEwM1xcdTIxMTJcXHUyMTM4XFx1MDMxN1xcdTIxM2VcXHUyMTUyXFx1MjE5ZVxcdTAxMDA7bFxcdTA2NGRcXHUyMDg3O1xcdTZhOGNcXHUwMTgwY21wXFx1MjA5MFxcdTIwOTVcXHUyMDlkdXRlO1xcdTQxZjVtYVxcdTAxMDA7ZFxcdTIwOWNcXHUxY2RhXFx1NDNiMztcXHU2YTg2cmV2ZTtcXHU0MTFmXFx1MDEwMGl5XFx1MjBhYVxcdTIwYWVyYztcXHU0MTFkO1xcdTQ0MzNvdDtcXHU0MTIxXFx1MDIwMDtscXNcXHUwNjNlXFx1MDY0MlxcdTIwYmRcXHUyMGM5XFx1MDE4MDtxc1xcdTA2M2VcXHUwNjRjXFx1MjBjNGxhblxceGY0XFx1MDY2NVxcdTAyMDA7Y2RsXFx1MDY2NVxcdTIwZDJcXHUyMGQ1XFx1MjBlNWM7XFx1NmFhOW90XFx1MDEwMDtvXFx1MjBkY1xcdTIwZGRcXHU2YTgwXFx1MDEwMDtsXFx1MjBlMlxcdTIwZTNcXHU2YTgyO1xcdTZhODRcXHUwMTAwO2VcXHUyMGVhXFx1MjBlZFxcdWMwMDBcXHUyMmRiXFx1ZmUwMHM7XFx1NmE5NHI7XFx1YzAwMFxcdWQ4MzVcXHVkZDI0XFx1MDEwMDtnXFx1MDY3M1xcdTA2MWJtZWw7XFx1NjEzN2N5O1xcdTQ0NTNcXHUwMjAwO0VhalxcdTA2NWFcXHUyMTBjXFx1MjEwZVxcdTIxMTA7XFx1NmE5MjtcXHU2YWE1O1xcdTZhYTRcXHUwMjAwRWFlc1xcdTIxMWJcXHUyMTFkXFx1MjEyOVxcdTIxMzQ7XFx1NjI2OXBcXHUwMTAwO3BcXHUyMTIzXFx1MjEyNFxcdTZhOGFyb3hcXHhiYlxcdTIxMjRcXHUwMTAwO3FcXHUyMTJlXFx1MjEyZlxcdTZhODhcXHUwMTAwO3FcXHUyMTJlXFx1MjExYmltO1xcdTYyZTdwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNThcXHUwMTAwY2lcXHUyMTQzXFx1MjE0NnI7XFx1NjEwYW1cXHUwMTgwO2VsXFx1MDY2YlxcdTIxNGVcXHUyMTUwO1xcdTZhOGU7XFx1NmE5MFxcdTgzMDA+O2NkbHFyXFx1MDVlZVxcdTIxNjBcXHUyMTZhXFx1MjE2ZVxcdTIxNzNcXHUyMTc5XFx1MDEwMGNpXFx1MjE2NVxcdTIxNjc7XFx1NmFhN3I7XFx1NmE3YW90O1xcdTYyZDdQYXI7XFx1Njk5NXVlc3Q7XFx1NmE3Y1xcdTAyODBhZGVsc1xcdTIxODRcXHUyMTZhXFx1MjE5MFxcdTA2NTZcXHUyMTliXFx1MDFmMFxcdTIxODlcXDBcXHUyMThlcHJvXFx4ZjhcXHUyMDllcjtcXHU2OTc4cVxcdTAxMDBscVxcdTA2M2ZcXHUyMTk2bGVzXFx4ZjNcXHUyMDg4aVxceGVkXFx1MDY2YlxcdTAxMDBlblxcdTIxYTNcXHUyMWFkcnRuZXFxO1xcdWMwMDBcXHUyMjY5XFx1ZmUwMFxceGM1XFx1MjFhYVxcdTA1MDBBYWJjZWZrb3N5XFx1MjFjNFxcdTIxYzdcXHUyMWYxXFx1MjFmNVxcdTIxZmFcXHUyMjE4XFx1MjIxZFxcdTIyMmZcXHUyMjY4XFx1MjI3ZHJcXHhmMlxcdTAzYTBcXHUwMjAwaWxtclxcdTIxZDBcXHUyMWQ0XFx1MjFkN1xcdTIxZGJyc1xceGYwXFx1MTQ4NGZcXHhiYlxcdTIwMjRpbFxceGY0XFx1MDZhOVxcdTAxMDBkclxcdTIxZTBcXHUyMWU0Y3k7XFx1NDQ0YVxcdTAxODA7Y3dcXHUwOGY0XFx1MjFlYlxcdTIxZWZpcjtcXHU2OTQ4O1xcdTYxYWRhcjtcXHU2MTBmaXJjO1xcdTQxMjVcXHUwMTgwYWxyXFx1MjIwMVxcdTIyMGVcXHUyMjEzcnRzXFx1MDEwMDt1XFx1MjIwOVxcdTIyMGFcXHU2NjY1aXRcXHhiYlxcdTIyMGFsaXA7XFx1NjAyNmNvbjtcXHU2MmI5cjtcXHVjMDAwXFx1ZDgzNVxcdWRkMjVzXFx1MDEwMGV3XFx1MjIyM1xcdTIyMjlhcm93O1xcdTY5MjVhcm93O1xcdTY5MjZcXHUwMjgwYW1vcHJcXHUyMjNhXFx1MjIzZVxcdTIyNDNcXHUyMjVlXFx1MjI2M3JyO1xcdTYxZmZ0aHQ7XFx1NjIzYmtcXHUwMTAwbHJcXHUyMjQ5XFx1MjI1M2VmdGFycm93O1xcdTYxYTlpZ2h0YXJyb3c7XFx1NjFhYWY7XFx1YzAwMFxcdWQ4MzVcXHVkZDU5YmFyO1xcdTYwMTVcXHUwMTgwY2x0XFx1MjI2ZlxcdTIyNzRcXHUyMjc4cjtcXHVjMDAwXFx1ZDgzNVxcdWRjYmRhc1xceGU4XFx1MjFmNHJvaztcXHU0MTI3XFx1MDEwMGJwXFx1MjI4MlxcdTIyODd1bGw7XFx1NjA0M2hlblxceGJiXFx1MWM1YlxcdTBhZTFcXHUyMmEzXFwwXFx1MjJhYVxcMFxcdTIyYjhcXHUyMmM1XFx1MjJjZVxcMFxcdTIyZDVcXHUyMmYzXFwwXFwwXFx1MjJmOFxcdTIzMjJcXHUyMzY3XFx1MjM2MlxcdTIzN2ZcXDBcXHUyMzg2XFx1MjNhYVxcdTIzYjRjdXRlXFx1ODAzYlxceGVkXFx1NDBlZFxcdTAxODA7aXlcXHUwNzcxXFx1MjJiMFxcdTIyYjVyY1xcdTgwM2JcXHhlZVxcdTQwZWU7XFx1NDQzOFxcdTAxMDBjeFxcdTIyYmNcXHUyMmJmeTtcXHU0NDM1Y2xcXHU4MDNiXFx4YTFcXHU0MGExXFx1MDEwMGZyXFx1MDM5ZlxcdTIyYzk7XFx1YzAwMFxcdWQ4MzVcXHVkZDI2cmF2ZVxcdTgwM2JcXHhlY1xcdTQwZWNcXHUwMjAwO2lub1xcdTA3M2VcXHUyMmRkXFx1MjJlOVxcdTIyZWVcXHUwMTAwaW5cXHUyMmUyXFx1MjJlNm50O1xcdTZhMGN0O1xcdTYyMmRmaW47XFx1NjlkY3RhO1xcdTYxMjlsaWc7XFx1NDEzM1xcdTAxODBhb3BcXHUyMmZlXFx1MjMxYVxcdTIzMWRcXHUwMTgwY2d0XFx1MjMwNVxcdTIzMDhcXHUyMzE3cjtcXHU0MTJiXFx1MDE4MGVscFxcdTA3MWZcXHUyMzBmXFx1MjMxM2luXFx4ZTVcXHUwNzhlYXJcXHhmNFxcdTA3MjBoO1xcdTQxMzFmO1xcdTYyYjdlZDtcXHU0MWI1XFx1MDI4MDtjZm90XFx1MDRmNFxcdTIzMmNcXHUyMzMxXFx1MjMzZFxcdTIzNDFhcmU7XFx1NjEwNWluXFx1MDEwMDt0XFx1MjMzOFxcdTIzMzlcXHU2MjFlaWU7XFx1NjlkZGRvXFx4ZjRcXHUyMzE5XFx1MDI4MDtjZWxwXFx1MDc1N1xcdTIzNGNcXHUyMzUwXFx1MjM1YlxcdTIzNjFhbDtcXHU2MmJhXFx1MDEwMGdyXFx1MjM1NVxcdTIzNTllclxceGYzXFx1MTU2M1xceGUzXFx1MjM0ZGFyaGs7XFx1NmExN3JvZDtcXHU2YTNjXFx1MDIwMGNncHRcXHUyMzZmXFx1MjM3MlxcdTIzNzZcXHUyMzdieTtcXHU0NDUxb247XFx1NDEyZmY7XFx1YzAwMFxcdWQ4MzVcXHVkZDVhYTtcXHU0M2I5dWVzdFxcdTgwM2JcXHhiZlxcdTQwYmZcXHUwMTAwY2lcXHUyMzhhXFx1MjM4ZnI7XFx1YzAwMFxcdWQ4MzVcXHVkY2JlblxcdTAyODA7RWRzdlxcdTA0ZjRcXHUyMzliXFx1MjM5ZFxcdTIzYTFcXHUwNGYzO1xcdTYyZjlvdDtcXHU2MmY1XFx1MDEwMDt2XFx1MjNhNlxcdTIzYTdcXHU2MmY0O1xcdTYyZjNcXHUwMTAwO2lcXHUwNzc3XFx1MjNhZWxkZTtcXHU0MTI5XFx1MDFlYlxcdTIzYjhcXDBcXHUyM2JjY3k7XFx1NDQ1NmxcXHU4MDNiXFx4ZWZcXHU0MGVmXFx1MDMwMGNmbW9zdVxcdTIzY2NcXHUyM2Q3XFx1MjNkY1xcdTIzZTFcXHUyM2U3XFx1MjNmNVxcdTAxMDBpeVxcdTIzZDFcXHUyM2Q1cmM7XFx1NDEzNTtcXHU0NDM5cjtcXHVjMDAwXFx1ZDgzNVxcdWRkMjdhdGg7XFx1NDIzN3BmO1xcdWMwMDBcXHVkODM1XFx1ZGQ1YlxcdTAxZTNcXHUyM2VjXFwwXFx1MjNmMXI7XFx1YzAwMFxcdWQ4MzVcXHVkY2JmcmN5O1xcdTQ0NThrY3k7XFx1NDQ1NFxcdTA0MDBhY2ZnaGpvc1xcdTI0MGJcXHUyNDE2XFx1MjQyMlxcdTI0MjdcXHUyNDJkXFx1MjQzMVxcdTI0MzVcXHUyNDNicHBhXFx1MDEwMDt2XFx1MjQxM1xcdTI0MTRcXHU0M2JhO1xcdTQzZjBcXHUwMTAwZXlcXHUyNDFiXFx1MjQyMGRpbDtcXHU0MTM3O1xcdTQ0M2FyO1xcdWMwMDBcXHVkODM1XFx1ZGQyOHJlZW47XFx1NDEzOGN5O1xcdTQ0NDVjeTtcXHU0NDVjcGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDVjY3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2MwXFx1MGI4MEFCRUhhYmNkZWZnaGpsbW5vcHJzdHV2XFx1MjQ3MFxcdTI0ODFcXHUyNDg2XFx1MjQ4ZFxcdTI0OTFcXHUyNTBlXFx1MjUzZFxcdTI1NWFcXHUyNTgwXFx1MjY0ZVxcdTI2NWVcXHUyNjY1XFx1MjY3OVxcdTI2N2RcXHUyNjlhXFx1MjZiMlxcdTI2ZDhcXHUyNzVkXFx1Mjc2OFxcdTI3OGJcXHUyN2MwXFx1MjgwMVxcdTI4MTJcXHUwMTgwYXJ0XFx1MjQ3N1xcdTI0N2FcXHUyNDdjclxceGYyXFx1MDljNlxceGYyXFx1MDM5NWFpbDtcXHU2OTFiYXJyO1xcdTY5MGVcXHUwMTAwO2dcXHUwOTk0XFx1MjQ4YjtcXHU2YThiYXI7XFx1Njk2MlxcdTA5NjNcXHUyNGE1XFwwXFx1MjRhYVxcMFxcdTI0YjFcXDBcXDBcXDBcXDBcXDBcXHUyNGI1XFx1MjRiYVxcMFxcdTI0YzZcXHUyNGM4XFx1MjRjZFxcMFxcdTI0Zjl1dGU7XFx1NDEzYW1wdHl2O1xcdTY5YjRyYVxceGVlXFx1MDg0Y2JkYTtcXHU0M2JiZ1xcdTAxODA7ZGxcXHUwODhlXFx1MjRjMVxcdTI0YzM7XFx1Njk5MVxceGU1XFx1MDg4ZTtcXHU2YTg1dW9cXHU4MDNiXFx4YWJcXHU0MGFiclxcdTA0MDA7YmZobHBzdFxcdTA4OTlcXHUyNGRlXFx1MjRlNlxcdTI0ZTlcXHUyNGViXFx1MjRlZVxcdTI0ZjFcXHUyNGY1XFx1MDEwMDtmXFx1MDg5ZFxcdTI0ZTNzO1xcdTY5MWZzO1xcdTY5MWRcXHhlYlxcdTIyNTJwO1xcdTYxYWJsO1xcdTY5MzlpbTtcXHU2OTczbDtcXHU2MWEyXFx1MDE4MDthZVxcdTI0ZmZcXHUyNTAwXFx1MjUwNFxcdTZhYWJpbDtcXHU2OTE5XFx1MDEwMDtzXFx1MjUwOVxcdTI1MGFcXHU2YWFkO1xcdWMwMDBcXHUyYWFkXFx1ZmUwMFxcdTAxODBhYnJcXHUyNTE1XFx1MjUxOVxcdTI1MWRycjtcXHU2OTBjcms7XFx1Njc3MlxcdTAxMDBha1xcdTI1MjJcXHUyNTJjY1xcdTAxMDBla1xcdTI1MjhcXHUyNTJhO1xcdTQwN2I7XFx1NDA1YlxcdTAxMDBlc1xcdTI1MzFcXHUyNTMzO1xcdTY5OGJsXFx1MDEwMGR1XFx1MjUzOVxcdTI1M2I7XFx1Njk4ZjtcXHU2OThkXFx1MDIwMGFldXlcXHUyNTQ2XFx1MjU0YlxcdTI1NTZcXHUyNTU4cm9uO1xcdTQxM2VcXHUwMTAwZGlcXHUyNTUwXFx1MjU1NGlsO1xcdTQxM2NcXHhlY1xcdTA4YjBcXHhlMlxcdTI1Mjk7XFx1NDQzYlxcdTAyMDBjcXJzXFx1MjU2M1xcdTI1NjZcXHUyNTZkXFx1MjU3ZGE7XFx1NjkzNnVvXFx1MDEwMDtyXFx1MGUxOVxcdTE3NDZcXHUwMTAwZHVcXHUyNTcyXFx1MjU3N2hhcjtcXHU2OTY3c2hhcjtcXHU2OTRiaDtcXHU2MWIyXFx1MDI4MDtmZ3FzXFx1MjU4YlxcdTI1OGNcXHUwOTg5XFx1MjVmM1xcdTI1ZmZcXHU2MjY0dFxcdTAyODBhaGxydFxcdTI1OThcXHUyNWE0XFx1MjViN1xcdTI1YzJcXHUyNWU4cnJvd1xcdTAxMDA7dFxcdTA4OTlcXHUyNWExYVxceGU5XFx1MjRmNmFycG9vblxcdTAxMDBkdVxcdTI1YWZcXHUyNWI0b3duXFx4YmJcXHUwNDVhcFxceGJiXFx1MDk2NmVmdGFycm93cztcXHU2MWM3aWdodFxcdTAxODBhaHNcXHUyNWNkXFx1MjVkNlxcdTI1ZGVycm93XFx1MDEwMDtzXFx1MDhmNFxcdTA4YTdhcnBvb25cXHhmM1xcdTBmOThxdWlnYXJyb1xceGY3XFx1MjFmMGhyZWV0aW1lcztcXHU2MmNiXFx1MDE4MDtxc1xcdTI1OGJcXHUwOTkzXFx1MjVmYWxhblxceGY0XFx1MDlhY1xcdTAyODA7Y2Rnc1xcdTA5YWNcXHUyNjBhXFx1MjYwZFxcdTI2MWRcXHUyNjI4YztcXHU2YWE4b3RcXHUwMTAwO29cXHUyNjE0XFx1MjYxNVxcdTZhN2ZcXHUwMTAwO3JcXHUyNjFhXFx1MjYxYlxcdTZhODE7XFx1NmE4M1xcdTAxMDA7ZVxcdTI2MjJcXHUyNjI1XFx1YzAwMFxcdTIyZGFcXHVmZTAwcztcXHU2YTkzXFx1MDI4MGFkZWdzXFx1MjYzM1xcdTI2MzlcXHUyNjNkXFx1MjY0OVxcdTI2NGJwcHJvXFx4ZjhcXHUyNGM2b3Q7XFx1NjJkNnFcXHUwMTAwZ3FcXHUyNjQzXFx1MjY0NVxceGY0XFx1MDk4OWd0XFx4ZjJcXHUyNDhjXFx4ZjRcXHUwOTliaVxceGVkXFx1MDliMlxcdTAxODBpbHJcXHUyNjU1XFx1MDhlMVxcdTI2NWFzaHQ7XFx1Njk3YztcXHVjMDAwXFx1ZDgzNVxcdWRkMjlcXHUwMTAwO0VcXHUwOTljXFx1MjY2MztcXHU2YTkxXFx1MDE2MVxcdTI2NjlcXHUyNjc2clxcdTAxMDBkdVxcdTI1YjJcXHUyNjZlXFx1MDEwMDtsXFx1MDk2NVxcdTI2NzM7XFx1Njk2YWxrO1xcdTY1ODRjeTtcXHU0NDU5XFx1MDI4MDthY2h0XFx1MGE0OFxcdTI2ODhcXHUyNjhiXFx1MjY5MVxcdTI2OTZyXFx4ZjJcXHUyNWMxb3JuZVxceGYyXFx1MWQwOGFyZDtcXHU2OTZicmk7XFx1NjVmYVxcdTAxMDBpb1xcdTI2OWZcXHUyNmE0ZG90O1xcdTQxNDB1c3RcXHUwMTAwO2FcXHUyNmFjXFx1MjZhZFxcdTYzYjBjaGVcXHhiYlxcdTI2YWRcXHUwMjAwRWFlc1xcdTI2YmJcXHUyNmJkXFx1MjZjOVxcdTI2ZDQ7XFx1NjI2OHBcXHUwMTAwO3BcXHUyNmMzXFx1MjZjNFxcdTZhODlyb3hcXHhiYlxcdTI2YzRcXHUwMTAwO3FcXHUyNmNlXFx1MjZjZlxcdTZhODdcXHUwMTAwO3FcXHUyNmNlXFx1MjZiYmltO1xcdTYyZTZcXHUwNDAwYWJub3B0d3pcXHUyNmU5XFx1MjZmNFxcdTI2ZjdcXHUyNzFhXFx1MjcyZlxcdTI3NDFcXHUyNzQ3XFx1Mjc1MFxcdTAxMDBuclxcdTI2ZWVcXHUyNmYxZztcXHU2N2VjcjtcXHU2MWZkclxceGViXFx1MDhjMWdcXHUwMTgwbG1yXFx1MjZmZlxcdTI3MGRcXHUyNzE0ZWZ0XFx1MDEwMGFyXFx1MDllNlxcdTI3MDdpZ2h0XFx4ZTFcXHUwOWYyYXBzdG87XFx1NjdmY2lnaHRcXHhlMVxcdTA5ZmRwYXJyb3dcXHUwMTAwbHJcXHUyNzI1XFx1MjcyOWVmXFx4ZjRcXHUyNGVkaWdodDtcXHU2MWFjXFx1MDE4MGFmbFxcdTI3MzZcXHUyNzM5XFx1MjczZHI7XFx1Njk4NTtcXHVjMDAwXFx1ZDgzNVxcdWRkNWR1cztcXHU2YTJkaW1lcztcXHU2YTM0XFx1MDE2MVxcdTI3NGJcXHUyNzRmc3Q7XFx1NjIxN1xceGUxXFx1MTM0ZVxcdTAxODA7ZWZcXHUyNzU3XFx1Mjc1OFxcdTE4MDBcXHU2NWNhbmdlXFx4YmJcXHUyNzU4YXJcXHUwMTAwO2xcXHUyNzY0XFx1Mjc2NVxcdTQwMjh0O1xcdTY5OTNcXHUwMjgwYWNobXRcXHUyNzczXFx1Mjc3NlxcdTI3N2NcXHUyNzg1XFx1Mjc4N3JcXHhmMlxcdTA4YThvcm5lXFx4ZjJcXHUxZDhjYXJcXHUwMTAwO2RcXHUwZjk4XFx1Mjc4MztcXHU2OTZkO1xcdTYwMGVyaTtcXHU2MmJmXFx1MDMwMGFjaGlxdFxcdTI3OThcXHUyNzlkXFx1MGE0MFxcdTI3YTJcXHUyN2FlXFx1MjdiYnF1bztcXHU2MDM5cjtcXHVjMDAwXFx1ZDgzNVxcdWRjYzFtXFx1MDE4MDtlZ1xcdTA5YjJcXHUyN2FhXFx1MjdhYztcXHU2YThkO1xcdTZhOGZcXHUwMTAwYnVcXHUyNTJhXFx1MjdiM29cXHUwMTAwO3JcXHUwZTFmXFx1MjdiOTtcXHU2MDFhcm9rO1xcdTQxNDJcXHU4NDAwPDtjZGhpbHFyXFx1MDgyYlxcdTI3ZDJcXHUyNjM5XFx1MjdkY1xcdTI3ZTBcXHUyN2U1XFx1MjdlYVxcdTI3ZjBcXHUwMTAwY2lcXHUyN2Q3XFx1MjdkOTtcXHU2YWE2cjtcXHU2YTc5cmVcXHhlNVxcdTI1ZjJtZXM7XFx1NjJjOWFycjtcXHU2OTc2dWVzdDtcXHU2YTdiXFx1MDEwMFBpXFx1MjdmNVxcdTI3ZjlhcjtcXHU2OTk2XFx1MDE4MDtlZlxcdTI4MDBcXHUwOTJkXFx1MTgxYlxcdTY1YzNyXFx1MDEwMGR1XFx1MjgwN1xcdTI4MGRzaGFyO1xcdTY5NGFoYXI7XFx1Njk2NlxcdTAxMDBlblxcdTI4MTdcXHUyODIxcnRuZXFxO1xcdWMwMDBcXHUyMjY4XFx1ZmUwMFxceGM1XFx1MjgxZVxcdTA3MDBEYWNkZWZoaWxub3BzdVxcdTI4NDBcXHUyODQ1XFx1Mjg4MlxcdTI4OGVcXHUyODkzXFx1MjhhMFxcdTI4YTVcXHUyOGE4XFx1MjhkYVxcdTI4ZTJcXHUyOGU0XFx1MGE4M1xcdTI4ZjNcXHUyOTAyRG90O1xcdTYyM2FcXHUwMjAwY2xwclxcdTI4NGVcXHUyODUyXFx1Mjg2M1xcdTI4N2RyXFx1ODAzYlxceGFmXFx1NDBhZlxcdTAxMDBldFxcdTI4NTdcXHUyODU5O1xcdTY2NDJcXHUwMTAwO2VcXHUyODVlXFx1Mjg1ZlxcdTY3MjBzZVxceGJiXFx1Mjg1ZlxcdTAxMDA7c1xcdTEwM2JcXHUyODY4dG9cXHUwMjAwO2RsdVxcdTEwM2JcXHUyODczXFx1Mjg3N1xcdTI4N2Jvd1xceGVlXFx1MDQ4Y2VmXFx4ZjRcXHUwOTBmXFx4ZjBcXHUxM2Qxa2VyO1xcdTY1YWVcXHUwMTAwb3lcXHUyODg3XFx1Mjg4Y21tYTtcXHU2YTI5O1xcdTQ0M2Nhc2g7XFx1NjAxNGFzdXJlZGFuZ2xlXFx4YmJcXHUxNjI2cjtcXHVjMDAwXFx1ZDgzNVxcdWRkMmFvO1xcdTYxMjdcXHUwMTgwY2RuXFx1MjhhZlxcdTI4YjRcXHUyOGM5cm9cXHU4MDNiXFx4YjVcXHU0MGI1XFx1MDIwMDthY2RcXHUxNDY0XFx1MjhiZFxcdTI4YzBcXHUyOGM0c1xceGY0XFx1MTZhN2lyO1xcdTZhZjBvdFxcdTgwYmJcXHhiN1xcdTAxYjV1c1xcdTAxODA7YmRcXHUyOGQyXFx1MTkwM1xcdTI4ZDNcXHU2MjEyXFx1MDEwMDt1XFx1MWQzY1xcdTI4ZDg7XFx1NmEyYVxcdTAxNjNcXHUyOGRlXFx1MjhlMXA7XFx1NmFkYlxceGYyXFx1MjIxMlxceGYwXFx1MGE4MVxcdTAxMDBkcFxcdTI4ZTlcXHUyOGVlZWxzO1xcdTYyYTdmO1xcdWMwMDBcXHVkODM1XFx1ZGQ1ZVxcdTAxMDBjdFxcdTI4ZjhcXHUyOGZkcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYzJwb3NcXHhiYlxcdTE1OWRcXHUwMTgwO2xtXFx1MjkwOVxcdTI5MGFcXHUyOTBkXFx1NDNiY3RpbWFwO1xcdTYyYjhcXHUwYzAwR0xSVmFiY2RlZmdoaWpsbW9wcnN0dXZ3XFx1Mjk0MlxcdTI5NTNcXHUyOTdlXFx1Mjk4OVxcdTI5OThcXHUyOWRhXFx1MjllOVxcdTJhMTVcXHUyYTFhXFx1MmE1OFxcdTJhNWRcXHUyYTgzXFx1MmE5NVxcdTJhYTRcXHUyYWE4XFx1MmIwNFxcdTJiMDdcXHUyYjQ0XFx1MmI3ZlxcdTJiYWVcXHUyYzM0XFx1MmM2N1xcdTJjN2NcXHUyY2U5XFx1MDEwMGd0XFx1Mjk0N1xcdTI5NGI7XFx1YzAwMFxcdTIyZDlcXHUwMzM4XFx1MDEwMDt2XFx1Mjk1MFxcdTBiY2ZcXHVjMDAwXFx1MjI2YlxcdTIwZDJcXHUwMTgwZWx0XFx1Mjk1YVxcdTI5NzJcXHUyOTc2ZnRcXHUwMTAwYXJcXHUyOTYxXFx1Mjk2N3Jyb3c7XFx1NjFjZGlnaHRhcnJvdztcXHU2MWNlO1xcdWMwMDBcXHUyMmQ4XFx1MDMzOFxcdTAxMDA7dlxcdTI5N2JcXHUwYzQ3XFx1YzAwMFxcdTIyNmFcXHUyMGQyaWdodGFycm93O1xcdTYxY2ZcXHUwMTAwRGRcXHUyOThlXFx1Mjk5M2FzaDtcXHU2MmFmYXNoO1xcdTYyYWVcXHUwMjgwYmNucHRcXHUyOWEzXFx1MjlhN1xcdTI5YWNcXHUyOWIxXFx1MjljY2xhXFx4YmJcXHUwMmRldXRlO1xcdTQxNDRnO1xcdWMwMDBcXHUyMjIwXFx1MjBkMlxcdTAyODA7RWlvcFxcdTBkODRcXHUyOWJjXFx1MjljMFxcdTI5YzVcXHUyOWM4O1xcdWMwMDBcXHUyYTcwXFx1MDMzOGQ7XFx1YzAwMFxcdTIyNGJcXHUwMzM4cztcXHU0MTQ5cm9cXHhmOFxcdTBkODR1clxcdTAxMDA7YVxcdTI5ZDNcXHUyOWQ0XFx1NjY2ZWxcXHUwMTAwO3NcXHUyOWQzXFx1MGIzOFxcdTAxZjNcXHUyOWRmXFwwXFx1MjllM3BcXHU4MGJiXFx4YTBcXHUwYjM3bXBcXHUwMTAwO2VcXHUwYmY5XFx1MGMwMFxcdTAyODBhZW91eVxcdTI5ZjRcXHUyOWZlXFx1MmEwM1xcdTJhMTBcXHUyYTEzXFx1MDFmMFxcdTI5ZjlcXDBcXHUyOWZiO1xcdTZhNDNvbjtcXHU0MTQ4ZGlsO1xcdTQxNDZuZ1xcdTAxMDA7ZFxcdTBkN2VcXHUyYTBhb3Q7XFx1YzAwMFxcdTJhNmRcXHUwMzM4cDtcXHU2YTQyO1xcdTQ0M2Rhc2g7XFx1NjAxM1xcdTAzODA7QWFkcXN4XFx1MGI5MlxcdTJhMjlcXHUyYTJkXFx1MmEzYlxcdTJhNDFcXHUyYTQ1XFx1MmE1MHJyO1xcdTYxZDdyXFx1MDEwMGhyXFx1MmEzM1xcdTJhMzZrO1xcdTY5MjRcXHUwMTAwO29cXHUxM2YyXFx1MTNmMG90O1xcdWMwMDBcXHUyMjUwXFx1MDMzOHVpXFx4ZjZcXHUwYjYzXFx1MDEwMGVpXFx1MmE0YVxcdTJhNGVhcjtcXHU2OTI4XFx4ZWRcXHUwYjk4aXN0XFx1MDEwMDtzXFx1MGJhMFxcdTBiOWZyO1xcdWMwMDBcXHVkODM1XFx1ZGQyYlxcdTAyMDBFZXN0XFx1MGJjNVxcdTJhNjZcXHUyYTc5XFx1MmE3Y1xcdTAxODA7cXNcXHUwYmJjXFx1MmE2ZFxcdTBiZTFcXHUwMTgwO3FzXFx1MGJiY1xcdTBiYzVcXHUyYTc0bGFuXFx4ZjRcXHUwYmUyaVxceGVkXFx1MGJlYVxcdTAxMDA7clxcdTBiYjZcXHUyYTgxXFx4YmJcXHUwYmI3XFx1MDE4MEFhcFxcdTJhOGFcXHUyYThkXFx1MmE5MXJcXHhmMlxcdTI5NzFycjtcXHU2MWFlYXI7XFx1NmFmMlxcdTAxODA7c3ZcXHUwZjhkXFx1MmE5Y1xcdTBmOGNcXHUwMTAwO2RcXHUyYWExXFx1MmFhMlxcdTYyZmM7XFx1NjJmYWN5O1xcdTQ0NWFcXHUwMzgwQUVhZGVzdFxcdTJhYjdcXHUyYWJhXFx1MmFiZVxcdTJhYzJcXHUyYWM1XFx1MmFmNlxcdTJhZjlyXFx4ZjJcXHUyOTY2O1xcdWMwMDBcXHUyMjY2XFx1MDMzOHJyO1xcdTYxOWFyO1xcdTYwMjVcXHUwMjAwO2Zxc1xcdTBjM2JcXHUyYWNlXFx1MmFlM1xcdTJhZWZ0XFx1MDEwMGFyXFx1MmFkNFxcdTJhZDlycm9cXHhmN1xcdTJhYzFpZ2h0YXJyb1xceGY3XFx1MmE5MFxcdTAxODA7cXNcXHUwYzNiXFx1MmFiYVxcdTJhZWFsYW5cXHhmNFxcdTBjNTVcXHUwMTAwO3NcXHUwYzU1XFx1MmFmNFxceGJiXFx1MGMzNmlcXHhlZFxcdTBjNWRcXHUwMTAwO3JcXHUwYzM1XFx1MmFmZWlcXHUwMTAwO2VcXHUwYzFhXFx1MGMyNWlcXHhlNFxcdTBkOTBcXHUwMTAwcHRcXHUyYjBjXFx1MmIxMWY7XFx1YzAwMFxcdWQ4MzVcXHVkZDVmXFx1ODE4MFxceGFjO2luXFx1MmIxOVxcdTJiMWFcXHUyYjM2XFx1NDBhY25cXHUwMjAwO0VkdlxcdTBiODlcXHUyYjI0XFx1MmIyOFxcdTJiMmU7XFx1YzAwMFxcdTIyZjlcXHUwMzM4b3Q7XFx1YzAwMFxcdTIyZjVcXHUwMzM4XFx1MDFlMVxcdTBiODlcXHUyYjMzXFx1MmIzNTtcXHU2MmY3O1xcdTYyZjZpXFx1MDEwMDt2XFx1MGNiOFxcdTJiM2NcXHUwMWUxXFx1MGNiOFxcdTJiNDFcXHUyYjQzO1xcdTYyZmU7XFx1NjJmZFxcdTAxODBhb3JcXHUyYjRiXFx1MmI2M1xcdTJiNjlyXFx1MDIwMDthc3RcXHUwYjdiXFx1MmI1NVxcdTJiNWFcXHUyYjVmbGxlXFx4ZWNcXHUwYjdibDtcXHVjMDAwXFx1MmFmZFxcdTIwZTU7XFx1YzAwMFxcdTIyMDJcXHUwMzM4bGludDtcXHU2YTE0XFx1MDE4MDtjZVxcdTBjOTJcXHUyYjcwXFx1MmI3M3VcXHhlNVxcdTBjYTVcXHUwMTAwO2NcXHUwYzk4XFx1MmI3OFxcdTAxMDA7ZVxcdTBjOTJcXHUyYjdkXFx4ZjFcXHUwYzk4XFx1MDIwMEFhaXRcXHUyYjg4XFx1MmI4YlxcdTJiOWRcXHUyYmE3clxceGYyXFx1Mjk4OHJyXFx1MDE4MDtjd1xcdTJiOTRcXHUyYjk1XFx1MmI5OVxcdTYxOWI7XFx1YzAwMFxcdTI5MzNcXHUwMzM4O1xcdWMwMDBcXHUyMTlkXFx1MDMzOGdodGFycm93XFx4YmJcXHUyYjk1cmlcXHUwMTAwO2VcXHUwY2NiXFx1MGNkNlxcdTAzODBjaGltcHF1XFx1MmJiZFxcdTJiY2RcXHUyYmQ5XFx1MmIwNFxcdTBiNzhcXHUyYmU0XFx1MmJlZlxcdTAyMDA7Y2VyXFx1MGQzMlxcdTJiYzZcXHUwZDM3XFx1MmJjOXVcXHhlNVxcdTBkNDU7XFx1YzAwMFxcdWQ4MzVcXHVkY2Mzb3J0XFx1MDI2ZFxcdTJiMDVcXDBcXDBcXHUyYmQ2YXJcXHhlMVxcdTJiNTZtXFx1MDEwMDtlXFx1MGQ2ZVxcdTJiZGZcXHUwMTAwO3FcXHUwZDc0XFx1MGQ3M3N1XFx1MDEwMGJwXFx1MmJlYlxcdTJiZWRcXHhlNVxcdTBjZjhcXHhlNVxcdTBkMGJcXHUwMTgwYmNwXFx1MmJmNlxcdTJjMTFcXHUyYzE5XFx1MDIwMDtFZXNcXHUyYmZmXFx1MmMwMFxcdTBkMjJcXHUyYzA0XFx1NjI4NDtcXHVjMDAwXFx1MmFjNVxcdTAzMzhldFxcdTAxMDA7ZVxcdTBkMWJcXHUyYzBicVxcdTAxMDA7cVxcdTBkMjNcXHUyYzAwY1xcdTAxMDA7ZVxcdTBkMzJcXHUyYzE3XFx4ZjFcXHUwZDM4XFx1MDIwMDtFZXNcXHUyYzIyXFx1MmMyM1xcdTBkNWZcXHUyYzI3XFx1NjI4NTtcXHVjMDAwXFx1MmFjNlxcdTAzMzhldFxcdTAxMDA7ZVxcdTBkNThcXHUyYzJlcVxcdTAxMDA7cVxcdTBkNjBcXHUyYzIzXFx1MDIwMGdpbHJcXHUyYzNkXFx1MmMzZlxcdTJjNDVcXHUyYzQ3XFx4ZWNcXHUwYmQ3bGRlXFx1ODAzYlxceGYxXFx1NDBmMVxceGU3XFx1MGM0M2lhbmdsZVxcdTAxMDBsclxcdTJjNTJcXHUyYzVjZWZ0XFx1MDEwMDtlXFx1MGMxYVxcdTJjNWFcXHhmMVxcdTBjMjZpZ2h0XFx1MDEwMDtlXFx1MGNjYlxcdTJjNjVcXHhmMVxcdTBjZDdcXHUwMTAwO21cXHUyYzZjXFx1MmM2ZFxcdTQzYmRcXHUwMTgwO2VzXFx1MmM3NFxcdTJjNzVcXHUyYzc5XFx1NDAyM3JvO1xcdTYxMTZwO1xcdTYwMDdcXHUwNDgwREhhZGdpbHJzXFx1MmM4ZlxcdTJjOTRcXHUyYzk5XFx1MmM5ZVxcdTJjYTNcXHUyY2IwXFx1MmNiNlxcdTJjZDNcXHUyY2UzYXNoO1xcdTYyYWRhcnI7XFx1NjkwNHA7XFx1YzAwMFxcdTIyNGRcXHUyMGQyYXNoO1xcdTYyYWNcXHUwMTAwZXRcXHUyY2E4XFx1MmNhYztcXHVjMDAwXFx1MjI2NVxcdTIwZDI7XFx1YzAwMD5cXHUyMGQybmZpbjtcXHU2OWRlXFx1MDE4MEFldFxcdTJjYmRcXHUyY2MxXFx1MmNjNXJyO1xcdTY5MDI7XFx1YzAwMFxcdTIyNjRcXHUyMGQyXFx1MDEwMDtyXFx1MmNjYVxcdTJjY2RcXHVjMDAwPFxcdTIwZDJpZTtcXHVjMDAwXFx1MjJiNFxcdTIwZDJcXHUwMTAwQXRcXHUyY2Q4XFx1MmNkY3JyO1xcdTY5MDNyaWU7XFx1YzAwMFxcdTIyYjVcXHUyMGQyaW07XFx1YzAwMFxcdTIyM2NcXHUyMGQyXFx1MDE4MEFhblxcdTJjZjBcXHUyY2Y0XFx1MmQwMnJyO1xcdTYxZDZyXFx1MDEwMGhyXFx1MmNmYVxcdTJjZmRrO1xcdTY5MjNcXHUwMTAwO29cXHUxM2U3XFx1MTNlNWVhcjtcXHU2OTI3XFx1MTI1M1xcdTFhOTVcXDBcXDBcXDBcXDBcXDBcXDBcXDBcXDBcXDBcXDBcXDBcXDBcXDBcXHUyZDJkXFwwXFx1MmQzOFxcdTJkNDhcXHUyZDYwXFx1MmQ2NVxcdTJkNzJcXHUyZDg0XFx1MWIwN1xcMFxcMFxcdTJkOGRcXHUyZGFiXFwwXFx1MmRjOFxcdTJkY2VcXDBcXHUyZGRjXFx1MmUxOVxcdTJlMmJcXHUyZTNlXFx1MmU0M1xcdTAxMDBjc1xcdTJkMzFcXHUxYTk3dXRlXFx1ODAzYlxceGYzXFx1NDBmM1xcdTAxMDBpeVxcdTJkM2NcXHUyZDQ1clxcdTAxMDA7Y1xcdTFhOWVcXHUyZDQyXFx1ODAzYlxceGY0XFx1NDBmNDtcXHU0NDNlXFx1MDI4MGFiaW9zXFx1MWFhMFxcdTJkNTJcXHUyZDU3XFx1MDFjOFxcdTJkNWFsYWM7XFx1NDE1MXY7XFx1NmEzOG9sZDtcXHU2OWJjbGlnO1xcdTQxNTNcXHUwMTAwY3JcXHUyZDY5XFx1MmQ2ZGlyO1xcdTY5YmY7XFx1YzAwMFxcdWQ4MzVcXHVkZDJjXFx1MDM2ZlxcdTJkNzlcXDBcXDBcXHUyZDdjXFwwXFx1MmQ4Mm47XFx1NDJkYmF2ZVxcdTgwM2JcXHhmMlxcdTQwZjI7XFx1NjljMVxcdTAxMDBibVxcdTJkODhcXHUwZGY0YXI7XFx1NjliNVxcdTAyMDBhY2l0XFx1MmQ5NVxcdTJkOThcXHUyZGE1XFx1MmRhOHJcXHhmMlxcdTFhODBcXHUwMTAwaXJcXHUyZDlkXFx1MmRhMHI7XFx1NjliZW9zcztcXHU2OWJiblxceGU1XFx1MGU1MjtcXHU2OWMwXFx1MDE4MGFlaVxcdTJkYjFcXHUyZGI1XFx1MmRiOWNyO1xcdTQxNGRnYTtcXHU0M2M5XFx1MDE4MGNkblxcdTJkYzBcXHUyZGM1XFx1MDFjZHJvbjtcXHU0M2JmO1xcdTY5YjZwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNjBcXHUwMTgwYWVsXFx1MmRkNFxcdTJkZDdcXHUwMWQycjtcXHU2OWI3cnA7XFx1NjliOVxcdTAzODA7YWRpb3N2XFx1MmRlYVxcdTJkZWJcXHUyZGVlXFx1MmUwOFxcdTJlMGRcXHUyZTEwXFx1MmUxNlxcdTYyMjhyXFx4ZjJcXHUxYTg2XFx1MDIwMDtlZm1cXHUyZGY3XFx1MmRmOFxcdTJlMDJcXHUyZTA1XFx1NmE1ZHJcXHUwMTAwO29cXHUyZGZlXFx1MmRmZlxcdTYxMzRmXFx4YmJcXHUyZGZmXFx1ODAzYlxceGFhXFx1NDBhYVxcdTgwM2JcXHhiYVxcdTQwYmFnb2Y7XFx1NjJiNnI7XFx1NmE1NmxvcGU7XFx1NmE1NztcXHU2YTViXFx1MDE4MGNsb1xcdTJlMWZcXHUyZTIxXFx1MmUyN1xceGYyXFx1MmUwMWFzaFxcdTgwM2JcXHhmOFxcdTQwZjhsO1xcdTYyOThpXFx1MDE2Y1xcdTJlMmZcXHUyZTM0ZGVcXHU4MDNiXFx4ZjVcXHU0MGY1ZXNcXHUwMTAwO2FcXHUwMWRiXFx1MmUzYXM7XFx1NmEzNm1sXFx1ODAzYlxceGY2XFx1NDBmNmJhcjtcXHU2MzNkXFx1MGFlMVxcdTJlNWVcXDBcXHUyZTdkXFwwXFx1MmU4MFxcdTJlOWRcXDBcXHUyZWEyXFx1MmViOVxcMFxcMFxcdTJlY2JcXHUwZTljXFwwXFx1MmYxM1xcMFxcMFxcdTJmMmJcXHUyZmJjXFwwXFx1MmZjOHJcXHUwMjAwO2FzdFxcdTA0MDNcXHUyZTY3XFx1MmU3MlxcdTBlODVcXHU4MTAwXFx4YjY7bFxcdTJlNmRcXHUyZTZlXFx1NDBiNmxlXFx4ZWNcXHUwNDAzXFx1MDI2OVxcdTJlNzhcXDBcXDBcXHUyZTdibTtcXHU2YWYzO1xcdTZhZmR5O1xcdTQ0M2ZyXFx1MDI4MGNpbXB0XFx1MmU4YlxcdTJlOGZcXHUyZTkzXFx1MTg2NVxcdTJlOTdudDtcXHU0MDI1b2Q7XFx1NDAyZWlsO1xcdTYwMzBlbms7XFx1NjAzMXI7XFx1YzAwMFxcdWQ4MzVcXHVkZDJkXFx1MDE4MGltb1xcdTJlYThcXHUyZWIwXFx1MmViNFxcdTAxMDA7dlxcdTJlYWRcXHUyZWFlXFx1NDNjNjtcXHU0M2Q1bWFcXHhmNFxcdTBhNzZuZTtcXHU2NjBlXFx1MDE4MDt0dlxcdTJlYmZcXHUyZWMwXFx1MmVjOFxcdTQzYzBjaGZvcmtcXHhiYlxcdTFmZmQ7XFx1NDNkNlxcdTAxMDBhdVxcdTJlY2ZcXHUyZWRmblxcdTAxMDBja1xcdTJlZDVcXHUyZWRka1xcdTAxMDA7aFxcdTIxZjRcXHUyZWRiO1xcdTYxMGVcXHhmNlxcdTIxZjRzXFx1MDQ4MDthYmNkZW1zdFxcdTJlZjNcXHUyZWY0XFx1MTkwOFxcdTJlZjlcXHUyZWZkXFx1MmYwNFxcdTJmMDZcXHUyZjBhXFx1MmYwZVxcdTQwMmJjaXI7XFx1NmEyM2lyO1xcdTZhMjJcXHUwMTAwb3VcXHUxZDQwXFx1MmYwMjtcXHU2YTI1O1xcdTZhNzJuXFx1ODBiYlxceGIxXFx1MGU5ZGltO1xcdTZhMjZ3bztcXHU2YTI3XFx1MDE4MGlwdVxcdTJmMTlcXHUyZjIwXFx1MmYyNW50aW50O1xcdTZhMTVmO1xcdWMwMDBcXHVkODM1XFx1ZGQ2MW5kXFx1ODAzYlxceGEzXFx1NDBhM1xcdTA1MDA7RWFjZWlub3N1XFx1MGVjOFxcdTJmM2ZcXHUyZjQxXFx1MmY0NFxcdTJmNDdcXHUyZjgxXFx1MmY4OVxcdTJmOTJcXHUyZjdlXFx1MmZiNjtcXHU2YWIzcDtcXHU2YWI3dVxceGU1XFx1MGVkOVxcdTAxMDA7Y1xcdTBlY2VcXHUyZjRjXFx1MDMwMDthY2Vuc1xcdTBlYzhcXHUyZjU5XFx1MmY1ZlxcdTJmNjZcXHUyZjY4XFx1MmY3ZXBwcm9cXHhmOFxcdTJmNDN1cmx5ZVxceGYxXFx1MGVkOVxceGYxXFx1MGVjZVxcdTAxODBhZXNcXHUyZjZmXFx1MmY3NlxcdTJmN2FwcHJveDtcXHU2YWI5cXE7XFx1NmFiNWltO1xcdTYyZThpXFx4ZWRcXHUwZWRmbWVcXHUwMTAwO3NcXHUyZjg4XFx1MGVhZVxcdTYwMzJcXHUwMTgwRWFzXFx1MmY3OFxcdTJmOTBcXHUyZjdhXFx4ZjBcXHUyZjc1XFx1MDE4MGRmcFxcdTBlZWNcXHUyZjk5XFx1MmZhZlxcdTAxODBhbHNcXHUyZmEwXFx1MmZhNVxcdTJmYWFsYXI7XFx1NjMyZWluZTtcXHU2MzEydXJmO1xcdTYzMTNcXHUwMTAwO3RcXHUwZWZiXFx1MmZiNFxceGVmXFx1MGVmYnJlbDtcXHU2MmIwXFx1MDEwMGNpXFx1MmZjMFxcdTJmYzVyO1xcdWMwMDBcXHVkODM1XFx1ZGNjNTtcXHU0M2M4bmNzcDtcXHU2MDA4XFx1MDMwMGZpb3BzdVxcdTJmZGFcXHUyMmUyXFx1MmZkZlxcdTJmZTVcXHUyZmViXFx1MmZmMXI7XFx1YzAwMFxcdWQ4MzVcXHVkZDJlcGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDYycmltZTtcXHU2MDU3Y3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2M2XFx1MDE4MGFlb1xcdTJmZjhcXHUzMDA5XFx1MzAxM3RcXHUwMTAwZWlcXHUyZmZlXFx1MzAwNXJuaW9uXFx4ZjNcXHUwNmIwbnQ7XFx1NmExNnN0XFx1MDEwMDtlXFx1MzAxMFxcdTMwMTFcXHU0MDNmXFx4ZjFcXHUxZjE5XFx4ZjRcXHUwZjE0XFx1MGE4MEFCSGFiY2RlZmhpbG1ub3Byc3R1eFxcdTMwNDBcXHUzMDUxXFx1MzA1NVxcdTMwNTlcXHUzMGUwXFx1MzEwZVxcdTMxMmJcXHUzMTQ3XFx1MzE2MlxcdTMxNzJcXHUzMThlXFx1MzIwNlxcdTMyMTVcXHUzMjI0XFx1MzIyOVxcdTMyNThcXHUzMjZlXFx1MzI3MlxcdTMyOTBcXHUzMmIwXFx1MzJiN1xcdTAxODBhcnRcXHUzMDQ3XFx1MzA0YVxcdTMwNGNyXFx4ZjJcXHUxMGIzXFx4ZjJcXHUwM2RkYWlsO1xcdTY5MWNhclxceGYyXFx1MWM2NWFyO1xcdTY5NjRcXHUwMzgwY2RlbnFydFxcdTMwNjhcXHUzMDc1XFx1MzA3OFxcdTMwN2ZcXHUzMDhmXFx1MzA5NFxcdTMwY2NcXHUwMTAwZXVcXHUzMDZkXFx1MzA3MTtcXHVjMDAwXFx1MjIzZFxcdTAzMzF0ZTtcXHU0MTU1aVxceGUzXFx1MTE2ZW1wdHl2O1xcdTY5YjNnXFx1MDIwMDtkZWxcXHUwZmQxXFx1MzA4OVxcdTMwOGJcXHUzMDhkO1xcdTY5OTI7XFx1NjlhNVxceGU1XFx1MGZkMXVvXFx1ODAzYlxceGJiXFx1NDBiYnJcXHUwNTgwO2FiY2ZobHBzdHdcXHUwZmRjXFx1MzBhY1xcdTMwYWZcXHUzMGI3XFx1MzBiOVxcdTMwYmNcXHUzMGJlXFx1MzBjMFxcdTMwYzNcXHUzMGM3XFx1MzBjYXA7XFx1Njk3NVxcdTAxMDA7ZlxcdTBmZTBcXHUzMGI0cztcXHU2OTIwO1xcdTY5MzNzO1xcdTY5MWVcXHhlYlxcdTIyNWRcXHhmMFxcdTI3MmVsO1xcdTY5NDVpbTtcXHU2OTc0bDtcXHU2MWEzO1xcdTYxOWRcXHUwMTAwYWlcXHUzMGQxXFx1MzBkNWlsO1xcdTY5MWFvXFx1MDEwMDtuXFx1MzBkYlxcdTMwZGNcXHU2MjM2YWxcXHhmM1xcdTBmMWVcXHUwMTgwYWJyXFx1MzBlN1xcdTMwZWFcXHUzMGVlclxceGYyXFx1MTdlNXJrO1xcdTY3NzNcXHUwMTAwYWtcXHUzMGYzXFx1MzBmZGNcXHUwMTAwZWtcXHUzMGY5XFx1MzBmYjtcXHU0MDdkO1xcdTQwNWRcXHUwMTAwZXNcXHUzMTAyXFx1MzEwNDtcXHU2OThjbFxcdTAxMDBkdVxcdTMxMGFcXHUzMTBjO1xcdTY5OGU7XFx1Njk5MFxcdTAyMDBhZXV5XFx1MzExN1xcdTMxMWNcXHUzMTI3XFx1MzEyOXJvbjtcXHU0MTU5XFx1MDEwMGRpXFx1MzEyMVxcdTMxMjVpbDtcXHU0MTU3XFx4ZWNcXHUwZmYyXFx4ZTJcXHUzMGZhO1xcdTQ0NDBcXHUwMjAwY2xxc1xcdTMxMzRcXHUzMTM3XFx1MzEzZFxcdTMxNDRhO1xcdTY5MzdkaGFyO1xcdTY5Njl1b1xcdTAxMDA7clxcdTAyMGVcXHUwMjBkaDtcXHU2MWIzXFx1MDE4MGFjZ1xcdTMxNGVcXHUzMTVmXFx1MGY0NGxcXHUwMjAwO2lwc1xcdTBmNzhcXHUzMTU4XFx1MzE1YlxcdTEwOWNuXFx4ZTVcXHUxMGJiYXJcXHhmNFxcdTBmYTl0O1xcdTY1YWRcXHUwMTgwaWxyXFx1MzE2OVxcdTEwMjNcXHUzMTZlc2h0O1xcdTY5N2Q7XFx1YzAwMFxcdWQ4MzVcXHVkZDJmXFx1MDEwMGFvXFx1MzE3N1xcdTMxODZyXFx1MDEwMGR1XFx1MzE3ZFxcdTMxN2ZcXHhiYlxcdTA0N2JcXHUwMTAwO2xcXHUxMDkxXFx1MzE4NDtcXHU2OTZjXFx1MDEwMDt2XFx1MzE4YlxcdTMxOGNcXHU0M2MxO1xcdTQzZjFcXHUwMTgwZ25zXFx1MzE5NVxcdTMxZjlcXHUzMWZjaHRcXHUwMzAwYWhscnN0XFx1MzFhNFxcdTMxYjBcXHUzMWMyXFx1MzFkOFxcdTMxZTRcXHUzMWVlcnJvd1xcdTAxMDA7dFxcdTBmZGNcXHUzMWFkYVxceGU5XFx1MzBjOGFycG9vblxcdTAxMDBkdVxcdTMxYmJcXHUzMWJmb3dcXHhlZVxcdTMxN2VwXFx4YmJcXHUxMDkyZWZ0XFx1MDEwMGFoXFx1MzFjYVxcdTMxZDBycm93XFx4ZjNcXHUwZmVhYXJwb29uXFx4ZjNcXHUwNTUxaWdodGFycm93cztcXHU2MWM5cXVpZ2Fycm9cXHhmN1xcdTMwY2JocmVldGltZXM7XFx1NjJjY2c7XFx1NDJkYWluZ2RvdHNlXFx4ZjFcXHUxZjMyXFx1MDE4MGFobVxcdTMyMGRcXHUzMjEwXFx1MzIxM3JcXHhmMlxcdTBmZWFhXFx4ZjJcXHUwNTUxO1xcdTYwMGZvdXN0XFx1MDEwMDthXFx1MzIxZVxcdTMyMWZcXHU2M2IxY2hlXFx4YmJcXHUzMjFmbWlkO1xcdTZhZWVcXHUwMjAwYWJwdFxcdTMyMzJcXHUzMjNkXFx1MzI0MFxcdTMyNTJcXHUwMTAwbnJcXHUzMjM3XFx1MzIzYWc7XFx1NjdlZHI7XFx1NjFmZXJcXHhlYlxcdTEwMDNcXHUwMTgwYWZsXFx1MzI0N1xcdTMyNGFcXHUzMjRlcjtcXHU2OTg2O1xcdWMwMDBcXHVkODM1XFx1ZGQ2M3VzO1xcdTZhMmVpbWVzO1xcdTZhMzVcXHUwMTAwYXBcXHUzMjVkXFx1MzI2N3JcXHUwMTAwO2dcXHUzMjYzXFx1MzI2NFxcdTQwMjl0O1xcdTY5OTRvbGludDtcXHU2YTEyYXJcXHhmMlxcdTMxZTNcXHUwMjAwYWNocVxcdTMyN2JcXHUzMjgwXFx1MTBiY1xcdTMyODVxdW87XFx1NjAzYXI7XFx1YzAwMFxcdWQ4MzVcXHVkY2M3XFx1MDEwMGJ1XFx1MzBmYlxcdTMyOGFvXFx1MDEwMDtyXFx1MDIxNFxcdTAyMTNcXHUwMTgwaGlyXFx1MzI5N1xcdTMyOWJcXHUzMmEwcmVcXHhlNVxcdTMxZjhtZXM7XFx1NjJjYWlcXHUwMjAwO2VmbFxcdTMyYWFcXHUxMDU5XFx1MTgyMVxcdTMyYWJcXHU2NWI5dHJpO1xcdTY5Y2VsdWhhcjtcXHU2OTY4O1xcdTYxMWVcXHUwZDYxXFx1MzJkNVxcdTMyZGJcXHUzMmRmXFx1MzMyY1xcdTMzMzhcXHUzMzcxXFwwXFx1MzM3YVxcdTMzYTRcXDBcXDBcXHUzM2VjXFx1MzNmMFxcMFxcdTM0MjhcXHUzNDQ4XFx1MzQ1YVxcdTM0YWRcXHUzNGIxXFx1MzRjYVxcdTM0ZjFcXDBcXHUzNjE2XFwwXFwwXFx1MzYzM2N1dGU7XFx1NDE1YnF1XFx4ZWZcXHUyN2JhXFx1MDUwMDtFYWNlaW5wc3lcXHUxMWVkXFx1MzJmM1xcdTMyZjVcXHUzMmZmXFx1MzMwMlxcdTMzMGJcXHUzMzBmXFx1MzMxZlxcdTMzMjZcXHUzMzI5O1xcdTZhYjRcXHUwMWYwXFx1MzJmYVxcMFxcdTMyZmM7XFx1NmFiOG9uO1xcdTQxNjF1XFx4ZTVcXHUxMWZlXFx1MDEwMDtkXFx1MTFmM1xcdTMzMDdpbDtcXHU0MTVmcmM7XFx1NDE1ZFxcdTAxODBFYXNcXHUzMzE2XFx1MzMxOFxcdTMzMWI7XFx1NmFiNnA7XFx1NmFiYWltO1xcdTYyZTlvbGludDtcXHU2YTEzaVxceGVkXFx1MTIwNDtcXHU0NDQxb3RcXHUwMTgwO2JlXFx1MzMzNFxcdTFkNDdcXHUzMzM1XFx1NjJjNTtcXHU2YTY2XFx1MDM4MEFhY21zdHhcXHUzMzQ2XFx1MzM0YVxcdTMzNTdcXHUzMzViXFx1MzM1ZVxcdTMzNjNcXHUzMzZkcnI7XFx1NjFkOHJcXHUwMTAwaHJcXHUzMzUwXFx1MzM1MlxceGViXFx1MjIyOFxcdTAxMDA7b1xcdTBhMzZcXHUwYTM0dFxcdTgwM2JcXHhhN1xcdTQwYTdpO1xcdTQwM2J3YXI7XFx1NjkyOW1cXHUwMTAwaW5cXHUzMzY5XFx4ZjBudVxceGYzXFx4ZjF0O1xcdTY3MzZyXFx1MDEwMDtvXFx1MzM3NlxcdTIwNTVcXHVjMDAwXFx1ZDgzNVxcdWRkMzBcXHUwMjAwYWNveVxcdTMzODJcXHUzMzg2XFx1MzM5MVxcdTMzYTBycDtcXHU2NjZmXFx1MDEwMGh5XFx1MzM4YlxcdTMzOGZjeTtcXHU0NDQ5O1xcdTQ0NDhydFxcdTAyNmRcXHUzMzk5XFwwXFwwXFx1MzM5Y2lcXHhlNFxcdTE0NjRhcmFcXHhlY1xcdTJlNmZcXHU4MDNiXFx4YWRcXHU0MGFkXFx1MDEwMGdtXFx1MzNhOFxcdTMzYjRtYVxcdTAxODA7ZnZcXHUzM2IxXFx1MzNiMlxcdTMzYjJcXHU0M2MzO1xcdTQzYzJcXHUwNDAwO2RlZ2xucHJcXHUxMmFiXFx1MzNjNVxcdTMzYzlcXHUzM2NlXFx1MzNkNlxcdTMzZGVcXHUzM2UxXFx1MzNlNm90O1xcdTZhNmFcXHUwMTAwO3FcXHUxMmIxXFx1MTJiMFxcdTAxMDA7RVxcdTMzZDNcXHUzM2Q0XFx1NmE5ZTtcXHU2YWEwXFx1MDEwMDtFXFx1MzNkYlxcdTMzZGNcXHU2YTlkO1xcdTZhOWZlO1xcdTYyNDZsdXM7XFx1NmEyNGFycjtcXHU2OTcyYXJcXHhmMlxcdTExM2RcXHUwMjAwYWVpdFxcdTMzZjhcXHUzNDA4XFx1MzQwZlxcdTM0MTdcXHUwMTAwbHNcXHUzM2ZkXFx1MzQwNGxzZXRtXFx4ZTlcXHUzMzZhaHA7XFx1NmEzM3BhcnNsO1xcdTY5ZTRcXHUwMTAwZGxcXHUxNDYzXFx1MzQxNGU7XFx1NjMyM1xcdTAxMDA7ZVxcdTM0MWNcXHUzNDFkXFx1NmFhYVxcdTAxMDA7c1xcdTM0MjJcXHUzNDIzXFx1NmFhYztcXHVjMDAwXFx1MmFhY1xcdWZlMDBcXHUwMTgwZmxwXFx1MzQyZVxcdTM0MzNcXHUzNDQydGN5O1xcdTQ0NGNcXHUwMTAwO2JcXHUzNDM4XFx1MzQzOVxcdTQwMmZcXHUwMTAwO2FcXHUzNDNlXFx1MzQzZlxcdTY5YzRyO1xcdTYzM2ZmO1xcdWMwMDBcXHVkODM1XFx1ZGQ2NGFcXHUwMTAwZHJcXHUzNDRkXFx1MDQwMmVzXFx1MDEwMDt1XFx1MzQ1NFxcdTM0NTVcXHU2NjYwaXRcXHhiYlxcdTM0NTVcXHUwMTgwY3N1XFx1MzQ2MFxcdTM0NzlcXHUzNDlmXFx1MDEwMGF1XFx1MzQ2NVxcdTM0NmZwXFx1MDEwMDtzXFx1MTE4OFxcdTM0NmI7XFx1YzAwMFxcdTIyOTNcXHVmZTAwcFxcdTAxMDA7c1xcdTExYjRcXHUzNDc1O1xcdWMwMDBcXHUyMjk0XFx1ZmUwMHVcXHUwMTAwYnBcXHUzNDdmXFx1MzQ4ZlxcdTAxODA7ZXNcXHUxMTk3XFx1MTE5Y1xcdTM0ODZldFxcdTAxMDA7ZVxcdTExOTdcXHUzNDhkXFx4ZjFcXHUxMTlkXFx1MDE4MDtlc1xcdTExYThcXHUxMWFkXFx1MzQ5NmV0XFx1MDEwMDtlXFx1MTFhOFxcdTM0OWRcXHhmMVxcdTExYWVcXHUwMTgwO2FmXFx1MTE3YlxcdTM0YTZcXHUwNWIwclxcdTAxNjVcXHUzNGFiXFx1MDViMVxceGJiXFx1MTE3Y2FyXFx4ZjJcXHUxMTQ4XFx1MDIwMGNlbXRcXHUzNGI5XFx1MzRiZVxcdTM0YzJcXHUzNGM1cjtcXHVjMDAwXFx1ZDgzNVxcdWRjYzh0bVxceGVlXFx4ZjFpXFx4ZWNcXHUzNDE1YXJcXHhlNlxcdTExYmVcXHUwMTAwYXJcXHUzNGNlXFx1MzRkNXJcXHUwMTAwO2ZcXHUzNGQ0XFx1MTdiZlxcdTY2MDZcXHUwMTAwYW5cXHUzNGRhXFx1MzRlZGlnaHRcXHUwMTAwZXBcXHUzNGUzXFx1MzRlYXBzaWxvXFx4ZWVcXHUxZWUwaFxceGU5XFx1MmVhZnNcXHhiYlxcdTI4NTJcXHUwMjgwYmNtbnBcXHUzNGZiXFx1MzU1ZVxcdTEyMDlcXHUzNThiXFx1MzU4ZVxcdTA0ODA7RWRlbW5wcnNcXHUzNTBlXFx1MzUwZlxcdTM1MTFcXHUzNTE1XFx1MzUxZVxcdTM1MjNcXHUzNTJjXFx1MzUzMVxcdTM1MzZcXHU2MjgyO1xcdTZhYzVvdDtcXHU2YWJkXFx1MDEwMDtkXFx1MTFkYVxcdTM1MWFvdDtcXHU2YWMzdWx0O1xcdTZhYzFcXHUwMTAwRWVcXHUzNTI4XFx1MzUyYTtcXHU2YWNiO1xcdTYyOGFsdXM7XFx1NmFiZmFycjtcXHU2OTc5XFx1MDE4MGVpdVxcdTM1M2RcXHUzNTUyXFx1MzU1NXRcXHUwMTgwO2VuXFx1MzUwZVxcdTM1NDVcXHUzNTRicVxcdTAxMDA7cVxcdTExZGFcXHUzNTBmZXFcXHUwMTAwO3FcXHUzNTJiXFx1MzUyOG07XFx1NmFjN1xcdTAxMDBicFxcdTM1NWFcXHUzNTVjO1xcdTZhZDU7XFx1NmFkM2NcXHUwMzAwO2FjZW5zXFx1MTFlZFxcdTM1NmNcXHUzNTcyXFx1MzU3OVxcdTM1N2JcXHUzMzI2cHByb1xceGY4XFx1MzJmYXVybHllXFx4ZjFcXHUxMWZlXFx4ZjFcXHUxMWYzXFx1MDE4MGFlc1xcdTM1ODJcXHUzNTg4XFx1MzMxYnBwcm9cXHhmOFxcdTMzMWFxXFx4ZjFcXHUzMzE3ZztcXHU2NjZhXFx1MDY4MDEyMztFZGVobG1ucHNcXHUzNWE5XFx1MzVhY1xcdTM1YWZcXHUxMjFjXFx1MzViMlxcdTM1YjRcXHUzNWMwXFx1MzVjOVxcdTM1ZDVcXHUzNWRhXFx1MzVkZlxcdTM1ZThcXHUzNWVkXFx1ODAzYlxceGI5XFx1NDBiOVxcdTgwM2JcXHhiMlxcdTQwYjJcXHU4MDNiXFx4YjNcXHU0MGIzO1xcdTZhYzZcXHUwMTAwb3NcXHUzNWI5XFx1MzViY3Q7XFx1NmFiZXViO1xcdTZhZDhcXHUwMTAwO2RcXHUxMjIyXFx1MzVjNW90O1xcdTZhYzRzXFx1MDEwMG91XFx1MzVjZlxcdTM1ZDJsO1xcdTY3YzliO1xcdTZhZDdhcnI7XFx1Njk3YnVsdDtcXHU2YWMyXFx1MDEwMEVlXFx1MzVlNFxcdTM1ZTY7XFx1NmFjYztcXHU2MjhibHVzO1xcdTZhYzBcXHUwMTgwZWl1XFx1MzVmNFxcdTM2MDlcXHUzNjBjdFxcdTAxODA7ZW5cXHUxMjFjXFx1MzVmY1xcdTM2MDJxXFx1MDEwMDtxXFx1MTIyMlxcdTM1YjJlcVxcdTAxMDA7cVxcdTM1ZTdcXHUzNWU0bTtcXHU2YWM4XFx1MDEwMGJwXFx1MzYxMVxcdTM2MTM7XFx1NmFkNDtcXHU2YWQ2XFx1MDE4MEFhblxcdTM2MWNcXHUzNjIwXFx1MzYyZHJyO1xcdTYxZDlyXFx1MDEwMGhyXFx1MzYyNlxcdTM2MjhcXHhlYlxcdTIyMmVcXHUwMTAwO29cXHUwYTJiXFx1MGEyOXdhcjtcXHU2OTJhbGlnXFx1ODAzYlxceGRmXFx1NDBkZlxcdTBiZTFcXHUzNjUxXFx1MzY1ZFxcdTM2NjBcXHUxMmNlXFx1MzY3M1xcdTM2NzlcXDBcXHUzNjdlXFx1MzZjMlxcMFxcMFxcMFxcMFxcMFxcdTM2ZGJcXHUzNzAzXFwwXFx1MzcwOVxcdTM3NmNcXDBcXDBcXDBcXHUzNzg3XFx1MDI3MlxcdTM2NTZcXDBcXDBcXHUzNjViZ2V0O1xcdTYzMTY7XFx1NDNjNHJcXHhlYlxcdTBlNWZcXHUwMTgwYWV5XFx1MzY2NlxcdTM2NmJcXHUzNjcwcm9uO1xcdTQxNjVkaWw7XFx1NDE2MztcXHU0NDQybHJlYztcXHU2MzE1cjtcXHVjMDAwXFx1ZDgzNVxcdWRkMzFcXHUwMjAwZWlrb1xcdTM2ODZcXHUzNjlkXFx1MzZiNVxcdTM2YmNcXHUwMWYyXFx1MzY4YlxcMFxcdTM2OTFlXFx1MDEwMDRmXFx1MTI4NFxcdTEyODFhXFx1MDE4MDtzdlxcdTM2OThcXHUzNjk5XFx1MzY5YlxcdTQzYjh5bTtcXHU0M2QxXFx1MDEwMGNuXFx1MzZhMlxcdTM2YjJrXFx1MDEwMGFzXFx1MzZhOFxcdTM2YWVwcHJvXFx4ZjhcXHUxMmMxaW1cXHhiYlxcdTEyYWNzXFx4ZjBcXHUxMjllXFx1MDEwMGFzXFx1MzZiYVxcdTM2YWVcXHhmMFxcdTEyYzFyblxcdTgwM2JcXHhmZVxcdTQwZmVcXHUwMWVjXFx1MDMxZlxcdTM2YzZcXHUyMmU3ZXNcXHU4MTgwXFx4ZDc7YmRcXHUzNmNmXFx1MzZkMFxcdTM2ZDhcXHU0MGQ3XFx1MDEwMDthXFx1MTkwZlxcdTM2ZDVyO1xcdTZhMzE7XFx1NmEzMFxcdTAxODBlcHNcXHUzNmUxXFx1MzZlM1xcdTM3MDBcXHhlMVxcdTJhNGRcXHUwMjAwO2JjZlxcdTA0ODZcXHUzNmVjXFx1MzZmMFxcdTM2ZjRvdDtcXHU2MzM2aXI7XFx1NmFmMVxcdTAxMDA7b1xcdTM2ZjlcXHUzNmZjXFx1YzAwMFxcdWQ4MzVcXHVkZDY1cms7XFx1NmFkYVxceGUxXFx1MzM2MnJpbWU7XFx1NjAzNFxcdTAxODBhaXBcXHUzNzBmXFx1MzcxMlxcdTM3NjRkXFx4ZTVcXHUxMjQ4XFx1MDM4MGFkZW1wc3RcXHUzNzIxXFx1Mzc0ZFxcdTM3NDBcXHUzNzUxXFx1Mzc1N1xcdTM3NWNcXHUzNzVmbmdsZVxcdTAyODA7ZGxxclxcdTM3MzBcXHUzNzMxXFx1MzczNlxcdTM3NDBcXHUzNzQyXFx1NjViNW93blxceGJiXFx1MWRiYmVmdFxcdTAxMDA7ZVxcdTI4MDBcXHUzNzNlXFx4ZjFcXHUwOTJlO1xcdTYyNWNpZ2h0XFx1MDEwMDtlXFx1MzJhYVxcdTM3NGJcXHhmMVxcdTEwNWFvdDtcXHU2NWVjaW51cztcXHU2YTNhbHVzO1xcdTZhMzliO1xcdTY5Y2RpbWU7XFx1NmEzYmV6aXVtO1xcdTYzZTJcXHUwMTgwY2h0XFx1Mzc3MlxcdTM3N2RcXHUzNzgxXFx1MDEwMHJ5XFx1Mzc3N1xcdTM3N2I7XFx1YzAwMFxcdWQ4MzVcXHVkY2M5O1xcdTQ0NDZjeTtcXHU0NDVicm9rO1xcdTQxNjdcXHUwMTAwaW9cXHUzNzhiXFx1Mzc4ZXhcXHhmNFxcdTE3NzdoZWFkXFx1MDEwMGxyXFx1Mzc5N1xcdTM3YTBlZnRhcnJvXFx4ZjdcXHUwODRmaWdodGFycm93XFx4YmJcXHUwZjVkXFx1MDkwMEFIYWJjZGZnaGxtb3Byc3R1d1xcdTM3ZDBcXHUzN2QzXFx1MzdkN1xcdTM3ZTRcXHUzN2YwXFx1MzdmY1xcdTM4MGVcXHUzODFjXFx1MzgyM1xcdTM4MzRcXHUzODUxXFx1Mzg1ZFxcdTM4NmJcXHUzOGE5XFx1MzhjY1xcdTM4ZDJcXHUzOGVhXFx1MzhmNnJcXHhmMlxcdTAzZWRhcjtcXHU2OTYzXFx1MDEwMGNyXFx1MzdkY1xcdTM3ZTJ1dGVcXHU4MDNiXFx4ZmFcXHU0MGZhXFx4ZjJcXHUxMTUwclxcdTAxZTNcXHUzN2VhXFwwXFx1MzdlZHk7XFx1NDQ1ZXZlO1xcdTQxNmRcXHUwMTAwaXlcXHUzN2Y1XFx1MzdmYXJjXFx1ODAzYlxceGZiXFx1NDBmYjtcXHU0NDQzXFx1MDE4MGFiaFxcdTM4MDNcXHUzODA2XFx1MzgwYnJcXHhmMlxcdTEzYWRsYWM7XFx1NDE3MWFcXHhmMlxcdTEzYzNcXHUwMTAwaXJcXHUzODEzXFx1MzgxOHNodDtcXHU2OTdlO1xcdWMwMDBcXHVkODM1XFx1ZGQzMnJhdmVcXHU4MDNiXFx4ZjlcXHU0MGY5XFx1MDE2MVxcdTM4MjdcXHUzODMxclxcdTAxMDBsclxcdTM4MmNcXHUzODJlXFx4YmJcXHUwOTU3XFx4YmJcXHUxMDgzbGs7XFx1NjU4MFxcdTAxMDBjdFxcdTM4MzlcXHUzODRkXFx1MDI2ZlxcdTM4M2ZcXDBcXDBcXHUzODRhcm5cXHUwMTAwO2VcXHUzODQ1XFx1Mzg0NlxcdTYzMWNyXFx4YmJcXHUzODQ2b3A7XFx1NjMwZnJpO1xcdTY1ZjhcXHUwMTAwYWxcXHUzODU2XFx1Mzg1YWNyO1xcdTQxNmJcXHU4MGJiXFx4YThcXHUwMzQ5XFx1MDEwMGdwXFx1Mzg2MlxcdTM4NjZvbjtcXHU0MTczZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNjZcXHUwMzAwYWRobHN1XFx1MTE0YlxcdTM4NzhcXHUzODdkXFx1MTM3MlxcdTM4OTFcXHUzOGEwb3duXFx4ZTFcXHUxM2IzYXJwb29uXFx1MDEwMGxyXFx1Mzg4OFxcdTM4OGNlZlxceGY0XFx1MzgyZGlnaFxceGY0XFx1MzgyZmlcXHUwMTgwO2hsXFx1Mzg5OVxcdTM4OWFcXHUzODljXFx1NDNjNVxceGJiXFx1MTNmYW9uXFx4YmJcXHUzODlhcGFycm93cztcXHU2MWM4XFx1MDE4MGNpdFxcdTM4YjBcXHUzOGM0XFx1MzhjOFxcdTAyNmZcXHUzOGI2XFwwXFwwXFx1MzhjMXJuXFx1MDEwMDtlXFx1MzhiY1xcdTM4YmRcXHU2MzFkclxceGJiXFx1MzhiZG9wO1xcdTYzMGVuZztcXHU0MTZmcmk7XFx1NjVmOWNyO1xcdWMwMDBcXHVkODM1XFx1ZGNjYVxcdTAxODBkaXJcXHUzOGQ5XFx1MzhkZFxcdTM4ZTJvdDtcXHU2MmYwbGRlO1xcdTQxNjlpXFx1MDEwMDtmXFx1MzczMFxcdTM4ZThcXHhiYlxcdTE4MTNcXHUwMTAwYW1cXHUzOGVmXFx1MzhmMnJcXHhmMlxcdTM4YThsXFx1ODAzYlxceGZjXFx1NDBmY2FuZ2xlO1xcdTY5YTdcXHUwNzgwQUJEYWNkZWZsbm9wcnN6XFx1MzkxY1xcdTM5MWZcXHUzOTI5XFx1MzkyZFxcdTM5YjVcXHUzOWI4XFx1MzliZFxcdTM5ZGZcXHUzOWU0XFx1MzllOFxcdTM5ZjNcXHUzOWY5XFx1MzlmZFxcdTNhMDFcXHUzYTIwclxceGYyXFx1MDNmN2FyXFx1MDEwMDt2XFx1MzkyNlxcdTM5MjdcXHU2YWU4O1xcdTZhZTlhc1xceGU4XFx1MDNlMVxcdTAxMDBuclxcdTM5MzJcXHUzOTM3Z3J0O1xcdTY5OWNcXHUwMzgwZWtucHJzdFxcdTM0ZTNcXHUzOTQ2XFx1Mzk0YlxcdTM5NTJcXHUzOTVkXFx1Mzk2NFxcdTM5OTZhcHBcXHhlMVxcdTI0MTVvdGhpblxceGU3XFx1MWU5NlxcdTAxODBoaXJcXHUzNGViXFx1MmVjOFxcdTM5NTlvcFxceGY0XFx1MmZiNVxcdTAxMDA7aFxcdTEzYjdcXHUzOTYyXFx4ZWZcXHUzMThkXFx1MDEwMGl1XFx1Mzk2OVxcdTM5NmRnbVxceGUxXFx1MzNiM1xcdTAxMDBicFxcdTM5NzJcXHUzOTg0c2V0bmVxXFx1MDEwMDtxXFx1Mzk3ZFxcdTM5ODBcXHVjMDAwXFx1MjI4YVxcdWZlMDA7XFx1YzAwMFxcdTJhY2JcXHVmZTAwc2V0bmVxXFx1MDEwMDtxXFx1Mzk4ZlxcdTM5OTJcXHVjMDAwXFx1MjI4YlxcdWZlMDA7XFx1YzAwMFxcdTJhY2NcXHVmZTAwXFx1MDEwMGhyXFx1Mzk5YlxcdTM5OWZldFxceGUxXFx1MzY5Y2lhbmdsZVxcdTAxMDBsclxcdTM5YWFcXHUzOWFmZWZ0XFx4YmJcXHUwOTI1aWdodFxceGJiXFx1MTA1MXk7XFx1NDQzMmFzaFxceGJiXFx1MTAzNlxcdTAxODBlbHJcXHUzOWM0XFx1MzlkMlxcdTM5ZDdcXHUwMTgwO2JlXFx1MmRlYVxcdTM5Y2JcXHUzOWNmYXI7XFx1NjJiYnE7XFx1NjI1YWxpcDtcXHU2MmVlXFx1MDEwMGJ0XFx1MzlkY1xcdTE0NjhhXFx4ZjJcXHUxNDY5cjtcXHVjMDAwXFx1ZDgzNVxcdWRkMzN0clxceGU5XFx1MzlhZXN1XFx1MDEwMGJwXFx1MzllZlxcdTM5ZjFcXHhiYlxcdTBkMWNcXHhiYlxcdTBkNTlwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNjdyb1xceGYwXFx1MGVmYnRyXFx4ZTlcXHUzOWI0XFx1MDEwMGN1XFx1M2EwNlxcdTNhMGJyO1xcdWMwMDBcXHVkODM1XFx1ZGNjYlxcdTAxMDBicFxcdTNhMTBcXHUzYTE4blxcdTAxMDBFZVxcdTM5ODBcXHUzYTE2XFx4YmJcXHUzOTdlblxcdTAxMDBFZVxcdTM5OTJcXHUzYTFlXFx4YmJcXHUzOTkwaWd6YWc7XFx1Njk5YVxcdTAzODBjZWZvcHJzXFx1M2EzNlxcdTNhM2JcXHUzYTU2XFx1M2E1YlxcdTNhNTRcXHUzYTYxXFx1M2E2YWlyYztcXHU0MTc1XFx1MDEwMGRpXFx1M2E0MFxcdTNhNTFcXHUwMTAwYmdcXHUzYTQ1XFx1M2E0OWFyO1xcdTZhNWZlXFx1MDEwMDtxXFx1MTVmYVxcdTNhNGY7XFx1NjI1OWVycDtcXHU2MTE4cjtcXHVjMDAwXFx1ZDgzNVxcdWRkMzRwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNjhcXHUwMTAwO2VcXHUxNDc5XFx1M2E2NmF0XFx4ZThcXHUxNDc5Y3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2NjXFx1MGFlM1xcdTE3OGVcXHUzYTg3XFwwXFx1M2E4YlxcMFxcdTNhOTBcXHUzYTliXFwwXFwwXFx1M2E5ZFxcdTNhYThcXHUzYWFiXFx1M2FhZlxcMFxcMFxcdTNhYzNcXHUzYWNlXFwwXFx1M2FkOFxcdTE3ZGNcXHUxN2RmdHJcXHhlOVxcdTE3ZDFyO1xcdWMwMDBcXHVkODM1XFx1ZGQzNVxcdTAxMDBBYVxcdTNhOTRcXHUzYTk3clxceGYyXFx1MDNjM3JcXHhmMlxcdTA5ZjY7XFx1NDNiZVxcdTAxMDBBYVxcdTNhYTFcXHUzYWE0clxceGYyXFx1MDNiOHJcXHhmMlxcdTA5ZWJhXFx4ZjBcXHUyNzEzaXM7XFx1NjJmYlxcdTAxODBkcHRcXHUxN2E0XFx1M2FiNVxcdTNhYmVcXHUwMTAwZmxcXHUzYWJhXFx1MTdhOTtcXHVjMDAwXFx1ZDgzNVxcdWRkNjlpbVxceGU1XFx1MTdiMlxcdTAxMDBBYVxcdTNhYzdcXHUzYWNhclxceGYyXFx1MDNjZXJcXHhmMlxcdTBhMDFcXHUwMTAwY3FcXHUzYWQyXFx1MTdiOHI7XFx1YzAwMFxcdWQ4MzVcXHVkY2NkXFx1MDEwMHB0XFx1MTdkNlxcdTNhZGNyXFx4ZTlcXHUxN2Q0XFx1MDQwMGFjZWZpb3N1XFx1M2FmMFxcdTNhZmRcXHUzYjA4XFx1M2IwY1xcdTNiMTFcXHUzYjE1XFx1M2IxYlxcdTNiMjFjXFx1MDEwMHV5XFx1M2FmNlxcdTNhZmJ0ZVxcdTgwM2JcXHhmZFxcdTQwZmQ7XFx1NDQ0ZlxcdTAxMDBpeVxcdTNiMDJcXHUzYjA2cmM7XFx1NDE3NztcXHU0NDRiblxcdTgwM2JcXHhhNVxcdTQwYTVyO1xcdWMwMDBcXHVkODM1XFx1ZGQzNmN5O1xcdTQ0NTdwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNmFjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjY2VcXHUwMTAwY21cXHUzYjI2XFx1M2IyOXk7XFx1NDQ0ZWxcXHU4MDNiXFx4ZmZcXHU0MGZmXFx1MDUwMGFjZGVmaGlvc3dcXHUzYjQyXFx1M2I0OFxcdTNiNTRcXHUzYjU4XFx1M2I2NFxcdTNiNjlcXHUzYjZkXFx1M2I3NFxcdTNiN2FcXHUzYjgwY3V0ZTtcXHU0MTdhXFx1MDEwMGF5XFx1M2I0ZFxcdTNiNTJyb247XFx1NDE3ZTtcXHU0NDM3b3Q7XFx1NDE3Y1xcdTAxMDBldFxcdTNiNWRcXHUzYjYxdHJcXHhlNlxcdTE1NWZhO1xcdTQzYjZyO1xcdWMwMDBcXHVkODM1XFx1ZGQzN2N5O1xcdTQ0MzZncmFycjtcXHU2MWRkcGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDZiY3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2NmXFx1MDEwMGpuXFx1M2I4NVxcdTNiODc7XFx1NjAwZGo7XFx1NjAwY1wiXG4gICAgLnNwbGl0KFwiXCIpXG4gICAgLm1hcCgoYykgPT4gYy5jaGFyQ29kZUF0KDApKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvZGUtZGF0YS1odG1sLmpzLm1hcCIsIi8vIEdlbmVyYXRlZCB1c2luZyBzY3JpcHRzL3dyaXRlLWRlY29kZS1tYXAudHNcbmV4cG9ydCBjb25zdCB4bWxEZWNvZGVUcmVlID0gLyogI19fUFVSRV9fICovIG5ldyBVaW50MTZBcnJheShcbi8vIHByZXR0aWVyLWlnbm9yZVxuLyogI19fUFVSRV9fICovIFwiXFx1MDIwMGFnbHFcXHRcXHgxNVxceDE4XFx4MWJcXHUwMjZkXFx4MGZcXDBcXDBcXHgxMnA7XFx1NDAyNm9zO1xcdTQwMjd0O1xcdTQwM2V0O1xcdTQwM2N1b3Q7XFx1NDAyMlwiXG4gICAgLnNwbGl0KFwiXCIpXG4gICAgLm1hcCgoYykgPT4gYy5jaGFyQ29kZUF0KDApKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvZGUtZGF0YS14bWwuanMubWFwIiwiLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL2hlL2Jsb2IvMzZhZmUxNzkzOTIyMjZjZjFiNmNjZGIxNmViYmI3YTVhODQ0ZDkzYS9zcmMvaGUuanMjTDEwNi1MMTM0XG52YXIgX2E7XG5jb25zdCBkZWNvZGVNYXAgPSBuZXcgTWFwKFtcbiAgICBbMCwgNjU1MzNdLFxuICAgIC8vIEMxIFVuaWNvZGUgY29udHJvbCBjaGFyYWN0ZXIgcmVmZXJlbmNlIHJlcGxhY2VtZW50c1xuICAgIFsxMjgsIDgzNjRdLFxuICAgIFsxMzAsIDgyMThdLFxuICAgIFsxMzEsIDQwMl0sXG4gICAgWzEzMiwgODIyMl0sXG4gICAgWzEzMywgODIzMF0sXG4gICAgWzEzNCwgODIyNF0sXG4gICAgWzEzNSwgODIyNV0sXG4gICAgWzEzNiwgNzEwXSxcbiAgICBbMTM3LCA4MjQwXSxcbiAgICBbMTM4LCAzNTJdLFxuICAgIFsxMzksIDgyNDldLFxuICAgIFsxNDAsIDMzOF0sXG4gICAgWzE0MiwgMzgxXSxcbiAgICBbMTQ1LCA4MjE2XSxcbiAgICBbMTQ2LCA4MjE3XSxcbiAgICBbMTQ3LCA4MjIwXSxcbiAgICBbMTQ4LCA4MjIxXSxcbiAgICBbMTQ5LCA4MjI2XSxcbiAgICBbMTUwLCA4MjExXSxcbiAgICBbMTUxLCA4MjEyXSxcbiAgICBbMTUyLCA3MzJdLFxuICAgIFsxNTMsIDg0ODJdLFxuICAgIFsxNTQsIDM1M10sXG4gICAgWzE1NSwgODI1MF0sXG4gICAgWzE1NiwgMzM5XSxcbiAgICBbMTU4LCAzODJdLFxuICAgIFsxNTksIDM3Nl0sXG5dKTtcbi8qKlxuICogUG9seWZpbGwgZm9yIGBTdHJpbmcuZnJvbUNvZGVQb2ludGAuIEl0IGlzIHVzZWQgdG8gY3JlYXRlIGEgc3RyaW5nIGZyb20gYSBVbmljb2RlIGNvZGUgcG9pbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBmcm9tQ29kZVBvaW50ID0gXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVubmVjZXNzYXJ5LWNvbmRpdGlvbiwgbi9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9lcy1idWlsdGluc1xuKF9hID0gU3RyaW5nLmZyb21Db2RlUG9pbnQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZ1bmN0aW9uIChjb2RlUG9pbnQpIHtcbiAgICBsZXQgb3V0cHV0ID0gXCJcIjtcbiAgICBpZiAoY29kZVBvaW50ID4gNjU1MzUpIHtcbiAgICAgICAgY29kZVBvaW50IC09IDY1NTM2O1xuICAgICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+Pj4gMTApICYgMTAyMykgfCA1NTI5Nik7XG4gICAgICAgIGNvZGVQb2ludCA9IDU2MzIwIHwgKGNvZGVQb2ludCAmIDEwMjMpO1xuICAgIH1cbiAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlUG9pbnQpO1xuICAgIHJldHVybiBvdXRwdXQ7XG59O1xuLyoqXG4gKiBSZXBsYWNlIHRoZSBnaXZlbiBjb2RlIHBvaW50IHdpdGggYSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgaWYgaXQgaXMgYVxuICogc3Vycm9nYXRlIG9yIGlzIG91dHNpZGUgdGhlIHZhbGlkIHJhbmdlLiBPdGhlcndpc2UgcmV0dXJuIHRoZSBjb2RlXG4gKiBwb2ludCB1bmNoYW5nZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlQ29kZVBvaW50KGNvZGVQb2ludCkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoKGNvZGVQb2ludCA+PSA1NTI5NiAmJiBjb2RlUG9pbnQgPD0gNTczNDMpIHx8XG4gICAgICAgIGNvZGVQb2ludCA+IDExMTQxMTEpIHtcbiAgICAgICAgcmV0dXJuIDY1NTMzO1xuICAgIH1cbiAgICByZXR1cm4gKF9hID0gZGVjb2RlTWFwLmdldChjb2RlUG9pbnQpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBjb2RlUG9pbnQ7XG59XG4vKipcbiAqIFJlcGxhY2UgdGhlIGNvZGUgcG9pbnQgaWYgcmVsZXZhbnQsIHRoZW4gY29udmVydCBpdCB0byBhIHN0cmluZy5cbiAqXG4gKiBAZGVwcmVjYXRlZCBVc2UgYGZyb21Db2RlUG9pbnQocmVwbGFjZUNvZGVQb2ludChjb2RlUG9pbnQpKWAgaW5zdGVhZC5cbiAqIEBwYXJhbSBjb2RlUG9pbnQgVGhlIGNvZGUgcG9pbnQgdG8gZGVjb2RlLlxuICogQHJldHVybnMgVGhlIGRlY29kZWQgY29kZSBwb2ludC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludChjb2RlUG9pbnQpIHtcbiAgICByZXR1cm4gZnJvbUNvZGVQb2ludChyZXBsYWNlQ29kZVBvaW50KGNvZGVQb2ludCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVjb2RlLWNvZGVwb2ludC5qcy5tYXAiLCJpbXBvcnQgeyBodG1sRGVjb2RlVHJlZSB9IGZyb20gXCIuL2dlbmVyYXRlZC9kZWNvZGUtZGF0YS1odG1sLmpzXCI7XG5pbXBvcnQgeyB4bWxEZWNvZGVUcmVlIH0gZnJvbSBcIi4vZ2VuZXJhdGVkL2RlY29kZS1kYXRhLXhtbC5qc1wiO1xuaW1wb3J0IHsgcmVwbGFjZUNvZGVQb2ludCwgZnJvbUNvZGVQb2ludCB9IGZyb20gXCIuL2RlY29kZS1jb2RlcG9pbnQuanNcIjtcbnZhciBDaGFyQ29kZXM7XG4oZnVuY3Rpb24gKENoYXJDb2Rlcykge1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJOVU1cIl0gPSAzNV0gPSBcIk5VTVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJTRU1JXCJdID0gNTldID0gXCJTRU1JXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkVRVUFMU1wiXSA9IDYxXSA9IFwiRVFVQUxTXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIlpFUk9cIl0gPSA0OF0gPSBcIlpFUk9cIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiTklORVwiXSA9IDU3XSA9IFwiTklORVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJMT1dFUl9BXCJdID0gOTddID0gXCJMT1dFUl9BXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkxPV0VSX0ZcIl0gPSAxMDJdID0gXCJMT1dFUl9GXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkxPV0VSX1hcIl0gPSAxMjBdID0gXCJMT1dFUl9YXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkxPV0VSX1pcIl0gPSAxMjJdID0gXCJMT1dFUl9aXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIlVQUEVSX0FcIl0gPSA2NV0gPSBcIlVQUEVSX0FcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiVVBQRVJfRlwiXSA9IDcwXSA9IFwiVVBQRVJfRlwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJVUFBFUl9aXCJdID0gOTBdID0gXCJVUFBFUl9aXCI7XG59KShDaGFyQ29kZXMgfHwgKENoYXJDb2RlcyA9IHt9KSk7XG4vKiogQml0IHRoYXQgbmVlZHMgdG8gYmUgc2V0IHRvIGNvbnZlcnQgYW4gdXBwZXIgY2FzZSBBU0NJSSBjaGFyYWN0ZXIgdG8gbG93ZXIgY2FzZSAqL1xuY29uc3QgVE9fTE9XRVJfQklUID0gMzI7XG5leHBvcnQgdmFyIEJpblRyaWVGbGFncztcbihmdW5jdGlvbiAoQmluVHJpZUZsYWdzKSB7XG4gICAgQmluVHJpZUZsYWdzW0JpblRyaWVGbGFnc1tcIlZBTFVFX0xFTkdUSFwiXSA9IDQ5MTUyXSA9IFwiVkFMVUVfTEVOR1RIXCI7XG4gICAgQmluVHJpZUZsYWdzW0JpblRyaWVGbGFnc1tcIkJSQU5DSF9MRU5HVEhcIl0gPSAxNjI1Nl0gPSBcIkJSQU5DSF9MRU5HVEhcIjtcbiAgICBCaW5UcmllRmxhZ3NbQmluVHJpZUZsYWdzW1wiSlVNUF9UQUJMRVwiXSA9IDEyN10gPSBcIkpVTVBfVEFCTEVcIjtcbn0pKEJpblRyaWVGbGFncyB8fCAoQmluVHJpZUZsYWdzID0ge30pKTtcbmZ1bmN0aW9uIGlzTnVtYmVyKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA+PSBDaGFyQ29kZXMuWkVSTyAmJiBjb2RlIDw9IENoYXJDb2Rlcy5OSU5FO1xufVxuZnVuY3Rpb24gaXNIZXhhZGVjaW1hbENoYXJhY3Rlcihjb2RlKSB7XG4gICAgcmV0dXJuICgoY29kZSA+PSBDaGFyQ29kZXMuVVBQRVJfQSAmJiBjb2RlIDw9IENoYXJDb2Rlcy5VUFBFUl9GKSB8fFxuICAgICAgICAoY29kZSA+PSBDaGFyQ29kZXMuTE9XRVJfQSAmJiBjb2RlIDw9IENoYXJDb2Rlcy5MT1dFUl9GKSk7XG59XG5mdW5jdGlvbiBpc0FzY2lpQWxwaGFOdW1lcmljKGNvZGUpIHtcbiAgICByZXR1cm4gKChjb2RlID49IENoYXJDb2Rlcy5VUFBFUl9BICYmIGNvZGUgPD0gQ2hhckNvZGVzLlVQUEVSX1opIHx8XG4gICAgICAgIChjb2RlID49IENoYXJDb2Rlcy5MT1dFUl9BICYmIGNvZGUgPD0gQ2hhckNvZGVzLkxPV0VSX1opIHx8XG4gICAgICAgIGlzTnVtYmVyKGNvZGUpKTtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBjaGFyYWN0ZXIgaXMgYSB2YWxpZCBlbmQgY2hhcmFjdGVyIGZvciBhbiBlbnRpdHkgaW4gYW4gYXR0cmlidXRlLlxuICpcbiAqIEF0dHJpYnV0ZSB2YWx1ZXMgdGhhdCBhcmVuJ3QgdGVybWluYXRlZCBwcm9wZXJseSBhcmVuJ3QgcGFyc2VkLCBhbmQgc2hvdWxkbid0IGxlYWQgdG8gYSBwYXJzZXIgZXJyb3IuXG4gKiBTZWUgdGhlIGV4YW1wbGUgaW4gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvcGFyc2luZy5odG1sI25hbWVkLWNoYXJhY3Rlci1yZWZlcmVuY2Utc3RhdGVcbiAqL1xuZnVuY3Rpb24gaXNFbnRpdHlJbkF0dHJpYnV0ZUludmFsaWRFbmQoY29kZSkge1xuICAgIHJldHVybiBjb2RlID09PSBDaGFyQ29kZXMuRVFVQUxTIHx8IGlzQXNjaWlBbHBoYU51bWVyaWMoY29kZSk7XG59XG52YXIgRW50aXR5RGVjb2RlclN0YXRlO1xuKGZ1bmN0aW9uIChFbnRpdHlEZWNvZGVyU3RhdGUpIHtcbiAgICBFbnRpdHlEZWNvZGVyU3RhdGVbRW50aXR5RGVjb2RlclN0YXRlW1wiRW50aXR5U3RhcnRcIl0gPSAwXSA9IFwiRW50aXR5U3RhcnRcIjtcbiAgICBFbnRpdHlEZWNvZGVyU3RhdGVbRW50aXR5RGVjb2RlclN0YXRlW1wiTnVtZXJpY1N0YXJ0XCJdID0gMV0gPSBcIk51bWVyaWNTdGFydFwiO1xuICAgIEVudGl0eURlY29kZXJTdGF0ZVtFbnRpdHlEZWNvZGVyU3RhdGVbXCJOdW1lcmljRGVjaW1hbFwiXSA9IDJdID0gXCJOdW1lcmljRGVjaW1hbFwiO1xuICAgIEVudGl0eURlY29kZXJTdGF0ZVtFbnRpdHlEZWNvZGVyU3RhdGVbXCJOdW1lcmljSGV4XCJdID0gM10gPSBcIk51bWVyaWNIZXhcIjtcbiAgICBFbnRpdHlEZWNvZGVyU3RhdGVbRW50aXR5RGVjb2RlclN0YXRlW1wiTmFtZWRFbnRpdHlcIl0gPSA0XSA9IFwiTmFtZWRFbnRpdHlcIjtcbn0pKEVudGl0eURlY29kZXJTdGF0ZSB8fCAoRW50aXR5RGVjb2RlclN0YXRlID0ge30pKTtcbmV4cG9ydCB2YXIgRGVjb2RpbmdNb2RlO1xuKGZ1bmN0aW9uIChEZWNvZGluZ01vZGUpIHtcbiAgICAvKiogRW50aXRpZXMgaW4gdGV4dCBub2RlcyB0aGF0IGNhbiBlbmQgd2l0aCBhbnkgY2hhcmFjdGVyLiAqL1xuICAgIERlY29kaW5nTW9kZVtEZWNvZGluZ01vZGVbXCJMZWdhY3lcIl0gPSAwXSA9IFwiTGVnYWN5XCI7XG4gICAgLyoqIE9ubHkgYWxsb3cgZW50aXRpZXMgdGVybWluYXRlZCB3aXRoIGEgc2VtaWNvbG9uLiAqL1xuICAgIERlY29kaW5nTW9kZVtEZWNvZGluZ01vZGVbXCJTdHJpY3RcIl0gPSAxXSA9IFwiU3RyaWN0XCI7XG4gICAgLyoqIEVudGl0aWVzIGluIGF0dHJpYnV0ZXMgaGF2ZSBsaW1pdGF0aW9ucyBvbiBlbmRpbmcgY2hhcmFjdGVycy4gKi9cbiAgICBEZWNvZGluZ01vZGVbRGVjb2RpbmdNb2RlW1wiQXR0cmlidXRlXCJdID0gMl0gPSBcIkF0dHJpYnV0ZVwiO1xufSkoRGVjb2RpbmdNb2RlIHx8IChEZWNvZGluZ01vZGUgPSB7fSkpO1xuLyoqXG4gKiBUb2tlbiBkZWNvZGVyIHdpdGggc3VwcG9ydCBvZiB3cml0aW5nIHBhcnRpYWwgZW50aXRpZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBFbnRpdHlEZWNvZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogVGhlIHRyZWUgdXNlZCB0byBkZWNvZGUgZW50aXRpZXMuICovXG4gICAgZGVjb2RlVHJlZSwgXG4gICAgLyoqXG4gICAgICogVGhlIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gYSBjb2RlcG9pbnQgaXMgZGVjb2RlZC5cbiAgICAgKlxuICAgICAqIEZvciBtdWx0aS1ieXRlIG5hbWVkIGVudGl0aWVzLCB0aGlzIHdpbGwgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzLFxuICAgICAqIHdpdGggdGhlIHNlY29uZCBjb2RlcG9pbnQsIGFuZCB0aGUgc2FtZSBgY29uc3VtZWRgIHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvZGVwb2ludCBUaGUgZGVjb2RlZCBjb2RlcG9pbnQuXG4gICAgICogQHBhcmFtIGNvbnN1bWVkIFRoZSBudW1iZXIgb2YgYnl0ZXMgY29uc3VtZWQgYnkgdGhlIGRlY29kZXIuXG4gICAgICovXG4gICAgZW1pdENvZGVQb2ludCwgXG4gICAgLyoqIEFuIG9iamVjdCB0aGF0IGlzIHVzZWQgdG8gcHJvZHVjZSBlcnJvcnMuICovXG4gICAgZXJyb3JzKSB7XG4gICAgICAgIHRoaXMuZGVjb2RlVHJlZSA9IGRlY29kZVRyZWU7XG4gICAgICAgIHRoaXMuZW1pdENvZGVQb2ludCA9IGVtaXRDb2RlUG9pbnQ7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgICAvKiogVGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGRlY29kZXIuICovXG4gICAgICAgIHRoaXMuc3RhdGUgPSBFbnRpdHlEZWNvZGVyU3RhdGUuRW50aXR5U3RhcnQ7XG4gICAgICAgIC8qKiBDaGFyYWN0ZXJzIHRoYXQgd2VyZSBjb25zdW1lZCB3aGlsZSBwYXJzaW5nIGFuIGVudGl0eS4gKi9cbiAgICAgICAgdGhpcy5jb25zdW1lZCA9IDE7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcmVzdWx0IG9mIHRoZSBlbnRpdHkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEVpdGhlciB0aGUgcmVzdWx0IGluZGV4IG9mIGEgbnVtZXJpYyBlbnRpdHksIG9yIHRoZSBjb2RlcG9pbnQgb2YgYVxuICAgICAgICAgKiBudW1lcmljIGVudGl0eS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVzdWx0ID0gMDtcbiAgICAgICAgLyoqIFRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBkZWNvZGUgdHJlZS4gKi9cbiAgICAgICAgdGhpcy50cmVlSW5kZXggPSAwO1xuICAgICAgICAvKiogVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRoYXQgd2VyZSBjb25zdW1lZCBpbiBleGNlc3MuICovXG4gICAgICAgIHRoaXMuZXhjZXNzID0gMTtcbiAgICAgICAgLyoqIFRoZSBtb2RlIGluIHdoaWNoIHRoZSBkZWNvZGVyIGlzIG9wZXJhdGluZy4gKi9cbiAgICAgICAgdGhpcy5kZWNvZGVNb2RlID0gRGVjb2RpbmdNb2RlLlN0cmljdDtcbiAgICB9XG4gICAgLyoqIFJlc2V0cyB0aGUgaW5zdGFuY2UgdG8gbWFrZSBpdCByZXVzYWJsZS4gKi9cbiAgICBzdGFydEVudGl0eShkZWNvZGVNb2RlKSB7XG4gICAgICAgIHRoaXMuZGVjb2RlTW9kZSA9IGRlY29kZU1vZGU7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBFbnRpdHlEZWNvZGVyU3RhdGUuRW50aXR5U3RhcnQ7XG4gICAgICAgIHRoaXMucmVzdWx0ID0gMDtcbiAgICAgICAgdGhpcy50cmVlSW5kZXggPSAwO1xuICAgICAgICB0aGlzLmV4Y2VzcyA9IDE7XG4gICAgICAgIHRoaXMuY29uc3VtZWQgPSAxO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZSBhbiBlbnRpdHkgdG8gdGhlIGRlY29kZXIuIFRoaXMgY2FuIGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIHBhcnRpYWwgZW50aXRpZXMuXG4gICAgICogSWYgdGhlIGVudGl0eSBpcyBpbmNvbXBsZXRlLCB0aGUgZGVjb2RlciB3aWxsIHJldHVybiAtMS5cbiAgICAgKlxuICAgICAqIE1pcnJvcnMgdGhlIGltcGxlbWVudGF0aW9uIG9mIGBnZXREZWNvZGVyYCwgYnV0IHdpdGggdGhlIGFiaWxpdHkgdG8gc3RvcCBkZWNvZGluZyBpZiB0aGVcbiAgICAgKiBlbnRpdHkgaXMgaW5jb21wbGV0ZSwgYW5kIHJlc3VtZSB3aGVuIHRoZSBuZXh0IHN0cmluZyBpcyB3cml0dGVuLlxuICAgICAqXG4gICAgICogQHBhcmFtIGlucHV0IFRoZSBzdHJpbmcgY29udGFpbmluZyB0aGUgZW50aXR5IChvciBhIGNvbnRpbnVhdGlvbiBvZiB0aGUgZW50aXR5KS5cbiAgICAgKiBAcGFyYW0gb2Zmc2V0IFRoZSBvZmZzZXQgYXQgd2hpY2ggdGhlIGVudGl0eSBiZWdpbnMuIFNob3VsZCBiZSAwIGlmIHRoaXMgaXMgbm90IHRoZSBmaXJzdCBjYWxsLlxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyB0aGF0IHdlcmUgY29uc3VtZWQsIG9yIC0xIGlmIHRoZSBlbnRpdHkgaXMgaW5jb21wbGV0ZS5cbiAgICAgKi9cbiAgICB3cml0ZShpbnB1dCwgb2Zmc2V0KSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5zdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSBFbnRpdHlEZWNvZGVyU3RhdGUuRW50aXR5U3RhcnQ6IHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChvZmZzZXQpID09PSBDaGFyQ29kZXMuTlVNKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBFbnRpdHlEZWNvZGVyU3RhdGUuTnVtZXJpY1N0YXJ0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnN1bWVkICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlTnVtZXJpY1N0YXJ0KGlucHV0LCBvZmZzZXQgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IEVudGl0eURlY29kZXJTdGF0ZS5OYW1lZEVudGl0eTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZU5hbWVkRW50aXR5KGlucHV0LCBvZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBFbnRpdHlEZWNvZGVyU3RhdGUuTnVtZXJpY1N0YXJ0OiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVOdW1lcmljU3RhcnQoaW5wdXQsIG9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEVudGl0eURlY29kZXJTdGF0ZS5OdW1lcmljRGVjaW1hbDoge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlTnVtZXJpY0RlY2ltYWwoaW5wdXQsIG9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEVudGl0eURlY29kZXJTdGF0ZS5OdW1lcmljSGV4OiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVOdW1lcmljSGV4KGlucHV0LCBvZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBFbnRpdHlEZWNvZGVyU3RhdGUuTmFtZWRFbnRpdHk6IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZU5hbWVkRW50aXR5KGlucHV0LCBvZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN3aXRjaGVzIGJldHdlZW4gdGhlIG51bWVyaWMgZGVjaW1hbCBhbmQgaGV4YWRlY2ltYWwgc3RhdGVzLlxuICAgICAqXG4gICAgICogRXF1aXZhbGVudCB0byB0aGUgYE51bWVyaWMgY2hhcmFjdGVyIHJlZmVyZW5jZSBzdGF0ZWAgaW4gdGhlIEhUTUwgc3BlYy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbnB1dCBUaGUgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGVudGl0eSAob3IgYSBjb250aW51YXRpb24gb2YgdGhlIGVudGl0eSkuXG4gICAgICogQHBhcmFtIG9mZnNldCBUaGUgY3VycmVudCBvZmZzZXQuXG4gICAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRoYXQgd2VyZSBjb25zdW1lZCwgb3IgLTEgaWYgdGhlIGVudGl0eSBpcyBpbmNvbXBsZXRlLlxuICAgICAqL1xuICAgIHN0YXRlTnVtZXJpY1N0YXJ0KGlucHV0LCBvZmZzZXQpIHtcbiAgICAgICAgaWYgKG9mZnNldCA+PSBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGlucHV0LmNoYXJDb2RlQXQob2Zmc2V0KSB8IFRPX0xPV0VSX0JJVCkgPT09IENoYXJDb2Rlcy5MT1dFUl9YKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gRW50aXR5RGVjb2RlclN0YXRlLk51bWVyaWNIZXg7XG4gICAgICAgICAgICB0aGlzLmNvbnN1bWVkICs9IDE7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZU51bWVyaWNIZXgoaW5wdXQsIG9mZnNldCArIDEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUgPSBFbnRpdHlEZWNvZGVyU3RhdGUuTnVtZXJpY0RlY2ltYWw7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlTnVtZXJpY0RlY2ltYWwoaW5wdXQsIG9mZnNldCk7XG4gICAgfVxuICAgIGFkZFRvTnVtZXJpY1Jlc3VsdChpbnB1dCwgc3RhcnQsIGVuZCwgYmFzZSkge1xuICAgICAgICBpZiAoc3RhcnQgIT09IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgZGlnaXRDb3VudCA9IGVuZCAtIHN0YXJ0O1xuICAgICAgICAgICAgdGhpcy5yZXN1bHQgPVxuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0ICogTWF0aC5wb3coYmFzZSwgZGlnaXRDb3VudCkgK1xuICAgICAgICAgICAgICAgICAgICBOdW1iZXIucGFyc2VJbnQoaW5wdXQuc3Vic3RyKHN0YXJ0LCBkaWdpdENvdW50KSwgYmFzZSk7XG4gICAgICAgICAgICB0aGlzLmNvbnN1bWVkICs9IGRpZ2l0Q291bnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgaGV4YWRlY2ltYWwgbnVtZXJpYyBlbnRpdHkuXG4gICAgICpcbiAgICAgKiBFcXVpdmFsZW50IHRvIHRoZSBgSGV4YWRlbWljYWwgY2hhcmFjdGVyIHJlZmVyZW5jZSBzdGF0ZWAgaW4gdGhlIEhUTUwgc3BlYy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbnB1dCBUaGUgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGVudGl0eSAob3IgYSBjb250aW51YXRpb24gb2YgdGhlIGVudGl0eSkuXG4gICAgICogQHBhcmFtIG9mZnNldCBUaGUgY3VycmVudCBvZmZzZXQuXG4gICAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRoYXQgd2VyZSBjb25zdW1lZCwgb3IgLTEgaWYgdGhlIGVudGl0eSBpcyBpbmNvbXBsZXRlLlxuICAgICAqL1xuICAgIHN0YXRlTnVtZXJpY0hleChpbnB1dCwgb2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBvZmZzZXQ7XG4gICAgICAgIHdoaWxlIChvZmZzZXQgPCBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYXIgPSBpbnB1dC5jaGFyQ29kZUF0KG9mZnNldCk7XG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoY2hhcikgfHwgaXNIZXhhZGVjaW1hbENoYXJhY3RlcihjaGFyKSkge1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRUb051bWVyaWNSZXN1bHQoaW5wdXQsIHN0YXJ0SW5kZXgsIG9mZnNldCwgMTYpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVtaXROdW1lcmljRW50aXR5KGNoYXIsIDMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRkVG9OdW1lcmljUmVzdWx0KGlucHV0LCBzdGFydEluZGV4LCBvZmZzZXQsIDE2KTtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBkZWNpbWFsIG51bWVyaWMgZW50aXR5LlxuICAgICAqXG4gICAgICogRXF1aXZhbGVudCB0byB0aGUgYERlY2ltYWwgY2hhcmFjdGVyIHJlZmVyZW5jZSBzdGF0ZWAgaW4gdGhlIEhUTUwgc3BlYy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbnB1dCBUaGUgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGVudGl0eSAob3IgYSBjb250aW51YXRpb24gb2YgdGhlIGVudGl0eSkuXG4gICAgICogQHBhcmFtIG9mZnNldCBUaGUgY3VycmVudCBvZmZzZXQuXG4gICAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRoYXQgd2VyZSBjb25zdW1lZCwgb3IgLTEgaWYgdGhlIGVudGl0eSBpcyBpbmNvbXBsZXRlLlxuICAgICAqL1xuICAgIHN0YXRlTnVtZXJpY0RlY2ltYWwoaW5wdXQsIG9mZnNldCkge1xuICAgICAgICBjb25zdCBzdGFydEluZGV4ID0gb2Zmc2V0O1xuICAgICAgICB3aGlsZSAob2Zmc2V0IDwgaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFyID0gaW5wdXQuY2hhckNvZGVBdChvZmZzZXQpO1xuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGNoYXIpKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFRvTnVtZXJpY1Jlc3VsdChpbnB1dCwgc3RhcnRJbmRleCwgb2Zmc2V0LCAxMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdE51bWVyaWNFbnRpdHkoY2hhciwgMik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGRUb051bWVyaWNSZXN1bHQoaW5wdXQsIHN0YXJ0SW5kZXgsIG9mZnNldCwgMTApO1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlIGFuZCBlbWl0IGEgbnVtZXJpYyBlbnRpdHkuXG4gICAgICpcbiAgICAgKiBJbXBsZW1lbnRzIHRoZSBsb2dpYyBmcm9tIHRoZSBgSGV4YWRlbWljYWwgY2hhcmFjdGVyIHJlZmVyZW5jZSBzdGFydFxuICAgICAqIHN0YXRlYCBhbmQgYE51bWVyaWMgY2hhcmFjdGVyIHJlZmVyZW5jZSBlbmQgc3RhdGVgIGluIHRoZSBIVE1MIHNwZWMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGFzdENwIFRoZSBsYXN0IGNvZGUgcG9pbnQgb2YgdGhlIGVudGl0eS4gVXNlZCB0byBzZWUgaWYgdGhlXG4gICAgICogICAgICAgICAgICAgICBlbnRpdHkgd2FzIHRlcm1pbmF0ZWQgd2l0aCBhIHNlbWljb2xvbi5cbiAgICAgKiBAcGFyYW0gZXhwZWN0ZWRMZW5ndGggVGhlIG1pbmltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgdGhhdCBzaG91bGQgYmVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgY29uc3VtZWQuIFVzZWQgdG8gdmFsaWRhdGUgdGhhdCBhdCBsZWFzdCBvbmUgZGlnaXRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgd2FzIGNvbnN1bWVkLlxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyB0aGF0IHdlcmUgY29uc3VtZWQuXG4gICAgICovXG4gICAgZW1pdE51bWVyaWNFbnRpdHkobGFzdENwLCBleHBlY3RlZExlbmd0aCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIC8vIEVuc3VyZSB3ZSBjb25zdW1lZCBhdCBsZWFzdCBvbmUgZGlnaXQuXG4gICAgICAgIGlmICh0aGlzLmNvbnN1bWVkIDw9IGV4cGVjdGVkTGVuZ3RoKSB7XG4gICAgICAgICAgICAoX2EgPSB0aGlzLmVycm9ycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFic2VuY2VPZkRpZ2l0c0luTnVtZXJpY0NoYXJhY3RlclJlZmVyZW5jZSh0aGlzLmNvbnN1bWVkKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZpZ3VyZSBvdXQgaWYgdGhpcyBpcyBhIGxlZ2l0IGVuZCBvZiB0aGUgZW50aXR5XG4gICAgICAgIGlmIChsYXN0Q3AgPT09IENoYXJDb2Rlcy5TRU1JKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnN1bWVkICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kZWNvZGVNb2RlID09PSBEZWNvZGluZ01vZGUuU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXRDb2RlUG9pbnQocmVwbGFjZUNvZGVQb2ludCh0aGlzLnJlc3VsdCksIHRoaXMuY29uc3VtZWQpO1xuICAgICAgICBpZiAodGhpcy5lcnJvcnMpIHtcbiAgICAgICAgICAgIGlmIChsYXN0Q3AgIT09IENoYXJDb2Rlcy5TRU1JKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMubWlzc2luZ1NlbWljb2xvbkFmdGVyQ2hhcmFjdGVyUmVmZXJlbmNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVycm9ycy52YWxpZGF0ZU51bWVyaWNDaGFyYWN0ZXJSZWZlcmVuY2UodGhpcy5yZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN1bWVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBuYW1lZCBlbnRpdHkuXG4gICAgICpcbiAgICAgKiBFcXVpdmFsZW50IHRvIHRoZSBgTmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZSBzdGF0ZWAgaW4gdGhlIEhUTUwgc3BlYy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbnB1dCBUaGUgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGVudGl0eSAob3IgYSBjb250aW51YXRpb24gb2YgdGhlIGVudGl0eSkuXG4gICAgICogQHBhcmFtIG9mZnNldCBUaGUgY3VycmVudCBvZmZzZXQuXG4gICAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRoYXQgd2VyZSBjb25zdW1lZCwgb3IgLTEgaWYgdGhlIGVudGl0eSBpcyBpbmNvbXBsZXRlLlxuICAgICAqL1xuICAgIHN0YXRlTmFtZWRFbnRpdHkoaW5wdXQsIG9mZnNldCkge1xuICAgICAgICBjb25zdCB7IGRlY29kZVRyZWUgfSA9IHRoaXM7XG4gICAgICAgIGxldCBjdXJyZW50ID0gZGVjb2RlVHJlZVt0aGlzLnRyZWVJbmRleF07XG4gICAgICAgIC8vIFRoZSBtYXNrIGlzIHRoZSBudW1iZXIgb2YgYnl0ZXMgb2YgdGhlIHZhbHVlLCBpbmNsdWRpbmcgdGhlIGN1cnJlbnQgYnl0ZS5cbiAgICAgICAgbGV0IHZhbHVlTGVuZ3RoID0gKGN1cnJlbnQgJiBCaW5UcmllRmxhZ3MuVkFMVUVfTEVOR1RIKSA+PiAxNDtcbiAgICAgICAgZm9yICg7IG9mZnNldCA8IGlucHV0Lmxlbmd0aDsgb2Zmc2V0KyssIHRoaXMuZXhjZXNzKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYXIgPSBpbnB1dC5jaGFyQ29kZUF0KG9mZnNldCk7XG4gICAgICAgICAgICB0aGlzLnRyZWVJbmRleCA9IGRldGVybWluZUJyYW5jaChkZWNvZGVUcmVlLCBjdXJyZW50LCB0aGlzLnRyZWVJbmRleCArIE1hdGgubWF4KDEsIHZhbHVlTGVuZ3RoKSwgY2hhcik7XG4gICAgICAgICAgICBpZiAodGhpcy50cmVlSW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzdWx0ID09PSAwIHx8XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIGFyZSBwYXJzaW5nIGFuIGF0dHJpYnV0ZVxuICAgICAgICAgICAgICAgICAgICAodGhpcy5kZWNvZGVNb2RlID09PSBEZWNvZGluZ01vZGUuQXR0cmlidXRlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBzaG91bGRuJ3QgaGF2ZSBjb25zdW1lZCBhbnkgY2hhcmFjdGVycyBhZnRlciB0aGUgZW50aXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgKHZhbHVlTGVuZ3RoID09PSAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW5kIHRoZXJlIHNob3VsZCBiZSBubyBpbnZhbGlkIGNoYXJhY3RlcnMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNFbnRpdHlJbkF0dHJpYnV0ZUludmFsaWRFbmQoY2hhcikpKVxuICAgICAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmVtaXROb3RUZXJtaW5hdGVkTmFtZWRFbnRpdHkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnQgPSBkZWNvZGVUcmVlW3RoaXMudHJlZUluZGV4XTtcbiAgICAgICAgICAgIHZhbHVlTGVuZ3RoID0gKGN1cnJlbnQgJiBCaW5UcmllRmxhZ3MuVkFMVUVfTEVOR1RIKSA+PiAxNDtcbiAgICAgICAgICAgIC8vIElmIHRoZSBicmFuY2ggaXMgYSB2YWx1ZSwgc3RvcmUgaXQgYW5kIGNvbnRpbnVlXG4gICAgICAgICAgICBpZiAodmFsdWVMZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZW50aXR5IGlzIHRlcm1pbmF0ZWQgYnkgYSBzZW1pY29sb24sIHdlIGFyZSBkb25lLlxuICAgICAgICAgICAgICAgIGlmIChjaGFyID09PSBDaGFyQ29kZXMuU0VNSSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbWl0TmFtZWRFbnRpdHlEYXRhKHRoaXMudHJlZUluZGV4LCB2YWx1ZUxlbmd0aCwgdGhpcy5jb25zdW1lZCArIHRoaXMuZXhjZXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgZW5jb3VudGVyIGEgbm9uLXRlcm1pbmF0ZWQgKGxlZ2FjeSkgZW50aXR5IHdoaWxlIHBhcnNpbmcgc3RyaWN0bHksIHRoZW4gaWdub3JlIGl0LlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlY29kZU1vZGUgIT09IERlY29kaW5nTW9kZS5TdHJpY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXN1bHQgPSB0aGlzLnRyZWVJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25zdW1lZCArPSB0aGlzLmV4Y2VzcztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leGNlc3MgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVtaXQgYSBuYW1lZCBlbnRpdHkgdGhhdCB3YXMgbm90IHRlcm1pbmF0ZWQgd2l0aCBhIHNlbWljb2xvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBjb25zdW1lZC5cbiAgICAgKi9cbiAgICBlbWl0Tm90VGVybWluYXRlZE5hbWVkRW50aXR5KCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHsgcmVzdWx0LCBkZWNvZGVUcmVlIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB2YWx1ZUxlbmd0aCA9IChkZWNvZGVUcmVlW3Jlc3VsdF0gJiBCaW5UcmllRmxhZ3MuVkFMVUVfTEVOR1RIKSA+PiAxNDtcbiAgICAgICAgdGhpcy5lbWl0TmFtZWRFbnRpdHlEYXRhKHJlc3VsdCwgdmFsdWVMZW5ndGgsIHRoaXMuY29uc3VtZWQpO1xuICAgICAgICAoX2EgPSB0aGlzLmVycm9ycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1pc3NpbmdTZW1pY29sb25BZnRlckNoYXJhY3RlclJlZmVyZW5jZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5jb25zdW1lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW1pdCBhIG5hbWVkIGVudGl0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZXN1bHQgVGhlIGluZGV4IG9mIHRoZSBlbnRpdHkgaW4gdGhlIGRlY29kZSB0cmVlLlxuICAgICAqIEBwYXJhbSB2YWx1ZUxlbmd0aCBUaGUgbnVtYmVyIG9mIGJ5dGVzIGluIHRoZSBlbnRpdHkuXG4gICAgICogQHBhcmFtIGNvbnN1bWVkIFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBjb25zdW1lZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBjb25zdW1lZC5cbiAgICAgKi9cbiAgICBlbWl0TmFtZWRFbnRpdHlEYXRhKHJlc3VsdCwgdmFsdWVMZW5ndGgsIGNvbnN1bWVkKSB7XG4gICAgICAgIGNvbnN0IHsgZGVjb2RlVHJlZSB9ID0gdGhpcztcbiAgICAgICAgdGhpcy5lbWl0Q29kZVBvaW50KHZhbHVlTGVuZ3RoID09PSAxXG4gICAgICAgICAgICA/IGRlY29kZVRyZWVbcmVzdWx0XSAmIH5CaW5UcmllRmxhZ3MuVkFMVUVfTEVOR1RIXG4gICAgICAgICAgICA6IGRlY29kZVRyZWVbcmVzdWx0ICsgMV0sIGNvbnN1bWVkKTtcbiAgICAgICAgaWYgKHZhbHVlTGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAvLyBGb3IgbXVsdGktYnl0ZSB2YWx1ZXMsIHdlIG5lZWQgdG8gZW1pdCB0aGUgc2Vjb25kIGJ5dGUuXG4gICAgICAgICAgICB0aGlzLmVtaXRDb2RlUG9pbnQoZGVjb2RlVHJlZVtyZXN1bHQgKyAyXSwgY29uc3VtZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25zdW1lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2lnbmFsIHRvIHRoZSBwYXJzZXIgdGhhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCB3YXMgcmVhY2hlZC5cbiAgICAgKlxuICAgICAqIFJlbWFpbmluZyBkYXRhIHdpbGwgYmUgZW1pdHRlZCBhbmQgcmVsZXZhbnQgZXJyb3JzIHdpbGwgYmUgcHJvZHVjZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgY29uc3VtZWQuXG4gICAgICovXG4gICAgZW5kKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHN3aXRjaCAodGhpcy5zdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSBFbnRpdHlEZWNvZGVyU3RhdGUuTmFtZWRFbnRpdHk6IHtcbiAgICAgICAgICAgICAgICAvLyBFbWl0IGEgbmFtZWQgZW50aXR5IGlmIHdlIGhhdmUgb25lLlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc3VsdCAhPT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICAodGhpcy5kZWNvZGVNb2RlICE9PSBEZWNvZGluZ01vZGUuQXR0cmlidXRlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdCA9PT0gdGhpcy50cmVlSW5kZXgpXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5lbWl0Tm90VGVybWluYXRlZE5hbWVkRW50aXR5KClcbiAgICAgICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBlbWl0IGEgbnVtZXJpYyBlbnRpdHkgaWYgd2UgaGF2ZSBvbmUuXG4gICAgICAgICAgICBjYXNlIEVudGl0eURlY29kZXJTdGF0ZS5OdW1lcmljRGVjaW1hbDoge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVtaXROdW1lcmljRW50aXR5KDAsIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBFbnRpdHlEZWNvZGVyU3RhdGUuTnVtZXJpY0hleDoge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVtaXROdW1lcmljRW50aXR5KDAsIDMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBFbnRpdHlEZWNvZGVyU3RhdGUuTnVtZXJpY1N0YXJ0OiB7XG4gICAgICAgICAgICAgICAgKF9hID0gdGhpcy5lcnJvcnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hYnNlbmNlT2ZEaWdpdHNJbk51bWVyaWNDaGFyYWN0ZXJSZWZlcmVuY2UodGhpcy5jb25zdW1lZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEVudGl0eURlY29kZXJTdGF0ZS5FbnRpdHlTdGFydDoge1xuICAgICAgICAgICAgICAgIC8vIFJldHVybiAwIGlmIHdlIGhhdmUgbm8gZW50aXR5LlxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBkZWNvZGVzIGVudGl0aWVzIGluIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSBkZWNvZGVUcmVlIFRoZSBkZWNvZGUgdHJlZS5cbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdGhhdCBkZWNvZGVzIGVudGl0aWVzIGluIGEgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBnZXREZWNvZGVyKGRlY29kZVRyZWUpIHtcbiAgICBsZXQgcmV0dXJuVmFsdWUgPSBcIlwiO1xuICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgRW50aXR5RGVjb2RlcihkZWNvZGVUcmVlLCAoZGF0YSkgPT4gKHJldHVyblZhbHVlICs9IGZyb21Db2RlUG9pbnQoZGF0YSkpKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gZGVjb2RlV2l0aFRyaWUoaW5wdXQsIGRlY29kZU1vZGUpIHtcbiAgICAgICAgbGV0IGxhc3RJbmRleCA9IDA7XG4gICAgICAgIGxldCBvZmZzZXQgPSAwO1xuICAgICAgICB3aGlsZSAoKG9mZnNldCA9IGlucHV0LmluZGV4T2YoXCImXCIsIG9mZnNldCkpID49IDApIHtcbiAgICAgICAgICAgIHJldHVyblZhbHVlICs9IGlucHV0LnNsaWNlKGxhc3RJbmRleCwgb2Zmc2V0KTtcbiAgICAgICAgICAgIGRlY29kZXIuc3RhcnRFbnRpdHkoZGVjb2RlTW9kZSk7XG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBkZWNvZGVyLndyaXRlKGlucHV0LCBcbiAgICAgICAgICAgIC8vIFNraXAgdGhlIFwiJlwiXG4gICAgICAgICAgICBvZmZzZXQgKyAxKTtcbiAgICAgICAgICAgIGlmIChsZW5ndGggPCAwKSB7XG4gICAgICAgICAgICAgICAgbGFzdEluZGV4ID0gb2Zmc2V0ICsgZGVjb2Rlci5lbmQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RJbmRleCA9IG9mZnNldCArIGxlbmd0aDtcbiAgICAgICAgICAgIC8vIElmIGBsZW5ndGhgIGlzIDAsIHNraXAgdGhlIGN1cnJlbnQgYCZgIGFuZCBjb250aW51ZS5cbiAgICAgICAgICAgIG9mZnNldCA9IGxlbmd0aCA9PT0gMCA/IGxhc3RJbmRleCArIDEgOiBsYXN0SW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmV0dXJuVmFsdWUgKyBpbnB1dC5zbGljZShsYXN0SW5kZXgpO1xuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgZG9uJ3Qga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgZmluYWwgc3RyaW5nLlxuICAgICAgICByZXR1cm5WYWx1ZSA9IFwiXCI7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyB0aGUgYnJhbmNoIG9mIHRoZSBjdXJyZW50IG5vZGUgdGhhdCBpcyB0YWtlbiBnaXZlbiB0aGUgY3VycmVudFxuICogY2hhcmFjdGVyLiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gdHJhdmVyc2UgdGhlIHRyaWUuXG4gKlxuICogQHBhcmFtIGRlY29kZVRyZWUgVGhlIHRyaWUuXG4gKiBAcGFyYW0gY3VycmVudCBUaGUgY3VycmVudCBub2RlLlxuICogQHBhcmFtIG5vZGVJZHggVGhlIGluZGV4IHJpZ2h0IGFmdGVyIHRoZSBjdXJyZW50IG5vZGUgYW5kIGl0cyB2YWx1ZS5cbiAqIEBwYXJhbSBjaGFyIFRoZSBjdXJyZW50IGNoYXJhY3Rlci5cbiAqIEByZXR1cm5zIFRoZSBpbmRleCBvZiB0aGUgbmV4dCBub2RlLCBvciAtMSBpZiBubyBicmFuY2ggaXMgdGFrZW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXRlcm1pbmVCcmFuY2goZGVjb2RlVHJlZSwgY3VycmVudCwgbm9kZUluZGV4LCBjaGFyKSB7XG4gICAgY29uc3QgYnJhbmNoQ291bnQgPSAoY3VycmVudCAmIEJpblRyaWVGbGFncy5CUkFOQ0hfTEVOR1RIKSA+PiA3O1xuICAgIGNvbnN0IGp1bXBPZmZzZXQgPSBjdXJyZW50ICYgQmluVHJpZUZsYWdzLkpVTVBfVEFCTEU7XG4gICAgLy8gQ2FzZSAxOiBTaW5nbGUgYnJhbmNoIGVuY29kZWQgaW4ganVtcCBvZmZzZXRcbiAgICBpZiAoYnJhbmNoQ291bnQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGp1bXBPZmZzZXQgIT09IDAgJiYgY2hhciA9PT0ganVtcE9mZnNldCA/IG5vZGVJbmRleCA6IC0xO1xuICAgIH1cbiAgICAvLyBDYXNlIDI6IE11bHRpcGxlIGJyYW5jaGVzIGVuY29kZWQgaW4ganVtcCB0YWJsZVxuICAgIGlmIChqdW1wT2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gY2hhciAtIGp1bXBPZmZzZXQ7XG4gICAgICAgIHJldHVybiB2YWx1ZSA8IDAgfHwgdmFsdWUgPj0gYnJhbmNoQ291bnRcbiAgICAgICAgICAgID8gLTFcbiAgICAgICAgICAgIDogZGVjb2RlVHJlZVtub2RlSW5kZXggKyB2YWx1ZV0gLSAxO1xuICAgIH1cbiAgICAvLyBDYXNlIDM6IE11bHRpcGxlIGJyYW5jaGVzIGVuY29kZWQgaW4gZGljdGlvbmFyeVxuICAgIC8vIEJpbmFyeSBzZWFyY2ggZm9yIHRoZSBjaGFyYWN0ZXIuXG4gICAgbGV0IGxvID0gbm9kZUluZGV4O1xuICAgIGxldCBoaSA9IGxvICsgYnJhbmNoQ291bnQgLSAxO1xuICAgIHdoaWxlIChsbyA8PSBoaSkge1xuICAgICAgICBjb25zdCBtaWQgPSAobG8gKyBoaSkgPj4+IDE7XG4gICAgICAgIGNvbnN0IG1pZFZhbHVlID0gZGVjb2RlVHJlZVttaWRdO1xuICAgICAgICBpZiAobWlkVmFsdWUgPCBjaGFyKSB7XG4gICAgICAgICAgICBsbyA9IG1pZCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWlkVmFsdWUgPiBjaGFyKSB7XG4gICAgICAgICAgICBoaSA9IG1pZCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGVjb2RlVHJlZVttaWQgKyBicmFuY2hDb3VudF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuY29uc3QgaHRtbERlY29kZXIgPSAvKiAjX19QVVJFX18gKi8gZ2V0RGVjb2RlcihodG1sRGVjb2RlVHJlZSk7XG5jb25zdCB4bWxEZWNvZGVyID0gLyogI19fUFVSRV9fICovIGdldERlY29kZXIoeG1sRGVjb2RlVHJlZSk7XG4vKipcbiAqIERlY29kZXMgYW4gSFRNTCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIGh0bWxTdHJpbmcgVGhlIHN0cmluZyB0byBkZWNvZGUuXG4gKiBAcGFyYW0gbW9kZSBUaGUgZGVjb2RpbmcgbW9kZS5cbiAqIEByZXR1cm5zIFRoZSBkZWNvZGVkIHN0cmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUhUTUwoaHRtbFN0cmluZywgbW9kZSA9IERlY29kaW5nTW9kZS5MZWdhY3kpIHtcbiAgICByZXR1cm4gaHRtbERlY29kZXIoaHRtbFN0cmluZywgbW9kZSk7XG59XG4vKipcbiAqIERlY29kZXMgYW4gSFRNTCBzdHJpbmcgaW4gYW4gYXR0cmlidXRlLlxuICpcbiAqIEBwYXJhbSBodG1sQXR0cmlidXRlIFRoZSBzdHJpbmcgdG8gZGVjb2RlLlxuICogQHJldHVybnMgVGhlIGRlY29kZWQgc3RyaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlSFRNTEF0dHJpYnV0ZShodG1sQXR0cmlidXRlKSB7XG4gICAgcmV0dXJuIGh0bWxEZWNvZGVyKGh0bWxBdHRyaWJ1dGUsIERlY29kaW5nTW9kZS5BdHRyaWJ1dGUpO1xufVxuLyoqXG4gKiBEZWNvZGVzIGFuIEhUTUwgc3RyaW5nLCByZXF1aXJpbmcgYWxsIGVudGl0aWVzIHRvIGJlIHRlcm1pbmF0ZWQgYnkgYSBzZW1pY29sb24uXG4gKlxuICogQHBhcmFtIGh0bWxTdHJpbmcgVGhlIHN0cmluZyB0byBkZWNvZGUuXG4gKiBAcmV0dXJucyBUaGUgZGVjb2RlZCBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVIVE1MU3RyaWN0KGh0bWxTdHJpbmcpIHtcbiAgICByZXR1cm4gaHRtbERlY29kZXIoaHRtbFN0cmluZywgRGVjb2RpbmdNb2RlLlN0cmljdCk7XG59XG4vKipcbiAqIERlY29kZXMgYW4gWE1MIHN0cmluZywgcmVxdWlyaW5nIGFsbCBlbnRpdGllcyB0byBiZSB0ZXJtaW5hdGVkIGJ5IGEgc2VtaWNvbG9uLlxuICpcbiAqIEBwYXJhbSB4bWxTdHJpbmcgVGhlIHN0cmluZyB0byBkZWNvZGUuXG4gKiBAcmV0dXJucyBUaGUgZGVjb2RlZCBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVYTUwoeG1sU3RyaW5nKSB7XG4gICAgcmV0dXJuIHhtbERlY29kZXIoeG1sU3RyaW5nLCBEZWNvZGluZ01vZGUuU3RyaWN0KTtcbn1cbi8vIFJlLWV4cG9ydCBmb3IgdXNlIGJ5IGVnLiBodG1scGFyc2VyMlxuZXhwb3J0IHsgaHRtbERlY29kZVRyZWUgfSBmcm9tIFwiLi9nZW5lcmF0ZWQvZGVjb2RlLWRhdGEtaHRtbC5qc1wiO1xuZXhwb3J0IHsgeG1sRGVjb2RlVHJlZSB9IGZyb20gXCIuL2dlbmVyYXRlZC9kZWNvZGUtZGF0YS14bWwuanNcIjtcbmV4cG9ydCB7IGRlY29kZUNvZGVQb2ludCwgcmVwbGFjZUNvZGVQb2ludCwgZnJvbUNvZGVQb2ludCwgfSBmcm9tIFwiLi9kZWNvZGUtY29kZXBvaW50LmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvZGUuanMubWFwIiwiaW1wb3J0IHsgRW50aXR5RGVjb2RlciwgRGVjb2RpbmdNb2RlLCBodG1sRGVjb2RlVHJlZSwgeG1sRGVjb2RlVHJlZSwgfSBmcm9tIFwiZW50aXRpZXMvZGVjb2RlXCI7XG52YXIgQ2hhckNvZGVzO1xuKGZ1bmN0aW9uIChDaGFyQ29kZXMpIHtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiVGFiXCJdID0gOV0gPSBcIlRhYlwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJOZXdMaW5lXCJdID0gMTBdID0gXCJOZXdMaW5lXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkZvcm1GZWVkXCJdID0gMTJdID0gXCJGb3JtRmVlZFwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJDYXJyaWFnZVJldHVyblwiXSA9IDEzXSA9IFwiQ2FycmlhZ2VSZXR1cm5cIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiU3BhY2VcIl0gPSAzMl0gPSBcIlNwYWNlXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkV4Y2xhbWF0aW9uTWFya1wiXSA9IDMzXSA9IFwiRXhjbGFtYXRpb25NYXJrXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIk51bWJlclwiXSA9IDM1XSA9IFwiTnVtYmVyXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkFtcFwiXSA9IDM4XSA9IFwiQW1wXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIlNpbmdsZVF1b3RlXCJdID0gMzldID0gXCJTaW5nbGVRdW90ZVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJEb3VibGVRdW90ZVwiXSA9IDM0XSA9IFwiRG91YmxlUXVvdGVcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiRGFzaFwiXSA9IDQ1XSA9IFwiRGFzaFwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJTbGFzaFwiXSA9IDQ3XSA9IFwiU2xhc2hcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiWmVyb1wiXSA9IDQ4XSA9IFwiWmVyb1wiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJOaW5lXCJdID0gNTddID0gXCJOaW5lXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIlNlbWlcIl0gPSA1OV0gPSBcIlNlbWlcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiTHRcIl0gPSA2MF0gPSBcIkx0XCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkVxXCJdID0gNjFdID0gXCJFcVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJHdFwiXSA9IDYyXSA9IFwiR3RcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiUXVlc3Rpb25tYXJrXCJdID0gNjNdID0gXCJRdWVzdGlvbm1hcmtcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiVXBwZXJBXCJdID0gNjVdID0gXCJVcHBlckFcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiTG93ZXJBXCJdID0gOTddID0gXCJMb3dlckFcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiVXBwZXJGXCJdID0gNzBdID0gXCJVcHBlckZcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiTG93ZXJGXCJdID0gMTAyXSA9IFwiTG93ZXJGXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIlVwcGVyWlwiXSA9IDkwXSA9IFwiVXBwZXJaXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkxvd2VyWlwiXSA9IDEyMl0gPSBcIkxvd2VyWlwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJMb3dlclhcIl0gPSAxMjBdID0gXCJMb3dlclhcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiT3BlbmluZ1NxdWFyZUJyYWNrZXRcIl0gPSA5MV0gPSBcIk9wZW5pbmdTcXVhcmVCcmFja2V0XCI7XG59KShDaGFyQ29kZXMgfHwgKENoYXJDb2RlcyA9IHt9KSk7XG4vKiogQWxsIHRoZSBzdGF0ZXMgdGhlIHRva2VuaXplciBjYW4gYmUgaW4uICovXG52YXIgU3RhdGU7XG4oZnVuY3Rpb24gKFN0YXRlKSB7XG4gICAgU3RhdGVbU3RhdGVbXCJUZXh0XCJdID0gMV0gPSBcIlRleHRcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkJlZm9yZVRhZ05hbWVcIl0gPSAyXSA9IFwiQmVmb3JlVGFnTmFtZVwiO1xuICAgIFN0YXRlW1N0YXRlW1wiSW5UYWdOYW1lXCJdID0gM10gPSBcIkluVGFnTmFtZVwiO1xuICAgIFN0YXRlW1N0YXRlW1wiSW5TZWxmQ2xvc2luZ1RhZ1wiXSA9IDRdID0gXCJJblNlbGZDbG9zaW5nVGFnXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJCZWZvcmVDbG9zaW5nVGFnTmFtZVwiXSA9IDVdID0gXCJCZWZvcmVDbG9zaW5nVGFnTmFtZVwiO1xuICAgIFN0YXRlW1N0YXRlW1wiSW5DbG9zaW5nVGFnTmFtZVwiXSA9IDZdID0gXCJJbkNsb3NpbmdUYWdOYW1lXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJBZnRlckNsb3NpbmdUYWdOYW1lXCJdID0gN10gPSBcIkFmdGVyQ2xvc2luZ1RhZ05hbWVcIjtcbiAgICAvLyBBdHRyaWJ1dGVzXG4gICAgU3RhdGVbU3RhdGVbXCJCZWZvcmVBdHRyaWJ1dGVOYW1lXCJdID0gOF0gPSBcIkJlZm9yZUF0dHJpYnV0ZU5hbWVcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkluQXR0cmlidXRlTmFtZVwiXSA9IDldID0gXCJJbkF0dHJpYnV0ZU5hbWVcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkFmdGVyQXR0cmlidXRlTmFtZVwiXSA9IDEwXSA9IFwiQWZ0ZXJBdHRyaWJ1dGVOYW1lXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJCZWZvcmVBdHRyaWJ1dGVWYWx1ZVwiXSA9IDExXSA9IFwiQmVmb3JlQXR0cmlidXRlVmFsdWVcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkluQXR0cmlidXRlVmFsdWVEcVwiXSA9IDEyXSA9IFwiSW5BdHRyaWJ1dGVWYWx1ZURxXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJJbkF0dHJpYnV0ZVZhbHVlU3FcIl0gPSAxM10gPSBcIkluQXR0cmlidXRlVmFsdWVTcVwiO1xuICAgIFN0YXRlW1N0YXRlW1wiSW5BdHRyaWJ1dGVWYWx1ZU5xXCJdID0gMTRdID0gXCJJbkF0dHJpYnV0ZVZhbHVlTnFcIjtcbiAgICAvLyBEZWNsYXJhdGlvbnNcbiAgICBTdGF0ZVtTdGF0ZVtcIkJlZm9yZURlY2xhcmF0aW9uXCJdID0gMTVdID0gXCJCZWZvcmVEZWNsYXJhdGlvblwiO1xuICAgIFN0YXRlW1N0YXRlW1wiSW5EZWNsYXJhdGlvblwiXSA9IDE2XSA9IFwiSW5EZWNsYXJhdGlvblwiO1xuICAgIC8vIFByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb25zXG4gICAgU3RhdGVbU3RhdGVbXCJJblByb2Nlc3NpbmdJbnN0cnVjdGlvblwiXSA9IDE3XSA9IFwiSW5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb25cIjtcbiAgICAvLyBDb21tZW50cyAmIENEQVRBXG4gICAgU3RhdGVbU3RhdGVbXCJCZWZvcmVDb21tZW50XCJdID0gMThdID0gXCJCZWZvcmVDb21tZW50XCI7XG4gICAgU3RhdGVbU3RhdGVbXCJDREFUQVNlcXVlbmNlXCJdID0gMTldID0gXCJDREFUQVNlcXVlbmNlXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJJblNwZWNpYWxDb21tZW50XCJdID0gMjBdID0gXCJJblNwZWNpYWxDb21tZW50XCI7XG4gICAgU3RhdGVbU3RhdGVbXCJJbkNvbW1lbnRMaWtlXCJdID0gMjFdID0gXCJJbkNvbW1lbnRMaWtlXCI7XG4gICAgLy8gU3BlY2lhbCB0YWdzXG4gICAgU3RhdGVbU3RhdGVbXCJCZWZvcmVTcGVjaWFsU1wiXSA9IDIyXSA9IFwiQmVmb3JlU3BlY2lhbFNcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkJlZm9yZVNwZWNpYWxUXCJdID0gMjNdID0gXCJCZWZvcmVTcGVjaWFsVFwiO1xuICAgIFN0YXRlW1N0YXRlW1wiU3BlY2lhbFN0YXJ0U2VxdWVuY2VcIl0gPSAyNF0gPSBcIlNwZWNpYWxTdGFydFNlcXVlbmNlXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJJblNwZWNpYWxUYWdcIl0gPSAyNV0gPSBcIkluU3BlY2lhbFRhZ1wiO1xuICAgIFN0YXRlW1N0YXRlW1wiSW5FbnRpdHlcIl0gPSAyNl0gPSBcIkluRW50aXR5XCI7XG59KShTdGF0ZSB8fCAoU3RhdGUgPSB7fSkpO1xuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlKGMpIHtcbiAgICByZXR1cm4gKGMgPT09IENoYXJDb2Rlcy5TcGFjZSB8fFxuICAgICAgICBjID09PSBDaGFyQ29kZXMuTmV3TGluZSB8fFxuICAgICAgICBjID09PSBDaGFyQ29kZXMuVGFiIHx8XG4gICAgICAgIGMgPT09IENoYXJDb2Rlcy5Gb3JtRmVlZCB8fFxuICAgICAgICBjID09PSBDaGFyQ29kZXMuQ2FycmlhZ2VSZXR1cm4pO1xufVxuZnVuY3Rpb24gaXNFbmRPZlRhZ1NlY3Rpb24oYykge1xuICAgIHJldHVybiBjID09PSBDaGFyQ29kZXMuU2xhc2ggfHwgYyA9PT0gQ2hhckNvZGVzLkd0IHx8IGlzV2hpdGVzcGFjZShjKTtcbn1cbmZ1bmN0aW9uIGlzQVNDSUlBbHBoYShjKSB7XG4gICAgcmV0dXJuICgoYyA+PSBDaGFyQ29kZXMuTG93ZXJBICYmIGMgPD0gQ2hhckNvZGVzLkxvd2VyWikgfHxcbiAgICAgICAgKGMgPj0gQ2hhckNvZGVzLlVwcGVyQSAmJiBjIDw9IENoYXJDb2Rlcy5VcHBlclopKTtcbn1cbmV4cG9ydCB2YXIgUXVvdGVUeXBlO1xuKGZ1bmN0aW9uIChRdW90ZVR5cGUpIHtcbiAgICBRdW90ZVR5cGVbUXVvdGVUeXBlW1wiTm9WYWx1ZVwiXSA9IDBdID0gXCJOb1ZhbHVlXCI7XG4gICAgUXVvdGVUeXBlW1F1b3RlVHlwZVtcIlVucXVvdGVkXCJdID0gMV0gPSBcIlVucXVvdGVkXCI7XG4gICAgUXVvdGVUeXBlW1F1b3RlVHlwZVtcIlNpbmdsZVwiXSA9IDJdID0gXCJTaW5nbGVcIjtcbiAgICBRdW90ZVR5cGVbUXVvdGVUeXBlW1wiRG91YmxlXCJdID0gM10gPSBcIkRvdWJsZVwiO1xufSkoUXVvdGVUeXBlIHx8IChRdW90ZVR5cGUgPSB7fSkpO1xuLyoqXG4gKiBTZXF1ZW5jZXMgdXNlZCB0byBtYXRjaCBsb25nZXIgc3RyaW5ncy5cbiAqXG4gKiBXZSBkb24ndCBoYXZlIGBTY3JpcHRgLCBgU3R5bGVgLCBvciBgVGl0bGVgIGhlcmUuIEluc3RlYWQsIHdlIHJlLXVzZSB0aGUgKkVuZFxuICogc2VxdWVuY2VzIHdpdGggYW4gaW5jcmVhc2VkIG9mZnNldC5cbiAqL1xuY29uc3QgU2VxdWVuY2VzID0ge1xuICAgIENkYXRhOiBuZXcgVWludDhBcnJheShbMHg0MywgMHg0NCwgMHg0MSwgMHg1NCwgMHg0MSwgMHg1Yl0pLCAvLyBDREFUQVtcbiAgICBDZGF0YUVuZDogbmV3IFVpbnQ4QXJyYXkoWzB4NWQsIDB4NWQsIDB4M2VdKSwgLy8gXV0+XG4gICAgQ29tbWVudEVuZDogbmV3IFVpbnQ4QXJyYXkoWzB4MmQsIDB4MmQsIDB4M2VdKSwgLy8gYC0tPmBcbiAgICBTY3JpcHRFbmQ6IG5ldyBVaW50OEFycmF5KFsweDNjLCAweDJmLCAweDczLCAweDYzLCAweDcyLCAweDY5LCAweDcwLCAweDc0XSksIC8vIGA8L3NjcmlwdGBcbiAgICBTdHlsZUVuZDogbmV3IFVpbnQ4QXJyYXkoWzB4M2MsIDB4MmYsIDB4NzMsIDB4NzQsIDB4NzksIDB4NmMsIDB4NjVdKSwgLy8gYDwvc3R5bGVgXG4gICAgVGl0bGVFbmQ6IG5ldyBVaW50OEFycmF5KFsweDNjLCAweDJmLCAweDc0LCAweDY5LCAweDc0LCAweDZjLCAweDY1XSksIC8vIGA8L3RpdGxlYFxuICAgIFRleHRhcmVhRW5kOiBuZXcgVWludDhBcnJheShbXG4gICAgICAgIDB4M2MsIDB4MmYsIDB4NzQsIDB4NjUsIDB4NzgsIDB4NzQsIDB4NjEsIDB4NzIsIDB4NjUsIDB4NjEsXG4gICAgXSksIC8vIGA8L3RleHRhcmVhYFxuICAgIFhtcEVuZDogbmV3IFVpbnQ4QXJyYXkoWzB4M2MsIDB4MmYsIDB4NzgsIDB4NmQsIDB4NzBdKSwgLy8gYDwveG1wYFxufTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRva2VuaXplciB7XG4gICAgY29uc3RydWN0b3IoeyB4bWxNb2RlID0gZmFsc2UsIGRlY29kZUVudGl0aWVzID0gdHJ1ZSwgfSwgY2JzKSB7XG4gICAgICAgIHRoaXMuY2JzID0gY2JzO1xuICAgICAgICAvKiogVGhlIGN1cnJlbnQgc3RhdGUgdGhlIHRva2VuaXplciBpcyBpbi4gKi9cbiAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlRleHQ7XG4gICAgICAgIC8qKiBUaGUgcmVhZCBidWZmZXIuICovXG4gICAgICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcbiAgICAgICAgLyoqIFRoZSBiZWdpbm5pbmcgb2YgdGhlIHNlY3Rpb24gdGhhdCBpcyBjdXJyZW50bHkgYmVpbmcgcmVhZC4gKi9cbiAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSAwO1xuICAgICAgICAvKiogVGhlIGluZGV4IHdpdGhpbiB0aGUgYnVmZmVyIHRoYXQgd2UgYXJlIGN1cnJlbnRseSBsb29raW5nIGF0LiAqL1xuICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICAgICAgLyoqIFRoZSBzdGFydCBvZiB0aGUgbGFzdCBlbnRpdHkuICovXG4gICAgICAgIHRoaXMuZW50aXR5U3RhcnQgPSAwO1xuICAgICAgICAvKiogU29tZSBiZWhhdmlvciwgZWcuIHdoZW4gZGVjb2RpbmcgZW50aXRpZXMsIGlzIGRvbmUgd2hpbGUgd2UgYXJlIGluIGFub3RoZXIgc3RhdGUuIFRoaXMga2VlcHMgdHJhY2sgb2YgdGhlIG90aGVyIHN0YXRlIHR5cGUuICovXG4gICAgICAgIHRoaXMuYmFzZVN0YXRlID0gU3RhdGUuVGV4dDtcbiAgICAgICAgLyoqIEZvciBzcGVjaWFsIHBhcnNpbmcgYmVoYXZpb3IgaW5zaWRlIG9mIHNjcmlwdCBhbmQgc3R5bGUgdGFncy4gKi9cbiAgICAgICAgdGhpcy5pc1NwZWNpYWwgPSBmYWxzZTtcbiAgICAgICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIHRoZSB0b2tlbml6ZXIgaGFzIGJlZW4gcGF1c2VkLiAqL1xuICAgICAgICB0aGlzLnJ1bm5pbmcgPSB0cnVlO1xuICAgICAgICAvKiogVGhlIG9mZnNldCBvZiB0aGUgY3VycmVudCBidWZmZXIuICovXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy5jdXJyZW50U2VxdWVuY2UgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc2VxdWVuY2VJbmRleCA9IDA7XG4gICAgICAgIHRoaXMueG1sTW9kZSA9IHhtbE1vZGU7XG4gICAgICAgIHRoaXMuZGVjb2RlRW50aXRpZXMgPSBkZWNvZGVFbnRpdGllcztcbiAgICAgICAgdGhpcy5lbnRpdHlEZWNvZGVyID0gbmV3IEVudGl0eURlY29kZXIoeG1sTW9kZSA/IHhtbERlY29kZVRyZWUgOiBodG1sRGVjb2RlVHJlZSwgKGNwLCBjb25zdW1lZCkgPT4gdGhpcy5lbWl0Q29kZVBvaW50KGNwLCBjb25zdW1lZCkpO1xuICAgIH1cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlRleHQ7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcbiAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSAwO1xuICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5iYXNlU3RhdGUgPSBTdGF0ZS5UZXh0O1xuICAgICAgICB0aGlzLmN1cnJlbnRTZXF1ZW5jZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgIH1cbiAgICB3cml0ZShjaHVuaykge1xuICAgICAgICB0aGlzLm9mZnNldCArPSB0aGlzLmJ1ZmZlci5sZW5ndGg7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gY2h1bms7XG4gICAgICAgIHRoaXMucGFyc2UoKTtcbiAgICB9XG4gICAgZW5kKCkge1xuICAgICAgICBpZiAodGhpcy5ydW5uaW5nKVxuICAgICAgICAgICAgdGhpcy5maW5pc2goKTtcbiAgICB9XG4gICAgcGF1c2UoKSB7XG4gICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xuICAgIH1cbiAgICByZXN1bWUoKSB7XG4gICAgICAgIHRoaXMucnVubmluZyA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLmluZGV4IDwgdGhpcy5idWZmZXIubGVuZ3RoICsgdGhpcy5vZmZzZXQpIHtcbiAgICAgICAgICAgIHRoaXMucGFyc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0ZVRleHQoYykge1xuICAgICAgICBpZiAoYyA9PT0gQ2hhckNvZGVzLkx0IHx8XG4gICAgICAgICAgICAoIXRoaXMuZGVjb2RlRW50aXRpZXMgJiYgdGhpcy5mYXN0Rm9yd2FyZFRvKENoYXJDb2Rlcy5MdCkpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pbmRleCA+IHRoaXMuc2VjdGlvblN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYnMub250ZXh0KHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5CZWZvcmVUYWdOYW1lO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGVjb2RlRW50aXRpZXMgJiYgYyA9PT0gQ2hhckNvZGVzLkFtcCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydEVudGl0eSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRlU3BlY2lhbFN0YXJ0U2VxdWVuY2UoYykge1xuICAgICAgICBjb25zdCBpc0VuZCA9IHRoaXMuc2VxdWVuY2VJbmRleCA9PT0gdGhpcy5jdXJyZW50U2VxdWVuY2UubGVuZ3RoO1xuICAgICAgICBjb25zdCBpc01hdGNoID0gaXNFbmRcbiAgICAgICAgICAgID8gLy8gSWYgd2UgYXJlIGF0IHRoZSBlbmQgb2YgdGhlIHNlcXVlbmNlLCBtYWtlIHN1cmUgdGhlIHRhZyBuYW1lIGhhcyBlbmRlZFxuICAgICAgICAgICAgICAgIGlzRW5kT2ZUYWdTZWN0aW9uKGMpXG4gICAgICAgICAgICA6IC8vIE90aGVyd2lzZSwgZG8gYSBjYXNlLWluc2Vuc2l0aXZlIGNvbXBhcmlzb25cbiAgICAgICAgICAgICAgICAoYyB8IDB4MjApID09PSB0aGlzLmN1cnJlbnRTZXF1ZW5jZVt0aGlzLnNlcXVlbmNlSW5kZXhdO1xuICAgICAgICBpZiAoIWlzTWF0Y2gpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTcGVjaWFsID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWlzRW5kKSB7XG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlSW5kZXgrKztcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlcXVlbmNlSW5kZXggPSAwO1xuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSW5UYWdOYW1lO1xuICAgICAgICB0aGlzLnN0YXRlSW5UYWdOYW1lKGMpO1xuICAgIH1cbiAgICAvKiogTG9vayBmb3IgYW4gZW5kIHRhZy4gRm9yIDx0aXRsZT4gdGFncywgYWxzbyBkZWNvZGUgZW50aXRpZXMuICovXG4gICAgc3RhdGVJblNwZWNpYWxUYWcoYykge1xuICAgICAgICBpZiAodGhpcy5zZXF1ZW5jZUluZGV4ID09PSB0aGlzLmN1cnJlbnRTZXF1ZW5jZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChjID09PSBDaGFyQ29kZXMuR3QgfHwgaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5kT2ZUZXh0ID0gdGhpcy5pbmRleCAtIHRoaXMuY3VycmVudFNlcXVlbmNlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWN0aW9uU3RhcnQgPCBlbmRPZlRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3Bvb2YgdGhlIGluZGV4IHNvIHRoYXQgcmVwb3J0ZWQgbG9jYXRpb25zIG1hdGNoIHVwLlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3R1YWxJbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggPSBlbmRPZlRleHQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2JzLm9udGV4dCh0aGlzLnNlY3Rpb25TdGFydCwgZW5kT2ZUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IGFjdHVhbEluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmlzU3BlY2lhbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gZW5kT2ZUZXh0ICsgMjsgLy8gU2tpcCBvdmVyIHRoZSBgPC9gXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluQ2xvc2luZ1RhZ05hbWUoYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBXZSBhcmUgZG9uZTsgc2tpcCB0aGUgcmVzdCBvZiB0aGUgZnVuY3Rpb24uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlSW5kZXggPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoYyB8IDB4MjApID09PSB0aGlzLmN1cnJlbnRTZXF1ZW5jZVt0aGlzLnNlcXVlbmNlSW5kZXhdKSB7XG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlSW5kZXggKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnNlcXVlbmNlSW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRTZXF1ZW5jZSA9PT0gU2VxdWVuY2VzLlRpdGxlRW5kKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byBwYXJzZSBlbnRpdGllcyBpbiA8dGl0bGU+IHRhZ3MuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVjb2RlRW50aXRpZXMgJiYgYyA9PT0gQ2hhckNvZGVzLkFtcCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0RW50aXR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5mYXN0Rm9yd2FyZFRvKENoYXJDb2Rlcy5MdCkpIHtcbiAgICAgICAgICAgICAgICAvLyBPdXRzaWRlIG9mIDx0aXRsZT4gdGFncywgd2UgY2FuIGZhc3QtZm9yd2FyZC5cbiAgICAgICAgICAgICAgICB0aGlzLnNlcXVlbmNlSW5kZXggPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gSWYgd2Ugc2VlIGEgYDxgLCBzZXQgdGhlIHNlcXVlbmNlIGluZGV4IHRvIDE7IHVzZWZ1bCBmb3IgZWcuIGA8PC9zY3JpcHQ+YC5cbiAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VJbmRleCA9IE51bWJlcihjID09PSBDaGFyQ29kZXMuTHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRlQ0RBVEFTZXF1ZW5jZShjKSB7XG4gICAgICAgIGlmIChjID09PSBTZXF1ZW5jZXMuQ2RhdGFbdGhpcy5zZXF1ZW5jZUluZGV4XSkge1xuICAgICAgICAgICAgaWYgKCsrdGhpcy5zZXF1ZW5jZUluZGV4ID09PSBTZXF1ZW5jZXMuQ2RhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkluQ29tbWVudExpa2U7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50U2VxdWVuY2UgPSBTZXF1ZW5jZXMuQ2RhdGFFbmQ7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZUluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZUluZGV4ID0gMDtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JbkRlY2xhcmF0aW9uO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZUluRGVjbGFyYXRpb24oYyk7IC8vIFJlY29uc3VtZSB0aGUgY2hhcmFjdGVyXG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hlbiB3ZSB3YWl0IGZvciBvbmUgc3BlY2lmaWMgY2hhcmFjdGVyLCB3ZSBjYW4gc3BlZWQgdGhpbmdzIHVwXG4gICAgICogYnkgc2tpcHBpbmcgdGhyb3VnaCB0aGUgYnVmZmVyIHVudGlsIHdlIGZpbmQgaXQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIHRoZSBjaGFyYWN0ZXIgd2FzIGZvdW5kLlxuICAgICAqL1xuICAgIGZhc3RGb3J3YXJkVG8oYykge1xuICAgICAgICB3aGlsZSAoKyt0aGlzLmluZGV4IDwgdGhpcy5idWZmZXIubGVuZ3RoICsgdGhpcy5vZmZzZXQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmJ1ZmZlci5jaGFyQ29kZUF0KHRoaXMuaW5kZXggLSB0aGlzLm9mZnNldCkgPT09IGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKlxuICAgICAgICAgKiBXZSBpbmNyZW1lbnQgdGhlIGluZGV4IGF0IHRoZSBlbmQgb2YgdGhlIGBwYXJzZWAgbG9vcCxcbiAgICAgICAgICogc28gc2V0IGl0IHRvIGBidWZmZXIubGVuZ3RoIC0gMWAgaGVyZS5cbiAgICAgICAgICpcbiAgICAgICAgICogVE9ETzogUmVmYWN0b3IgYHBhcnNlYCB0byBpbmNyZW1lbnQgaW5kZXggYmVmb3JlIGNhbGxpbmcgc3RhdGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pbmRleCA9IHRoaXMuYnVmZmVyLmxlbmd0aCArIHRoaXMub2Zmc2V0IC0gMTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21tZW50cyBhbmQgQ0RBVEEgZW5kIHdpdGggYC0tPmAgYW5kIGBdXT5gLlxuICAgICAqXG4gICAgICogVGhlaXIgY29tbW9uIHF1YWxpdGllcyBhcmU6XG4gICAgICogLSBUaGVpciBlbmQgc2VxdWVuY2VzIGhhdmUgYSBkaXN0aW5jdCBjaGFyYWN0ZXIgdGhleSBzdGFydCB3aXRoLlxuICAgICAqIC0gVGhhdCBjaGFyYWN0ZXIgaXMgdGhlbiByZXBlYXRlZCwgc28gd2UgaGF2ZSB0byBjaGVjayBtdWx0aXBsZSByZXBlYXRzLlxuICAgICAqIC0gQWxsIGNoYXJhY3RlcnMgYnV0IHRoZSBzdGFydCBjaGFyYWN0ZXIgb2YgdGhlIHNlcXVlbmNlIGNhbiBiZSBza2lwcGVkLlxuICAgICAqL1xuICAgIHN0YXRlSW5Db21tZW50TGlrZShjKSB7XG4gICAgICAgIGlmIChjID09PSB0aGlzLmN1cnJlbnRTZXF1ZW5jZVt0aGlzLnNlcXVlbmNlSW5kZXhdKSB7XG4gICAgICAgICAgICBpZiAoKyt0aGlzLnNlcXVlbmNlSW5kZXggPT09IHRoaXMuY3VycmVudFNlcXVlbmNlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRTZXF1ZW5jZSA9PT0gU2VxdWVuY2VzLkNkYXRhRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2JzLm9uY2RhdGEodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgsIDIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYnMub25jb21tZW50KHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4LCAyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZUluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5UZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc2VxdWVuY2VJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gRmFzdC1mb3J3YXJkIHRvIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgdGhlIHNlcXVlbmNlXG4gICAgICAgICAgICBpZiAodGhpcy5mYXN0Rm9yd2FyZFRvKHRoaXMuY3VycmVudFNlcXVlbmNlWzBdKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VJbmRleCA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyAhPT0gdGhpcy5jdXJyZW50U2VxdWVuY2VbdGhpcy5zZXF1ZW5jZUluZGV4IC0gMV0pIHtcbiAgICAgICAgICAgIC8vIEFsbG93IGxvbmcgc2VxdWVuY2VzLCBlZy4gLS0tPiwgXV1dPlxuICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZUluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBIVE1MIG9ubHkgYWxsb3dzIEFTQ0lJIGFscGhhIGNoYXJhY3RlcnMgKGEteiBhbmQgQS1aKSBhdCB0aGUgYmVnaW5uaW5nIG9mIGEgdGFnIG5hbWUuXG4gICAgICpcbiAgICAgKiBYTUwgYWxsb3dzIGEgbG90IG1vcmUgY2hhcmFjdGVycyBoZXJlIChAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9SRUMteG1sLyNOVC1OYW1lU3RhcnRDaGFyKS5cbiAgICAgKiBXZSBhbGxvdyBhbnl0aGluZyB0aGF0IHdvdWxkbid0IGVuZCB0aGUgdGFnLlxuICAgICAqL1xuICAgIGlzVGFnU3RhcnRDaGFyKGMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueG1sTW9kZSA/ICFpc0VuZE9mVGFnU2VjdGlvbihjKSA6IGlzQVNDSUlBbHBoYShjKTtcbiAgICB9XG4gICAgc3RhcnRTcGVjaWFsKHNlcXVlbmNlLCBvZmZzZXQpIHtcbiAgICAgICAgdGhpcy5pc1NwZWNpYWwgPSB0cnVlO1xuICAgICAgICB0aGlzLmN1cnJlbnRTZXF1ZW5jZSA9IHNlcXVlbmNlO1xuICAgICAgICB0aGlzLnNlcXVlbmNlSW5kZXggPSBvZmZzZXQ7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TcGVjaWFsU3RhcnRTZXF1ZW5jZTtcbiAgICB9XG4gICAgc3RhdGVCZWZvcmVUYWdOYW1lKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IENoYXJDb2Rlcy5FeGNsYW1hdGlvbk1hcmspIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5CZWZvcmVEZWNsYXJhdGlvbjtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gQ2hhckNvZGVzLlF1ZXN0aW9ubWFyaykge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkluUHJvY2Vzc2luZ0luc3RydWN0aW9uO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmlzVGFnU3RhcnRDaGFyKGMpKSB7XG4gICAgICAgICAgICBjb25zdCBsb3dlciA9IGMgfCAweDIwO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4O1xuICAgICAgICAgICAgaWYgKHRoaXMueG1sTW9kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JblRhZ05hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChsb3dlciA9PT0gU2VxdWVuY2VzLlNjcmlwdEVuZFsyXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5CZWZvcmVTcGVjaWFsUztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGxvd2VyID09PSBTZXF1ZW5jZXMuVGl0bGVFbmRbMl0gfHxcbiAgICAgICAgICAgICAgICBsb3dlciA9PT0gU2VxdWVuY2VzLlhtcEVuZFsyXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5CZWZvcmVTcGVjaWFsVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JblRhZ05hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gQ2hhckNvZGVzLlNsYXNoKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQmVmb3JlQ2xvc2luZ1RhZ05hbWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuVGV4dDtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVUZXh0KGMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRlSW5UYWdOYW1lKGMpIHtcbiAgICAgICAgaWYgKGlzRW5kT2ZUYWdTZWN0aW9uKGMpKSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbm9wZW50YWduYW1lKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gLTE7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQmVmb3JlQXR0cmlidXRlTmFtZTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVBdHRyaWJ1dGVOYW1lKGMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRlQmVmb3JlQ2xvc2luZ1RhZ05hbWUoYykge1xuICAgICAgICBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICAvLyBJZ25vcmVcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBDaGFyQ29kZXMuR3QpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5UZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuaXNUYWdTdGFydENoYXIoYylcbiAgICAgICAgICAgICAgICA/IFN0YXRlLkluQ2xvc2luZ1RhZ05hbWVcbiAgICAgICAgICAgICAgICA6IFN0YXRlLkluU3BlY2lhbENvbW1lbnQ7XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGVJbkNsb3NpbmdUYWdOYW1lKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IENoYXJDb2Rlcy5HdCB8fCBpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uY2xvc2V0YWcodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSAtMTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5BZnRlckNsb3NpbmdUYWdOYW1lO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZUFmdGVyQ2xvc2luZ1RhZ05hbWUoYyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGVBZnRlckNsb3NpbmdUYWdOYW1lKGMpIHtcbiAgICAgICAgLy8gU2tpcCBldmVyeXRoaW5nIHVudGlsIFwiPlwiXG4gICAgICAgIGlmIChjID09PSBDaGFyQ29kZXMuR3QgfHwgdGhpcy5mYXN0Rm9yd2FyZFRvKENoYXJDb2Rlcy5HdCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5UZXh0O1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0ZUJlZm9yZUF0dHJpYnV0ZU5hbWUoYykge1xuICAgICAgICBpZiAoYyA9PT0gQ2hhckNvZGVzLkd0KSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbm9wZW50YWdlbmQodGhpcy5pbmRleCk7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1NwZWNpYWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSW5TcGVjaWFsVGFnO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VJbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuVGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gQ2hhckNvZGVzLlNsYXNoKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSW5TZWxmQ2xvc2luZ1RhZztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSW5BdHRyaWJ1dGVOYW1lO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4O1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRlSW5TZWxmQ2xvc2luZ1RhZyhjKSB7XG4gICAgICAgIGlmIChjID09PSBDaGFyQ29kZXMuR3QpIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uc2VsZmNsb3Npbmd0YWcodGhpcy5pbmRleCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuVGV4dDtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgICAgICAgICB0aGlzLmlzU3BlY2lhbCA9IGZhbHNlOyAvLyBSZXNldCBzcGVjaWFsIHN0YXRlLCBpbiBjYXNlIG9mIHNlbGYtY2xvc2luZyBzcGVjaWFsIHRhZ3NcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQmVmb3JlQXR0cmlidXRlTmFtZTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVBdHRyaWJ1dGVOYW1lKGMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRlSW5BdHRyaWJ1dGVOYW1lKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IENoYXJDb2Rlcy5FcSB8fCBpc0VuZE9mVGFnU2VjdGlvbihjKSkge1xuICAgICAgICAgICAgdGhpcy5jYnMub25hdHRyaWJuYW1lKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5BZnRlckF0dHJpYnV0ZU5hbWU7XG4gICAgICAgICAgICB0aGlzLnN0YXRlQWZ0ZXJBdHRyaWJ1dGVOYW1lKGMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRlQWZ0ZXJBdHRyaWJ1dGVOYW1lKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IENoYXJDb2Rlcy5FcSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkJlZm9yZUF0dHJpYnV0ZVZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IENoYXJDb2Rlcy5TbGFzaCB8fCBjID09PSBDaGFyQ29kZXMuR3QpIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uYXR0cmliZW5kKFF1b3RlVHlwZS5Ob1ZhbHVlLCB0aGlzLnNlY3Rpb25TdGFydCk7XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IC0xO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkJlZm9yZUF0dHJpYnV0ZU5hbWU7XG4gICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlQXR0cmlidXRlTmFtZShjKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbmF0dHJpYmVuZChRdW90ZVR5cGUuTm9WYWx1ZSwgdGhpcy5zZWN0aW9uU3RhcnQpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkluQXR0cmlidXRlTmFtZTtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0ZUJlZm9yZUF0dHJpYnV0ZVZhbHVlKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IENoYXJDb2Rlcy5Eb3VibGVRdW90ZSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkluQXR0cmlidXRlVmFsdWVEcTtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gQ2hhckNvZGVzLlNpbmdsZVF1b3RlKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSW5BdHRyaWJ1dGVWYWx1ZVNxO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSW5BdHRyaWJ1dGVWYWx1ZU5xO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZUluQXR0cmlidXRlVmFsdWVOb1F1b3RlcyhjKTsgLy8gUmVjb25zdW1lIHRva2VuXG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlSW5BdHRyaWJ1dGVWYWx1ZShjLCBxdW90ZSkge1xuICAgICAgICBpZiAoYyA9PT0gcXVvdGUgfHxcbiAgICAgICAgICAgICghdGhpcy5kZWNvZGVFbnRpdGllcyAmJiB0aGlzLmZhc3RGb3J3YXJkVG8ocXVvdGUpKSkge1xuICAgICAgICAgICAgdGhpcy5jYnMub25hdHRyaWJkYXRhKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gLTE7XG4gICAgICAgICAgICB0aGlzLmNicy5vbmF0dHJpYmVuZChxdW90ZSA9PT0gQ2hhckNvZGVzLkRvdWJsZVF1b3RlXG4gICAgICAgICAgICAgICAgPyBRdW90ZVR5cGUuRG91YmxlXG4gICAgICAgICAgICAgICAgOiBRdW90ZVR5cGUuU2luZ2xlLCB0aGlzLmluZGV4ICsgMSk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQmVmb3JlQXR0cmlidXRlTmFtZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmRlY29kZUVudGl0aWVzICYmIGMgPT09IENoYXJDb2Rlcy5BbXApIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRFbnRpdHkoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0ZUluQXR0cmlidXRlVmFsdWVEb3VibGVRdW90ZXMoYykge1xuICAgICAgICB0aGlzLmhhbmRsZUluQXR0cmlidXRlVmFsdWUoYywgQ2hhckNvZGVzLkRvdWJsZVF1b3RlKTtcbiAgICB9XG4gICAgc3RhdGVJbkF0dHJpYnV0ZVZhbHVlU2luZ2xlUXVvdGVzKGMpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVJbkF0dHJpYnV0ZVZhbHVlKGMsIENoYXJDb2Rlcy5TaW5nbGVRdW90ZSk7XG4gICAgfVxuICAgIHN0YXRlSW5BdHRyaWJ1dGVWYWx1ZU5vUXVvdGVzKGMpIHtcbiAgICAgICAgaWYgKGlzV2hpdGVzcGFjZShjKSB8fCBjID09PSBDaGFyQ29kZXMuR3QpIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uYXR0cmliZGF0YSh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5pbmRleCk7XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IC0xO1xuICAgICAgICAgICAgdGhpcy5jYnMub25hdHRyaWJlbmQoUXVvdGVUeXBlLlVucXVvdGVkLCB0aGlzLmluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5CZWZvcmVBdHRyaWJ1dGVOYW1lO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZUF0dHJpYnV0ZU5hbWUoYyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kZWNvZGVFbnRpdGllcyAmJiBjID09PSBDaGFyQ29kZXMuQW1wKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0RW50aXR5KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGVCZWZvcmVEZWNsYXJhdGlvbihjKSB7XG4gICAgICAgIGlmIChjID09PSBDaGFyQ29kZXMuT3BlbmluZ1NxdWFyZUJyYWNrZXQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5DREFUQVNlcXVlbmNlO1xuICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZUluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPVxuICAgICAgICAgICAgICAgIGMgPT09IENoYXJDb2Rlcy5EYXNoXG4gICAgICAgICAgICAgICAgICAgID8gU3RhdGUuQmVmb3JlQ29tbWVudFxuICAgICAgICAgICAgICAgICAgICA6IFN0YXRlLkluRGVjbGFyYXRpb247XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGVJbkRlY2xhcmF0aW9uKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IENoYXJDb2Rlcy5HdCB8fCB0aGlzLmZhc3RGb3J3YXJkVG8oQ2hhckNvZGVzLkd0KSkge1xuICAgICAgICAgICAgdGhpcy5jYnMub25kZWNsYXJhdGlvbih0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5pbmRleCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuVGV4dDtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGVJblByb2Nlc3NpbmdJbnN0cnVjdGlvbihjKSB7XG4gICAgICAgIGlmIChjID09PSBDaGFyQ29kZXMuR3QgfHwgdGhpcy5mYXN0Rm9yd2FyZFRvKENoYXJDb2Rlcy5HdCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5UZXh0O1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0ZUJlZm9yZUNvbW1lbnQoYykge1xuICAgICAgICBpZiAoYyA9PT0gQ2hhckNvZGVzLkRhc2gpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JbkNvbW1lbnRMaWtlO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50U2VxdWVuY2UgPSBTZXF1ZW5jZXMuQ29tbWVudEVuZDtcbiAgICAgICAgICAgIC8vIEFsbG93IHNob3J0IGNvbW1lbnRzIChlZy4gPCEtLT4pXG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlSW5kZXggPSAyO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JbkRlY2xhcmF0aW9uO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRlSW5TcGVjaWFsQ29tbWVudChjKSB7XG4gICAgICAgIGlmIChjID09PSBDaGFyQ29kZXMuR3QgfHwgdGhpcy5mYXN0Rm9yd2FyZFRvKENoYXJDb2Rlcy5HdCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uY29tbWVudCh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5pbmRleCwgMCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuVGV4dDtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGVCZWZvcmVTcGVjaWFsUyhjKSB7XG4gICAgICAgIGNvbnN0IGxvd2VyID0gYyB8IDB4MjA7XG4gICAgICAgIGlmIChsb3dlciA9PT0gU2VxdWVuY2VzLlNjcmlwdEVuZFszXSkge1xuICAgICAgICAgICAgdGhpcy5zdGFydFNwZWNpYWwoU2VxdWVuY2VzLlNjcmlwdEVuZCwgNCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobG93ZXIgPT09IFNlcXVlbmNlcy5TdHlsZUVuZFszXSkge1xuICAgICAgICAgICAgdGhpcy5zdGFydFNwZWNpYWwoU2VxdWVuY2VzLlN0eWxlRW5kLCA0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JblRhZ05hbWU7XG4gICAgICAgICAgICB0aGlzLnN0YXRlSW5UYWdOYW1lKGMpOyAvLyBDb25zdW1lIHRoZSB0b2tlbiBhZ2FpblxuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRlQmVmb3JlU3BlY2lhbFQoYykge1xuICAgICAgICBjb25zdCBsb3dlciA9IGMgfCAweDIwO1xuICAgICAgICBzd2l0Y2ggKGxvd2VyKSB7XG4gICAgICAgICAgICBjYXNlIFNlcXVlbmNlcy5UaXRsZUVuZFszXToge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRTcGVjaWFsKFNlcXVlbmNlcy5UaXRsZUVuZCwgNCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFNlcXVlbmNlcy5UZXh0YXJlYUVuZFszXToge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRTcGVjaWFsKFNlcXVlbmNlcy5UZXh0YXJlYUVuZCwgNCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFNlcXVlbmNlcy5YbXBFbmRbM106IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0U3BlY2lhbChTZXF1ZW5jZXMuWG1wRW5kLCA0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSW5UYWdOYW1lO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJblRhZ05hbWUoYyk7IC8vIENvbnN1bWUgdGhlIHRva2VuIGFnYWluXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhcnRFbnRpdHkoKSB7XG4gICAgICAgIHRoaXMuYmFzZVN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkluRW50aXR5O1xuICAgICAgICB0aGlzLmVudGl0eVN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICAgICAgdGhpcy5lbnRpdHlEZWNvZGVyLnN0YXJ0RW50aXR5KHRoaXMueG1sTW9kZVxuICAgICAgICAgICAgPyBEZWNvZGluZ01vZGUuU3RyaWN0XG4gICAgICAgICAgICA6IHRoaXMuYmFzZVN0YXRlID09PSBTdGF0ZS5UZXh0IHx8XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlU3RhdGUgPT09IFN0YXRlLkluU3BlY2lhbFRhZ1xuICAgICAgICAgICAgICAgID8gRGVjb2RpbmdNb2RlLkxlZ2FjeVxuICAgICAgICAgICAgICAgIDogRGVjb2RpbmdNb2RlLkF0dHJpYnV0ZSk7XG4gICAgfVxuICAgIHN0YXRlSW5FbnRpdHkoKSB7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMuZW50aXR5RGVjb2Rlci53cml0ZSh0aGlzLmJ1ZmZlciwgdGhpcy5pbmRleCAtIHRoaXMub2Zmc2V0KTtcbiAgICAgICAgLy8gSWYgYGxlbmd0aGAgaXMgcG9zaXRpdmUsIHdlIGFyZSBkb25lIHdpdGggdGhlIGVudGl0eS5cbiAgICAgICAgaWYgKGxlbmd0aCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5iYXNlU3RhdGU7XG4gICAgICAgICAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IHRoaXMuZW50aXR5U3RhcnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBNYXJrIGJ1ZmZlciBhcyBjb25zdW1lZC5cbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSB0aGlzLm9mZnNldCArIHRoaXMuYnVmZmVyLmxlbmd0aCAtIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGRhdGEgdGhhdCBoYXMgYWxyZWFkeSBiZWVuIGNvbnN1bWVkIGZyb20gdGhlIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBjbGVhbnVwKCkge1xuICAgICAgICAvLyBJZiB3ZSBhcmUgaW5zaWRlIG9mIHRleHQgb3IgYXR0cmlidXRlcywgZW1pdCB3aGF0IHdlIGFscmVhZHkgaGF2ZS5cbiAgICAgICAgaWYgKHRoaXMucnVubmluZyAmJiB0aGlzLnNlY3Rpb25TdGFydCAhPT0gdGhpcy5pbmRleCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IFN0YXRlLlRleHQgfHxcbiAgICAgICAgICAgICAgICAodGhpcy5zdGF0ZSA9PT0gU3RhdGUuSW5TcGVjaWFsVGFnICYmIHRoaXMuc2VxdWVuY2VJbmRleCA9PT0gMCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNicy5vbnRleHQodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09IFN0YXRlLkluQXR0cmlidXRlVmFsdWVEcSB8fFxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPT09IFN0YXRlLkluQXR0cmlidXRlVmFsdWVTcSB8fFxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPT09IFN0YXRlLkluQXR0cmlidXRlVmFsdWVOcSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2JzLm9uYXR0cmliZGF0YSh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5pbmRleCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHNob3VsZENvbnRpbnVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleCA8IHRoaXMuYnVmZmVyLmxlbmd0aCArIHRoaXMub2Zmc2V0ICYmIHRoaXMucnVubmluZztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgdGhyb3VnaCB0aGUgYnVmZmVyLCBjYWxsaW5nIHRoZSBmdW5jdGlvbiBjb3JyZXNwb25kaW5nIHRvIHRoZSBjdXJyZW50IHN0YXRlLlxuICAgICAqXG4gICAgICogU3RhdGVzIHRoYXQgYXJlIG1vcmUgbGlrZWx5IHRvIGJlIGhpdCBhcmUgaGlnaGVyIHVwLCBhcyBhIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50LlxuICAgICAqL1xuICAgIHBhcnNlKCkge1xuICAgICAgICB3aGlsZSAodGhpcy5zaG91bGRDb250aW51ZSgpKSB7XG4gICAgICAgICAgICBjb25zdCBjID0gdGhpcy5idWZmZXIuY2hhckNvZGVBdCh0aGlzLmluZGV4IC0gdGhpcy5vZmZzZXQpO1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5UZXh0OiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVUZXh0KGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5TcGVjaWFsU3RhcnRTZXF1ZW5jZToge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlU3BlY2lhbFN0YXJ0U2VxdWVuY2UoYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFN0YXRlLkluU3BlY2lhbFRhZzoge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5TcGVjaWFsVGFnKGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5DREFUQVNlcXVlbmNlOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVDREFUQVNlcXVlbmNlKGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5JbkF0dHJpYnV0ZVZhbHVlRHE6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluQXR0cmlidXRlVmFsdWVEb3VibGVRdW90ZXMoYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFN0YXRlLkluQXR0cmlidXRlTmFtZToge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5BdHRyaWJ1dGVOYW1lKGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5JbkNvbW1lbnRMaWtlOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJbkNvbW1lbnRMaWtlKGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5JblNwZWNpYWxDb21tZW50OiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJblNwZWNpYWxDb21tZW50KGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5CZWZvcmVBdHRyaWJ1dGVOYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVBdHRyaWJ1dGVOYW1lKGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5JblRhZ05hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluVGFnTmFtZShjKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgU3RhdGUuSW5DbG9zaW5nVGFnTmFtZToge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5DbG9zaW5nVGFnTmFtZShjKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgU3RhdGUuQmVmb3JlVGFnTmFtZToge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlVGFnTmFtZShjKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgU3RhdGUuQWZ0ZXJBdHRyaWJ1dGVOYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVBZnRlckF0dHJpYnV0ZU5hbWUoYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFN0YXRlLkluQXR0cmlidXRlVmFsdWVTcToge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5BdHRyaWJ1dGVWYWx1ZVNpbmdsZVF1b3RlcyhjKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgU3RhdGUuQmVmb3JlQXR0cmlidXRlVmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZUF0dHJpYnV0ZVZhbHVlKGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5CZWZvcmVDbG9zaW5nVGFnTmFtZToge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlQ2xvc2luZ1RhZ05hbWUoYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFN0YXRlLkFmdGVyQ2xvc2luZ1RhZ05hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUFmdGVyQ2xvc2luZ1RhZ05hbWUoYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFN0YXRlLkJlZm9yZVNwZWNpYWxTOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVTcGVjaWFsUyhjKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgU3RhdGUuQmVmb3JlU3BlY2lhbFQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZVNwZWNpYWxUKGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5JbkF0dHJpYnV0ZVZhbHVlTnE6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluQXR0cmlidXRlVmFsdWVOb1F1b3RlcyhjKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgU3RhdGUuSW5TZWxmQ2xvc2luZ1RhZzoge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5TZWxmQ2xvc2luZ1RhZyhjKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgU3RhdGUuSW5EZWNsYXJhdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5EZWNsYXJhdGlvbihjKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgU3RhdGUuQmVmb3JlRGVjbGFyYXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZURlY2xhcmF0aW9uKGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5CZWZvcmVDb21tZW50OiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVDb21tZW50KGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5JblByb2Nlc3NpbmdJbnN0cnVjdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24oYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFN0YXRlLkluRW50aXR5OiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJbkVudGl0eSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbGVhbnVwKCk7XG4gICAgfVxuICAgIGZpbmlzaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IFN0YXRlLkluRW50aXR5KSB7XG4gICAgICAgICAgICB0aGlzLmVudGl0eURlY29kZXIuZW5kKCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5iYXNlU3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oYW5kbGVUcmFpbGluZ0RhdGEoKTtcbiAgICAgICAgdGhpcy5jYnMub25lbmQoKTtcbiAgICB9XG4gICAgLyoqIEhhbmRsZSBhbnkgdHJhaWxpbmcgZGF0YS4gKi9cbiAgICBoYW5kbGVUcmFpbGluZ0RhdGEoKSB7XG4gICAgICAgIGNvbnN0IGVuZEluZGV4ID0gdGhpcy5idWZmZXIubGVuZ3RoICsgdGhpcy5vZmZzZXQ7XG4gICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIHJlbWFpbmluZyBkYXRhLCB3ZSBhcmUgZG9uZS5cbiAgICAgICAgaWYgKHRoaXMuc2VjdGlvblN0YXJ0ID49IGVuZEluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IFN0YXRlLkluQ29tbWVudExpa2UpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRTZXF1ZW5jZSA9PT0gU2VxdWVuY2VzLkNkYXRhRW5kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYnMub25jZGF0YSh0aGlzLnNlY3Rpb25TdGFydCwgZW5kSW5kZXgsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYnMub25jb21tZW50KHRoaXMuc2VjdGlvblN0YXJ0LCBlbmRJbmRleCwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5zdGF0ZSA9PT0gU3RhdGUuSW5UYWdOYW1lIHx8XG4gICAgICAgICAgICB0aGlzLnN0YXRlID09PSBTdGF0ZS5CZWZvcmVBdHRyaWJ1dGVOYW1lIHx8XG4gICAgICAgICAgICB0aGlzLnN0YXRlID09PSBTdGF0ZS5CZWZvcmVBdHRyaWJ1dGVWYWx1ZSB8fFxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9PT0gU3RhdGUuQWZ0ZXJBdHRyaWJ1dGVOYW1lIHx8XG4gICAgICAgICAgICB0aGlzLnN0YXRlID09PSBTdGF0ZS5JbkF0dHJpYnV0ZU5hbWUgfHxcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPT09IFN0YXRlLkluQXR0cmlidXRlVmFsdWVTcSB8fFxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9PT0gU3RhdGUuSW5BdHRyaWJ1dGVWYWx1ZURxIHx8XG4gICAgICAgICAgICB0aGlzLnN0YXRlID09PSBTdGF0ZS5JbkF0dHJpYnV0ZVZhbHVlTnEgfHxcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPT09IFN0YXRlLkluQ2xvc2luZ1RhZ05hbWUpIHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBJZiB3ZSBhcmUgY3VycmVudGx5IGluIGFuIG9wZW5pbmcgb3IgY2xvc2luZyB0YWcsIHVzIG5vdCBjYWxsaW5nIHRoZVxuICAgICAgICAgICAgICogcmVzcGVjdGl2ZSBjYWxsYmFjayBzaWduYWxzIHRoYXQgdGhlIHRhZyBzaG91bGQgYmUgaWdub3JlZC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYnMub250ZXh0KHRoaXMuc2VjdGlvblN0YXJ0LCBlbmRJbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW1pdENvZGVQb2ludChjcCwgY29uc3VtZWQpIHtcbiAgICAgICAgaWYgKHRoaXMuYmFzZVN0YXRlICE9PSBTdGF0ZS5UZXh0ICYmXG4gICAgICAgICAgICB0aGlzLmJhc2VTdGF0ZSAhPT0gU3RhdGUuSW5TcGVjaWFsVGFnKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZWN0aW9uU3RhcnQgPCB0aGlzLmVudGl0eVN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYnMub25hdHRyaWJkYXRhKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmVudGl0eVN0YXJ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5lbnRpdHlTdGFydCArIGNvbnN1bWVkO1xuICAgICAgICAgICAgdGhpcy5pbmRleCA9IHRoaXMuc2VjdGlvblN0YXJ0IC0gMTtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uYXR0cmliZW50aXR5KGNwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNlY3Rpb25TdGFydCA8IHRoaXMuZW50aXR5U3RhcnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNicy5vbnRleHQodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuZW50aXR5U3RhcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmVudGl0eVN0YXJ0ICsgY29uc3VtZWQ7XG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gdGhpcy5zZWN0aW9uU3RhcnQgLSAxO1xuICAgICAgICAgICAgdGhpcy5jYnMub250ZXh0ZW50aXR5KGNwLCB0aGlzLnNlY3Rpb25TdGFydCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ub2tlbml6ZXIuanMubWFwIiwiaW1wb3J0IFRva2VuaXplciwgeyBRdW90ZVR5cGUgfSBmcm9tIFwiLi9Ub2tlbml6ZXIuanNcIjtcbmltcG9ydCB7IGZyb21Db2RlUG9pbnQgfSBmcm9tIFwiZW50aXRpZXMvZGVjb2RlXCI7XG5jb25zdCBmb3JtVGFncyA9IG5ldyBTZXQoW1xuICAgIFwiaW5wdXRcIixcbiAgICBcIm9wdGlvblwiLFxuICAgIFwib3B0Z3JvdXBcIixcbiAgICBcInNlbGVjdFwiLFxuICAgIFwiYnV0dG9uXCIsXG4gICAgXCJkYXRhbGlzdFwiLFxuICAgIFwidGV4dGFyZWFcIixcbl0pO1xuY29uc3QgcFRhZyA9IG5ldyBTZXQoW1wicFwiXSk7XG5jb25zdCB0YWJsZVNlY3Rpb25UYWdzID0gbmV3IFNldChbXCJ0aGVhZFwiLCBcInRib2R5XCJdKTtcbmNvbnN0IGRkdFRhZ3MgPSBuZXcgU2V0KFtcImRkXCIsIFwiZHRcIl0pO1xuY29uc3QgcnRwVGFncyA9IG5ldyBTZXQoW1wicnRcIiwgXCJycFwiXSk7XG5jb25zdCBvcGVuSW1wbGllc0Nsb3NlID0gbmV3IE1hcChbXG4gICAgW1widHJcIiwgbmV3IFNldChbXCJ0clwiLCBcInRoXCIsIFwidGRcIl0pXSxcbiAgICBbXCJ0aFwiLCBuZXcgU2V0KFtcInRoXCJdKV0sXG4gICAgW1widGRcIiwgbmV3IFNldChbXCJ0aGVhZFwiLCBcInRoXCIsIFwidGRcIl0pXSxcbiAgICBbXCJib2R5XCIsIG5ldyBTZXQoW1wiaGVhZFwiLCBcImxpbmtcIiwgXCJzY3JpcHRcIl0pXSxcbiAgICBbXCJsaVwiLCBuZXcgU2V0KFtcImxpXCJdKV0sXG4gICAgW1wicFwiLCBwVGFnXSxcbiAgICBbXCJoMVwiLCBwVGFnXSxcbiAgICBbXCJoMlwiLCBwVGFnXSxcbiAgICBbXCJoM1wiLCBwVGFnXSxcbiAgICBbXCJoNFwiLCBwVGFnXSxcbiAgICBbXCJoNVwiLCBwVGFnXSxcbiAgICBbXCJoNlwiLCBwVGFnXSxcbiAgICBbXCJzZWxlY3RcIiwgZm9ybVRhZ3NdLFxuICAgIFtcImlucHV0XCIsIGZvcm1UYWdzXSxcbiAgICBbXCJvdXRwdXRcIiwgZm9ybVRhZ3NdLFxuICAgIFtcImJ1dHRvblwiLCBmb3JtVGFnc10sXG4gICAgW1wiZGF0YWxpc3RcIiwgZm9ybVRhZ3NdLFxuICAgIFtcInRleHRhcmVhXCIsIGZvcm1UYWdzXSxcbiAgICBbXCJvcHRpb25cIiwgbmV3IFNldChbXCJvcHRpb25cIl0pXSxcbiAgICBbXCJvcHRncm91cFwiLCBuZXcgU2V0KFtcIm9wdGdyb3VwXCIsIFwib3B0aW9uXCJdKV0sXG4gICAgW1wiZGRcIiwgZGR0VGFnc10sXG4gICAgW1wiZHRcIiwgZGR0VGFnc10sXG4gICAgW1wiYWRkcmVzc1wiLCBwVGFnXSxcbiAgICBbXCJhcnRpY2xlXCIsIHBUYWddLFxuICAgIFtcImFzaWRlXCIsIHBUYWddLFxuICAgIFtcImJsb2NrcXVvdGVcIiwgcFRhZ10sXG4gICAgW1wiZGV0YWlsc1wiLCBwVGFnXSxcbiAgICBbXCJkaXZcIiwgcFRhZ10sXG4gICAgW1wiZGxcIiwgcFRhZ10sXG4gICAgW1wiZmllbGRzZXRcIiwgcFRhZ10sXG4gICAgW1wiZmlnY2FwdGlvblwiLCBwVGFnXSxcbiAgICBbXCJmaWd1cmVcIiwgcFRhZ10sXG4gICAgW1wiZm9vdGVyXCIsIHBUYWddLFxuICAgIFtcImZvcm1cIiwgcFRhZ10sXG4gICAgW1wiaGVhZGVyXCIsIHBUYWddLFxuICAgIFtcImhyXCIsIHBUYWddLFxuICAgIFtcIm1haW5cIiwgcFRhZ10sXG4gICAgW1wibmF2XCIsIHBUYWddLFxuICAgIFtcIm9sXCIsIHBUYWddLFxuICAgIFtcInByZVwiLCBwVGFnXSxcbiAgICBbXCJzZWN0aW9uXCIsIHBUYWddLFxuICAgIFtcInRhYmxlXCIsIHBUYWddLFxuICAgIFtcInVsXCIsIHBUYWddLFxuICAgIFtcInJ0XCIsIHJ0cFRhZ3NdLFxuICAgIFtcInJwXCIsIHJ0cFRhZ3NdLFxuICAgIFtcInRib2R5XCIsIHRhYmxlU2VjdGlvblRhZ3NdLFxuICAgIFtcInRmb290XCIsIHRhYmxlU2VjdGlvblRhZ3NdLFxuXSk7XG5jb25zdCB2b2lkRWxlbWVudHMgPSBuZXcgU2V0KFtcbiAgICBcImFyZWFcIixcbiAgICBcImJhc2VcIixcbiAgICBcImJhc2Vmb250XCIsXG4gICAgXCJiclwiLFxuICAgIFwiY29sXCIsXG4gICAgXCJjb21tYW5kXCIsXG4gICAgXCJlbWJlZFwiLFxuICAgIFwiZnJhbWVcIixcbiAgICBcImhyXCIsXG4gICAgXCJpbWdcIixcbiAgICBcImlucHV0XCIsXG4gICAgXCJpc2luZGV4XCIsXG4gICAgXCJrZXlnZW5cIixcbiAgICBcImxpbmtcIixcbiAgICBcIm1ldGFcIixcbiAgICBcInBhcmFtXCIsXG4gICAgXCJzb3VyY2VcIixcbiAgICBcInRyYWNrXCIsXG4gICAgXCJ3YnJcIixcbl0pO1xuY29uc3QgZm9yZWlnbkNvbnRleHRFbGVtZW50cyA9IG5ldyBTZXQoW1wibWF0aFwiLCBcInN2Z1wiXSk7XG5jb25zdCBodG1sSW50ZWdyYXRpb25FbGVtZW50cyA9IG5ldyBTZXQoW1xuICAgIFwibWlcIixcbiAgICBcIm1vXCIsXG4gICAgXCJtblwiLFxuICAgIFwibXNcIixcbiAgICBcIm10ZXh0XCIsXG4gICAgXCJhbm5vdGF0aW9uLXhtbFwiLFxuICAgIFwiZm9yZWlnbm9iamVjdFwiLFxuICAgIFwiZGVzY1wiLFxuICAgIFwidGl0bGVcIixcbl0pO1xuY29uc3QgcmVOYW1lRW5kID0gL1xcc3xcXC8vO1xuZXhwb3J0IGNsYXNzIFBhcnNlciB7XG4gICAgY29uc3RydWN0b3IoY2JzLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2Y7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIC8qKiBUaGUgc3RhcnQgaW5kZXggb2YgdGhlIGxhc3QgZXZlbnQuICovXG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IDA7XG4gICAgICAgIC8qKiBUaGUgZW5kIGluZGV4IG9mIHRoZSBsYXN0IGV2ZW50LiAqL1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3JlIHRoZSBzdGFydCBpbmRleCBvZiB0aGUgY3VycmVudCBvcGVuIHRhZyxcbiAgICAgICAgICogc28gd2UgY2FuIHVwZGF0ZSB0aGUgc3RhcnQgaW5kZXggZm9yIGF0dHJpYnV0ZXMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9wZW5UYWdTdGFydCA9IDA7XG4gICAgICAgIHRoaXMudGFnbmFtZSA9IFwiXCI7XG4gICAgICAgIHRoaXMuYXR0cmlibmFtZSA9IFwiXCI7XG4gICAgICAgIHRoaXMuYXR0cmlidmFsdWUgPSBcIlwiO1xuICAgICAgICB0aGlzLmF0dHJpYnMgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YWNrID0gW107XG4gICAgICAgIHRoaXMuYnVmZmVycyA9IFtdO1xuICAgICAgICB0aGlzLmJ1ZmZlck9mZnNldCA9IDA7XG4gICAgICAgIC8qKiBUaGUgaW5kZXggb2YgdGhlIGxhc3Qgd3JpdHRlbiBidWZmZXIuIFVzZWQgd2hlbiByZXN1bWluZyBhZnRlciBhIGBwYXVzZSgpYC4gKi9cbiAgICAgICAgdGhpcy53cml0ZUluZGV4ID0gMDtcbiAgICAgICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBwYXJzZXIgaGFzIGZpbmlzaGVkIHJ1bm5pbmcgLyBgLmVuZGAgaGFzIGJlZW4gY2FsbGVkLiAqL1xuICAgICAgICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2JzID0gY2JzICE9PSBudWxsICYmIGNicyAhPT0gdm9pZCAwID8gY2JzIDoge307XG4gICAgICAgIHRoaXMuaHRtbE1vZGUgPSAhdGhpcy5vcHRpb25zLnhtbE1vZGU7XG4gICAgICAgIHRoaXMubG93ZXJDYXNlVGFnTmFtZXMgPSAoX2EgPSBvcHRpb25zLmxvd2VyQ2FzZVRhZ3MpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMuaHRtbE1vZGU7XG4gICAgICAgIHRoaXMubG93ZXJDYXNlQXR0cmlidXRlTmFtZXMgPVxuICAgICAgICAgICAgKF9iID0gb3B0aW9ucy5sb3dlckNhc2VBdHRyaWJ1dGVOYW1lcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdGhpcy5odG1sTW9kZTtcbiAgICAgICAgdGhpcy5yZWNvZ25pemVTZWxmQ2xvc2luZyA9XG4gICAgICAgICAgICAoX2MgPSBvcHRpb25zLnJlY29nbml6ZVNlbGZDbG9zaW5nKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAhdGhpcy5odG1sTW9kZTtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIgPSBuZXcgKChfZCA9IG9wdGlvbnMuVG9rZW5pemVyKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBUb2tlbml6ZXIpKHRoaXMub3B0aW9ucywgdGhpcyk7XG4gICAgICAgIHRoaXMuZm9yZWlnbkNvbnRleHQgPSBbIXRoaXMuaHRtbE1vZGVdO1xuICAgICAgICAoX2YgPSAoX2UgPSB0aGlzLmNicykub25wYXJzZXJpbml0KSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YuY2FsbChfZSwgdGhpcyk7XG4gICAgfVxuICAgIC8vIFRva2VuaXplciBldmVudCBoYW5kbGVyc1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBvbnRleHQoc3RhcnQsIGVuZEluZGV4KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldFNsaWNlKHN0YXJ0LCBlbmRJbmRleCk7XG4gICAgICAgIHRoaXMuZW5kSW5kZXggPSBlbmRJbmRleCAtIDE7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY2JzKS5vbnRleHQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBkYXRhKTtcbiAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gZW5kSW5kZXg7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBvbnRleHRlbnRpdHkoY3AsIGVuZEluZGV4KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHRoaXMuZW5kSW5kZXggPSBlbmRJbmRleCAtIDE7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY2JzKS5vbnRleHQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBmcm9tQ29kZVBvaW50KGNwKSk7XG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IGVuZEluZGV4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGN1cnJlbnQgdGFnIGlzIGEgdm9pZCBlbGVtZW50LiBPdmVycmlkZSB0aGlzIGlmIHlvdSB3YW50XG4gICAgICogdG8gc3BlY2lmeSB5b3VyIG93biBhZGRpdGlvbmFsIHZvaWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgaXNWb2lkRWxlbWVudChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0bWxNb2RlICYmIHZvaWRFbGVtZW50cy5oYXMobmFtZSk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBvbm9wZW50YWduYW1lKHN0YXJ0LCBlbmRJbmRleCkge1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gZW5kSW5kZXg7XG4gICAgICAgIGxldCBuYW1lID0gdGhpcy5nZXRTbGljZShzdGFydCwgZW5kSW5kZXgpO1xuICAgICAgICBpZiAodGhpcy5sb3dlckNhc2VUYWdOYW1lcykge1xuICAgICAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXRPcGVuVGFnKG5hbWUpO1xuICAgIH1cbiAgICBlbWl0T3BlblRhZyhuYW1lKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgdGhpcy5vcGVuVGFnU3RhcnQgPSB0aGlzLnN0YXJ0SW5kZXg7XG4gICAgICAgIHRoaXMudGFnbmFtZSA9IG5hbWU7XG4gICAgICAgIGNvbnN0IGltcGxpZXNDbG9zZSA9IHRoaXMuaHRtbE1vZGUgJiYgb3BlbkltcGxpZXNDbG9zZS5nZXQobmFtZSk7XG4gICAgICAgIGlmIChpbXBsaWVzQ2xvc2UpIHtcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLnN0YWNrLmxlbmd0aCA+IDAgJiYgaW1wbGllc0Nsb3NlLmhhcyh0aGlzLnN0YWNrWzBdKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLnN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9uY2xvc2V0YWcpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBlbGVtZW50LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaXNWb2lkRWxlbWVudChuYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5zdGFjay51bnNoaWZ0KG5hbWUpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaHRtbE1vZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZm9yZWlnbkNvbnRleHRFbGVtZW50cy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JlaWduQ29udGV4dC51bnNoaWZ0KHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChodG1sSW50ZWdyYXRpb25FbGVtZW50cy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JlaWduQ29udGV4dC51bnNoaWZ0KGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgKF9kID0gKF9jID0gdGhpcy5jYnMpLm9ub3BlbnRhZ25hbWUpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5jYWxsKF9jLCBuYW1lKTtcbiAgICAgICAgaWYgKHRoaXMuY2JzLm9ub3BlbnRhZylcbiAgICAgICAgICAgIHRoaXMuYXR0cmlicyA9IHt9O1xuICAgIH1cbiAgICBlbmRPcGVuVGFnKGlzSW1wbGllZCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSB0aGlzLm9wZW5UYWdTdGFydDtcbiAgICAgICAgaWYgKHRoaXMuYXR0cmlicykge1xuICAgICAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9ub3BlbnRhZykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHRoaXMudGFnbmFtZSwgdGhpcy5hdHRyaWJzLCBpc0ltcGxpZWQpO1xuICAgICAgICAgICAgdGhpcy5hdHRyaWJzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jYnMub25jbG9zZXRhZyAmJiB0aGlzLmlzVm9pZEVsZW1lbnQodGhpcy50YWduYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5jYnMub25jbG9zZXRhZyh0aGlzLnRhZ25hbWUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGFnbmFtZSA9IFwiXCI7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBvbm9wZW50YWdlbmQoZW5kSW5kZXgpIHtcbiAgICAgICAgdGhpcy5lbmRJbmRleCA9IGVuZEluZGV4O1xuICAgICAgICB0aGlzLmVuZE9wZW5UYWcoZmFsc2UpO1xuICAgICAgICAvLyBTZXQgYHN0YXJ0SW5kZXhgIGZvciBuZXh0IG5vZGVcbiAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gZW5kSW5kZXggKyAxO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgb25jbG9zZXRhZyhzdGFydCwgZW5kSW5kZXgpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaDtcbiAgICAgICAgdGhpcy5lbmRJbmRleCA9IGVuZEluZGV4O1xuICAgICAgICBsZXQgbmFtZSA9IHRoaXMuZ2V0U2xpY2Uoc3RhcnQsIGVuZEluZGV4KTtcbiAgICAgICAgaWYgKHRoaXMubG93ZXJDYXNlVGFnTmFtZXMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaHRtbE1vZGUgJiZcbiAgICAgICAgICAgIChmb3JlaWduQ29udGV4dEVsZW1lbnRzLmhhcyhuYW1lKSB8fFxuICAgICAgICAgICAgICAgIGh0bWxJbnRlZ3JhdGlvbkVsZW1lbnRzLmhhcyhuYW1lKSkpIHtcbiAgICAgICAgICAgIHRoaXMuZm9yZWlnbkNvbnRleHQuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaXNWb2lkRWxlbWVudChuYW1lKSkge1xuICAgICAgICAgICAgY29uc3QgcG9zID0gdGhpcy5zdGFjay5pbmRleE9mKG5hbWUpO1xuICAgICAgICAgICAgaWYgKHBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDw9IHBvczsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5zdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSBrbm93IHRoZSBzdGFjayBoYXMgc3VmZmljaWVudCBlbGVtZW50cy5cbiAgICAgICAgICAgICAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9uY2xvc2V0YWcpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBlbGVtZW50LCBpbmRleCAhPT0gcG9zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmh0bWxNb2RlICYmIG5hbWUgPT09IFwicFwiKSB7XG4gICAgICAgICAgICAgICAgLy8gSW1wbGljaXQgb3BlbiBiZWZvcmUgY2xvc2VcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRPcGVuVGFnKFwicFwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlQ3VycmVudFRhZyh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmh0bWxNb2RlICYmIG5hbWUgPT09IFwiYnJcIikge1xuICAgICAgICAgICAgLy8gV2UgY2FuJ3QgdXNlIGBlbWl0T3BlblRhZ2AgZm9yIGltcGxpY2l0IG9wZW4sIGFzIGBicmAgd291bGQgYmUgaW1wbGljaXRseSBjbG9zZWQuXG4gICAgICAgICAgICAoX2QgPSAoX2MgPSB0aGlzLmNicykub25vcGVudGFnbmFtZSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNhbGwoX2MsIFwiYnJcIik7XG4gICAgICAgICAgICAoX2YgPSAoX2UgPSB0aGlzLmNicykub25vcGVudGFnKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YuY2FsbChfZSwgXCJiclwiLCB7fSwgdHJ1ZSk7XG4gICAgICAgICAgICAoX2ggPSAoX2cgPSB0aGlzLmNicykub25jbG9zZXRhZykgPT09IG51bGwgfHwgX2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9oLmNhbGwoX2csIFwiYnJcIiwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldCBgc3RhcnRJbmRleGAgZm9yIG5leHQgbm9kZVxuICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSBlbmRJbmRleCArIDE7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBvbnNlbGZjbG9zaW5ndGFnKGVuZEluZGV4KSB7XG4gICAgICAgIHRoaXMuZW5kSW5kZXggPSBlbmRJbmRleDtcbiAgICAgICAgaWYgKHRoaXMucmVjb2duaXplU2VsZkNsb3NpbmcgfHwgdGhpcy5mb3JlaWduQ29udGV4dFswXSkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZUN1cnJlbnRUYWcoZmFsc2UpO1xuICAgICAgICAgICAgLy8gU2V0IGBzdGFydEluZGV4YCBmb3IgbmV4dCBub2RlXG4gICAgICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSBlbmRJbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgdGhlIGZhY3QgdGhhdCB0aGUgdGFnIGlzIHNlbGYtY2xvc2luZy5cbiAgICAgICAgICAgIHRoaXMub25vcGVudGFnZW5kKGVuZEluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbG9zZUN1cnJlbnRUYWcoaXNPcGVuSW1wbGllZCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy50YWduYW1lO1xuICAgICAgICB0aGlzLmVuZE9wZW5UYWcoaXNPcGVuSW1wbGllZCk7XG4gICAgICAgIC8vIFNlbGYtY2xvc2luZyB0YWdzIHdpbGwgYmUgb24gdGhlIHRvcCBvZiB0aGUgc3RhY2tcbiAgICAgICAgaWYgKHRoaXMuc3RhY2tbMF0gPT09IG5hbWUpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBvcGVuaW5nIHRhZyBpc24ndCBpbXBsaWVkLCB0aGUgY2xvc2luZyB0YWcgaGFzIHRvIGJlIGltcGxpZWQuXG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25jbG9zZXRhZykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIG5hbWUsICFpc09wZW5JbXBsaWVkKTtcbiAgICAgICAgICAgIHRoaXMuc3RhY2suc2hpZnQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgb25hdHRyaWJuYW1lKHN0YXJ0LCBlbmRJbmRleCkge1xuICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSBzdGFydDtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuZ2V0U2xpY2Uoc3RhcnQsIGVuZEluZGV4KTtcbiAgICAgICAgdGhpcy5hdHRyaWJuYW1lID0gdGhpcy5sb3dlckNhc2VBdHRyaWJ1dGVOYW1lc1xuICAgICAgICAgICAgPyBuYW1lLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgIDogbmFtZTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIG9uYXR0cmliZGF0YShzdGFydCwgZW5kSW5kZXgpIHtcbiAgICAgICAgdGhpcy5hdHRyaWJ2YWx1ZSArPSB0aGlzLmdldFNsaWNlKHN0YXJ0LCBlbmRJbmRleCk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBvbmF0dHJpYmVudGl0eShjcCkge1xuICAgICAgICB0aGlzLmF0dHJpYnZhbHVlICs9IGZyb21Db2RlUG9pbnQoY3ApO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgb25hdHRyaWJlbmQocXVvdGUsIGVuZEluZGV4KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHRoaXMuZW5kSW5kZXggPSBlbmRJbmRleDtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9uYXR0cmlidXRlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdGhpcy5hdHRyaWJuYW1lLCB0aGlzLmF0dHJpYnZhbHVlLCBxdW90ZSA9PT0gUXVvdGVUeXBlLkRvdWJsZVxuICAgICAgICAgICAgPyAnXCInXG4gICAgICAgICAgICA6IHF1b3RlID09PSBRdW90ZVR5cGUuU2luZ2xlXG4gICAgICAgICAgICAgICAgPyBcIidcIlxuICAgICAgICAgICAgICAgIDogcXVvdGUgPT09IFF1b3RlVHlwZS5Ob1ZhbHVlXG4gICAgICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgIDogbnVsbCk7XG4gICAgICAgIGlmICh0aGlzLmF0dHJpYnMgJiZcbiAgICAgICAgICAgICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5hdHRyaWJzLCB0aGlzLmF0dHJpYm5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYnNbdGhpcy5hdHRyaWJuYW1lXSA9IHRoaXMuYXR0cmlidmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdHRyaWJ2YWx1ZSA9IFwiXCI7XG4gICAgfVxuICAgIGdldEluc3RydWN0aW9uTmFtZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHZhbHVlLnNlYXJjaChyZU5hbWVFbmQpO1xuICAgICAgICBsZXQgbmFtZSA9IGluZGV4IDwgMCA/IHZhbHVlIDogdmFsdWUuc3Vic3RyKDAsIGluZGV4KTtcbiAgICAgICAgaWYgKHRoaXMubG93ZXJDYXNlVGFnTmFtZXMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBvbmRlY2xhcmF0aW9uKHN0YXJ0LCBlbmRJbmRleCkge1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gZW5kSW5kZXg7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRTbGljZShzdGFydCwgZW5kSW5kZXgpO1xuICAgICAgICBpZiAodGhpcy5jYnMub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLmdldEluc3RydWN0aW9uTmFtZSh2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmNicy5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbihgISR7bmFtZX1gLCBgISR7dmFsdWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IGBzdGFydEluZGV4YCBmb3IgbmV4dCBub2RlXG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IGVuZEluZGV4ICsgMTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIG9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKHN0YXJ0LCBlbmRJbmRleCkge1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gZW5kSW5kZXg7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRTbGljZShzdGFydCwgZW5kSW5kZXgpO1xuICAgICAgICBpZiAodGhpcy5jYnMub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLmdldEluc3RydWN0aW9uTmFtZSh2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmNicy5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbihgPyR7bmFtZX1gLCBgPyR7dmFsdWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IGBzdGFydEluZGV4YCBmb3IgbmV4dCBub2RlXG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IGVuZEluZGV4ICsgMTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIG9uY29tbWVudChzdGFydCwgZW5kSW5kZXgsIG9mZnNldCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgIHRoaXMuZW5kSW5kZXggPSBlbmRJbmRleDtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9uY29tbWVudCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHRoaXMuZ2V0U2xpY2Uoc3RhcnQsIGVuZEluZGV4IC0gb2Zmc2V0KSk7XG4gICAgICAgIChfZCA9IChfYyA9IHRoaXMuY2JzKS5vbmNvbW1lbnRlbmQpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5jYWxsKF9jKTtcbiAgICAgICAgLy8gU2V0IGBzdGFydEluZGV4YCBmb3IgbmV4dCBub2RlXG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IGVuZEluZGV4ICsgMTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIG9uY2RhdGEoc3RhcnQsIGVuZEluZGV4LCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2osIF9rO1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gZW5kSW5kZXg7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRTbGljZShzdGFydCwgZW5kSW5kZXggLSBvZmZzZXQpO1xuICAgICAgICBpZiAoIXRoaXMuaHRtbE1vZGUgfHwgdGhpcy5vcHRpb25zLnJlY29nbml6ZUNEQVRBKSB7XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25jZGF0YXN0YXJ0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgICAgICAgICAoX2QgPSAoX2MgPSB0aGlzLmNicykub250ZXh0KSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuY2FsbChfYywgdmFsdWUpO1xuICAgICAgICAgICAgKF9mID0gKF9lID0gdGhpcy5jYnMpLm9uY2RhdGFlbmQpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5jYWxsKF9lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIChfaCA9IChfZyA9IHRoaXMuY2JzKS5vbmNvbW1lbnQpID09PSBudWxsIHx8IF9oID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaC5jYWxsKF9nLCBgW0NEQVRBWyR7dmFsdWV9XV1gKTtcbiAgICAgICAgICAgIChfayA9IChfaiA9IHRoaXMuY2JzKS5vbmNvbW1lbnRlbmQpID09PSBudWxsIHx8IF9rID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfay5jYWxsKF9qKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgYHN0YXJ0SW5kZXhgIGZvciBuZXh0IG5vZGVcbiAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gZW5kSW5kZXggKyAxO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgb25lbmQoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICh0aGlzLmNicy5vbmNsb3NldGFnKSB7XG4gICAgICAgICAgICAvLyBTZXQgdGhlIGVuZCBpbmRleCBmb3IgYWxsIHJlbWFpbmluZyB0YWdzXG4gICAgICAgICAgICB0aGlzLmVuZEluZGV4ID0gdGhpcy5zdGFydEluZGV4O1xuICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuc3RhY2subGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYnMub25jbG9zZXRhZyh0aGlzLnN0YWNrW2luZGV4XSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9uZW5kKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgcGFyc2VyIHRvIGEgYmxhbmsgc3RhdGUsIHJlYWR5IHRvIHBhcnNlIGEgbmV3IEhUTUwgZG9jdW1lbnRcbiAgICAgKi9cbiAgICByZXNldCgpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25yZXNldCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgICAgICB0aGlzLnRva2VuaXplci5yZXNldCgpO1xuICAgICAgICB0aGlzLnRhZ25hbWUgPSBcIlwiO1xuICAgICAgICB0aGlzLmF0dHJpYm5hbWUgPSBcIlwiO1xuICAgICAgICB0aGlzLmF0dHJpYnMgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YWNrLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IDA7XG4gICAgICAgIHRoaXMuZW5kSW5kZXggPSAwO1xuICAgICAgICAoX2QgPSAoX2MgPSB0aGlzLmNicykub25wYXJzZXJpbml0KSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuY2FsbChfYywgdGhpcyk7XG4gICAgICAgIHRoaXMuYnVmZmVycy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLmZvcmVpZ25Db250ZXh0Lmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuZm9yZWlnbkNvbnRleHQudW5zaGlmdCghdGhpcy5odG1sTW9kZSk7XG4gICAgICAgIHRoaXMuYnVmZmVyT2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy53cml0ZUluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIHBhcnNlciwgdGhlbiBwYXJzZXMgYSBjb21wbGV0ZSBkb2N1bWVudCBhbmRcbiAgICAgKiBwdXNoZXMgaXQgdG8gdGhlIGhhbmRsZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0YSBEb2N1bWVudCB0byBwYXJzZS5cbiAgICAgKi9cbiAgICBwYXJzZUNvbXBsZXRlKGRhdGEpIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB0aGlzLmVuZChkYXRhKTtcbiAgICB9XG4gICAgZ2V0U2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgICAgICB3aGlsZSAoc3RhcnQgLSB0aGlzLmJ1ZmZlck9mZnNldCA+PSB0aGlzLmJ1ZmZlcnNbMF0ubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnNoaWZ0QnVmZmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNsaWNlID0gdGhpcy5idWZmZXJzWzBdLnNsaWNlKHN0YXJ0IC0gdGhpcy5idWZmZXJPZmZzZXQsIGVuZCAtIHRoaXMuYnVmZmVyT2Zmc2V0KTtcbiAgICAgICAgd2hpbGUgKGVuZCAtIHRoaXMuYnVmZmVyT2Zmc2V0ID4gdGhpcy5idWZmZXJzWzBdLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5zaGlmdEJ1ZmZlcigpO1xuICAgICAgICAgICAgc2xpY2UgKz0gdGhpcy5idWZmZXJzWzBdLnNsaWNlKDAsIGVuZCAtIHRoaXMuYnVmZmVyT2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2xpY2U7XG4gICAgfVxuICAgIHNoaWZ0QnVmZmVyKCkge1xuICAgICAgICB0aGlzLmJ1ZmZlck9mZnNldCArPSB0aGlzLmJ1ZmZlcnNbMF0ubGVuZ3RoO1xuICAgICAgICB0aGlzLndyaXRlSW5kZXgtLTtcbiAgICAgICAgdGhpcy5idWZmZXJzLnNoaWZ0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIGNodW5rIG9mIGRhdGEgYW5kIGNhbGxzIHRoZSBjb3JyZXNwb25kaW5nIGNhbGxiYWNrcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjaHVuayBDaHVuayB0byBwYXJzZS5cbiAgICAgKi9cbiAgICB3cml0ZShjaHVuaykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAodGhpcy5lbmRlZCkge1xuICAgICAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9uZXJyb3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBuZXcgRXJyb3IoXCIud3JpdGUoKSBhZnRlciBkb25lIVwiKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5idWZmZXJzLnB1c2goY2h1bmspO1xuICAgICAgICBpZiAodGhpcy50b2tlbml6ZXIucnVubmluZykge1xuICAgICAgICAgICAgdGhpcy50b2tlbml6ZXIud3JpdGUoY2h1bmspO1xuICAgICAgICAgICAgdGhpcy53cml0ZUluZGV4Kys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlciBhbmQgY2xlYXJzIHRoZSBzdGFjaywgY2FsbHMgb25lbmQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2h1bmsgT3B0aW9uYWwgZmluYWwgY2h1bmsgdG8gcGFyc2UuXG4gICAgICovXG4gICAgZW5kKGNodW5rKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICh0aGlzLmVuZGVkKSB7XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25lcnJvcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIG5ldyBFcnJvcihcIi5lbmQoKSBhZnRlciBkb25lIVwiKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNodW5rKVxuICAgICAgICAgICAgdGhpcy53cml0ZShjaHVuayk7XG4gICAgICAgIHRoaXMuZW5kZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnRva2VuaXplci5lbmQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGF1c2VzIHBhcnNpbmcuIFRoZSBwYXJzZXIgd29uJ3QgZW1pdCBldmVudHMgdW50aWwgYHJlc3VtZWAgaXMgY2FsbGVkLlxuICAgICAqL1xuICAgIHBhdXNlKCkge1xuICAgICAgICB0aGlzLnRva2VuaXplci5wYXVzZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXN1bWVzIHBhcnNpbmcgYWZ0ZXIgYHBhdXNlYCB3YXMgY2FsbGVkLlxuICAgICAqL1xuICAgIHJlc3VtZSgpIHtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIucmVzdW1lKCk7XG4gICAgICAgIHdoaWxlICh0aGlzLnRva2VuaXplci5ydW5uaW5nICYmXG4gICAgICAgICAgICB0aGlzLndyaXRlSW5kZXggPCB0aGlzLmJ1ZmZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnRva2VuaXplci53cml0ZSh0aGlzLmJ1ZmZlcnNbdGhpcy53cml0ZUluZGV4KytdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5lbmRlZClcbiAgICAgICAgICAgIHRoaXMudG9rZW5pemVyLmVuZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGlhcyBvZiBgd3JpdGVgLCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2h1bmsgQ2h1bmsgdG8gcGFyc2UuXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBwYXJzZUNodW5rKGNodW5rKSB7XG4gICAgICAgIHRoaXMud3JpdGUoY2h1bmspO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGlhcyBvZiBgZW5kYCwgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNodW5rIE9wdGlvbmFsIGZpbmFsIGNodW5rIHRvIHBhcnNlLlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgZG9uZShjaHVuaykge1xuICAgICAgICB0aGlzLmVuZChjaHVuayk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGFyc2VyLmpzLm1hcCIsIi8qKiBUeXBlcyBvZiBlbGVtZW50cyBmb3VuZCBpbiBodG1scGFyc2VyMidzIERPTSAqL1xuZXhwb3J0IHZhciBFbGVtZW50VHlwZTtcbihmdW5jdGlvbiAoRWxlbWVudFR5cGUpIHtcbiAgICAvKiogVHlwZSBmb3IgdGhlIHJvb3QgZWxlbWVudCBvZiBhIGRvY3VtZW50ICovXG4gICAgRWxlbWVudFR5cGVbXCJSb290XCJdID0gXCJyb290XCI7XG4gICAgLyoqIFR5cGUgZm9yIFRleHQgKi9cbiAgICBFbGVtZW50VHlwZVtcIlRleHRcIl0gPSBcInRleHRcIjtcbiAgICAvKiogVHlwZSBmb3IgPD8gLi4uID8+ICovXG4gICAgRWxlbWVudFR5cGVbXCJEaXJlY3RpdmVcIl0gPSBcImRpcmVjdGl2ZVwiO1xuICAgIC8qKiBUeXBlIGZvciA8IS0tIC4uLiAtLT4gKi9cbiAgICBFbGVtZW50VHlwZVtcIkNvbW1lbnRcIl0gPSBcImNvbW1lbnRcIjtcbiAgICAvKiogVHlwZSBmb3IgPHNjcmlwdD4gdGFncyAqL1xuICAgIEVsZW1lbnRUeXBlW1wiU2NyaXB0XCJdID0gXCJzY3JpcHRcIjtcbiAgICAvKiogVHlwZSBmb3IgPHN0eWxlPiB0YWdzICovXG4gICAgRWxlbWVudFR5cGVbXCJTdHlsZVwiXSA9IFwic3R5bGVcIjtcbiAgICAvKiogVHlwZSBmb3IgQW55IHRhZyAqL1xuICAgIEVsZW1lbnRUeXBlW1wiVGFnXCJdID0gXCJ0YWdcIjtcbiAgICAvKiogVHlwZSBmb3IgPCFbQ0RBVEFbIC4uLiBdXT4gKi9cbiAgICBFbGVtZW50VHlwZVtcIkNEQVRBXCJdID0gXCJjZGF0YVwiO1xuICAgIC8qKiBUeXBlIGZvciA8IWRvY3R5cGUgLi4uPiAqL1xuICAgIEVsZW1lbnRUeXBlW1wiRG9jdHlwZVwiXSA9IFwiZG9jdHlwZVwiO1xufSkoRWxlbWVudFR5cGUgfHwgKEVsZW1lbnRUeXBlID0ge30pKTtcbi8qKlxuICogVGVzdHMgd2hldGhlciBhbiBlbGVtZW50IGlzIGEgdGFnIG9yIG5vdC5cbiAqXG4gKiBAcGFyYW0gZWxlbSBFbGVtZW50IHRvIHRlc3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVGFnKGVsZW0pIHtcbiAgICByZXR1cm4gKGVsZW0udHlwZSA9PT0gRWxlbWVudFR5cGUuVGFnIHx8XG4gICAgICAgIGVsZW0udHlwZSA9PT0gRWxlbWVudFR5cGUuU2NyaXB0IHx8XG4gICAgICAgIGVsZW0udHlwZSA9PT0gRWxlbWVudFR5cGUuU3R5bGUpO1xufVxuLy8gRXhwb3J0cyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbi8qKiBUeXBlIGZvciB0aGUgcm9vdCBlbGVtZW50IG9mIGEgZG9jdW1lbnQgKi9cbmV4cG9ydCBjb25zdCBSb290ID0gRWxlbWVudFR5cGUuUm9vdDtcbi8qKiBUeXBlIGZvciBUZXh0ICovXG5leHBvcnQgY29uc3QgVGV4dCA9IEVsZW1lbnRUeXBlLlRleHQ7XG4vKiogVHlwZSBmb3IgPD8gLi4uID8+ICovXG5leHBvcnQgY29uc3QgRGlyZWN0aXZlID0gRWxlbWVudFR5cGUuRGlyZWN0aXZlO1xuLyoqIFR5cGUgZm9yIDwhLS0gLi4uIC0tPiAqL1xuZXhwb3J0IGNvbnN0IENvbW1lbnQgPSBFbGVtZW50VHlwZS5Db21tZW50O1xuLyoqIFR5cGUgZm9yIDxzY3JpcHQ+IHRhZ3MgKi9cbmV4cG9ydCBjb25zdCBTY3JpcHQgPSBFbGVtZW50VHlwZS5TY3JpcHQ7XG4vKiogVHlwZSBmb3IgPHN0eWxlPiB0YWdzICovXG5leHBvcnQgY29uc3QgU3R5bGUgPSBFbGVtZW50VHlwZS5TdHlsZTtcbi8qKiBUeXBlIGZvciBBbnkgdGFnICovXG5leHBvcnQgY29uc3QgVGFnID0gRWxlbWVudFR5cGUuVGFnO1xuLyoqIFR5cGUgZm9yIDwhW0NEQVRBWyAuLi4gXV0+ICovXG5leHBvcnQgY29uc3QgQ0RBVEEgPSBFbGVtZW50VHlwZS5DREFUQTtcbi8qKiBUeXBlIGZvciA8IWRvY3R5cGUgLi4uPiAqL1xuZXhwb3J0IGNvbnN0IERvY3R5cGUgPSBFbGVtZW50VHlwZS5Eb2N0eXBlO1xuIiwiaW1wb3J0IHsgRWxlbWVudFR5cGUsIGlzVGFnIGFzIGlzVGFnUmF3IH0gZnJvbSBcImRvbWVsZW1lbnR0eXBlXCI7XG4vKipcbiAqIFRoaXMgb2JqZWN0IHdpbGwgYmUgdXNlZCBhcyB0aGUgcHJvdG90eXBlIGZvciBOb2RlcyB3aGVuIGNyZWF0aW5nIGFcbiAqIERPTS1MZXZlbC0xLWNvbXBsaWFudCBzdHJ1Y3R1cmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqIFBhcmVudCBvZiB0aGUgbm9kZSAqL1xuICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgICAgIC8qKiBQcmV2aW91cyBzaWJsaW5nICovXG4gICAgICAgIHRoaXMucHJldiA9IG51bGw7XG4gICAgICAgIC8qKiBOZXh0IHNpYmxpbmcgKi9cbiAgICAgICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgICAgICAgLyoqIFRoZSBzdGFydCBpbmRleCBvZiB0aGUgbm9kZS4gUmVxdWlyZXMgYHdpdGhTdGFydEluZGljZXNgIG9uIHRoZSBoYW5kbGVyIHRvIGJlIGB0cnVlLiAqL1xuICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSBudWxsO1xuICAgICAgICAvKiogVGhlIGVuZCBpbmRleCBvZiB0aGUgbm9kZS4gUmVxdWlyZXMgYHdpdGhFbmRJbmRpY2VzYCBvbiB0aGUgaGFuZGxlciB0byBiZSBgdHJ1ZS4gKi9cbiAgICAgICAgdGhpcy5lbmRJbmRleCA9IG51bGw7XG4gICAgfVxuICAgIC8vIFJlYWQtd3JpdGUgYWxpYXNlcyBmb3IgcHJvcGVydGllc1xuICAgIC8qKlxuICAgICAqIFNhbWUgYXMge0BsaW5rIHBhcmVudH0uXG4gICAgICogW0RPTSBzcGVjXShodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcpLWNvbXBhdGlibGUgYWxpYXMuXG4gICAgICovXG4gICAgZ2V0IHBhcmVudE5vZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudDtcbiAgICB9XG4gICAgc2V0IHBhcmVudE5vZGUocGFyZW50KSB7XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTYW1lIGFzIHtAbGluayBwcmV2fS5cbiAgICAgKiBbRE9NIHNwZWNdKGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZyktY29tcGF0aWJsZSBhbGlhcy5cbiAgICAgKi9cbiAgICBnZXQgcHJldmlvdXNTaWJsaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmV2O1xuICAgIH1cbiAgICBzZXQgcHJldmlvdXNTaWJsaW5nKHByZXYpIHtcbiAgICAgICAgdGhpcy5wcmV2ID0gcHJldjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2FtZSBhcyB7QGxpbmsgbmV4dH0uXG4gICAgICogW0RPTSBzcGVjXShodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcpLWNvbXBhdGlibGUgYWxpYXMuXG4gICAgICovXG4gICAgZ2V0IG5leHRTaWJsaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uZXh0O1xuICAgIH1cbiAgICBzZXQgbmV4dFNpYmxpbmcobmV4dCkge1xuICAgICAgICB0aGlzLm5leHQgPSBuZXh0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9uZSB0aGlzIG5vZGUsIGFuZCBvcHRpb25hbGx5IGl0cyBjaGlsZHJlbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWN1cnNpdmUgQ2xvbmUgY2hpbGQgbm9kZXMgYXMgd2VsbC5cbiAgICAgKiBAcmV0dXJucyBBIGNsb25lIG9mIHRoZSBub2RlLlxuICAgICAqL1xuICAgIGNsb25lTm9kZShyZWN1cnNpdmUgPSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gY2xvbmVOb2RlKHRoaXMsIHJlY3Vyc2l2ZSk7XG4gICAgfVxufVxuLyoqXG4gKiBBIG5vZGUgdGhhdCBjb250YWlucyBzb21lIGRhdGEuXG4gKi9cbmV4cG9ydCBjbGFzcyBEYXRhTm9kZSBleHRlbmRzIE5vZGUge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBkYXRhIFRoZSBjb250ZW50IG9mIHRoZSBkYXRhIG5vZGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNhbWUgYXMge0BsaW5rIGRhdGF9LlxuICAgICAqIFtET00gc3BlY10oaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnKS1jb21wYXRpYmxlIGFsaWFzLlxuICAgICAqL1xuICAgIGdldCBub2RlVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGE7XG4gICAgfVxuICAgIHNldCBub2RlVmFsdWUoZGF0YSkge1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbn1cbi8qKlxuICogVGV4dCB3aXRoaW4gdGhlIGRvY3VtZW50LlxuICovXG5leHBvcnQgY2xhc3MgVGV4dCBleHRlbmRzIERhdGFOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy50eXBlID0gRWxlbWVudFR5cGUuVGV4dDtcbiAgICB9XG4gICAgZ2V0IG5vZGVUeXBlKCkge1xuICAgICAgICByZXR1cm4gMztcbiAgICB9XG59XG4vKipcbiAqIENvbW1lbnRzIHdpdGhpbiB0aGUgZG9jdW1lbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21tZW50IGV4dGVuZHMgRGF0YU5vZGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnR5cGUgPSBFbGVtZW50VHlwZS5Db21tZW50O1xuICAgIH1cbiAgICBnZXQgbm9kZVR5cGUoKSB7XG4gICAgICAgIHJldHVybiA4O1xuICAgIH1cbn1cbi8qKlxuICogUHJvY2Vzc2luZyBpbnN0cnVjdGlvbnMsIGluY2x1ZGluZyBkb2MgdHlwZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gZXh0ZW5kcyBEYXRhTm9kZSB7XG4gICAgY29uc3RydWN0b3IobmFtZSwgZGF0YSkge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy50eXBlID0gRWxlbWVudFR5cGUuRGlyZWN0aXZlO1xuICAgIH1cbiAgICBnZXQgbm9kZVR5cGUoKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cbn1cbi8qKlxuICogQSBgTm9kZWAgdGhhdCBjYW4gaGF2ZSBjaGlsZHJlbi5cbiAqL1xuZXhwb3J0IGNsYXNzIE5vZGVXaXRoQ2hpbGRyZW4gZXh0ZW5kcyBOb2RlIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY2hpbGRyZW4gQ2hpbGRyZW4gb2YgdGhlIG5vZGUuIE9ubHkgY2VydGFpbiBub2RlIHR5cGVzIGNhbiBoYXZlIGNoaWxkcmVuLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNoaWxkcmVuKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB9XG4gICAgLy8gQWxpYXNlc1xuICAgIC8qKiBGaXJzdCBjaGlsZCBvZiB0aGUgbm9kZS4gKi9cbiAgICBnZXQgZmlyc3RDaGlsZCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5jaGlsZHJlblswXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbnVsbDtcbiAgICB9XG4gICAgLyoqIExhc3QgY2hpbGQgb2YgdGhlIG5vZGUuICovXG4gICAgZ2V0IGxhc3RDaGlsZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ubGVuZ3RoID4gMFxuICAgICAgICAgICAgPyB0aGlzLmNoaWxkcmVuW3RoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMV1cbiAgICAgICAgICAgIDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2FtZSBhcyB7QGxpbmsgY2hpbGRyZW59LlxuICAgICAqIFtET00gc3BlY10oaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnKS1jb21wYXRpYmxlIGFsaWFzLlxuICAgICAqL1xuICAgIGdldCBjaGlsZE5vZGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbjtcbiAgICB9XG4gICAgc2V0IGNoaWxkTm9kZXMoY2hpbGRyZW4pIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDREFUQSBleHRlbmRzIE5vZGVXaXRoQ2hpbGRyZW4ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnR5cGUgPSBFbGVtZW50VHlwZS5DREFUQTtcbiAgICB9XG4gICAgZ2V0IG5vZGVUeXBlKCkge1xuICAgICAgICByZXR1cm4gNDtcbiAgICB9XG59XG4vKipcbiAqIFRoZSByb290IG5vZGUgb2YgdGhlIGRvY3VtZW50LlxuICovXG5leHBvcnQgY2xhc3MgRG9jdW1lbnQgZXh0ZW5kcyBOb2RlV2l0aENoaWxkcmVuIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy50eXBlID0gRWxlbWVudFR5cGUuUm9vdDtcbiAgICB9XG4gICAgZ2V0IG5vZGVUeXBlKCkge1xuICAgICAgICByZXR1cm4gOTtcbiAgICB9XG59XG4vKipcbiAqIEFuIGVsZW1lbnQgd2l0aGluIHRoZSBET00uXG4gKi9cbmV4cG9ydCBjbGFzcyBFbGVtZW50IGV4dGVuZHMgTm9kZVdpdGhDaGlsZHJlbiB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgdGFnLCBlZy4gYGRpdmAsIGBzcGFuYC5cbiAgICAgKiBAcGFyYW0gYXR0cmlicyBPYmplY3QgbWFwcGluZyBhdHRyaWJ1dGUgbmFtZXMgdG8gYXR0cmlidXRlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0gY2hpbGRyZW4gQ2hpbGRyZW4gb2YgdGhlIG5vZGUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmFtZSwgYXR0cmlicywgY2hpbGRyZW4gPSBbXSwgdHlwZSA9IG5hbWUgPT09IFwic2NyaXB0XCJcbiAgICAgICAgPyBFbGVtZW50VHlwZS5TY3JpcHRcbiAgICAgICAgOiBuYW1lID09PSBcInN0eWxlXCJcbiAgICAgICAgICAgID8gRWxlbWVudFR5cGUuU3R5bGVcbiAgICAgICAgICAgIDogRWxlbWVudFR5cGUuVGFnKSB7XG4gICAgICAgIHN1cGVyKGNoaWxkcmVuKTtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5hdHRyaWJzID0gYXR0cmlicztcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB9XG4gICAgZ2V0IG5vZGVUeXBlKCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgLy8gRE9NIExldmVsIDEgYWxpYXNlc1xuICAgIC8qKlxuICAgICAqIFNhbWUgYXMge0BsaW5rIG5hbWV9LlxuICAgICAqIFtET00gc3BlY10oaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnKS1jb21wYXRpYmxlIGFsaWFzLlxuICAgICAqL1xuICAgIGdldCB0YWdOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgIH1cbiAgICBzZXQgdGFnTmFtZShuYW1lKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgfVxuICAgIGdldCBhdHRyaWJ1dGVzKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5hdHRyaWJzKS5tYXAoKG5hbWUpID0+IHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICByZXR1cm4gKHtcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmF0dHJpYnNbbmFtZV0sXG4gICAgICAgICAgICAgICAgbmFtZXNwYWNlOiAoX2EgPSB0aGlzW1wieC1hdHRyaWJzTmFtZXNwYWNlXCJdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbbmFtZV0sXG4gICAgICAgICAgICAgICAgcHJlZml4OiAoX2IgPSB0aGlzW1wieC1hdHRyaWJzUHJlZml4XCJdKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2JbbmFtZV0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGNoZWNrLlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBub2RlIGlzIGEgYEVsZW1lbnRgLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVGFnKG5vZGUpIHtcbiAgICByZXR1cm4gaXNUYWdSYXcobm9kZSk7XG59XG4vKipcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG5vZGUgaGFzIHRoZSB0eXBlIGBDREFUQWAsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNDREFUQShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudHlwZSA9PT0gRWxlbWVudFR5cGUuQ0RBVEE7XG59XG4vKipcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG5vZGUgaGFzIHRoZSB0eXBlIGBUZXh0YCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1RleHQobm9kZSkge1xuICAgIHJldHVybiBub2RlLnR5cGUgPT09IEVsZW1lbnRUeXBlLlRleHQ7XG59XG4vKipcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG5vZGUgaGFzIHRoZSB0eXBlIGBDb21tZW50YCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbW1lbnQobm9kZSkge1xuICAgIHJldHVybiBub2RlLnR5cGUgPT09IEVsZW1lbnRUeXBlLkNvbW1lbnQ7XG59XG4vKipcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG5vZGUgaGFzIHRoZSB0eXBlIGBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb25gLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGlyZWN0aXZlKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50eXBlID09PSBFbGVtZW50VHlwZS5EaXJlY3RpdmU7XG59XG4vKipcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG5vZGUgaGFzIHRoZSB0eXBlIGBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb25gLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRG9jdW1lbnQobm9kZSkge1xuICAgIHJldHVybiBub2RlLnR5cGUgPT09IEVsZW1lbnRUeXBlLlJvb3Q7XG59XG4vKipcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG5vZGUgaGFzIGNoaWxkcmVuLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0NoaWxkcmVuKG5vZGUpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG5vZGUsIFwiY2hpbGRyZW5cIik7XG59XG4vKipcbiAqIENsb25lIGEgbm9kZSwgYW5kIG9wdGlvbmFsbHkgaXRzIGNoaWxkcmVuLlxuICpcbiAqIEBwYXJhbSByZWN1cnNpdmUgQ2xvbmUgY2hpbGQgbm9kZXMgYXMgd2VsbC5cbiAqIEByZXR1cm5zIEEgY2xvbmUgb2YgdGhlIG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZU5vZGUobm9kZSwgcmVjdXJzaXZlID0gZmFsc2UpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGlmIChpc1RleHQobm9kZSkpIHtcbiAgICAgICAgcmVzdWx0ID0gbmV3IFRleHQobm9kZS5kYXRhKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNDb21tZW50KG5vZGUpKSB7XG4gICAgICAgIHJlc3VsdCA9IG5ldyBDb21tZW50KG5vZGUuZGF0YSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzVGFnKG5vZGUpKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gcmVjdXJzaXZlID8gY2xvbmVDaGlsZHJlbihub2RlLmNoaWxkcmVuKSA6IFtdO1xuICAgICAgICBjb25zdCBjbG9uZSA9IG5ldyBFbGVtZW50KG5vZGUubmFtZSwgeyAuLi5ub2RlLmF0dHJpYnMgfSwgY2hpbGRyZW4pO1xuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4gKGNoaWxkLnBhcmVudCA9IGNsb25lKSk7XG4gICAgICAgIGlmIChub2RlLm5hbWVzcGFjZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjbG9uZS5uYW1lc3BhY2UgPSBub2RlLm5hbWVzcGFjZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZVtcIngtYXR0cmlic05hbWVzcGFjZVwiXSkge1xuICAgICAgICAgICAgY2xvbmVbXCJ4LWF0dHJpYnNOYW1lc3BhY2VcIl0gPSB7IC4uLm5vZGVbXCJ4LWF0dHJpYnNOYW1lc3BhY2VcIl0gfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZVtcIngtYXR0cmlic1ByZWZpeFwiXSkge1xuICAgICAgICAgICAgY2xvbmVbXCJ4LWF0dHJpYnNQcmVmaXhcIl0gPSB7IC4uLm5vZGVbXCJ4LWF0dHJpYnNQcmVmaXhcIl0gfTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSBjbG9uZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNDREFUQShub2RlKSkge1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHJlY3Vyc2l2ZSA/IGNsb25lQ2hpbGRyZW4obm9kZS5jaGlsZHJlbikgOiBbXTtcbiAgICAgICAgY29uc3QgY2xvbmUgPSBuZXcgQ0RBVEEoY2hpbGRyZW4pO1xuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4gKGNoaWxkLnBhcmVudCA9IGNsb25lKSk7XG4gICAgICAgIHJlc3VsdCA9IGNsb25lO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0RvY3VtZW50KG5vZGUpKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gcmVjdXJzaXZlID8gY2xvbmVDaGlsZHJlbihub2RlLmNoaWxkcmVuKSA6IFtdO1xuICAgICAgICBjb25zdCBjbG9uZSA9IG5ldyBEb2N1bWVudChjaGlsZHJlbik7XG4gICAgICAgIGNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiAoY2hpbGQucGFyZW50ID0gY2xvbmUpKTtcbiAgICAgICAgaWYgKG5vZGVbXCJ4LW1vZGVcIl0pIHtcbiAgICAgICAgICAgIGNsb25lW1wieC1tb2RlXCJdID0gbm9kZVtcIngtbW9kZVwiXTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSBjbG9uZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNEaXJlY3RpdmUobm9kZSkpIHtcbiAgICAgICAgY29uc3QgaW5zdHJ1Y3Rpb24gPSBuZXcgUHJvY2Vzc2luZ0luc3RydWN0aW9uKG5vZGUubmFtZSwgbm9kZS5kYXRhKTtcbiAgICAgICAgaWYgKG5vZGVbXCJ4LW5hbWVcIl0gIT0gbnVsbCkge1xuICAgICAgICAgICAgaW5zdHJ1Y3Rpb25bXCJ4LW5hbWVcIl0gPSBub2RlW1wieC1uYW1lXCJdO1xuICAgICAgICAgICAgaW5zdHJ1Y3Rpb25bXCJ4LXB1YmxpY0lkXCJdID0gbm9kZVtcIngtcHVibGljSWRcIl07XG4gICAgICAgICAgICBpbnN0cnVjdGlvbltcIngtc3lzdGVtSWRcIl0gPSBub2RlW1wieC1zeXN0ZW1JZFwiXTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSBpbnN0cnVjdGlvbjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTm90IGltcGxlbWVudGVkIHlldDogJHtub2RlLnR5cGV9YCk7XG4gICAgfVxuICAgIHJlc3VsdC5zdGFydEluZGV4ID0gbm9kZS5zdGFydEluZGV4O1xuICAgIHJlc3VsdC5lbmRJbmRleCA9IG5vZGUuZW5kSW5kZXg7XG4gICAgaWYgKG5vZGUuc291cmNlQ29kZUxvY2F0aW9uICE9IG51bGwpIHtcbiAgICAgICAgcmVzdWx0LnNvdXJjZUNvZGVMb2NhdGlvbiA9IG5vZGUuc291cmNlQ29kZUxvY2F0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY2xvbmVDaGlsZHJlbihjaGlsZHMpIHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IGNoaWxkcy5tYXAoKGNoaWxkKSA9PiBjbG9uZU5vZGUoY2hpbGQsIHRydWUpKTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNoaWxkcmVuW2ldLnByZXYgPSBjaGlsZHJlbltpIC0gMV07XG4gICAgICAgIGNoaWxkcmVuW2kgLSAxXS5uZXh0ID0gY2hpbGRyZW5baV07XG4gICAgfVxuICAgIHJldHVybiBjaGlsZHJlbjtcbn1cbiIsImltcG9ydCB7IEVsZW1lbnRUeXBlIH0gZnJvbSBcImRvbWVsZW1lbnR0eXBlXCI7XG5pbXBvcnQgeyBFbGVtZW50LCBUZXh0LCBDb21tZW50LCBDREFUQSwgRG9jdW1lbnQsIFByb2Nlc3NpbmdJbnN0cnVjdGlvbiwgfSBmcm9tIFwiLi9ub2RlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9ub2RlLmpzXCI7XG4vLyBEZWZhdWx0IG9wdGlvbnNcbmNvbnN0IGRlZmF1bHRPcHRzID0ge1xuICAgIHdpdGhTdGFydEluZGljZXM6IGZhbHNlLFxuICAgIHdpdGhFbmRJbmRpY2VzOiBmYWxzZSxcbiAgICB4bWxNb2RlOiBmYWxzZSxcbn07XG5leHBvcnQgY2xhc3MgRG9tSGFuZGxlciB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIENhbGxlZCBvbmNlIHBhcnNpbmcgaGFzIGNvbXBsZXRlZC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBTZXR0aW5ncyBmb3IgdGhlIGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGVsZW1lbnRDQiBDYWxsYmFjayB3aGVuZXZlciBhIHRhZyBpcyBjbG9zZWQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY2FsbGJhY2ssIG9wdGlvbnMsIGVsZW1lbnRDQikge1xuICAgICAgICAvKiogVGhlIGVsZW1lbnRzIG9mIHRoZSBET00gKi9cbiAgICAgICAgdGhpcy5kb20gPSBbXTtcbiAgICAgICAgLyoqIFRoZSByb290IGVsZW1lbnQgZm9yIHRoZSBET00gKi9cbiAgICAgICAgdGhpcy5yb290ID0gbmV3IERvY3VtZW50KHRoaXMuZG9tKTtcbiAgICAgICAgLyoqIEluZGljYXRlZCB3aGV0aGVyIHBhcnNpbmcgaGFzIGJlZW4gY29tcGxldGVkLiAqL1xuICAgICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgLyoqIFN0YWNrIG9mIG9wZW4gdGFncy4gKi9cbiAgICAgICAgdGhpcy50YWdTdGFjayA9IFt0aGlzLnJvb3RdO1xuICAgICAgICAvKiogQSBkYXRhIG5vZGUgdGhhdCBpcyBzdGlsbCBiZWluZyB3cml0dGVuIHRvLiAqL1xuICAgICAgICB0aGlzLmxhc3ROb2RlID0gbnVsbDtcbiAgICAgICAgLyoqIFJlZmVyZW5jZSB0byB0aGUgcGFyc2VyIGluc3RhbmNlLiBVc2VkIGZvciBsb2NhdGlvbiBpbmZvcm1hdGlvbi4gKi9cbiAgICAgICAgdGhpcy5wYXJzZXIgPSBudWxsO1xuICAgICAgICAvLyBNYWtlIGl0IHBvc3NpYmxlIHRvIHNraXAgYXJndW1lbnRzLCBmb3IgYmFja3dhcmRzLWNvbXBhdGliaWxpdHlcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGVsZW1lbnRDQiA9IG9wdGlvbnM7XG4gICAgICAgICAgICBvcHRpb25zID0gZGVmYXVsdE9wdHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgb3B0aW9ucyA9IGNhbGxiYWNrO1xuICAgICAgICAgICAgY2FsbGJhY2sgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrICE9PSBudWxsICYmIGNhbGxiYWNrICE9PSB2b2lkIDAgPyBjYWxsYmFjayA6IG51bGw7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwID8gb3B0aW9ucyA6IGRlZmF1bHRPcHRzO1xuICAgICAgICB0aGlzLmVsZW1lbnRDQiA9IGVsZW1lbnRDQiAhPT0gbnVsbCAmJiBlbGVtZW50Q0IgIT09IHZvaWQgMCA/IGVsZW1lbnRDQiA6IG51bGw7XG4gICAgfVxuICAgIG9ucGFyc2VyaW5pdChwYXJzZXIpIHtcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XG4gICAgfVxuICAgIC8vIFJlc2V0cyB0aGUgaGFuZGxlciBiYWNrIHRvIHN0YXJ0aW5nIHN0YXRlXG4gICAgb25yZXNldCgpIHtcbiAgICAgICAgdGhpcy5kb20gPSBbXTtcbiAgICAgICAgdGhpcy5yb290ID0gbmV3IERvY3VtZW50KHRoaXMuZG9tKTtcbiAgICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICAgIHRoaXMudGFnU3RhY2sgPSBbdGhpcy5yb290XTtcbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG51bGw7XG4gICAgICAgIHRoaXMucGFyc2VyID0gbnVsbDtcbiAgICB9XG4gICAgLy8gU2lnbmFscyB0aGUgaGFuZGxlciB0aGF0IHBhcnNpbmcgaXMgZG9uZVxuICAgIG9uZW5kKCkge1xuICAgICAgICBpZiAodGhpcy5kb25lKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnBhcnNlciA9IG51bGw7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2FsbGJhY2sobnVsbCk7XG4gICAgfVxuICAgIG9uZXJyb3IoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVDYWxsYmFjayhlcnJvcik7XG4gICAgfVxuICAgIG9uY2xvc2V0YWcoKSB7XG4gICAgICAgIHRoaXMubGFzdE5vZGUgPSBudWxsO1xuICAgICAgICBjb25zdCBlbGVtID0gdGhpcy50YWdTdGFjay5wb3AoKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy53aXRoRW5kSW5kaWNlcykge1xuICAgICAgICAgICAgZWxlbS5lbmRJbmRleCA9IHRoaXMucGFyc2VyLmVuZEluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRDQilcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudENCKGVsZW0pO1xuICAgIH1cbiAgICBvbm9wZW50YWcobmFtZSwgYXR0cmlicykge1xuICAgICAgICBjb25zdCB0eXBlID0gdGhpcy5vcHRpb25zLnhtbE1vZGUgPyBFbGVtZW50VHlwZS5UYWcgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBuZXcgRWxlbWVudChuYW1lLCBhdHRyaWJzLCB1bmRlZmluZWQsIHR5cGUpO1xuICAgICAgICB0aGlzLmFkZE5vZGUoZWxlbWVudCk7XG4gICAgICAgIHRoaXMudGFnU3RhY2sucHVzaChlbGVtZW50KTtcbiAgICB9XG4gICAgb250ZXh0KGRhdGEpIHtcbiAgICAgICAgY29uc3QgeyBsYXN0Tm9kZSB9ID0gdGhpcztcbiAgICAgICAgaWYgKGxhc3ROb2RlICYmIGxhc3ROb2RlLnR5cGUgPT09IEVsZW1lbnRUeXBlLlRleHQpIHtcbiAgICAgICAgICAgIGxhc3ROb2RlLmRhdGEgKz0gZGF0YTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMud2l0aEVuZEluZGljZXMpIHtcbiAgICAgICAgICAgICAgICBsYXN0Tm9kZS5lbmRJbmRleCA9IHRoaXMucGFyc2VyLmVuZEluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBUZXh0KGRhdGEpO1xuICAgICAgICAgICAgdGhpcy5hZGROb2RlKG5vZGUpO1xuICAgICAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25jb21tZW50KGRhdGEpIHtcbiAgICAgICAgaWYgKHRoaXMubGFzdE5vZGUgJiYgdGhpcy5sYXN0Tm9kZS50eXBlID09PSBFbGVtZW50VHlwZS5Db21tZW50KSB7XG4gICAgICAgICAgICB0aGlzLmxhc3ROb2RlLmRhdGEgKz0gZGF0YTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBub2RlID0gbmV3IENvbW1lbnQoZGF0YSk7XG4gICAgICAgIHRoaXMuYWRkTm9kZShub2RlKTtcbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG5vZGU7XG4gICAgfVxuICAgIG9uY29tbWVudGVuZCgpIHtcbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG51bGw7XG4gICAgfVxuICAgIG9uY2RhdGFzdGFydCgpIHtcbiAgICAgICAgY29uc3QgdGV4dCA9IG5ldyBUZXh0KFwiXCIpO1xuICAgICAgICBjb25zdCBub2RlID0gbmV3IENEQVRBKFt0ZXh0XSk7XG4gICAgICAgIHRoaXMuYWRkTm9kZShub2RlKTtcbiAgICAgICAgdGV4dC5wYXJlbnQgPSBub2RlO1xuICAgICAgICB0aGlzLmxhc3ROb2RlID0gdGV4dDtcbiAgICB9XG4gICAgb25jZGF0YWVuZCgpIHtcbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG51bGw7XG4gICAgfVxuICAgIG9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKG5hbWUsIGRhdGEpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24obmFtZSwgZGF0YSk7XG4gICAgICAgIHRoaXMuYWRkTm9kZShub2RlKTtcbiAgICB9XG4gICAgaGFuZGxlQ2FsbGJhY2soZXJyb3IpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2soZXJyb3IsIHRoaXMuZG9tKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkTm9kZShub2RlKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMudGFnU3RhY2tbdGhpcy50YWdTdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgY29uc3QgcHJldmlvdXNTaWJsaW5nID0gcGFyZW50LmNoaWxkcmVuW3BhcmVudC5jaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy53aXRoU3RhcnRJbmRpY2VzKSB7XG4gICAgICAgICAgICBub2RlLnN0YXJ0SW5kZXggPSB0aGlzLnBhcnNlci5zdGFydEluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMud2l0aEVuZEluZGljZXMpIHtcbiAgICAgICAgICAgIG5vZGUuZW5kSW5kZXggPSB0aGlzLnBhcnNlci5lbmRJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaChub2RlKTtcbiAgICAgICAgaWYgKHByZXZpb3VzU2libGluZykge1xuICAgICAgICAgICAgbm9kZS5wcmV2ID0gcHJldmlvdXNTaWJsaW5nO1xuICAgICAgICAgICAgcHJldmlvdXNTaWJsaW5nLm5leHQgPSBub2RlO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLmxhc3ROb2RlID0gbnVsbDtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBEb21IYW5kbGVyO1xuIiwiLy8gR2VuZXJhdGVkIHVzaW5nIHNjcmlwdHMvd3JpdGUtZGVjb2RlLW1hcC50c1xuZXhwb3J0IGRlZmF1bHQgbmV3IFVpbnQxNkFycmF5KFxuLy8gcHJldHRpZXItaWdub3JlXG5cIlxcdTFkNDE8XFx4ZDVcXHUwMTMxXFx1MDI4YVxcdTA0OWRcXHUwNTdiXFx1MDVkMFxcdTA2NzVcXHUwNmRlXFx1MDdhMlxcdTA3ZDZcXHUwODBmXFx1MGE0YVxcdTBhOTFcXHUwZGExXFx1MGU2ZFxcdTBmMDlcXHUwZjI2XFx1MTBjYVxcdTEyMjhcXHUxMmUxXFx1MTQxNVxcdTE0OWRcXHUxNGMzXFx1MTRkZlxcdTE1MjVcXDBcXDBcXDBcXDBcXDBcXDBcXHUxNTZiXFx1MTZjZFxcdTE5OGRcXHUxYzEyXFx1MWRkZFxcdTFmN2VcXHUyMDYwXFx1MjFiMFxcdTIyOGRcXHUyM2MwXFx1MjNmYlxcdTI0NDJcXHUyODI0XFx1MjkxMlxcdTJkMDhcXHUyZTQ4XFx1MmZjZVxcdTMwMTZcXHUzMmJhXFx1MzYzOVxcdTM3YWNcXHUzOGZlXFx1M2EyOFxcdTNhNzFcXHUzYWUwXFx1M2IyZVxcdTA4MDBFTWFiY2ZnbG1ub3Byc3R1XFxcXGJmbXNcXHg3ZlxceDg0XFx4OGJcXHg5MFxceDk1XFx4OThcXHhhNlxceGIzXFx4YjlcXHhjOFxceGNmbGlnXFx1ODAzYlxceGM2XFx1NDBjNlBcXHU4MDNiJlxcdTQwMjZjdXRlXFx1ODAzYlxceGMxXFx1NDBjMXJldmU7XFx1NDEwMlxcdTAxMDBpeXh9cmNcXHU4MDNiXFx4YzJcXHU0MGMyO1xcdTQ0MTByO1xcdWMwMDBcXHVkODM1XFx1ZGQwNHJhdmVcXHU4MDNiXFx4YzBcXHU0MGMwcGhhO1xcdTQzOTFhY3I7XFx1NDEwMGQ7XFx1NmE1M1xcdTAxMDBncFxceDlkXFx4YTFvbjtcXHU0MTA0ZjtcXHVjMDAwXFx1ZDgzNVxcdWRkMzhwbHlGdW5jdGlvbjtcXHU2MDYxaW5nXFx1ODAzYlxceGM1XFx1NDBjNVxcdTAxMDBjc1xceGJlXFx4YzNyO1xcdWMwMDBcXHVkODM1XFx1ZGM5Y2lnbjtcXHU2MjU0aWxkZVxcdTgwM2JcXHhjM1xcdTQwYzNtbFxcdTgwM2JcXHhjNFxcdTQwYzRcXHUwNDAwYWNlZm9yc3VcXHhlNVxceGZiXFx4ZmVcXHUwMTE3XFx1MDExY1xcdTAxMjJcXHUwMTI3XFx1MDEyYVxcdTAxMDBjclxceGVhXFx4ZjJrc2xhc2g7XFx1NjIxNlxcdTAxNzZcXHhmNlxceGY4O1xcdTZhZTdlZDtcXHU2MzA2eTtcXHU0NDExXFx1MDE4MGNydFxcdTAxMDVcXHUwMTBiXFx1MDExNGF1c2U7XFx1NjIzNW5vdWxsaXM7XFx1NjEyY2E7XFx1NDM5MnI7XFx1YzAwMFxcdWQ4MzVcXHVkZDA1cGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDM5ZXZlO1xcdTQyZDhjXFx4ZjJcXHUwMTEzbXBlcTtcXHU2MjRlXFx1MDcwMEhPYWNkZWZoaWxvcnN1XFx1MDE0ZFxcdTAxNTFcXHUwMTU2XFx1MDE4MFxcdTAxOWVcXHUwMWEyXFx1MDFiNVxcdTAxYjdcXHUwMWJhXFx1MDFkY1xcdTAyMTVcXHUwMjczXFx1MDI3OFxcdTAyN2VjeTtcXHU0NDI3UFlcXHU4MDNiXFx4YTlcXHU0MGE5XFx1MDE4MGNweVxcdTAxNWRcXHUwMTYyXFx1MDE3YXV0ZTtcXHU0MTA2XFx1MDEwMDtpXFx1MDE2N1xcdTAxNjhcXHU2MmQydGFsRGlmZmVyZW50aWFsRDtcXHU2MTQ1bGV5cztcXHU2MTJkXFx1MDIwMGFlaW9cXHUwMTg5XFx1MDE4ZVxcdTAxOTRcXHUwMTk4cm9uO1xcdTQxMGNkaWxcXHU4MDNiXFx4YzdcXHU0MGM3cmM7XFx1NDEwOG5pbnQ7XFx1NjIzMG90O1xcdTQxMGFcXHUwMTAwZG5cXHUwMWE3XFx1MDFhZGlsbGE7XFx1NDBiOHRlckRvdDtcXHU0MGI3XFx4ZjJcXHUwMTdmaTtcXHU0M2E3cmNsZVxcdTAyMDBETVBUXFx1MDFjN1xcdTAxY2JcXHUwMWQxXFx1MDFkNm90O1xcdTYyOTlpbnVzO1xcdTYyOTZsdXM7XFx1NjI5NWltZXM7XFx1NjI5N29cXHUwMTAwY3NcXHUwMWUyXFx1MDFmOGt3aXNlQ29udG91ckludGVncmFsO1xcdTYyMzJlQ3VybHlcXHUwMTAwRFFcXHUwMjAzXFx1MDIwZm91YmxlUXVvdGU7XFx1NjAxZHVvdGU7XFx1NjAxOVxcdTAyMDBsbnB1XFx1MDIxZVxcdTAyMjhcXHUwMjQ3XFx1MDI1NW9uXFx1MDEwMDtlXFx1MDIyNVxcdTAyMjZcXHU2MjM3O1xcdTZhNzRcXHUwMTgwZ2l0XFx1MDIyZlxcdTAyMzZcXHUwMjNhcnVlbnQ7XFx1NjI2MW50O1xcdTYyMmZvdXJJbnRlZ3JhbDtcXHU2MjJlXFx1MDEwMGZyXFx1MDI0Y1xcdTAyNGU7XFx1NjEwMm9kdWN0O1xcdTYyMTBudGVyQ2xvY2t3aXNlQ29udG91ckludGVncmFsO1xcdTYyMzNvc3M7XFx1NmEyZmNyO1xcdWMwMDBcXHVkODM1XFx1ZGM5ZXBcXHUwMTAwO0NcXHUwMjg0XFx1MDI4NVxcdTYyZDNhcDtcXHU2MjRkXFx1MDU4MERKU1phY2VmaW9zXFx1MDJhMFxcdTAyYWNcXHUwMmIwXFx1MDJiNFxcdTAyYjhcXHUwMmNiXFx1MDJkN1xcdTAyZTFcXHUwMmU2XFx1MDMzM1xcdTA0OGRcXHUwMTAwO29cXHUwMTc5XFx1MDJhNXRyYWhkO1xcdTY5MTFjeTtcXHU0NDAyY3k7XFx1NDQwNWN5O1xcdTQ0MGZcXHUwMTgwZ3JzXFx1MDJiZlxcdTAyYzRcXHUwMmM3Z2VyO1xcdTYwMjFyO1xcdTYxYTFodjtcXHU2YWU0XFx1MDEwMGF5XFx1MDJkMFxcdTAyZDVyb247XFx1NDEwZTtcXHU0NDE0bFxcdTAxMDA7dFxcdTAyZGRcXHUwMmRlXFx1NjIwN2E7XFx1NDM5NHI7XFx1YzAwMFxcdWQ4MzVcXHVkZDA3XFx1MDEwMGFmXFx1MDJlYlxcdTAzMjdcXHUwMTAwY21cXHUwMmYwXFx1MDMyMnJpdGljYWxcXHUwMjAwQURHVFxcdTAzMDBcXHUwMzA2XFx1MDMxNlxcdTAzMWNjdXRlO1xcdTQwYjRvXFx1MDE3NFxcdTAzMGJcXHUwMzBkO1xcdTQyZDlibGVBY3V0ZTtcXHU0MmRkcmF2ZTtcXHU0MDYwaWxkZTtcXHU0MmRjb25kO1xcdTYyYzRmZXJlbnRpYWxEO1xcdTYxNDZcXHUwNDcwXFx1MDMzZFxcMFxcMFxcMFxcdTAzNDJcXHUwMzU0XFwwXFx1MDQwNWY7XFx1YzAwMFxcdWQ4MzVcXHVkZDNiXFx1MDE4MDtERVxcdTAzNDhcXHUwMzQ5XFx1MDM0ZFxcdTQwYThvdDtcXHU2MGRjcXVhbDtcXHU2MjUwYmxlXFx1MDMwMENETFJVVlxcdTAzNjNcXHUwMzcyXFx1MDM4MlxcdTAzY2ZcXHUwM2UyXFx1MDNmOG9udG91ckludGVncmFcXHhlY1xcdTAyMzlvXFx1MDI3NFxcdTAzNzlcXDBcXDBcXHUwMzdiXFx4YmJcXHUwMzQ5bkFycm93O1xcdTYxZDNcXHUwMTAwZW9cXHUwMzg3XFx1MDNhNGZ0XFx1MDE4MEFSVFxcdTAzOTBcXHUwMzk2XFx1MDNhMXJyb3c7XFx1NjFkMGlnaHRBcnJvdztcXHU2MWQ0ZVxceGU1XFx1MDJjYW5nXFx1MDEwMExSXFx1MDNhYlxcdTAzYzRlZnRcXHUwMTAwQVJcXHUwM2IzXFx1MDNiOXJyb3c7XFx1NjdmOGlnaHRBcnJvdztcXHU2N2ZhaWdodEFycm93O1xcdTY3ZjlpZ2h0XFx1MDEwMEFUXFx1MDNkOFxcdTAzZGVycm93O1xcdTYxZDJlZTtcXHU2MmE4cFxcdTAyNDFcXHUwM2U5XFwwXFwwXFx1MDNlZnJyb3c7XFx1NjFkMW93bkFycm93O1xcdTYxZDVlcnRpY2FsQmFyO1xcdTYyMjVuXFx1MDMwMEFCTFJUYVxcdTA0MTJcXHUwNDJhXFx1MDQzMFxcdTA0NWVcXHUwNDdmXFx1MDM3Y3Jyb3dcXHUwMTgwO0JVXFx1MDQxZFxcdTA0MWVcXHUwNDIyXFx1NjE5M2FyO1xcdTY5MTNwQXJyb3c7XFx1NjFmNXJldmU7XFx1NDMxMWVmdFxcdTAyZDJcXHUwNDNhXFwwXFx1MDQ0NlxcMFxcdTA0NTBpZ2h0VmVjdG9yO1xcdTY5NTBlZVZlY3RvcjtcXHU2OTVlZWN0b3JcXHUwMTAwO0JcXHUwNDU5XFx1MDQ1YVxcdTYxYmRhcjtcXHU2OTU2aWdodFxcdTAxZDRcXHUwNDY3XFwwXFx1MDQ3MWVlVmVjdG9yO1xcdTY5NWZlY3RvclxcdTAxMDA7QlxcdTA0N2FcXHUwNDdiXFx1NjFjMWFyO1xcdTY5NTdlZVxcdTAxMDA7QVxcdTA0ODZcXHUwNDg3XFx1NjJhNHJyb3c7XFx1NjFhN1xcdTAxMDBjdFxcdTA0OTJcXHUwNDk3cjtcXHVjMDAwXFx1ZDgzNVxcdWRjOWZyb2s7XFx1NDExMFxcdTA4MDBOVGFjZGZnbG1vcHFzdHV4XFx1MDRiZFxcdTA0YzBcXHUwNGM0XFx1MDRjYlxcdTA0ZGVcXHUwNGUyXFx1MDRlN1xcdTA0ZWVcXHUwNGY1XFx1MDUyMVxcdTA1MmZcXHUwNTM2XFx1MDU1MlxcdTA1NWRcXHUwNTYwXFx1MDU2NUc7XFx1NDE0YUhcXHU4MDNiXFx4ZDBcXHU0MGQwY3V0ZVxcdTgwM2JcXHhjOVxcdTQwYzlcXHUwMTgwYWl5XFx1MDRkMlxcdTA0ZDdcXHUwNGRjcm9uO1xcdTQxMWFyY1xcdTgwM2JcXHhjYVxcdTQwY2E7XFx1NDQyZG90O1xcdTQxMTZyO1xcdWMwMDBcXHVkODM1XFx1ZGQwOHJhdmVcXHU4MDNiXFx4YzhcXHU0MGM4ZW1lbnQ7XFx1NjIwOFxcdTAxMDBhcFxcdTA0ZmFcXHUwNGZlY3I7XFx1NDExMnR5XFx1MDI1M1xcdTA1MDZcXDBcXDBcXHUwNTEybWFsbFNxdWFyZTtcXHU2NWZiZXJ5U21hbGxTcXVhcmU7XFx1NjVhYlxcdTAxMDBncFxcdTA1MjZcXHUwNTJhb247XFx1NDExOGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDNjc2lsb247XFx1NDM5NXVcXHUwMTAwYWlcXHUwNTNjXFx1MDU0OWxcXHUwMTAwO1RcXHUwNTQyXFx1MDU0M1xcdTZhNzVpbGRlO1xcdTYyNDJsaWJyaXVtO1xcdTYxY2NcXHUwMTAwY2lcXHUwNTU3XFx1MDU1YXI7XFx1NjEzMG07XFx1NmE3M2E7XFx1NDM5N21sXFx1ODAzYlxceGNiXFx1NDBjYlxcdTAxMDBpcFxcdTA1NmFcXHUwNTZmc3RzO1xcdTYyMDNvbmVudGlhbEU7XFx1NjE0N1xcdTAyODBjZmlvc1xcdTA1ODVcXHUwNTg4XFx1MDU4ZFxcdTA1YjJcXHUwNWNjeTtcXHU0NDI0cjtcXHVjMDAwXFx1ZDgzNVxcdWRkMDlsbGVkXFx1MDI1M1xcdTA1OTdcXDBcXDBcXHUwNWEzbWFsbFNxdWFyZTtcXHU2NWZjZXJ5U21hbGxTcXVhcmU7XFx1NjVhYVxcdTAzNzBcXHUwNWJhXFwwXFx1MDViZlxcMFxcMFxcdTA1YzRmO1xcdWMwMDBcXHVkODM1XFx1ZGQzZEFsbDtcXHU2MjAwcmllcnRyZjtcXHU2MTMxY1xceGYyXFx1MDVjYlxcdTA2MDBKVGFiY2RmZ29yc3RcXHUwNWU4XFx1MDVlY1xcdTA1ZWZcXHUwNWZhXFx1MDYwMFxcdTA2MTJcXHUwNjE2XFx1MDYxYlxcdTA2MWRcXHUwNjIzXFx1MDY2Y1xcdTA2NzJjeTtcXHU0NDAzXFx1ODAzYj5cXHU0MDNlbW1hXFx1MDEwMDtkXFx1MDVmN1xcdTA1ZjhcXHU0MzkzO1xcdTQzZGNyZXZlO1xcdTQxMWVcXHUwMTgwZWl5XFx1MDYwN1xcdTA2MGNcXHUwNjEwZGlsO1xcdTQxMjJyYztcXHU0MTFjO1xcdTQ0MTNvdDtcXHU0MTIwcjtcXHVjMDAwXFx1ZDgzNVxcdWRkMGE7XFx1NjJkOXBmO1xcdWMwMDBcXHVkODM1XFx1ZGQzZWVhdGVyXFx1MDMwMEVGR0xTVFxcdTA2MzVcXHUwNjQ0XFx1MDY0ZVxcdTA2NTZcXHUwNjViXFx1MDY2NnF1YWxcXHUwMTAwO0xcXHUwNjNlXFx1MDYzZlxcdTYyNjVlc3M7XFx1NjJkYnVsbEVxdWFsO1xcdTYyNjdyZWF0ZXI7XFx1NmFhMmVzcztcXHU2Mjc3bGFudEVxdWFsO1xcdTZhN2VpbGRlO1xcdTYyNzNjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYTI7XFx1NjI2YlxcdTA0MDBBYWNmaW9zdVxcdTA2ODVcXHUwNjhiXFx1MDY5NlxcdTA2OWJcXHUwNjllXFx1MDZhYVxcdTA2YmVcXHUwNmNhUkRjeTtcXHU0NDJhXFx1MDEwMGN0XFx1MDY5MFxcdTA2OTRlaztcXHU0MmM3O1xcdTQwNWVpcmM7XFx1NDEyNHI7XFx1NjEwY2xiZXJ0U3BhY2U7XFx1NjEwYlxcdTAxZjBcXHUwNmFmXFwwXFx1MDZiMmY7XFx1NjEwZGl6b250YWxMaW5lO1xcdTY1MDBcXHUwMTAwY3RcXHUwNmMzXFx1MDZjNVxceGYyXFx1MDZhOXJvaztcXHU0MTI2bXBcXHUwMTQ0XFx1MDZkMFxcdTA2ZDhvd25IdW1cXHhmMFxcdTAxMmZxdWFsO1xcdTYyNGZcXHUwNzAwRUpPYWNkZmdtbm9zdHVcXHUwNmZhXFx1MDZmZVxcdTA3MDNcXHUwNzA3XFx1MDcwZVxcdTA3MWFcXHUwNzFlXFx1MDcyMVxcdTA3MjhcXHUwNzQ0XFx1MDc3OFxcdTA3OGJcXHUwNzhmXFx1MDc5NWN5O1xcdTQ0MTVsaWc7XFx1NDEzMmN5O1xcdTQ0MDFjdXRlXFx1ODAzYlxceGNkXFx1NDBjZFxcdTAxMDBpeVxcdTA3MTNcXHUwNzE4cmNcXHU4MDNiXFx4Y2VcXHU0MGNlO1xcdTQ0MThvdDtcXHU0MTMwcjtcXHU2MTExcmF2ZVxcdTgwM2JcXHhjY1xcdTQwY2NcXHUwMTgwO2FwXFx1MDcyMFxcdTA3MmZcXHUwNzNmXFx1MDEwMGNnXFx1MDczNFxcdTA3MzdyO1xcdTQxMmFpbmFyeUk7XFx1NjE0OGxpZVxceGYzXFx1MDNkZFxcdTAxZjRcXHUwNzQ5XFwwXFx1MDc2MlxcdTAxMDA7ZVxcdTA3NGRcXHUwNzRlXFx1NjIyY1xcdTAxMDBnclxcdTA3NTNcXHUwNzU4cmFsO1xcdTYyMmJzZWN0aW9uO1xcdTYyYzJpc2libGVcXHUwMTAwQ1RcXHUwNzZjXFx1MDc3Mm9tbWE7XFx1NjA2M2ltZXM7XFx1NjA2MlxcdTAxODBncHRcXHUwNzdmXFx1MDc4M1xcdTA3ODhvbjtcXHU0MTJlZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNDBhO1xcdTQzOTljcjtcXHU2MTEwaWxkZTtcXHU0MTI4XFx1MDFlYlxcdTA3OWFcXDBcXHUwNzllY3k7XFx1NDQwNmxcXHU4MDNiXFx4Y2ZcXHU0MGNmXFx1MDI4MGNmb3N1XFx1MDdhY1xcdTA3YjdcXHUwN2JjXFx1MDdjMlxcdTA3ZDBcXHUwMTAwaXlcXHUwN2IxXFx1MDdiNXJjO1xcdTQxMzQ7XFx1NDQxOXI7XFx1YzAwMFxcdWQ4MzVcXHVkZDBkcGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDQxXFx1MDFlM1xcdTA3YzdcXDBcXHUwN2NjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYTVyY3k7XFx1NDQwOGtjeTtcXHU0NDA0XFx1MDM4MEhKYWNmb3NcXHUwN2U0XFx1MDdlOFxcdTA3ZWNcXHUwN2YxXFx1MDdmZFxcdTA4MDJcXHUwODA4Y3k7XFx1NDQyNWN5O1xcdTQ0MGNwcGE7XFx1NDM5YVxcdTAxMDBleVxcdTA3ZjZcXHUwN2ZiZGlsO1xcdTQxMzY7XFx1NDQxYXI7XFx1YzAwMFxcdWQ4MzVcXHVkZDBlcGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDQyY3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2E2XFx1MDU4MEpUYWNlZmxtb3N0XFx1MDgyNVxcdTA4MjlcXHUwODJjXFx1MDg1MFxcdTA4NjNcXHUwOWIzXFx1MDliOFxcdTA5YzdcXHUwOWNkXFx1MGEzN1xcdTBhNDdjeTtcXHU0NDA5XFx1ODAzYjxcXHU0MDNjXFx1MDI4MGNtbnByXFx1MDgzN1xcdTA4M2NcXHUwODQxXFx1MDg0NFxcdTA4NGR1dGU7XFx1NDEzOWJkYTtcXHU0MzliZztcXHU2N2VhbGFjZXRyZjtcXHU2MTEycjtcXHU2MTllXFx1MDE4MGFleVxcdTA4NTdcXHUwODVjXFx1MDg2MXJvbjtcXHU0MTNkZGlsO1xcdTQxM2I7XFx1NDQxYlxcdTAxMDBmc1xcdTA4NjhcXHUwOTcwdFxcdTA1MDBBQ0RGUlRVVmFyXFx1MDg3ZVxcdTA4YTlcXHUwOGIxXFx1MDhlMFxcdTA4ZTZcXHUwOGZjXFx1MDkyZlxcdTA5NWJcXHUwMzkwXFx1MDk2YVxcdTAxMDBuclxcdTA4ODNcXHUwODhmZ2xlQnJhY2tldDtcXHU2N2U4cm93XFx1MDE4MDtCUlxcdTA4OTlcXHUwODlhXFx1MDg5ZVxcdTYxOTBhcjtcXHU2MWU0aWdodEFycm93O1xcdTYxYzZlaWxpbmc7XFx1NjMwOG9cXHUwMWY1XFx1MDhiN1xcMFxcdTA4YzNibGVCcmFja2V0O1xcdTY3ZTZuXFx1MDFkNFxcdTA4YzhcXDBcXHUwOGQyZWVWZWN0b3I7XFx1Njk2MWVjdG9yXFx1MDEwMDtCXFx1MDhkYlxcdTA4ZGNcXHU2MWMzYXI7XFx1Njk1OWxvb3I7XFx1NjMwYWlnaHRcXHUwMTAwQVZcXHUwOGVmXFx1MDhmNXJyb3c7XFx1NjE5NGVjdG9yO1xcdTY5NGVcXHUwMTAwZXJcXHUwOTAxXFx1MDkxN2VcXHUwMTgwO0FWXFx1MDkwOVxcdTA5MGFcXHUwOTEwXFx1NjJhM3Jyb3c7XFx1NjFhNGVjdG9yO1xcdTY5NWFpYW5nbGVcXHUwMTgwO0JFXFx1MDkyNFxcdTA5MjVcXHUwOTI5XFx1NjJiMmFyO1xcdTY5Y2ZxdWFsO1xcdTYyYjRwXFx1MDE4MERUVlxcdTA5MzdcXHUwOTQyXFx1MDk0Y293blZlY3RvcjtcXHU2OTUxZWVWZWN0b3I7XFx1Njk2MGVjdG9yXFx1MDEwMDtCXFx1MDk1NlxcdTA5NTdcXHU2MWJmYXI7XFx1Njk1OGVjdG9yXFx1MDEwMDtCXFx1MDk2NVxcdTA5NjZcXHU2MWJjYXI7XFx1Njk1MmlnaHRcXHhlMVxcdTAzOWNzXFx1MDMwMEVGR0xTVFxcdTA5N2VcXHUwOThiXFx1MDk5NVxcdTA5OWRcXHUwOWEyXFx1MDlhZHF1YWxHcmVhdGVyO1xcdTYyZGF1bGxFcXVhbDtcXHU2MjY2cmVhdGVyO1xcdTYyNzZlc3M7XFx1NmFhMWxhbnRFcXVhbDtcXHU2YTdkaWxkZTtcXHU2MjcycjtcXHVjMDAwXFx1ZDgzNVxcdWRkMGZcXHUwMTAwO2VcXHUwOWJkXFx1MDliZVxcdTYyZDhmdGFycm93O1xcdTYxZGFpZG90O1xcdTQxM2ZcXHUwMTgwbnB3XFx1MDlkNFxcdTBhMTZcXHUwYTFiZ1xcdTAyMDBMUmxyXFx1MDlkZVxcdTA5ZjdcXHUwYTAyXFx1MGExMGVmdFxcdTAxMDBBUlxcdTA5ZTZcXHUwOWVjcnJvdztcXHU2N2Y1aWdodEFycm93O1xcdTY3ZjdpZ2h0QXJyb3c7XFx1NjdmNmVmdFxcdTAxMDBhclxcdTAzYjNcXHUwYTBhaWdodFxceGUxXFx1MDNiZmlnaHRcXHhlMVxcdTAzY2FmO1xcdWMwMDBcXHVkODM1XFx1ZGQ0M2VyXFx1MDEwMExSXFx1MGEyMlxcdTBhMmNlZnRBcnJvdztcXHU2MTk5aWdodEFycm93O1xcdTYxOThcXHUwMTgwY2h0XFx1MGEzZVxcdTBhNDBcXHUwYTQyXFx4ZjJcXHUwODRjO1xcdTYxYjByb2s7XFx1NDE0MTtcXHU2MjZhXFx1MDQwMGFjZWZpb3N1XFx1MGE1YVxcdTBhNWRcXHUwYTYwXFx1MGE3N1xcdTBhN2NcXHUwYTg1XFx1MGE4YlxcdTBhOGVwO1xcdTY5MDV5O1xcdTQ0MWNcXHUwMTAwZGxcXHUwYTY1XFx1MGE2Zml1bVNwYWNlO1xcdTYwNWZsaW50cmY7XFx1NjEzM3I7XFx1YzAwMFxcdWQ4MzVcXHVkZDEwbnVzUGx1cztcXHU2MjEzcGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDQ0Y1xceGYyXFx1MGE3NjtcXHU0MzljXFx1MDQ4MEphY2Vmb3N0dVxcdTBhYTNcXHUwYWE3XFx1MGFhZFxcdTBhYzBcXHUwYjE0XFx1MGIxOVxcdTBkOTFcXHUwZDk3XFx1MGQ5ZWN5O1xcdTQ0MGFjdXRlO1xcdTQxNDNcXHUwMTgwYWV5XFx1MGFiNFxcdTBhYjlcXHUwYWJlcm9uO1xcdTQxNDdkaWw7XFx1NDE0NTtcXHU0NDFkXFx1MDE4MGdzd1xcdTBhYzdcXHUwYWYwXFx1MGIwZWF0aXZlXFx1MDE4ME1UVlxcdTBhZDNcXHUwYWRmXFx1MGFlOGVkaXVtU3BhY2U7XFx1NjAwYmhpXFx1MDEwMGNuXFx1MGFlNlxcdTBhZDhcXHhlYlxcdTBhZDllcnlUaGlcXHhlZVxcdTBhZDl0ZWRcXHUwMTAwR0xcXHUwYWY4XFx1MGIwNnJlYXRlckdyZWF0ZVxceGYyXFx1MDY3M2Vzc0xlc1xceGYzXFx1MGE0OExpbmU7XFx1NDAwYXI7XFx1YzAwMFxcdWQ4MzVcXHVkZDExXFx1MDIwMEJucHRcXHUwYjIyXFx1MGIyOFxcdTBiMzdcXHUwYjNhcmVhaztcXHU2MDYwQnJlYWtpbmdTcGFjZTtcXHU0MGEwZjtcXHU2MTE1XFx1MDY4MDtDREVHSExOUFJTVFZcXHUwYjU1XFx1MGI1NlxcdTBiNmFcXHUwYjdjXFx1MGJhMVxcdTBiZWJcXHUwYzA0XFx1MGM1ZVxcdTBjODRcXHUwY2E2XFx1MGNkOFxcdTBkNjFcXHUwZDg1XFx1NmFlY1xcdTAxMDBvdVxcdTBiNWJcXHUwYjY0bmdydWVudDtcXHU2MjYycENhcDtcXHU2MjZkb3VibGVWZXJ0aWNhbEJhcjtcXHU2MjI2XFx1MDE4MGxxeFxcdTBiODNcXHUwYjhhXFx1MGI5YmVtZW50O1xcdTYyMDl1YWxcXHUwMTAwO1RcXHUwYjkyXFx1MGI5M1xcdTYyNjBpbGRlO1xcdWMwMDBcXHUyMjQyXFx1MDMzOGlzdHM7XFx1NjIwNHJlYXRlclxcdTAzODA7RUZHTFNUXFx1MGJiNlxcdTBiYjdcXHUwYmJkXFx1MGJjOVxcdTBiZDNcXHUwYmQ4XFx1MGJlNVxcdTYyNmZxdWFsO1xcdTYyNzF1bGxFcXVhbDtcXHVjMDAwXFx1MjI2N1xcdTAzMzhyZWF0ZXI7XFx1YzAwMFxcdTIyNmJcXHUwMzM4ZXNzO1xcdTYyNzlsYW50RXF1YWw7XFx1YzAwMFxcdTJhN2VcXHUwMzM4aWxkZTtcXHU2Mjc1dW1wXFx1MDE0NFxcdTBiZjJcXHUwYmZkb3duSHVtcDtcXHVjMDAwXFx1MjI0ZVxcdTAzMzhxdWFsO1xcdWMwMDBcXHUyMjRmXFx1MDMzOGVcXHUwMTAwZnNcXHUwYzBhXFx1MGMyN3RUcmlhbmdsZVxcdTAxODA7QkVcXHUwYzFhXFx1MGMxYlxcdTBjMjFcXHU2MmVhYXI7XFx1YzAwMFxcdTI5Y2ZcXHUwMzM4cXVhbDtcXHU2MmVjc1xcdTAzMDA7RUdMU1RcXHUwYzM1XFx1MGMzNlxcdTBjM2NcXHUwYzQ0XFx1MGM0YlxcdTBjNThcXHU2MjZlcXVhbDtcXHU2MjcwcmVhdGVyO1xcdTYyNzhlc3M7XFx1YzAwMFxcdTIyNmFcXHUwMzM4bGFudEVxdWFsO1xcdWMwMDBcXHUyYTdkXFx1MDMzOGlsZGU7XFx1NjI3NGVzdGVkXFx1MDEwMEdMXFx1MGM2OFxcdTBjNzlyZWF0ZXJHcmVhdGVyO1xcdWMwMDBcXHUyYWEyXFx1MDMzOGVzc0xlc3M7XFx1YzAwMFxcdTJhYTFcXHUwMzM4cmVjZWRlc1xcdTAxODA7RVNcXHUwYzkyXFx1MGM5M1xcdTBjOWJcXHU2MjgwcXVhbDtcXHVjMDAwXFx1MmFhZlxcdTAzMzhsYW50RXF1YWw7XFx1NjJlMFxcdTAxMDBlaVxcdTBjYWJcXHUwY2I5dmVyc2VFbGVtZW50O1xcdTYyMGNnaHRUcmlhbmdsZVxcdTAxODA7QkVcXHUwY2NiXFx1MGNjY1xcdTBjZDJcXHU2MmViYXI7XFx1YzAwMFxcdTI5ZDBcXHUwMzM4cXVhbDtcXHU2MmVkXFx1MDEwMHF1XFx1MGNkZFxcdTBkMGN1YXJlU3VcXHUwMTAwYnBcXHUwY2U4XFx1MGNmOXNldFxcdTAxMDA7RVxcdTBjZjBcXHUwY2YzXFx1YzAwMFxcdTIyOGZcXHUwMzM4cXVhbDtcXHU2MmUyZXJzZXRcXHUwMTAwO0VcXHUwZDAzXFx1MGQwNlxcdWMwMDBcXHUyMjkwXFx1MDMzOHF1YWw7XFx1NjJlM1xcdTAxODBiY3BcXHUwZDEzXFx1MGQyNFxcdTBkNGVzZXRcXHUwMTAwO0VcXHUwZDFiXFx1MGQxZVxcdWMwMDBcXHUyMjgyXFx1MjBkMnF1YWw7XFx1NjI4OGNlZWRzXFx1MDIwMDtFU1RcXHUwZDMyXFx1MGQzM1xcdTBkM2JcXHUwZDQ2XFx1NjI4MXF1YWw7XFx1YzAwMFxcdTJhYjBcXHUwMzM4bGFudEVxdWFsO1xcdTYyZTFpbGRlO1xcdWMwMDBcXHUyMjdmXFx1MDMzOGVyc2V0XFx1MDEwMDtFXFx1MGQ1OFxcdTBkNWJcXHVjMDAwXFx1MjI4M1xcdTIwZDJxdWFsO1xcdTYyODlpbGRlXFx1MDIwMDtFRlRcXHUwZDZlXFx1MGQ2ZlxcdTBkNzVcXHUwZDdmXFx1NjI0MXF1YWw7XFx1NjI0NHVsbEVxdWFsO1xcdTYyNDdpbGRlO1xcdTYyNDllcnRpY2FsQmFyO1xcdTYyMjRjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYTlpbGRlXFx1ODAzYlxceGQxXFx1NDBkMTtcXHU0MzlkXFx1MDcwMEVhY2RmZ21vcHJzdHV2XFx1MGRiZFxcdTBkYzJcXHUwZGM5XFx1MGRkNVxcdTBkZGJcXHUwZGUwXFx1MGRlN1xcdTBkZmNcXHUwZTAyXFx1MGUyMFxcdTBlMjJcXHUwZTMyXFx1MGUzZlxcdTBlNDRsaWc7XFx1NDE1MmN1dGVcXHU4MDNiXFx4ZDNcXHU0MGQzXFx1MDEwMGl5XFx1MGRjZVxcdTBkZDNyY1xcdTgwM2JcXHhkNFxcdTQwZDQ7XFx1NDQxZWJsYWM7XFx1NDE1MHI7XFx1YzAwMFxcdWQ4MzVcXHVkZDEycmF2ZVxcdTgwM2JcXHhkMlxcdTQwZDJcXHUwMTgwYWVpXFx1MGRlZVxcdTBkZjJcXHUwZGY2Y3I7XFx1NDE0Y2dhO1xcdTQzYTljcm9uO1xcdTQzOWZwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNDZlbkN1cmx5XFx1MDEwMERRXFx1MGUwZVxcdTBlMWFvdWJsZVF1b3RlO1xcdTYwMWN1b3RlO1xcdTYwMTg7XFx1NmE1NFxcdTAxMDBjbFxcdTBlMjdcXHUwZTJjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYWFhc2hcXHU4MDNiXFx4ZDhcXHU0MGQ4aVxcdTAxNmNcXHUwZTM3XFx1MGUzY2RlXFx1ODAzYlxceGQ1XFx1NDBkNWVzO1xcdTZhMzdtbFxcdTgwM2JcXHhkNlxcdTQwZDZlclxcdTAxMDBCUFxcdTBlNGJcXHUwZTYwXFx1MDEwMGFyXFx1MGU1MFxcdTBlNTNyO1xcdTYwM2VhY1xcdTAxMDBla1xcdTBlNWFcXHUwZTVjO1xcdTYzZGVldDtcXHU2M2I0YXJlbnRoZXNpcztcXHU2M2RjXFx1MDQ4MGFjZmhpbG9yc1xcdTBlN2ZcXHUwZTg3XFx1MGU4YVxcdTBlOGZcXHUwZTkyXFx1MGU5NFxcdTBlOWRcXHUwZWIwXFx1MGVmY3J0aWFsRDtcXHU2MjAyeTtcXHU0NDFmcjtcXHVjMDAwXFx1ZDgzNVxcdWRkMTNpO1xcdTQzYTY7XFx1NDNhMHVzTWludXM7XFx1NDBiMVxcdTAxMDBpcFxcdTBlYTJcXHUwZWFkbmNhcmVwbGFuXFx4ZTVcXHUwNjlkZjtcXHU2MTE5XFx1MDIwMDtlaW9cXHUwZWI5XFx1MGViYVxcdTBlZTBcXHUwZWU0XFx1NmFiYmNlZGVzXFx1MDIwMDtFU1RcXHUwZWM4XFx1MGVjOVxcdTBlY2ZcXHUwZWRhXFx1NjI3YXF1YWw7XFx1NmFhZmxhbnRFcXVhbDtcXHU2MjdjaWxkZTtcXHU2MjdlbWU7XFx1NjAzM1xcdTAxMDBkcFxcdTBlZTlcXHUwZWVldWN0O1xcdTYyMGZvcnRpb25cXHUwMTAwO2FcXHUwMjI1XFx1MGVmOWw7XFx1NjIxZFxcdTAxMDBjaVxcdTBmMDFcXHUwZjA2cjtcXHVjMDAwXFx1ZDgzNVxcdWRjYWI7XFx1NDNhOFxcdTAyMDBVZm9zXFx1MGYxMVxcdTBmMTZcXHUwZjFiXFx1MGYxZk9UXFx1ODAzYlxcXCJcXHU0MDIycjtcXHVjMDAwXFx1ZDgzNVxcdWRkMTRwZjtcXHU2MTFhY3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2FjXFx1MDYwMEJFYWNlZmhpb3JzdVxcdTBmM2VcXHUwZjQzXFx1MGY0N1xcdTBmNjBcXHUwZjczXFx1MGZhN1xcdTBmYWFcXHUwZmFkXFx1MTA5NlxcdTEwYTlcXHUxMGI0XFx1MTBiZWFycjtcXHU2OTEwR1xcdTgwM2JcXHhhZVxcdTQwYWVcXHUwMTgwY25yXFx1MGY0ZVxcdTBmNTNcXHUwZjU2dXRlO1xcdTQxNTRnO1xcdTY3ZWJyXFx1MDEwMDt0XFx1MGY1Y1xcdTBmNWRcXHU2MWEwbDtcXHU2OTE2XFx1MDE4MGFleVxcdTBmNjdcXHUwZjZjXFx1MGY3MXJvbjtcXHU0MTU4ZGlsO1xcdTQxNTY7XFx1NDQyMFxcdTAxMDA7dlxcdTBmNzhcXHUwZjc5XFx1NjExY2Vyc2VcXHUwMTAwRVVcXHUwZjgyXFx1MGY5OVxcdTAxMDBscVxcdTBmODdcXHUwZjhlZW1lbnQ7XFx1NjIwYnVpbGlicml1bTtcXHU2MWNicEVxdWlsaWJyaXVtO1xcdTY5NmZyXFx4YmJcXHUwZjc5bztcXHU0M2ExZ2h0XFx1MDQwMEFDREZUVVZhXFx1MGZjMVxcdTBmZWJcXHUwZmYzXFx1MTAyMlxcdTEwMjhcXHUxMDViXFx1MTA4N1xcdTAzZDhcXHUwMTAwbnJcXHUwZmM2XFx1MGZkMmdsZUJyYWNrZXQ7XFx1NjdlOXJvd1xcdTAxODA7QkxcXHUwZmRjXFx1MGZkZFxcdTBmZTFcXHU2MTkyYXI7XFx1NjFlNWVmdEFycm93O1xcdTYxYzRlaWxpbmc7XFx1NjMwOW9cXHUwMWY1XFx1MGZmOVxcMFxcdTEwMDVibGVCcmFja2V0O1xcdTY3ZTduXFx1MDFkNFxcdTEwMGFcXDBcXHUxMDE0ZWVWZWN0b3I7XFx1Njk1ZGVjdG9yXFx1MDEwMDtCXFx1MTAxZFxcdTEwMWVcXHU2MWMyYXI7XFx1Njk1NWxvb3I7XFx1NjMwYlxcdTAxMDBlclxcdTEwMmRcXHUxMDQzZVxcdTAxODA7QVZcXHUxMDM1XFx1MTAzNlxcdTEwM2NcXHU2MmEycnJvdztcXHU2MWE2ZWN0b3I7XFx1Njk1YmlhbmdsZVxcdTAxODA7QkVcXHUxMDUwXFx1MTA1MVxcdTEwNTVcXHU2MmIzYXI7XFx1NjlkMHF1YWw7XFx1NjJiNXBcXHUwMTgwRFRWXFx1MTA2M1xcdTEwNmVcXHUxMDc4b3duVmVjdG9yO1xcdTY5NGZlZVZlY3RvcjtcXHU2OTVjZWN0b3JcXHUwMTAwO0JcXHUxMDgyXFx1MTA4M1xcdTYxYmVhcjtcXHU2OTU0ZWN0b3JcXHUwMTAwO0JcXHUxMDkxXFx1MTA5MlxcdTYxYzBhcjtcXHU2OTUzXFx1MDEwMHB1XFx1MTA5YlxcdTEwOWVmO1xcdTYxMWRuZEltcGxpZXM7XFx1Njk3MGlnaHRhcnJvdztcXHU2MWRiXFx1MDEwMGNoXFx1MTBiOVxcdTEwYmNyO1xcdTYxMWI7XFx1NjFiMWxlRGVsYXllZDtcXHU2OWY0XFx1MDY4MEhPYWNmaGltb3FzdHVcXHUxMGU0XFx1MTBmMVxcdTEwZjdcXHUxMGZkXFx1MTExOVxcdTExMWVcXHUxMTUxXFx1MTE1NlxcdTExNjFcXHUxMTY3XFx1MTFiNVxcdTExYmJcXHUxMWJmXFx1MDEwMENjXFx1MTBlOVxcdTEwZWVIY3k7XFx1NDQyOXk7XFx1NDQyOEZUY3k7XFx1NDQyY2N1dGU7XFx1NDE1YVxcdTAyODA7YWVpeVxcdTExMDhcXHUxMTA5XFx1MTEwZVxcdTExMTNcXHUxMTE3XFx1NmFiY3JvbjtcXHU0MTYwZGlsO1xcdTQxNWVyYztcXHU0MTVjO1xcdTQ0MjFyO1xcdWMwMDBcXHVkODM1XFx1ZGQxNm9ydFxcdTAyMDBETFJVXFx1MTEyYVxcdTExMzRcXHUxMTNlXFx1MTE0OW93bkFycm93XFx4YmJcXHUwNDFlZWZ0QXJyb3dcXHhiYlxcdTA4OWFpZ2h0QXJyb3dcXHhiYlxcdTBmZGRwQXJyb3c7XFx1NjE5MWdtYTtcXHU0M2EzYWxsQ2lyY2xlO1xcdTYyMThwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNGFcXHUwMjcyXFx1MTE2ZFxcMFxcMFxcdTExNzB0O1xcdTYyMWFhcmVcXHUwMjAwO0lTVVxcdTExN2JcXHUxMTdjXFx1MTE4OVxcdTExYWZcXHU2NWExbnRlcnNlY3Rpb247XFx1NjI5M3VcXHUwMTAwYnBcXHUxMThmXFx1MTE5ZXNldFxcdTAxMDA7RVxcdTExOTdcXHUxMTk4XFx1NjI4ZnF1YWw7XFx1NjI5MWVyc2V0XFx1MDEwMDtFXFx1MTFhOFxcdTExYTlcXHU2MjkwcXVhbDtcXHU2MjkybmlvbjtcXHU2Mjk0Y3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2FlYXI7XFx1NjJjNlxcdTAyMDBiY21wXFx1MTFjOFxcdTExZGJcXHUxMjA5XFx1MTIwYlxcdTAxMDA7c1xcdTExY2RcXHUxMWNlXFx1NjJkMGV0XFx1MDEwMDtFXFx1MTFjZFxcdTExZDVxdWFsO1xcdTYyODZcXHUwMTAwY2hcXHUxMWUwXFx1MTIwNWVlZHNcXHUwMjAwO0VTVFxcdTExZWRcXHUxMWVlXFx1MTFmNFxcdTExZmZcXHU2MjdicXVhbDtcXHU2YWIwbGFudEVxdWFsO1xcdTYyN2RpbGRlO1xcdTYyN2ZUaFxceGUxXFx1MGY4YztcXHU2MjExXFx1MDE4MDtlc1xcdTEyMTJcXHUxMjEzXFx1MTIyM1xcdTYyZDFyc2V0XFx1MDEwMDtFXFx1MTIxY1xcdTEyMWRcXHU2MjgzcXVhbDtcXHU2Mjg3ZXRcXHhiYlxcdTEyMTNcXHUwNTgwSFJTYWNmaGlvcnNcXHUxMjNlXFx1MTI0NFxcdTEyNDlcXHUxMjU1XFx1MTI1ZVxcdTEyNzFcXHUxMjc2XFx1MTI5ZlxcdTEyYzJcXHUxMmM4XFx1MTJkMU9STlxcdTgwM2JcXHhkZVxcdTQwZGVBREU7XFx1NjEyMlxcdTAxMDBIY1xcdTEyNGVcXHUxMjUyY3k7XFx1NDQwYnk7XFx1NDQyNlxcdTAxMDBidVxcdTEyNWFcXHUxMjVjO1xcdTQwMDk7XFx1NDNhNFxcdTAxODBhZXlcXHUxMjY1XFx1MTI2YVxcdTEyNmZyb247XFx1NDE2NGRpbDtcXHU0MTYyO1xcdTQ0MjJyO1xcdWMwMDBcXHVkODM1XFx1ZGQxN1xcdTAxMDBlaVxcdTEyN2JcXHUxMjg5XFx1MDFmMlxcdTEyODBcXDBcXHUxMjg3ZWZvcmU7XFx1NjIzNGE7XFx1NDM5OFxcdTAxMDBjblxcdTEyOGVcXHUxMjk4a1NwYWNlO1xcdWMwMDBcXHUyMDVmXFx1MjAwYVNwYWNlO1xcdTYwMDlsZGVcXHUwMjAwO0VGVFxcdTEyYWJcXHUxMmFjXFx1MTJiMlxcdTEyYmNcXHU2MjNjcXVhbDtcXHU2MjQzdWxsRXF1YWw7XFx1NjI0NWlsZGU7XFx1NjI0OHBmO1xcdWMwMDBcXHVkODM1XFx1ZGQ0YmlwbGVEb3Q7XFx1NjBkYlxcdTAxMDBjdFxcdTEyZDZcXHUxMmRicjtcXHVjMDAwXFx1ZDgzNVxcdWRjYWZyb2s7XFx1NDE2NlxcdTBhZTFcXHUxMmY3XFx1MTMwZVxcdTEzMWFcXHUxMzI2XFwwXFx1MTMyY1xcdTEzMzFcXDBcXDBcXDBcXDBcXDBcXHUxMzM4XFx1MTMzZFxcdTEzNzdcXHUxMzg1XFwwXFx1MTNmZlxcdTE0MDRcXHUxNDBhXFx1MTQxMFxcdTAxMDBjclxcdTEyZmJcXHUxMzAxdXRlXFx1ODAzYlxceGRhXFx1NDBkYXJcXHUwMTAwO29cXHUxMzA3XFx1MTMwOFxcdTYxOWZjaXI7XFx1Njk0OXJcXHUwMWUzXFx1MTMxM1xcMFxcdTEzMTZ5O1xcdTQ0MGV2ZTtcXHU0MTZjXFx1MDEwMGl5XFx1MTMxZVxcdTEzMjNyY1xcdTgwM2JcXHhkYlxcdTQwZGI7XFx1NDQyM2JsYWM7XFx1NDE3MHI7XFx1YzAwMFxcdWQ4MzVcXHVkZDE4cmF2ZVxcdTgwM2JcXHhkOVxcdTQwZDlhY3I7XFx1NDE2YVxcdTAxMDBkaVxcdTEzNDFcXHUxMzY5ZXJcXHUwMTAwQlBcXHUxMzQ4XFx1MTM1ZFxcdTAxMDBhclxcdTEzNGRcXHUxMzUwcjtcXHU0MDVmYWNcXHUwMTAwZWtcXHUxMzU3XFx1MTM1OTtcXHU2M2RmZXQ7XFx1NjNiNWFyZW50aGVzaXM7XFx1NjNkZG9uXFx1MDEwMDtQXFx1MTM3MFxcdTEzNzFcXHU2MmMzbHVzO1xcdTYyOGVcXHUwMTAwZ3BcXHUxMzdiXFx1MTM3Zm9uO1xcdTQxNzJmO1xcdWMwMDBcXHVkODM1XFx1ZGQ0Y1xcdTA0MDBBREVUYWRwc1xcdTEzOTVcXHUxM2FlXFx1MTNiOFxcdTEzYzRcXHUwM2U4XFx1MTNkMlxcdTEzZDdcXHUxM2YzcnJvd1xcdTAxODA7QkRcXHUxMTUwXFx1MTNhMFxcdTEzYTRhcjtcXHU2OTEyb3duQXJyb3c7XFx1NjFjNW93bkFycm93O1xcdTYxOTVxdWlsaWJyaXVtO1xcdTY5NmVlZVxcdTAxMDA7QVxcdTEzY2JcXHUxM2NjXFx1NjJhNXJyb3c7XFx1NjFhNW93blxceGUxXFx1MDNmM2VyXFx1MDEwMExSXFx1MTNkZVxcdTEzZThlZnRBcnJvdztcXHU2MTk2aWdodEFycm93O1xcdTYxOTdpXFx1MDEwMDtsXFx1MTNmOVxcdTEzZmFcXHU0M2Qyb247XFx1NDNhNWluZztcXHU0MTZlY3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2IwaWxkZTtcXHU0MTY4bWxcXHU4MDNiXFx4ZGNcXHU0MGRjXFx1MDQ4MERiY2RlZm9zdlxcdTE0MjdcXHUxNDJjXFx1MTQzMFxcdTE0MzNcXHUxNDNlXFx1MTQ4NVxcdTE0OGFcXHUxNDkwXFx1MTQ5NmFzaDtcXHU2MmFiYXI7XFx1NmFlYnk7XFx1NDQxMmFzaFxcdTAxMDA7bFxcdTE0M2JcXHUxNDNjXFx1NjJhOTtcXHU2YWU2XFx1MDEwMGVyXFx1MTQ0M1xcdTE0NDU7XFx1NjJjMVxcdTAxODBidHlcXHUxNDRjXFx1MTQ1MFxcdTE0N2FhcjtcXHU2MDE2XFx1MDEwMDtpXFx1MTQ0ZlxcdTE0NTVjYWxcXHUwMjAwQkxTVFxcdTE0NjFcXHUxNDY1XFx1MTQ2YVxcdTE0NzRhcjtcXHU2MjIzaW5lO1xcdTQwN2NlcGFyYXRvcjtcXHU2NzU4aWxkZTtcXHU2MjQwVGhpblNwYWNlO1xcdTYwMGFyO1xcdWMwMDBcXHVkODM1XFx1ZGQxOXBmO1xcdWMwMDBcXHVkODM1XFx1ZGQ0ZGNyO1xcdWMwMDBcXHVkODM1XFx1ZGNiMWRhc2g7XFx1NjJhYVxcdTAyODBjZWZvc1xcdTE0YTdcXHUxNGFjXFx1MTRiMVxcdTE0YjZcXHUxNGJjaXJjO1xcdTQxNzRkZ2U7XFx1NjJjMHI7XFx1YzAwMFxcdWQ4MzVcXHVkZDFhcGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDRlY3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2IyXFx1MDIwMGZpb3NcXHUxNGNiXFx1MTRkMFxcdTE0ZDJcXHUxNGQ4cjtcXHVjMDAwXFx1ZDgzNVxcdWRkMWI7XFx1NDM5ZXBmO1xcdWMwMDBcXHVkODM1XFx1ZGQ0ZmNyO1xcdWMwMDBcXHVkODM1XFx1ZGNiM1xcdTA0ODBBSVVhY2Zvc3VcXHUxNGYxXFx1MTRmNVxcdTE0ZjlcXHUxNGZkXFx1MTUwNFxcdTE1MGZcXHUxNTE0XFx1MTUxYVxcdTE1MjBjeTtcXHU0NDJmY3k7XFx1NDQwN2N5O1xcdTQ0MmVjdXRlXFx1ODAzYlxceGRkXFx1NDBkZFxcdTAxMDBpeVxcdTE1MDlcXHUxNTBkcmM7XFx1NDE3NjtcXHU0NDJicjtcXHVjMDAwXFx1ZDgzNVxcdWRkMWNwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNTBjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYjRtbDtcXHU0MTc4XFx1MDQwMEhhY2RlZm9zXFx1MTUzNVxcdTE1MzlcXHUxNTNmXFx1MTU0YlxcdTE1NGZcXHUxNTVkXFx1MTU2MFxcdTE1NjRjeTtcXHU0NDE2Y3V0ZTtcXHU0MTc5XFx1MDEwMGF5XFx1MTU0NFxcdTE1NDlyb247XFx1NDE3ZDtcXHU0NDE3b3Q7XFx1NDE3YlxcdTAxZjJcXHUxNTU0XFwwXFx1MTU1Ym9XaWR0XFx4ZThcXHUwYWQ5YTtcXHU0Mzk2cjtcXHU2MTI4cGY7XFx1NjEyNGNyO1xcdWMwMDBcXHVkODM1XFx1ZGNiNVxcdTBiZTFcXHUxNTgzXFx1MTU4YVxcdTE1OTBcXDBcXHUxNWIwXFx1MTViNlxcdTE1YmZcXDBcXDBcXDBcXDBcXHUxNWM2XFx1MTVkYlxcdTE1ZWJcXHUxNjVmXFx1MTY2ZFxcMFxcdTE2OTVcXHUxNjliXFx1MTZiMlxcdTE2YjlcXDBcXHUxNmJlY3V0ZVxcdTgwM2JcXHhlMVxcdTQwZTFyZXZlO1xcdTQxMDNcXHUwMzAwO0VkaXV5XFx1MTU5Y1xcdTE1OWRcXHUxNWExXFx1MTVhM1xcdTE1YThcXHUxNWFkXFx1NjIzZTtcXHVjMDAwXFx1MjIzZVxcdTAzMzM7XFx1NjIzZnJjXFx1ODAzYlxceGUyXFx1NDBlMnRlXFx1ODBiYlxceGI0XFx1MDMwNjtcXHU0NDMwbGlnXFx1ODAzYlxceGU2XFx1NDBlNlxcdTAxMDA7clxceGIyXFx1MTViYTtcXHVjMDAwXFx1ZDgzNVxcdWRkMWVyYXZlXFx1ODAzYlxceGUwXFx1NDBlMFxcdTAxMDBlcFxcdTE1Y2FcXHUxNWQ2XFx1MDEwMGZwXFx1MTVjZlxcdTE1ZDRzeW07XFx1NjEzNVxceGU4XFx1MTVkM2hhO1xcdTQzYjFcXHUwMTAwYXBcXHUxNWRmY1xcdTAxMDBjbFxcdTE1ZTRcXHUxNWU3cjtcXHU0MTAxZztcXHU2YTNmXFx1MDI2NFxcdTE1ZjBcXDBcXDBcXHUxNjBhXFx1MDI4MDthZHN2XFx1MTVmYVxcdTE1ZmJcXHUxNWZmXFx1MTYwMVxcdTE2MDdcXHU2MjI3bmQ7XFx1NmE1NTtcXHU2YTVjbG9wZTtcXHU2YTU4O1xcdTZhNWFcXHUwMzgwO2VsbXJzelxcdTE2MThcXHUxNjE5XFx1MTYxYlxcdTE2MWVcXHUxNjNmXFx1MTY0ZlxcdTE2NTlcXHU2MjIwO1xcdTY5YTRlXFx4YmJcXHUxNjE5c2RcXHUwMTAwO2FcXHUxNjI1XFx1MTYyNlxcdTYyMjFcXHUwNDYxXFx1MTYzMFxcdTE2MzJcXHUxNjM0XFx1MTYzNlxcdTE2MzhcXHUxNjNhXFx1MTYzY1xcdTE2M2U7XFx1NjlhODtcXHU2OWE5O1xcdTY5YWE7XFx1NjlhYjtcXHU2OWFjO1xcdTY5YWQ7XFx1NjlhZTtcXHU2OWFmdFxcdTAxMDA7dlxcdTE2NDVcXHUxNjQ2XFx1NjIxZmJcXHUwMTAwO2RcXHUxNjRjXFx1MTY0ZFxcdTYyYmU7XFx1Njk5ZFxcdTAxMDBwdFxcdTE2NTRcXHUxNjU3aDtcXHU2MjIyXFx4YmJcXHhiOWFycjtcXHU2MzdjXFx1MDEwMGdwXFx1MTY2M1xcdTE2NjdvbjtcXHU0MTA1ZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNTJcXHUwMzgwO0VhZWlvcFxcdTEyYzFcXHUxNjdiXFx1MTY3ZFxcdTE2ODJcXHUxNjg0XFx1MTY4N1xcdTE2OGE7XFx1NmE3MGNpcjtcXHU2YTZmO1xcdTYyNGFkO1xcdTYyNGJzO1xcdTQwMjdyb3hcXHUwMTAwO2VcXHUxMmMxXFx1MTY5MlxceGYxXFx1MTY4M2luZ1xcdTgwM2JcXHhlNVxcdTQwZTVcXHUwMTgwY3R5XFx1MTZhMVxcdTE2YTZcXHUxNmE4cjtcXHVjMDAwXFx1ZDgzNVxcdWRjYjY7XFx1NDAyYW1wXFx1MDEwMDtlXFx1MTJjMVxcdTE2YWZcXHhmMVxcdTAyODhpbGRlXFx1ODAzYlxceGUzXFx1NDBlM21sXFx1ODAzYlxceGU0XFx1NDBlNFxcdTAxMDBjaVxcdTE2YzJcXHUxNmM4b25pblxceGY0XFx1MDI3Mm50O1xcdTZhMTFcXHUwODAwTmFiY2RlZmlrbG5vcHJzdVxcdTE2ZWRcXHUxNmYxXFx1MTczMFxcdTE3M2NcXHUxNzQzXFx1MTc0OFxcdTE3NzhcXHUxNzdkXFx1MTdlMFxcdTE3ZTZcXHUxODM5XFx1MTg1MFxcdTE3MGRcXHUxOTNkXFx1MTk0OFxcdTE5NzBvdDtcXHU2YWVkXFx1MDEwMGNyXFx1MTZmNlxcdTE3MWVrXFx1MDIwMGNlcHNcXHUxNzAwXFx1MTcwNVxcdTE3MGRcXHUxNzEzb25nO1xcdTYyNGNwc2lsb247XFx1NDNmNnJpbWU7XFx1NjAzNWltXFx1MDEwMDtlXFx1MTcxYVxcdTE3MWJcXHU2MjNkcTtcXHU2MmNkXFx1MDE3NlxcdTE3MjJcXHUxNzI2ZWU7XFx1NjJiZGVkXFx1MDEwMDtnXFx1MTcyY1xcdTE3MmRcXHU2MzA1ZVxceGJiXFx1MTcyZHJrXFx1MDEwMDt0XFx1MTM1Y1xcdTE3Mzdicms7XFx1NjNiNlxcdTAxMDBveVxcdTE3MDFcXHUxNzQxO1xcdTQ0MzFxdW87XFx1NjAxZVxcdTAyODBjbXBydFxcdTE3NTNcXHUxNzViXFx1MTc2MVxcdTE3NjRcXHUxNzY4YXVzXFx1MDEwMDtlXFx1MDEwYVxcdTAxMDlwdHl2O1xcdTY5YjBzXFx4ZTlcXHUxNzBjbm9cXHhmNVxcdTAxMTNcXHUwMTgwYWh3XFx1MTc2ZlxcdTE3NzFcXHUxNzczO1xcdTQzYjI7XFx1NjEzNmVlbjtcXHU2MjZjcjtcXHVjMDAwXFx1ZDgzNVxcdWRkMWZnXFx1MDM4MGNvc3R1dndcXHUxNzhkXFx1MTc5ZFxcdTE3YjNcXHUxN2MxXFx1MTdkNVxcdTE3ZGJcXHUxN2RlXFx1MDE4MGFpdVxcdTE3OTRcXHUxNzk2XFx1MTc5YVxceGYwXFx1MDc2MHJjO1xcdTY1ZWZwXFx4YmJcXHUxMzcxXFx1MDE4MGRwdFxcdTE3YTRcXHUxN2E4XFx1MTdhZG90O1xcdTZhMDBsdXM7XFx1NmEwMWltZXM7XFx1NmEwMlxcdTAyNzFcXHUxN2I5XFwwXFwwXFx1MTdiZWN1cDtcXHU2YTA2YXI7XFx1NjYwNXJpYW5nbGVcXHUwMTAwZHVcXHUxN2NkXFx1MTdkMm93bjtcXHU2NWJkcDtcXHU2NWIzcGx1cztcXHU2YTA0ZVxceGU1XFx1MTQ0NFxceGU1XFx1MTRhZGFyb3c7XFx1NjkwZFxcdTAxODBha29cXHUxN2VkXFx1MTgyNlxcdTE4MzVcXHUwMTAwY25cXHUxN2YyXFx1MTgyM2tcXHUwMTgwbHN0XFx1MTdmYVxcdTA1YWJcXHUxODAyb3plbmdlO1xcdTY5ZWJyaWFuZ2xlXFx1MDIwMDtkbHJcXHUxODEyXFx1MTgxM1xcdTE4MThcXHUxODFkXFx1NjViNG93bjtcXHU2NWJlZWZ0O1xcdTY1YzJpZ2h0O1xcdTY1YjhrO1xcdTY0MjNcXHUwMWIxXFx1MTgyYlxcMFxcdTE4MzNcXHUwMWIyXFx1MTgyZlxcMFxcdTE4MzE7XFx1NjU5MjtcXHU2NTkxNDtcXHU2NTkzY2s7XFx1NjU4OFxcdTAxMDBlb1xcdTE4M2VcXHUxODRkXFx1MDEwMDtxXFx1MTg0M1xcdTE4NDZcXHVjMDAwPVxcdTIwZTV1aXY7XFx1YzAwMFxcdTIyNjFcXHUyMGU1dDtcXHU2MzEwXFx1MDIwMHB0d3hcXHUxODU5XFx1MTg1ZVxcdTE4NjdcXHUxODZjZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNTNcXHUwMTAwO3RcXHUxM2NiXFx1MTg2M29tXFx4YmJcXHUxM2NjdGllO1xcdTYyYzhcXHUwNjAwREhVVmJkaG1wdHV2XFx1MTg4NVxcdTE4OTZcXHUxOGFhXFx1MThiYlxcdTE4ZDdcXHUxOGRiXFx1MThlY1xcdTE4ZmZcXHUxOTA1XFx1MTkwYVxcdTE5MTBcXHUxOTIxXFx1MDIwMExSbHJcXHUxODhlXFx1MTg5MFxcdTE4OTJcXHUxODk0O1xcdTY1NTc7XFx1NjU1NDtcXHU2NTU2O1xcdTY1NTNcXHUwMjgwO0RVZHVcXHUxOGExXFx1MThhMlxcdTE4YTRcXHUxOGE2XFx1MThhOFxcdTY1NTA7XFx1NjU2NjtcXHU2NTY5O1xcdTY1NjQ7XFx1NjU2N1xcdTAyMDBMUmxyXFx1MThiM1xcdTE4YjVcXHUxOGI3XFx1MThiOTtcXHU2NTVkO1xcdTY1NWE7XFx1NjU1YztcXHU2NTU5XFx1MDM4MDtITFJobHJcXHUxOGNhXFx1MThjYlxcdTE4Y2RcXHUxOGNmXFx1MThkMVxcdTE4ZDNcXHUxOGQ1XFx1NjU1MTtcXHU2NTZjO1xcdTY1NjM7XFx1NjU2MDtcXHU2NTZiO1xcdTY1NjI7XFx1NjU1Zm94O1xcdTY5YzlcXHUwMjAwTFJsclxcdTE4ZTRcXHUxOGU2XFx1MThlOFxcdTE4ZWE7XFx1NjU1NTtcXHU2NTUyO1xcdTY1MTA7XFx1NjUwY1xcdTAyODA7RFVkdVxcdTA2YmRcXHUxOGY3XFx1MThmOVxcdTE4ZmJcXHUxOGZkO1xcdTY1NjU7XFx1NjU2ODtcXHU2NTJjO1xcdTY1MzRpbnVzO1xcdTYyOWZsdXM7XFx1NjI5ZWltZXM7XFx1NjJhMFxcdTAyMDBMUmxyXFx1MTkxOVxcdTE5MWJcXHUxOTFkXFx1MTkxZjtcXHU2NTViO1xcdTY1NTg7XFx1NjUxODtcXHU2NTE0XFx1MDM4MDtITFJobHJcXHUxOTMwXFx1MTkzMVxcdTE5MzNcXHUxOTM1XFx1MTkzN1xcdTE5MzlcXHUxOTNiXFx1NjUwMjtcXHU2NTZhO1xcdTY1NjE7XFx1NjU1ZTtcXHU2NTNjO1xcdTY1MjQ7XFx1NjUxY1xcdTAxMDBldlxcdTAxMjNcXHUxOTQyYmFyXFx1ODAzYlxceGE2XFx1NDBhNlxcdTAyMDBjZWlvXFx1MTk1MVxcdTE5NTZcXHUxOTVhXFx1MTk2MHI7XFx1YzAwMFxcdWQ4MzVcXHVkY2I3bWk7XFx1NjA0Zm1cXHUwMTAwO2VcXHUxNzFhXFx1MTcxY2xcXHUwMTgwO2JoXFx1MTk2OFxcdTE5NjlcXHUxOTZiXFx1NDA1YztcXHU2OWM1c3ViO1xcdTY3YzhcXHUwMTZjXFx1MTk3NFxcdTE5N2VsXFx1MDEwMDtlXFx1MTk3OVxcdTE5N2FcXHU2MDIydFxceGJiXFx1MTk3YXBcXHUwMTgwO0VlXFx1MDEyZlxcdTE5ODVcXHUxOTg3O1xcdTZhYWVcXHUwMTAwO3FcXHUwNmRjXFx1MDZkYlxcdTBjZTFcXHUxOWE3XFwwXFx1MTllOFxcdTFhMTFcXHUxYTE1XFx1MWEzMlxcMFxcdTFhMzdcXHUxYTUwXFwwXFwwXFx1MWFiNFxcMFxcMFxcdTFhYzFcXDBcXDBcXHUxYjIxXFx1MWIyZVxcdTFiNGRcXHUxYjUyXFwwXFx1MWJmZFxcMFxcdTFjMGNcXHUwMTgwY3ByXFx1MTlhZFxcdTE5YjJcXHUxOWRkdXRlO1xcdTQxMDdcXHUwMzAwO2FiY2RzXFx1MTliZlxcdTE5YzBcXHUxOWM0XFx1MTljYVxcdTE5ZDVcXHUxOWQ5XFx1NjIyOW5kO1xcdTZhNDRyY3VwO1xcdTZhNDlcXHUwMTAwYXVcXHUxOWNmXFx1MTlkMnA7XFx1NmE0YnA7XFx1NmE0N290O1xcdTZhNDA7XFx1YzAwMFxcdTIyMjlcXHVmZTAwXFx1MDEwMGVvXFx1MTllMlxcdTE5ZTV0O1xcdTYwNDFcXHhlZVxcdTA2OTNcXHUwMjAwYWVpdVxcdTE5ZjBcXHUxOWZiXFx1MWEwMVxcdTFhMDVcXHUwMWYwXFx1MTlmNVxcMFxcdTE5ZjhzO1xcdTZhNGRvbjtcXHU0MTBkZGlsXFx1ODAzYlxceGU3XFx1NDBlN3JjO1xcdTQxMDlwc1xcdTAxMDA7c1xcdTFhMGNcXHUxYTBkXFx1NmE0Y207XFx1NmE1MG90O1xcdTQxMGJcXHUwMTgwZG1uXFx1MWExYlxcdTFhMjBcXHUxYTI2aWxcXHU4MGJiXFx4YjhcXHUwMWFkcHR5djtcXHU2OWIydFxcdTgxMDBcXHhhMjtlXFx1MWEyZFxcdTFhMmVcXHU0MGEyclxceGU0XFx1MDFiMnI7XFx1YzAwMFxcdWQ4MzVcXHVkZDIwXFx1MDE4MGNlaVxcdTFhM2RcXHUxYTQwXFx1MWE0ZHk7XFx1NDQ0N2NrXFx1MDEwMDttXFx1MWE0N1xcdTFhNDhcXHU2NzEzYXJrXFx4YmJcXHUxYTQ4O1xcdTQzYzdyXFx1MDM4MDtFY2VmbXNcXHUxYTVmXFx1MWE2MFxcdTFhNjJcXHUxYTZiXFx1MWFhNFxcdTFhYWFcXHUxYWFlXFx1NjVjYjtcXHU2OWMzXFx1MDE4MDtlbFxcdTFhNjlcXHUxYTZhXFx1MWE2ZFxcdTQyYzZxO1xcdTYyNTdlXFx1MDI2MVxcdTFhNzRcXDBcXDBcXHUxYTg4cnJvd1xcdTAxMDBsclxcdTFhN2NcXHUxYTgxZWZ0O1xcdTYxYmFpZ2h0O1xcdTYxYmJcXHUwMjgwUlNhY2RcXHUxYTkyXFx1MWE5NFxcdTFhOTZcXHUxYTlhXFx1MWE5ZlxceGJiXFx1MGY0NztcXHU2NGM4c3Q7XFx1NjI5YmlyYztcXHU2MjlhYXNoO1xcdTYyOWRuaW50O1xcdTZhMTBpZDtcXHU2YWVmY2lyO1xcdTY5YzJ1YnNcXHUwMTAwO3VcXHUxYWJiXFx1MWFiY1xcdTY2NjNpdFxceGJiXFx1MWFiY1xcdTAyZWNcXHUxYWM3XFx1MWFkNFxcdTFhZmFcXDBcXHUxYjBhb25cXHUwMTAwO2VcXHUxYWNkXFx1MWFjZVxcdTQwM2FcXHUwMTAwO3FcXHhjN1xceGM2XFx1MDI2ZFxcdTFhZDlcXDBcXDBcXHUxYWUyYVxcdTAxMDA7dFxcdTFhZGVcXHUxYWRmXFx1NDAyYztcXHU0MDQwXFx1MDE4MDtmbFxcdTFhZThcXHUxYWU5XFx1MWFlYlxcdTYyMDFcXHhlZVxcdTExNjBlXFx1MDEwMG14XFx1MWFmMVxcdTFhZjZlbnRcXHhiYlxcdTFhZTllXFx4ZjNcXHUwMjRkXFx1MDFlN1xcdTFhZmVcXDBcXHUxYjA3XFx1MDEwMDtkXFx1MTJiYlxcdTFiMDJvdDtcXHU2YTZkblxceGY0XFx1MDI0NlxcdTAxODBmcnlcXHUxYjEwXFx1MWIxNFxcdTFiMTc7XFx1YzAwMFxcdWQ4MzVcXHVkZDU0b1xceGU0XFx1MDI1NFxcdTgxMDBcXHhhOTtzXFx1MDE1NVxcdTFiMWRyO1xcdTYxMTdcXHUwMTAwYW9cXHUxYjI1XFx1MWIyOXJyO1xcdTYxYjVzcztcXHU2NzE3XFx1MDEwMGN1XFx1MWIzMlxcdTFiMzdyO1xcdWMwMDBcXHVkODM1XFx1ZGNiOFxcdTAxMDBicFxcdTFiM2NcXHUxYjQ0XFx1MDEwMDtlXFx1MWI0MVxcdTFiNDJcXHU2YWNmO1xcdTZhZDFcXHUwMTAwO2VcXHUxYjQ5XFx1MWI0YVxcdTZhZDA7XFx1NmFkMmRvdDtcXHU2MmVmXFx1MDM4MGRlbHBydndcXHUxYjYwXFx1MWI2Y1xcdTFiNzdcXHUxYjgyXFx1MWJhY1xcdTFiZDRcXHUxYmY5YXJyXFx1MDEwMGxyXFx1MWI2OFxcdTFiNmE7XFx1NjkzODtcXHU2OTM1XFx1MDI3MFxcdTFiNzJcXDBcXDBcXHUxYjc1cjtcXHU2MmRlYztcXHU2MmRmYXJyXFx1MDEwMDtwXFx1MWI3ZlxcdTFiODBcXHU2MWI2O1xcdTY5M2RcXHUwMzAwO2JjZG9zXFx1MWI4ZlxcdTFiOTBcXHUxYjk2XFx1MWJhMVxcdTFiYTVcXHUxYmE4XFx1NjIyYXJjYXA7XFx1NmE0OFxcdTAxMDBhdVxcdTFiOWJcXHUxYjllcDtcXHU2YTQ2cDtcXHU2YTRhb3Q7XFx1NjI4ZHI7XFx1NmE0NTtcXHVjMDAwXFx1MjIyYVxcdWZlMDBcXHUwMjAwYWxydlxcdTFiYjVcXHUxYmJmXFx1MWJkZVxcdTFiZTNyclxcdTAxMDA7bVxcdTFiYmNcXHUxYmJkXFx1NjFiNztcXHU2OTNjeVxcdTAxODBldndcXHUxYmM3XFx1MWJkNFxcdTFiZDhxXFx1MDI3MFxcdTFiY2VcXDBcXDBcXHUxYmQycmVcXHhlM1xcdTFiNzN1XFx4ZTNcXHUxYjc1ZWU7XFx1NjJjZWVkZ2U7XFx1NjJjZmVuXFx1ODAzYlxceGE0XFx1NDBhNGVhcnJvd1xcdTAxMDBsclxcdTFiZWVcXHUxYmYzZWZ0XFx4YmJcXHUxYjgwaWdodFxceGJiXFx1MWJiZGVcXHhlNFxcdTFiZGRcXHUwMTAwY2lcXHUxYzAxXFx1MWMwN29uaW5cXHhmNFxcdTAxZjdudDtcXHU2MjMxbGN0eTtcXHU2MzJkXFx1MDk4MEFIYWJjZGVmaGlqbG9yc3R1d3pcXHUxYzM4XFx1MWMzYlxcdTFjM2ZcXHUxYzVkXFx1MWM2OVxcdTFjNzVcXHUxYzhhXFx1MWM5ZVxcdTFjYWNcXHUxY2I3XFx1MWNmYlxcdTFjZmZcXHUxZDBkXFx1MWQ3YlxcdTFkOTFcXHUxZGFiXFx1MWRiYlxcdTFkYzZcXHUxZGNkclxceGYyXFx1MDM4MWFyO1xcdTY5NjVcXHUwMjAwZ2xyc1xcdTFjNDhcXHUxYzRkXFx1MWM1MlxcdTFjNTRnZXI7XFx1NjAyMGV0aDtcXHU2MTM4XFx4ZjJcXHUxMTMzaFxcdTAxMDA7dlxcdTFjNWFcXHUxYzViXFx1NjAxMFxceGJiXFx1MDkwYVxcdTAxNmJcXHUxYzYxXFx1MWM2N2Fyb3c7XFx1NjkwZmFcXHhlM1xcdTAzMTVcXHUwMTAwYXlcXHUxYzZlXFx1MWM3M3JvbjtcXHU0MTBmO1xcdTQ0MzRcXHUwMTgwO2FvXFx1MDMzMlxcdTFjN2NcXHUxYzg0XFx1MDEwMGdyXFx1MDJiZlxcdTFjODFyO1xcdTYxY2F0c2VxO1xcdTZhNzdcXHUwMTgwZ2xtXFx1MWM5MVxcdTFjOTRcXHUxYzk4XFx1ODAzYlxceGIwXFx1NDBiMHRhO1xcdTQzYjRwdHl2O1xcdTY5YjFcXHUwMTAwaXJcXHUxY2EzXFx1MWNhOHNodDtcXHU2OTdmO1xcdWMwMDBcXHVkODM1XFx1ZGQyMWFyXFx1MDEwMGxyXFx1MWNiM1xcdTFjYjVcXHhiYlxcdTA4ZGNcXHhiYlxcdTEwMWVcXHUwMjgwYWVnc3ZcXHUxY2MyXFx1MDM3OFxcdTFjZDZcXHUxY2RjXFx1MWNlMG1cXHUwMTgwO29zXFx1MDMyNlxcdTFjY2FcXHUxY2Q0bmRcXHUwMTAwO3NcXHUwMzI2XFx1MWNkMXVpdDtcXHU2NjY2YW1tYTtcXHU0M2RkaW47XFx1NjJmMlxcdTAxODA7aW9cXHUxY2U3XFx1MWNlOFxcdTFjZjhcXHU0MGY3ZGVcXHU4MTAwXFx4Zjc7b1xcdTFjZTdcXHUxY2YwbnRpbWVzO1xcdTYyYzduXFx4ZjhcXHUxY2Y3Y3k7XFx1NDQ1MmNcXHUwMjZmXFx1MWQwNlxcMFxcMFxcdTFkMGFybjtcXHU2MzFlb3A7XFx1NjMwZFxcdTAyODBscHR1d1xcdTFkMThcXHUxZDFkXFx1MWQyMlxcdTFkNDlcXHUxZDU1bGFyO1xcdTQwMjRmO1xcdWMwMDBcXHVkODM1XFx1ZGQ1NVxcdTAyODA7ZW1wc1xcdTAzMGJcXHUxZDJkXFx1MWQzN1xcdTFkM2RcXHUxZDQycVxcdTAxMDA7ZFxcdTAzNTJcXHUxZDMzb3Q7XFx1NjI1MWludXM7XFx1NjIzOGx1cztcXHU2MjE0cXVhcmU7XFx1NjJhMWJsZWJhcndlZGdcXHhlNVxceGZhblxcdTAxODBhZGhcXHUxMTJlXFx1MWQ1ZFxcdTFkNjdvd25hcnJvd1xceGYzXFx1MWM4M2FycG9vblxcdTAxMDBsclxcdTFkNzJcXHUxZDc2ZWZcXHhmNFxcdTFjYjRpZ2hcXHhmNFxcdTFjYjZcXHUwMTYyXFx1MWQ3ZlxcdTFkODVrYXJvXFx4ZjdcXHUwZjQyXFx1MDI2ZlxcdTFkOGFcXDBcXDBcXHUxZDhlcm47XFx1NjMxZm9wO1xcdTYzMGNcXHUwMTgwY290XFx1MWQ5OFxcdTFkYTNcXHUxZGE2XFx1MDEwMHJ5XFx1MWQ5ZFxcdTFkYTE7XFx1YzAwMFxcdWQ4MzVcXHVkY2I5O1xcdTQ0NTVsO1xcdTY5ZjZyb2s7XFx1NDExMVxcdTAxMDBkclxcdTFkYjBcXHUxZGI0b3Q7XFx1NjJmMWlcXHUwMTAwO2ZcXHUxZGJhXFx1MTgxNlxcdTY1YmZcXHUwMTAwYWhcXHUxZGMwXFx1MWRjM3JcXHhmMlxcdTA0MjlhXFx4ZjJcXHUwZmE2YW5nbGU7XFx1NjlhNlxcdTAxMDBjaVxcdTFkZDJcXHUxZGQ1eTtcXHU0NDVmZ3JhcnI7XFx1NjdmZlxcdTA5MDBEYWNkZWZnbG1ub3BxcnN0dXhcXHUxZTAxXFx1MWUwOVxcdTFlMTlcXHUxZTM4XFx1MDU3OFxcdTFlM2NcXHUxZTQ5XFx1MWU2MVxcdTFlN2VcXHUxZWE1XFx1MWVhZlxcdTFlYmRcXHUxZWUxXFx1MWYyYVxcdTFmMzdcXHUxZjQ0XFx1MWY0ZVxcdTFmNWFcXHUwMTAwRG9cXHUxZTA2XFx1MWQzNG9cXHhmNFxcdTFjODlcXHUwMTAwY3NcXHUxZTBlXFx1MWUxNHV0ZVxcdTgwM2JcXHhlOVxcdTQwZTl0ZXI7XFx1NmE2ZVxcdTAyMDBhaW95XFx1MWUyMlxcdTFlMjdcXHUxZTMxXFx1MWUzNnJvbjtcXHU0MTFiclxcdTAxMDA7Y1xcdTFlMmRcXHUxZTJlXFx1NjI1NlxcdTgwM2JcXHhlYVxcdTQwZWFsb247XFx1NjI1NTtcXHU0NDRkb3Q7XFx1NDExN1xcdTAxMDBEclxcdTFlNDFcXHUxZTQ1b3Q7XFx1NjI1MjtcXHVjMDAwXFx1ZDgzNVxcdWRkMjJcXHUwMTgwO3JzXFx1MWU1MFxcdTFlNTFcXHUxZTU3XFx1NmE5YWF2ZVxcdTgwM2JcXHhlOFxcdTQwZThcXHUwMTAwO2RcXHUxZTVjXFx1MWU1ZFxcdTZhOTZvdDtcXHU2YTk4XFx1MDIwMDtpbHNcXHUxZTZhXFx1MWU2YlxcdTFlNzJcXHUxZTc0XFx1NmE5OW50ZXJzO1xcdTYzZTc7XFx1NjExM1xcdTAxMDA7ZFxcdTFlNzlcXHUxZTdhXFx1NmE5NW90O1xcdTZhOTdcXHUwMTgwYXBzXFx1MWU4NVxcdTFlODlcXHUxZTk3Y3I7XFx1NDExM3R5XFx1MDE4MDtzdlxcdTFlOTJcXHUxZTkzXFx1MWU5NVxcdTYyMDVldFxceGJiXFx1MWU5M3BcXHUwMTAwMTtcXHUxZTlkXFx1MWVhNFxcdTAxMzNcXHUxZWExXFx1MWVhMztcXHU2MDA0O1xcdTYwMDVcXHU2MDAzXFx1MDEwMGdzXFx1MWVhYVxcdTFlYWM7XFx1NDE0YnA7XFx1NjAwMlxcdTAxMDBncFxcdTFlYjRcXHUxZWI4b247XFx1NDExOWY7XFx1YzAwMFxcdWQ4MzVcXHVkZDU2XFx1MDE4MGFsc1xcdTFlYzRcXHUxZWNlXFx1MWVkMnJcXHUwMTAwO3NcXHUxZWNhXFx1MWVjYlxcdTYyZDVsO1xcdTY5ZTN1cztcXHU2YTcxaVxcdTAxODA7bHZcXHUxZWRhXFx1MWVkYlxcdTFlZGZcXHU0M2I1b25cXHhiYlxcdTFlZGI7XFx1NDNmNVxcdTAyMDBjc3V2XFx1MWVlYVxcdTFlZjNcXHUxZjBiXFx1MWYyM1xcdTAxMDBpb1xcdTFlZWZcXHUxZTMxcmNcXHhiYlxcdTFlMmVcXHUwMjY5XFx1MWVmOVxcMFxcMFxcdTFlZmJcXHhlZFxcdTA1NDhhbnRcXHUwMTAwZ2xcXHUxZjAyXFx1MWYwNnRyXFx4YmJcXHUxZTVkZXNzXFx4YmJcXHUxZTdhXFx1MDE4MGFlaVxcdTFmMTJcXHUxZjE2XFx1MWYxYWxzO1xcdTQwM2RzdDtcXHU2MjVmdlxcdTAxMDA7RFxcdTAyMzVcXHUxZjIwRDtcXHU2YTc4cGFyc2w7XFx1NjllNVxcdTAxMDBEYVxcdTFmMmZcXHUxZjMzb3Q7XFx1NjI1M3JyO1xcdTY5NzFcXHUwMTgwY2RpXFx1MWYzZVxcdTFmNDFcXHUxZWY4cjtcXHU2MTJmb1xceGY0XFx1MDM1MlxcdTAxMDBhaFxcdTFmNDlcXHUxZjRiO1xcdTQzYjdcXHU4MDNiXFx4ZjBcXHU0MGYwXFx1MDEwMG1yXFx1MWY1M1xcdTFmNTdsXFx1ODAzYlxceGViXFx1NDBlYm87XFx1NjBhY1xcdTAxODBjaXBcXHUxZjYxXFx1MWY2NFxcdTFmNjdsO1xcdTQwMjFzXFx4ZjRcXHUwNTZlXFx1MDEwMGVvXFx1MWY2Y1xcdTFmNzRjdGF0aW9cXHhlZVxcdTA1NTluZW50aWFsXFx4ZTVcXHUwNTc5XFx1MDllMVxcdTFmOTJcXDBcXHUxZjllXFwwXFx1MWZhMVxcdTFmYTdcXDBcXDBcXHUxZmM2XFx1MWZjY1xcMFxcdTFmZDNcXDBcXHUxZmU2XFx1MWZlYVxcdTIwMDBcXDBcXHUyMDA4XFx1MjA1YWxsaW5nZG90c2VcXHhmMVxcdTFlNDR5O1xcdTQ0NDRtYWxlO1xcdTY2NDBcXHUwMTgwaWxyXFx1MWZhZFxcdTFmYjNcXHUxZmMxbGlnO1xcdTgwMDBcXHVmYjAzXFx1MDI2OVxcdTFmYjlcXDBcXDBcXHUxZmJkZztcXHU4MDAwXFx1ZmIwMGlnO1xcdTgwMDBcXHVmYjA0O1xcdWMwMDBcXHVkODM1XFx1ZGQyM2xpZztcXHU4MDAwXFx1ZmIwMWxpZztcXHVjMDAwZmpcXHUwMTgwYWx0XFx1MWZkOVxcdTFmZGNcXHUxZmUxdDtcXHU2NjZkaWc7XFx1ODAwMFxcdWZiMDJucztcXHU2NWIxb2Y7XFx1NDE5MlxcdTAxZjBcXHUxZmVlXFwwXFx1MWZmM2Y7XFx1YzAwMFxcdWQ4MzVcXHVkZDU3XFx1MDEwMGFrXFx1MDViZlxcdTFmZjdcXHUwMTAwO3ZcXHUxZmZjXFx1MWZmZFxcdTYyZDQ7XFx1NmFkOWFydGludDtcXHU2YTBkXFx1MDEwMGFvXFx1MjAwY1xcdTIwNTVcXHUwMTAwY3NcXHUyMDExXFx1MjA1MlxcdTAzYjFcXHUyMDFhXFx1MjAzMFxcdTIwMzhcXHUyMDQ1XFx1MjA0OFxcMFxcdTIwNTBcXHUwM2IyXFx1MjAyMlxcdTIwMjVcXHUyMDI3XFx1MjAyYVxcdTIwMmNcXDBcXHUyMDJlXFx1ODAzYlxceGJkXFx1NDBiZDtcXHU2MTUzXFx1ODAzYlxceGJjXFx1NDBiYztcXHU2MTU1O1xcdTYxNTk7XFx1NjE1YlxcdTAxYjNcXHUyMDM0XFwwXFx1MjAzNjtcXHU2MTU0O1xcdTYxNTZcXHUwMmI0XFx1MjAzZVxcdTIwNDFcXDBcXDBcXHUyMDQzXFx1ODAzYlxceGJlXFx1NDBiZTtcXHU2MTU3O1xcdTYxNWM1O1xcdTYxNThcXHUwMWI2XFx1MjA0Y1xcMFxcdTIwNGU7XFx1NjE1YTtcXHU2MTVkODtcXHU2MTVlbDtcXHU2MDQ0d247XFx1NjMyMmNyO1xcdWMwMDBcXHVkODM1XFx1ZGNiYlxcdTA4ODBFYWJjZGVmZ2lqbG5vcnN0dlxcdTIwODJcXHUyMDg5XFx1MjA5ZlxcdTIwYTVcXHUyMGIwXFx1MjBiNFxcdTIwZjBcXHUyMGY1XFx1MjBmYVxcdTIwZmZcXHUyMTAzXFx1MjExMlxcdTIxMzhcXHUwMzE3XFx1MjEzZVxcdTIxNTJcXHUyMTllXFx1MDEwMDtsXFx1MDY0ZFxcdTIwODc7XFx1NmE4Y1xcdTAxODBjbXBcXHUyMDkwXFx1MjA5NVxcdTIwOWR1dGU7XFx1NDFmNW1hXFx1MDEwMDtkXFx1MjA5Y1xcdTFjZGFcXHU0M2IzO1xcdTZhODZyZXZlO1xcdTQxMWZcXHUwMTAwaXlcXHUyMGFhXFx1MjBhZXJjO1xcdTQxMWQ7XFx1NDQzM290O1xcdTQxMjFcXHUwMjAwO2xxc1xcdTA2M2VcXHUwNjQyXFx1MjBiZFxcdTIwYzlcXHUwMTgwO3FzXFx1MDYzZVxcdTA2NGNcXHUyMGM0bGFuXFx4ZjRcXHUwNjY1XFx1MDIwMDtjZGxcXHUwNjY1XFx1MjBkMlxcdTIwZDVcXHUyMGU1YztcXHU2YWE5b3RcXHUwMTAwO29cXHUyMGRjXFx1MjBkZFxcdTZhODBcXHUwMTAwO2xcXHUyMGUyXFx1MjBlM1xcdTZhODI7XFx1NmE4NFxcdTAxMDA7ZVxcdTIwZWFcXHUyMGVkXFx1YzAwMFxcdTIyZGJcXHVmZTAwcztcXHU2YTk0cjtcXHVjMDAwXFx1ZDgzNVxcdWRkMjRcXHUwMTAwO2dcXHUwNjczXFx1MDYxYm1lbDtcXHU2MTM3Y3k7XFx1NDQ1M1xcdTAyMDA7RWFqXFx1MDY1YVxcdTIxMGNcXHUyMTBlXFx1MjExMDtcXHU2YTkyO1xcdTZhYTU7XFx1NmFhNFxcdTAyMDBFYWVzXFx1MjExYlxcdTIxMWRcXHUyMTI5XFx1MjEzNDtcXHU2MjY5cFxcdTAxMDA7cFxcdTIxMjNcXHUyMTI0XFx1NmE4YXJveFxceGJiXFx1MjEyNFxcdTAxMDA7cVxcdTIxMmVcXHUyMTJmXFx1NmE4OFxcdTAxMDA7cVxcdTIxMmVcXHUyMTFiaW07XFx1NjJlN3BmO1xcdWMwMDBcXHVkODM1XFx1ZGQ1OFxcdTAxMDBjaVxcdTIxNDNcXHUyMTQ2cjtcXHU2MTBhbVxcdTAxODA7ZWxcXHUwNjZiXFx1MjE0ZVxcdTIxNTA7XFx1NmE4ZTtcXHU2YTkwXFx1ODMwMD47Y2RscXJcXHUwNWVlXFx1MjE2MFxcdTIxNmFcXHUyMTZlXFx1MjE3M1xcdTIxNzlcXHUwMTAwY2lcXHUyMTY1XFx1MjE2NztcXHU2YWE3cjtcXHU2YTdhb3Q7XFx1NjJkN1BhcjtcXHU2OTk1dWVzdDtcXHU2YTdjXFx1MDI4MGFkZWxzXFx1MjE4NFxcdTIxNmFcXHUyMTkwXFx1MDY1NlxcdTIxOWJcXHUwMWYwXFx1MjE4OVxcMFxcdTIxOGVwcm9cXHhmOFxcdTIwOWVyO1xcdTY5NzhxXFx1MDEwMGxxXFx1MDYzZlxcdTIxOTZsZXNcXHhmM1xcdTIwODhpXFx4ZWRcXHUwNjZiXFx1MDEwMGVuXFx1MjFhM1xcdTIxYWRydG5lcXE7XFx1YzAwMFxcdTIyNjlcXHVmZTAwXFx4YzVcXHUyMWFhXFx1MDUwMEFhYmNlZmtvc3lcXHUyMWM0XFx1MjFjN1xcdTIxZjFcXHUyMWY1XFx1MjFmYVxcdTIyMThcXHUyMjFkXFx1MjIyZlxcdTIyNjhcXHUyMjdkclxceGYyXFx1MDNhMFxcdTAyMDBpbG1yXFx1MjFkMFxcdTIxZDRcXHUyMWQ3XFx1MjFkYnJzXFx4ZjBcXHUxNDg0ZlxceGJiXFx1MjAyNGlsXFx4ZjRcXHUwNmE5XFx1MDEwMGRyXFx1MjFlMFxcdTIxZTRjeTtcXHU0NDRhXFx1MDE4MDtjd1xcdTA4ZjRcXHUyMWViXFx1MjFlZmlyO1xcdTY5NDg7XFx1NjFhZGFyO1xcdTYxMGZpcmM7XFx1NDEyNVxcdTAxODBhbHJcXHUyMjAxXFx1MjIwZVxcdTIyMTNydHNcXHUwMTAwO3VcXHUyMjA5XFx1MjIwYVxcdTY2NjVpdFxceGJiXFx1MjIwYWxpcDtcXHU2MDI2Y29uO1xcdTYyYjlyO1xcdWMwMDBcXHVkODM1XFx1ZGQyNXNcXHUwMTAwZXdcXHUyMjIzXFx1MjIyOWFyb3c7XFx1NjkyNWFyb3c7XFx1NjkyNlxcdTAyODBhbW9wclxcdTIyM2FcXHUyMjNlXFx1MjI0M1xcdTIyNWVcXHUyMjYzcnI7XFx1NjFmZnRodDtcXHU2MjNia1xcdTAxMDBsclxcdTIyNDlcXHUyMjUzZWZ0YXJyb3c7XFx1NjFhOWlnaHRhcnJvdztcXHU2MWFhZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNTliYXI7XFx1NjAxNVxcdTAxODBjbHRcXHUyMjZmXFx1MjI3NFxcdTIyNzhyO1xcdWMwMDBcXHVkODM1XFx1ZGNiZGFzXFx4ZThcXHUyMWY0cm9rO1xcdTQxMjdcXHUwMTAwYnBcXHUyMjgyXFx1MjI4N3VsbDtcXHU2MDQzaGVuXFx4YmJcXHUxYzViXFx1MGFlMVxcdTIyYTNcXDBcXHUyMmFhXFwwXFx1MjJiOFxcdTIyYzVcXHUyMmNlXFwwXFx1MjJkNVxcdTIyZjNcXDBcXDBcXHUyMmY4XFx1MjMyMlxcdTIzNjdcXHUyMzYyXFx1MjM3ZlxcMFxcdTIzODZcXHUyM2FhXFx1MjNiNGN1dGVcXHU4MDNiXFx4ZWRcXHU0MGVkXFx1MDE4MDtpeVxcdTA3NzFcXHUyMmIwXFx1MjJiNXJjXFx1ODAzYlxceGVlXFx1NDBlZTtcXHU0NDM4XFx1MDEwMGN4XFx1MjJiY1xcdTIyYmZ5O1xcdTQ0MzVjbFxcdTgwM2JcXHhhMVxcdTQwYTFcXHUwMTAwZnJcXHUwMzlmXFx1MjJjOTtcXHVjMDAwXFx1ZDgzNVxcdWRkMjZyYXZlXFx1ODAzYlxceGVjXFx1NDBlY1xcdTAyMDA7aW5vXFx1MDczZVxcdTIyZGRcXHUyMmU5XFx1MjJlZVxcdTAxMDBpblxcdTIyZTJcXHUyMmU2bnQ7XFx1NmEwY3Q7XFx1NjIyZGZpbjtcXHU2OWRjdGE7XFx1NjEyOWxpZztcXHU0MTMzXFx1MDE4MGFvcFxcdTIyZmVcXHUyMzFhXFx1MjMxZFxcdTAxODBjZ3RcXHUyMzA1XFx1MjMwOFxcdTIzMTdyO1xcdTQxMmJcXHUwMTgwZWxwXFx1MDcxZlxcdTIzMGZcXHUyMzEzaW5cXHhlNVxcdTA3OGVhclxceGY0XFx1MDcyMGg7XFx1NDEzMWY7XFx1NjJiN2VkO1xcdTQxYjVcXHUwMjgwO2Nmb3RcXHUwNGY0XFx1MjMyY1xcdTIzMzFcXHUyMzNkXFx1MjM0MWFyZTtcXHU2MTA1aW5cXHUwMTAwO3RcXHUyMzM4XFx1MjMzOVxcdTYyMWVpZTtcXHU2OWRkZG9cXHhmNFxcdTIzMTlcXHUwMjgwO2NlbHBcXHUwNzU3XFx1MjM0Y1xcdTIzNTBcXHUyMzViXFx1MjM2MWFsO1xcdTYyYmFcXHUwMTAwZ3JcXHUyMzU1XFx1MjM1OWVyXFx4ZjNcXHUxNTYzXFx4ZTNcXHUyMzRkYXJoaztcXHU2YTE3cm9kO1xcdTZhM2NcXHUwMjAwY2dwdFxcdTIzNmZcXHUyMzcyXFx1MjM3NlxcdTIzN2J5O1xcdTQ0NTFvbjtcXHU0MTJmZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNWFhO1xcdTQzYjl1ZXN0XFx1ODAzYlxceGJmXFx1NDBiZlxcdTAxMDBjaVxcdTIzOGFcXHUyMzhmcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYmVuXFx1MDI4MDtFZHN2XFx1MDRmNFxcdTIzOWJcXHUyMzlkXFx1MjNhMVxcdTA0ZjM7XFx1NjJmOW90O1xcdTYyZjVcXHUwMTAwO3ZcXHUyM2E2XFx1MjNhN1xcdTYyZjQ7XFx1NjJmM1xcdTAxMDA7aVxcdTA3NzdcXHUyM2FlbGRlO1xcdTQxMjlcXHUwMWViXFx1MjNiOFxcMFxcdTIzYmNjeTtcXHU0NDU2bFxcdTgwM2JcXHhlZlxcdTQwZWZcXHUwMzAwY2Ztb3N1XFx1MjNjY1xcdTIzZDdcXHUyM2RjXFx1MjNlMVxcdTIzZTdcXHUyM2Y1XFx1MDEwMGl5XFx1MjNkMVxcdTIzZDVyYztcXHU0MTM1O1xcdTQ0MzlyO1xcdWMwMDBcXHVkODM1XFx1ZGQyN2F0aDtcXHU0MjM3cGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDViXFx1MDFlM1xcdTIzZWNcXDBcXHUyM2YxcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYmZyY3k7XFx1NDQ1OGtjeTtcXHU0NDU0XFx1MDQwMGFjZmdoam9zXFx1MjQwYlxcdTI0MTZcXHUyNDIyXFx1MjQyN1xcdTI0MmRcXHUyNDMxXFx1MjQzNVxcdTI0M2JwcGFcXHUwMTAwO3ZcXHUyNDEzXFx1MjQxNFxcdTQzYmE7XFx1NDNmMFxcdTAxMDBleVxcdTI0MWJcXHUyNDIwZGlsO1xcdTQxMzc7XFx1NDQzYXI7XFx1YzAwMFxcdWQ4MzVcXHVkZDI4cmVlbjtcXHU0MTM4Y3k7XFx1NDQ0NWN5O1xcdTQ0NWNwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNWNjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYzBcXHUwYjgwQUJFSGFiY2RlZmdoamxtbm9wcnN0dXZcXHUyNDcwXFx1MjQ4MVxcdTI0ODZcXHUyNDhkXFx1MjQ5MVxcdTI1MGVcXHUyNTNkXFx1MjU1YVxcdTI1ODBcXHUyNjRlXFx1MjY1ZVxcdTI2NjVcXHUyNjc5XFx1MjY3ZFxcdTI2OWFcXHUyNmIyXFx1MjZkOFxcdTI3NWRcXHUyNzY4XFx1Mjc4YlxcdTI3YzBcXHUyODAxXFx1MjgxMlxcdTAxODBhcnRcXHUyNDc3XFx1MjQ3YVxcdTI0N2NyXFx4ZjJcXHUwOWM2XFx4ZjJcXHUwMzk1YWlsO1xcdTY5MWJhcnI7XFx1NjkwZVxcdTAxMDA7Z1xcdTA5OTRcXHUyNDhiO1xcdTZhOGJhcjtcXHU2OTYyXFx1MDk2M1xcdTI0YTVcXDBcXHUyNGFhXFwwXFx1MjRiMVxcMFxcMFxcMFxcMFxcMFxcdTI0YjVcXHUyNGJhXFwwXFx1MjRjNlxcdTI0YzhcXHUyNGNkXFwwXFx1MjRmOXV0ZTtcXHU0MTNhbXB0eXY7XFx1NjliNHJhXFx4ZWVcXHUwODRjYmRhO1xcdTQzYmJnXFx1MDE4MDtkbFxcdTA4OGVcXHUyNGMxXFx1MjRjMztcXHU2OTkxXFx4ZTVcXHUwODhlO1xcdTZhODV1b1xcdTgwM2JcXHhhYlxcdTQwYWJyXFx1MDQwMDtiZmhscHN0XFx1MDg5OVxcdTI0ZGVcXHUyNGU2XFx1MjRlOVxcdTI0ZWJcXHUyNGVlXFx1MjRmMVxcdTI0ZjVcXHUwMTAwO2ZcXHUwODlkXFx1MjRlM3M7XFx1NjkxZnM7XFx1NjkxZFxceGViXFx1MjI1MnA7XFx1NjFhYmw7XFx1NjkzOWltO1xcdTY5NzNsO1xcdTYxYTJcXHUwMTgwO2FlXFx1MjRmZlxcdTI1MDBcXHUyNTA0XFx1NmFhYmlsO1xcdTY5MTlcXHUwMTAwO3NcXHUyNTA5XFx1MjUwYVxcdTZhYWQ7XFx1YzAwMFxcdTJhYWRcXHVmZTAwXFx1MDE4MGFiclxcdTI1MTVcXHUyNTE5XFx1MjUxZHJyO1xcdTY5MGNyaztcXHU2NzcyXFx1MDEwMGFrXFx1MjUyMlxcdTI1MmNjXFx1MDEwMGVrXFx1MjUyOFxcdTI1MmE7XFx1NDA3YjtcXHU0MDViXFx1MDEwMGVzXFx1MjUzMVxcdTI1MzM7XFx1Njk4YmxcXHUwMTAwZHVcXHUyNTM5XFx1MjUzYjtcXHU2OThmO1xcdTY5OGRcXHUwMjAwYWV1eVxcdTI1NDZcXHUyNTRiXFx1MjU1NlxcdTI1NThyb247XFx1NDEzZVxcdTAxMDBkaVxcdTI1NTBcXHUyNTU0aWw7XFx1NDEzY1xceGVjXFx1MDhiMFxceGUyXFx1MjUyOTtcXHU0NDNiXFx1MDIwMGNxcnNcXHUyNTYzXFx1MjU2NlxcdTI1NmRcXHUyNTdkYTtcXHU2OTM2dW9cXHUwMTAwO3JcXHUwZTE5XFx1MTc0NlxcdTAxMDBkdVxcdTI1NzJcXHUyNTc3aGFyO1xcdTY5NjdzaGFyO1xcdTY5NGJoO1xcdTYxYjJcXHUwMjgwO2ZncXNcXHUyNThiXFx1MjU4Y1xcdTA5ODlcXHUyNWYzXFx1MjVmZlxcdTYyNjR0XFx1MDI4MGFobHJ0XFx1MjU5OFxcdTI1YTRcXHUyNWI3XFx1MjVjMlxcdTI1ZThycm93XFx1MDEwMDt0XFx1MDg5OVxcdTI1YTFhXFx4ZTlcXHUyNGY2YXJwb29uXFx1MDEwMGR1XFx1MjVhZlxcdTI1YjRvd25cXHhiYlxcdTA0NWFwXFx4YmJcXHUwOTY2ZWZ0YXJyb3dzO1xcdTYxYzdpZ2h0XFx1MDE4MGFoc1xcdTI1Y2RcXHUyNWQ2XFx1MjVkZXJyb3dcXHUwMTAwO3NcXHUwOGY0XFx1MDhhN2FycG9vblxceGYzXFx1MGY5OHF1aWdhcnJvXFx4ZjdcXHUyMWYwaHJlZXRpbWVzO1xcdTYyY2JcXHUwMTgwO3FzXFx1MjU4YlxcdTA5OTNcXHUyNWZhbGFuXFx4ZjRcXHUwOWFjXFx1MDI4MDtjZGdzXFx1MDlhY1xcdTI2MGFcXHUyNjBkXFx1MjYxZFxcdTI2MjhjO1xcdTZhYThvdFxcdTAxMDA7b1xcdTI2MTRcXHUyNjE1XFx1NmE3ZlxcdTAxMDA7clxcdTI2MWFcXHUyNjFiXFx1NmE4MTtcXHU2YTgzXFx1MDEwMDtlXFx1MjYyMlxcdTI2MjVcXHVjMDAwXFx1MjJkYVxcdWZlMDBzO1xcdTZhOTNcXHUwMjgwYWRlZ3NcXHUyNjMzXFx1MjYzOVxcdTI2M2RcXHUyNjQ5XFx1MjY0YnBwcm9cXHhmOFxcdTI0YzZvdDtcXHU2MmQ2cVxcdTAxMDBncVxcdTI2NDNcXHUyNjQ1XFx4ZjRcXHUwOTg5Z3RcXHhmMlxcdTI0OGNcXHhmNFxcdTA5OWJpXFx4ZWRcXHUwOWIyXFx1MDE4MGlsclxcdTI2NTVcXHUwOGUxXFx1MjY1YXNodDtcXHU2OTdjO1xcdWMwMDBcXHVkODM1XFx1ZGQyOVxcdTAxMDA7RVxcdTA5OWNcXHUyNjYzO1xcdTZhOTFcXHUwMTYxXFx1MjY2OVxcdTI2NzZyXFx1MDEwMGR1XFx1MjViMlxcdTI2NmVcXHUwMTAwO2xcXHUwOTY1XFx1MjY3MztcXHU2OTZhbGs7XFx1NjU4NGN5O1xcdTQ0NTlcXHUwMjgwO2FjaHRcXHUwYTQ4XFx1MjY4OFxcdTI2OGJcXHUyNjkxXFx1MjY5NnJcXHhmMlxcdTI1YzFvcm5lXFx4ZjJcXHUxZDA4YXJkO1xcdTY5NmJyaTtcXHU2NWZhXFx1MDEwMGlvXFx1MjY5ZlxcdTI2YTRkb3Q7XFx1NDE0MHVzdFxcdTAxMDA7YVxcdTI2YWNcXHUyNmFkXFx1NjNiMGNoZVxceGJiXFx1MjZhZFxcdTAyMDBFYWVzXFx1MjZiYlxcdTI2YmRcXHUyNmM5XFx1MjZkNDtcXHU2MjY4cFxcdTAxMDA7cFxcdTI2YzNcXHUyNmM0XFx1NmE4OXJveFxceGJiXFx1MjZjNFxcdTAxMDA7cVxcdTI2Y2VcXHUyNmNmXFx1NmE4N1xcdTAxMDA7cVxcdTI2Y2VcXHUyNmJiaW07XFx1NjJlNlxcdTA0MDBhYm5vcHR3elxcdTI2ZTlcXHUyNmY0XFx1MjZmN1xcdTI3MWFcXHUyNzJmXFx1Mjc0MVxcdTI3NDdcXHUyNzUwXFx1MDEwMG5yXFx1MjZlZVxcdTI2ZjFnO1xcdTY3ZWNyO1xcdTYxZmRyXFx4ZWJcXHUwOGMxZ1xcdTAxODBsbXJcXHUyNmZmXFx1MjcwZFxcdTI3MTRlZnRcXHUwMTAwYXJcXHUwOWU2XFx1MjcwN2lnaHRcXHhlMVxcdTA5ZjJhcHN0bztcXHU2N2ZjaWdodFxceGUxXFx1MDlmZHBhcnJvd1xcdTAxMDBsclxcdTI3MjVcXHUyNzI5ZWZcXHhmNFxcdTI0ZWRpZ2h0O1xcdTYxYWNcXHUwMTgwYWZsXFx1MjczNlxcdTI3MzlcXHUyNzNkcjtcXHU2OTg1O1xcdWMwMDBcXHVkODM1XFx1ZGQ1ZHVzO1xcdTZhMmRpbWVzO1xcdTZhMzRcXHUwMTYxXFx1Mjc0YlxcdTI3NGZzdDtcXHU2MjE3XFx4ZTFcXHUxMzRlXFx1MDE4MDtlZlxcdTI3NTdcXHUyNzU4XFx1MTgwMFxcdTY1Y2FuZ2VcXHhiYlxcdTI3NThhclxcdTAxMDA7bFxcdTI3NjRcXHUyNzY1XFx1NDAyOHQ7XFx1Njk5M1xcdTAyODBhY2htdFxcdTI3NzNcXHUyNzc2XFx1Mjc3Y1xcdTI3ODVcXHUyNzg3clxceGYyXFx1MDhhOG9ybmVcXHhmMlxcdTFkOGNhclxcdTAxMDA7ZFxcdTBmOThcXHUyNzgzO1xcdTY5NmQ7XFx1NjAwZXJpO1xcdTYyYmZcXHUwMzAwYWNoaXF0XFx1Mjc5OFxcdTI3OWRcXHUwYTQwXFx1MjdhMlxcdTI3YWVcXHUyN2JicXVvO1xcdTYwMzlyO1xcdWMwMDBcXHVkODM1XFx1ZGNjMW1cXHUwMTgwO2VnXFx1MDliMlxcdTI3YWFcXHUyN2FjO1xcdTZhOGQ7XFx1NmE4ZlxcdTAxMDBidVxcdTI1MmFcXHUyN2Izb1xcdTAxMDA7clxcdTBlMWZcXHUyN2I5O1xcdTYwMWFyb2s7XFx1NDE0MlxcdTg0MDA8O2NkaGlscXJcXHUwODJiXFx1MjdkMlxcdTI2MzlcXHUyN2RjXFx1MjdlMFxcdTI3ZTVcXHUyN2VhXFx1MjdmMFxcdTAxMDBjaVxcdTI3ZDdcXHUyN2Q5O1xcdTZhYTZyO1xcdTZhNzlyZVxceGU1XFx1MjVmMm1lcztcXHU2MmM5YXJyO1xcdTY5NzZ1ZXN0O1xcdTZhN2JcXHUwMTAwUGlcXHUyN2Y1XFx1MjdmOWFyO1xcdTY5OTZcXHUwMTgwO2VmXFx1MjgwMFxcdTA5MmRcXHUxODFiXFx1NjVjM3JcXHUwMTAwZHVcXHUyODA3XFx1MjgwZHNoYXI7XFx1Njk0YWhhcjtcXHU2OTY2XFx1MDEwMGVuXFx1MjgxN1xcdTI4MjFydG5lcXE7XFx1YzAwMFxcdTIyNjhcXHVmZTAwXFx4YzVcXHUyODFlXFx1MDcwMERhY2RlZmhpbG5vcHN1XFx1Mjg0MFxcdTI4NDVcXHUyODgyXFx1Mjg4ZVxcdTI4OTNcXHUyOGEwXFx1MjhhNVxcdTI4YThcXHUyOGRhXFx1MjhlMlxcdTI4ZTRcXHUwYTgzXFx1MjhmM1xcdTI5MDJEb3Q7XFx1NjIzYVxcdTAyMDBjbHByXFx1Mjg0ZVxcdTI4NTJcXHUyODYzXFx1Mjg3ZHJcXHU4MDNiXFx4YWZcXHU0MGFmXFx1MDEwMGV0XFx1Mjg1N1xcdTI4NTk7XFx1NjY0MlxcdTAxMDA7ZVxcdTI4NWVcXHUyODVmXFx1NjcyMHNlXFx4YmJcXHUyODVmXFx1MDEwMDtzXFx1MTAzYlxcdTI4Njh0b1xcdTAyMDA7ZGx1XFx1MTAzYlxcdTI4NzNcXHUyODc3XFx1Mjg3Ym93XFx4ZWVcXHUwNDhjZWZcXHhmNFxcdTA5MGZcXHhmMFxcdTEzZDFrZXI7XFx1NjVhZVxcdTAxMDBveVxcdTI4ODdcXHUyODhjbW1hO1xcdTZhMjk7XFx1NDQzY2FzaDtcXHU2MDE0YXN1cmVkYW5nbGVcXHhiYlxcdTE2MjZyO1xcdWMwMDBcXHVkODM1XFx1ZGQyYW87XFx1NjEyN1xcdTAxODBjZG5cXHUyOGFmXFx1MjhiNFxcdTI4Yzlyb1xcdTgwM2JcXHhiNVxcdTQwYjVcXHUwMjAwO2FjZFxcdTE0NjRcXHUyOGJkXFx1MjhjMFxcdTI4YzRzXFx4ZjRcXHUxNmE3aXI7XFx1NmFmMG90XFx1ODBiYlxceGI3XFx1MDFiNXVzXFx1MDE4MDtiZFxcdTI4ZDJcXHUxOTAzXFx1MjhkM1xcdTYyMTJcXHUwMTAwO3VcXHUxZDNjXFx1MjhkODtcXHU2YTJhXFx1MDE2M1xcdTI4ZGVcXHUyOGUxcDtcXHU2YWRiXFx4ZjJcXHUyMjEyXFx4ZjBcXHUwYTgxXFx1MDEwMGRwXFx1MjhlOVxcdTI4ZWVlbHM7XFx1NjJhN2Y7XFx1YzAwMFxcdWQ4MzVcXHVkZDVlXFx1MDEwMGN0XFx1MjhmOFxcdTI4ZmRyO1xcdWMwMDBcXHVkODM1XFx1ZGNjMnBvc1xceGJiXFx1MTU5ZFxcdTAxODA7bG1cXHUyOTA5XFx1MjkwYVxcdTI5MGRcXHU0M2JjdGltYXA7XFx1NjJiOFxcdTBjMDBHTFJWYWJjZGVmZ2hpamxtb3Byc3R1dndcXHUyOTQyXFx1Mjk1M1xcdTI5N2VcXHUyOTg5XFx1Mjk5OFxcdTI5ZGFcXHUyOWU5XFx1MmExNVxcdTJhMWFcXHUyYTU4XFx1MmE1ZFxcdTJhODNcXHUyYTk1XFx1MmFhNFxcdTJhYThcXHUyYjA0XFx1MmIwN1xcdTJiNDRcXHUyYjdmXFx1MmJhZVxcdTJjMzRcXHUyYzY3XFx1MmM3Y1xcdTJjZTlcXHUwMTAwZ3RcXHUyOTQ3XFx1Mjk0YjtcXHVjMDAwXFx1MjJkOVxcdTAzMzhcXHUwMTAwO3ZcXHUyOTUwXFx1MGJjZlxcdWMwMDBcXHUyMjZiXFx1MjBkMlxcdTAxODBlbHRcXHUyOTVhXFx1Mjk3MlxcdTI5NzZmdFxcdTAxMDBhclxcdTI5NjFcXHUyOTY3cnJvdztcXHU2MWNkaWdodGFycm93O1xcdTYxY2U7XFx1YzAwMFxcdTIyZDhcXHUwMzM4XFx1MDEwMDt2XFx1Mjk3YlxcdTBjNDdcXHVjMDAwXFx1MjI2YVxcdTIwZDJpZ2h0YXJyb3c7XFx1NjFjZlxcdTAxMDBEZFxcdTI5OGVcXHUyOTkzYXNoO1xcdTYyYWZhc2g7XFx1NjJhZVxcdTAyODBiY25wdFxcdTI5YTNcXHUyOWE3XFx1MjlhY1xcdTI5YjFcXHUyOWNjbGFcXHhiYlxcdTAyZGV1dGU7XFx1NDE0NGc7XFx1YzAwMFxcdTIyMjBcXHUyMGQyXFx1MDI4MDtFaW9wXFx1MGQ4NFxcdTI5YmNcXHUyOWMwXFx1MjljNVxcdTI5Yzg7XFx1YzAwMFxcdTJhNzBcXHUwMzM4ZDtcXHVjMDAwXFx1MjI0YlxcdTAzMzhzO1xcdTQxNDlyb1xceGY4XFx1MGQ4NHVyXFx1MDEwMDthXFx1MjlkM1xcdTI5ZDRcXHU2NjZlbFxcdTAxMDA7c1xcdTI5ZDNcXHUwYjM4XFx1MDFmM1xcdTI5ZGZcXDBcXHUyOWUzcFxcdTgwYmJcXHhhMFxcdTBiMzdtcFxcdTAxMDA7ZVxcdTBiZjlcXHUwYzAwXFx1MDI4MGFlb3V5XFx1MjlmNFxcdTI5ZmVcXHUyYTAzXFx1MmExMFxcdTJhMTNcXHUwMWYwXFx1MjlmOVxcMFxcdTI5ZmI7XFx1NmE0M29uO1xcdTQxNDhkaWw7XFx1NDE0Nm5nXFx1MDEwMDtkXFx1MGQ3ZVxcdTJhMGFvdDtcXHVjMDAwXFx1MmE2ZFxcdTAzMzhwO1xcdTZhNDI7XFx1NDQzZGFzaDtcXHU2MDEzXFx1MDM4MDtBYWRxc3hcXHUwYjkyXFx1MmEyOVxcdTJhMmRcXHUyYTNiXFx1MmE0MVxcdTJhNDVcXHUyYTUwcnI7XFx1NjFkN3JcXHUwMTAwaHJcXHUyYTMzXFx1MmEzNms7XFx1NjkyNFxcdTAxMDA7b1xcdTEzZjJcXHUxM2Ywb3Q7XFx1YzAwMFxcdTIyNTBcXHUwMzM4dWlcXHhmNlxcdTBiNjNcXHUwMTAwZWlcXHUyYTRhXFx1MmE0ZWFyO1xcdTY5MjhcXHhlZFxcdTBiOThpc3RcXHUwMTAwO3NcXHUwYmEwXFx1MGI5ZnI7XFx1YzAwMFxcdWQ4MzVcXHVkZDJiXFx1MDIwMEVlc3RcXHUwYmM1XFx1MmE2NlxcdTJhNzlcXHUyYTdjXFx1MDE4MDtxc1xcdTBiYmNcXHUyYTZkXFx1MGJlMVxcdTAxODA7cXNcXHUwYmJjXFx1MGJjNVxcdTJhNzRsYW5cXHhmNFxcdTBiZTJpXFx4ZWRcXHUwYmVhXFx1MDEwMDtyXFx1MGJiNlxcdTJhODFcXHhiYlxcdTBiYjdcXHUwMTgwQWFwXFx1MmE4YVxcdTJhOGRcXHUyYTkxclxceGYyXFx1Mjk3MXJyO1xcdTYxYWVhcjtcXHU2YWYyXFx1MDE4MDtzdlxcdTBmOGRcXHUyYTljXFx1MGY4Y1xcdTAxMDA7ZFxcdTJhYTFcXHUyYWEyXFx1NjJmYztcXHU2MmZhY3k7XFx1NDQ1YVxcdTAzODBBRWFkZXN0XFx1MmFiN1xcdTJhYmFcXHUyYWJlXFx1MmFjMlxcdTJhYzVcXHUyYWY2XFx1MmFmOXJcXHhmMlxcdTI5NjY7XFx1YzAwMFxcdTIyNjZcXHUwMzM4cnI7XFx1NjE5YXI7XFx1NjAyNVxcdTAyMDA7ZnFzXFx1MGMzYlxcdTJhY2VcXHUyYWUzXFx1MmFlZnRcXHUwMTAwYXJcXHUyYWQ0XFx1MmFkOXJyb1xceGY3XFx1MmFjMWlnaHRhcnJvXFx4ZjdcXHUyYTkwXFx1MDE4MDtxc1xcdTBjM2JcXHUyYWJhXFx1MmFlYWxhblxceGY0XFx1MGM1NVxcdTAxMDA7c1xcdTBjNTVcXHUyYWY0XFx4YmJcXHUwYzM2aVxceGVkXFx1MGM1ZFxcdTAxMDA7clxcdTBjMzVcXHUyYWZlaVxcdTAxMDA7ZVxcdTBjMWFcXHUwYzI1aVxceGU0XFx1MGQ5MFxcdTAxMDBwdFxcdTJiMGNcXHUyYjExZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNWZcXHU4MTgwXFx4YWM7aW5cXHUyYjE5XFx1MmIxYVxcdTJiMzZcXHU0MGFjblxcdTAyMDA7RWR2XFx1MGI4OVxcdTJiMjRcXHUyYjI4XFx1MmIyZTtcXHVjMDAwXFx1MjJmOVxcdTAzMzhvdDtcXHVjMDAwXFx1MjJmNVxcdTAzMzhcXHUwMWUxXFx1MGI4OVxcdTJiMzNcXHUyYjM1O1xcdTYyZjc7XFx1NjJmNmlcXHUwMTAwO3ZcXHUwY2I4XFx1MmIzY1xcdTAxZTFcXHUwY2I4XFx1MmI0MVxcdTJiNDM7XFx1NjJmZTtcXHU2MmZkXFx1MDE4MGFvclxcdTJiNGJcXHUyYjYzXFx1MmI2OXJcXHUwMjAwO2FzdFxcdTBiN2JcXHUyYjU1XFx1MmI1YVxcdTJiNWZsbGVcXHhlY1xcdTBiN2JsO1xcdWMwMDBcXHUyYWZkXFx1MjBlNTtcXHVjMDAwXFx1MjIwMlxcdTAzMzhsaW50O1xcdTZhMTRcXHUwMTgwO2NlXFx1MGM5MlxcdTJiNzBcXHUyYjczdVxceGU1XFx1MGNhNVxcdTAxMDA7Y1xcdTBjOThcXHUyYjc4XFx1MDEwMDtlXFx1MGM5MlxcdTJiN2RcXHhmMVxcdTBjOThcXHUwMjAwQWFpdFxcdTJiODhcXHUyYjhiXFx1MmI5ZFxcdTJiYTdyXFx4ZjJcXHUyOTg4cnJcXHUwMTgwO2N3XFx1MmI5NFxcdTJiOTVcXHUyYjk5XFx1NjE5YjtcXHVjMDAwXFx1MjkzM1xcdTAzMzg7XFx1YzAwMFxcdTIxOWRcXHUwMzM4Z2h0YXJyb3dcXHhiYlxcdTJiOTVyaVxcdTAxMDA7ZVxcdTBjY2JcXHUwY2Q2XFx1MDM4MGNoaW1wcXVcXHUyYmJkXFx1MmJjZFxcdTJiZDlcXHUyYjA0XFx1MGI3OFxcdTJiZTRcXHUyYmVmXFx1MDIwMDtjZXJcXHUwZDMyXFx1MmJjNlxcdTBkMzdcXHUyYmM5dVxceGU1XFx1MGQ0NTtcXHVjMDAwXFx1ZDgzNVxcdWRjYzNvcnRcXHUwMjZkXFx1MmIwNVxcMFxcMFxcdTJiZDZhclxceGUxXFx1MmI1Nm1cXHUwMTAwO2VcXHUwZDZlXFx1MmJkZlxcdTAxMDA7cVxcdTBkNzRcXHUwZDczc3VcXHUwMTAwYnBcXHUyYmViXFx1MmJlZFxceGU1XFx1MGNmOFxceGU1XFx1MGQwYlxcdTAxODBiY3BcXHUyYmY2XFx1MmMxMVxcdTJjMTlcXHUwMjAwO0Vlc1xcdTJiZmZcXHUyYzAwXFx1MGQyMlxcdTJjMDRcXHU2Mjg0O1xcdWMwMDBcXHUyYWM1XFx1MDMzOGV0XFx1MDEwMDtlXFx1MGQxYlxcdTJjMGJxXFx1MDEwMDtxXFx1MGQyM1xcdTJjMDBjXFx1MDEwMDtlXFx1MGQzMlxcdTJjMTdcXHhmMVxcdTBkMzhcXHUwMjAwO0Vlc1xcdTJjMjJcXHUyYzIzXFx1MGQ1ZlxcdTJjMjdcXHU2Mjg1O1xcdWMwMDBcXHUyYWM2XFx1MDMzOGV0XFx1MDEwMDtlXFx1MGQ1OFxcdTJjMmVxXFx1MDEwMDtxXFx1MGQ2MFxcdTJjMjNcXHUwMjAwZ2lsclxcdTJjM2RcXHUyYzNmXFx1MmM0NVxcdTJjNDdcXHhlY1xcdTBiZDdsZGVcXHU4MDNiXFx4ZjFcXHU0MGYxXFx4ZTdcXHUwYzQzaWFuZ2xlXFx1MDEwMGxyXFx1MmM1MlxcdTJjNWNlZnRcXHUwMTAwO2VcXHUwYzFhXFx1MmM1YVxceGYxXFx1MGMyNmlnaHRcXHUwMTAwO2VcXHUwY2NiXFx1MmM2NVxceGYxXFx1MGNkN1xcdTAxMDA7bVxcdTJjNmNcXHUyYzZkXFx1NDNiZFxcdTAxODA7ZXNcXHUyYzc0XFx1MmM3NVxcdTJjNzlcXHU0MDIzcm87XFx1NjExNnA7XFx1NjAwN1xcdTA0ODBESGFkZ2lscnNcXHUyYzhmXFx1MmM5NFxcdTJjOTlcXHUyYzllXFx1MmNhM1xcdTJjYjBcXHUyY2I2XFx1MmNkM1xcdTJjZTNhc2g7XFx1NjJhZGFycjtcXHU2OTA0cDtcXHVjMDAwXFx1MjI0ZFxcdTIwZDJhc2g7XFx1NjJhY1xcdTAxMDBldFxcdTJjYThcXHUyY2FjO1xcdWMwMDBcXHUyMjY1XFx1MjBkMjtcXHVjMDAwPlxcdTIwZDJuZmluO1xcdTY5ZGVcXHUwMTgwQWV0XFx1MmNiZFxcdTJjYzFcXHUyY2M1cnI7XFx1NjkwMjtcXHVjMDAwXFx1MjI2NFxcdTIwZDJcXHUwMTAwO3JcXHUyY2NhXFx1MmNjZFxcdWMwMDA8XFx1MjBkMmllO1xcdWMwMDBcXHUyMmI0XFx1MjBkMlxcdTAxMDBBdFxcdTJjZDhcXHUyY2RjcnI7XFx1NjkwM3JpZTtcXHVjMDAwXFx1MjJiNVxcdTIwZDJpbTtcXHVjMDAwXFx1MjIzY1xcdTIwZDJcXHUwMTgwQWFuXFx1MmNmMFxcdTJjZjRcXHUyZDAycnI7XFx1NjFkNnJcXHUwMTAwaHJcXHUyY2ZhXFx1MmNmZGs7XFx1NjkyM1xcdTAxMDA7b1xcdTEzZTdcXHUxM2U1ZWFyO1xcdTY5MjdcXHUxMjUzXFx1MWE5NVxcMFxcMFxcMFxcMFxcMFxcMFxcMFxcMFxcMFxcMFxcMFxcMFxcMFxcdTJkMmRcXDBcXHUyZDM4XFx1MmQ0OFxcdTJkNjBcXHUyZDY1XFx1MmQ3MlxcdTJkODRcXHUxYjA3XFwwXFwwXFx1MmQ4ZFxcdTJkYWJcXDBcXHUyZGM4XFx1MmRjZVxcMFxcdTJkZGNcXHUyZTE5XFx1MmUyYlxcdTJlM2VcXHUyZTQzXFx1MDEwMGNzXFx1MmQzMVxcdTFhOTd1dGVcXHU4MDNiXFx4ZjNcXHU0MGYzXFx1MDEwMGl5XFx1MmQzY1xcdTJkNDVyXFx1MDEwMDtjXFx1MWE5ZVxcdTJkNDJcXHU4MDNiXFx4ZjRcXHU0MGY0O1xcdTQ0M2VcXHUwMjgwYWJpb3NcXHUxYWEwXFx1MmQ1MlxcdTJkNTdcXHUwMWM4XFx1MmQ1YWxhYztcXHU0MTUxdjtcXHU2YTM4b2xkO1xcdTY5YmNsaWc7XFx1NDE1M1xcdTAxMDBjclxcdTJkNjlcXHUyZDZkaXI7XFx1NjliZjtcXHVjMDAwXFx1ZDgzNVxcdWRkMmNcXHUwMzZmXFx1MmQ3OVxcMFxcMFxcdTJkN2NcXDBcXHUyZDgybjtcXHU0MmRiYXZlXFx1ODAzYlxceGYyXFx1NDBmMjtcXHU2OWMxXFx1MDEwMGJtXFx1MmQ4OFxcdTBkZjRhcjtcXHU2OWI1XFx1MDIwMGFjaXRcXHUyZDk1XFx1MmQ5OFxcdTJkYTVcXHUyZGE4clxceGYyXFx1MWE4MFxcdTAxMDBpclxcdTJkOWRcXHUyZGEwcjtcXHU2OWJlb3NzO1xcdTY5YmJuXFx4ZTVcXHUwZTUyO1xcdTY5YzBcXHUwMTgwYWVpXFx1MmRiMVxcdTJkYjVcXHUyZGI5Y3I7XFx1NDE0ZGdhO1xcdTQzYzlcXHUwMTgwY2RuXFx1MmRjMFxcdTJkYzVcXHUwMWNkcm9uO1xcdTQzYmY7XFx1NjliNnBmO1xcdWMwMDBcXHVkODM1XFx1ZGQ2MFxcdTAxODBhZWxcXHUyZGQ0XFx1MmRkN1xcdTAxZDJyO1xcdTY5YjdycDtcXHU2OWI5XFx1MDM4MDthZGlvc3ZcXHUyZGVhXFx1MmRlYlxcdTJkZWVcXHUyZTA4XFx1MmUwZFxcdTJlMTBcXHUyZTE2XFx1NjIyOHJcXHhmMlxcdTFhODZcXHUwMjAwO2VmbVxcdTJkZjdcXHUyZGY4XFx1MmUwMlxcdTJlMDVcXHU2YTVkclxcdTAxMDA7b1xcdTJkZmVcXHUyZGZmXFx1NjEzNGZcXHhiYlxcdTJkZmZcXHU4MDNiXFx4YWFcXHU0MGFhXFx1ODAzYlxceGJhXFx1NDBiYWdvZjtcXHU2MmI2cjtcXHU2YTU2bG9wZTtcXHU2YTU3O1xcdTZhNWJcXHUwMTgwY2xvXFx1MmUxZlxcdTJlMjFcXHUyZTI3XFx4ZjJcXHUyZTAxYXNoXFx1ODAzYlxceGY4XFx1NDBmOGw7XFx1NjI5OGlcXHUwMTZjXFx1MmUyZlxcdTJlMzRkZVxcdTgwM2JcXHhmNVxcdTQwZjVlc1xcdTAxMDA7YVxcdTAxZGJcXHUyZTNhcztcXHU2YTM2bWxcXHU4MDNiXFx4ZjZcXHU0MGY2YmFyO1xcdTYzM2RcXHUwYWUxXFx1MmU1ZVxcMFxcdTJlN2RcXDBcXHUyZTgwXFx1MmU5ZFxcMFxcdTJlYTJcXHUyZWI5XFwwXFwwXFx1MmVjYlxcdTBlOWNcXDBcXHUyZjEzXFwwXFwwXFx1MmYyYlxcdTJmYmNcXDBcXHUyZmM4clxcdTAyMDA7YXN0XFx1MDQwM1xcdTJlNjdcXHUyZTcyXFx1MGU4NVxcdTgxMDBcXHhiNjtsXFx1MmU2ZFxcdTJlNmVcXHU0MGI2bGVcXHhlY1xcdTA0MDNcXHUwMjY5XFx1MmU3OFxcMFxcMFxcdTJlN2JtO1xcdTZhZjM7XFx1NmFmZHk7XFx1NDQzZnJcXHUwMjgwY2ltcHRcXHUyZThiXFx1MmU4ZlxcdTJlOTNcXHUxODY1XFx1MmU5N250O1xcdTQwMjVvZDtcXHU0MDJlaWw7XFx1NjAzMGVuaztcXHU2MDMxcjtcXHVjMDAwXFx1ZDgzNVxcdWRkMmRcXHUwMTgwaW1vXFx1MmVhOFxcdTJlYjBcXHUyZWI0XFx1MDEwMDt2XFx1MmVhZFxcdTJlYWVcXHU0M2M2O1xcdTQzZDVtYVxceGY0XFx1MGE3Nm5lO1xcdTY2MGVcXHUwMTgwO3R2XFx1MmViZlxcdTJlYzBcXHUyZWM4XFx1NDNjMGNoZm9ya1xceGJiXFx1MWZmZDtcXHU0M2Q2XFx1MDEwMGF1XFx1MmVjZlxcdTJlZGZuXFx1MDEwMGNrXFx1MmVkNVxcdTJlZGRrXFx1MDEwMDtoXFx1MjFmNFxcdTJlZGI7XFx1NjEwZVxceGY2XFx1MjFmNHNcXHUwNDgwO2FiY2RlbXN0XFx1MmVmM1xcdTJlZjRcXHUxOTA4XFx1MmVmOVxcdTJlZmRcXHUyZjA0XFx1MmYwNlxcdTJmMGFcXHUyZjBlXFx1NDAyYmNpcjtcXHU2YTIzaXI7XFx1NmEyMlxcdTAxMDBvdVxcdTFkNDBcXHUyZjAyO1xcdTZhMjU7XFx1NmE3Mm5cXHU4MGJiXFx4YjFcXHUwZTlkaW07XFx1NmEyNndvO1xcdTZhMjdcXHUwMTgwaXB1XFx1MmYxOVxcdTJmMjBcXHUyZjI1bnRpbnQ7XFx1NmExNWY7XFx1YzAwMFxcdWQ4MzVcXHVkZDYxbmRcXHU4MDNiXFx4YTNcXHU0MGEzXFx1MDUwMDtFYWNlaW5vc3VcXHUwZWM4XFx1MmYzZlxcdTJmNDFcXHUyZjQ0XFx1MmY0N1xcdTJmODFcXHUyZjg5XFx1MmY5MlxcdTJmN2VcXHUyZmI2O1xcdTZhYjNwO1xcdTZhYjd1XFx4ZTVcXHUwZWQ5XFx1MDEwMDtjXFx1MGVjZVxcdTJmNGNcXHUwMzAwO2FjZW5zXFx1MGVjOFxcdTJmNTlcXHUyZjVmXFx1MmY2NlxcdTJmNjhcXHUyZjdlcHByb1xceGY4XFx1MmY0M3VybHllXFx4ZjFcXHUwZWQ5XFx4ZjFcXHUwZWNlXFx1MDE4MGFlc1xcdTJmNmZcXHUyZjc2XFx1MmY3YXBwcm94O1xcdTZhYjlxcTtcXHU2YWI1aW07XFx1NjJlOGlcXHhlZFxcdTBlZGZtZVxcdTAxMDA7c1xcdTJmODhcXHUwZWFlXFx1NjAzMlxcdTAxODBFYXNcXHUyZjc4XFx1MmY5MFxcdTJmN2FcXHhmMFxcdTJmNzVcXHUwMTgwZGZwXFx1MGVlY1xcdTJmOTlcXHUyZmFmXFx1MDE4MGFsc1xcdTJmYTBcXHUyZmE1XFx1MmZhYWxhcjtcXHU2MzJlaW5lO1xcdTYzMTJ1cmY7XFx1NjMxM1xcdTAxMDA7dFxcdTBlZmJcXHUyZmI0XFx4ZWZcXHUwZWZicmVsO1xcdTYyYjBcXHUwMTAwY2lcXHUyZmMwXFx1MmZjNXI7XFx1YzAwMFxcdWQ4MzVcXHVkY2M1O1xcdTQzYzhuY3NwO1xcdTYwMDhcXHUwMzAwZmlvcHN1XFx1MmZkYVxcdTIyZTJcXHUyZmRmXFx1MmZlNVxcdTJmZWJcXHUyZmYxcjtcXHVjMDAwXFx1ZDgzNVxcdWRkMmVwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNjJyaW1lO1xcdTYwNTdjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYzZcXHUwMTgwYWVvXFx1MmZmOFxcdTMwMDlcXHUzMDEzdFxcdTAxMDBlaVxcdTJmZmVcXHUzMDA1cm5pb25cXHhmM1xcdTA2YjBudDtcXHU2YTE2c3RcXHUwMTAwO2VcXHUzMDEwXFx1MzAxMVxcdTQwM2ZcXHhmMVxcdTFmMTlcXHhmNFxcdTBmMTRcXHUwYTgwQUJIYWJjZGVmaGlsbW5vcHJzdHV4XFx1MzA0MFxcdTMwNTFcXHUzMDU1XFx1MzA1OVxcdTMwZTBcXHUzMTBlXFx1MzEyYlxcdTMxNDdcXHUzMTYyXFx1MzE3MlxcdTMxOGVcXHUzMjA2XFx1MzIxNVxcdTMyMjRcXHUzMjI5XFx1MzI1OFxcdTMyNmVcXHUzMjcyXFx1MzI5MFxcdTMyYjBcXHUzMmI3XFx1MDE4MGFydFxcdTMwNDdcXHUzMDRhXFx1MzA0Y3JcXHhmMlxcdTEwYjNcXHhmMlxcdTAzZGRhaWw7XFx1NjkxY2FyXFx4ZjJcXHUxYzY1YXI7XFx1Njk2NFxcdTAzODBjZGVucXJ0XFx1MzA2OFxcdTMwNzVcXHUzMDc4XFx1MzA3ZlxcdTMwOGZcXHUzMDk0XFx1MzBjY1xcdTAxMDBldVxcdTMwNmRcXHUzMDcxO1xcdWMwMDBcXHUyMjNkXFx1MDMzMXRlO1xcdTQxNTVpXFx4ZTNcXHUxMTZlbXB0eXY7XFx1NjliM2dcXHUwMjAwO2RlbFxcdTBmZDFcXHUzMDg5XFx1MzA4YlxcdTMwOGQ7XFx1Njk5MjtcXHU2OWE1XFx4ZTVcXHUwZmQxdW9cXHU4MDNiXFx4YmJcXHU0MGJiclxcdTA1ODA7YWJjZmhscHN0d1xcdTBmZGNcXHUzMGFjXFx1MzBhZlxcdTMwYjdcXHUzMGI5XFx1MzBiY1xcdTMwYmVcXHUzMGMwXFx1MzBjM1xcdTMwYzdcXHUzMGNhcDtcXHU2OTc1XFx1MDEwMDtmXFx1MGZlMFxcdTMwYjRzO1xcdTY5MjA7XFx1NjkzM3M7XFx1NjkxZVxceGViXFx1MjI1ZFxceGYwXFx1MjcyZWw7XFx1Njk0NWltO1xcdTY5NzRsO1xcdTYxYTM7XFx1NjE5ZFxcdTAxMDBhaVxcdTMwZDFcXHUzMGQ1aWw7XFx1NjkxYW9cXHUwMTAwO25cXHUzMGRiXFx1MzBkY1xcdTYyMzZhbFxceGYzXFx1MGYxZVxcdTAxODBhYnJcXHUzMGU3XFx1MzBlYVxcdTMwZWVyXFx4ZjJcXHUxN2U1cms7XFx1Njc3M1xcdTAxMDBha1xcdTMwZjNcXHUzMGZkY1xcdTAxMDBla1xcdTMwZjlcXHUzMGZiO1xcdTQwN2Q7XFx1NDA1ZFxcdTAxMDBlc1xcdTMxMDJcXHUzMTA0O1xcdTY5OGNsXFx1MDEwMGR1XFx1MzEwYVxcdTMxMGM7XFx1Njk4ZTtcXHU2OTkwXFx1MDIwMGFldXlcXHUzMTE3XFx1MzExY1xcdTMxMjdcXHUzMTI5cm9uO1xcdTQxNTlcXHUwMTAwZGlcXHUzMTIxXFx1MzEyNWlsO1xcdTQxNTdcXHhlY1xcdTBmZjJcXHhlMlxcdTMwZmE7XFx1NDQ0MFxcdTAyMDBjbHFzXFx1MzEzNFxcdTMxMzdcXHUzMTNkXFx1MzE0NGE7XFx1NjkzN2RoYXI7XFx1Njk2OXVvXFx1MDEwMDtyXFx1MDIwZVxcdTAyMGRoO1xcdTYxYjNcXHUwMTgwYWNnXFx1MzE0ZVxcdTMxNWZcXHUwZjQ0bFxcdTAyMDA7aXBzXFx1MGY3OFxcdTMxNThcXHUzMTViXFx1MTA5Y25cXHhlNVxcdTEwYmJhclxceGY0XFx1MGZhOXQ7XFx1NjVhZFxcdTAxODBpbHJcXHUzMTY5XFx1MTAyM1xcdTMxNmVzaHQ7XFx1Njk3ZDtcXHVjMDAwXFx1ZDgzNVxcdWRkMmZcXHUwMTAwYW9cXHUzMTc3XFx1MzE4NnJcXHUwMTAwZHVcXHUzMTdkXFx1MzE3ZlxceGJiXFx1MDQ3YlxcdTAxMDA7bFxcdTEwOTFcXHUzMTg0O1xcdTY5NmNcXHUwMTAwO3ZcXHUzMThiXFx1MzE4Y1xcdTQzYzE7XFx1NDNmMVxcdTAxODBnbnNcXHUzMTk1XFx1MzFmOVxcdTMxZmNodFxcdTAzMDBhaGxyc3RcXHUzMWE0XFx1MzFiMFxcdTMxYzJcXHUzMWQ4XFx1MzFlNFxcdTMxZWVycm93XFx1MDEwMDt0XFx1MGZkY1xcdTMxYWRhXFx4ZTlcXHUzMGM4YXJwb29uXFx1MDEwMGR1XFx1MzFiYlxcdTMxYmZvd1xceGVlXFx1MzE3ZXBcXHhiYlxcdTEwOTJlZnRcXHUwMTAwYWhcXHUzMWNhXFx1MzFkMHJyb3dcXHhmM1xcdTBmZWFhcnBvb25cXHhmM1xcdTA1NTFpZ2h0YXJyb3dzO1xcdTYxYzlxdWlnYXJyb1xceGY3XFx1MzBjYmhyZWV0aW1lcztcXHU2MmNjZztcXHU0MmRhaW5nZG90c2VcXHhmMVxcdTFmMzJcXHUwMTgwYWhtXFx1MzIwZFxcdTMyMTBcXHUzMjEzclxceGYyXFx1MGZlYWFcXHhmMlxcdTA1NTE7XFx1NjAwZm91c3RcXHUwMTAwO2FcXHUzMjFlXFx1MzIxZlxcdTYzYjFjaGVcXHhiYlxcdTMyMWZtaWQ7XFx1NmFlZVxcdTAyMDBhYnB0XFx1MzIzMlxcdTMyM2RcXHUzMjQwXFx1MzI1MlxcdTAxMDBuclxcdTMyMzdcXHUzMjNhZztcXHU2N2VkcjtcXHU2MWZlclxceGViXFx1MTAwM1xcdTAxODBhZmxcXHUzMjQ3XFx1MzI0YVxcdTMyNGVyO1xcdTY5ODY7XFx1YzAwMFxcdWQ4MzVcXHVkZDYzdXM7XFx1NmEyZWltZXM7XFx1NmEzNVxcdTAxMDBhcFxcdTMyNWRcXHUzMjY3clxcdTAxMDA7Z1xcdTMyNjNcXHUzMjY0XFx1NDAyOXQ7XFx1Njk5NG9saW50O1xcdTZhMTJhclxceGYyXFx1MzFlM1xcdTAyMDBhY2hxXFx1MzI3YlxcdTMyODBcXHUxMGJjXFx1MzI4NXF1bztcXHU2MDNhcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYzdcXHUwMTAwYnVcXHUzMGZiXFx1MzI4YW9cXHUwMTAwO3JcXHUwMjE0XFx1MDIxM1xcdTAxODBoaXJcXHUzMjk3XFx1MzI5YlxcdTMyYTByZVxceGU1XFx1MzFmOG1lcztcXHU2MmNhaVxcdTAyMDA7ZWZsXFx1MzJhYVxcdTEwNTlcXHUxODIxXFx1MzJhYlxcdTY1Yjl0cmk7XFx1NjljZWx1aGFyO1xcdTY5Njg7XFx1NjExZVxcdTBkNjFcXHUzMmQ1XFx1MzJkYlxcdTMyZGZcXHUzMzJjXFx1MzMzOFxcdTMzNzFcXDBcXHUzMzdhXFx1MzNhNFxcMFxcMFxcdTMzZWNcXHUzM2YwXFwwXFx1MzQyOFxcdTM0NDhcXHUzNDVhXFx1MzRhZFxcdTM0YjFcXHUzNGNhXFx1MzRmMVxcMFxcdTM2MTZcXDBcXDBcXHUzNjMzY3V0ZTtcXHU0MTVicXVcXHhlZlxcdTI3YmFcXHUwNTAwO0VhY2VpbnBzeVxcdTExZWRcXHUzMmYzXFx1MzJmNVxcdTMyZmZcXHUzMzAyXFx1MzMwYlxcdTMzMGZcXHUzMzFmXFx1MzMyNlxcdTMzMjk7XFx1NmFiNFxcdTAxZjBcXHUzMmZhXFwwXFx1MzJmYztcXHU2YWI4b247XFx1NDE2MXVcXHhlNVxcdTExZmVcXHUwMTAwO2RcXHUxMWYzXFx1MzMwN2lsO1xcdTQxNWZyYztcXHU0MTVkXFx1MDE4MEVhc1xcdTMzMTZcXHUzMzE4XFx1MzMxYjtcXHU2YWI2cDtcXHU2YWJhaW07XFx1NjJlOW9saW50O1xcdTZhMTNpXFx4ZWRcXHUxMjA0O1xcdTQ0NDFvdFxcdTAxODA7YmVcXHUzMzM0XFx1MWQ0N1xcdTMzMzVcXHU2MmM1O1xcdTZhNjZcXHUwMzgwQWFjbXN0eFxcdTMzNDZcXHUzMzRhXFx1MzM1N1xcdTMzNWJcXHUzMzVlXFx1MzM2M1xcdTMzNmRycjtcXHU2MWQ4clxcdTAxMDBoclxcdTMzNTBcXHUzMzUyXFx4ZWJcXHUyMjI4XFx1MDEwMDtvXFx1MGEzNlxcdTBhMzR0XFx1ODAzYlxceGE3XFx1NDBhN2k7XFx1NDAzYndhcjtcXHU2OTI5bVxcdTAxMDBpblxcdTMzNjlcXHhmMG51XFx4ZjNcXHhmMXQ7XFx1NjczNnJcXHUwMTAwO29cXHUzMzc2XFx1MjA1NVxcdWMwMDBcXHVkODM1XFx1ZGQzMFxcdTAyMDBhY295XFx1MzM4MlxcdTMzODZcXHUzMzkxXFx1MzNhMHJwO1xcdTY2NmZcXHUwMTAwaHlcXHUzMzhiXFx1MzM4ZmN5O1xcdTQ0NDk7XFx1NDQ0OHJ0XFx1MDI2ZFxcdTMzOTlcXDBcXDBcXHUzMzljaVxceGU0XFx1MTQ2NGFyYVxceGVjXFx1MmU2ZlxcdTgwM2JcXHhhZFxcdTQwYWRcXHUwMTAwZ21cXHUzM2E4XFx1MzNiNG1hXFx1MDE4MDtmdlxcdTMzYjFcXHUzM2IyXFx1MzNiMlxcdTQzYzM7XFx1NDNjMlxcdTA0MDA7ZGVnbG5wclxcdTEyYWJcXHUzM2M1XFx1MzNjOVxcdTMzY2VcXHUzM2Q2XFx1MzNkZVxcdTMzZTFcXHUzM2U2b3Q7XFx1NmE2YVxcdTAxMDA7cVxcdTEyYjFcXHUxMmIwXFx1MDEwMDtFXFx1MzNkM1xcdTMzZDRcXHU2YTllO1xcdTZhYTBcXHUwMTAwO0VcXHUzM2RiXFx1MzNkY1xcdTZhOWQ7XFx1NmE5ZmU7XFx1NjI0Nmx1cztcXHU2YTI0YXJyO1xcdTY5NzJhclxceGYyXFx1MTEzZFxcdTAyMDBhZWl0XFx1MzNmOFxcdTM0MDhcXHUzNDBmXFx1MzQxN1xcdTAxMDBsc1xcdTMzZmRcXHUzNDA0bHNldG1cXHhlOVxcdTMzNmFocDtcXHU2YTMzcGFyc2w7XFx1NjllNFxcdTAxMDBkbFxcdTE0NjNcXHUzNDE0ZTtcXHU2MzIzXFx1MDEwMDtlXFx1MzQxY1xcdTM0MWRcXHU2YWFhXFx1MDEwMDtzXFx1MzQyMlxcdTM0MjNcXHU2YWFjO1xcdWMwMDBcXHUyYWFjXFx1ZmUwMFxcdTAxODBmbHBcXHUzNDJlXFx1MzQzM1xcdTM0NDJ0Y3k7XFx1NDQ0Y1xcdTAxMDA7YlxcdTM0MzhcXHUzNDM5XFx1NDAyZlxcdTAxMDA7YVxcdTM0M2VcXHUzNDNmXFx1NjljNHI7XFx1NjMzZmY7XFx1YzAwMFxcdWQ4MzVcXHVkZDY0YVxcdTAxMDBkclxcdTM0NGRcXHUwNDAyZXNcXHUwMTAwO3VcXHUzNDU0XFx1MzQ1NVxcdTY2NjBpdFxceGJiXFx1MzQ1NVxcdTAxODBjc3VcXHUzNDYwXFx1MzQ3OVxcdTM0OWZcXHUwMTAwYXVcXHUzNDY1XFx1MzQ2ZnBcXHUwMTAwO3NcXHUxMTg4XFx1MzQ2YjtcXHVjMDAwXFx1MjI5M1xcdWZlMDBwXFx1MDEwMDtzXFx1MTFiNFxcdTM0NzU7XFx1YzAwMFxcdTIyOTRcXHVmZTAwdVxcdTAxMDBicFxcdTM0N2ZcXHUzNDhmXFx1MDE4MDtlc1xcdTExOTdcXHUxMTljXFx1MzQ4NmV0XFx1MDEwMDtlXFx1MTE5N1xcdTM0OGRcXHhmMVxcdTExOWRcXHUwMTgwO2VzXFx1MTFhOFxcdTExYWRcXHUzNDk2ZXRcXHUwMTAwO2VcXHUxMWE4XFx1MzQ5ZFxceGYxXFx1MTFhZVxcdTAxODA7YWZcXHUxMTdiXFx1MzRhNlxcdTA1YjByXFx1MDE2NVxcdTM0YWJcXHUwNWIxXFx4YmJcXHUxMTdjYXJcXHhmMlxcdTExNDhcXHUwMjAwY2VtdFxcdTM0YjlcXHUzNGJlXFx1MzRjMlxcdTM0YzVyO1xcdWMwMDBcXHVkODM1XFx1ZGNjOHRtXFx4ZWVcXHhmMWlcXHhlY1xcdTM0MTVhclxceGU2XFx1MTFiZVxcdTAxMDBhclxcdTM0Y2VcXHUzNGQ1clxcdTAxMDA7ZlxcdTM0ZDRcXHUxN2JmXFx1NjYwNlxcdTAxMDBhblxcdTM0ZGFcXHUzNGVkaWdodFxcdTAxMDBlcFxcdTM0ZTNcXHUzNGVhcHNpbG9cXHhlZVxcdTFlZTBoXFx4ZTlcXHUyZWFmc1xceGJiXFx1Mjg1MlxcdTAyODBiY21ucFxcdTM0ZmJcXHUzNTVlXFx1MTIwOVxcdTM1OGJcXHUzNThlXFx1MDQ4MDtFZGVtbnByc1xcdTM1MGVcXHUzNTBmXFx1MzUxMVxcdTM1MTVcXHUzNTFlXFx1MzUyM1xcdTM1MmNcXHUzNTMxXFx1MzUzNlxcdTYyODI7XFx1NmFjNW90O1xcdTZhYmRcXHUwMTAwO2RcXHUxMWRhXFx1MzUxYW90O1xcdTZhYzN1bHQ7XFx1NmFjMVxcdTAxMDBFZVxcdTM1MjhcXHUzNTJhO1xcdTZhY2I7XFx1NjI4YWx1cztcXHU2YWJmYXJyO1xcdTY5NzlcXHUwMTgwZWl1XFx1MzUzZFxcdTM1NTJcXHUzNTU1dFxcdTAxODA7ZW5cXHUzNTBlXFx1MzU0NVxcdTM1NGJxXFx1MDEwMDtxXFx1MTFkYVxcdTM1MGZlcVxcdTAxMDA7cVxcdTM1MmJcXHUzNTI4bTtcXHU2YWM3XFx1MDEwMGJwXFx1MzU1YVxcdTM1NWM7XFx1NmFkNTtcXHU2YWQzY1xcdTAzMDA7YWNlbnNcXHUxMWVkXFx1MzU2Y1xcdTM1NzJcXHUzNTc5XFx1MzU3YlxcdTMzMjZwcHJvXFx4ZjhcXHUzMmZhdXJseWVcXHhmMVxcdTExZmVcXHhmMVxcdTExZjNcXHUwMTgwYWVzXFx1MzU4MlxcdTM1ODhcXHUzMzFicHByb1xceGY4XFx1MzMxYXFcXHhmMVxcdTMzMTdnO1xcdTY2NmFcXHUwNjgwMTIzO0VkZWhsbW5wc1xcdTM1YTlcXHUzNWFjXFx1MzVhZlxcdTEyMWNcXHUzNWIyXFx1MzViNFxcdTM1YzBcXHUzNWM5XFx1MzVkNVxcdTM1ZGFcXHUzNWRmXFx1MzVlOFxcdTM1ZWRcXHU4MDNiXFx4YjlcXHU0MGI5XFx1ODAzYlxceGIyXFx1NDBiMlxcdTgwM2JcXHhiM1xcdTQwYjM7XFx1NmFjNlxcdTAxMDBvc1xcdTM1YjlcXHUzNWJjdDtcXHU2YWJldWI7XFx1NmFkOFxcdTAxMDA7ZFxcdTEyMjJcXHUzNWM1b3Q7XFx1NmFjNHNcXHUwMTAwb3VcXHUzNWNmXFx1MzVkMmw7XFx1NjdjOWI7XFx1NmFkN2FycjtcXHU2OTdidWx0O1xcdTZhYzJcXHUwMTAwRWVcXHUzNWU0XFx1MzVlNjtcXHU2YWNjO1xcdTYyOGJsdXM7XFx1NmFjMFxcdTAxODBlaXVcXHUzNWY0XFx1MzYwOVxcdTM2MGN0XFx1MDE4MDtlblxcdTEyMWNcXHUzNWZjXFx1MzYwMnFcXHUwMTAwO3FcXHUxMjIyXFx1MzViMmVxXFx1MDEwMDtxXFx1MzVlN1xcdTM1ZTRtO1xcdTZhYzhcXHUwMTAwYnBcXHUzNjExXFx1MzYxMztcXHU2YWQ0O1xcdTZhZDZcXHUwMTgwQWFuXFx1MzYxY1xcdTM2MjBcXHUzNjJkcnI7XFx1NjFkOXJcXHUwMTAwaHJcXHUzNjI2XFx1MzYyOFxceGViXFx1MjIyZVxcdTAxMDA7b1xcdTBhMmJcXHUwYTI5d2FyO1xcdTY5MmFsaWdcXHU4MDNiXFx4ZGZcXHU0MGRmXFx1MGJlMVxcdTM2NTFcXHUzNjVkXFx1MzY2MFxcdTEyY2VcXHUzNjczXFx1MzY3OVxcMFxcdTM2N2VcXHUzNmMyXFwwXFwwXFwwXFwwXFwwXFx1MzZkYlxcdTM3MDNcXDBcXHUzNzA5XFx1Mzc2Y1xcMFxcMFxcMFxcdTM3ODdcXHUwMjcyXFx1MzY1NlxcMFxcMFxcdTM2NWJnZXQ7XFx1NjMxNjtcXHU0M2M0clxceGViXFx1MGU1ZlxcdTAxODBhZXlcXHUzNjY2XFx1MzY2YlxcdTM2NzByb247XFx1NDE2NWRpbDtcXHU0MTYzO1xcdTQ0NDJscmVjO1xcdTYzMTVyO1xcdWMwMDBcXHVkODM1XFx1ZGQzMVxcdTAyMDBlaWtvXFx1MzY4NlxcdTM2OWRcXHUzNmI1XFx1MzZiY1xcdTAxZjJcXHUzNjhiXFwwXFx1MzY5MWVcXHUwMTAwNGZcXHUxMjg0XFx1MTI4MWFcXHUwMTgwO3N2XFx1MzY5OFxcdTM2OTlcXHUzNjliXFx1NDNiOHltO1xcdTQzZDFcXHUwMTAwY25cXHUzNmEyXFx1MzZiMmtcXHUwMTAwYXNcXHUzNmE4XFx1MzZhZXBwcm9cXHhmOFxcdTEyYzFpbVxceGJiXFx1MTJhY3NcXHhmMFxcdTEyOWVcXHUwMTAwYXNcXHUzNmJhXFx1MzZhZVxceGYwXFx1MTJjMXJuXFx1ODAzYlxceGZlXFx1NDBmZVxcdTAxZWNcXHUwMzFmXFx1MzZjNlxcdTIyZTdlc1xcdTgxODBcXHhkNztiZFxcdTM2Y2ZcXHUzNmQwXFx1MzZkOFxcdTQwZDdcXHUwMTAwO2FcXHUxOTBmXFx1MzZkNXI7XFx1NmEzMTtcXHU2YTMwXFx1MDE4MGVwc1xcdTM2ZTFcXHUzNmUzXFx1MzcwMFxceGUxXFx1MmE0ZFxcdTAyMDA7YmNmXFx1MDQ4NlxcdTM2ZWNcXHUzNmYwXFx1MzZmNG90O1xcdTYzMzZpcjtcXHU2YWYxXFx1MDEwMDtvXFx1MzZmOVxcdTM2ZmNcXHVjMDAwXFx1ZDgzNVxcdWRkNjVyaztcXHU2YWRhXFx4ZTFcXHUzMzYycmltZTtcXHU2MDM0XFx1MDE4MGFpcFxcdTM3MGZcXHUzNzEyXFx1Mzc2NGRcXHhlNVxcdTEyNDhcXHUwMzgwYWRlbXBzdFxcdTM3MjFcXHUzNzRkXFx1Mzc0MFxcdTM3NTFcXHUzNzU3XFx1Mzc1Y1xcdTM3NWZuZ2xlXFx1MDI4MDtkbHFyXFx1MzczMFxcdTM3MzFcXHUzNzM2XFx1Mzc0MFxcdTM3NDJcXHU2NWI1b3duXFx4YmJcXHUxZGJiZWZ0XFx1MDEwMDtlXFx1MjgwMFxcdTM3M2VcXHhmMVxcdTA5MmU7XFx1NjI1Y2lnaHRcXHUwMTAwO2VcXHUzMmFhXFx1Mzc0YlxceGYxXFx1MTA1YW90O1xcdTY1ZWNpbnVzO1xcdTZhM2FsdXM7XFx1NmEzOWI7XFx1NjljZGltZTtcXHU2YTNiZXppdW07XFx1NjNlMlxcdTAxODBjaHRcXHUzNzcyXFx1Mzc3ZFxcdTM3ODFcXHUwMTAwcnlcXHUzNzc3XFx1Mzc3YjtcXHVjMDAwXFx1ZDgzNVxcdWRjYzk7XFx1NDQ0NmN5O1xcdTQ0NWJyb2s7XFx1NDE2N1xcdTAxMDBpb1xcdTM3OGJcXHUzNzhleFxceGY0XFx1MTc3N2hlYWRcXHUwMTAwbHJcXHUzNzk3XFx1MzdhMGVmdGFycm9cXHhmN1xcdTA4NGZpZ2h0YXJyb3dcXHhiYlxcdTBmNWRcXHUwOTAwQUhhYmNkZmdobG1vcHJzdHV3XFx1MzdkMFxcdTM3ZDNcXHUzN2Q3XFx1MzdlNFxcdTM3ZjBcXHUzN2ZjXFx1MzgwZVxcdTM4MWNcXHUzODIzXFx1MzgzNFxcdTM4NTFcXHUzODVkXFx1Mzg2YlxcdTM4YTlcXHUzOGNjXFx1MzhkMlxcdTM4ZWFcXHUzOGY2clxceGYyXFx1MDNlZGFyO1xcdTY5NjNcXHUwMTAwY3JcXHUzN2RjXFx1MzdlMnV0ZVxcdTgwM2JcXHhmYVxcdTQwZmFcXHhmMlxcdTExNTByXFx1MDFlM1xcdTM3ZWFcXDBcXHUzN2VkeTtcXHU0NDVldmU7XFx1NDE2ZFxcdTAxMDBpeVxcdTM3ZjVcXHUzN2ZhcmNcXHU4MDNiXFx4ZmJcXHU0MGZiO1xcdTQ0NDNcXHUwMTgwYWJoXFx1MzgwM1xcdTM4MDZcXHUzODBiclxceGYyXFx1MTNhZGxhYztcXHU0MTcxYVxceGYyXFx1MTNjM1xcdTAxMDBpclxcdTM4MTNcXHUzODE4c2h0O1xcdTY5N2U7XFx1YzAwMFxcdWQ4MzVcXHVkZDMycmF2ZVxcdTgwM2JcXHhmOVxcdTQwZjlcXHUwMTYxXFx1MzgyN1xcdTM4MzFyXFx1MDEwMGxyXFx1MzgyY1xcdTM4MmVcXHhiYlxcdTA5NTdcXHhiYlxcdTEwODNsaztcXHU2NTgwXFx1MDEwMGN0XFx1MzgzOVxcdTM4NGRcXHUwMjZmXFx1MzgzZlxcMFxcMFxcdTM4NGFyblxcdTAxMDA7ZVxcdTM4NDVcXHUzODQ2XFx1NjMxY3JcXHhiYlxcdTM4NDZvcDtcXHU2MzBmcmk7XFx1NjVmOFxcdTAxMDBhbFxcdTM4NTZcXHUzODVhY3I7XFx1NDE2YlxcdTgwYmJcXHhhOFxcdTAzNDlcXHUwMTAwZ3BcXHUzODYyXFx1Mzg2Nm9uO1xcdTQxNzNmO1xcdWMwMDBcXHVkODM1XFx1ZGQ2NlxcdTAzMDBhZGhsc3VcXHUxMTRiXFx1Mzg3OFxcdTM4N2RcXHUxMzcyXFx1Mzg5MVxcdTM4YTBvd25cXHhlMVxcdTEzYjNhcnBvb25cXHUwMTAwbHJcXHUzODg4XFx1Mzg4Y2VmXFx4ZjRcXHUzODJkaWdoXFx4ZjRcXHUzODJmaVxcdTAxODA7aGxcXHUzODk5XFx1Mzg5YVxcdTM4OWNcXHU0M2M1XFx4YmJcXHUxM2Zhb25cXHhiYlxcdTM4OWFwYXJyb3dzO1xcdTYxYzhcXHUwMTgwY2l0XFx1MzhiMFxcdTM4YzRcXHUzOGM4XFx1MDI2ZlxcdTM4YjZcXDBcXDBcXHUzOGMxcm5cXHUwMTAwO2VcXHUzOGJjXFx1MzhiZFxcdTYzMWRyXFx4YmJcXHUzOGJkb3A7XFx1NjMwZW5nO1xcdTQxNmZyaTtcXHU2NWY5Y3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2NhXFx1MDE4MGRpclxcdTM4ZDlcXHUzOGRkXFx1MzhlMm90O1xcdTYyZjBsZGU7XFx1NDE2OWlcXHUwMTAwO2ZcXHUzNzMwXFx1MzhlOFxceGJiXFx1MTgxM1xcdTAxMDBhbVxcdTM4ZWZcXHUzOGYyclxceGYyXFx1MzhhOGxcXHU4MDNiXFx4ZmNcXHU0MGZjYW5nbGU7XFx1NjlhN1xcdTA3ODBBQkRhY2RlZmxub3Byc3pcXHUzOTFjXFx1MzkxZlxcdTM5MjlcXHUzOTJkXFx1MzliNVxcdTM5YjhcXHUzOWJkXFx1MzlkZlxcdTM5ZTRcXHUzOWU4XFx1MzlmM1xcdTM5ZjlcXHUzOWZkXFx1M2EwMVxcdTNhMjByXFx4ZjJcXHUwM2Y3YXJcXHUwMTAwO3ZcXHUzOTI2XFx1MzkyN1xcdTZhZTg7XFx1NmFlOWFzXFx4ZThcXHUwM2UxXFx1MDEwMG5yXFx1MzkzMlxcdTM5MzdncnQ7XFx1Njk5Y1xcdTAzODBla25wcnN0XFx1MzRlM1xcdTM5NDZcXHUzOTRiXFx1Mzk1MlxcdTM5NWRcXHUzOTY0XFx1Mzk5NmFwcFxceGUxXFx1MjQxNW90aGluXFx4ZTdcXHUxZTk2XFx1MDE4MGhpclxcdTM0ZWJcXHUyZWM4XFx1Mzk1OW9wXFx4ZjRcXHUyZmI1XFx1MDEwMDtoXFx1MTNiN1xcdTM5NjJcXHhlZlxcdTMxOGRcXHUwMTAwaXVcXHUzOTY5XFx1Mzk2ZGdtXFx4ZTFcXHUzM2IzXFx1MDEwMGJwXFx1Mzk3MlxcdTM5ODRzZXRuZXFcXHUwMTAwO3FcXHUzOTdkXFx1Mzk4MFxcdWMwMDBcXHUyMjhhXFx1ZmUwMDtcXHVjMDAwXFx1MmFjYlxcdWZlMDBzZXRuZXFcXHUwMTAwO3FcXHUzOThmXFx1Mzk5MlxcdWMwMDBcXHUyMjhiXFx1ZmUwMDtcXHVjMDAwXFx1MmFjY1xcdWZlMDBcXHUwMTAwaHJcXHUzOTliXFx1Mzk5ZmV0XFx4ZTFcXHUzNjljaWFuZ2xlXFx1MDEwMGxyXFx1MzlhYVxcdTM5YWZlZnRcXHhiYlxcdTA5MjVpZ2h0XFx4YmJcXHUxMDUxeTtcXHU0NDMyYXNoXFx4YmJcXHUxMDM2XFx1MDE4MGVsclxcdTM5YzRcXHUzOWQyXFx1MzlkN1xcdTAxODA7YmVcXHUyZGVhXFx1MzljYlxcdTM5Y2ZhcjtcXHU2MmJicTtcXHU2MjVhbGlwO1xcdTYyZWVcXHUwMTAwYnRcXHUzOWRjXFx1MTQ2OGFcXHhmMlxcdTE0NjlyO1xcdWMwMDBcXHVkODM1XFx1ZGQzM3RyXFx4ZTlcXHUzOWFlc3VcXHUwMTAwYnBcXHUzOWVmXFx1MzlmMVxceGJiXFx1MGQxY1xceGJiXFx1MGQ1OXBmO1xcdWMwMDBcXHVkODM1XFx1ZGQ2N3JvXFx4ZjBcXHUwZWZidHJcXHhlOVxcdTM5YjRcXHUwMTAwY3VcXHUzYTA2XFx1M2EwYnI7XFx1YzAwMFxcdWQ4MzVcXHVkY2NiXFx1MDEwMGJwXFx1M2ExMFxcdTNhMThuXFx1MDEwMEVlXFx1Mzk4MFxcdTNhMTZcXHhiYlxcdTM5N2VuXFx1MDEwMEVlXFx1Mzk5MlxcdTNhMWVcXHhiYlxcdTM5OTBpZ3phZztcXHU2OTlhXFx1MDM4MGNlZm9wcnNcXHUzYTM2XFx1M2EzYlxcdTNhNTZcXHUzYTViXFx1M2E1NFxcdTNhNjFcXHUzYTZhaXJjO1xcdTQxNzVcXHUwMTAwZGlcXHUzYTQwXFx1M2E1MVxcdTAxMDBiZ1xcdTNhNDVcXHUzYTQ5YXI7XFx1NmE1ZmVcXHUwMTAwO3FcXHUxNWZhXFx1M2E0ZjtcXHU2MjU5ZXJwO1xcdTYxMThyO1xcdWMwMDBcXHVkODM1XFx1ZGQzNHBmO1xcdWMwMDBcXHVkODM1XFx1ZGQ2OFxcdTAxMDA7ZVxcdTE0NzlcXHUzYTY2YXRcXHhlOFxcdTE0NzljcjtcXHVjMDAwXFx1ZDgzNVxcdWRjY2NcXHUwYWUzXFx1MTc4ZVxcdTNhODdcXDBcXHUzYThiXFwwXFx1M2E5MFxcdTNhOWJcXDBcXDBcXHUzYTlkXFx1M2FhOFxcdTNhYWJcXHUzYWFmXFwwXFwwXFx1M2FjM1xcdTNhY2VcXDBcXHUzYWQ4XFx1MTdkY1xcdTE3ZGZ0clxceGU5XFx1MTdkMXI7XFx1YzAwMFxcdWQ4MzVcXHVkZDM1XFx1MDEwMEFhXFx1M2E5NFxcdTNhOTdyXFx4ZjJcXHUwM2MzclxceGYyXFx1MDlmNjtcXHU0M2JlXFx1MDEwMEFhXFx1M2FhMVxcdTNhYTRyXFx4ZjJcXHUwM2I4clxceGYyXFx1MDllYmFcXHhmMFxcdTI3MTNpcztcXHU2MmZiXFx1MDE4MGRwdFxcdTE3YTRcXHUzYWI1XFx1M2FiZVxcdTAxMDBmbFxcdTNhYmFcXHUxN2E5O1xcdWMwMDBcXHVkODM1XFx1ZGQ2OWltXFx4ZTVcXHUxN2IyXFx1MDEwMEFhXFx1M2FjN1xcdTNhY2FyXFx4ZjJcXHUwM2NlclxceGYyXFx1MGEwMVxcdTAxMDBjcVxcdTNhZDJcXHUxN2I4cjtcXHVjMDAwXFx1ZDgzNVxcdWRjY2RcXHUwMTAwcHRcXHUxN2Q2XFx1M2FkY3JcXHhlOVxcdTE3ZDRcXHUwNDAwYWNlZmlvc3VcXHUzYWYwXFx1M2FmZFxcdTNiMDhcXHUzYjBjXFx1M2IxMVxcdTNiMTVcXHUzYjFiXFx1M2IyMWNcXHUwMTAwdXlcXHUzYWY2XFx1M2FmYnRlXFx1ODAzYlxceGZkXFx1NDBmZDtcXHU0NDRmXFx1MDEwMGl5XFx1M2IwMlxcdTNiMDZyYztcXHU0MTc3O1xcdTQ0NGJuXFx1ODAzYlxceGE1XFx1NDBhNXI7XFx1YzAwMFxcdWQ4MzVcXHVkZDM2Y3k7XFx1NDQ1N3BmO1xcdWMwMDBcXHVkODM1XFx1ZGQ2YWNyO1xcdWMwMDBcXHVkODM1XFx1ZGNjZVxcdTAxMDBjbVxcdTNiMjZcXHUzYjI5eTtcXHU0NDRlbFxcdTgwM2JcXHhmZlxcdTQwZmZcXHUwNTAwYWNkZWZoaW9zd1xcdTNiNDJcXHUzYjQ4XFx1M2I1NFxcdTNiNThcXHUzYjY0XFx1M2I2OVxcdTNiNmRcXHUzYjc0XFx1M2I3YVxcdTNiODBjdXRlO1xcdTQxN2FcXHUwMTAwYXlcXHUzYjRkXFx1M2I1MnJvbjtcXHU0MTdlO1xcdTQ0MzdvdDtcXHU0MTdjXFx1MDEwMGV0XFx1M2I1ZFxcdTNiNjF0clxceGU2XFx1MTU1ZmE7XFx1NDNiNnI7XFx1YzAwMFxcdWQ4MzVcXHVkZDM3Y3k7XFx1NDQzNmdyYXJyO1xcdTYxZGRwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNmJjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjY2ZcXHUwMTAwam5cXHUzYjg1XFx1M2I4NztcXHU2MDBkajtcXHU2MDBjXCJcbiAgICAuc3BsaXQoXCJcIilcbiAgICAubWFwKChjKSA9PiBjLmNoYXJDb2RlQXQoMCkpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlY29kZS1kYXRhLWh0bWwuanMubWFwIiwiLy8gR2VuZXJhdGVkIHVzaW5nIHNjcmlwdHMvd3JpdGUtZGVjb2RlLW1hcC50c1xuZXhwb3J0IGRlZmF1bHQgbmV3IFVpbnQxNkFycmF5KFxuLy8gcHJldHRpZXItaWdub3JlXG5cIlxcdTAyMDBhZ2xxXFx0XFx4MTVcXHgxOFxceDFiXFx1MDI2ZFxceDBmXFwwXFwwXFx4MTJwO1xcdTQwMjZvcztcXHU0MDI3dDtcXHU0MDNldDtcXHU0MDNjdW90O1xcdTQwMjJcIlxuICAgIC5zcGxpdChcIlwiKVxuICAgIC5tYXAoKGMpID0+IGMuY2hhckNvZGVBdCgwKSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVjb2RlLWRhdGEteG1sLmpzLm1hcCIsIi8vIEFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9oZS9ibG9iLzM2YWZlMTc5MzkyMjI2Y2YxYjZjY2RiMTZlYmJiN2E1YTg0NGQ5M2Evc3JjL2hlLmpzI0wxMDYtTDEzNFxudmFyIF9hO1xuY29uc3QgZGVjb2RlTWFwID0gbmV3IE1hcChbXG4gICAgWzAsIDY1NTMzXSxcbiAgICAvLyBDMSBVbmljb2RlIGNvbnRyb2wgY2hhcmFjdGVyIHJlZmVyZW5jZSByZXBsYWNlbWVudHNcbiAgICBbMTI4LCA4MzY0XSxcbiAgICBbMTMwLCA4MjE4XSxcbiAgICBbMTMxLCA0MDJdLFxuICAgIFsxMzIsIDgyMjJdLFxuICAgIFsxMzMsIDgyMzBdLFxuICAgIFsxMzQsIDgyMjRdLFxuICAgIFsxMzUsIDgyMjVdLFxuICAgIFsxMzYsIDcxMF0sXG4gICAgWzEzNywgODI0MF0sXG4gICAgWzEzOCwgMzUyXSxcbiAgICBbMTM5LCA4MjQ5XSxcbiAgICBbMTQwLCAzMzhdLFxuICAgIFsxNDIsIDM4MV0sXG4gICAgWzE0NSwgODIxNl0sXG4gICAgWzE0NiwgODIxN10sXG4gICAgWzE0NywgODIyMF0sXG4gICAgWzE0OCwgODIyMV0sXG4gICAgWzE0OSwgODIyNl0sXG4gICAgWzE1MCwgODIxMV0sXG4gICAgWzE1MSwgODIxMl0sXG4gICAgWzE1MiwgNzMyXSxcbiAgICBbMTUzLCA4NDgyXSxcbiAgICBbMTU0LCAzNTNdLFxuICAgIFsxNTUsIDgyNTBdLFxuICAgIFsxNTYsIDMzOV0sXG4gICAgWzE1OCwgMzgyXSxcbiAgICBbMTU5LCAzNzZdLFxuXSk7XG4vKipcbiAqIFBvbHlmaWxsIGZvciBgU3RyaW5nLmZyb21Db2RlUG9pbnRgLiBJdCBpcyB1c2VkIHRvIGNyZWF0ZSBhIHN0cmluZyBmcm9tIGEgVW5pY29kZSBjb2RlIHBvaW50LlxuICovXG5leHBvcnQgY29uc3QgZnJvbUNvZGVQb2ludCA9IFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb24sIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvZXMtYnVpbHRpbnNcbihfYSA9IFN0cmluZy5mcm9tQ29kZVBvaW50KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmdW5jdGlvbiAoY29kZVBvaW50KSB7XG4gICAgbGV0IG91dHB1dCA9IFwiXCI7XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4ZmZmZikge1xuICAgICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMDtcbiAgICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4+IDEwKSAmIDB4M2ZmKSB8IDB4ZDgwMCk7XG4gICAgICAgIGNvZGVQb2ludCA9IDB4ZGMwMCB8IChjb2RlUG9pbnQgJiAweDNmZik7XG4gICAgfVxuICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVQb2ludCk7XG4gICAgcmV0dXJuIG91dHB1dDtcbn07XG4vKipcbiAqIFJlcGxhY2UgdGhlIGdpdmVuIGNvZGUgcG9pbnQgd2l0aCBhIHJlcGxhY2VtZW50IGNoYXJhY3RlciBpZiBpdCBpcyBhXG4gKiBzdXJyb2dhdGUgb3IgaXMgb3V0c2lkZSB0aGUgdmFsaWQgcmFuZ2UuIE90aGVyd2lzZSByZXR1cm4gdGhlIGNvZGVcbiAqIHBvaW50IHVuY2hhbmdlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2VDb2RlUG9pbnQoY29kZVBvaW50KSB7XG4gICAgdmFyIF9hO1xuICAgIGlmICgoY29kZVBvaW50ID49IDB4ZDgwMCAmJiBjb2RlUG9pbnQgPD0gMHhkZmZmKSB8fCBjb2RlUG9pbnQgPiAweDEwZmZmZikge1xuICAgICAgICByZXR1cm4gMHhmZmZkO1xuICAgIH1cbiAgICByZXR1cm4gKF9hID0gZGVjb2RlTWFwLmdldChjb2RlUG9pbnQpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBjb2RlUG9pbnQ7XG59XG4vKipcbiAqIFJlcGxhY2UgdGhlIGNvZGUgcG9pbnQgaWYgcmVsZXZhbnQsIHRoZW4gY29udmVydCBpdCB0byBhIHN0cmluZy5cbiAqXG4gKiBAZGVwcmVjYXRlZCBVc2UgYGZyb21Db2RlUG9pbnQocmVwbGFjZUNvZGVQb2ludChjb2RlUG9pbnQpKWAgaW5zdGVhZC5cbiAqIEBwYXJhbSBjb2RlUG9pbnQgVGhlIGNvZGUgcG9pbnQgdG8gZGVjb2RlLlxuICogQHJldHVybnMgVGhlIGRlY29kZWQgY29kZSBwb2ludC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50KGNvZGVQb2ludCkge1xuICAgIHJldHVybiBmcm9tQ29kZVBvaW50KHJlcGxhY2VDb2RlUG9pbnQoY29kZVBvaW50KSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvZGVfY29kZXBvaW50LmpzLm1hcCIsImltcG9ydCBodG1sRGVjb2RlVHJlZSBmcm9tIFwiLi9nZW5lcmF0ZWQvZGVjb2RlLWRhdGEtaHRtbC5qc1wiO1xuaW1wb3J0IHhtbERlY29kZVRyZWUgZnJvbSBcIi4vZ2VuZXJhdGVkL2RlY29kZS1kYXRhLXhtbC5qc1wiO1xuaW1wb3J0IGRlY29kZUNvZGVQb2ludCwgeyByZXBsYWNlQ29kZVBvaW50LCBmcm9tQ29kZVBvaW50LCB9IGZyb20gXCIuL2RlY29kZV9jb2RlcG9pbnQuanNcIjtcbi8vIFJlLWV4cG9ydCBmb3IgdXNlIGJ5IGVnLiBodG1scGFyc2VyMlxuZXhwb3J0IHsgaHRtbERlY29kZVRyZWUsIHhtbERlY29kZVRyZWUsIGRlY29kZUNvZGVQb2ludCB9O1xuZXhwb3J0IHsgcmVwbGFjZUNvZGVQb2ludCwgZnJvbUNvZGVQb2ludCB9IGZyb20gXCIuL2RlY29kZV9jb2RlcG9pbnQuanNcIjtcbnZhciBDaGFyQ29kZXM7XG4oZnVuY3Rpb24gKENoYXJDb2Rlcykge1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJOVU1cIl0gPSAzNV0gPSBcIk5VTVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJTRU1JXCJdID0gNTldID0gXCJTRU1JXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkVRVUFMU1wiXSA9IDYxXSA9IFwiRVFVQUxTXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIlpFUk9cIl0gPSA0OF0gPSBcIlpFUk9cIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiTklORVwiXSA9IDU3XSA9IFwiTklORVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJMT1dFUl9BXCJdID0gOTddID0gXCJMT1dFUl9BXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkxPV0VSX0ZcIl0gPSAxMDJdID0gXCJMT1dFUl9GXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkxPV0VSX1hcIl0gPSAxMjBdID0gXCJMT1dFUl9YXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkxPV0VSX1pcIl0gPSAxMjJdID0gXCJMT1dFUl9aXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIlVQUEVSX0FcIl0gPSA2NV0gPSBcIlVQUEVSX0FcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiVVBQRVJfRlwiXSA9IDcwXSA9IFwiVVBQRVJfRlwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJVUFBFUl9aXCJdID0gOTBdID0gXCJVUFBFUl9aXCI7XG59KShDaGFyQ29kZXMgfHwgKENoYXJDb2RlcyA9IHt9KSk7XG4vKiogQml0IHRoYXQgbmVlZHMgdG8gYmUgc2V0IHRvIGNvbnZlcnQgYW4gdXBwZXIgY2FzZSBBU0NJSSBjaGFyYWN0ZXIgdG8gbG93ZXIgY2FzZSAqL1xuY29uc3QgVE9fTE9XRVJfQklUID0gMGIxMDAwMDA7XG5leHBvcnQgdmFyIEJpblRyaWVGbGFncztcbihmdW5jdGlvbiAoQmluVHJpZUZsYWdzKSB7XG4gICAgQmluVHJpZUZsYWdzW0JpblRyaWVGbGFnc1tcIlZBTFVFX0xFTkdUSFwiXSA9IDQ5MTUyXSA9IFwiVkFMVUVfTEVOR1RIXCI7XG4gICAgQmluVHJpZUZsYWdzW0JpblRyaWVGbGFnc1tcIkJSQU5DSF9MRU5HVEhcIl0gPSAxNjI1Nl0gPSBcIkJSQU5DSF9MRU5HVEhcIjtcbiAgICBCaW5UcmllRmxhZ3NbQmluVHJpZUZsYWdzW1wiSlVNUF9UQUJMRVwiXSA9IDEyN10gPSBcIkpVTVBfVEFCTEVcIjtcbn0pKEJpblRyaWVGbGFncyB8fCAoQmluVHJpZUZsYWdzID0ge30pKTtcbmZ1bmN0aW9uIGlzTnVtYmVyKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA+PSBDaGFyQ29kZXMuWkVSTyAmJiBjb2RlIDw9IENoYXJDb2Rlcy5OSU5FO1xufVxuZnVuY3Rpb24gaXNIZXhhZGVjaW1hbENoYXJhY3Rlcihjb2RlKSB7XG4gICAgcmV0dXJuICgoY29kZSA+PSBDaGFyQ29kZXMuVVBQRVJfQSAmJiBjb2RlIDw9IENoYXJDb2Rlcy5VUFBFUl9GKSB8fFxuICAgICAgICAoY29kZSA+PSBDaGFyQ29kZXMuTE9XRVJfQSAmJiBjb2RlIDw9IENoYXJDb2Rlcy5MT1dFUl9GKSk7XG59XG5mdW5jdGlvbiBpc0FzY2lpQWxwaGFOdW1lcmljKGNvZGUpIHtcbiAgICByZXR1cm4gKChjb2RlID49IENoYXJDb2Rlcy5VUFBFUl9BICYmIGNvZGUgPD0gQ2hhckNvZGVzLlVQUEVSX1opIHx8XG4gICAgICAgIChjb2RlID49IENoYXJDb2Rlcy5MT1dFUl9BICYmIGNvZGUgPD0gQ2hhckNvZGVzLkxPV0VSX1opIHx8XG4gICAgICAgIGlzTnVtYmVyKGNvZGUpKTtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBjaGFyYWN0ZXIgaXMgYSB2YWxpZCBlbmQgY2hhcmFjdGVyIGZvciBhbiBlbnRpdHkgaW4gYW4gYXR0cmlidXRlLlxuICpcbiAqIEF0dHJpYnV0ZSB2YWx1ZXMgdGhhdCBhcmVuJ3QgdGVybWluYXRlZCBwcm9wZXJseSBhcmVuJ3QgcGFyc2VkLCBhbmQgc2hvdWxkbid0IGxlYWQgdG8gYSBwYXJzZXIgZXJyb3IuXG4gKiBTZWUgdGhlIGV4YW1wbGUgaW4gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvcGFyc2luZy5odG1sI25hbWVkLWNoYXJhY3Rlci1yZWZlcmVuY2Utc3RhdGVcbiAqL1xuZnVuY3Rpb24gaXNFbnRpdHlJbkF0dHJpYnV0ZUludmFsaWRFbmQoY29kZSkge1xuICAgIHJldHVybiBjb2RlID09PSBDaGFyQ29kZXMuRVFVQUxTIHx8IGlzQXNjaWlBbHBoYU51bWVyaWMoY29kZSk7XG59XG52YXIgRW50aXR5RGVjb2RlclN0YXRlO1xuKGZ1bmN0aW9uIChFbnRpdHlEZWNvZGVyU3RhdGUpIHtcbiAgICBFbnRpdHlEZWNvZGVyU3RhdGVbRW50aXR5RGVjb2RlclN0YXRlW1wiRW50aXR5U3RhcnRcIl0gPSAwXSA9IFwiRW50aXR5U3RhcnRcIjtcbiAgICBFbnRpdHlEZWNvZGVyU3RhdGVbRW50aXR5RGVjb2RlclN0YXRlW1wiTnVtZXJpY1N0YXJ0XCJdID0gMV0gPSBcIk51bWVyaWNTdGFydFwiO1xuICAgIEVudGl0eURlY29kZXJTdGF0ZVtFbnRpdHlEZWNvZGVyU3RhdGVbXCJOdW1lcmljRGVjaW1hbFwiXSA9IDJdID0gXCJOdW1lcmljRGVjaW1hbFwiO1xuICAgIEVudGl0eURlY29kZXJTdGF0ZVtFbnRpdHlEZWNvZGVyU3RhdGVbXCJOdW1lcmljSGV4XCJdID0gM10gPSBcIk51bWVyaWNIZXhcIjtcbiAgICBFbnRpdHlEZWNvZGVyU3RhdGVbRW50aXR5RGVjb2RlclN0YXRlW1wiTmFtZWRFbnRpdHlcIl0gPSA0XSA9IFwiTmFtZWRFbnRpdHlcIjtcbn0pKEVudGl0eURlY29kZXJTdGF0ZSB8fCAoRW50aXR5RGVjb2RlclN0YXRlID0ge30pKTtcbmV4cG9ydCB2YXIgRGVjb2RpbmdNb2RlO1xuKGZ1bmN0aW9uIChEZWNvZGluZ01vZGUpIHtcbiAgICAvKiogRW50aXRpZXMgaW4gdGV4dCBub2RlcyB0aGF0IGNhbiBlbmQgd2l0aCBhbnkgY2hhcmFjdGVyLiAqL1xuICAgIERlY29kaW5nTW9kZVtEZWNvZGluZ01vZGVbXCJMZWdhY3lcIl0gPSAwXSA9IFwiTGVnYWN5XCI7XG4gICAgLyoqIE9ubHkgYWxsb3cgZW50aXRpZXMgdGVybWluYXRlZCB3aXRoIGEgc2VtaWNvbG9uLiAqL1xuICAgIERlY29kaW5nTW9kZVtEZWNvZGluZ01vZGVbXCJTdHJpY3RcIl0gPSAxXSA9IFwiU3RyaWN0XCI7XG4gICAgLyoqIEVudGl0aWVzIGluIGF0dHJpYnV0ZXMgaGF2ZSBsaW1pdGF0aW9ucyBvbiBlbmRpbmcgY2hhcmFjdGVycy4gKi9cbiAgICBEZWNvZGluZ01vZGVbRGVjb2RpbmdNb2RlW1wiQXR0cmlidXRlXCJdID0gMl0gPSBcIkF0dHJpYnV0ZVwiO1xufSkoRGVjb2RpbmdNb2RlIHx8IChEZWNvZGluZ01vZGUgPSB7fSkpO1xuLyoqXG4gKiBUb2tlbiBkZWNvZGVyIHdpdGggc3VwcG9ydCBvZiB3cml0aW5nIHBhcnRpYWwgZW50aXRpZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBFbnRpdHlEZWNvZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogVGhlIHRyZWUgdXNlZCB0byBkZWNvZGUgZW50aXRpZXMuICovXG4gICAgZGVjb2RlVHJlZSwgXG4gICAgLyoqXG4gICAgICogVGhlIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gYSBjb2RlcG9pbnQgaXMgZGVjb2RlZC5cbiAgICAgKlxuICAgICAqIEZvciBtdWx0aS1ieXRlIG5hbWVkIGVudGl0aWVzLCB0aGlzIHdpbGwgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzLFxuICAgICAqIHdpdGggdGhlIHNlY29uZCBjb2RlcG9pbnQsIGFuZCB0aGUgc2FtZSBgY29uc3VtZWRgIHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvZGVwb2ludCBUaGUgZGVjb2RlZCBjb2RlcG9pbnQuXG4gICAgICogQHBhcmFtIGNvbnN1bWVkIFRoZSBudW1iZXIgb2YgYnl0ZXMgY29uc3VtZWQgYnkgdGhlIGRlY29kZXIuXG4gICAgICovXG4gICAgZW1pdENvZGVQb2ludCwgXG4gICAgLyoqIEFuIG9iamVjdCB0aGF0IGlzIHVzZWQgdG8gcHJvZHVjZSBlcnJvcnMuICovXG4gICAgZXJyb3JzKSB7XG4gICAgICAgIHRoaXMuZGVjb2RlVHJlZSA9IGRlY29kZVRyZWU7XG4gICAgICAgIHRoaXMuZW1pdENvZGVQb2ludCA9IGVtaXRDb2RlUG9pbnQ7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgICAvKiogVGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGRlY29kZXIuICovXG4gICAgICAgIHRoaXMuc3RhdGUgPSBFbnRpdHlEZWNvZGVyU3RhdGUuRW50aXR5U3RhcnQ7XG4gICAgICAgIC8qKiBDaGFyYWN0ZXJzIHRoYXQgd2VyZSBjb25zdW1lZCB3aGlsZSBwYXJzaW5nIGFuIGVudGl0eS4gKi9cbiAgICAgICAgdGhpcy5jb25zdW1lZCA9IDE7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcmVzdWx0IG9mIHRoZSBlbnRpdHkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEVpdGhlciB0aGUgcmVzdWx0IGluZGV4IG9mIGEgbnVtZXJpYyBlbnRpdHksIG9yIHRoZSBjb2RlcG9pbnQgb2YgYVxuICAgICAgICAgKiBudW1lcmljIGVudGl0eS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVzdWx0ID0gMDtcbiAgICAgICAgLyoqIFRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBkZWNvZGUgdHJlZS4gKi9cbiAgICAgICAgdGhpcy50cmVlSW5kZXggPSAwO1xuICAgICAgICAvKiogVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRoYXQgd2VyZSBjb25zdW1lZCBpbiBleGNlc3MuICovXG4gICAgICAgIHRoaXMuZXhjZXNzID0gMTtcbiAgICAgICAgLyoqIFRoZSBtb2RlIGluIHdoaWNoIHRoZSBkZWNvZGVyIGlzIG9wZXJhdGluZy4gKi9cbiAgICAgICAgdGhpcy5kZWNvZGVNb2RlID0gRGVjb2RpbmdNb2RlLlN0cmljdDtcbiAgICB9XG4gICAgLyoqIFJlc2V0cyB0aGUgaW5zdGFuY2UgdG8gbWFrZSBpdCByZXVzYWJsZS4gKi9cbiAgICBzdGFydEVudGl0eShkZWNvZGVNb2RlKSB7XG4gICAgICAgIHRoaXMuZGVjb2RlTW9kZSA9IGRlY29kZU1vZGU7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBFbnRpdHlEZWNvZGVyU3RhdGUuRW50aXR5U3RhcnQ7XG4gICAgICAgIHRoaXMucmVzdWx0ID0gMDtcbiAgICAgICAgdGhpcy50cmVlSW5kZXggPSAwO1xuICAgICAgICB0aGlzLmV4Y2VzcyA9IDE7XG4gICAgICAgIHRoaXMuY29uc3VtZWQgPSAxO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZSBhbiBlbnRpdHkgdG8gdGhlIGRlY29kZXIuIFRoaXMgY2FuIGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIHBhcnRpYWwgZW50aXRpZXMuXG4gICAgICogSWYgdGhlIGVudGl0eSBpcyBpbmNvbXBsZXRlLCB0aGUgZGVjb2RlciB3aWxsIHJldHVybiAtMS5cbiAgICAgKlxuICAgICAqIE1pcnJvcnMgdGhlIGltcGxlbWVudGF0aW9uIG9mIGBnZXREZWNvZGVyYCwgYnV0IHdpdGggdGhlIGFiaWxpdHkgdG8gc3RvcCBkZWNvZGluZyBpZiB0aGVcbiAgICAgKiBlbnRpdHkgaXMgaW5jb21wbGV0ZSwgYW5kIHJlc3VtZSB3aGVuIHRoZSBuZXh0IHN0cmluZyBpcyB3cml0dGVuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHN0cmluZyBUaGUgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGVudGl0eSAob3IgYSBjb250aW51YXRpb24gb2YgdGhlIGVudGl0eSkuXG4gICAgICogQHBhcmFtIG9mZnNldCBUaGUgb2Zmc2V0IGF0IHdoaWNoIHRoZSBlbnRpdHkgYmVnaW5zLiBTaG91bGQgYmUgMCBpZiB0aGlzIGlzIG5vdCB0aGUgZmlyc3QgY2FsbC5cbiAgICAgKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgdGhhdCB3ZXJlIGNvbnN1bWVkLCBvciAtMSBpZiB0aGUgZW50aXR5IGlzIGluY29tcGxldGUuXG4gICAgICovXG4gICAgd3JpdGUoc3RyLCBvZmZzZXQpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIEVudGl0eURlY29kZXJTdGF0ZS5FbnRpdHlTdGFydDoge1xuICAgICAgICAgICAgICAgIGlmIChzdHIuY2hhckNvZGVBdChvZmZzZXQpID09PSBDaGFyQ29kZXMuTlVNKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBFbnRpdHlEZWNvZGVyU3RhdGUuTnVtZXJpY1N0YXJ0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnN1bWVkICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlTnVtZXJpY1N0YXJ0KHN0ciwgb2Zmc2V0ICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBFbnRpdHlEZWNvZGVyU3RhdGUuTmFtZWRFbnRpdHk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVOYW1lZEVudGl0eShzdHIsIG9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEVudGl0eURlY29kZXJTdGF0ZS5OdW1lcmljU3RhcnQ6IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZU51bWVyaWNTdGFydChzdHIsIG9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEVudGl0eURlY29kZXJTdGF0ZS5OdW1lcmljRGVjaW1hbDoge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlTnVtZXJpY0RlY2ltYWwoc3RyLCBvZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBFbnRpdHlEZWNvZGVyU3RhdGUuTnVtZXJpY0hleDoge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlTnVtZXJpY0hleChzdHIsIG9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEVudGl0eURlY29kZXJTdGF0ZS5OYW1lZEVudGl0eToge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlTmFtZWRFbnRpdHkoc3RyLCBvZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN3aXRjaGVzIGJldHdlZW4gdGhlIG51bWVyaWMgZGVjaW1hbCBhbmQgaGV4YWRlY2ltYWwgc3RhdGVzLlxuICAgICAqXG4gICAgICogRXF1aXZhbGVudCB0byB0aGUgYE51bWVyaWMgY2hhcmFjdGVyIHJlZmVyZW5jZSBzdGF0ZWAgaW4gdGhlIEhUTUwgc3BlYy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdHIgVGhlIHN0cmluZyBjb250YWluaW5nIHRoZSBlbnRpdHkgKG9yIGEgY29udGludWF0aW9uIG9mIHRoZSBlbnRpdHkpLlxuICAgICAqIEBwYXJhbSBvZmZzZXQgVGhlIGN1cnJlbnQgb2Zmc2V0LlxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyB0aGF0IHdlcmUgY29uc3VtZWQsIG9yIC0xIGlmIHRoZSBlbnRpdHkgaXMgaW5jb21wbGV0ZS5cbiAgICAgKi9cbiAgICBzdGF0ZU51bWVyaWNTdGFydChzdHIsIG9mZnNldCkge1xuICAgICAgICBpZiAob2Zmc2V0ID49IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHN0ci5jaGFyQ29kZUF0KG9mZnNldCkgfCBUT19MT1dFUl9CSVQpID09PSBDaGFyQ29kZXMuTE9XRVJfWCkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IEVudGl0eURlY29kZXJTdGF0ZS5OdW1lcmljSGV4O1xuICAgICAgICAgICAgdGhpcy5jb25zdW1lZCArPSAxO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVOdW1lcmljSGV4KHN0ciwgb2Zmc2V0ICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZSA9IEVudGl0eURlY29kZXJTdGF0ZS5OdW1lcmljRGVjaW1hbDtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVOdW1lcmljRGVjaW1hbChzdHIsIG9mZnNldCk7XG4gICAgfVxuICAgIGFkZFRvTnVtZXJpY1Jlc3VsdChzdHIsIHN0YXJ0LCBlbmQsIGJhc2UpIHtcbiAgICAgICAgaWYgKHN0YXJ0ICE9PSBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpZ2l0Q291bnQgPSBlbmQgLSBzdGFydDtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0ID1cbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdCAqIE1hdGgucG93KGJhc2UsIGRpZ2l0Q291bnQpICtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoc3RyLnN1YnN0cihzdGFydCwgZGlnaXRDb3VudCksIGJhc2UpO1xuICAgICAgICAgICAgdGhpcy5jb25zdW1lZCArPSBkaWdpdENvdW50O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIGhleGFkZWNpbWFsIG51bWVyaWMgZW50aXR5LlxuICAgICAqXG4gICAgICogRXF1aXZhbGVudCB0byB0aGUgYEhleGFkZW1pY2FsIGNoYXJhY3RlciByZWZlcmVuY2Ugc3RhdGVgIGluIHRoZSBIVE1MIHNwZWMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RyIFRoZSBzdHJpbmcgY29udGFpbmluZyB0aGUgZW50aXR5IChvciBhIGNvbnRpbnVhdGlvbiBvZiB0aGUgZW50aXR5KS5cbiAgICAgKiBAcGFyYW0gb2Zmc2V0IFRoZSBjdXJyZW50IG9mZnNldC5cbiAgICAgKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgdGhhdCB3ZXJlIGNvbnN1bWVkLCBvciAtMSBpZiB0aGUgZW50aXR5IGlzIGluY29tcGxldGUuXG4gICAgICovXG4gICAgc3RhdGVOdW1lcmljSGV4KHN0ciwgb2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0SWR4ID0gb2Zmc2V0O1xuICAgICAgICB3aGlsZSAob2Zmc2V0IDwgc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgY2hhciA9IHN0ci5jaGFyQ29kZUF0KG9mZnNldCk7XG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoY2hhcikgfHwgaXNIZXhhZGVjaW1hbENoYXJhY3RlcihjaGFyKSkge1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRUb051bWVyaWNSZXN1bHQoc3RyLCBzdGFydElkeCwgb2Zmc2V0LCAxNik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdE51bWVyaWNFbnRpdHkoY2hhciwgMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGRUb051bWVyaWNSZXN1bHQoc3RyLCBzdGFydElkeCwgb2Zmc2V0LCAxNik7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgZGVjaW1hbCBudW1lcmljIGVudGl0eS5cbiAgICAgKlxuICAgICAqIEVxdWl2YWxlbnQgdG8gdGhlIGBEZWNpbWFsIGNoYXJhY3RlciByZWZlcmVuY2Ugc3RhdGVgIGluIHRoZSBIVE1MIHNwZWMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RyIFRoZSBzdHJpbmcgY29udGFpbmluZyB0aGUgZW50aXR5IChvciBhIGNvbnRpbnVhdGlvbiBvZiB0aGUgZW50aXR5KS5cbiAgICAgKiBAcGFyYW0gb2Zmc2V0IFRoZSBjdXJyZW50IG9mZnNldC5cbiAgICAgKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgdGhhdCB3ZXJlIGNvbnN1bWVkLCBvciAtMSBpZiB0aGUgZW50aXR5IGlzIGluY29tcGxldGUuXG4gICAgICovXG4gICAgc3RhdGVOdW1lcmljRGVjaW1hbChzdHIsIG9mZnNldCkge1xuICAgICAgICBjb25zdCBzdGFydElkeCA9IG9mZnNldDtcbiAgICAgICAgd2hpbGUgKG9mZnNldCA8IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYXIgPSBzdHIuY2hhckNvZGVBdChvZmZzZXQpO1xuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGNoYXIpKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFRvTnVtZXJpY1Jlc3VsdChzdHIsIHN0YXJ0SWR4LCBvZmZzZXQsIDEwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbWl0TnVtZXJpY0VudGl0eShjaGFyLCAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZFRvTnVtZXJpY1Jlc3VsdChzdHIsIHN0YXJ0SWR4LCBvZmZzZXQsIDEwKTtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZSBhbmQgZW1pdCBhIG51bWVyaWMgZW50aXR5LlxuICAgICAqXG4gICAgICogSW1wbGVtZW50cyB0aGUgbG9naWMgZnJvbSB0aGUgYEhleGFkZW1pY2FsIGNoYXJhY3RlciByZWZlcmVuY2Ugc3RhcnRcbiAgICAgKiBzdGF0ZWAgYW5kIGBOdW1lcmljIGNoYXJhY3RlciByZWZlcmVuY2UgZW5kIHN0YXRlYCBpbiB0aGUgSFRNTCBzcGVjLlxuICAgICAqXG4gICAgICogQHBhcmFtIGxhc3RDcCBUaGUgbGFzdCBjb2RlIHBvaW50IG9mIHRoZSBlbnRpdHkuIFVzZWQgdG8gc2VlIGlmIHRoZVxuICAgICAqICAgICAgICAgICAgICAgZW50aXR5IHdhcyB0ZXJtaW5hdGVkIHdpdGggYSBzZW1pY29sb24uXG4gICAgICogQHBhcmFtIGV4cGVjdGVkTGVuZ3RoIFRoZSBtaW5pbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRoYXQgc2hvdWxkIGJlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgIGNvbnN1bWVkLiBVc2VkIHRvIHZhbGlkYXRlIHRoYXQgYXQgbGVhc3Qgb25lIGRpZ2l0XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgIHdhcyBjb25zdW1lZC5cbiAgICAgKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgdGhhdCB3ZXJlIGNvbnN1bWVkLlxuICAgICAqL1xuICAgIGVtaXROdW1lcmljRW50aXR5KGxhc3RDcCwgZXhwZWN0ZWRMZW5ndGgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAvLyBFbnN1cmUgd2UgY29uc3VtZWQgYXQgbGVhc3Qgb25lIGRpZ2l0LlxuICAgICAgICBpZiAodGhpcy5jb25zdW1lZCA8PSBleHBlY3RlZExlbmd0aCkge1xuICAgICAgICAgICAgKF9hID0gdGhpcy5lcnJvcnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hYnNlbmNlT2ZEaWdpdHNJbk51bWVyaWNDaGFyYWN0ZXJSZWZlcmVuY2UodGhpcy5jb25zdW1lZCk7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBGaWd1cmUgb3V0IGlmIHRoaXMgaXMgYSBsZWdpdCBlbmQgb2YgdGhlIGVudGl0eVxuICAgICAgICBpZiAobGFzdENwID09PSBDaGFyQ29kZXMuU0VNSSkge1xuICAgICAgICAgICAgdGhpcy5jb25zdW1lZCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGVjb2RlTW9kZSA9PT0gRGVjb2RpbmdNb2RlLlN0cmljdCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbWl0Q29kZVBvaW50KHJlcGxhY2VDb2RlUG9pbnQodGhpcy5yZXN1bHQpLCB0aGlzLmNvbnN1bWVkKTtcbiAgICAgICAgaWYgKHRoaXMuZXJyb3JzKSB7XG4gICAgICAgICAgICBpZiAobGFzdENwICE9PSBDaGFyQ29kZXMuU0VNSSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzLm1pc3NpbmdTZW1pY29sb25BZnRlckNoYXJhY3RlclJlZmVyZW5jZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lcnJvcnMudmFsaWRhdGVOdW1lcmljQ2hhcmFjdGVyUmVmZXJlbmNlKHRoaXMucmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jb25zdW1lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgbmFtZWQgZW50aXR5LlxuICAgICAqXG4gICAgICogRXF1aXZhbGVudCB0byB0aGUgYE5hbWVkIGNoYXJhY3RlciByZWZlcmVuY2Ugc3RhdGVgIGluIHRoZSBIVE1MIHNwZWMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RyIFRoZSBzdHJpbmcgY29udGFpbmluZyB0aGUgZW50aXR5IChvciBhIGNvbnRpbnVhdGlvbiBvZiB0aGUgZW50aXR5KS5cbiAgICAgKiBAcGFyYW0gb2Zmc2V0IFRoZSBjdXJyZW50IG9mZnNldC5cbiAgICAgKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgdGhhdCB3ZXJlIGNvbnN1bWVkLCBvciAtMSBpZiB0aGUgZW50aXR5IGlzIGluY29tcGxldGUuXG4gICAgICovXG4gICAgc3RhdGVOYW1lZEVudGl0eShzdHIsIG9mZnNldCkge1xuICAgICAgICBjb25zdCB7IGRlY29kZVRyZWUgfSA9IHRoaXM7XG4gICAgICAgIGxldCBjdXJyZW50ID0gZGVjb2RlVHJlZVt0aGlzLnRyZWVJbmRleF07XG4gICAgICAgIC8vIFRoZSBtYXNrIGlzIHRoZSBudW1iZXIgb2YgYnl0ZXMgb2YgdGhlIHZhbHVlLCBpbmNsdWRpbmcgdGhlIGN1cnJlbnQgYnl0ZS5cbiAgICAgICAgbGV0IHZhbHVlTGVuZ3RoID0gKGN1cnJlbnQgJiBCaW5UcmllRmxhZ3MuVkFMVUVfTEVOR1RIKSA+PiAxNDtcbiAgICAgICAgZm9yICg7IG9mZnNldCA8IHN0ci5sZW5ndGg7IG9mZnNldCsrLCB0aGlzLmV4Y2VzcysrKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFyID0gc3RyLmNoYXJDb2RlQXQob2Zmc2V0KTtcbiAgICAgICAgICAgIHRoaXMudHJlZUluZGV4ID0gZGV0ZXJtaW5lQnJhbmNoKGRlY29kZVRyZWUsIGN1cnJlbnQsIHRoaXMudHJlZUluZGV4ICsgTWF0aC5tYXgoMSwgdmFsdWVMZW5ndGgpLCBjaGFyKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnRyZWVJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXN1bHQgPT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgYXJlIHBhcnNpbmcgYW4gYXR0cmlidXRlXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmRlY29kZU1vZGUgPT09IERlY29kaW5nTW9kZS5BdHRyaWJ1dGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIHNob3VsZG4ndCBoYXZlIGNvbnN1bWVkIGFueSBjaGFyYWN0ZXJzIGFmdGVyIHRoZSBlbnRpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICAodmFsdWVMZW5ndGggPT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbmQgdGhlcmUgc2hvdWxkIGJlIG5vIGludmFsaWQgY2hhcmFjdGVycy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0VudGl0eUluQXR0cmlidXRlSW52YWxpZEVuZChjaGFyKSkpXG4gICAgICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuZW1pdE5vdFRlcm1pbmF0ZWROYW1lZEVudGl0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudCA9IGRlY29kZVRyZWVbdGhpcy50cmVlSW5kZXhdO1xuICAgICAgICAgICAgdmFsdWVMZW5ndGggPSAoY3VycmVudCAmIEJpblRyaWVGbGFncy5WQUxVRV9MRU5HVEgpID4+IDE0O1xuICAgICAgICAgICAgLy8gSWYgdGhlIGJyYW5jaCBpcyBhIHZhbHVlLCBzdG9yZSBpdCBhbmQgY29udGludWVcbiAgICAgICAgICAgIGlmICh2YWx1ZUxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBlbnRpdHkgaXMgdGVybWluYXRlZCBieSBhIHNlbWljb2xvbiwgd2UgYXJlIGRvbmUuXG4gICAgICAgICAgICAgICAgaWYgKGNoYXIgPT09IENoYXJDb2Rlcy5TRU1JKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVtaXROYW1lZEVudGl0eURhdGEodGhpcy50cmVlSW5kZXgsIHZhbHVlTGVuZ3RoLCB0aGlzLmNvbnN1bWVkICsgdGhpcy5leGNlc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBlbmNvdW50ZXIgYSBub24tdGVybWluYXRlZCAobGVnYWN5KSBlbnRpdHkgd2hpbGUgcGFyc2luZyBzdHJpY3RseSwgdGhlbiBpZ25vcmUgaXQuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVjb2RlTW9kZSAhPT0gRGVjb2RpbmdNb2RlLlN0cmljdCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdCA9IHRoaXMudHJlZUluZGV4O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnN1bWVkICs9IHRoaXMuZXhjZXNzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmV4Y2VzcyA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW1pdCBhIG5hbWVkIGVudGl0eSB0aGF0IHdhcyBub3QgdGVybWluYXRlZCB3aXRoIGEgc2VtaWNvbG9uLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGNvbnN1bWVkLlxuICAgICAqL1xuICAgIGVtaXROb3RUZXJtaW5hdGVkTmFtZWRFbnRpdHkoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgeyByZXN1bHQsIGRlY29kZVRyZWUgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHZhbHVlTGVuZ3RoID0gKGRlY29kZVRyZWVbcmVzdWx0XSAmIEJpblRyaWVGbGFncy5WQUxVRV9MRU5HVEgpID4+IDE0O1xuICAgICAgICB0aGlzLmVtaXROYW1lZEVudGl0eURhdGEocmVzdWx0LCB2YWx1ZUxlbmd0aCwgdGhpcy5jb25zdW1lZCk7XG4gICAgICAgIChfYSA9IHRoaXMuZXJyb3JzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWlzc2luZ1NlbWljb2xvbkFmdGVyQ2hhcmFjdGVyUmVmZXJlbmNlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN1bWVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbWl0IGEgbmFtZWQgZW50aXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHJlc3VsdCBUaGUgaW5kZXggb2YgdGhlIGVudGl0eSBpbiB0aGUgZGVjb2RlIHRyZWUuXG4gICAgICogQHBhcmFtIHZhbHVlTGVuZ3RoIFRoZSBudW1iZXIgb2YgYnl0ZXMgaW4gdGhlIGVudGl0eS5cbiAgICAgKiBAcGFyYW0gY29uc3VtZWQgVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGNvbnN1bWVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGNvbnN1bWVkLlxuICAgICAqL1xuICAgIGVtaXROYW1lZEVudGl0eURhdGEocmVzdWx0LCB2YWx1ZUxlbmd0aCwgY29uc3VtZWQpIHtcbiAgICAgICAgY29uc3QgeyBkZWNvZGVUcmVlIH0gPSB0aGlzO1xuICAgICAgICB0aGlzLmVtaXRDb2RlUG9pbnQodmFsdWVMZW5ndGggPT09IDFcbiAgICAgICAgICAgID8gZGVjb2RlVHJlZVtyZXN1bHRdICYgfkJpblRyaWVGbGFncy5WQUxVRV9MRU5HVEhcbiAgICAgICAgICAgIDogZGVjb2RlVHJlZVtyZXN1bHQgKyAxXSwgY29uc3VtZWQpO1xuICAgICAgICBpZiAodmFsdWVMZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgIC8vIEZvciBtdWx0aS1ieXRlIHZhbHVlcywgd2UgbmVlZCB0byBlbWl0IHRoZSBzZWNvbmQgYnl0ZS5cbiAgICAgICAgICAgIHRoaXMuZW1pdENvZGVQb2ludChkZWNvZGVUcmVlW3Jlc3VsdCArIDJdLCBjb25zdW1lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnN1bWVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTaWduYWwgdG8gdGhlIHBhcnNlciB0aGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IHdhcyByZWFjaGVkLlxuICAgICAqXG4gICAgICogUmVtYWluaW5nIGRhdGEgd2lsbCBiZSBlbWl0dGVkIGFuZCByZWxldmFudCBlcnJvcnMgd2lsbCBiZSBwcm9kdWNlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBjb25zdW1lZC5cbiAgICAgKi9cbiAgICBlbmQoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIEVudGl0eURlY29kZXJTdGF0ZS5OYW1lZEVudGl0eToge1xuICAgICAgICAgICAgICAgIC8vIEVtaXQgYSBuYW1lZCBlbnRpdHkgaWYgd2UgaGF2ZSBvbmUuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzdWx0ICE9PSAwICYmXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmRlY29kZU1vZGUgIT09IERlY29kaW5nTW9kZS5BdHRyaWJ1dGUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0ID09PSB0aGlzLnRyZWVJbmRleClcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmVtaXROb3RUZXJtaW5hdGVkTmFtZWRFbnRpdHkoKVxuICAgICAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBPdGhlcndpc2UsIGVtaXQgYSBudW1lcmljIGVudGl0eSBpZiB3ZSBoYXZlIG9uZS5cbiAgICAgICAgICAgIGNhc2UgRW50aXR5RGVjb2RlclN0YXRlLk51bWVyaWNEZWNpbWFsOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdE51bWVyaWNFbnRpdHkoMCwgMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEVudGl0eURlY29kZXJTdGF0ZS5OdW1lcmljSGV4OiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdE51bWVyaWNFbnRpdHkoMCwgMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEVudGl0eURlY29kZXJTdGF0ZS5OdW1lcmljU3RhcnQ6IHtcbiAgICAgICAgICAgICAgICAoX2EgPSB0aGlzLmVycm9ycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFic2VuY2VPZkRpZ2l0c0luTnVtZXJpY0NoYXJhY3RlclJlZmVyZW5jZSh0aGlzLmNvbnN1bWVkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgRW50aXR5RGVjb2RlclN0YXRlLkVudGl0eVN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIDAgaWYgd2UgaGF2ZSBubyBlbnRpdHkuXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGRlY29kZXMgZW50aXRpZXMgaW4gYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIGRlY29kZVRyZWUgVGhlIGRlY29kZSB0cmVlLlxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0aGF0IGRlY29kZXMgZW50aXRpZXMgaW4gYSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGdldERlY29kZXIoZGVjb2RlVHJlZSkge1xuICAgIGxldCByZXQgPSBcIlwiO1xuICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgRW50aXR5RGVjb2RlcihkZWNvZGVUcmVlLCAoc3RyKSA9PiAocmV0ICs9IGZyb21Db2RlUG9pbnQoc3RyKSkpO1xuICAgIHJldHVybiBmdW5jdGlvbiBkZWNvZGVXaXRoVHJpZShzdHIsIGRlY29kZU1vZGUpIHtcbiAgICAgICAgbGV0IGxhc3RJbmRleCA9IDA7XG4gICAgICAgIGxldCBvZmZzZXQgPSAwO1xuICAgICAgICB3aGlsZSAoKG9mZnNldCA9IHN0ci5pbmRleE9mKFwiJlwiLCBvZmZzZXQpKSA+PSAwKSB7XG4gICAgICAgICAgICByZXQgKz0gc3RyLnNsaWNlKGxhc3RJbmRleCwgb2Zmc2V0KTtcbiAgICAgICAgICAgIGRlY29kZXIuc3RhcnRFbnRpdHkoZGVjb2RlTW9kZSk7XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBkZWNvZGVyLndyaXRlKHN0ciwgXG4gICAgICAgICAgICAvLyBTa2lwIHRoZSBcIiZcIlxuICAgICAgICAgICAgb2Zmc2V0ICsgMSk7XG4gICAgICAgICAgICBpZiAobGVuIDwgMCkge1xuICAgICAgICAgICAgICAgIGxhc3RJbmRleCA9IG9mZnNldCArIGRlY29kZXIuZW5kKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0SW5kZXggPSBvZmZzZXQgKyBsZW47XG4gICAgICAgICAgICAvLyBJZiBgbGVuYCBpcyAwLCBza2lwIHRoZSBjdXJyZW50IGAmYCBhbmQgY29udGludWUuXG4gICAgICAgICAgICBvZmZzZXQgPSBsZW4gPT09IDAgPyBsYXN0SW5kZXggKyAxIDogbGFzdEluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJldCArIHN0ci5zbGljZShsYXN0SW5kZXgpO1xuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgZG9uJ3Qga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgZmluYWwgc3RyaW5nLlxuICAgICAgICByZXQgPSBcIlwiO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59XG4vKipcbiAqIERldGVybWluZXMgdGhlIGJyYW5jaCBvZiB0aGUgY3VycmVudCBub2RlIHRoYXQgaXMgdGFrZW4gZ2l2ZW4gdGhlIGN1cnJlbnRcbiAqIGNoYXJhY3Rlci4gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHRyYXZlcnNlIHRoZSB0cmllLlxuICpcbiAqIEBwYXJhbSBkZWNvZGVUcmVlIFRoZSB0cmllLlxuICogQHBhcmFtIGN1cnJlbnQgVGhlIGN1cnJlbnQgbm9kZS5cbiAqIEBwYXJhbSBub2RlSWR4IFRoZSBpbmRleCByaWdodCBhZnRlciB0aGUgY3VycmVudCBub2RlIGFuZCBpdHMgdmFsdWUuXG4gKiBAcGFyYW0gY2hhciBUaGUgY3VycmVudCBjaGFyYWN0ZXIuXG4gKiBAcmV0dXJucyBUaGUgaW5kZXggb2YgdGhlIG5leHQgbm9kZSwgb3IgLTEgaWYgbm8gYnJhbmNoIGlzIHRha2VuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5lQnJhbmNoKGRlY29kZVRyZWUsIGN1cnJlbnQsIG5vZGVJZHgsIGNoYXIpIHtcbiAgICBjb25zdCBicmFuY2hDb3VudCA9IChjdXJyZW50ICYgQmluVHJpZUZsYWdzLkJSQU5DSF9MRU5HVEgpID4+IDc7XG4gICAgY29uc3QganVtcE9mZnNldCA9IGN1cnJlbnQgJiBCaW5UcmllRmxhZ3MuSlVNUF9UQUJMRTtcbiAgICAvLyBDYXNlIDE6IFNpbmdsZSBicmFuY2ggZW5jb2RlZCBpbiBqdW1wIG9mZnNldFxuICAgIGlmIChicmFuY2hDb3VudCA9PT0gMCkge1xuICAgICAgICByZXR1cm4ganVtcE9mZnNldCAhPT0gMCAmJiBjaGFyID09PSBqdW1wT2Zmc2V0ID8gbm9kZUlkeCA6IC0xO1xuICAgIH1cbiAgICAvLyBDYXNlIDI6IE11bHRpcGxlIGJyYW5jaGVzIGVuY29kZWQgaW4ganVtcCB0YWJsZVxuICAgIGlmIChqdW1wT2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gY2hhciAtIGp1bXBPZmZzZXQ7XG4gICAgICAgIHJldHVybiB2YWx1ZSA8IDAgfHwgdmFsdWUgPj0gYnJhbmNoQ291bnRcbiAgICAgICAgICAgID8gLTFcbiAgICAgICAgICAgIDogZGVjb2RlVHJlZVtub2RlSWR4ICsgdmFsdWVdIC0gMTtcbiAgICB9XG4gICAgLy8gQ2FzZSAzOiBNdWx0aXBsZSBicmFuY2hlcyBlbmNvZGVkIGluIGRpY3Rpb25hcnlcbiAgICAvLyBCaW5hcnkgc2VhcmNoIGZvciB0aGUgY2hhcmFjdGVyLlxuICAgIGxldCBsbyA9IG5vZGVJZHg7XG4gICAgbGV0IGhpID0gbG8gKyBicmFuY2hDb3VudCAtIDE7XG4gICAgd2hpbGUgKGxvIDw9IGhpKSB7XG4gICAgICAgIGNvbnN0IG1pZCA9IChsbyArIGhpKSA+Pj4gMTtcbiAgICAgICAgY29uc3QgbWlkVmFsID0gZGVjb2RlVHJlZVttaWRdO1xuICAgICAgICBpZiAobWlkVmFsIDwgY2hhcikge1xuICAgICAgICAgICAgbG8gPSBtaWQgKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1pZFZhbCA+IGNoYXIpIHtcbiAgICAgICAgICAgIGhpID0gbWlkIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkZWNvZGVUcmVlW21pZCArIGJyYW5jaENvdW50XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5jb25zdCBodG1sRGVjb2RlciA9IGdldERlY29kZXIoaHRtbERlY29kZVRyZWUpO1xuY29uc3QgeG1sRGVjb2RlciA9IGdldERlY29kZXIoeG1sRGVjb2RlVHJlZSk7XG4vKipcbiAqIERlY29kZXMgYW4gSFRNTCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHN0ciBUaGUgc3RyaW5nIHRvIGRlY29kZS5cbiAqIEBwYXJhbSBtb2RlIFRoZSBkZWNvZGluZyBtb2RlLlxuICogQHJldHVybnMgVGhlIGRlY29kZWQgc3RyaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlSFRNTChzdHIsIG1vZGUgPSBEZWNvZGluZ01vZGUuTGVnYWN5KSB7XG4gICAgcmV0dXJuIGh0bWxEZWNvZGVyKHN0ciwgbW9kZSk7XG59XG4vKipcbiAqIERlY29kZXMgYW4gSFRNTCBzdHJpbmcgaW4gYW4gYXR0cmlidXRlLlxuICpcbiAqIEBwYXJhbSBzdHIgVGhlIHN0cmluZyB0byBkZWNvZGUuXG4gKiBAcmV0dXJucyBUaGUgZGVjb2RlZCBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVIVE1MQXR0cmlidXRlKHN0cikge1xuICAgIHJldHVybiBodG1sRGVjb2RlcihzdHIsIERlY29kaW5nTW9kZS5BdHRyaWJ1dGUpO1xufVxuLyoqXG4gKiBEZWNvZGVzIGFuIEhUTUwgc3RyaW5nLCByZXF1aXJpbmcgYWxsIGVudGl0aWVzIHRvIGJlIHRlcm1pbmF0ZWQgYnkgYSBzZW1pY29sb24uXG4gKlxuICogQHBhcmFtIHN0ciBUaGUgc3RyaW5nIHRvIGRlY29kZS5cbiAqIEByZXR1cm5zIFRoZSBkZWNvZGVkIHN0cmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUhUTUxTdHJpY3Qoc3RyKSB7XG4gICAgcmV0dXJuIGh0bWxEZWNvZGVyKHN0ciwgRGVjb2RpbmdNb2RlLlN0cmljdCk7XG59XG4vKipcbiAqIERlY29kZXMgYW4gWE1MIHN0cmluZywgcmVxdWlyaW5nIGFsbCBlbnRpdGllcyB0byBiZSB0ZXJtaW5hdGVkIGJ5IGEgc2VtaWNvbG9uLlxuICpcbiAqIEBwYXJhbSBzdHIgVGhlIHN0cmluZyB0byBkZWNvZGUuXG4gKiBAcmV0dXJucyBUaGUgZGVjb2RlZCBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVYTUwoc3RyKSB7XG4gICAgcmV0dXJuIHhtbERlY29kZXIoc3RyLCBEZWNvZGluZ01vZGUuU3RyaWN0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlY29kZS5qcy5tYXAiLCIvLyBHZW5lcmF0ZWQgdXNpbmcgc2NyaXB0cy93cml0ZS1lbmNvZGUtbWFwLnRzXG5mdW5jdGlvbiByZXN0b3JlRGlmZihhcnIpIHtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBhcnJbaV1bMF0gKz0gYXJyW2kgLSAxXVswXSArIDE7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59XG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCBkZWZhdWx0IG5ldyBNYXAoLyogI19fUFVSRV9fICovIHJlc3RvcmVEaWZmKFtbOSwgXCImVGFiO1wiXSwgWzAsIFwiJk5ld0xpbmU7XCJdLCBbMjIsIFwiJmV4Y2w7XCJdLCBbMCwgXCImcXVvdDtcIl0sIFswLCBcIiZudW07XCJdLCBbMCwgXCImZG9sbGFyO1wiXSwgWzAsIFwiJnBlcmNudDtcIl0sIFswLCBcIiZhbXA7XCJdLCBbMCwgXCImYXBvcztcIl0sIFswLCBcIiZscGFyO1wiXSwgWzAsIFwiJnJwYXI7XCJdLCBbMCwgXCImYXN0O1wiXSwgWzAsIFwiJnBsdXM7XCJdLCBbMCwgXCImY29tbWE7XCJdLCBbMSwgXCImcGVyaW9kO1wiXSwgWzAsIFwiJnNvbDtcIl0sIFsxMCwgXCImY29sb247XCJdLCBbMCwgXCImc2VtaTtcIl0sIFswLCB7IHY6IFwiJmx0O1wiLCBuOiA4NDAyLCBvOiBcIiZudmx0O1wiIH1dLCBbMCwgeyB2OiBcIiZlcXVhbHM7XCIsIG46IDg0MjEsIG86IFwiJmJuZTtcIiB9XSwgWzAsIHsgdjogXCImZ3Q7XCIsIG46IDg0MDIsIG86IFwiJm52Z3Q7XCIgfV0sIFswLCBcIiZxdWVzdDtcIl0sIFswLCBcIiZjb21tYXQ7XCJdLCBbMjYsIFwiJmxicmFjaztcIl0sIFswLCBcIiZic29sO1wiXSwgWzAsIFwiJnJicmFjaztcIl0sIFswLCBcIiZIYXQ7XCJdLCBbMCwgXCImbG93YmFyO1wiXSwgWzAsIFwiJkRpYWNyaXRpY2FsR3JhdmU7XCJdLCBbNSwgeyBuOiAxMDYsIG86IFwiJmZqbGlnO1wiIH1dLCBbMjAsIFwiJmxicmFjZTtcIl0sIFswLCBcIiZ2ZXJiYXI7XCJdLCBbMCwgXCImcmJyYWNlO1wiXSwgWzM0LCBcIiZuYnNwO1wiXSwgWzAsIFwiJmlleGNsO1wiXSwgWzAsIFwiJmNlbnQ7XCJdLCBbMCwgXCImcG91bmQ7XCJdLCBbMCwgXCImY3VycmVuO1wiXSwgWzAsIFwiJnllbjtcIl0sIFswLCBcIiZicnZiYXI7XCJdLCBbMCwgXCImc2VjdDtcIl0sIFswLCBcIiZkaWU7XCJdLCBbMCwgXCImY29weTtcIl0sIFswLCBcIiZvcmRmO1wiXSwgWzAsIFwiJmxhcXVvO1wiXSwgWzAsIFwiJm5vdDtcIl0sIFswLCBcIiZzaHk7XCJdLCBbMCwgXCImY2lyY2xlZFI7XCJdLCBbMCwgXCImbWFjcjtcIl0sIFswLCBcIiZkZWc7XCJdLCBbMCwgXCImUGx1c01pbnVzO1wiXSwgWzAsIFwiJnN1cDI7XCJdLCBbMCwgXCImc3VwMztcIl0sIFswLCBcIiZhY3V0ZTtcIl0sIFswLCBcIiZtaWNybztcIl0sIFswLCBcIiZwYXJhO1wiXSwgWzAsIFwiJmNlbnRlcmRvdDtcIl0sIFswLCBcIiZjZWRpbDtcIl0sIFswLCBcIiZzdXAxO1wiXSwgWzAsIFwiJm9yZG07XCJdLCBbMCwgXCImcmFxdW87XCJdLCBbMCwgXCImZnJhYzE0O1wiXSwgWzAsIFwiJmZyYWMxMjtcIl0sIFswLCBcIiZmcmFjMzQ7XCJdLCBbMCwgXCImaXF1ZXN0O1wiXSwgWzAsIFwiJkFncmF2ZTtcIl0sIFswLCBcIiZBYWN1dGU7XCJdLCBbMCwgXCImQWNpcmM7XCJdLCBbMCwgXCImQXRpbGRlO1wiXSwgWzAsIFwiJkF1bWw7XCJdLCBbMCwgXCImYW5nc3Q7XCJdLCBbMCwgXCImQUVsaWc7XCJdLCBbMCwgXCImQ2NlZGlsO1wiXSwgWzAsIFwiJkVncmF2ZTtcIl0sIFswLCBcIiZFYWN1dGU7XCJdLCBbMCwgXCImRWNpcmM7XCJdLCBbMCwgXCImRXVtbDtcIl0sIFswLCBcIiZJZ3JhdmU7XCJdLCBbMCwgXCImSWFjdXRlO1wiXSwgWzAsIFwiJkljaXJjO1wiXSwgWzAsIFwiJkl1bWw7XCJdLCBbMCwgXCImRVRIO1wiXSwgWzAsIFwiJk50aWxkZTtcIl0sIFswLCBcIiZPZ3JhdmU7XCJdLCBbMCwgXCImT2FjdXRlO1wiXSwgWzAsIFwiJk9jaXJjO1wiXSwgWzAsIFwiJk90aWxkZTtcIl0sIFswLCBcIiZPdW1sO1wiXSwgWzAsIFwiJnRpbWVzO1wiXSwgWzAsIFwiJk9zbGFzaDtcIl0sIFswLCBcIiZVZ3JhdmU7XCJdLCBbMCwgXCImVWFjdXRlO1wiXSwgWzAsIFwiJlVjaXJjO1wiXSwgWzAsIFwiJlV1bWw7XCJdLCBbMCwgXCImWWFjdXRlO1wiXSwgWzAsIFwiJlRIT1JOO1wiXSwgWzAsIFwiJnN6bGlnO1wiXSwgWzAsIFwiJmFncmF2ZTtcIl0sIFswLCBcIiZhYWN1dGU7XCJdLCBbMCwgXCImYWNpcmM7XCJdLCBbMCwgXCImYXRpbGRlO1wiXSwgWzAsIFwiJmF1bWw7XCJdLCBbMCwgXCImYXJpbmc7XCJdLCBbMCwgXCImYWVsaWc7XCJdLCBbMCwgXCImY2NlZGlsO1wiXSwgWzAsIFwiJmVncmF2ZTtcIl0sIFswLCBcIiZlYWN1dGU7XCJdLCBbMCwgXCImZWNpcmM7XCJdLCBbMCwgXCImZXVtbDtcIl0sIFswLCBcIiZpZ3JhdmU7XCJdLCBbMCwgXCImaWFjdXRlO1wiXSwgWzAsIFwiJmljaXJjO1wiXSwgWzAsIFwiJml1bWw7XCJdLCBbMCwgXCImZXRoO1wiXSwgWzAsIFwiJm50aWxkZTtcIl0sIFswLCBcIiZvZ3JhdmU7XCJdLCBbMCwgXCImb2FjdXRlO1wiXSwgWzAsIFwiJm9jaXJjO1wiXSwgWzAsIFwiJm90aWxkZTtcIl0sIFswLCBcIiZvdW1sO1wiXSwgWzAsIFwiJmRpdjtcIl0sIFswLCBcIiZvc2xhc2g7XCJdLCBbMCwgXCImdWdyYXZlO1wiXSwgWzAsIFwiJnVhY3V0ZTtcIl0sIFswLCBcIiZ1Y2lyYztcIl0sIFswLCBcIiZ1dW1sO1wiXSwgWzAsIFwiJnlhY3V0ZTtcIl0sIFswLCBcIiZ0aG9ybjtcIl0sIFswLCBcIiZ5dW1sO1wiXSwgWzAsIFwiJkFtYWNyO1wiXSwgWzAsIFwiJmFtYWNyO1wiXSwgWzAsIFwiJkFicmV2ZTtcIl0sIFswLCBcIiZhYnJldmU7XCJdLCBbMCwgXCImQW9nb247XCJdLCBbMCwgXCImYW9nb247XCJdLCBbMCwgXCImQ2FjdXRlO1wiXSwgWzAsIFwiJmNhY3V0ZTtcIl0sIFswLCBcIiZDY2lyYztcIl0sIFswLCBcIiZjY2lyYztcIl0sIFswLCBcIiZDZG90O1wiXSwgWzAsIFwiJmNkb3Q7XCJdLCBbMCwgXCImQ2Nhcm9uO1wiXSwgWzAsIFwiJmNjYXJvbjtcIl0sIFswLCBcIiZEY2Fyb247XCJdLCBbMCwgXCImZGNhcm9uO1wiXSwgWzAsIFwiJkRzdHJvaztcIl0sIFswLCBcIiZkc3Ryb2s7XCJdLCBbMCwgXCImRW1hY3I7XCJdLCBbMCwgXCImZW1hY3I7XCJdLCBbMiwgXCImRWRvdDtcIl0sIFswLCBcIiZlZG90O1wiXSwgWzAsIFwiJkVvZ29uO1wiXSwgWzAsIFwiJmVvZ29uO1wiXSwgWzAsIFwiJkVjYXJvbjtcIl0sIFswLCBcIiZlY2Fyb247XCJdLCBbMCwgXCImR2NpcmM7XCJdLCBbMCwgXCImZ2NpcmM7XCJdLCBbMCwgXCImR2JyZXZlO1wiXSwgWzAsIFwiJmdicmV2ZTtcIl0sIFswLCBcIiZHZG90O1wiXSwgWzAsIFwiJmdkb3Q7XCJdLCBbMCwgXCImR2NlZGlsO1wiXSwgWzEsIFwiJkhjaXJjO1wiXSwgWzAsIFwiJmhjaXJjO1wiXSwgWzAsIFwiJkhzdHJvaztcIl0sIFswLCBcIiZoc3Ryb2s7XCJdLCBbMCwgXCImSXRpbGRlO1wiXSwgWzAsIFwiJml0aWxkZTtcIl0sIFswLCBcIiZJbWFjcjtcIl0sIFswLCBcIiZpbWFjcjtcIl0sIFsyLCBcIiZJb2dvbjtcIl0sIFswLCBcIiZpb2dvbjtcIl0sIFswLCBcIiZJZG90O1wiXSwgWzAsIFwiJmltYXRoO1wiXSwgWzAsIFwiJklKbGlnO1wiXSwgWzAsIFwiJmlqbGlnO1wiXSwgWzAsIFwiJkpjaXJjO1wiXSwgWzAsIFwiJmpjaXJjO1wiXSwgWzAsIFwiJktjZWRpbDtcIl0sIFswLCBcIiZrY2VkaWw7XCJdLCBbMCwgXCIma2dyZWVuO1wiXSwgWzAsIFwiJkxhY3V0ZTtcIl0sIFswLCBcIiZsYWN1dGU7XCJdLCBbMCwgXCImTGNlZGlsO1wiXSwgWzAsIFwiJmxjZWRpbDtcIl0sIFswLCBcIiZMY2Fyb247XCJdLCBbMCwgXCImbGNhcm9uO1wiXSwgWzAsIFwiJkxtaWRvdDtcIl0sIFswLCBcIiZsbWlkb3Q7XCJdLCBbMCwgXCImTHN0cm9rO1wiXSwgWzAsIFwiJmxzdHJvaztcIl0sIFswLCBcIiZOYWN1dGU7XCJdLCBbMCwgXCImbmFjdXRlO1wiXSwgWzAsIFwiJk5jZWRpbDtcIl0sIFswLCBcIiZuY2VkaWw7XCJdLCBbMCwgXCImTmNhcm9uO1wiXSwgWzAsIFwiJm5jYXJvbjtcIl0sIFswLCBcIiZuYXBvcztcIl0sIFswLCBcIiZFTkc7XCJdLCBbMCwgXCImZW5nO1wiXSwgWzAsIFwiJk9tYWNyO1wiXSwgWzAsIFwiJm9tYWNyO1wiXSwgWzIsIFwiJk9kYmxhYztcIl0sIFswLCBcIiZvZGJsYWM7XCJdLCBbMCwgXCImT0VsaWc7XCJdLCBbMCwgXCImb2VsaWc7XCJdLCBbMCwgXCImUmFjdXRlO1wiXSwgWzAsIFwiJnJhY3V0ZTtcIl0sIFswLCBcIiZSY2VkaWw7XCJdLCBbMCwgXCImcmNlZGlsO1wiXSwgWzAsIFwiJlJjYXJvbjtcIl0sIFswLCBcIiZyY2Fyb247XCJdLCBbMCwgXCImU2FjdXRlO1wiXSwgWzAsIFwiJnNhY3V0ZTtcIl0sIFswLCBcIiZTY2lyYztcIl0sIFswLCBcIiZzY2lyYztcIl0sIFswLCBcIiZTY2VkaWw7XCJdLCBbMCwgXCImc2NlZGlsO1wiXSwgWzAsIFwiJlNjYXJvbjtcIl0sIFswLCBcIiZzY2Fyb247XCJdLCBbMCwgXCImVGNlZGlsO1wiXSwgWzAsIFwiJnRjZWRpbDtcIl0sIFswLCBcIiZUY2Fyb247XCJdLCBbMCwgXCImdGNhcm9uO1wiXSwgWzAsIFwiJlRzdHJvaztcIl0sIFswLCBcIiZ0c3Ryb2s7XCJdLCBbMCwgXCImVXRpbGRlO1wiXSwgWzAsIFwiJnV0aWxkZTtcIl0sIFswLCBcIiZVbWFjcjtcIl0sIFswLCBcIiZ1bWFjcjtcIl0sIFswLCBcIiZVYnJldmU7XCJdLCBbMCwgXCImdWJyZXZlO1wiXSwgWzAsIFwiJlVyaW5nO1wiXSwgWzAsIFwiJnVyaW5nO1wiXSwgWzAsIFwiJlVkYmxhYztcIl0sIFswLCBcIiZ1ZGJsYWM7XCJdLCBbMCwgXCImVW9nb247XCJdLCBbMCwgXCImdW9nb247XCJdLCBbMCwgXCImV2NpcmM7XCJdLCBbMCwgXCImd2NpcmM7XCJdLCBbMCwgXCImWWNpcmM7XCJdLCBbMCwgXCImeWNpcmM7XCJdLCBbMCwgXCImWXVtbDtcIl0sIFswLCBcIiZaYWN1dGU7XCJdLCBbMCwgXCImemFjdXRlO1wiXSwgWzAsIFwiJlpkb3Q7XCJdLCBbMCwgXCImemRvdDtcIl0sIFswLCBcIiZaY2Fyb247XCJdLCBbMCwgXCImemNhcm9uO1wiXSwgWzE5LCBcIiZmbm9mO1wiXSwgWzM0LCBcIiZpbXBlZDtcIl0sIFs2MywgXCImZ2FjdXRlO1wiXSwgWzY1LCBcIiZqbWF0aDtcIl0sIFsxNDIsIFwiJmNpcmM7XCJdLCBbMCwgXCImY2Fyb247XCJdLCBbMTYsIFwiJmJyZXZlO1wiXSwgWzAsIFwiJkRpYWNyaXRpY2FsRG90O1wiXSwgWzAsIFwiJnJpbmc7XCJdLCBbMCwgXCImb2dvbjtcIl0sIFswLCBcIiZEaWFjcml0aWNhbFRpbGRlO1wiXSwgWzAsIFwiJmRibGFjO1wiXSwgWzUxLCBcIiZEb3duQnJldmU7XCJdLCBbMTI3LCBcIiZBbHBoYTtcIl0sIFswLCBcIiZCZXRhO1wiXSwgWzAsIFwiJkdhbW1hO1wiXSwgWzAsIFwiJkRlbHRhO1wiXSwgWzAsIFwiJkVwc2lsb247XCJdLCBbMCwgXCImWmV0YTtcIl0sIFswLCBcIiZFdGE7XCJdLCBbMCwgXCImVGhldGE7XCJdLCBbMCwgXCImSW90YTtcIl0sIFswLCBcIiZLYXBwYTtcIl0sIFswLCBcIiZMYW1iZGE7XCJdLCBbMCwgXCImTXU7XCJdLCBbMCwgXCImTnU7XCJdLCBbMCwgXCImWGk7XCJdLCBbMCwgXCImT21pY3JvbjtcIl0sIFswLCBcIiZQaTtcIl0sIFswLCBcIiZSaG87XCJdLCBbMSwgXCImU2lnbWE7XCJdLCBbMCwgXCImVGF1O1wiXSwgWzAsIFwiJlVwc2lsb247XCJdLCBbMCwgXCImUGhpO1wiXSwgWzAsIFwiJkNoaTtcIl0sIFswLCBcIiZQc2k7XCJdLCBbMCwgXCImb2htO1wiXSwgWzcsIFwiJmFscGhhO1wiXSwgWzAsIFwiJmJldGE7XCJdLCBbMCwgXCImZ2FtbWE7XCJdLCBbMCwgXCImZGVsdGE7XCJdLCBbMCwgXCImZXBzaTtcIl0sIFswLCBcIiZ6ZXRhO1wiXSwgWzAsIFwiJmV0YTtcIl0sIFswLCBcIiZ0aGV0YTtcIl0sIFswLCBcIiZpb3RhO1wiXSwgWzAsIFwiJmthcHBhO1wiXSwgWzAsIFwiJmxhbWJkYTtcIl0sIFswLCBcIiZtdTtcIl0sIFswLCBcIiZudTtcIl0sIFswLCBcIiZ4aTtcIl0sIFswLCBcIiZvbWljcm9uO1wiXSwgWzAsIFwiJnBpO1wiXSwgWzAsIFwiJnJobztcIl0sIFswLCBcIiZzaWdtYWY7XCJdLCBbMCwgXCImc2lnbWE7XCJdLCBbMCwgXCImdGF1O1wiXSwgWzAsIFwiJnVwc2k7XCJdLCBbMCwgXCImcGhpO1wiXSwgWzAsIFwiJmNoaTtcIl0sIFswLCBcIiZwc2k7XCJdLCBbMCwgXCImb21lZ2E7XCJdLCBbNywgXCImdGhldGFzeW07XCJdLCBbMCwgXCImVXBzaTtcIl0sIFsyLCBcIiZwaGl2O1wiXSwgWzAsIFwiJnBpdjtcIl0sIFs1LCBcIiZHYW1tYWQ7XCJdLCBbMCwgXCImZGlnYW1tYTtcIl0sIFsxOCwgXCIma2FwcGF2O1wiXSwgWzAsIFwiJnJob3Y7XCJdLCBbMywgXCImZXBzaXY7XCJdLCBbMCwgXCImYmFja2Vwc2lsb247XCJdLCBbMTAsIFwiJklPY3k7XCJdLCBbMCwgXCImREpjeTtcIl0sIFswLCBcIiZHSmN5O1wiXSwgWzAsIFwiJkp1a2N5O1wiXSwgWzAsIFwiJkRTY3k7XCJdLCBbMCwgXCImSXVrY3k7XCJdLCBbMCwgXCImWUljeTtcIl0sIFswLCBcIiZKc2VyY3k7XCJdLCBbMCwgXCImTEpjeTtcIl0sIFswLCBcIiZOSmN5O1wiXSwgWzAsIFwiJlRTSGN5O1wiXSwgWzAsIFwiJktKY3k7XCJdLCBbMSwgXCImVWJyY3k7XCJdLCBbMCwgXCImRFpjeTtcIl0sIFswLCBcIiZBY3k7XCJdLCBbMCwgXCImQmN5O1wiXSwgWzAsIFwiJlZjeTtcIl0sIFswLCBcIiZHY3k7XCJdLCBbMCwgXCImRGN5O1wiXSwgWzAsIFwiJklFY3k7XCJdLCBbMCwgXCImWkhjeTtcIl0sIFswLCBcIiZaY3k7XCJdLCBbMCwgXCImSWN5O1wiXSwgWzAsIFwiJkpjeTtcIl0sIFswLCBcIiZLY3k7XCJdLCBbMCwgXCImTGN5O1wiXSwgWzAsIFwiJk1jeTtcIl0sIFswLCBcIiZOY3k7XCJdLCBbMCwgXCImT2N5O1wiXSwgWzAsIFwiJlBjeTtcIl0sIFswLCBcIiZSY3k7XCJdLCBbMCwgXCImU2N5O1wiXSwgWzAsIFwiJlRjeTtcIl0sIFswLCBcIiZVY3k7XCJdLCBbMCwgXCImRmN5O1wiXSwgWzAsIFwiJktIY3k7XCJdLCBbMCwgXCImVFNjeTtcIl0sIFswLCBcIiZDSGN5O1wiXSwgWzAsIFwiJlNIY3k7XCJdLCBbMCwgXCImU0hDSGN5O1wiXSwgWzAsIFwiJkhBUkRjeTtcIl0sIFswLCBcIiZZY3k7XCJdLCBbMCwgXCImU09GVGN5O1wiXSwgWzAsIFwiJkVjeTtcIl0sIFswLCBcIiZZVWN5O1wiXSwgWzAsIFwiJllBY3k7XCJdLCBbMCwgXCImYWN5O1wiXSwgWzAsIFwiJmJjeTtcIl0sIFswLCBcIiZ2Y3k7XCJdLCBbMCwgXCImZ2N5O1wiXSwgWzAsIFwiJmRjeTtcIl0sIFswLCBcIiZpZWN5O1wiXSwgWzAsIFwiJnpoY3k7XCJdLCBbMCwgXCImemN5O1wiXSwgWzAsIFwiJmljeTtcIl0sIFswLCBcIiZqY3k7XCJdLCBbMCwgXCIma2N5O1wiXSwgWzAsIFwiJmxjeTtcIl0sIFswLCBcIiZtY3k7XCJdLCBbMCwgXCImbmN5O1wiXSwgWzAsIFwiJm9jeTtcIl0sIFswLCBcIiZwY3k7XCJdLCBbMCwgXCImcmN5O1wiXSwgWzAsIFwiJnNjeTtcIl0sIFswLCBcIiZ0Y3k7XCJdLCBbMCwgXCImdWN5O1wiXSwgWzAsIFwiJmZjeTtcIl0sIFswLCBcIiZraGN5O1wiXSwgWzAsIFwiJnRzY3k7XCJdLCBbMCwgXCImY2hjeTtcIl0sIFswLCBcIiZzaGN5O1wiXSwgWzAsIFwiJnNoY2hjeTtcIl0sIFswLCBcIiZoYXJkY3k7XCJdLCBbMCwgXCImeWN5O1wiXSwgWzAsIFwiJnNvZnRjeTtcIl0sIFswLCBcIiZlY3k7XCJdLCBbMCwgXCImeXVjeTtcIl0sIFswLCBcIiZ5YWN5O1wiXSwgWzEsIFwiJmlvY3k7XCJdLCBbMCwgXCImZGpjeTtcIl0sIFswLCBcIiZnamN5O1wiXSwgWzAsIFwiJmp1a2N5O1wiXSwgWzAsIFwiJmRzY3k7XCJdLCBbMCwgXCImaXVrY3k7XCJdLCBbMCwgXCImeWljeTtcIl0sIFswLCBcIiZqc2VyY3k7XCJdLCBbMCwgXCImbGpjeTtcIl0sIFswLCBcIiZuamN5O1wiXSwgWzAsIFwiJnRzaGN5O1wiXSwgWzAsIFwiJmtqY3k7XCJdLCBbMSwgXCImdWJyY3k7XCJdLCBbMCwgXCImZHpjeTtcIl0sIFs3MDc0LCBcIiZlbnNwO1wiXSwgWzAsIFwiJmVtc3A7XCJdLCBbMCwgXCImZW1zcDEzO1wiXSwgWzAsIFwiJmVtc3AxNDtcIl0sIFsxLCBcIiZudW1zcDtcIl0sIFswLCBcIiZwdW5jc3A7XCJdLCBbMCwgXCImVGhpblNwYWNlO1wiXSwgWzAsIFwiJmhhaXJzcDtcIl0sIFswLCBcIiZOZWdhdGl2ZU1lZGl1bVNwYWNlO1wiXSwgWzAsIFwiJnp3bmo7XCJdLCBbMCwgXCImendqO1wiXSwgWzAsIFwiJmxybTtcIl0sIFswLCBcIiZybG07XCJdLCBbMCwgXCImZGFzaDtcIl0sIFsyLCBcIiZuZGFzaDtcIl0sIFswLCBcIiZtZGFzaDtcIl0sIFswLCBcIiZob3JiYXI7XCJdLCBbMCwgXCImVmVyYmFyO1wiXSwgWzEsIFwiJmxzcXVvO1wiXSwgWzAsIFwiJkNsb3NlQ3VybHlRdW90ZTtcIl0sIFswLCBcIiZsc3F1b3I7XCJdLCBbMSwgXCImbGRxdW87XCJdLCBbMCwgXCImQ2xvc2VDdXJseURvdWJsZVF1b3RlO1wiXSwgWzAsIFwiJmJkcXVvO1wiXSwgWzEsIFwiJmRhZ2dlcjtcIl0sIFswLCBcIiZEYWdnZXI7XCJdLCBbMCwgXCImYnVsbDtcIl0sIFsyLCBcIiZubGRyO1wiXSwgWzAsIFwiJmhlbGxpcDtcIl0sIFs5LCBcIiZwZXJtaWw7XCJdLCBbMCwgXCImcGVydGVuaztcIl0sIFswLCBcIiZwcmltZTtcIl0sIFswLCBcIiZQcmltZTtcIl0sIFswLCBcIiZ0cHJpbWU7XCJdLCBbMCwgXCImYmFja3ByaW1lO1wiXSwgWzMsIFwiJmxzYXF1bztcIl0sIFswLCBcIiZyc2FxdW87XCJdLCBbMywgXCImb2xpbmU7XCJdLCBbMiwgXCImY2FyZXQ7XCJdLCBbMSwgXCImaHlidWxsO1wiXSwgWzAsIFwiJmZyYXNsO1wiXSwgWzEwLCBcIiZic2VtaTtcIl0sIFs3LCBcIiZxcHJpbWU7XCJdLCBbNywgeyB2OiBcIiZNZWRpdW1TcGFjZTtcIiwgbjogODIwMiwgbzogXCImVGhpY2tTcGFjZTtcIiB9XSwgWzAsIFwiJk5vQnJlYWs7XCJdLCBbMCwgXCImYWY7XCJdLCBbMCwgXCImSW52aXNpYmxlVGltZXM7XCJdLCBbMCwgXCImaWM7XCJdLCBbNzIsIFwiJmV1cm87XCJdLCBbNDYsIFwiJnRkb3Q7XCJdLCBbMCwgXCImRG90RG90O1wiXSwgWzM3LCBcIiZjb21wbGV4ZXM7XCJdLCBbMiwgXCImaW5jYXJlO1wiXSwgWzQsIFwiJmdzY3I7XCJdLCBbMCwgXCImaGFtaWx0O1wiXSwgWzAsIFwiJkhmcjtcIl0sIFswLCBcIiZIb3BmO1wiXSwgWzAsIFwiJnBsYW5ja2g7XCJdLCBbMCwgXCImaGJhcjtcIl0sIFswLCBcIiZpbWFnbGluZTtcIl0sIFswLCBcIiZJZnI7XCJdLCBbMCwgXCImbGFncmFuO1wiXSwgWzAsIFwiJmVsbDtcIl0sIFsxLCBcIiZuYXR1cmFscztcIl0sIFswLCBcIiZudW1lcm87XCJdLCBbMCwgXCImY29weXNyO1wiXSwgWzAsIFwiJndlaWVycDtcIl0sIFswLCBcIiZQb3BmO1wiXSwgWzAsIFwiJlFvcGY7XCJdLCBbMCwgXCImcmVhbGluZTtcIl0sIFswLCBcIiZyZWFsO1wiXSwgWzAsIFwiJnJlYWxzO1wiXSwgWzAsIFwiJnJ4O1wiXSwgWzMsIFwiJnRyYWRlO1wiXSwgWzEsIFwiJmludGVnZXJzO1wiXSwgWzIsIFwiJm1obztcIl0sIFswLCBcIiZ6ZWV0cmY7XCJdLCBbMCwgXCImaWlvdGE7XCJdLCBbMiwgXCImYmVybm91O1wiXSwgWzAsIFwiJkNheWxleXM7XCJdLCBbMSwgXCImZXNjcjtcIl0sIFswLCBcIiZFc2NyO1wiXSwgWzAsIFwiJkZvdXJpZXJ0cmY7XCJdLCBbMSwgXCImTWVsbGludHJmO1wiXSwgWzAsIFwiJm9yZGVyO1wiXSwgWzAsIFwiJmFsZWZzeW07XCJdLCBbMCwgXCImYmV0aDtcIl0sIFswLCBcIiZnaW1lbDtcIl0sIFswLCBcIiZkYWxldGg7XCJdLCBbMTIsIFwiJkNhcGl0YWxEaWZmZXJlbnRpYWxEO1wiXSwgWzAsIFwiJmRkO1wiXSwgWzAsIFwiJmVlO1wiXSwgWzAsIFwiJmlpO1wiXSwgWzEwLCBcIiZmcmFjMTM7XCJdLCBbMCwgXCImZnJhYzIzO1wiXSwgWzAsIFwiJmZyYWMxNTtcIl0sIFswLCBcIiZmcmFjMjU7XCJdLCBbMCwgXCImZnJhYzM1O1wiXSwgWzAsIFwiJmZyYWM0NTtcIl0sIFswLCBcIiZmcmFjMTY7XCJdLCBbMCwgXCImZnJhYzU2O1wiXSwgWzAsIFwiJmZyYWMxODtcIl0sIFswLCBcIiZmcmFjMzg7XCJdLCBbMCwgXCImZnJhYzU4O1wiXSwgWzAsIFwiJmZyYWM3ODtcIl0sIFs0OSwgXCImbGFycjtcIl0sIFswLCBcIiZTaG9ydFVwQXJyb3c7XCJdLCBbMCwgXCImcmFycjtcIl0sIFswLCBcIiZkYXJyO1wiXSwgWzAsIFwiJmhhcnI7XCJdLCBbMCwgXCImdXBkb3duYXJyb3c7XCJdLCBbMCwgXCImbndhcnI7XCJdLCBbMCwgXCImbmVhcnI7XCJdLCBbMCwgXCImTG93ZXJSaWdodEFycm93O1wiXSwgWzAsIFwiJkxvd2VyTGVmdEFycm93O1wiXSwgWzAsIFwiJm5sYXJyO1wiXSwgWzAsIFwiJm5yYXJyO1wiXSwgWzEsIHsgdjogXCImcmFycnc7XCIsIG46IDgyNCwgbzogXCImbnJhcnJ3O1wiIH1dLCBbMCwgXCImTGFycjtcIl0sIFswLCBcIiZVYXJyO1wiXSwgWzAsIFwiJlJhcnI7XCJdLCBbMCwgXCImRGFycjtcIl0sIFswLCBcIiZsYXJydGw7XCJdLCBbMCwgXCImcmFycnRsO1wiXSwgWzAsIFwiJkxlZnRUZWVBcnJvdztcIl0sIFswLCBcIiZtYXBzdG91cDtcIl0sIFswLCBcIiZtYXA7XCJdLCBbMCwgXCImRG93blRlZUFycm93O1wiXSwgWzEsIFwiJmhvb2tsZWZ0YXJyb3c7XCJdLCBbMCwgXCImaG9va3JpZ2h0YXJyb3c7XCJdLCBbMCwgXCImbGFycmxwO1wiXSwgWzAsIFwiJmxvb3BhcnJvd3JpZ2h0O1wiXSwgWzAsIFwiJmhhcnJ3O1wiXSwgWzAsIFwiJm5oYXJyO1wiXSwgWzEsIFwiJmxzaDtcIl0sIFswLCBcIiZyc2g7XCJdLCBbMCwgXCImbGRzaDtcIl0sIFswLCBcIiZyZHNoO1wiXSwgWzEsIFwiJmNyYXJyO1wiXSwgWzAsIFwiJmN1bGFycjtcIl0sIFswLCBcIiZjdXJhcnI7XCJdLCBbMiwgXCImY2lyY2xlYXJyb3dsZWZ0O1wiXSwgWzAsIFwiJmNpcmNsZWFycm93cmlnaHQ7XCJdLCBbMCwgXCImbGVmdGhhcnBvb251cDtcIl0sIFswLCBcIiZEb3duTGVmdFZlY3RvcjtcIl0sIFswLCBcIiZSaWdodFVwVmVjdG9yO1wiXSwgWzAsIFwiJkxlZnRVcFZlY3RvcjtcIl0sIFswLCBcIiZyaGFydTtcIl0sIFswLCBcIiZEb3duUmlnaHRWZWN0b3I7XCJdLCBbMCwgXCImZGhhcnI7XCJdLCBbMCwgXCImZGhhcmw7XCJdLCBbMCwgXCImUmlnaHRBcnJvd0xlZnRBcnJvdztcIl0sIFswLCBcIiZ1ZGFycjtcIl0sIFswLCBcIiZMZWZ0QXJyb3dSaWdodEFycm93O1wiXSwgWzAsIFwiJmxlZnRsZWZ0YXJyb3dzO1wiXSwgWzAsIFwiJnVwdXBhcnJvd3M7XCJdLCBbMCwgXCImcmlnaHRyaWdodGFycm93cztcIl0sIFswLCBcIiZkZGFycjtcIl0sIFswLCBcIiZsZWZ0cmlnaHRoYXJwb29ucztcIl0sIFswLCBcIiZFcXVpbGlicml1bTtcIl0sIFswLCBcIiZubEFycjtcIl0sIFswLCBcIiZuaEFycjtcIl0sIFswLCBcIiZuckFycjtcIl0sIFswLCBcIiZEb3VibGVMZWZ0QXJyb3c7XCJdLCBbMCwgXCImRG91YmxlVXBBcnJvdztcIl0sIFswLCBcIiZEb3VibGVSaWdodEFycm93O1wiXSwgWzAsIFwiJmRBcnI7XCJdLCBbMCwgXCImRG91YmxlTGVmdFJpZ2h0QXJyb3c7XCJdLCBbMCwgXCImRG91YmxlVXBEb3duQXJyb3c7XCJdLCBbMCwgXCImbndBcnI7XCJdLCBbMCwgXCImbmVBcnI7XCJdLCBbMCwgXCImc2VBcnI7XCJdLCBbMCwgXCImc3dBcnI7XCJdLCBbMCwgXCImbEFhcnI7XCJdLCBbMCwgXCImckFhcnI7XCJdLCBbMSwgXCImemlncmFycjtcIl0sIFs2LCBcIiZsYXJyYjtcIl0sIFswLCBcIiZyYXJyYjtcIl0sIFsxNSwgXCImRG93bkFycm93VXBBcnJvdztcIl0sIFs3LCBcIiZsb2FycjtcIl0sIFswLCBcIiZyb2FycjtcIl0sIFswLCBcIiZob2FycjtcIl0sIFswLCBcIiZmb3JhbGw7XCJdLCBbMCwgXCImY29tcDtcIl0sIFswLCB7IHY6IFwiJnBhcnQ7XCIsIG46IDgyNCwgbzogXCImbnBhcnQ7XCIgfV0sIFswLCBcIiZleGlzdDtcIl0sIFswLCBcIiZuZXhpc3Q7XCJdLCBbMCwgXCImZW1wdHk7XCJdLCBbMSwgXCImRGVsO1wiXSwgWzAsIFwiJkVsZW1lbnQ7XCJdLCBbMCwgXCImTm90RWxlbWVudDtcIl0sIFsxLCBcIiZuaTtcIl0sIFswLCBcIiZub3RuaTtcIl0sIFsyLCBcIiZwcm9kO1wiXSwgWzAsIFwiJmNvcHJvZDtcIl0sIFswLCBcIiZzdW07XCJdLCBbMCwgXCImbWludXM7XCJdLCBbMCwgXCImTWludXNQbHVzO1wiXSwgWzAsIFwiJmRvdHBsdXM7XCJdLCBbMSwgXCImQmFja3NsYXNoO1wiXSwgWzAsIFwiJmxvd2FzdDtcIl0sIFswLCBcIiZjb21wZm47XCJdLCBbMSwgXCImcmFkaWM7XCJdLCBbMiwgXCImcHJvcDtcIl0sIFswLCBcIiZpbmZpbjtcIl0sIFswLCBcIiZhbmdydDtcIl0sIFswLCB7IHY6IFwiJmFuZztcIiwgbjogODQwMiwgbzogXCImbmFuZztcIiB9XSwgWzAsIFwiJmFuZ21zZDtcIl0sIFswLCBcIiZhbmdzcGg7XCJdLCBbMCwgXCImbWlkO1wiXSwgWzAsIFwiJm5taWQ7XCJdLCBbMCwgXCImRG91YmxlVmVydGljYWxCYXI7XCJdLCBbMCwgXCImTm90RG91YmxlVmVydGljYWxCYXI7XCJdLCBbMCwgXCImYW5kO1wiXSwgWzAsIFwiJm9yO1wiXSwgWzAsIHsgdjogXCImY2FwO1wiLCBuOiA2NTAyNCwgbzogXCImY2FwcztcIiB9XSwgWzAsIHsgdjogXCImY3VwO1wiLCBuOiA2NTAyNCwgbzogXCImY3VwcztcIiB9XSwgWzAsIFwiJmludDtcIl0sIFswLCBcIiZJbnQ7XCJdLCBbMCwgXCImaWlpbnQ7XCJdLCBbMCwgXCImY29uaW50O1wiXSwgWzAsIFwiJkNvbmludDtcIl0sIFswLCBcIiZDY29uaW50O1wiXSwgWzAsIFwiJmN3aW50O1wiXSwgWzAsIFwiJkNsb2Nrd2lzZUNvbnRvdXJJbnRlZ3JhbDtcIl0sIFswLCBcIiZhd2NvbmludDtcIl0sIFswLCBcIiZ0aGVyZTQ7XCJdLCBbMCwgXCImYmVjYXVzO1wiXSwgWzAsIFwiJnJhdGlvO1wiXSwgWzAsIFwiJkNvbG9uO1wiXSwgWzAsIFwiJmRvdG1pbnVzO1wiXSwgWzEsIFwiJm1ERG90O1wiXSwgWzAsIFwiJmhvbXRodDtcIl0sIFswLCB7IHY6IFwiJnNpbTtcIiwgbjogODQwMiwgbzogXCImbnZzaW07XCIgfV0sIFswLCB7IHY6IFwiJmJhY2tzaW07XCIsIG46IDgxNywgbzogXCImcmFjZTtcIiB9XSwgWzAsIHsgdjogXCImYWM7XCIsIG46IDgxOSwgbzogXCImYWNFO1wiIH1dLCBbMCwgXCImYWNkO1wiXSwgWzAsIFwiJlZlcnRpY2FsVGlsZGU7XCJdLCBbMCwgXCImTm90VGlsZGU7XCJdLCBbMCwgeyB2OiBcIiZlcXNpbTtcIiwgbjogODI0LCBvOiBcIiZuZXNpbTtcIiB9XSwgWzAsIFwiJnNpbWU7XCJdLCBbMCwgXCImTm90VGlsZGVFcXVhbDtcIl0sIFswLCBcIiZjb25nO1wiXSwgWzAsIFwiJnNpbW5lO1wiXSwgWzAsIFwiJm5jb25nO1wiXSwgWzAsIFwiJmFwO1wiXSwgWzAsIFwiJm5hcDtcIl0sIFswLCBcIiZhcGU7XCJdLCBbMCwgeyB2OiBcIiZhcGlkO1wiLCBuOiA4MjQsIG86IFwiJm5hcGlkO1wiIH1dLCBbMCwgXCImYmFja2Nvbmc7XCJdLCBbMCwgeyB2OiBcIiZhc3ltcGVxO1wiLCBuOiA4NDAyLCBvOiBcIiZudmFwO1wiIH1dLCBbMCwgeyB2OiBcIiZidW1wO1wiLCBuOiA4MjQsIG86IFwiJm5idW1wO1wiIH1dLCBbMCwgeyB2OiBcIiZidW1wZTtcIiwgbjogODI0LCBvOiBcIiZuYnVtcGU7XCIgfV0sIFswLCB7IHY6IFwiJmRvdGVxO1wiLCBuOiA4MjQsIG86IFwiJm5lZG90O1wiIH1dLCBbMCwgXCImZG90ZXFkb3Q7XCJdLCBbMCwgXCImZWZEb3Q7XCJdLCBbMCwgXCImZXJEb3Q7XCJdLCBbMCwgXCImQXNzaWduO1wiXSwgWzAsIFwiJmVjb2xvbjtcIl0sIFswLCBcIiZlY2lyO1wiXSwgWzAsIFwiJmNpcmNlcTtcIl0sIFsxLCBcIiZ3ZWRnZXE7XCJdLCBbMCwgXCImdmVlZXE7XCJdLCBbMSwgXCImdHJpYW5nbGVxO1wiXSwgWzIsIFwiJmVxdWVzdDtcIl0sIFswLCBcIiZuZTtcIl0sIFswLCB7IHY6IFwiJkNvbmdydWVudDtcIiwgbjogODQyMSwgbzogXCImYm5lcXVpdjtcIiB9XSwgWzAsIFwiJm5lcXVpdjtcIl0sIFsxLCB7IHY6IFwiJmxlO1wiLCBuOiA4NDAyLCBvOiBcIiZudmxlO1wiIH1dLCBbMCwgeyB2OiBcIiZnZTtcIiwgbjogODQwMiwgbzogXCImbnZnZTtcIiB9XSwgWzAsIHsgdjogXCImbEU7XCIsIG46IDgyNCwgbzogXCImbmxFO1wiIH1dLCBbMCwgeyB2OiBcIiZnRTtcIiwgbjogODI0LCBvOiBcIiZuZ0U7XCIgfV0sIFswLCB7IHY6IFwiJmxuRTtcIiwgbjogNjUwMjQsIG86IFwiJmx2ZXJ0bmVxcTtcIiB9XSwgWzAsIHsgdjogXCImZ25FO1wiLCBuOiA2NTAyNCwgbzogXCImZ3ZlcnRuZXFxO1wiIH1dLCBbMCwgeyB2OiBcIiZsbDtcIiwgbjogbmV3IE1hcCgvKiAjX19QVVJFX18gKi8gcmVzdG9yZURpZmYoW1s4MjQsIFwiJm5MdHY7XCJdLCBbNzU3NywgXCImbkx0O1wiXV0pKSB9XSwgWzAsIHsgdjogXCImZ2c7XCIsIG46IG5ldyBNYXAoLyogI19fUFVSRV9fICovIHJlc3RvcmVEaWZmKFtbODI0LCBcIiZuR3R2O1wiXSwgWzc1NzcsIFwiJm5HdDtcIl1dKSkgfV0sIFswLCBcIiZiZXR3ZWVuO1wiXSwgWzAsIFwiJk5vdEN1cENhcDtcIl0sIFswLCBcIiZubGVzcztcIl0sIFswLCBcIiZuZ3Q7XCJdLCBbMCwgXCImbmxlO1wiXSwgWzAsIFwiJm5nZTtcIl0sIFswLCBcIiZsZXNzc2ltO1wiXSwgWzAsIFwiJkdyZWF0ZXJUaWxkZTtcIl0sIFswLCBcIiZubHNpbTtcIl0sIFswLCBcIiZuZ3NpbTtcIl0sIFswLCBcIiZMZXNzR3JlYXRlcjtcIl0sIFswLCBcIiZnbDtcIl0sIFswLCBcIiZOb3RMZXNzR3JlYXRlcjtcIl0sIFswLCBcIiZOb3RHcmVhdGVyTGVzcztcIl0sIFswLCBcIiZwcjtcIl0sIFswLCBcIiZzYztcIl0sIFswLCBcIiZwcmN1ZTtcIl0sIFswLCBcIiZzY2N1ZTtcIl0sIFswLCBcIiZQcmVjZWRlc1RpbGRlO1wiXSwgWzAsIHsgdjogXCImc2NzaW07XCIsIG46IDgyNCwgbzogXCImTm90U3VjY2VlZHNUaWxkZTtcIiB9XSwgWzAsIFwiJk5vdFByZWNlZGVzO1wiXSwgWzAsIFwiJk5vdFN1Y2NlZWRzO1wiXSwgWzAsIHsgdjogXCImc3ViO1wiLCBuOiA4NDAyLCBvOiBcIiZOb3RTdWJzZXQ7XCIgfV0sIFswLCB7IHY6IFwiJnN1cDtcIiwgbjogODQwMiwgbzogXCImTm90U3VwZXJzZXQ7XCIgfV0sIFswLCBcIiZuc3ViO1wiXSwgWzAsIFwiJm5zdXA7XCJdLCBbMCwgXCImc3ViZTtcIl0sIFswLCBcIiZzdXBlO1wiXSwgWzAsIFwiJk5vdFN1YnNldEVxdWFsO1wiXSwgWzAsIFwiJk5vdFN1cGVyc2V0RXF1YWw7XCJdLCBbMCwgeyB2OiBcIiZzdWJuZTtcIiwgbjogNjUwMjQsIG86IFwiJnZhcnN1YnNldG5lcTtcIiB9XSwgWzAsIHsgdjogXCImc3VwbmU7XCIsIG46IDY1MDI0LCBvOiBcIiZ2YXJzdXBzZXRuZXE7XCIgfV0sIFsxLCBcIiZjdXBkb3Q7XCJdLCBbMCwgXCImVW5pb25QbHVzO1wiXSwgWzAsIHsgdjogXCImc3FzdWI7XCIsIG46IDgyNCwgbzogXCImTm90U3F1YXJlU3Vic2V0O1wiIH1dLCBbMCwgeyB2OiBcIiZzcXN1cDtcIiwgbjogODI0LCBvOiBcIiZOb3RTcXVhcmVTdXBlcnNldDtcIiB9XSwgWzAsIFwiJnNxc3ViZTtcIl0sIFswLCBcIiZzcXN1cGU7XCJdLCBbMCwgeyB2OiBcIiZzcWNhcDtcIiwgbjogNjUwMjQsIG86IFwiJnNxY2FwcztcIiB9XSwgWzAsIHsgdjogXCImc3FjdXA7XCIsIG46IDY1MDI0LCBvOiBcIiZzcWN1cHM7XCIgfV0sIFswLCBcIiZDaXJjbGVQbHVzO1wiXSwgWzAsIFwiJkNpcmNsZU1pbnVzO1wiXSwgWzAsIFwiJkNpcmNsZVRpbWVzO1wiXSwgWzAsIFwiJm9zb2w7XCJdLCBbMCwgXCImQ2lyY2xlRG90O1wiXSwgWzAsIFwiJmNpcmNsZWRjaXJjO1wiXSwgWzAsIFwiJmNpcmNsZWRhc3Q7XCJdLCBbMSwgXCImY2lyY2xlZGRhc2g7XCJdLCBbMCwgXCImYm94cGx1cztcIl0sIFswLCBcIiZib3htaW51cztcIl0sIFswLCBcIiZib3h0aW1lcztcIl0sIFswLCBcIiZkb3RzcXVhcmU7XCJdLCBbMCwgXCImUmlnaHRUZWU7XCJdLCBbMCwgXCImZGFzaHY7XCJdLCBbMCwgXCImRG93blRlZTtcIl0sIFswLCBcIiZib3Q7XCJdLCBbMSwgXCImbW9kZWxzO1wiXSwgWzAsIFwiJkRvdWJsZVJpZ2h0VGVlO1wiXSwgWzAsIFwiJlZkYXNoO1wiXSwgWzAsIFwiJlZ2ZGFzaDtcIl0sIFswLCBcIiZWRGFzaDtcIl0sIFswLCBcIiZudmRhc2g7XCJdLCBbMCwgXCImbnZEYXNoO1wiXSwgWzAsIFwiJm5WZGFzaDtcIl0sIFswLCBcIiZuVkRhc2g7XCJdLCBbMCwgXCImcHJ1cmVsO1wiXSwgWzEsIFwiJkxlZnRUcmlhbmdsZTtcIl0sIFswLCBcIiZSaWdodFRyaWFuZ2xlO1wiXSwgWzAsIHsgdjogXCImTGVmdFRyaWFuZ2xlRXF1YWw7XCIsIG46IDg0MDIsIG86IFwiJm52bHRyaWU7XCIgfV0sIFswLCB7IHY6IFwiJlJpZ2h0VHJpYW5nbGVFcXVhbDtcIiwgbjogODQwMiwgbzogXCImbnZydHJpZTtcIiB9XSwgWzAsIFwiJm9yaWdvZjtcIl0sIFswLCBcIiZpbW9mO1wiXSwgWzAsIFwiJm11bHRpbWFwO1wiXSwgWzAsIFwiJmhlcmNvbjtcIl0sIFswLCBcIiZpbnRjYWw7XCJdLCBbMCwgXCImdmVlYmFyO1wiXSwgWzEsIFwiJmJhcnZlZTtcIl0sIFswLCBcIiZhbmdydHZiO1wiXSwgWzAsIFwiJmxydHJpO1wiXSwgWzAsIFwiJmJpZ3dlZGdlO1wiXSwgWzAsIFwiJmJpZ3ZlZTtcIl0sIFswLCBcIiZiaWdjYXA7XCJdLCBbMCwgXCImYmlnY3VwO1wiXSwgWzAsIFwiJmRpYW07XCJdLCBbMCwgXCImc2RvdDtcIl0sIFswLCBcIiZzc3RhcmY7XCJdLCBbMCwgXCImZGl2aWRlb250aW1lcztcIl0sIFswLCBcIiZib3d0aWU7XCJdLCBbMCwgXCImbHRpbWVzO1wiXSwgWzAsIFwiJnJ0aW1lcztcIl0sIFswLCBcIiZsZWZ0dGhyZWV0aW1lcztcIl0sIFswLCBcIiZyaWdodHRocmVldGltZXM7XCJdLCBbMCwgXCImYmFja3NpbWVxO1wiXSwgWzAsIFwiJmN1cmx5dmVlO1wiXSwgWzAsIFwiJmN1cmx5d2VkZ2U7XCJdLCBbMCwgXCImU3ViO1wiXSwgWzAsIFwiJlN1cDtcIl0sIFswLCBcIiZDYXA7XCJdLCBbMCwgXCImQ3VwO1wiXSwgWzAsIFwiJmZvcms7XCJdLCBbMCwgXCImZXBhcjtcIl0sIFswLCBcIiZsZXNzZG90O1wiXSwgWzAsIFwiJmd0ZG90O1wiXSwgWzAsIHsgdjogXCImTGw7XCIsIG46IDgyNCwgbzogXCImbkxsO1wiIH1dLCBbMCwgeyB2OiBcIiZHZztcIiwgbjogODI0LCBvOiBcIiZuR2c7XCIgfV0sIFswLCB7IHY6IFwiJmxlZztcIiwgbjogNjUwMjQsIG86IFwiJmxlc2c7XCIgfV0sIFswLCB7IHY6IFwiJmdlbDtcIiwgbjogNjUwMjQsIG86IFwiJmdlc2w7XCIgfV0sIFsyLCBcIiZjdWVwcjtcIl0sIFswLCBcIiZjdWVzYztcIl0sIFswLCBcIiZOb3RQcmVjZWRlc1NsYW50RXF1YWw7XCJdLCBbMCwgXCImTm90U3VjY2VlZHNTbGFudEVxdWFsO1wiXSwgWzAsIFwiJk5vdFNxdWFyZVN1YnNldEVxdWFsO1wiXSwgWzAsIFwiJk5vdFNxdWFyZVN1cGVyc2V0RXF1YWw7XCJdLCBbMiwgXCImbG5zaW07XCJdLCBbMCwgXCImZ25zaW07XCJdLCBbMCwgXCImcHJlY25zaW07XCJdLCBbMCwgXCImc2Nuc2ltO1wiXSwgWzAsIFwiJm5sdHJpO1wiXSwgWzAsIFwiJk5vdFJpZ2h0VHJpYW5nbGU7XCJdLCBbMCwgXCImbmx0cmllO1wiXSwgWzAsIFwiJk5vdFJpZ2h0VHJpYW5nbGVFcXVhbDtcIl0sIFswLCBcIiZ2ZWxsaXA7XCJdLCBbMCwgXCImY3Rkb3Q7XCJdLCBbMCwgXCImdXRkb3Q7XCJdLCBbMCwgXCImZHRkb3Q7XCJdLCBbMCwgXCImZGlzaW47XCJdLCBbMCwgXCImaXNpbnN2O1wiXSwgWzAsIFwiJmlzaW5zO1wiXSwgWzAsIHsgdjogXCImaXNpbmRvdDtcIiwgbjogODI0LCBvOiBcIiZub3RpbmRvdDtcIiB9XSwgWzAsIFwiJm5vdGludmM7XCJdLCBbMCwgXCImbm90aW52YjtcIl0sIFsxLCB7IHY6IFwiJmlzaW5FO1wiLCBuOiA4MjQsIG86IFwiJm5vdGluRTtcIiB9XSwgWzAsIFwiJm5pc2Q7XCJdLCBbMCwgXCImeG5pcztcIl0sIFswLCBcIiZuaXM7XCJdLCBbMCwgXCImbm90bml2YztcIl0sIFswLCBcIiZub3RuaXZiO1wiXSwgWzYsIFwiJmJhcndlZDtcIl0sIFswLCBcIiZCYXJ3ZWQ7XCJdLCBbMSwgXCImbGNlaWw7XCJdLCBbMCwgXCImcmNlaWw7XCJdLCBbMCwgXCImTGVmdEZsb29yO1wiXSwgWzAsIFwiJnJmbG9vcjtcIl0sIFswLCBcIiZkcmNyb3A7XCJdLCBbMCwgXCImZGxjcm9wO1wiXSwgWzAsIFwiJnVyY3JvcDtcIl0sIFswLCBcIiZ1bGNyb3A7XCJdLCBbMCwgXCImYm5vdDtcIl0sIFsxLCBcIiZwcm9mbGluZTtcIl0sIFswLCBcIiZwcm9mc3VyZjtcIl0sIFsxLCBcIiZ0ZWxyZWM7XCJdLCBbMCwgXCImdGFyZ2V0O1wiXSwgWzUsIFwiJnVsY29ybjtcIl0sIFswLCBcIiZ1cmNvcm47XCJdLCBbMCwgXCImZGxjb3JuO1wiXSwgWzAsIFwiJmRyY29ybjtcIl0sIFsyLCBcIiZmcm93bjtcIl0sIFswLCBcIiZzbWlsZTtcIl0sIFs5LCBcIiZjeWxjdHk7XCJdLCBbMCwgXCImcHJvZmFsYXI7XCJdLCBbNywgXCImdG9wYm90O1wiXSwgWzYsIFwiJm92YmFyO1wiXSwgWzEsIFwiJnNvbGJhcjtcIl0sIFs2MCwgXCImYW5nemFycjtcIl0sIFs1MSwgXCImbG1vdXN0YWNoZTtcIl0sIFswLCBcIiZybW91c3RhY2hlO1wiXSwgWzIsIFwiJk92ZXJCcmFja2V0O1wiXSwgWzAsIFwiJmJicms7XCJdLCBbMCwgXCImYmJya3Ricms7XCJdLCBbMzcsIFwiJk92ZXJQYXJlbnRoZXNpcztcIl0sIFswLCBcIiZVbmRlclBhcmVudGhlc2lzO1wiXSwgWzAsIFwiJk92ZXJCcmFjZTtcIl0sIFswLCBcIiZVbmRlckJyYWNlO1wiXSwgWzIsIFwiJnRycGV6aXVtO1wiXSwgWzQsIFwiJmVsaW50ZXJzO1wiXSwgWzU5LCBcIiZibGFuaztcIl0sIFsxNjQsIFwiJmNpcmNsZWRTO1wiXSwgWzU1LCBcIiZib3hoO1wiXSwgWzEsIFwiJmJveHY7XCJdLCBbOSwgXCImYm94ZHI7XCJdLCBbMywgXCImYm94ZGw7XCJdLCBbMywgXCImYm94dXI7XCJdLCBbMywgXCImYm94dWw7XCJdLCBbMywgXCImYm94dnI7XCJdLCBbNywgXCImYm94dmw7XCJdLCBbNywgXCImYm94aGQ7XCJdLCBbNywgXCImYm94aHU7XCJdLCBbNywgXCImYm94dmg7XCJdLCBbMTksIFwiJmJveEg7XCJdLCBbMCwgXCImYm94VjtcIl0sIFswLCBcIiZib3hkUjtcIl0sIFswLCBcIiZib3hEcjtcIl0sIFswLCBcIiZib3hEUjtcIl0sIFswLCBcIiZib3hkTDtcIl0sIFswLCBcIiZib3hEbDtcIl0sIFswLCBcIiZib3hETDtcIl0sIFswLCBcIiZib3h1UjtcIl0sIFswLCBcIiZib3hVcjtcIl0sIFswLCBcIiZib3hVUjtcIl0sIFswLCBcIiZib3h1TDtcIl0sIFswLCBcIiZib3hVbDtcIl0sIFswLCBcIiZib3hVTDtcIl0sIFswLCBcIiZib3h2UjtcIl0sIFswLCBcIiZib3hWcjtcIl0sIFswLCBcIiZib3hWUjtcIl0sIFswLCBcIiZib3h2TDtcIl0sIFswLCBcIiZib3hWbDtcIl0sIFswLCBcIiZib3hWTDtcIl0sIFswLCBcIiZib3hIZDtcIl0sIFswLCBcIiZib3hoRDtcIl0sIFswLCBcIiZib3hIRDtcIl0sIFswLCBcIiZib3hIdTtcIl0sIFswLCBcIiZib3hoVTtcIl0sIFswLCBcIiZib3hIVTtcIl0sIFswLCBcIiZib3h2SDtcIl0sIFswLCBcIiZib3hWaDtcIl0sIFswLCBcIiZib3hWSDtcIl0sIFsxOSwgXCImdWhibGs7XCJdLCBbMywgXCImbGhibGs7XCJdLCBbMywgXCImYmxvY2s7XCJdLCBbOCwgXCImYmxrMTQ7XCJdLCBbMCwgXCImYmxrMTI7XCJdLCBbMCwgXCImYmxrMzQ7XCJdLCBbMTMsIFwiJnNxdWFyZTtcIl0sIFs4LCBcIiZibGFja3NxdWFyZTtcIl0sIFswLCBcIiZFbXB0eVZlcnlTbWFsbFNxdWFyZTtcIl0sIFsxLCBcIiZyZWN0O1wiXSwgWzAsIFwiJm1hcmtlcjtcIl0sIFsyLCBcIiZmbHRucztcIl0sIFsxLCBcIiZiaWd0cmlhbmdsZXVwO1wiXSwgWzAsIFwiJmJsYWNrdHJpYW5nbGU7XCJdLCBbMCwgXCImdHJpYW5nbGU7XCJdLCBbMiwgXCImYmxhY2t0cmlhbmdsZXJpZ2h0O1wiXSwgWzAsIFwiJnJ0cmk7XCJdLCBbMywgXCImYmlndHJpYW5nbGVkb3duO1wiXSwgWzAsIFwiJmJsYWNrdHJpYW5nbGVkb3duO1wiXSwgWzAsIFwiJmR0cmk7XCJdLCBbMiwgXCImYmxhY2t0cmlhbmdsZWxlZnQ7XCJdLCBbMCwgXCImbHRyaTtcIl0sIFs2LCBcIiZsb3o7XCJdLCBbMCwgXCImY2lyO1wiXSwgWzMyLCBcIiZ0cmlkb3Q7XCJdLCBbMiwgXCImYmlnY2lyYztcIl0sIFs4LCBcIiZ1bHRyaTtcIl0sIFswLCBcIiZ1cnRyaTtcIl0sIFswLCBcIiZsbHRyaTtcIl0sIFswLCBcIiZFbXB0eVNtYWxsU3F1YXJlO1wiXSwgWzAsIFwiJkZpbGxlZFNtYWxsU3F1YXJlO1wiXSwgWzgsIFwiJmJpZ3N0YXI7XCJdLCBbMCwgXCImc3RhcjtcIl0sIFs3LCBcIiZwaG9uZTtcIl0sIFs0OSwgXCImZmVtYWxlO1wiXSwgWzEsIFwiJm1hbGU7XCJdLCBbMjksIFwiJnNwYWRlcztcIl0sIFsyLCBcIiZjbHVicztcIl0sIFsxLCBcIiZoZWFydHM7XCJdLCBbMCwgXCImZGlhbW9uZHN1aXQ7XCJdLCBbMywgXCImc3VuZztcIl0sIFsyLCBcIiZmbGF0O1wiXSwgWzAsIFwiJm5hdHVyYWw7XCJdLCBbMCwgXCImc2hhcnA7XCJdLCBbMTYzLCBcIiZjaGVjaztcIl0sIFszLCBcIiZjcm9zcztcIl0sIFs4LCBcIiZtYWx0O1wiXSwgWzIxLCBcIiZzZXh0O1wiXSwgWzMzLCBcIiZWZXJ0aWNhbFNlcGFyYXRvcjtcIl0sIFsyNSwgXCImbGJicms7XCJdLCBbMCwgXCImcmJicms7XCJdLCBbODQsIFwiJmJzb2xoc3ViO1wiXSwgWzAsIFwiJnN1cGhzb2w7XCJdLCBbMjgsIFwiJkxlZnREb3VibGVCcmFja2V0O1wiXSwgWzAsIFwiJlJpZ2h0RG91YmxlQnJhY2tldDtcIl0sIFswLCBcIiZsYW5nO1wiXSwgWzAsIFwiJnJhbmc7XCJdLCBbMCwgXCImTGFuZztcIl0sIFswLCBcIiZSYW5nO1wiXSwgWzAsIFwiJmxvYW5nO1wiXSwgWzAsIFwiJnJvYW5nO1wiXSwgWzcsIFwiJmxvbmdsZWZ0YXJyb3c7XCJdLCBbMCwgXCImbG9uZ3JpZ2h0YXJyb3c7XCJdLCBbMCwgXCImbG9uZ2xlZnRyaWdodGFycm93O1wiXSwgWzAsIFwiJkRvdWJsZUxvbmdMZWZ0QXJyb3c7XCJdLCBbMCwgXCImRG91YmxlTG9uZ1JpZ2h0QXJyb3c7XCJdLCBbMCwgXCImRG91YmxlTG9uZ0xlZnRSaWdodEFycm93O1wiXSwgWzEsIFwiJmxvbmdtYXBzdG87XCJdLCBbMiwgXCImZHppZ3JhcnI7XCJdLCBbMjU4LCBcIiZudmxBcnI7XCJdLCBbMCwgXCImbnZyQXJyO1wiXSwgWzAsIFwiJm52SGFycjtcIl0sIFswLCBcIiZNYXA7XCJdLCBbNiwgXCImbGJhcnI7XCJdLCBbMCwgXCImYmthcm93O1wiXSwgWzAsIFwiJmxCYXJyO1wiXSwgWzAsIFwiJmRia2Fyb3c7XCJdLCBbMCwgXCImZHJia2Fyb3c7XCJdLCBbMCwgXCImRERvdHJhaGQ7XCJdLCBbMCwgXCImVXBBcnJvd0JhcjtcIl0sIFswLCBcIiZEb3duQXJyb3dCYXI7XCJdLCBbMiwgXCImUmFycnRsO1wiXSwgWzIsIFwiJmxhdGFpbDtcIl0sIFswLCBcIiZyYXRhaWw7XCJdLCBbMCwgXCImbEF0YWlsO1wiXSwgWzAsIFwiJnJBdGFpbDtcIl0sIFswLCBcIiZsYXJyZnM7XCJdLCBbMCwgXCImcmFycmZzO1wiXSwgWzAsIFwiJmxhcnJiZnM7XCJdLCBbMCwgXCImcmFycmJmcztcIl0sIFsyLCBcIiZud2FyaGs7XCJdLCBbMCwgXCImbmVhcmhrO1wiXSwgWzAsIFwiJmhrc2Vhcm93O1wiXSwgWzAsIFwiJmhrc3dhcm93O1wiXSwgWzAsIFwiJm53bmVhcjtcIl0sIFswLCBcIiZuZXNlYXI7XCJdLCBbMCwgXCImc2Vzd2FyO1wiXSwgWzAsIFwiJnN3bndhcjtcIl0sIFs4LCB7IHY6IFwiJnJhcnJjO1wiLCBuOiA4MjQsIG86IFwiJm5yYXJyYztcIiB9XSwgWzEsIFwiJmN1ZGFycnI7XCJdLCBbMCwgXCImbGRjYTtcIl0sIFswLCBcIiZyZGNhO1wiXSwgWzAsIFwiJmN1ZGFycmw7XCJdLCBbMCwgXCImbGFycnBsO1wiXSwgWzIsIFwiJmN1cmFycm07XCJdLCBbMCwgXCImY3VsYXJycDtcIl0sIFs3LCBcIiZyYXJycGw7XCJdLCBbMiwgXCImaGFycmNpcjtcIl0sIFswLCBcIiZVYXJyb2NpcjtcIl0sIFswLCBcIiZsdXJkc2hhcjtcIl0sIFswLCBcIiZsZHJ1c2hhcjtcIl0sIFsyLCBcIiZMZWZ0UmlnaHRWZWN0b3I7XCJdLCBbMCwgXCImUmlnaHRVcERvd25WZWN0b3I7XCJdLCBbMCwgXCImRG93bkxlZnRSaWdodFZlY3RvcjtcIl0sIFswLCBcIiZMZWZ0VXBEb3duVmVjdG9yO1wiXSwgWzAsIFwiJkxlZnRWZWN0b3JCYXI7XCJdLCBbMCwgXCImUmlnaHRWZWN0b3JCYXI7XCJdLCBbMCwgXCImUmlnaHRVcFZlY3RvckJhcjtcIl0sIFswLCBcIiZSaWdodERvd25WZWN0b3JCYXI7XCJdLCBbMCwgXCImRG93bkxlZnRWZWN0b3JCYXI7XCJdLCBbMCwgXCImRG93blJpZ2h0VmVjdG9yQmFyO1wiXSwgWzAsIFwiJkxlZnRVcFZlY3RvckJhcjtcIl0sIFswLCBcIiZMZWZ0RG93blZlY3RvckJhcjtcIl0sIFswLCBcIiZMZWZ0VGVlVmVjdG9yO1wiXSwgWzAsIFwiJlJpZ2h0VGVlVmVjdG9yO1wiXSwgWzAsIFwiJlJpZ2h0VXBUZWVWZWN0b3I7XCJdLCBbMCwgXCImUmlnaHREb3duVGVlVmVjdG9yO1wiXSwgWzAsIFwiJkRvd25MZWZ0VGVlVmVjdG9yO1wiXSwgWzAsIFwiJkRvd25SaWdodFRlZVZlY3RvcjtcIl0sIFswLCBcIiZMZWZ0VXBUZWVWZWN0b3I7XCJdLCBbMCwgXCImTGVmdERvd25UZWVWZWN0b3I7XCJdLCBbMCwgXCImbEhhcjtcIl0sIFswLCBcIiZ1SGFyO1wiXSwgWzAsIFwiJnJIYXI7XCJdLCBbMCwgXCImZEhhcjtcIl0sIFswLCBcIiZsdXJ1aGFyO1wiXSwgWzAsIFwiJmxkcmRoYXI7XCJdLCBbMCwgXCImcnVsdWhhcjtcIl0sIFswLCBcIiZyZGxkaGFyO1wiXSwgWzAsIFwiJmxoYXJ1bDtcIl0sIFswLCBcIiZsbGhhcmQ7XCJdLCBbMCwgXCImcmhhcnVsO1wiXSwgWzAsIFwiJmxyaGFyZDtcIl0sIFswLCBcIiZ1ZGhhcjtcIl0sIFswLCBcIiZkdWhhcjtcIl0sIFswLCBcIiZSb3VuZEltcGxpZXM7XCJdLCBbMCwgXCImZXJhcnI7XCJdLCBbMCwgXCImc2ltcmFycjtcIl0sIFswLCBcIiZsYXJyc2ltO1wiXSwgWzAsIFwiJnJhcnJzaW07XCJdLCBbMCwgXCImcmFycmFwO1wiXSwgWzAsIFwiJmx0bGFycjtcIl0sIFsxLCBcIiZndHJhcnI7XCJdLCBbMCwgXCImc3VicmFycjtcIl0sIFsxLCBcIiZzdXBsYXJyO1wiXSwgWzAsIFwiJmxmaXNodDtcIl0sIFswLCBcIiZyZmlzaHQ7XCJdLCBbMCwgXCImdWZpc2h0O1wiXSwgWzAsIFwiJmRmaXNodDtcIl0sIFs1LCBcIiZsb3BhcjtcIl0sIFswLCBcIiZyb3BhcjtcIl0sIFs0LCBcIiZsYnJrZTtcIl0sIFswLCBcIiZyYnJrZTtcIl0sIFswLCBcIiZsYnJrc2x1O1wiXSwgWzAsIFwiJnJicmtzbGQ7XCJdLCBbMCwgXCImbGJya3NsZDtcIl0sIFswLCBcIiZyYnJrc2x1O1wiXSwgWzAsIFwiJmxhbmdkO1wiXSwgWzAsIFwiJnJhbmdkO1wiXSwgWzAsIFwiJmxwYXJsdDtcIl0sIFswLCBcIiZycGFyZ3Q7XCJdLCBbMCwgXCImZ3RsUGFyO1wiXSwgWzAsIFwiJmx0clBhcjtcIl0sIFszLCBcIiZ2emlnemFnO1wiXSwgWzEsIFwiJnZhbmdydDtcIl0sIFswLCBcIiZhbmdydHZiZDtcIl0sIFs2LCBcIiZhbmdlO1wiXSwgWzAsIFwiJnJhbmdlO1wiXSwgWzAsIFwiJmR3YW5nbGU7XCJdLCBbMCwgXCImdXdhbmdsZTtcIl0sIFswLCBcIiZhbmdtc2RhYTtcIl0sIFswLCBcIiZhbmdtc2RhYjtcIl0sIFswLCBcIiZhbmdtc2RhYztcIl0sIFswLCBcIiZhbmdtc2RhZDtcIl0sIFswLCBcIiZhbmdtc2RhZTtcIl0sIFswLCBcIiZhbmdtc2RhZjtcIl0sIFswLCBcIiZhbmdtc2RhZztcIl0sIFswLCBcIiZhbmdtc2RhaDtcIl0sIFswLCBcIiZiZW1wdHl2O1wiXSwgWzAsIFwiJmRlbXB0eXY7XCJdLCBbMCwgXCImY2VtcHR5djtcIl0sIFswLCBcIiZyYWVtcHR5djtcIl0sIFswLCBcIiZsYWVtcHR5djtcIl0sIFswLCBcIiZvaGJhcjtcIl0sIFswLCBcIiZvbWlkO1wiXSwgWzAsIFwiJm9wYXI7XCJdLCBbMSwgXCImb3BlcnA7XCJdLCBbMSwgXCImb2xjcm9zcztcIl0sIFswLCBcIiZvZHNvbGQ7XCJdLCBbMSwgXCImb2xjaXI7XCJdLCBbMCwgXCImb2ZjaXI7XCJdLCBbMCwgXCImb2x0O1wiXSwgWzAsIFwiJm9ndDtcIl0sIFswLCBcIiZjaXJzY2lyO1wiXSwgWzAsIFwiJmNpckU7XCJdLCBbMCwgXCImc29sYjtcIl0sIFswLCBcIiZic29sYjtcIl0sIFszLCBcIiZib3hib3g7XCJdLCBbMywgXCImdHJpc2I7XCJdLCBbMCwgXCImcnRyaWx0cmk7XCJdLCBbMCwgeyB2OiBcIiZMZWZ0VHJpYW5nbGVCYXI7XCIsIG46IDgyNCwgbzogXCImTm90TGVmdFRyaWFuZ2xlQmFyO1wiIH1dLCBbMCwgeyB2OiBcIiZSaWdodFRyaWFuZ2xlQmFyO1wiLCBuOiA4MjQsIG86IFwiJk5vdFJpZ2h0VHJpYW5nbGVCYXI7XCIgfV0sIFsxMSwgXCImaWluZmluO1wiXSwgWzAsIFwiJmluZmludGllO1wiXSwgWzAsIFwiJm52aW5maW47XCJdLCBbNCwgXCImZXBhcnNsO1wiXSwgWzAsIFwiJnNtZXBhcnNsO1wiXSwgWzAsIFwiJmVxdnBhcnNsO1wiXSwgWzUsIFwiJmJsYWNrbG96ZW5nZTtcIl0sIFs4LCBcIiZSdWxlRGVsYXllZDtcIl0sIFsxLCBcIiZkc29sO1wiXSwgWzksIFwiJmJpZ29kb3Q7XCJdLCBbMCwgXCImYmlnb3BsdXM7XCJdLCBbMCwgXCImYmlnb3RpbWVzO1wiXSwgWzEsIFwiJmJpZ3VwbHVzO1wiXSwgWzEsIFwiJmJpZ3NxY3VwO1wiXSwgWzUsIFwiJmlpaWludDtcIl0sIFswLCBcIiZmcGFydGludDtcIl0sIFsyLCBcIiZjaXJmbmludDtcIl0sIFswLCBcIiZhd2ludDtcIl0sIFswLCBcIiZycHBvbGludDtcIl0sIFswLCBcIiZzY3BvbGludDtcIl0sIFswLCBcIiZucG9saW50O1wiXSwgWzAsIFwiJnBvaW50aW50O1wiXSwgWzAsIFwiJnF1YXRpbnQ7XCJdLCBbMCwgXCImaW50bGFyaGs7XCJdLCBbMTAsIFwiJnBsdXNjaXI7XCJdLCBbMCwgXCImcGx1c2FjaXI7XCJdLCBbMCwgXCImc2ltcGx1cztcIl0sIFswLCBcIiZwbHVzZHU7XCJdLCBbMCwgXCImcGx1c3NpbTtcIl0sIFswLCBcIiZwbHVzdHdvO1wiXSwgWzEsIFwiJm1jb21tYTtcIl0sIFswLCBcIiZtaW51c2R1O1wiXSwgWzIsIFwiJmxvcGx1cztcIl0sIFswLCBcIiZyb3BsdXM7XCJdLCBbMCwgXCImQ3Jvc3M7XCJdLCBbMCwgXCImdGltZXNkO1wiXSwgWzAsIFwiJnRpbWVzYmFyO1wiXSwgWzEsIFwiJnNtYXNocDtcIl0sIFswLCBcIiZsb3RpbWVzO1wiXSwgWzAsIFwiJnJvdGltZXM7XCJdLCBbMCwgXCImb3RpbWVzYXM7XCJdLCBbMCwgXCImT3RpbWVzO1wiXSwgWzAsIFwiJm9kaXY7XCJdLCBbMCwgXCImdHJpcGx1cztcIl0sIFswLCBcIiZ0cmltaW51cztcIl0sIFswLCBcIiZ0cml0aW1lO1wiXSwgWzAsIFwiJmludHByb2Q7XCJdLCBbMiwgXCImYW1hbGc7XCJdLCBbMCwgXCImY2FwZG90O1wiXSwgWzEsIFwiJm5jdXA7XCJdLCBbMCwgXCImbmNhcDtcIl0sIFswLCBcIiZjYXBhbmQ7XCJdLCBbMCwgXCImY3Vwb3I7XCJdLCBbMCwgXCImY3VwY2FwO1wiXSwgWzAsIFwiJmNhcGN1cDtcIl0sIFswLCBcIiZjdXBicmNhcDtcIl0sIFswLCBcIiZjYXBicmN1cDtcIl0sIFswLCBcIiZjdXBjdXA7XCJdLCBbMCwgXCImY2FwY2FwO1wiXSwgWzAsIFwiJmNjdXBzO1wiXSwgWzAsIFwiJmNjYXBzO1wiXSwgWzIsIFwiJmNjdXBzc207XCJdLCBbMiwgXCImQW5kO1wiXSwgWzAsIFwiJk9yO1wiXSwgWzAsIFwiJmFuZGFuZDtcIl0sIFswLCBcIiZvcm9yO1wiXSwgWzAsIFwiJm9yc2xvcGU7XCJdLCBbMCwgXCImYW5kc2xvcGU7XCJdLCBbMSwgXCImYW5kdjtcIl0sIFswLCBcIiZvcnY7XCJdLCBbMCwgXCImYW5kZDtcIl0sIFswLCBcIiZvcmQ7XCJdLCBbMSwgXCImd2VkYmFyO1wiXSwgWzYsIFwiJnNkb3RlO1wiXSwgWzMsIFwiJnNpbWRvdDtcIl0sIFsyLCB7IHY6IFwiJmNvbmdkb3Q7XCIsIG46IDgyNCwgbzogXCImbmNvbmdkb3Q7XCIgfV0sIFswLCBcIiZlYXN0ZXI7XCJdLCBbMCwgXCImYXBhY2lyO1wiXSwgWzAsIHsgdjogXCImYXBFO1wiLCBuOiA4MjQsIG86IFwiJm5hcEU7XCIgfV0sIFswLCBcIiZlcGx1cztcIl0sIFswLCBcIiZwbHVzZTtcIl0sIFswLCBcIiZFc2ltO1wiXSwgWzAsIFwiJkNvbG9uZTtcIl0sIFswLCBcIiZFcXVhbDtcIl0sIFsxLCBcIiZkZG90c2VxO1wiXSwgWzAsIFwiJmVxdWl2REQ7XCJdLCBbMCwgXCImbHRjaXI7XCJdLCBbMCwgXCImZ3RjaXI7XCJdLCBbMCwgXCImbHRxdWVzdDtcIl0sIFswLCBcIiZndHF1ZXN0O1wiXSwgWzAsIHsgdjogXCImbGVxc2xhbnQ7XCIsIG46IDgyNCwgbzogXCImbmxlcXNsYW50O1wiIH1dLCBbMCwgeyB2OiBcIiZnZXFzbGFudDtcIiwgbjogODI0LCBvOiBcIiZuZ2Vxc2xhbnQ7XCIgfV0sIFswLCBcIiZsZXNkb3Q7XCJdLCBbMCwgXCImZ2VzZG90O1wiXSwgWzAsIFwiJmxlc2RvdG87XCJdLCBbMCwgXCImZ2VzZG90bztcIl0sIFswLCBcIiZsZXNkb3RvcjtcIl0sIFswLCBcIiZnZXNkb3RvbDtcIl0sIFswLCBcIiZsYXA7XCJdLCBbMCwgXCImZ2FwO1wiXSwgWzAsIFwiJmxuZTtcIl0sIFswLCBcIiZnbmU7XCJdLCBbMCwgXCImbG5hcDtcIl0sIFswLCBcIiZnbmFwO1wiXSwgWzAsIFwiJmxFZztcIl0sIFswLCBcIiZnRWw7XCJdLCBbMCwgXCImbHNpbWU7XCJdLCBbMCwgXCImZ3NpbWU7XCJdLCBbMCwgXCImbHNpbWc7XCJdLCBbMCwgXCImZ3NpbWw7XCJdLCBbMCwgXCImbGdFO1wiXSwgWzAsIFwiJmdsRTtcIl0sIFswLCBcIiZsZXNnZXM7XCJdLCBbMCwgXCImZ2VzbGVzO1wiXSwgWzAsIFwiJmVscztcIl0sIFswLCBcIiZlZ3M7XCJdLCBbMCwgXCImZWxzZG90O1wiXSwgWzAsIFwiJmVnc2RvdDtcIl0sIFswLCBcIiZlbDtcIl0sIFswLCBcIiZlZztcIl0sIFsyLCBcIiZzaW1sO1wiXSwgWzAsIFwiJnNpbWc7XCJdLCBbMCwgXCImc2ltbEU7XCJdLCBbMCwgXCImc2ltZ0U7XCJdLCBbMCwgeyB2OiBcIiZMZXNzTGVzcztcIiwgbjogODI0LCBvOiBcIiZOb3ROZXN0ZWRMZXNzTGVzcztcIiB9XSwgWzAsIHsgdjogXCImR3JlYXRlckdyZWF0ZXI7XCIsIG46IDgyNCwgbzogXCImTm90TmVzdGVkR3JlYXRlckdyZWF0ZXI7XCIgfV0sIFsxLCBcIiZnbGo7XCJdLCBbMCwgXCImZ2xhO1wiXSwgWzAsIFwiJmx0Y2M7XCJdLCBbMCwgXCImZ3RjYztcIl0sIFswLCBcIiZsZXNjYztcIl0sIFswLCBcIiZnZXNjYztcIl0sIFswLCBcIiZzbXQ7XCJdLCBbMCwgXCImbGF0O1wiXSwgWzAsIHsgdjogXCImc210ZTtcIiwgbjogNjUwMjQsIG86IFwiJnNtdGVzO1wiIH1dLCBbMCwgeyB2OiBcIiZsYXRlO1wiLCBuOiA2NTAyNCwgbzogXCImbGF0ZXM7XCIgfV0sIFswLCBcIiZidW1wRTtcIl0sIFswLCB7IHY6IFwiJlByZWNlZGVzRXF1YWw7XCIsIG46IDgyNCwgbzogXCImTm90UHJlY2VkZXNFcXVhbDtcIiB9XSwgWzAsIHsgdjogXCImc2NlO1wiLCBuOiA4MjQsIG86IFwiJk5vdFN1Y2NlZWRzRXF1YWw7XCIgfV0sIFsyLCBcIiZwckU7XCJdLCBbMCwgXCImc2NFO1wiXSwgWzAsIFwiJnByZWNuZXFxO1wiXSwgWzAsIFwiJnNjbkU7XCJdLCBbMCwgXCImcHJhcDtcIl0sIFswLCBcIiZzY2FwO1wiXSwgWzAsIFwiJnByZWNuYXBwcm94O1wiXSwgWzAsIFwiJnNjbmFwO1wiXSwgWzAsIFwiJlByO1wiXSwgWzAsIFwiJlNjO1wiXSwgWzAsIFwiJnN1YmRvdDtcIl0sIFswLCBcIiZzdXBkb3Q7XCJdLCBbMCwgXCImc3VicGx1cztcIl0sIFswLCBcIiZzdXBwbHVzO1wiXSwgWzAsIFwiJnN1Ym11bHQ7XCJdLCBbMCwgXCImc3VwbXVsdDtcIl0sIFswLCBcIiZzdWJlZG90O1wiXSwgWzAsIFwiJnN1cGVkb3Q7XCJdLCBbMCwgeyB2OiBcIiZzdWJFO1wiLCBuOiA4MjQsIG86IFwiJm5zdWJFO1wiIH1dLCBbMCwgeyB2OiBcIiZzdXBFO1wiLCBuOiA4MjQsIG86IFwiJm5zdXBFO1wiIH1dLCBbMCwgXCImc3Vic2ltO1wiXSwgWzAsIFwiJnN1cHNpbTtcIl0sIFsyLCB7IHY6IFwiJnN1Ym5FO1wiLCBuOiA2NTAyNCwgbzogXCImdmFyc3Vic2V0bmVxcTtcIiB9XSwgWzAsIHsgdjogXCImc3VwbkU7XCIsIG46IDY1MDI0LCBvOiBcIiZ2YXJzdXBzZXRuZXFxO1wiIH1dLCBbMiwgXCImY3N1YjtcIl0sIFswLCBcIiZjc3VwO1wiXSwgWzAsIFwiJmNzdWJlO1wiXSwgWzAsIFwiJmNzdXBlO1wiXSwgWzAsIFwiJnN1YnN1cDtcIl0sIFswLCBcIiZzdXBzdWI7XCJdLCBbMCwgXCImc3Vic3ViO1wiXSwgWzAsIFwiJnN1cHN1cDtcIl0sIFswLCBcIiZzdXBoc3ViO1wiXSwgWzAsIFwiJnN1cGRzdWI7XCJdLCBbMCwgXCImZm9ya3Y7XCJdLCBbMCwgXCImdG9wZm9yaztcIl0sIFswLCBcIiZtbGNwO1wiXSwgWzgsIFwiJkRhc2h2O1wiXSwgWzEsIFwiJlZkYXNobDtcIl0sIFswLCBcIiZCYXJ2O1wiXSwgWzAsIFwiJnZCYXI7XCJdLCBbMCwgXCImdkJhcnY7XCJdLCBbMSwgXCImVmJhcjtcIl0sIFswLCBcIiZOb3Q7XCJdLCBbMCwgXCImYk5vdDtcIl0sIFswLCBcIiZybm1pZDtcIl0sIFswLCBcIiZjaXJtaWQ7XCJdLCBbMCwgXCImbWlkY2lyO1wiXSwgWzAsIFwiJnRvcGNpcjtcIl0sIFswLCBcIiZuaHBhcjtcIl0sIFswLCBcIiZwYXJzaW07XCJdLCBbOSwgeyB2OiBcIiZwYXJzbDtcIiwgbjogODQyMSwgbzogXCImbnBhcnNsO1wiIH1dLCBbNDQzNDMsIHsgbjogbmV3IE1hcCgvKiAjX19QVVJFX18gKi8gcmVzdG9yZURpZmYoW1s1NjQ3NiwgXCImQXNjcjtcIl0sIFsxLCBcIiZDc2NyO1wiXSwgWzAsIFwiJkRzY3I7XCJdLCBbMiwgXCImR3NjcjtcIl0sIFsyLCBcIiZKc2NyO1wiXSwgWzAsIFwiJktzY3I7XCJdLCBbMiwgXCImTnNjcjtcIl0sIFswLCBcIiZPc2NyO1wiXSwgWzAsIFwiJlBzY3I7XCJdLCBbMCwgXCImUXNjcjtcIl0sIFsxLCBcIiZTc2NyO1wiXSwgWzAsIFwiJlRzY3I7XCJdLCBbMCwgXCImVXNjcjtcIl0sIFswLCBcIiZWc2NyO1wiXSwgWzAsIFwiJldzY3I7XCJdLCBbMCwgXCImWHNjcjtcIl0sIFswLCBcIiZZc2NyO1wiXSwgWzAsIFwiJlpzY3I7XCJdLCBbMCwgXCImYXNjcjtcIl0sIFswLCBcIiZic2NyO1wiXSwgWzAsIFwiJmNzY3I7XCJdLCBbMCwgXCImZHNjcjtcIl0sIFsxLCBcIiZmc2NyO1wiXSwgWzEsIFwiJmhzY3I7XCJdLCBbMCwgXCImaXNjcjtcIl0sIFswLCBcIiZqc2NyO1wiXSwgWzAsIFwiJmtzY3I7XCJdLCBbMCwgXCImbHNjcjtcIl0sIFswLCBcIiZtc2NyO1wiXSwgWzAsIFwiJm5zY3I7XCJdLCBbMSwgXCImcHNjcjtcIl0sIFswLCBcIiZxc2NyO1wiXSwgWzAsIFwiJnJzY3I7XCJdLCBbMCwgXCImc3NjcjtcIl0sIFswLCBcIiZ0c2NyO1wiXSwgWzAsIFwiJnVzY3I7XCJdLCBbMCwgXCImdnNjcjtcIl0sIFswLCBcIiZ3c2NyO1wiXSwgWzAsIFwiJnhzY3I7XCJdLCBbMCwgXCImeXNjcjtcIl0sIFswLCBcIiZ6c2NyO1wiXSwgWzUyLCBcIiZBZnI7XCJdLCBbMCwgXCImQmZyO1wiXSwgWzEsIFwiJkRmcjtcIl0sIFswLCBcIiZFZnI7XCJdLCBbMCwgXCImRmZyO1wiXSwgWzAsIFwiJkdmcjtcIl0sIFsyLCBcIiZKZnI7XCJdLCBbMCwgXCImS2ZyO1wiXSwgWzAsIFwiJkxmcjtcIl0sIFswLCBcIiZNZnI7XCJdLCBbMCwgXCImTmZyO1wiXSwgWzAsIFwiJk9mcjtcIl0sIFswLCBcIiZQZnI7XCJdLCBbMCwgXCImUWZyO1wiXSwgWzEsIFwiJlNmcjtcIl0sIFswLCBcIiZUZnI7XCJdLCBbMCwgXCImVWZyO1wiXSwgWzAsIFwiJlZmcjtcIl0sIFswLCBcIiZXZnI7XCJdLCBbMCwgXCImWGZyO1wiXSwgWzAsIFwiJllmcjtcIl0sIFsxLCBcIiZhZnI7XCJdLCBbMCwgXCImYmZyO1wiXSwgWzAsIFwiJmNmcjtcIl0sIFswLCBcIiZkZnI7XCJdLCBbMCwgXCImZWZyO1wiXSwgWzAsIFwiJmZmcjtcIl0sIFswLCBcIiZnZnI7XCJdLCBbMCwgXCImaGZyO1wiXSwgWzAsIFwiJmlmcjtcIl0sIFswLCBcIiZqZnI7XCJdLCBbMCwgXCIma2ZyO1wiXSwgWzAsIFwiJmxmcjtcIl0sIFswLCBcIiZtZnI7XCJdLCBbMCwgXCImbmZyO1wiXSwgWzAsIFwiJm9mcjtcIl0sIFswLCBcIiZwZnI7XCJdLCBbMCwgXCImcWZyO1wiXSwgWzAsIFwiJnJmcjtcIl0sIFswLCBcIiZzZnI7XCJdLCBbMCwgXCImdGZyO1wiXSwgWzAsIFwiJnVmcjtcIl0sIFswLCBcIiZ2ZnI7XCJdLCBbMCwgXCImd2ZyO1wiXSwgWzAsIFwiJnhmcjtcIl0sIFswLCBcIiZ5ZnI7XCJdLCBbMCwgXCImemZyO1wiXSwgWzAsIFwiJkFvcGY7XCJdLCBbMCwgXCImQm9wZjtcIl0sIFsxLCBcIiZEb3BmO1wiXSwgWzAsIFwiJkVvcGY7XCJdLCBbMCwgXCImRm9wZjtcIl0sIFswLCBcIiZHb3BmO1wiXSwgWzEsIFwiJklvcGY7XCJdLCBbMCwgXCImSm9wZjtcIl0sIFswLCBcIiZLb3BmO1wiXSwgWzAsIFwiJkxvcGY7XCJdLCBbMCwgXCImTW9wZjtcIl0sIFsxLCBcIiZPb3BmO1wiXSwgWzMsIFwiJlNvcGY7XCJdLCBbMCwgXCImVG9wZjtcIl0sIFswLCBcIiZVb3BmO1wiXSwgWzAsIFwiJlZvcGY7XCJdLCBbMCwgXCImV29wZjtcIl0sIFswLCBcIiZYb3BmO1wiXSwgWzAsIFwiJllvcGY7XCJdLCBbMSwgXCImYW9wZjtcIl0sIFswLCBcIiZib3BmO1wiXSwgWzAsIFwiJmNvcGY7XCJdLCBbMCwgXCImZG9wZjtcIl0sIFswLCBcIiZlb3BmO1wiXSwgWzAsIFwiJmZvcGY7XCJdLCBbMCwgXCImZ29wZjtcIl0sIFswLCBcIiZob3BmO1wiXSwgWzAsIFwiJmlvcGY7XCJdLCBbMCwgXCImam9wZjtcIl0sIFswLCBcIiZrb3BmO1wiXSwgWzAsIFwiJmxvcGY7XCJdLCBbMCwgXCImbW9wZjtcIl0sIFswLCBcIiZub3BmO1wiXSwgWzAsIFwiJm9vcGY7XCJdLCBbMCwgXCImcG9wZjtcIl0sIFswLCBcIiZxb3BmO1wiXSwgWzAsIFwiJnJvcGY7XCJdLCBbMCwgXCImc29wZjtcIl0sIFswLCBcIiZ0b3BmO1wiXSwgWzAsIFwiJnVvcGY7XCJdLCBbMCwgXCImdm9wZjtcIl0sIFswLCBcIiZ3b3BmO1wiXSwgWzAsIFwiJnhvcGY7XCJdLCBbMCwgXCImeW9wZjtcIl0sIFswLCBcIiZ6b3BmO1wiXV0pKSB9XSwgWzg5MDYsIFwiJmZmbGlnO1wiXSwgWzAsIFwiJmZpbGlnO1wiXSwgWzAsIFwiJmZsbGlnO1wiXSwgWzAsIFwiJmZmaWxpZztcIl0sIFswLCBcIiZmZmxsaWc7XCJdXSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5jb2RlLWh0bWwuanMubWFwIiwiZXhwb3J0IGNvbnN0IHhtbFJlcGxhY2VyID0gL1tcIiYnPD4kXFx4ODAtXFx1RkZGRl0vZztcbmNvbnN0IHhtbENvZGVNYXAgPSBuZXcgTWFwKFtcbiAgICBbMzQsIFwiJnF1b3Q7XCJdLFxuICAgIFszOCwgXCImYW1wO1wiXSxcbiAgICBbMzksIFwiJmFwb3M7XCJdLFxuICAgIFs2MCwgXCImbHQ7XCJdLFxuICAgIFs2MiwgXCImZ3Q7XCJdLFxuXSk7XG4vLyBGb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vZGUgPCA0LCB3ZSB3cmFwIGBjb2RlUG9pbnRBdGBcbmV4cG9ydCBjb25zdCBnZXRDb2RlUG9pbnQgPSBcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uXG5TdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0ICE9IG51bGxcbiAgICA/IChzdHIsIGluZGV4KSA9PiBzdHIuY29kZVBvaW50QXQoaW5kZXgpXG4gICAgOiAvLyBodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nI3N1cnJvZ2F0ZS1mb3JtdWxhZVxuICAgICAgICAoYywgaW5kZXgpID0+IChjLmNoYXJDb2RlQXQoaW5kZXgpICYgMHhmYzAwKSA9PT0gMHhkODAwXG4gICAgICAgICAgICA/IChjLmNoYXJDb2RlQXQoaW5kZXgpIC0gMHhkODAwKSAqIDB4NDAwICtcbiAgICAgICAgICAgICAgICBjLmNoYXJDb2RlQXQoaW5kZXggKyAxKSAtXG4gICAgICAgICAgICAgICAgMHhkYzAwICtcbiAgICAgICAgICAgICAgICAweDEwMDAwXG4gICAgICAgICAgICA6IGMuY2hhckNvZGVBdChpbmRleCk7XG4vKipcbiAqIEVuY29kZXMgYWxsIG5vbi1BU0NJSSBjaGFyYWN0ZXJzLCBhcyB3ZWxsIGFzIGNoYXJhY3RlcnMgbm90IHZhbGlkIGluIFhNTFxuICogZG9jdW1lbnRzIHVzaW5nIFhNTCBlbnRpdGllcy5cbiAqXG4gKiBJZiBhIGNoYXJhY3RlciBoYXMgbm8gZXF1aXZhbGVudCBlbnRpdHksIGFcbiAqIG51bWVyaWMgaGV4YWRlY2ltYWwgcmVmZXJlbmNlIChlZy4gYCYjeGZjO2ApIHdpbGwgYmUgdXNlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZVhNTChzdHIpIHtcbiAgICBsZXQgcmV0ID0gXCJcIjtcbiAgICBsZXQgbGFzdElkeCA9IDA7XG4gICAgbGV0IG1hdGNoO1xuICAgIHdoaWxlICgobWF0Y2ggPSB4bWxSZXBsYWNlci5leGVjKHN0cikpICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGkgPSBtYXRjaC5pbmRleDtcbiAgICAgICAgY29uc3QgY2hhciA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBjb25zdCBuZXh0ID0geG1sQ29kZU1hcC5nZXQoY2hhcik7XG4gICAgICAgIGlmIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldCArPSBzdHIuc3Vic3RyaW5nKGxhc3RJZHgsIGkpICsgbmV4dDtcbiAgICAgICAgICAgIGxhc3RJZHggPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldCArPSBgJHtzdHIuc3Vic3RyaW5nKGxhc3RJZHgsIGkpfSYjeCR7Z2V0Q29kZVBvaW50KHN0ciwgaSkudG9TdHJpbmcoMTYpfTtgO1xuICAgICAgICAgICAgLy8gSW5jcmVhc2UgYnkgMSBpZiB3ZSBoYXZlIGEgc3Vycm9nYXRlIHBhaXJcbiAgICAgICAgICAgIGxhc3RJZHggPSB4bWxSZXBsYWNlci5sYXN0SW5kZXggKz0gTnVtYmVyKChjaGFyICYgMHhmYzAwKSA9PT0gMHhkODAwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0ICsgc3RyLnN1YnN0cihsYXN0SWR4KTtcbn1cbi8qKlxuICogRW5jb2RlcyBhbGwgbm9uLUFTQ0lJIGNoYXJhY3RlcnMsIGFzIHdlbGwgYXMgY2hhcmFjdGVycyBub3QgdmFsaWQgaW4gWE1MXG4gKiBkb2N1bWVudHMgdXNpbmcgbnVtZXJpYyBoZXhhZGVjaW1hbCByZWZlcmVuY2UgKGVnLiBgJiN4ZmM7YCkuXG4gKlxuICogSGF2ZSBhIGxvb2sgYXQgYGVzY2FwZVVURjhgIGlmIHlvdSB3YW50IGEgbW9yZSBjb25jaXNlIG91dHB1dCBhdCB0aGUgZXhwZW5zZVxuICogb2YgcmVkdWNlZCB0cmFuc3BvcnRhYmlsaXR5LlxuICpcbiAqIEBwYXJhbSBkYXRhIFN0cmluZyB0byBlc2NhcGUuXG4gKi9cbmV4cG9ydCBjb25zdCBlc2NhcGUgPSBlbmNvZGVYTUw7XG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGVzY2FwZXMgYWxsIGNoYXJhY3RlcnMgbWF0Y2hlZCBieSB0aGUgZ2l2ZW4gcmVndWxhclxuICogZXhwcmVzc2lvbiB1c2luZyB0aGUgZ2l2ZW4gbWFwIG9mIGNoYXJhY3RlcnMgdG8gZXNjYXBlIHRvIHRoZWlyIGVudGl0aWVzLlxuICpcbiAqIEBwYXJhbSByZWdleCBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggY2hhcmFjdGVycyB0byBlc2NhcGUuXG4gKiBAcGFyYW0gbWFwIE1hcCBvZiBjaGFyYWN0ZXJzIHRvIGVzY2FwZSB0byB0aGVpciBlbnRpdGllcy5cbiAqXG4gKiBAcmV0dXJucyBGdW5jdGlvbiB0aGF0IGVzY2FwZXMgYWxsIGNoYXJhY3RlcnMgbWF0Y2hlZCBieSB0aGUgZ2l2ZW4gcmVndWxhclxuICogZXhwcmVzc2lvbiB1c2luZyB0aGUgZ2l2ZW4gbWFwIG9mIGNoYXJhY3RlcnMgdG8gZXNjYXBlIHRvIHRoZWlyIGVudGl0aWVzLlxuICovXG5mdW5jdGlvbiBnZXRFc2NhcGVyKHJlZ2V4LCBtYXApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZXNjYXBlKGRhdGEpIHtcbiAgICAgICAgbGV0IG1hdGNoO1xuICAgICAgICBsZXQgbGFzdElkeCA9IDA7XG4gICAgICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgICAgICB3aGlsZSAoKG1hdGNoID0gcmVnZXguZXhlYyhkYXRhKSkpIHtcbiAgICAgICAgICAgIGlmIChsYXN0SWR4ICE9PSBtYXRjaC5pbmRleCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBkYXRhLnN1YnN0cmluZyhsYXN0SWR4LCBtYXRjaC5pbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBXZSBrbm93IHRoYXQgdGhpcyBjaGFyYWN0ZXIgd2lsbCBiZSBpbiB0aGUgbWFwLlxuICAgICAgICAgICAgcmVzdWx0ICs9IG1hcC5nZXQobWF0Y2hbMF0uY2hhckNvZGVBdCgwKSk7XG4gICAgICAgICAgICAvLyBFdmVyeSBtYXRjaCB3aWxsIGJlIG9mIGxlbmd0aCAxXG4gICAgICAgICAgICBsYXN0SWR4ID0gbWF0Y2guaW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQgKyBkYXRhLnN1YnN0cmluZyhsYXN0SWR4KTtcbiAgICB9O1xufVxuLyoqXG4gKiBFbmNvZGVzIGFsbCBjaGFyYWN0ZXJzIG5vdCB2YWxpZCBpbiBYTUwgZG9jdW1lbnRzIHVzaW5nIFhNTCBlbnRpdGllcy5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIG91dHB1dCB3aWxsIGJlIGNoYXJhY3Rlci1zZXQgZGVwZW5kZW50LlxuICpcbiAqIEBwYXJhbSBkYXRhIFN0cmluZyB0byBlc2NhcGUuXG4gKi9cbmV4cG9ydCBjb25zdCBlc2NhcGVVVEY4ID0gZ2V0RXNjYXBlcigvWyY8PidcIl0vZywgeG1sQ29kZU1hcCk7XG4vKipcbiAqIEVuY29kZXMgYWxsIGNoYXJhY3RlcnMgdGhhdCBoYXZlIHRvIGJlIGVzY2FwZWQgaW4gSFRNTCBhdHRyaWJ1dGVzLFxuICogZm9sbG93aW5nIHtAbGluayBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9wYXJzaW5nLmh0bWwjZXNjYXBpbmdTdHJpbmd9LlxuICpcbiAqIEBwYXJhbSBkYXRhIFN0cmluZyB0byBlc2NhcGUuXG4gKi9cbmV4cG9ydCBjb25zdCBlc2NhcGVBdHRyaWJ1dGUgPSBnZXRFc2NhcGVyKC9bXCImXFx1MDBBMF0vZywgbmV3IE1hcChbXG4gICAgWzM0LCBcIiZxdW90O1wiXSxcbiAgICBbMzgsIFwiJmFtcDtcIl0sXG4gICAgWzE2MCwgXCImbmJzcDtcIl0sXG5dKSk7XG4vKipcbiAqIEVuY29kZXMgYWxsIGNoYXJhY3RlcnMgdGhhdCBoYXZlIHRvIGJlIGVzY2FwZWQgaW4gSFRNTCB0ZXh0LFxuICogZm9sbG93aW5nIHtAbGluayBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9wYXJzaW5nLmh0bWwjZXNjYXBpbmdTdHJpbmd9LlxuICpcbiAqIEBwYXJhbSBkYXRhIFN0cmluZyB0byBlc2NhcGUuXG4gKi9cbmV4cG9ydCBjb25zdCBlc2NhcGVUZXh0ID0gZ2V0RXNjYXBlcigvWyY8PlxcdTAwQTBdL2csIG5ldyBNYXAoW1xuICAgIFszOCwgXCImYW1wO1wiXSxcbiAgICBbNjAsIFwiJmx0O1wiXSxcbiAgICBbNjIsIFwiJmd0O1wiXSxcbiAgICBbMTYwLCBcIiZuYnNwO1wiXSxcbl0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVzY2FwZS5qcy5tYXAiLCJpbXBvcnQgeyBkZWNvZGVYTUwsIGRlY29kZUhUTUwsIERlY29kaW5nTW9kZSB9IGZyb20gXCIuL2RlY29kZS5qc1wiO1xuaW1wb3J0IHsgZW5jb2RlSFRNTCwgZW5jb2RlTm9uQXNjaWlIVE1MIH0gZnJvbSBcIi4vZW5jb2RlLmpzXCI7XG5pbXBvcnQgeyBlbmNvZGVYTUwsIGVzY2FwZVVURjgsIGVzY2FwZUF0dHJpYnV0ZSwgZXNjYXBlVGV4dCwgfSBmcm9tIFwiLi9lc2NhcGUuanNcIjtcbi8qKiBUaGUgbGV2ZWwgb2YgZW50aXRpZXMgdG8gc3VwcG9ydC4gKi9cbmV4cG9ydCB2YXIgRW50aXR5TGV2ZWw7XG4oZnVuY3Rpb24gKEVudGl0eUxldmVsKSB7XG4gICAgLyoqIFN1cHBvcnQgb25seSBYTUwgZW50aXRpZXMuICovXG4gICAgRW50aXR5TGV2ZWxbRW50aXR5TGV2ZWxbXCJYTUxcIl0gPSAwXSA9IFwiWE1MXCI7XG4gICAgLyoqIFN1cHBvcnQgSFRNTCBlbnRpdGllcywgd2hpY2ggYXJlIGEgc3VwZXJzZXQgb2YgWE1MIGVudGl0aWVzLiAqL1xuICAgIEVudGl0eUxldmVsW0VudGl0eUxldmVsW1wiSFRNTFwiXSA9IDFdID0gXCJIVE1MXCI7XG59KShFbnRpdHlMZXZlbCB8fCAoRW50aXR5TGV2ZWwgPSB7fSkpO1xuZXhwb3J0IHZhciBFbmNvZGluZ01vZGU7XG4oZnVuY3Rpb24gKEVuY29kaW5nTW9kZSkge1xuICAgIC8qKlxuICAgICAqIFRoZSBvdXRwdXQgaXMgVVRGLTggZW5jb2RlZC4gT25seSBjaGFyYWN0ZXJzIHRoYXQgbmVlZCBlc2NhcGluZyB3aXRoaW5cbiAgICAgKiBYTUwgd2lsbCBiZSBlc2NhcGVkLlxuICAgICAqL1xuICAgIEVuY29kaW5nTW9kZVtFbmNvZGluZ01vZGVbXCJVVEY4XCJdID0gMF0gPSBcIlVURjhcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgb3V0cHV0IGNvbnNpc3RzIG9ubHkgb2YgQVNDSUkgY2hhcmFjdGVycy4gQ2hhcmFjdGVycyB0aGF0IG5lZWRcbiAgICAgKiBlc2NhcGluZyB3aXRoaW4gSFRNTCwgYW5kIGNoYXJhY3RlcnMgdGhhdCBhcmVuJ3QgQVNDSUkgY2hhcmFjdGVycyB3aWxsXG4gICAgICogYmUgZXNjYXBlZC5cbiAgICAgKi9cbiAgICBFbmNvZGluZ01vZGVbRW5jb2RpbmdNb2RlW1wiQVNDSUlcIl0gPSAxXSA9IFwiQVNDSUlcIjtcbiAgICAvKipcbiAgICAgKiBFbmNvZGUgYWxsIGNoYXJhY3RlcnMgdGhhdCBoYXZlIGFuIGVxdWl2YWxlbnQgZW50aXR5LCBhcyB3ZWxsIGFzIGFsbFxuICAgICAqIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IEFTQ0lJIGNoYXJhY3RlcnMuXG4gICAgICovXG4gICAgRW5jb2RpbmdNb2RlW0VuY29kaW5nTW9kZVtcIkV4dGVuc2l2ZVwiXSA9IDJdID0gXCJFeHRlbnNpdmVcIjtcbiAgICAvKipcbiAgICAgKiBFbmNvZGUgYWxsIGNoYXJhY3RlcnMgdGhhdCBoYXZlIHRvIGJlIGVzY2FwZWQgaW4gSFRNTCBhdHRyaWJ1dGVzLFxuICAgICAqIGZvbGxvd2luZyB7QGxpbmsgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvcGFyc2luZy5odG1sI2VzY2FwaW5nU3RyaW5nfS5cbiAgICAgKi9cbiAgICBFbmNvZGluZ01vZGVbRW5jb2RpbmdNb2RlW1wiQXR0cmlidXRlXCJdID0gM10gPSBcIkF0dHJpYnV0ZVwiO1xuICAgIC8qKlxuICAgICAqIEVuY29kZSBhbGwgY2hhcmFjdGVycyB0aGF0IGhhdmUgdG8gYmUgZXNjYXBlZCBpbiBIVE1MIHRleHQsXG4gICAgICogZm9sbG93aW5nIHtAbGluayBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9wYXJzaW5nLmh0bWwjZXNjYXBpbmdTdHJpbmd9LlxuICAgICAqL1xuICAgIEVuY29kaW5nTW9kZVtFbmNvZGluZ01vZGVbXCJUZXh0XCJdID0gNF0gPSBcIlRleHRcIjtcbn0pKEVuY29kaW5nTW9kZSB8fCAoRW5jb2RpbmdNb2RlID0ge30pKTtcbi8qKlxuICogRGVjb2RlcyBhIHN0cmluZyB3aXRoIGVudGl0aWVzLlxuICpcbiAqIEBwYXJhbSBkYXRhIFN0cmluZyB0byBkZWNvZGUuXG4gKiBAcGFyYW0gb3B0aW9ucyBEZWNvZGluZyBvcHRpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlKGRhdGEsIG9wdGlvbnMgPSBFbnRpdHlMZXZlbC5YTUwpIHtcbiAgICBjb25zdCBsZXZlbCA9IHR5cGVvZiBvcHRpb25zID09PSBcIm51bWJlclwiID8gb3B0aW9ucyA6IG9wdGlvbnMubGV2ZWw7XG4gICAgaWYgKGxldmVsID09PSBFbnRpdHlMZXZlbC5IVE1MKSB7XG4gICAgICAgIGNvbnN0IG1vZGUgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMubW9kZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIGRlY29kZUhUTUwoZGF0YSwgbW9kZSk7XG4gICAgfVxuICAgIHJldHVybiBkZWNvZGVYTUwoZGF0YSk7XG59XG4vKipcbiAqIERlY29kZXMgYSBzdHJpbmcgd2l0aCBlbnRpdGllcy4gRG9lcyBub3QgYWxsb3cgbWlzc2luZyB0cmFpbGluZyBzZW1pY29sb25zIGZvciBlbnRpdGllcy5cbiAqXG4gKiBAcGFyYW0gZGF0YSBTdHJpbmcgdG8gZGVjb2RlLlxuICogQHBhcmFtIG9wdGlvbnMgRGVjb2Rpbmcgb3B0aW9ucy5cbiAqIEBkZXByZWNhdGVkIFVzZSBgZGVjb2RlYCB3aXRoIHRoZSBgbW9kZWAgc2V0IHRvIGBTdHJpY3RgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlU3RyaWN0KGRhdGEsIG9wdGlvbnMgPSBFbnRpdHlMZXZlbC5YTUwpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3Qgb3B0cyA9IHR5cGVvZiBvcHRpb25zID09PSBcIm51bWJlclwiID8geyBsZXZlbDogb3B0aW9ucyB9IDogb3B0aW9ucztcbiAgICAoX2EgPSBvcHRzLm1vZGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChvcHRzLm1vZGUgPSBEZWNvZGluZ01vZGUuU3RyaWN0KTtcbiAgICByZXR1cm4gZGVjb2RlKGRhdGEsIG9wdHMpO1xufVxuLyoqXG4gKiBFbmNvZGVzIGEgc3RyaW5nIHdpdGggZW50aXRpZXMuXG4gKlxuICogQHBhcmFtIGRhdGEgU3RyaW5nIHRvIGVuY29kZS5cbiAqIEBwYXJhbSBvcHRpb25zIEVuY29kaW5nIG9wdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgb3B0aW9ucyA9IEVudGl0eUxldmVsLlhNTCkge1xuICAgIGNvbnN0IG9wdHMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJudW1iZXJcIiA/IHsgbGV2ZWw6IG9wdGlvbnMgfSA6IG9wdGlvbnM7XG4gICAgLy8gTW9kZSBgVVRGOGAganVzdCBlc2NhcGVzIFhNTCBlbnRpdGllc1xuICAgIGlmIChvcHRzLm1vZGUgPT09IEVuY29kaW5nTW9kZS5VVEY4KVxuICAgICAgICByZXR1cm4gZXNjYXBlVVRGOChkYXRhKTtcbiAgICBpZiAob3B0cy5tb2RlID09PSBFbmNvZGluZ01vZGUuQXR0cmlidXRlKVxuICAgICAgICByZXR1cm4gZXNjYXBlQXR0cmlidXRlKGRhdGEpO1xuICAgIGlmIChvcHRzLm1vZGUgPT09IEVuY29kaW5nTW9kZS5UZXh0KVxuICAgICAgICByZXR1cm4gZXNjYXBlVGV4dChkYXRhKTtcbiAgICBpZiAob3B0cy5sZXZlbCA9PT0gRW50aXR5TGV2ZWwuSFRNTCkge1xuICAgICAgICBpZiAob3B0cy5tb2RlID09PSBFbmNvZGluZ01vZGUuQVNDSUkpIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGVOb25Bc2NpaUhUTUwoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVuY29kZUhUTUwoZGF0YSk7XG4gICAgfVxuICAgIC8vIEFTQ0lJIGFuZCBFeHRlbnNpdmUgYXJlIGVxdWl2YWxlbnRcbiAgICByZXR1cm4gZW5jb2RlWE1MKGRhdGEpO1xufVxuZXhwb3J0IHsgZW5jb2RlWE1MLCBlc2NhcGUsIGVzY2FwZVVURjgsIGVzY2FwZUF0dHJpYnV0ZSwgZXNjYXBlVGV4dCwgfSBmcm9tIFwiLi9lc2NhcGUuanNcIjtcbmV4cG9ydCB7IGVuY29kZUhUTUwsIGVuY29kZU5vbkFzY2lpSFRNTCwgXG4vLyBMZWdhY3kgYWxpYXNlcyAoZGVwcmVjYXRlZClcbmVuY29kZUhUTUwgYXMgZW5jb2RlSFRNTDQsIGVuY29kZUhUTUwgYXMgZW5jb2RlSFRNTDUsIH0gZnJvbSBcIi4vZW5jb2RlLmpzXCI7XG5leHBvcnQgeyBFbnRpdHlEZWNvZGVyLCBEZWNvZGluZ01vZGUsIGRlY29kZVhNTCwgZGVjb2RlSFRNTCwgZGVjb2RlSFRNTFN0cmljdCwgZGVjb2RlSFRNTEF0dHJpYnV0ZSwgXG4vLyBMZWdhY3kgYWxpYXNlcyAoZGVwcmVjYXRlZClcbmRlY29kZUhUTUwgYXMgZGVjb2RlSFRNTDQsIGRlY29kZUhUTUwgYXMgZGVjb2RlSFRNTDUsIGRlY29kZUhUTUxTdHJpY3QgYXMgZGVjb2RlSFRNTDRTdHJpY3QsIGRlY29kZUhUTUxTdHJpY3QgYXMgZGVjb2RlSFRNTDVTdHJpY3QsIGRlY29kZVhNTCBhcyBkZWNvZGVYTUxTdHJpY3QsIH0gZnJvbSBcIi4vZGVjb2RlLmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJleHBvcnQgY29uc3QgZWxlbWVudE5hbWVzID0gbmV3IE1hcChbXG4gICAgXCJhbHRHbHlwaFwiLFxuICAgIFwiYWx0R2x5cGhEZWZcIixcbiAgICBcImFsdEdseXBoSXRlbVwiLFxuICAgIFwiYW5pbWF0ZUNvbG9yXCIsXG4gICAgXCJhbmltYXRlTW90aW9uXCIsXG4gICAgXCJhbmltYXRlVHJhbnNmb3JtXCIsXG4gICAgXCJjbGlwUGF0aFwiLFxuICAgIFwiZmVCbGVuZFwiLFxuICAgIFwiZmVDb2xvck1hdHJpeFwiLFxuICAgIFwiZmVDb21wb25lbnRUcmFuc2ZlclwiLFxuICAgIFwiZmVDb21wb3NpdGVcIixcbiAgICBcImZlQ29udm9sdmVNYXRyaXhcIixcbiAgICBcImZlRGlmZnVzZUxpZ2h0aW5nXCIsXG4gICAgXCJmZURpc3BsYWNlbWVudE1hcFwiLFxuICAgIFwiZmVEaXN0YW50TGlnaHRcIixcbiAgICBcImZlRHJvcFNoYWRvd1wiLFxuICAgIFwiZmVGbG9vZFwiLFxuICAgIFwiZmVGdW5jQVwiLFxuICAgIFwiZmVGdW5jQlwiLFxuICAgIFwiZmVGdW5jR1wiLFxuICAgIFwiZmVGdW5jUlwiLFxuICAgIFwiZmVHYXVzc2lhbkJsdXJcIixcbiAgICBcImZlSW1hZ2VcIixcbiAgICBcImZlTWVyZ2VcIixcbiAgICBcImZlTWVyZ2VOb2RlXCIsXG4gICAgXCJmZU1vcnBob2xvZ3lcIixcbiAgICBcImZlT2Zmc2V0XCIsXG4gICAgXCJmZVBvaW50TGlnaHRcIixcbiAgICBcImZlU3BlY3VsYXJMaWdodGluZ1wiLFxuICAgIFwiZmVTcG90TGlnaHRcIixcbiAgICBcImZlVGlsZVwiLFxuICAgIFwiZmVUdXJidWxlbmNlXCIsXG4gICAgXCJmb3JlaWduT2JqZWN0XCIsXG4gICAgXCJnbHlwaFJlZlwiLFxuICAgIFwibGluZWFyR3JhZGllbnRcIixcbiAgICBcInJhZGlhbEdyYWRpZW50XCIsXG4gICAgXCJ0ZXh0UGF0aFwiLFxuXS5tYXAoKHZhbCkgPT4gW3ZhbC50b0xvd2VyQ2FzZSgpLCB2YWxdKSk7XG5leHBvcnQgY29uc3QgYXR0cmlidXRlTmFtZXMgPSBuZXcgTWFwKFtcbiAgICBcImRlZmluaXRpb25VUkxcIixcbiAgICBcImF0dHJpYnV0ZU5hbWVcIixcbiAgICBcImF0dHJpYnV0ZVR5cGVcIixcbiAgICBcImJhc2VGcmVxdWVuY3lcIixcbiAgICBcImJhc2VQcm9maWxlXCIsXG4gICAgXCJjYWxjTW9kZVwiLFxuICAgIFwiY2xpcFBhdGhVbml0c1wiLFxuICAgIFwiZGlmZnVzZUNvbnN0YW50XCIsXG4gICAgXCJlZGdlTW9kZVwiLFxuICAgIFwiZmlsdGVyVW5pdHNcIixcbiAgICBcImdseXBoUmVmXCIsXG4gICAgXCJncmFkaWVudFRyYW5zZm9ybVwiLFxuICAgIFwiZ3JhZGllbnRVbml0c1wiLFxuICAgIFwia2VybmVsTWF0cml4XCIsXG4gICAgXCJrZXJuZWxVbml0TGVuZ3RoXCIsXG4gICAgXCJrZXlQb2ludHNcIixcbiAgICBcImtleVNwbGluZXNcIixcbiAgICBcImtleVRpbWVzXCIsXG4gICAgXCJsZW5ndGhBZGp1c3RcIixcbiAgICBcImxpbWl0aW5nQ29uZUFuZ2xlXCIsXG4gICAgXCJtYXJrZXJIZWlnaHRcIixcbiAgICBcIm1hcmtlclVuaXRzXCIsXG4gICAgXCJtYXJrZXJXaWR0aFwiLFxuICAgIFwibWFza0NvbnRlbnRVbml0c1wiLFxuICAgIFwibWFza1VuaXRzXCIsXG4gICAgXCJudW1PY3RhdmVzXCIsXG4gICAgXCJwYXRoTGVuZ3RoXCIsXG4gICAgXCJwYXR0ZXJuQ29udGVudFVuaXRzXCIsXG4gICAgXCJwYXR0ZXJuVHJhbnNmb3JtXCIsXG4gICAgXCJwYXR0ZXJuVW5pdHNcIixcbiAgICBcInBvaW50c0F0WFwiLFxuICAgIFwicG9pbnRzQXRZXCIsXG4gICAgXCJwb2ludHNBdFpcIixcbiAgICBcInByZXNlcnZlQWxwaGFcIixcbiAgICBcInByZXNlcnZlQXNwZWN0UmF0aW9cIixcbiAgICBcInByaW1pdGl2ZVVuaXRzXCIsXG4gICAgXCJyZWZYXCIsXG4gICAgXCJyZWZZXCIsXG4gICAgXCJyZXBlYXRDb3VudFwiLFxuICAgIFwicmVwZWF0RHVyXCIsXG4gICAgXCJyZXF1aXJlZEV4dGVuc2lvbnNcIixcbiAgICBcInJlcXVpcmVkRmVhdHVyZXNcIixcbiAgICBcInNwZWN1bGFyQ29uc3RhbnRcIixcbiAgICBcInNwZWN1bGFyRXhwb25lbnRcIixcbiAgICBcInNwcmVhZE1ldGhvZFwiLFxuICAgIFwic3RhcnRPZmZzZXRcIixcbiAgICBcInN0ZERldmlhdGlvblwiLFxuICAgIFwic3RpdGNoVGlsZXNcIixcbiAgICBcInN1cmZhY2VTY2FsZVwiLFxuICAgIFwic3lzdGVtTGFuZ3VhZ2VcIixcbiAgICBcInRhYmxlVmFsdWVzXCIsXG4gICAgXCJ0YXJnZXRYXCIsXG4gICAgXCJ0YXJnZXRZXCIsXG4gICAgXCJ0ZXh0TGVuZ3RoXCIsXG4gICAgXCJ2aWV3Qm94XCIsXG4gICAgXCJ2aWV3VGFyZ2V0XCIsXG4gICAgXCJ4Q2hhbm5lbFNlbGVjdG9yXCIsXG4gICAgXCJ5Q2hhbm5lbFNlbGVjdG9yXCIsXG4gICAgXCJ6b29tQW5kUGFuXCIsXG5dLm1hcCgodmFsKSA9PiBbdmFsLnRvTG93ZXJDYXNlKCksIHZhbF0pKTtcbiIsIi8qXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCAqIGFzIEVsZW1lbnRUeXBlIGZyb20gXCJkb21lbGVtZW50dHlwZVwiO1xuaW1wb3J0IHsgZW5jb2RlWE1MLCBlc2NhcGVBdHRyaWJ1dGUsIGVzY2FwZVRleHQgfSBmcm9tIFwiZW50aXRpZXNcIjtcbi8qKlxuICogTWl4ZWQtY2FzZSBTVkcgYW5kIE1hdGhNTCB0YWdzICYgYXR0cmlidXRlc1xuICogcmVjb2duaXplZCBieSB0aGUgSFRNTCBwYXJzZXIuXG4gKlxuICogQHNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9wYXJzaW5nLmh0bWwjcGFyc2luZy1tYWluLWluZm9yZWlnblxuICovXG5pbXBvcnQgeyBlbGVtZW50TmFtZXMsIGF0dHJpYnV0ZU5hbWVzIH0gZnJvbSBcIi4vZm9yZWlnbk5hbWVzLmpzXCI7XG5jb25zdCB1bmVuY29kZWRFbGVtZW50cyA9IG5ldyBTZXQoW1xuICAgIFwic3R5bGVcIixcbiAgICBcInNjcmlwdFwiLFxuICAgIFwieG1wXCIsXG4gICAgXCJpZnJhbWVcIixcbiAgICBcIm5vZW1iZWRcIixcbiAgICBcIm5vZnJhbWVzXCIsXG4gICAgXCJwbGFpbnRleHRcIixcbiAgICBcIm5vc2NyaXB0XCIsXG5dKTtcbmZ1bmN0aW9uIHJlcGxhY2VRdW90ZXModmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvXCIvZywgXCImcXVvdDtcIik7XG59XG4vKipcbiAqIEZvcm1hdCBhdHRyaWJ1dGVzXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdEF0dHJpYnV0ZXMoYXR0cmlidXRlcywgb3B0cykge1xuICAgIHZhciBfYTtcbiAgICBpZiAoIWF0dHJpYnV0ZXMpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBlbmNvZGUgPSAoKF9hID0gb3B0cy5lbmNvZGVFbnRpdGllcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogb3B0cy5kZWNvZGVFbnRpdGllcykgPT09IGZhbHNlXG4gICAgICAgID8gcmVwbGFjZVF1b3Rlc1xuICAgICAgICA6IG9wdHMueG1sTW9kZSB8fCBvcHRzLmVuY29kZUVudGl0aWVzICE9PSBcInV0ZjhcIlxuICAgICAgICAgICAgPyBlbmNvZGVYTUxcbiAgICAgICAgICAgIDogZXNjYXBlQXR0cmlidXRlO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKVxuICAgICAgICAubWFwKChrZXkpID0+IHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgdmFsdWUgPSAoX2EgPSBhdHRyaWJ1dGVzW2tleV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCI7XG4gICAgICAgIGlmIChvcHRzLnhtbE1vZGUgPT09IFwiZm9yZWlnblwiKSB7XG4gICAgICAgICAgICAvKiBGaXggdXAgbWl4ZWQtY2FzZSBhdHRyaWJ1dGUgbmFtZXMgKi9cbiAgICAgICAgICAgIGtleSA9IChfYiA9IGF0dHJpYnV0ZU5hbWVzLmdldChrZXkpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBrZXk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvcHRzLmVtcHR5QXR0cnMgJiYgIW9wdHMueG1sTW9kZSAmJiB2YWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7a2V5fT1cIiR7ZW5jb2RlKHZhbHVlKX1cImA7XG4gICAgfSlcbiAgICAgICAgLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBTZWxmLWVuY2xvc2luZyB0YWdzXG4gKi9cbmNvbnN0IHNpbmdsZVRhZyA9IG5ldyBTZXQoW1xuICAgIFwiYXJlYVwiLFxuICAgIFwiYmFzZVwiLFxuICAgIFwiYmFzZWZvbnRcIixcbiAgICBcImJyXCIsXG4gICAgXCJjb2xcIixcbiAgICBcImNvbW1hbmRcIixcbiAgICBcImVtYmVkXCIsXG4gICAgXCJmcmFtZVwiLFxuICAgIFwiaHJcIixcbiAgICBcImltZ1wiLFxuICAgIFwiaW5wdXRcIixcbiAgICBcImlzaW5kZXhcIixcbiAgICBcImtleWdlblwiLFxuICAgIFwibGlua1wiLFxuICAgIFwibWV0YVwiLFxuICAgIFwicGFyYW1cIixcbiAgICBcInNvdXJjZVwiLFxuICAgIFwidHJhY2tcIixcbiAgICBcIndiclwiLFxuXSk7XG4vKipcbiAqIFJlbmRlcnMgYSBET00gbm9kZSBvciBhbiBhcnJheSBvZiBET00gbm9kZXMgdG8gYSBzdHJpbmcuXG4gKlxuICogQ2FuIGJlIHRob3VnaHQgb2YgYXMgdGhlIGVxdWl2YWxlbnQgb2YgdGhlIGBvdXRlckhUTUxgIG9mIHRoZSBwYXNzZWQgbm9kZShzKS5cbiAqXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGJlIHJlbmRlcmVkLlxuICogQHBhcmFtIG9wdGlvbnMgQ2hhbmdlcyBzZXJpYWxpemF0aW9uIGJlaGF2aW9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIobm9kZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qgbm9kZXMgPSBcImxlbmd0aFwiIGluIG5vZGUgPyBub2RlIDogW25vZGVdO1xuICAgIGxldCBvdXRwdXQgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgb3V0cHV0ICs9IHJlbmRlck5vZGUobm9kZXNbaV0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyO1xuZnVuY3Rpb24gcmVuZGVyTm9kZShub2RlLCBvcHRpb25zKSB7XG4gICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBFbGVtZW50VHlwZS5Sb290OlxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcihub2RlLmNoaWxkcmVuLCBvcHRpb25zKTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBXZSBkb24ndCB1c2UgYERvY3R5cGVgIHlldFxuICAgICAgICBjYXNlIEVsZW1lbnRUeXBlLkRvY3R5cGU6XG4gICAgICAgIGNhc2UgRWxlbWVudFR5cGUuRGlyZWN0aXZlOlxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlckRpcmVjdGl2ZShub2RlKTtcbiAgICAgICAgY2FzZSBFbGVtZW50VHlwZS5Db21tZW50OlxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlckNvbW1lbnQobm9kZSk7XG4gICAgICAgIGNhc2UgRWxlbWVudFR5cGUuQ0RBVEE6XG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyQ2RhdGEobm9kZSk7XG4gICAgICAgIGNhc2UgRWxlbWVudFR5cGUuU2NyaXB0OlxuICAgICAgICBjYXNlIEVsZW1lbnRUeXBlLlN0eWxlOlxuICAgICAgICBjYXNlIEVsZW1lbnRUeXBlLlRhZzpcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJUYWcobm9kZSwgb3B0aW9ucyk7XG4gICAgICAgIGNhc2UgRWxlbWVudFR5cGUuVGV4dDpcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJUZXh0KG5vZGUsIG9wdGlvbnMpO1xuICAgIH1cbn1cbmNvbnN0IGZvcmVpZ25Nb2RlSW50ZWdyYXRpb25Qb2ludHMgPSBuZXcgU2V0KFtcbiAgICBcIm1pXCIsXG4gICAgXCJtb1wiLFxuICAgIFwibW5cIixcbiAgICBcIm1zXCIsXG4gICAgXCJtdGV4dFwiLFxuICAgIFwiYW5ub3RhdGlvbi14bWxcIixcbiAgICBcImZvcmVpZ25PYmplY3RcIixcbiAgICBcImRlc2NcIixcbiAgICBcInRpdGxlXCIsXG5dKTtcbmNvbnN0IGZvcmVpZ25FbGVtZW50cyA9IG5ldyBTZXQoW1wic3ZnXCIsIFwibWF0aFwiXSk7XG5mdW5jdGlvbiByZW5kZXJUYWcoZWxlbSwgb3B0cykge1xuICAgIHZhciBfYTtcbiAgICAvLyBIYW5kbGUgU1ZHIC8gTWF0aE1MIGluIEhUTUxcbiAgICBpZiAob3B0cy54bWxNb2RlID09PSBcImZvcmVpZ25cIikge1xuICAgICAgICAvKiBGaXggdXAgbWl4ZWQtY2FzZSBlbGVtZW50IG5hbWVzICovXG4gICAgICAgIGVsZW0ubmFtZSA9IChfYSA9IGVsZW1lbnROYW1lcy5nZXQoZWxlbS5uYW1lKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZWxlbS5uYW1lO1xuICAgICAgICAvKiBFeGl0IGZvcmVpZ24gbW9kZSBhdCBpbnRlZ3JhdGlvbiBwb2ludHMgKi9cbiAgICAgICAgaWYgKGVsZW0ucGFyZW50ICYmXG4gICAgICAgICAgICBmb3JlaWduTW9kZUludGVncmF0aW9uUG9pbnRzLmhhcyhlbGVtLnBhcmVudC5uYW1lKSkge1xuICAgICAgICAgICAgb3B0cyA9IHsgLi4ub3B0cywgeG1sTW9kZTogZmFsc2UgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIW9wdHMueG1sTW9kZSAmJiBmb3JlaWduRWxlbWVudHMuaGFzKGVsZW0ubmFtZSkpIHtcbiAgICAgICAgb3B0cyA9IHsgLi4ub3B0cywgeG1sTW9kZTogXCJmb3JlaWduXCIgfTtcbiAgICB9XG4gICAgbGV0IHRhZyA9IGA8JHtlbGVtLm5hbWV9YDtcbiAgICBjb25zdCBhdHRyaWJzID0gZm9ybWF0QXR0cmlidXRlcyhlbGVtLmF0dHJpYnMsIG9wdHMpO1xuICAgIGlmIChhdHRyaWJzKSB7XG4gICAgICAgIHRhZyArPSBgICR7YXR0cmlic31gO1xuICAgIH1cbiAgICBpZiAoZWxlbS5jaGlsZHJlbi5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgKG9wdHMueG1sTW9kZVxuICAgICAgICAgICAgPyAvLyBJbiBYTUwgbW9kZSBvciBmb3JlaWduIG1vZGUsIGFuZCB1c2VyIGhhc24ndCBleHBsaWNpdGx5IHR1cm5lZCBvZmYgc2VsZi1jbG9zaW5nIHRhZ3NcbiAgICAgICAgICAgICAgICBvcHRzLnNlbGZDbG9zaW5nVGFncyAhPT0gZmFsc2VcbiAgICAgICAgICAgIDogLy8gVXNlciBleHBsaWNpdGx5IGFza2VkIGZvciBzZWxmLWNsb3NpbmcgdGFncywgZXZlbiBpbiBIVE1MIG1vZGVcbiAgICAgICAgICAgICAgICBvcHRzLnNlbGZDbG9zaW5nVGFncyAmJiBzaW5nbGVUYWcuaGFzKGVsZW0ubmFtZSkpKSB7XG4gICAgICAgIGlmICghb3B0cy54bWxNb2RlKVxuICAgICAgICAgICAgdGFnICs9IFwiIFwiO1xuICAgICAgICB0YWcgKz0gXCIvPlwiO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGFnICs9IFwiPlwiO1xuICAgICAgICBpZiAoZWxlbS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0YWcgKz0gcmVuZGVyKGVsZW0uY2hpbGRyZW4sIG9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRzLnhtbE1vZGUgfHwgIXNpbmdsZVRhZy5oYXMoZWxlbS5uYW1lKSkge1xuICAgICAgICAgICAgdGFnICs9IGA8LyR7ZWxlbS5uYW1lfT5gO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YWc7XG59XG5mdW5jdGlvbiByZW5kZXJEaXJlY3RpdmUoZWxlbSkge1xuICAgIHJldHVybiBgPCR7ZWxlbS5kYXRhfT5gO1xufVxuZnVuY3Rpb24gcmVuZGVyVGV4dChlbGVtLCBvcHRzKSB7XG4gICAgdmFyIF9hO1xuICAgIGxldCBkYXRhID0gZWxlbS5kYXRhIHx8IFwiXCI7XG4gICAgLy8gSWYgZW50aXRpZXMgd2VyZW4ndCBkZWNvZGVkLCBubyBuZWVkIHRvIGVuY29kZSB0aGVtIGJhY2tcbiAgICBpZiAoKChfYSA9IG9wdHMuZW5jb2RlRW50aXRpZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG9wdHMuZGVjb2RlRW50aXRpZXMpICE9PSBmYWxzZSAmJlxuICAgICAgICAhKCFvcHRzLnhtbE1vZGUgJiZcbiAgICAgICAgICAgIGVsZW0ucGFyZW50ICYmXG4gICAgICAgICAgICB1bmVuY29kZWRFbGVtZW50cy5oYXMoZWxlbS5wYXJlbnQubmFtZSkpKSB7XG4gICAgICAgIGRhdGEgPVxuICAgICAgICAgICAgb3B0cy54bWxNb2RlIHx8IG9wdHMuZW5jb2RlRW50aXRpZXMgIT09IFwidXRmOFwiXG4gICAgICAgICAgICAgICAgPyBlbmNvZGVYTUwoZGF0YSlcbiAgICAgICAgICAgICAgICA6IGVzY2FwZVRleHQoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xufVxuZnVuY3Rpb24gcmVuZGVyQ2RhdGEoZWxlbSkge1xuICAgIHJldHVybiBgPCFbQ0RBVEFbJHtlbGVtLmNoaWxkcmVuWzBdLmRhdGF9XV0+YDtcbn1cbmZ1bmN0aW9uIHJlbmRlckNvbW1lbnQoZWxlbSkge1xuICAgIHJldHVybiBgPCEtLSR7ZWxlbS5kYXRhfS0tPmA7XG59XG4iLCJpbXBvcnQgeyBpc1RhZywgaXNDREFUQSwgaXNUZXh0LCBoYXNDaGlsZHJlbiwgaXNDb21tZW50LCB9IGZyb20gXCJkb21oYW5kbGVyXCI7XG5pbXBvcnQgcmVuZGVySFRNTCBmcm9tIFwiZG9tLXNlcmlhbGl6ZXJcIjtcbmltcG9ydCB7IEVsZW1lbnRUeXBlIH0gZnJvbSBcImRvbWVsZW1lbnR0eXBlXCI7XG4vKipcbiAqIEBjYXRlZ29yeSBTdHJpbmdpZnlcbiAqIEBkZXByZWNhdGVkIFVzZSB0aGUgYGRvbS1zZXJpYWxpemVyYCBtb2R1bGUgZGlyZWN0bHkuXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGdldCB0aGUgb3V0ZXIgSFRNTCBvZi5cbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIHNlcmlhbGl6YXRpb24uXG4gKiBAcmV0dXJucyBgbm9kZWAncyBvdXRlciBIVE1MLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3V0ZXJIVE1MKG5vZGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gcmVuZGVySFRNTChub2RlLCBvcHRpb25zKTtcbn1cbi8qKlxuICogQGNhdGVnb3J5IFN0cmluZ2lmeVxuICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBgZG9tLXNlcmlhbGl6ZXJgIG1vZHVsZSBkaXJlY3RseS5cbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gZ2V0IHRoZSBpbm5lciBIVE1MIG9mLlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBmb3Igc2VyaWFsaXphdGlvbi5cbiAqIEByZXR1cm5zIGBub2RlYCdzIGlubmVyIEhUTUwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbm5lckhUTUwobm9kZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBoYXNDaGlsZHJlbihub2RlKVxuICAgICAgICA/IG5vZGUuY2hpbGRyZW4ubWFwKChub2RlKSA9PiBnZXRPdXRlckhUTUwobm9kZSwgb3B0aW9ucykpLmpvaW4oXCJcIilcbiAgICAgICAgOiBcIlwiO1xufVxuLyoqXG4gKiBHZXQgYSBub2RlJ3MgaW5uZXIgdGV4dC4gU2FtZSBhcyBgdGV4dENvbnRlbnRgLCBidXQgaW5zZXJ0cyBuZXdsaW5lcyBmb3IgYDxicj5gIHRhZ3MuIElnbm9yZXMgY29tbWVudHMuXG4gKlxuICogQGNhdGVnb3J5IFN0cmluZ2lmeVxuICogQGRlcHJlY2F0ZWQgVXNlIGB0ZXh0Q29udGVudGAgaW5zdGVhZC5cbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gZ2V0IHRoZSBpbm5lciB0ZXh0IG9mLlxuICogQHJldHVybnMgYG5vZGVgJ3MgaW5uZXIgdGV4dC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRleHQobm9kZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5tYXAoZ2V0VGV4dCkuam9pbihcIlwiKTtcbiAgICBpZiAoaXNUYWcobm9kZSkpXG4gICAgICAgIHJldHVybiBub2RlLm5hbWUgPT09IFwiYnJcIiA/IFwiXFxuXCIgOiBnZXRUZXh0KG5vZGUuY2hpbGRyZW4pO1xuICAgIGlmIChpc0NEQVRBKG5vZGUpKVxuICAgICAgICByZXR1cm4gZ2V0VGV4dChub2RlLmNoaWxkcmVuKTtcbiAgICBpZiAoaXNUZXh0KG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5kYXRhO1xuICAgIHJldHVybiBcIlwiO1xufVxuLyoqXG4gKiBHZXQgYSBub2RlJ3MgdGV4dCBjb250ZW50LiBJZ25vcmVzIGNvbW1lbnRzLlxuICpcbiAqIEBjYXRlZ29yeSBTdHJpbmdpZnlcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gZ2V0IHRoZSB0ZXh0IGNvbnRlbnQgb2YuXG4gKiBAcmV0dXJucyBgbm9kZWAncyB0ZXh0IGNvbnRlbnQuXG4gKiBAc2VlIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTm9kZS90ZXh0Q29udGVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRleHRDb250ZW50KG5vZGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShub2RlKSlcbiAgICAgICAgcmV0dXJuIG5vZGUubWFwKHRleHRDb250ZW50KS5qb2luKFwiXCIpO1xuICAgIGlmIChoYXNDaGlsZHJlbihub2RlKSAmJiAhaXNDb21tZW50KG5vZGUpKSB7XG4gICAgICAgIHJldHVybiB0ZXh0Q29udGVudChub2RlLmNoaWxkcmVuKTtcbiAgICB9XG4gICAgaWYgKGlzVGV4dChub2RlKSlcbiAgICAgICAgcmV0dXJuIG5vZGUuZGF0YTtcbiAgICByZXR1cm4gXCJcIjtcbn1cbi8qKlxuICogR2V0IGEgbm9kZSdzIGlubmVyIHRleHQsIGlnbm9yaW5nIGA8c2NyaXB0PmAgYW5kIGA8c3R5bGU+YCB0YWdzLiBJZ25vcmVzIGNvbW1lbnRzLlxuICpcbiAqIEBjYXRlZ29yeSBTdHJpbmdpZnlcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gZ2V0IHRoZSBpbm5lciB0ZXh0IG9mLlxuICogQHJldHVybnMgYG5vZGVgJ3MgaW5uZXIgdGV4dC5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Ob2RlL2lubmVyVGV4dH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlubmVyVGV4dChub2RlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpXG4gICAgICAgIHJldHVybiBub2RlLm1hcChpbm5lclRleHQpLmpvaW4oXCJcIik7XG4gICAgaWYgKGhhc0NoaWxkcmVuKG5vZGUpICYmIChub2RlLnR5cGUgPT09IEVsZW1lbnRUeXBlLlRhZyB8fCBpc0NEQVRBKG5vZGUpKSkge1xuICAgICAgICByZXR1cm4gaW5uZXJUZXh0KG5vZGUuY2hpbGRyZW4pO1xuICAgIH1cbiAgICBpZiAoaXNUZXh0KG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5kYXRhO1xuICAgIHJldHVybiBcIlwiO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaW5naWZ5LmpzLm1hcCIsImltcG9ydCB7IGlzVGFnLCBoYXNDaGlsZHJlbiwgfSBmcm9tIFwiZG9taGFuZGxlclwiO1xuLyoqXG4gKiBHZXQgYSBub2RlJ3MgY2hpbGRyZW4uXG4gKlxuICogQGNhdGVnb3J5IFRyYXZlcnNhbFxuICogQHBhcmFtIGVsZW0gTm9kZSB0byBnZXQgdGhlIGNoaWxkcmVuIG9mLlxuICogQHJldHVybnMgYGVsZW1gJ3MgY2hpbGRyZW4sIG9yIGFuIGVtcHR5IGFycmF5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2hpbGRyZW4oZWxlbSkge1xuICAgIHJldHVybiBoYXNDaGlsZHJlbihlbGVtKSA/IGVsZW0uY2hpbGRyZW4gOiBbXTtcbn1cbi8qKlxuICogR2V0IGEgbm9kZSdzIHBhcmVudC5cbiAqXG4gKiBAY2F0ZWdvcnkgVHJhdmVyc2FsXG4gKiBAcGFyYW0gZWxlbSBOb2RlIHRvIGdldCB0aGUgcGFyZW50IG9mLlxuICogQHJldHVybnMgYGVsZW1gJ3MgcGFyZW50IG5vZGUsIG9yIGBudWxsYCBpZiBgZWxlbWAgaXMgYSByb290IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXJlbnQoZWxlbSkge1xuICAgIHJldHVybiBlbGVtLnBhcmVudCB8fCBudWxsO1xufVxuLyoqXG4gKiBHZXRzIGFuIGVsZW1lbnRzIHNpYmxpbmdzLCBpbmNsdWRpbmcgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICpcbiAqIEF0dGVtcHRzIHRvIGdldCB0aGUgY2hpbGRyZW4gdGhyb3VnaCB0aGUgZWxlbWVudCdzIHBhcmVudCBmaXJzdC4gSWYgd2UgZG9uJ3RcbiAqIGhhdmUgYSBwYXJlbnQgKHRoZSBlbGVtZW50IGlzIGEgcm9vdCBub2RlKSwgd2Ugd2FsayB0aGUgZWxlbWVudCdzIGBwcmV2YCAmXG4gKiBgbmV4dGAgdG8gZ2V0IGFsbCByZW1haW5pbmcgbm9kZXMuXG4gKlxuICogQGNhdGVnb3J5IFRyYXZlcnNhbFxuICogQHBhcmFtIGVsZW0gRWxlbWVudCB0byBnZXQgdGhlIHNpYmxpbmdzIG9mLlxuICogQHJldHVybnMgYGVsZW1gJ3Mgc2libGluZ3MsIGluY2x1ZGluZyBgZWxlbWAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTaWJsaW5ncyhlbGVtKSB7XG4gICAgY29uc3QgcGFyZW50ID0gZ2V0UGFyZW50KGVsZW0pO1xuICAgIGlmIChwYXJlbnQgIT0gbnVsbClcbiAgICAgICAgcmV0dXJuIGdldENoaWxkcmVuKHBhcmVudCk7XG4gICAgY29uc3Qgc2libGluZ3MgPSBbZWxlbV07XG4gICAgbGV0IHsgcHJldiwgbmV4dCB9ID0gZWxlbTtcbiAgICB3aGlsZSAocHJldiAhPSBudWxsKSB7XG4gICAgICAgIHNpYmxpbmdzLnVuc2hpZnQocHJldik7XG4gICAgICAgICh7IHByZXYgfSA9IHByZXYpO1xuICAgIH1cbiAgICB3aGlsZSAobmV4dCAhPSBudWxsKSB7XG4gICAgICAgIHNpYmxpbmdzLnB1c2gobmV4dCk7XG4gICAgICAgICh7IG5leHQgfSA9IG5leHQpO1xuICAgIH1cbiAgICByZXR1cm4gc2libGluZ3M7XG59XG4vKipcbiAqIEdldHMgYW4gYXR0cmlidXRlIGZyb20gYW4gZWxlbWVudC5cbiAqXG4gKiBAY2F0ZWdvcnkgVHJhdmVyc2FsXG4gKiBAcGFyYW0gZWxlbSBFbGVtZW50IHRvIGNoZWNrLlxuICogQHBhcmFtIG5hbWUgQXR0cmlidXRlIG5hbWUgdG8gcmV0cmlldmUuXG4gKiBAcmV0dXJucyBUaGUgZWxlbWVudCdzIGF0dHJpYnV0ZSB2YWx1ZSwgb3IgYHVuZGVmaW5lZGAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBdHRyaWJ1dGVWYWx1ZShlbGVtLCBuYW1lKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBlbGVtLmF0dHJpYnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtuYW1lXTtcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYW4gZWxlbWVudCBoYXMgYW4gYXR0cmlidXRlLlxuICpcbiAqIEBjYXRlZ29yeSBUcmF2ZXJzYWxcbiAqIEBwYXJhbSBlbGVtIEVsZW1lbnQgdG8gY2hlY2suXG4gKiBAcGFyYW0gbmFtZSBBdHRyaWJ1dGUgbmFtZSB0byBsb29rIGZvci5cbiAqIEByZXR1cm5zIFJldHVybnMgd2hldGhlciBgZWxlbWAgaGFzIHRoZSBhdHRyaWJ1dGUgYG5hbWVgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzQXR0cmliKGVsZW0sIG5hbWUpIHtcbiAgICByZXR1cm4gKGVsZW0uYXR0cmlicyAhPSBudWxsICYmXG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlbGVtLmF0dHJpYnMsIG5hbWUpICYmXG4gICAgICAgIGVsZW0uYXR0cmlic1tuYW1lXSAhPSBudWxsKTtcbn1cbi8qKlxuICogR2V0IHRoZSB0YWcgbmFtZSBvZiBhbiBlbGVtZW50LlxuICpcbiAqIEBjYXRlZ29yeSBUcmF2ZXJzYWxcbiAqIEBwYXJhbSBlbGVtIFRoZSBlbGVtZW50IHRvIGdldCB0aGUgbmFtZSBmb3IuXG4gKiBAcmV0dXJucyBUaGUgdGFnIG5hbWUgb2YgYGVsZW1gLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmFtZShlbGVtKSB7XG4gICAgcmV0dXJuIGVsZW0ubmFtZTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbmV4dCBlbGVtZW50IHNpYmxpbmcgb2YgYSBub2RlLlxuICpcbiAqIEBjYXRlZ29yeSBUcmF2ZXJzYWxcbiAqIEBwYXJhbSBlbGVtIFRoZSBlbGVtZW50IHRvIGdldCB0aGUgbmV4dCBzaWJsaW5nIG9mLlxuICogQHJldHVybnMgYGVsZW1gJ3MgbmV4dCBzaWJsaW5nIHRoYXQgaXMgYSB0YWcsIG9yIGBudWxsYCBpZiB0aGVyZSBpcyBubyBuZXh0XG4gKiBzaWJsaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbmV4dEVsZW1lbnRTaWJsaW5nKGVsZW0pIHtcbiAgICBsZXQgeyBuZXh0IH0gPSBlbGVtO1xuICAgIHdoaWxlIChuZXh0ICE9PSBudWxsICYmICFpc1RhZyhuZXh0KSlcbiAgICAgICAgKHsgbmV4dCB9ID0gbmV4dCk7XG4gICAgcmV0dXJuIG5leHQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIHByZXZpb3VzIGVsZW1lbnQgc2libGluZyBvZiBhIG5vZGUuXG4gKlxuICogQGNhdGVnb3J5IFRyYXZlcnNhbFxuICogQHBhcmFtIGVsZW0gVGhlIGVsZW1lbnQgdG8gZ2V0IHRoZSBwcmV2aW91cyBzaWJsaW5nIG9mLlxuICogQHJldHVybnMgYGVsZW1gJ3MgcHJldmlvdXMgc2libGluZyB0aGF0IGlzIGEgdGFnLCBvciBgbnVsbGAgaWYgdGhlcmUgaXMgbm9cbiAqIHByZXZpb3VzIHNpYmxpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmV2RWxlbWVudFNpYmxpbmcoZWxlbSkge1xuICAgIGxldCB7IHByZXYgfSA9IGVsZW07XG4gICAgd2hpbGUgKHByZXYgIT09IG51bGwgJiYgIWlzVGFnKHByZXYpKVxuICAgICAgICAoeyBwcmV2IH0gPSBwcmV2KTtcbiAgICByZXR1cm4gcHJldjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYXZlcnNhbC5qcy5tYXAiLCIvKipcbiAqIFJlbW92ZSBhbiBlbGVtZW50IGZyb20gdGhlIGRvbVxuICpcbiAqIEBjYXRlZ29yeSBNYW5pcHVsYXRpb25cbiAqIEBwYXJhbSBlbGVtIFRoZSBlbGVtZW50IHRvIGJlIHJlbW92ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoZWxlbSkge1xuICAgIGlmIChlbGVtLnByZXYpXG4gICAgICAgIGVsZW0ucHJldi5uZXh0ID0gZWxlbS5uZXh0O1xuICAgIGlmIChlbGVtLm5leHQpXG4gICAgICAgIGVsZW0ubmV4dC5wcmV2ID0gZWxlbS5wcmV2O1xuICAgIGlmIChlbGVtLnBhcmVudCkge1xuICAgICAgICBjb25zdCBjaGlsZHMgPSBlbGVtLnBhcmVudC5jaGlsZHJlbjtcbiAgICAgICAgY29uc3QgY2hpbGRzSW5kZXggPSBjaGlsZHMubGFzdEluZGV4T2YoZWxlbSk7XG4gICAgICAgIGlmIChjaGlsZHNJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICBjaGlsZHMuc3BsaWNlKGNoaWxkc0luZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbGVtLm5leHQgPSBudWxsO1xuICAgIGVsZW0ucHJldiA9IG51bGw7XG4gICAgZWxlbS5wYXJlbnQgPSBudWxsO1xufVxuLyoqXG4gKiBSZXBsYWNlIGFuIGVsZW1lbnQgaW4gdGhlIGRvbVxuICpcbiAqIEBjYXRlZ29yeSBNYW5pcHVsYXRpb25cbiAqIEBwYXJhbSBlbGVtIFRoZSBlbGVtZW50IHRvIGJlIHJlcGxhY2VkXG4gKiBAcGFyYW0gcmVwbGFjZW1lbnQgVGhlIGVsZW1lbnQgdG8gYmUgYWRkZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2VFbGVtZW50KGVsZW0sIHJlcGxhY2VtZW50KSB7XG4gICAgY29uc3QgcHJldiA9IChyZXBsYWNlbWVudC5wcmV2ID0gZWxlbS5wcmV2KTtcbiAgICBpZiAocHJldikge1xuICAgICAgICBwcmV2Lm5leHQgPSByZXBsYWNlbWVudDtcbiAgICB9XG4gICAgY29uc3QgbmV4dCA9IChyZXBsYWNlbWVudC5uZXh0ID0gZWxlbS5uZXh0KTtcbiAgICBpZiAobmV4dCkge1xuICAgICAgICBuZXh0LnByZXYgPSByZXBsYWNlbWVudDtcbiAgICB9XG4gICAgY29uc3QgcGFyZW50ID0gKHJlcGxhY2VtZW50LnBhcmVudCA9IGVsZW0ucGFyZW50KTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcyA9IHBhcmVudC5jaGlsZHJlbjtcbiAgICAgICAgY2hpbGRzW2NoaWxkcy5sYXN0SW5kZXhPZihlbGVtKV0gPSByZXBsYWNlbWVudDtcbiAgICAgICAgZWxlbS5wYXJlbnQgPSBudWxsO1xuICAgIH1cbn1cbi8qKlxuICogQXBwZW5kIGEgY2hpbGQgdG8gYW4gZWxlbWVudC5cbiAqXG4gKiBAY2F0ZWdvcnkgTWFuaXB1bGF0aW9uXG4gKiBAcGFyYW0gcGFyZW50IFRoZSBlbGVtZW50IHRvIGFwcGVuZCB0by5cbiAqIEBwYXJhbSBjaGlsZCBUaGUgZWxlbWVudCB0byBiZSBhZGRlZCBhcyBhIGNoaWxkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kQ2hpbGQocGFyZW50LCBjaGlsZCkge1xuICAgIHJlbW92ZUVsZW1lbnQoY2hpbGQpO1xuICAgIGNoaWxkLm5leHQgPSBudWxsO1xuICAgIGNoaWxkLnBhcmVudCA9IHBhcmVudDtcbiAgICBpZiAocGFyZW50LmNoaWxkcmVuLnB1c2goY2hpbGQpID4gMSkge1xuICAgICAgICBjb25zdCBzaWJsaW5nID0gcGFyZW50LmNoaWxkcmVuW3BhcmVudC5jaGlsZHJlbi5sZW5ndGggLSAyXTtcbiAgICAgICAgc2libGluZy5uZXh0ID0gY2hpbGQ7XG4gICAgICAgIGNoaWxkLnByZXYgPSBzaWJsaW5nO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2hpbGQucHJldiA9IG51bGw7XG4gICAgfVxufVxuLyoqXG4gKiBBcHBlbmQgYW4gZWxlbWVudCBhZnRlciBhbm90aGVyLlxuICpcbiAqIEBjYXRlZ29yeSBNYW5pcHVsYXRpb25cbiAqIEBwYXJhbSBlbGVtIFRoZSBlbGVtZW50IHRvIGFwcGVuZCBhZnRlci5cbiAqIEBwYXJhbSBuZXh0IFRoZSBlbGVtZW50IGJlIGFkZGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kKGVsZW0sIG5leHQpIHtcbiAgICByZW1vdmVFbGVtZW50KG5leHQpO1xuICAgIGNvbnN0IHsgcGFyZW50IH0gPSBlbGVtO1xuICAgIGNvbnN0IGN1cnJOZXh0ID0gZWxlbS5uZXh0O1xuICAgIG5leHQubmV4dCA9IGN1cnJOZXh0O1xuICAgIG5leHQucHJldiA9IGVsZW07XG4gICAgZWxlbS5uZXh0ID0gbmV4dDtcbiAgICBuZXh0LnBhcmVudCA9IHBhcmVudDtcbiAgICBpZiAoY3Vyck5leHQpIHtcbiAgICAgICAgY3Vyck5leHQucHJldiA9IG5leHQ7XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcyA9IHBhcmVudC5jaGlsZHJlbjtcbiAgICAgICAgICAgIGNoaWxkcy5zcGxpY2UoY2hpbGRzLmxhc3RJbmRleE9mKGN1cnJOZXh0KSwgMCwgbmV4dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAocGFyZW50KSB7XG4gICAgICAgIHBhcmVudC5jaGlsZHJlbi5wdXNoKG5leHQpO1xuICAgIH1cbn1cbi8qKlxuICogUHJlcGVuZCBhIGNoaWxkIHRvIGFuIGVsZW1lbnQuXG4gKlxuICogQGNhdGVnb3J5IE1hbmlwdWxhdGlvblxuICogQHBhcmFtIHBhcmVudCBUaGUgZWxlbWVudCB0byBwcmVwZW5kIGJlZm9yZS5cbiAqIEBwYXJhbSBjaGlsZCBUaGUgZWxlbWVudCB0byBiZSBhZGRlZCBhcyBhIGNoaWxkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlcGVuZENoaWxkKHBhcmVudCwgY2hpbGQpIHtcbiAgICByZW1vdmVFbGVtZW50KGNoaWxkKTtcbiAgICBjaGlsZC5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgY2hpbGQucHJldiA9IG51bGw7XG4gICAgaWYgKHBhcmVudC5jaGlsZHJlbi51bnNoaWZ0KGNoaWxkKSAhPT0gMSkge1xuICAgICAgICBjb25zdCBzaWJsaW5nID0gcGFyZW50LmNoaWxkcmVuWzFdO1xuICAgICAgICBzaWJsaW5nLnByZXYgPSBjaGlsZDtcbiAgICAgICAgY2hpbGQubmV4dCA9IHNpYmxpbmc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjaGlsZC5uZXh0ID0gbnVsbDtcbiAgICB9XG59XG4vKipcbiAqIFByZXBlbmQgYW4gZWxlbWVudCBiZWZvcmUgYW5vdGhlci5cbiAqXG4gKiBAY2F0ZWdvcnkgTWFuaXB1bGF0aW9uXG4gKiBAcGFyYW0gZWxlbSBUaGUgZWxlbWVudCB0byBwcmVwZW5kIGJlZm9yZS5cbiAqIEBwYXJhbSBwcmV2IFRoZSBlbGVtZW50IGJlIGFkZGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlcGVuZChlbGVtLCBwcmV2KSB7XG4gICAgcmVtb3ZlRWxlbWVudChwcmV2KTtcbiAgICBjb25zdCB7IHBhcmVudCB9ID0gZWxlbTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcyA9IHBhcmVudC5jaGlsZHJlbjtcbiAgICAgICAgY2hpbGRzLnNwbGljZShjaGlsZHMuaW5kZXhPZihlbGVtKSwgMCwgcHJldik7XG4gICAgfVxuICAgIGlmIChlbGVtLnByZXYpIHtcbiAgICAgICAgZWxlbS5wcmV2Lm5leHQgPSBwcmV2O1xuICAgIH1cbiAgICBwcmV2LnBhcmVudCA9IHBhcmVudDtcbiAgICBwcmV2LnByZXYgPSBlbGVtLnByZXY7XG4gICAgcHJldi5uZXh0ID0gZWxlbTtcbiAgICBlbGVtLnByZXYgPSBwcmV2O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFuaXB1bGF0aW9uLmpzLm1hcCIsImltcG9ydCB7IGlzVGFnLCBoYXNDaGlsZHJlbiB9IGZyb20gXCJkb21oYW5kbGVyXCI7XG4vKipcbiAqIFNlYXJjaCBhIG5vZGUgYW5kIGl0cyBjaGlsZHJlbiBmb3Igbm9kZXMgcGFzc2luZyBhIHRlc3QgZnVuY3Rpb24uIElmIGBub2RlYCBpcyBub3QgYW4gYXJyYXksIGl0IHdpbGwgYmUgd3JhcHBlZCBpbiBvbmUuXG4gKlxuICogQGNhdGVnb3J5IFF1ZXJ5aW5nXG4gKiBAcGFyYW0gdGVzdCBGdW5jdGlvbiB0byB0ZXN0IG5vZGVzIG9uLlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBzZWFyY2guIFdpbGwgYmUgaW5jbHVkZWQgaW4gdGhlIHJlc3VsdCBzZXQgaWYgaXQgbWF0Y2hlcy5cbiAqIEBwYXJhbSByZWN1cnNlIEFsc28gY29uc2lkZXIgY2hpbGQgbm9kZXMuXG4gKiBAcGFyYW0gbGltaXQgTWF4aW11bSBudW1iZXIgb2Ygbm9kZXMgdG8gcmV0dXJuLlxuICogQHJldHVybnMgQWxsIG5vZGVzIHBhc3NpbmcgYHRlc3RgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyKHRlc3QsIG5vZGUsIHJlY3Vyc2UgPSB0cnVlLCBsaW1pdCA9IEluZmluaXR5KSB7XG4gICAgcmV0dXJuIGZpbmQodGVzdCwgQXJyYXkuaXNBcnJheShub2RlKSA/IG5vZGUgOiBbbm9kZV0sIHJlY3Vyc2UsIGxpbWl0KTtcbn1cbi8qKlxuICogU2VhcmNoIGFuIGFycmF5IG9mIG5vZGVzIGFuZCB0aGVpciBjaGlsZHJlbiBmb3Igbm9kZXMgcGFzc2luZyBhIHRlc3QgZnVuY3Rpb24uXG4gKlxuICogQGNhdGVnb3J5IFF1ZXJ5aW5nXG4gKiBAcGFyYW0gdGVzdCBGdW5jdGlvbiB0byB0ZXN0IG5vZGVzIG9uLlxuICogQHBhcmFtIG5vZGVzIEFycmF5IG9mIG5vZGVzIHRvIHNlYXJjaC5cbiAqIEBwYXJhbSByZWN1cnNlIEFsc28gY29uc2lkZXIgY2hpbGQgbm9kZXMuXG4gKiBAcGFyYW0gbGltaXQgTWF4aW11bSBudW1iZXIgb2Ygbm9kZXMgdG8gcmV0dXJuLlxuICogQHJldHVybnMgQWxsIG5vZGVzIHBhc3NpbmcgYHRlc3RgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmluZCh0ZXN0LCBub2RlcywgcmVjdXJzZSwgbGltaXQpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAvKiogU3RhY2sgb2YgdGhlIGFycmF5cyB3ZSBhcmUgbG9va2luZyBhdC4gKi9cbiAgICBjb25zdCBub2RlU3RhY2sgPSBbQXJyYXkuaXNBcnJheShub2RlcykgPyBub2RlcyA6IFtub2Rlc11dO1xuICAgIC8qKiBTdGFjayBvZiB0aGUgaW5kaWNlcyB3aXRoaW4gdGhlIGFycmF5cy4gKi9cbiAgICBjb25zdCBpbmRleFN0YWNrID0gWzBdO1xuICAgIGZvciAoOzspIHtcbiAgICAgICAgLy8gRmlyc3QsIGNoZWNrIGlmIHRoZSBjdXJyZW50IGFycmF5IGhhcyBhbnkgbW9yZSBlbGVtZW50cyB0byBsb29rIGF0LlxuICAgICAgICBpZiAoaW5kZXhTdGFja1swXSA+PSBub2RlU3RhY2tbMF0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIG5vIG1vcmUgYXJyYXlzIHRvIGxvb2sgYXQsIHdlIGFyZSBkb25lLlxuICAgICAgICAgICAgaWYgKGluZGV4U3RhY2subGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgcmVtb3ZlIHRoZSBjdXJyZW50IGFycmF5IGZyb20gdGhlIHN0YWNrLlxuICAgICAgICAgICAgbm9kZVN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICBpbmRleFN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAvLyBMb29wIGJhY2sgdG8gdGhlIHN0YXJ0IHRvIGNvbnRpbnVlIHdpdGggdGhlIG5leHQgYXJyYXkuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbGVtID0gbm9kZVN0YWNrWzBdW2luZGV4U3RhY2tbMF0rK107XG4gICAgICAgIGlmICh0ZXN0KGVsZW0pKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChlbGVtKTtcbiAgICAgICAgICAgIGlmICgtLWxpbWl0IDw9IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVjdXJzZSAmJiBoYXNDaGlsZHJlbihlbGVtKSAmJiBlbGVtLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBBZGQgdGhlIGNoaWxkcmVuIHRvIHRoZSBzdGFjay4gV2UgYXJlIGRlcHRoLWZpcnN0LCBzbyB0aGlzIGlzXG4gICAgICAgICAgICAgKiB0aGUgbmV4dCBhcnJheSB3ZSBsb29rIGF0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpbmRleFN0YWNrLnVuc2hpZnQoMCk7XG4gICAgICAgICAgICBub2RlU3RhY2sudW5zaGlmdChlbGVtLmNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogRmluZHMgdGhlIGZpcnN0IGVsZW1lbnQgaW5zaWRlIG9mIGFuIGFycmF5IHRoYXQgbWF0Y2hlcyBhIHRlc3QgZnVuY3Rpb24uIFRoaXMgaXMgYW4gYWxpYXMgZm9yIGBBcnJheS5wcm90b3R5cGUuZmluZGAuXG4gKlxuICogQGNhdGVnb3J5IFF1ZXJ5aW5nXG4gKiBAcGFyYW0gdGVzdCBGdW5jdGlvbiB0byB0ZXN0IG5vZGVzIG9uLlxuICogQHBhcmFtIG5vZGVzIEFycmF5IG9mIG5vZGVzIHRvIHNlYXJjaC5cbiAqIEByZXR1cm5zIFRoZSBmaXJzdCBub2RlIGluIHRoZSBhcnJheSB0aGF0IHBhc3NlcyBgdGVzdGAuXG4gKiBAZGVwcmVjYXRlZCBVc2UgYEFycmF5LnByb3RvdHlwZS5maW5kYCBkaXJlY3RseS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRPbmVDaGlsZCh0ZXN0LCBub2Rlcykge1xuICAgIHJldHVybiBub2Rlcy5maW5kKHRlc3QpO1xufVxuLyoqXG4gKiBGaW5kcyBvbmUgZWxlbWVudCBpbiBhIHRyZWUgdGhhdCBwYXNzZXMgYSB0ZXN0LlxuICpcbiAqIEBjYXRlZ29yeSBRdWVyeWluZ1xuICogQHBhcmFtIHRlc3QgRnVuY3Rpb24gdG8gdGVzdCBub2RlcyBvbi5cbiAqIEBwYXJhbSBub2RlcyBOb2RlIG9yIGFycmF5IG9mIG5vZGVzIHRvIHNlYXJjaC5cbiAqIEBwYXJhbSByZWN1cnNlIEFsc28gY29uc2lkZXIgY2hpbGQgbm9kZXMuXG4gKiBAcmV0dXJucyBUaGUgZmlyc3Qgbm9kZSB0aGF0IHBhc3NlcyBgdGVzdGAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kT25lKHRlc3QsIG5vZGVzLCByZWN1cnNlID0gdHJ1ZSkge1xuICAgIGNvbnN0IHNlYXJjaGVkTm9kZXMgPSBBcnJheS5pc0FycmF5KG5vZGVzKSA/IG5vZGVzIDogW25vZGVzXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlYXJjaGVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHNlYXJjaGVkTm9kZXNbaV07XG4gICAgICAgIGlmIChpc1RhZyhub2RlKSAmJiB0ZXN0KG5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVjdXJzZSAmJiBoYXNDaGlsZHJlbihub2RlKSAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGZvdW5kID0gZmluZE9uZSh0ZXN0LCBub2RlLmNoaWxkcmVuLCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChmb3VuZClcbiAgICAgICAgICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIENoZWNrcyBpZiBhIHRyZWUgb2Ygbm9kZXMgY29udGFpbnMgYXQgbGVhc3Qgb25lIG5vZGUgcGFzc2luZyBhIHRlc3QuXG4gKlxuICogQGNhdGVnb3J5IFF1ZXJ5aW5nXG4gKiBAcGFyYW0gdGVzdCBGdW5jdGlvbiB0byB0ZXN0IG5vZGVzIG9uLlxuICogQHBhcmFtIG5vZGVzIEFycmF5IG9mIG5vZGVzIHRvIHNlYXJjaC5cbiAqIEByZXR1cm5zIFdoZXRoZXIgYSB0cmVlIG9mIG5vZGVzIGNvbnRhaW5zIGF0IGxlYXN0IG9uZSBub2RlIHBhc3NpbmcgdGhlIHRlc3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleGlzdHNPbmUodGVzdCwgbm9kZXMpIHtcbiAgICByZXR1cm4gKEFycmF5LmlzQXJyYXkobm9kZXMpID8gbm9kZXMgOiBbbm9kZXNdKS5zb21lKChub2RlKSA9PiAoaXNUYWcobm9kZSkgJiYgdGVzdChub2RlKSkgfHxcbiAgICAgICAgKGhhc0NoaWxkcmVuKG5vZGUpICYmIGV4aXN0c09uZSh0ZXN0LCBub2RlLmNoaWxkcmVuKSkpO1xufVxuLyoqXG4gKiBTZWFyY2ggYW4gYXJyYXkgb2Ygbm9kZXMgYW5kIHRoZWlyIGNoaWxkcmVuIGZvciBlbGVtZW50cyBwYXNzaW5nIGEgdGVzdCBmdW5jdGlvbi5cbiAqXG4gKiBTYW1lIGFzIGBmaW5kYCwgYnV0IGxpbWl0ZWQgdG8gZWxlbWVudHMgYW5kIHdpdGggbGVzcyBvcHRpb25zLCBsZWFkaW5nIHRvIHJlZHVjZWQgY29tcGxleGl0eS5cbiAqXG4gKiBAY2F0ZWdvcnkgUXVlcnlpbmdcbiAqIEBwYXJhbSB0ZXN0IEZ1bmN0aW9uIHRvIHRlc3Qgbm9kZXMgb24uXG4gKiBAcGFyYW0gbm9kZXMgQXJyYXkgb2Ygbm9kZXMgdG8gc2VhcmNoLlxuICogQHJldHVybnMgQWxsIG5vZGVzIHBhc3NpbmcgYHRlc3RgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmluZEFsbCh0ZXN0LCBub2Rlcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IG5vZGVTdGFjayA9IFtBcnJheS5pc0FycmF5KG5vZGVzKSA/IG5vZGVzIDogW25vZGVzXV07XG4gICAgY29uc3QgaW5kZXhTdGFjayA9IFswXTtcbiAgICBmb3IgKDs7KSB7XG4gICAgICAgIGlmIChpbmRleFN0YWNrWzBdID49IG5vZGVTdGFja1swXS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChub2RlU3RhY2subGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgcmVtb3ZlIHRoZSBjdXJyZW50IGFycmF5IGZyb20gdGhlIHN0YWNrLlxuICAgICAgICAgICAgbm9kZVN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICBpbmRleFN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAvLyBMb29wIGJhY2sgdG8gdGhlIHN0YXJ0IHRvIGNvbnRpbnVlIHdpdGggdGhlIG5leHQgYXJyYXkuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbGVtID0gbm9kZVN0YWNrWzBdW2luZGV4U3RhY2tbMF0rK107XG4gICAgICAgIGlmIChpc1RhZyhlbGVtKSAmJiB0ZXN0KGVsZW0pKVxuICAgICAgICAgICAgcmVzdWx0LnB1c2goZWxlbSk7XG4gICAgICAgIGlmIChoYXNDaGlsZHJlbihlbGVtKSAmJiBlbGVtLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGluZGV4U3RhY2sudW5zaGlmdCgwKTtcbiAgICAgICAgICAgIG5vZGVTdGFjay51bnNoaWZ0KGVsZW0uY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcnlpbmcuanMubWFwIiwiaW1wb3J0IHsgaXNUYWcsIGlzVGV4dCB9IGZyb20gXCJkb21oYW5kbGVyXCI7XG5pbXBvcnQgeyBmaWx0ZXIsIGZpbmRPbmUgfSBmcm9tIFwiLi9xdWVyeWluZy5qc1wiO1xuLyoqXG4gKiBBIG1hcCBvZiBmdW5jdGlvbnMgdG8gY2hlY2sgbm9kZXMgYWdhaW5zdC5cbiAqL1xuY29uc3QgQ2hlY2tzID0ge1xuICAgIHRhZ19uYW1lKG5hbWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiAoZWxlbSkgPT4gaXNUYWcoZWxlbSkgJiYgbmFtZShlbGVtLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5hbWUgPT09IFwiKlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNUYWc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChlbGVtKSA9PiBpc1RhZyhlbGVtKSAmJiBlbGVtLm5hbWUgPT09IG5hbWU7XG4gICAgfSxcbiAgICB0YWdfdHlwZSh0eXBlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gKGVsZW0pID0+IHR5cGUoZWxlbS50eXBlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKGVsZW0pID0+IGVsZW0udHlwZSA9PT0gdHlwZTtcbiAgICB9LFxuICAgIHRhZ19jb250YWlucyhkYXRhKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gKGVsZW0pID0+IGlzVGV4dChlbGVtKSAmJiBkYXRhKGVsZW0uZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChlbGVtKSA9PiBpc1RleHQoZWxlbSkgJiYgZWxlbS5kYXRhID09PSBkYXRhO1xuICAgIH0sXG59O1xuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gY2hlY2sgd2hldGhlciBhIG5vZGUgaGFzIGFuIGF0dHJpYnV0ZSB3aXRoIGEgcGFydGljdWxhclxuICogdmFsdWUuXG4gKlxuICogQHBhcmFtIGF0dHJpYiBBdHRyaWJ1dGUgdG8gY2hlY2suXG4gKiBAcGFyYW0gdmFsdWUgQXR0cmlidXRlIHZhbHVlIHRvIGxvb2sgZm9yLlxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0byBjaGVjayB3aGV0aGVyIHRoZSBhIG5vZGUgaGFzIGFuIGF0dHJpYnV0ZSB3aXRoIGFcbiAqICAgcGFydGljdWxhciB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0QXR0cmliQ2hlY2soYXR0cmliLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gKGVsZW0pID0+IGlzVGFnKGVsZW0pICYmIHZhbHVlKGVsZW0uYXR0cmlic1thdHRyaWJdKTtcbiAgICB9XG4gICAgcmV0dXJuIChlbGVtKSA9PiBpc1RhZyhlbGVtKSAmJiBlbGVtLmF0dHJpYnNbYXR0cmliXSA9PT0gdmFsdWU7XG59XG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHRydWVgIGlmIGVpdGhlciBvZiB0aGUgaW5wdXQgZnVuY3Rpb25zXG4gKiByZXR1cm5zIGB0cnVlYCBmb3IgYSBub2RlLlxuICpcbiAqIEBwYXJhbSBhIEZpcnN0IGZ1bmN0aW9uIHRvIGNvbWJpbmUuXG4gKiBAcGFyYW0gYiBTZWNvbmQgZnVuY3Rpb24gdG8gY29tYmluZS5cbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdGFraW5nIGEgbm9kZSBhbmQgcmV0dXJuaW5nIGB0cnVlYCBpZiBlaXRoZXIgb2YgdGhlIGlucHV0XG4gKiAgIGZ1bmN0aW9ucyByZXR1cm5zIGB0cnVlYCBmb3IgdGhlIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbWJpbmVGdW5jcyhhLCBiKSB7XG4gICAgcmV0dXJuIChlbGVtKSA9PiBhKGVsZW0pIHx8IGIoZWxlbSk7XG59XG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGV4ZWN1dGVzIGFsbCBjaGVja3MgaW4gYG9wdGlvbnNgIGFuZCByZXR1cm5zIGB0cnVlYFxuICogaWYgYW55IG9mIHRoZW0gbWF0Y2ggYSBub2RlLlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIEFuIG9iamVjdCBkZXNjcmliaW5nIG5vZGVzIHRvIGxvb2sgZm9yLlxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0aGF0IGV4ZWN1dGVzIGFsbCBjaGVja3MgaW4gYG9wdGlvbnNgIGFuZCByZXR1cm5zIGB0cnVlYFxuICogICBpZiBhbnkgb2YgdGhlbSBtYXRjaCBhIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGVUZXN0KG9wdGlvbnMpIHtcbiAgICBjb25zdCBmdW5jcyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpLm1hcCgoa2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gb3B0aW9uc1trZXldO1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKENoZWNrcywga2V5KVxuICAgICAgICAgICAgPyBDaGVja3Nba2V5XSh2YWx1ZSlcbiAgICAgICAgICAgIDogZ2V0QXR0cmliQ2hlY2soa2V5LCB2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZ1bmNzLmxlbmd0aCA9PT0gMCA/IG51bGwgOiBmdW5jcy5yZWR1Y2UoY29tYmluZUZ1bmNzKTtcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYSBub2RlIG1hdGNoZXMgdGhlIGRlc2NyaXB0aW9uIGluIGBvcHRpb25zYC5cbiAqXG4gKiBAY2F0ZWdvcnkgTGVnYWN5IFF1ZXJ5IEZ1bmN0aW9uc1xuICogQHBhcmFtIG9wdGlvbnMgQW4gb2JqZWN0IGRlc2NyaWJpbmcgbm9kZXMgdG8gbG9vayBmb3IuXG4gKiBAcGFyYW0gbm9kZSBUaGUgZWxlbWVudCB0byB0ZXN0LlxuICogQHJldHVybnMgV2hldGhlciB0aGUgZWxlbWVudCBtYXRjaGVzIHRoZSBkZXNjcmlwdGlvbiBpbiBgb3B0aW9uc2AuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZXN0RWxlbWVudChvcHRpb25zLCBub2RlKSB7XG4gICAgY29uc3QgdGVzdCA9IGNvbXBpbGVUZXN0KG9wdGlvbnMpO1xuICAgIHJldHVybiB0ZXN0ID8gdGVzdChub2RlKSA6IHRydWU7XG59XG4vKipcbiAqIFJldHVybnMgYWxsIG5vZGVzIHRoYXQgbWF0Y2ggYG9wdGlvbnNgLlxuICpcbiAqIEBjYXRlZ29yeSBMZWdhY3kgUXVlcnkgRnVuY3Rpb25zXG4gKiBAcGFyYW0gb3B0aW9ucyBBbiBvYmplY3QgZGVzY3JpYmluZyBub2RlcyB0byBsb29rIGZvci5cbiAqIEBwYXJhbSBub2RlcyBOb2RlcyB0byBzZWFyY2ggdGhyb3VnaC5cbiAqIEBwYXJhbSByZWN1cnNlIEFsc28gY29uc2lkZXIgY2hpbGQgbm9kZXMuXG4gKiBAcGFyYW0gbGltaXQgTWF4aW11bSBudW1iZXIgb2Ygbm9kZXMgdG8gcmV0dXJuLlxuICogQHJldHVybnMgQWxsIG5vZGVzIHRoYXQgbWF0Y2ggYG9wdGlvbnNgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudHMob3B0aW9ucywgbm9kZXMsIHJlY3Vyc2UsIGxpbWl0ID0gSW5maW5pdHkpIHtcbiAgICBjb25zdCB0ZXN0ID0gY29tcGlsZVRlc3Qob3B0aW9ucyk7XG4gICAgcmV0dXJuIHRlc3QgPyBmaWx0ZXIodGVzdCwgbm9kZXMsIHJlY3Vyc2UsIGxpbWl0KSA6IFtdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBub2RlIHdpdGggdGhlIHN1cHBsaWVkIElELlxuICpcbiAqIEBjYXRlZ29yeSBMZWdhY3kgUXVlcnkgRnVuY3Rpb25zXG4gKiBAcGFyYW0gaWQgVGhlIHVuaXF1ZSBJRCBhdHRyaWJ1dGUgdmFsdWUgdG8gbG9vayBmb3IuXG4gKiBAcGFyYW0gbm9kZXMgTm9kZXMgdG8gc2VhcmNoIHRocm91Z2guXG4gKiBAcGFyYW0gcmVjdXJzZSBBbHNvIGNvbnNpZGVyIGNoaWxkIG5vZGVzLlxuICogQHJldHVybnMgVGhlIG5vZGUgd2l0aCB0aGUgc3VwcGxpZWQgSUQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbGVtZW50QnlJZChpZCwgbm9kZXMsIHJlY3Vyc2UgPSB0cnVlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG5vZGVzKSlcbiAgICAgICAgbm9kZXMgPSBbbm9kZXNdO1xuICAgIHJldHVybiBmaW5kT25lKGdldEF0dHJpYkNoZWNrKFwiaWRcIiwgaWQpLCBub2RlcywgcmVjdXJzZSk7XG59XG4vKipcbiAqIFJldHVybnMgYWxsIG5vZGVzIHdpdGggdGhlIHN1cHBsaWVkIGB0YWdOYW1lYC5cbiAqXG4gKiBAY2F0ZWdvcnkgTGVnYWN5IFF1ZXJ5IEZ1bmN0aW9uc1xuICogQHBhcmFtIHRhZ05hbWUgVGFnIG5hbWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSBub2RlcyBOb2RlcyB0byBzZWFyY2ggdGhyb3VnaC5cbiAqIEBwYXJhbSByZWN1cnNlIEFsc28gY29uc2lkZXIgY2hpbGQgbm9kZXMuXG4gKiBAcGFyYW0gbGltaXQgTWF4aW11bSBudW1iZXIgb2Ygbm9kZXMgdG8gcmV0dXJuLlxuICogQHJldHVybnMgQWxsIG5vZGVzIHdpdGggdGhlIHN1cHBsaWVkIGB0YWdOYW1lYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZ05hbWUsIG5vZGVzLCByZWN1cnNlID0gdHJ1ZSwgbGltaXQgPSBJbmZpbml0eSkge1xuICAgIHJldHVybiBmaWx0ZXIoQ2hlY2tzW1widGFnX25hbWVcIl0odGFnTmFtZSksIG5vZGVzLCByZWN1cnNlLCBsaW1pdCk7XG59XG4vKipcbiAqIFJldHVybnMgYWxsIG5vZGVzIHdpdGggdGhlIHN1cHBsaWVkIGBjbGFzc05hbWVgLlxuICpcbiAqIEBjYXRlZ29yeSBMZWdhY3kgUXVlcnkgRnVuY3Rpb25zXG4gKiBAcGFyYW0gY2xhc3NOYW1lIENsYXNzIG5hbWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSBub2RlcyBOb2RlcyB0byBzZWFyY2ggdGhyb3VnaC5cbiAqIEBwYXJhbSByZWN1cnNlIEFsc28gY29uc2lkZXIgY2hpbGQgbm9kZXMuXG4gKiBAcGFyYW0gbGltaXQgTWF4aW11bSBudW1iZXIgb2Ygbm9kZXMgdG8gcmV0dXJuLlxuICogQHJldHVybnMgQWxsIG5vZGVzIHdpdGggdGhlIHN1cHBsaWVkIGBjbGFzc05hbWVgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjbGFzc05hbWUsIG5vZGVzLCByZWN1cnNlID0gdHJ1ZSwgbGltaXQgPSBJbmZpbml0eSkge1xuICAgIHJldHVybiBmaWx0ZXIoZ2V0QXR0cmliQ2hlY2soXCJjbGFzc1wiLCBjbGFzc05hbWUpLCBub2RlcywgcmVjdXJzZSwgbGltaXQpO1xufVxuLyoqXG4gKiBSZXR1cm5zIGFsbCBub2RlcyB3aXRoIHRoZSBzdXBwbGllZCBgdHlwZWAuXG4gKlxuICogQGNhdGVnb3J5IExlZ2FjeSBRdWVyeSBGdW5jdGlvbnNcbiAqIEBwYXJhbSB0eXBlIEVsZW1lbnQgdHlwZSB0byBsb29rIGZvci5cbiAqIEBwYXJhbSBub2RlcyBOb2RlcyB0byBzZWFyY2ggdGhyb3VnaC5cbiAqIEBwYXJhbSByZWN1cnNlIEFsc28gY29uc2lkZXIgY2hpbGQgbm9kZXMuXG4gKiBAcGFyYW0gbGltaXQgTWF4aW11bSBudW1iZXIgb2Ygbm9kZXMgdG8gcmV0dXJuLlxuICogQHJldHVybnMgQWxsIG5vZGVzIHdpdGggdGhlIHN1cHBsaWVkIGB0eXBlYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnRzQnlUYWdUeXBlKHR5cGUsIG5vZGVzLCByZWN1cnNlID0gdHJ1ZSwgbGltaXQgPSBJbmZpbml0eSkge1xuICAgIHJldHVybiBmaWx0ZXIoQ2hlY2tzW1widGFnX3R5cGVcIl0odHlwZSksIG5vZGVzLCByZWN1cnNlLCBsaW1pdCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sZWdhY3kuanMubWFwIiwiaW1wb3J0IHsgaGFzQ2hpbGRyZW4gfSBmcm9tIFwiZG9taGFuZGxlclwiO1xuLyoqXG4gKiBHaXZlbiBhbiBhcnJheSBvZiBub2RlcywgcmVtb3ZlIGFueSBtZW1iZXIgdGhhdCBpcyBjb250YWluZWQgYnkgYW5vdGhlclxuICogbWVtYmVyLlxuICpcbiAqIEBjYXRlZ29yeSBIZWxwZXJzXG4gKiBAcGFyYW0gbm9kZXMgTm9kZXMgdG8gZmlsdGVyLlxuICogQHJldHVybnMgUmVtYWluaW5nIG5vZGVzIHRoYXQgYXJlbid0IGNvbnRhaW5lZCBieSBvdGhlciBub2Rlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVN1YnNldHMobm9kZXMpIHtcbiAgICBsZXQgaWR4ID0gbm9kZXMubGVuZ3RoO1xuICAgIC8qXG4gICAgICogQ2hlY2sgaWYgZWFjaCBub2RlIChvciBvbmUgb2YgaXRzIGFuY2VzdG9ycykgaXMgYWxyZWFkeSBjb250YWluZWQgaW4gdGhlXG4gICAgICogYXJyYXkuXG4gICAgICovXG4gICAgd2hpbGUgKC0taWR4ID49IDApIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2lkeF07XG4gICAgICAgIC8qXG4gICAgICAgICAqIFJlbW92ZSB0aGUgbm9kZSBpZiBpdCBpcyBub3QgdW5pcXVlLlxuICAgICAgICAgKiBXZSBhcmUgZ29pbmcgdGhyb3VnaCB0aGUgYXJyYXkgZnJvbSB0aGUgZW5kLCBzbyB3ZSBvbmx5XG4gICAgICAgICAqIGhhdmUgdG8gY2hlY2sgbm9kZXMgdGhhdCBwcmVjZWVkIHRoZSBub2RlIHVuZGVyIGNvbnNpZGVyYXRpb24gaW4gdGhlIGFycmF5LlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGlkeCA+IDAgJiYgbm9kZXMubGFzdEluZGV4T2Yobm9kZSwgaWR4IC0gMSkgPj0gMCkge1xuICAgICAgICAgICAgbm9kZXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBhbmNlc3RvciA9IG5vZGUucGFyZW50OyBhbmNlc3RvcjsgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQpIHtcbiAgICAgICAgICAgIGlmIChub2Rlcy5pbmNsdWRlcyhhbmNlc3RvcikpIHtcbiAgICAgICAgICAgICAgICBub2Rlcy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm9kZXM7XG59XG4vKipcbiAqIEBjYXRlZ29yeSBIZWxwZXJzXG4gKiBAc2VlIHtAbGluayBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLW5vZGUtY29tcGFyZWRvY3VtZW50cG9zaXRpb259XG4gKi9cbmV4cG9ydCB2YXIgRG9jdW1lbnRQb3NpdGlvbjtcbihmdW5jdGlvbiAoRG9jdW1lbnRQb3NpdGlvbikge1xuICAgIERvY3VtZW50UG9zaXRpb25bRG9jdW1lbnRQb3NpdGlvbltcIkRJU0NPTk5FQ1RFRFwiXSA9IDFdID0gXCJESVNDT05ORUNURURcIjtcbiAgICBEb2N1bWVudFBvc2l0aW9uW0RvY3VtZW50UG9zaXRpb25bXCJQUkVDRURJTkdcIl0gPSAyXSA9IFwiUFJFQ0VESU5HXCI7XG4gICAgRG9jdW1lbnRQb3NpdGlvbltEb2N1bWVudFBvc2l0aW9uW1wiRk9MTE9XSU5HXCJdID0gNF0gPSBcIkZPTExPV0lOR1wiO1xuICAgIERvY3VtZW50UG9zaXRpb25bRG9jdW1lbnRQb3NpdGlvbltcIkNPTlRBSU5TXCJdID0gOF0gPSBcIkNPTlRBSU5TXCI7XG4gICAgRG9jdW1lbnRQb3NpdGlvbltEb2N1bWVudFBvc2l0aW9uW1wiQ09OVEFJTkVEX0JZXCJdID0gMTZdID0gXCJDT05UQUlORURfQllcIjtcbn0pKERvY3VtZW50UG9zaXRpb24gfHwgKERvY3VtZW50UG9zaXRpb24gPSB7fSkpO1xuLyoqXG4gKiBDb21wYXJlIHRoZSBwb3NpdGlvbiBvZiBvbmUgbm9kZSBhZ2FpbnN0IGFub3RoZXIgbm9kZSBpbiBhbnkgb3RoZXIgZG9jdW1lbnQsXG4gKiByZXR1cm5pbmcgYSBiaXRtYXNrIHdpdGggdGhlIHZhbHVlcyBmcm9tIHtAbGluayBEb2N1bWVudFBvc2l0aW9ufS5cbiAqXG4gKiBEb2N1bWVudCBvcmRlcjpcbiAqID4gVGhlcmUgaXMgYW4gb3JkZXJpbmcsIGRvY3VtZW50IG9yZGVyLCBkZWZpbmVkIG9uIGFsbCB0aGUgbm9kZXMgaW4gdGhlXG4gKiA+IGRvY3VtZW50IGNvcnJlc3BvbmRpbmcgdG8gdGhlIG9yZGVyIGluIHdoaWNoIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgdGhlXG4gKiA+IFhNTCByZXByZXNlbnRhdGlvbiBvZiBlYWNoIG5vZGUgb2NjdXJzIGluIHRoZSBYTUwgcmVwcmVzZW50YXRpb24gb2YgdGhlXG4gKiA+IGRvY3VtZW50IGFmdGVyIGV4cGFuc2lvbiBvZiBnZW5lcmFsIGVudGl0aWVzLiBUaHVzLCB0aGUgZG9jdW1lbnQgZWxlbWVudFxuICogPiBub2RlIHdpbGwgYmUgdGhlIGZpcnN0IG5vZGUuIEVsZW1lbnQgbm9kZXMgb2NjdXIgYmVmb3JlIHRoZWlyIGNoaWxkcmVuLlxuICogPiBUaHVzLCBkb2N1bWVudCBvcmRlciBvcmRlcnMgZWxlbWVudCBub2RlcyBpbiBvcmRlciBvZiB0aGUgb2NjdXJyZW5jZSBvZlxuICogPiB0aGVpciBzdGFydC10YWcgaW4gdGhlIFhNTCAoYWZ0ZXIgZXhwYW5zaW9uIG9mIGVudGl0aWVzKS4gVGhlIGF0dHJpYnV0ZVxuICogPiBub2RlcyBvZiBhbiBlbGVtZW50IG9jY3VyIGFmdGVyIHRoZSBlbGVtZW50IGFuZCBiZWZvcmUgaXRzIGNoaWxkcmVuLiBUaGVcbiAqID4gcmVsYXRpdmUgb3JkZXIgb2YgYXR0cmlidXRlIG5vZGVzIGlzIGltcGxlbWVudGF0aW9uLWRlcGVuZGVudC5cbiAqXG4gKiBTb3VyY2U6XG4gKiBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1Db3JlL2dsb3NzYXJ5Lmh0bWwjZHQtZG9jdW1lbnQtb3JkZXJcbiAqXG4gKiBAY2F0ZWdvcnkgSGVscGVyc1xuICogQHBhcmFtIG5vZGVBIFRoZSBmaXJzdCBub2RlIHRvIHVzZSBpbiB0aGUgY29tcGFyaXNvblxuICogQHBhcmFtIG5vZGVCIFRoZSBzZWNvbmQgbm9kZSB0byB1c2UgaW4gdGhlIGNvbXBhcmlzb25cbiAqIEByZXR1cm5zIEEgYml0bWFzayBkZXNjcmliaW5nIHRoZSBpbnB1dCBub2RlcycgcmVsYXRpdmUgcG9zaXRpb24uXG4gKlxuICogU2VlIGh0dHA6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tbm9kZS1jb21wYXJlZG9jdW1lbnRwb3NpdGlvbiBmb3JcbiAqIGEgZGVzY3JpcHRpb24gb2YgdGhlc2UgdmFsdWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZURvY3VtZW50UG9zaXRpb24obm9kZUEsIG5vZGVCKSB7XG4gICAgY29uc3QgYVBhcmVudHMgPSBbXTtcbiAgICBjb25zdCBiUGFyZW50cyA9IFtdO1xuICAgIGlmIChub2RlQSA9PT0gbm9kZUIpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGxldCBjdXJyZW50ID0gaGFzQ2hpbGRyZW4obm9kZUEpID8gbm9kZUEgOiBub2RlQS5wYXJlbnQ7XG4gICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgICAgYVBhcmVudHMudW5zaGlmdChjdXJyZW50KTtcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuICAgIH1cbiAgICBjdXJyZW50ID0gaGFzQ2hpbGRyZW4obm9kZUIpID8gbm9kZUIgOiBub2RlQi5wYXJlbnQ7XG4gICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgICAgYlBhcmVudHMudW5zaGlmdChjdXJyZW50KTtcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuICAgIH1cbiAgICBjb25zdCBtYXhJZHggPSBNYXRoLm1pbihhUGFyZW50cy5sZW5ndGgsIGJQYXJlbnRzLmxlbmd0aCk7XG4gICAgbGV0IGlkeCA9IDA7XG4gICAgd2hpbGUgKGlkeCA8IG1heElkeCAmJiBhUGFyZW50c1tpZHhdID09PSBiUGFyZW50c1tpZHhdKSB7XG4gICAgICAgIGlkeCsrO1xuICAgIH1cbiAgICBpZiAoaWR4ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBEb2N1bWVudFBvc2l0aW9uLkRJU0NPTk5FQ1RFRDtcbiAgICB9XG4gICAgY29uc3Qgc2hhcmVkUGFyZW50ID0gYVBhcmVudHNbaWR4IC0gMV07XG4gICAgY29uc3Qgc2libGluZ3MgPSBzaGFyZWRQYXJlbnQuY2hpbGRyZW47XG4gICAgY29uc3QgYVNpYmxpbmcgPSBhUGFyZW50c1tpZHhdO1xuICAgIGNvbnN0IGJTaWJsaW5nID0gYlBhcmVudHNbaWR4XTtcbiAgICBpZiAoc2libGluZ3MuaW5kZXhPZihhU2libGluZykgPiBzaWJsaW5ncy5pbmRleE9mKGJTaWJsaW5nKSkge1xuICAgICAgICBpZiAoc2hhcmVkUGFyZW50ID09PSBub2RlQikge1xuICAgICAgICAgICAgcmV0dXJuIERvY3VtZW50UG9zaXRpb24uRk9MTE9XSU5HIHwgRG9jdW1lbnRQb3NpdGlvbi5DT05UQUlORURfQlk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIERvY3VtZW50UG9zaXRpb24uRk9MTE9XSU5HO1xuICAgIH1cbiAgICBpZiAoc2hhcmVkUGFyZW50ID09PSBub2RlQSkge1xuICAgICAgICByZXR1cm4gRG9jdW1lbnRQb3NpdGlvbi5QUkVDRURJTkcgfCBEb2N1bWVudFBvc2l0aW9uLkNPTlRBSU5TO1xuICAgIH1cbiAgICByZXR1cm4gRG9jdW1lbnRQb3NpdGlvbi5QUkVDRURJTkc7XG59XG4vKipcbiAqIFNvcnQgYW4gYXJyYXkgb2Ygbm9kZXMgYmFzZWQgb24gdGhlaXIgcmVsYXRpdmUgcG9zaXRpb24gaW4gdGhlIGRvY3VtZW50LFxuICogcmVtb3ZpbmcgYW55IGR1cGxpY2F0ZSBub2Rlcy4gSWYgdGhlIGFycmF5IGNvbnRhaW5zIG5vZGVzIHRoYXQgZG8gbm90IGJlbG9uZ1xuICogdG8gdGhlIHNhbWUgZG9jdW1lbnQsIHNvcnQgb3JkZXIgaXMgdW5zcGVjaWZpZWQuXG4gKlxuICogQGNhdGVnb3J5IEhlbHBlcnNcbiAqIEBwYXJhbSBub2RlcyBBcnJheSBvZiBET00gbm9kZXMuXG4gKiBAcmV0dXJucyBDb2xsZWN0aW9uIG9mIHVuaXF1ZSBub2Rlcywgc29ydGVkIGluIGRvY3VtZW50IG9yZGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdW5pcXVlU29ydChub2Rlcykge1xuICAgIG5vZGVzID0gbm9kZXMuZmlsdGVyKChub2RlLCBpLCBhcnIpID0+ICFhcnIuaW5jbHVkZXMobm9kZSwgaSArIDEpKTtcbiAgICBub2Rlcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlbGF0aXZlID0gY29tcGFyZURvY3VtZW50UG9zaXRpb24oYSwgYik7XG4gICAgICAgIGlmIChyZWxhdGl2ZSAmIERvY3VtZW50UG9zaXRpb24uUFJFQ0VESU5HKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVsYXRpdmUgJiBEb2N1bWVudFBvc2l0aW9uLkZPTExPV0lORykge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5vZGVzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXAiLCJpbXBvcnQgeyB0ZXh0Q29udGVudCB9IGZyb20gXCIuL3N0cmluZ2lmeS5qc1wiO1xuaW1wb3J0IHsgZ2V0RWxlbWVudHNCeVRhZ05hbWUgfSBmcm9tIFwiLi9sZWdhY3kuanNcIjtcbi8qKlxuICogR2V0IHRoZSBmZWVkIG9iamVjdCBmcm9tIHRoZSByb290IG9mIGEgRE9NIHRyZWUuXG4gKlxuICogQGNhdGVnb3J5IEZlZWRzXG4gKiBAcGFyYW0gZG9jIC0gVGhlIERPTSB0byB0byBleHRyYWN0IHRoZSBmZWVkIGZyb20uXG4gKiBAcmV0dXJucyBUaGUgZmVlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZlZWQoZG9jKSB7XG4gICAgY29uc3QgZmVlZFJvb3QgPSBnZXRPbmVFbGVtZW50KGlzVmFsaWRGZWVkLCBkb2MpO1xuICAgIHJldHVybiAhZmVlZFJvb3RcbiAgICAgICAgPyBudWxsXG4gICAgICAgIDogZmVlZFJvb3QubmFtZSA9PT0gXCJmZWVkXCJcbiAgICAgICAgICAgID8gZ2V0QXRvbUZlZWQoZmVlZFJvb3QpXG4gICAgICAgICAgICA6IGdldFJzc0ZlZWQoZmVlZFJvb3QpO1xufVxuLyoqXG4gKiBQYXJzZSBhbiBBdG9tIGZlZWQuXG4gKlxuICogQHBhcmFtIGZlZWRSb290IFRoZSByb290IG9mIHRoZSBmZWVkLlxuICogQHJldHVybnMgVGhlIHBhcnNlZCBmZWVkLlxuICovXG5mdW5jdGlvbiBnZXRBdG9tRmVlZChmZWVkUm9vdCkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBjaGlsZHMgPSBmZWVkUm9vdC5jaGlsZHJlbjtcbiAgICBjb25zdCBmZWVkID0ge1xuICAgICAgICB0eXBlOiBcImF0b21cIixcbiAgICAgICAgaXRlbXM6IGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZW50cnlcIiwgY2hpbGRzKS5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IGl0ZW07XG4gICAgICAgICAgICBjb25zdCBlbnRyeSA9IHsgbWVkaWE6IGdldE1lZGlhRWxlbWVudHMoY2hpbGRyZW4pIH07XG4gICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcImlkXCIsIFwiaWRcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShlbnRyeSwgXCJ0aXRsZVwiLCBcInRpdGxlXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIGNvbnN0IGhyZWYgPSAoX2EgPSBnZXRPbmVFbGVtZW50KFwibGlua1wiLCBjaGlsZHJlbikpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hdHRyaWJzW1wiaHJlZlwiXTtcbiAgICAgICAgICAgIGlmIChocmVmKSB7XG4gICAgICAgICAgICAgICAgZW50cnkubGluayA9IGhyZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGZldGNoKFwic3VtbWFyeVwiLCBjaGlsZHJlbikgfHwgZmV0Y2goXCJjb250ZW50XCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIGlmIChkZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgIGVudHJ5LmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwdWJEYXRlID0gZmV0Y2goXCJ1cGRhdGVkXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIGlmIChwdWJEYXRlKSB7XG4gICAgICAgICAgICAgICAgZW50cnkucHViRGF0ZSA9IG5ldyBEYXRlKHB1YkRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgICAgICB9KSxcbiAgICB9O1xuICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJpZFwiLCBcImlkXCIsIGNoaWxkcyk7XG4gICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcInRpdGxlXCIsIFwidGl0bGVcIiwgY2hpbGRzKTtcbiAgICBjb25zdCBocmVmID0gKF9hID0gZ2V0T25lRWxlbWVudChcImxpbmtcIiwgY2hpbGRzKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmF0dHJpYnNbXCJocmVmXCJdO1xuICAgIGlmIChocmVmKSB7XG4gICAgICAgIGZlZWQubGluayA9IGhyZWY7XG4gICAgfVxuICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJkZXNjcmlwdGlvblwiLCBcInN1YnRpdGxlXCIsIGNoaWxkcyk7XG4gICAgY29uc3QgdXBkYXRlZCA9IGZldGNoKFwidXBkYXRlZFwiLCBjaGlsZHMpO1xuICAgIGlmICh1cGRhdGVkKSB7XG4gICAgICAgIGZlZWQudXBkYXRlZCA9IG5ldyBEYXRlKHVwZGF0ZWQpO1xuICAgIH1cbiAgICBhZGRDb25kaXRpb25hbGx5KGZlZWQsIFwiYXV0aG9yXCIsIFwiZW1haWxcIiwgY2hpbGRzLCB0cnVlKTtcbiAgICByZXR1cm4gZmVlZDtcbn1cbi8qKlxuICogUGFyc2UgYSBSU1MgZmVlZC5cbiAqXG4gKiBAcGFyYW0gZmVlZFJvb3QgVGhlIHJvb3Qgb2YgdGhlIGZlZWQuXG4gKiBAcmV0dXJucyBUaGUgcGFyc2VkIGZlZWQuXG4gKi9cbmZ1bmN0aW9uIGdldFJzc0ZlZWQoZmVlZFJvb3QpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IGNoaWxkcyA9IChfYiA9IChfYSA9IGdldE9uZUVsZW1lbnQoXCJjaGFubmVsXCIsIGZlZWRSb290LmNoaWxkcmVuKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNoaWxkcmVuKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBbXTtcbiAgICBjb25zdCBmZWVkID0ge1xuICAgICAgICB0eXBlOiBmZWVkUm9vdC5uYW1lLnN1YnN0cigwLCAzKSxcbiAgICAgICAgaWQ6IFwiXCIsXG4gICAgICAgIGl0ZW1zOiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIml0ZW1cIiwgZmVlZFJvb3QuY2hpbGRyZW4pLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gaXRlbTtcbiAgICAgICAgICAgIGNvbnN0IGVudHJ5ID0geyBtZWRpYTogZ2V0TWVkaWFFbGVtZW50cyhjaGlsZHJlbikgfTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwiaWRcIiwgXCJndWlkXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwidGl0bGVcIiwgXCJ0aXRsZVwiLCBjaGlsZHJlbik7XG4gICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcImxpbmtcIiwgXCJsaW5rXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwiZGVzY3JpcHRpb25cIiwgXCJkZXNjcmlwdGlvblwiLCBjaGlsZHJlbik7XG4gICAgICAgICAgICBjb25zdCBwdWJEYXRlID0gZmV0Y2goXCJwdWJEYXRlXCIsIGNoaWxkcmVuKSB8fCBmZXRjaChcImRjOmRhdGVcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgaWYgKHB1YkRhdGUpXG4gICAgICAgICAgICAgICAgZW50cnkucHViRGF0ZSA9IG5ldyBEYXRlKHB1YkRhdGUpO1xuICAgICAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgICAgICB9KSxcbiAgICB9O1xuICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJ0aXRsZVwiLCBcInRpdGxlXCIsIGNoaWxkcyk7XG4gICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImxpbmtcIiwgXCJsaW5rXCIsIGNoaWxkcyk7XG4gICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImRlc2NyaXB0aW9uXCIsIFwiZGVzY3JpcHRpb25cIiwgY2hpbGRzKTtcbiAgICBjb25zdCB1cGRhdGVkID0gZmV0Y2goXCJsYXN0QnVpbGREYXRlXCIsIGNoaWxkcyk7XG4gICAgaWYgKHVwZGF0ZWQpIHtcbiAgICAgICAgZmVlZC51cGRhdGVkID0gbmV3IERhdGUodXBkYXRlZCk7XG4gICAgfVxuICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJhdXRob3JcIiwgXCJtYW5hZ2luZ0VkaXRvclwiLCBjaGlsZHMsIHRydWUpO1xuICAgIHJldHVybiBmZWVkO1xufVxuY29uc3QgTUVESUFfS0VZU19TVFJJTkcgPSBbXCJ1cmxcIiwgXCJ0eXBlXCIsIFwibGFuZ1wiXTtcbmNvbnN0IE1FRElBX0tFWVNfSU5UID0gW1xuICAgIFwiZmlsZVNpemVcIixcbiAgICBcImJpdHJhdGVcIixcbiAgICBcImZyYW1lcmF0ZVwiLFxuICAgIFwic2FtcGxpbmdyYXRlXCIsXG4gICAgXCJjaGFubmVsc1wiLFxuICAgIFwiZHVyYXRpb25cIixcbiAgICBcImhlaWdodFwiLFxuICAgIFwid2lkdGhcIixcbl07XG4vKipcbiAqIEdldCBhbGwgbWVkaWEgZWxlbWVudHMgb2YgYSBmZWVkIGl0ZW0uXG4gKlxuICogQHBhcmFtIHdoZXJlIE5vZGVzIHRvIHNlYXJjaCBpbi5cbiAqIEByZXR1cm5zIE1lZGlhIGVsZW1lbnRzLlxuICovXG5mdW5jdGlvbiBnZXRNZWRpYUVsZW1lbnRzKHdoZXJlKSB7XG4gICAgcmV0dXJuIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwibWVkaWE6Y29udGVudFwiLCB3aGVyZSkubWFwKChlbGVtKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgYXR0cmlicyB9ID0gZWxlbTtcbiAgICAgICAgY29uc3QgbWVkaWEgPSB7XG4gICAgICAgICAgICBtZWRpdW06IGF0dHJpYnNbXCJtZWRpdW1cIl0sXG4gICAgICAgICAgICBpc0RlZmF1bHQ6ICEhYXR0cmlic1tcImlzRGVmYXVsdFwiXSxcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChjb25zdCBhdHRyaWIgb2YgTUVESUFfS0VZU19TVFJJTkcpIHtcbiAgICAgICAgICAgIGlmIChhdHRyaWJzW2F0dHJpYl0pIHtcbiAgICAgICAgICAgICAgICBtZWRpYVthdHRyaWJdID0gYXR0cmlic1thdHRyaWJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgYXR0cmliIG9mIE1FRElBX0tFWVNfSU5UKSB7XG4gICAgICAgICAgICBpZiAoYXR0cmlic1thdHRyaWJdKSB7XG4gICAgICAgICAgICAgICAgbWVkaWFbYXR0cmliXSA9IHBhcnNlSW50KGF0dHJpYnNbYXR0cmliXSwgMTApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhdHRyaWJzW1wiZXhwcmVzc2lvblwiXSkge1xuICAgICAgICAgICAgbWVkaWEuZXhwcmVzc2lvbiA9IGF0dHJpYnNbXCJleHByZXNzaW9uXCJdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZWRpYTtcbiAgICB9KTtcbn1cbi8qKlxuICogR2V0IG9uZSBlbGVtZW50IGJ5IHRhZyBuYW1lLlxuICpcbiAqIEBwYXJhbSB0YWdOYW1lIFRhZyBuYW1lIHRvIGxvb2sgZm9yXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIHNlYXJjaCBpblxuICogQHJldHVybnMgVGhlIGVsZW1lbnQgb3IgbnVsbFxuICovXG5mdW5jdGlvbiBnZXRPbmVFbGVtZW50KHRhZ05hbWUsIG5vZGUpIHtcbiAgICByZXR1cm4gZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSwgbm9kZSwgdHJ1ZSwgMSlbMF07XG59XG4vKipcbiAqIEdldCB0aGUgdGV4dCBjb250ZW50IG9mIGFuIGVsZW1lbnQgd2l0aCBhIGNlcnRhaW4gdGFnIG5hbWUuXG4gKlxuICogQHBhcmFtIHRhZ05hbWUgVGFnIG5hbWUgdG8gbG9vayBmb3IuXG4gKiBAcGFyYW0gd2hlcmUgTm9kZSB0byBzZWFyY2ggaW4uXG4gKiBAcGFyYW0gcmVjdXJzZSBXaGV0aGVyIHRvIHJlY3Vyc2UgaW50byBjaGlsZCBub2Rlcy5cbiAqIEByZXR1cm5zIFRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGZldGNoKHRhZ05hbWUsIHdoZXJlLCByZWN1cnNlID0gZmFsc2UpIHtcbiAgICByZXR1cm4gdGV4dENvbnRlbnQoZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSwgd2hlcmUsIHJlY3Vyc2UsIDEpKS50cmltKCk7XG59XG4vKipcbiAqIEFkZHMgYSBwcm9wZXJ0eSB0byBhbiBvYmplY3QgaWYgaXQgaGFzIGEgdmFsdWUuXG4gKlxuICogQHBhcmFtIG9iaiBPYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSBwcm9wIFByb3BlcnR5IG5hbWVcbiAqIEBwYXJhbSB0YWdOYW1lIFRhZyBuYW1lIHRoYXQgY29udGFpbnMgdGhlIGNvbmRpdGlvbmFsbHkgYWRkZWQgcHJvcGVydHlcbiAqIEBwYXJhbSB3aGVyZSBFbGVtZW50IHRvIHNlYXJjaCBmb3IgdGhlIHByb3BlcnR5XG4gKiBAcGFyYW0gcmVjdXJzZSBXaGV0aGVyIHRvIHJlY3Vyc2UgaW50byBjaGlsZCBub2Rlcy5cbiAqL1xuZnVuY3Rpb24gYWRkQ29uZGl0aW9uYWxseShvYmosIHByb3AsIHRhZ05hbWUsIHdoZXJlLCByZWN1cnNlID0gZmFsc2UpIHtcbiAgICBjb25zdCB2YWwgPSBmZXRjaCh0YWdOYW1lLCB3aGVyZSwgcmVjdXJzZSk7XG4gICAgaWYgKHZhbClcbiAgICAgICAgb2JqW3Byb3BdID0gdmFsO1xufVxuLyoqXG4gKiBDaGVja3MgaWYgYW4gZWxlbWVudCBpcyBhIGZlZWQgcm9vdCBub2RlLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgbmFtZSBvZiB0aGUgZWxlbWVudCB0byBjaGVjay5cbiAqIEByZXR1cm5zIFdoZXRoZXIgYW4gZWxlbWVudCBpcyBhIGZlZWQgcm9vdCBub2RlLlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkRmVlZCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gXCJyc3NcIiB8fCB2YWx1ZSA9PT0gXCJmZWVkXCIgfHwgdmFsdWUgPT09IFwicmRmOlJERlwiO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmVlZHMuanMubWFwIiwiLy8gSW50ZXJuYWxcbmV4cG9ydCBjb25zdCBOT0RFX0VORCA9IC0xO1xuXG4vLyBOb2RlXG5leHBvcnQgY29uc3QgRUxFTUVOVF9OT0RFID0gMTtcbmV4cG9ydCBjb25zdCBBVFRSSUJVVEVfTk9ERSA9IDI7XG5leHBvcnQgY29uc3QgVEVYVF9OT0RFID0gMztcbmV4cG9ydCBjb25zdCBDREFUQV9TRUNUSU9OX05PREUgPSA0O1xuZXhwb3J0IGNvbnN0IENPTU1FTlRfTk9ERSA9IDg7XG5leHBvcnQgY29uc3QgRE9DVU1FTlRfTk9ERSA9IDk7XG5leHBvcnQgY29uc3QgRE9DVU1FTlRfVFlQRV9OT0RFID0gMTA7XG5leHBvcnQgY29uc3QgRE9DVU1FTlRfRlJBR01FTlRfTk9ERSA9IDExO1xuXG4vLyBFbGVtZW50c1xuZXhwb3J0IGNvbnN0IEJMT0NLX0VMRU1FTlRTID0gbmV3IFNldChbJ0FSVElDTEUnLCAnQVNJREUnLCAnQkxPQ0tRVU9URScsICdCT0RZJywgJ0JSJywgJ0JVVFRPTicsICdDQU5WQVMnLCAnQ0FQVElPTicsICdDT0wnLCAnQ09MR1JPVVAnLCAnREQnLCAnRElWJywgJ0RMJywgJ0RUJywgJ0VNQkVEJywgJ0ZJRUxEU0VUJywgJ0ZJR0NBUFRJT04nLCAnRklHVVJFJywgJ0ZPT1RFUicsICdGT1JNJywgJ0gxJywgJ0gyJywgJ0gzJywgJ0g0JywgJ0g1JywgJ0g2JywgJ0xJJywgJ1VMJywgJ09MJywgJ1AnXSk7XG5cbi8vIFRyZWVXYWxrZXJcbmV4cG9ydCBjb25zdCBTSE9XX0FMTCA9IC0xO1xuZXhwb3J0IGNvbnN0IFNIT1dfRUxFTUVOVCA9IDE7XG5leHBvcnQgY29uc3QgU0hPV19URVhUID0gNDtcbmV4cG9ydCBjb25zdCBTSE9XX0NEQVRBX1NFQ1RJT04gPSA4O1xuZXhwb3J0IGNvbnN0IFNIT1dfQ09NTUVOVCA9IDEyODtcblxuLy8gRG9jdW1lbnQgcG9zaXRpb25cbmV4cG9ydCBjb25zdCBET0NVTUVOVF9QT1NJVElPTl9ESVNDT05ORUNURUQgPSAweDAxO1xuZXhwb3J0IGNvbnN0IERPQ1VNRU5UX1BPU0lUSU9OX1BSRUNFRElORyA9IDB4MDI7XG5leHBvcnQgY29uc3QgRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HID0gMHgwNDtcbmV4cG9ydCBjb25zdCBET0NVTUVOVF9QT1NJVElPTl9DT05UQUlOUyA9IDB4MDg7XG5leHBvcnQgY29uc3QgRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTkVEX0JZID0gMHgxMDtcbmV4cG9ydCBjb25zdCBET0NVTUVOVF9QT1NJVElPTl9JTVBMRU1FTlRBVElPTl9TUEVDSUZJQyA9IDB4MjA7XG5cbi8vIFNWR1xuZXhwb3J0IGNvbnN0IFNWR19OQU1FU1BBQ0UgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuIiwiY29uc3Qge1xuICBhc3NpZ24sXG4gIGNyZWF0ZSxcbiAgZGVmaW5lUHJvcGVydGllcyxcbiAgZW50cmllcyxcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyxcbiAga2V5cyxcbiAgc2V0UHJvdG90eXBlT2Zcbn0gPSBPYmplY3Q7XG5cbmV4cG9ydCB7XG4gIGFzc2lnbixcbiAgY3JlYXRlLFxuICBkZWZpbmVQcm9wZXJ0aWVzLFxuICBlbnRyaWVzLFxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzLFxuICBrZXlzLFxuICBzZXRQcm90b3R5cGVPZlxufTtcbiIsImltcG9ydCB7RUxFTUVOVF9OT0RFfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQge0VORCwgTUlNRSwgTkVYVCwgUFJFVn0gZnJvbSAnLi9zeW1ib2xzLmpzJztcblxuY29uc3QgJFN0cmluZyA9IFN0cmluZztcbmV4cG9ydCB7JFN0cmluZyBhcyBTdHJpbmd9O1xuXG5leHBvcnQgY29uc3QgZ2V0RW5kID0gbm9kZSA9PiBub2RlLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUgPyBub2RlW0VORF0gOiBub2RlO1xuXG5leHBvcnQgY29uc3QgaWdub3JlQ2FzZSA9ICh7b3duZXJEb2N1bWVudH0pID0+IG93bmVyRG9jdW1lbnRbTUlNRV0uaWdub3JlQ2FzZTtcblxuZXhwb3J0IGNvbnN0IGtub3duQWRqYWNlbnQgPSAocHJldiwgbmV4dCkgPT4ge1xuICBwcmV2W05FWFRdID0gbmV4dDtcbiAgbmV4dFtQUkVWXSA9IHByZXY7XG59O1xuXG5leHBvcnQgY29uc3Qga25vd25Cb3VuZGFyaWVzID0gKHByZXYsIGN1cnJlbnQsIG5leHQpID0+IHtcbiAga25vd25BZGphY2VudChwcmV2LCBjdXJyZW50KTtcbiAga25vd25BZGphY2VudChnZXRFbmQoY3VycmVudCksIG5leHQpO1xufTtcblxuZXhwb3J0IGNvbnN0IGtub3duU2VnbWVudCA9IChwcmV2LCBzdGFydCwgZW5kLCBuZXh0KSA9PiB7XG4gIGtub3duQWRqYWNlbnQocHJldiwgc3RhcnQpO1xuICBrbm93bkFkamFjZW50KGdldEVuZChlbmQpLCBuZXh0KTtcbn07XG5cbmV4cG9ydCBjb25zdCBrbm93blNpYmxpbmdzID0gKHByZXYsIGN1cnJlbnQsIG5leHQpID0+IHtcbiAga25vd25BZGphY2VudChwcmV2LCBjdXJyZW50KTtcbiAga25vd25BZGphY2VudChjdXJyZW50LCBuZXh0KTtcbn07XG5cbmV4cG9ydCBjb25zdCBsb2NhbENhc2UgPSAoe2xvY2FsTmFtZSwgb3duZXJEb2N1bWVudH0pID0+IHtcbiAgcmV0dXJuIG93bmVyRG9jdW1lbnRbTUlNRV0uaWdub3JlQ2FzZSA/IGxvY2FsTmFtZS50b1VwcGVyQ2FzZSgpIDogbG9jYWxOYW1lO1xufTtcblxuZXhwb3J0IGNvbnN0IHNldEFkamFjZW50ID0gKHByZXYsIG5leHQpID0+IHtcbiAgaWYgKHByZXYpXG4gICAgcHJldltORVhUXSA9IG5leHQ7XG4gIGlmIChuZXh0KVxuICAgIG5leHRbUFJFVl0gPSBwcmV2O1xufTtcbiIsImV4cG9ydCBjb25zdCBzaGFkb3dSb290cyA9IG5ldyBXZWFrTWFwO1xuIiwiaW1wb3J0IHtFTEVNRU5UX05PREV9IGZyb20gJy4uL3NoYXJlZC9jb25zdGFudHMuanMnO1xuaW1wb3J0IHtFTkQsIE5FWFQsIFVQR1JBREV9IGZyb20gJy4uL3NoYXJlZC9zeW1ib2xzLmpzJztcbmltcG9ydCB7ZW50cmllcywgc2V0UHJvdG90eXBlT2Z9IGZyb20gJy4uL3NoYXJlZC9vYmplY3QuanMnO1xuaW1wb3J0IHtzaGFkb3dSb290c30gZnJvbSAnLi4vc2hhcmVkL3NoYWRvdy1yb290cy5qcyc7XG5cbmxldCByZWFjdGl2ZSA9IGZhbHNlO1xuXG5leHBvcnQgY29uc3QgQ2xhc3NlcyA9IG5ldyBXZWFrTWFwO1xuXG5leHBvcnQgY29uc3QgY3VzdG9tRWxlbWVudHMgPSBuZXcgV2Vha01hcDtcblxuZXhwb3J0IGNvbnN0IGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayA9IChlbGVtZW50LCBhdHRyaWJ1dGVOYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpID0+IHtcbiAgaWYgKFxuICAgIHJlYWN0aXZlICYmXG4gICAgY3VzdG9tRWxlbWVudHMuaGFzKGVsZW1lbnQpICYmXG4gICAgZWxlbWVudC5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sgJiZcbiAgICBlbGVtZW50LmNvbnN0cnVjdG9yLm9ic2VydmVkQXR0cmlidXRlcy5pbmNsdWRlcyhhdHRyaWJ1dGVOYW1lKVxuICApIHtcbiAgICBlbGVtZW50LmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyaWJ1dGVOYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpO1xuICB9XG59O1xuXG5jb25zdCBjcmVhdGVUcmlnZ2VyID0gKG1ldGhvZCwgaXNDb25uZWN0ZWQpID0+IGVsZW1lbnQgPT4ge1xuICBpZiAoY3VzdG9tRWxlbWVudHMuaGFzKGVsZW1lbnQpKSB7XG4gICAgY29uc3QgaW5mbyA9IGN1c3RvbUVsZW1lbnRzLmdldChlbGVtZW50KTtcbiAgICBpZiAoaW5mby5jb25uZWN0ZWQgIT09IGlzQ29ubmVjdGVkICYmIGVsZW1lbnQuaXNDb25uZWN0ZWQgPT09IGlzQ29ubmVjdGVkKSB7XG4gICAgICBpbmZvLmNvbm5lY3RlZCA9IGlzQ29ubmVjdGVkO1xuICAgICAgaWYgKG1ldGhvZCBpbiBlbGVtZW50KVxuICAgICAgICBlbGVtZW50W21ldGhvZF0oKTtcbiAgICB9XG4gIH1cbn07XG5cbmNvbnN0IHRyaWdnZXJDb25uZWN0ZWQgPSBjcmVhdGVUcmlnZ2VyKCdjb25uZWN0ZWRDYWxsYmFjaycsIHRydWUpO1xuZXhwb3J0IGNvbnN0IGNvbm5lY3RlZENhbGxiYWNrID0gZWxlbWVudCA9PiB7XG4gIGlmIChyZWFjdGl2ZSkge1xuICAgIHRyaWdnZXJDb25uZWN0ZWQoZWxlbWVudCk7XG4gICAgaWYgKHNoYWRvd1Jvb3RzLmhhcyhlbGVtZW50KSlcbiAgICAgIGVsZW1lbnQgPSBzaGFkb3dSb290cy5nZXQoZWxlbWVudCkuc2hhZG93Um9vdDtcbiAgICBsZXQge1tORVhUXTogbmV4dCwgW0VORF06IGVuZH0gPSBlbGVtZW50O1xuICAgIHdoaWxlIChuZXh0ICE9PSBlbmQpIHtcbiAgICAgIGlmIChuZXh0Lm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpXG4gICAgICAgIHRyaWdnZXJDb25uZWN0ZWQobmV4dCk7XG4gICAgICBuZXh0ID0gbmV4dFtORVhUXTtcbiAgICB9XG4gIH1cbn07XG5cbmNvbnN0IHRyaWdnZXJEaXNjb25uZWN0ZWQgPSBjcmVhdGVUcmlnZ2VyKCdkaXNjb25uZWN0ZWRDYWxsYmFjaycsIGZhbHNlKTtcbmV4cG9ydCBjb25zdCBkaXNjb25uZWN0ZWRDYWxsYmFjayA9IGVsZW1lbnQgPT4ge1xuICBpZiAocmVhY3RpdmUpIHtcbiAgICB0cmlnZ2VyRGlzY29ubmVjdGVkKGVsZW1lbnQpO1xuICAgIGlmIChzaGFkb3dSb290cy5oYXMoZWxlbWVudCkpXG4gICAgICBlbGVtZW50ID0gc2hhZG93Um9vdHMuZ2V0KGVsZW1lbnQpLnNoYWRvd1Jvb3Q7XG4gICAgbGV0IHtbTkVYVF06IG5leHQsIFtFTkRdOiBlbmR9ID0gZWxlbWVudDtcbiAgICB3aGlsZSAobmV4dCAhPT0gZW5kKSB7XG4gICAgICBpZiAobmV4dC5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKVxuICAgICAgICB0cmlnZ2VyRGlzY29ubmVjdGVkKG5leHQpO1xuICAgICAgbmV4dCA9IG5leHRbTkVYVF07XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5XG4gKi9cbmV4cG9ydCBjbGFzcyBDdXN0b21FbGVtZW50UmVnaXN0cnkge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0RvY3VtZW50fSBvd25lckRvY3VtZW50XG4gICAqL1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50KSB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLm93bmVyRG9jdW1lbnQgPSBvd25lckRvY3VtZW50O1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLnJlZ2lzdHJ5ID0gbmV3IE1hcDtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy53YWl0aW5nID0gbmV3IE1hcDtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxOYW1lIHRoZSBjdXN0b20gZWxlbWVudCBkZWZpbml0aW9uIG5hbWVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gQ2xhc3MgdGhlIGN1c3RvbSBlbGVtZW50ICoqQ2xhc3MqKiBkZWZpbml0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0P30gb3B0aW9ucyB0aGUgb3B0aW9uYWwgb2JqZWN0IHdpdGggYW4gYGV4dGVuZHNgIHByb3BlcnR5XG4gICAqL1xuICBkZWZpbmUobG9jYWxOYW1lLCBDbGFzcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qge293bmVyRG9jdW1lbnQsIHJlZ2lzdHJ5LCB3YWl0aW5nfSA9IHRoaXM7XG5cbiAgICBpZiAocmVnaXN0cnkuaGFzKGxvY2FsTmFtZSkpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byByZWRlZmluZSAnICsgbG9jYWxOYW1lKTtcblxuICAgIGlmIChDbGFzc2VzLmhhcyhDbGFzcykpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byByZWRlZmluZSB0aGUgc2FtZSBjbGFzczogJyArIENsYXNzKTtcblxuICAgIHRoaXMuYWN0aXZlID0gKHJlYWN0aXZlID0gdHJ1ZSk7XG5cbiAgICBjb25zdCB7ZXh0ZW5kczogZXh0ZW5kfSA9IG9wdGlvbnM7XG5cbiAgICBDbGFzc2VzLnNldChDbGFzcywge1xuICAgICAgb3duZXJEb2N1bWVudCxcbiAgICAgIG9wdGlvbnM6IHtpczogZXh0ZW5kID8gbG9jYWxOYW1lIDogJyd9LFxuICAgICAgbG9jYWxOYW1lOiBleHRlbmQgfHwgbG9jYWxOYW1lXG4gICAgfSk7XG5cbiAgICBjb25zdCBjaGVjayA9IGV4dGVuZCA/XG4gICAgICBlbGVtZW50ID0+IHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQubG9jYWxOYW1lID09PSBleHRlbmQgJiZcbiAgICAgICAgICAgICAgIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpcycpID09PSBsb2NhbE5hbWU7XG4gICAgICB9IDpcbiAgICAgIGVsZW1lbnQgPT4gZWxlbWVudC5sb2NhbE5hbWUgPT09IGxvY2FsTmFtZTtcbiAgICByZWdpc3RyeS5zZXQobG9jYWxOYW1lLCB7Q2xhc3MsIGNoZWNrfSk7XG4gICAgaWYgKHdhaXRpbmcuaGFzKGxvY2FsTmFtZSkpIHtcbiAgICAgIGZvciAoY29uc3QgcmVzb2x2ZSBvZiB3YWl0aW5nLmdldChsb2NhbE5hbWUpKVxuICAgICAgICByZXNvbHZlKENsYXNzKTtcbiAgICAgIHdhaXRpbmcuZGVsZXRlKGxvY2FsTmFtZSk7XG4gICAgfVxuICAgIG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAgIGV4dGVuZCA/IGAke2V4dGVuZH1baXM9XCIke2xvY2FsTmFtZX1cIl1gIDogbG9jYWxOYW1lXG4gICAgKS5mb3JFYWNoKHRoaXMudXBncmFkZSwgdGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gICAqL1xuICB1cGdyYWRlKGVsZW1lbnQpIHtcbiAgICBpZiAoY3VzdG9tRWxlbWVudHMuaGFzKGVsZW1lbnQpKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHtvd25lckRvY3VtZW50LCByZWdpc3RyeX0gPSB0aGlzO1xuICAgIGNvbnN0IGNlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2lzJykgfHwgZWxlbWVudC5sb2NhbE5hbWU7XG4gICAgaWYgKHJlZ2lzdHJ5LmhhcyhjZSkpIHtcbiAgICAgIGNvbnN0IHtDbGFzcywgY2hlY2t9ID0gcmVnaXN0cnkuZ2V0KGNlKTtcbiAgICAgIGlmIChjaGVjayhlbGVtZW50KSkge1xuICAgICAgICBjb25zdCB7YXR0cmlidXRlcywgaXNDb25uZWN0ZWR9ID0gZWxlbWVudDtcbiAgICAgICAgZm9yIChjb25zdCBhdHRyIG9mIGF0dHJpYnV0ZXMpXG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGVOb2RlKGF0dHIpO1xuXG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IGVudHJpZXMoZWxlbWVudCk7XG4gICAgICAgIGZvciAoY29uc3QgW2tleV0gb2YgdmFsdWVzKVxuICAgICAgICAgIGRlbGV0ZSBlbGVtZW50W2tleV07XG5cbiAgICAgICAgc2V0UHJvdG90eXBlT2YoZWxlbWVudCwgQ2xhc3MucHJvdG90eXBlKTtcbiAgICAgICAgb3duZXJEb2N1bWVudFtVUEdSQURFXSA9IHtlbGVtZW50LCB2YWx1ZXN9O1xuICAgICAgICBuZXcgQ2xhc3Mob3duZXJEb2N1bWVudCwgY2UpO1xuXG4gICAgICAgIGN1c3RvbUVsZW1lbnRzLnNldChlbGVtZW50LCB7Y29ubmVjdGVkOiBpc0Nvbm5lY3RlZH0pO1xuXG4gICAgICAgIGZvciAoY29uc3QgYXR0ciBvZiBhdHRyaWJ1dGVzKVxuICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlTm9kZShhdHRyKTtcblxuICAgICAgICBpZiAoaXNDb25uZWN0ZWQgJiYgZWxlbWVudC5jb25uZWN0ZWRDYWxsYmFjaylcbiAgICAgICAgICBlbGVtZW50LmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbE5hbWUgdGhlIGN1c3RvbSBlbGVtZW50IGRlZmluaXRpb24gbmFtZVxuICAgKi9cbiAgd2hlbkRlZmluZWQobG9jYWxOYW1lKSB7XG4gICAgY29uc3Qge3JlZ2lzdHJ5LCB3YWl0aW5nfSA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgaWYgKHJlZ2lzdHJ5Lmhhcyhsb2NhbE5hbWUpKVxuICAgICAgICByZXNvbHZlKHJlZ2lzdHJ5LmdldChsb2NhbE5hbWUpLkNsYXNzKTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoIXdhaXRpbmcuaGFzKGxvY2FsTmFtZSkpXG4gICAgICAgICAgd2FpdGluZy5zZXQobG9jYWxOYW1lLCBbXSk7XG4gICAgICAgIHdhaXRpbmcuZ2V0KGxvY2FsTmFtZSkucHVzaChyZXNvbHZlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxOYW1lIHRoZSBjdXN0b20gZWxlbWVudCBkZWZpbml0aW9uIG5hbWVcbiAgICogQHJldHVybnMge0Z1bmN0aW9uP30gdGhlIGN1c3RvbSBlbGVtZW50ICoqQ2xhc3MqKiwgaWYgYW55XG4gICAqL1xuICBnZXQobG9jYWxOYW1lKSB7XG4gICAgY29uc3QgaW5mbyA9IHRoaXMucmVnaXN0cnkuZ2V0KGxvY2FsTmFtZSk7XG4gICAgcmV0dXJuIGluZm8gJiYgaW5mby5DbGFzcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBDbGFzcyAqKkNsYXNzKiogb2YgY3VzdG9tIGVsZW1lbnRcbiAgICogQHJldHVybnMge3N0cmluZz99IGZvdW5kIHRhZyBuYW1lIG9yIG51bGxcbiAgICovXG4gIGdldE5hbWUoQ2xhc3MpIHtcbiAgICBpZiAoQ2xhc3Nlcy5oYXMoQ2xhc3MpKSB7XG4gICAgICBjb25zdCB7IGxvY2FsTmFtZSB9ID0gQ2xhc3Nlcy5nZXQoQ2xhc3MpO1xuICAgICAgcmV0dXJuIGxvY2FsTmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIEhUTUxQYXJzZXIyIGZyb20gJ2h0bWxwYXJzZXIyJztcblxuaW1wb3J0IHtFTEVNRU5UX05PREUsIFNWR19OQU1FU1BBQ0V9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7Q1VTVE9NX0VMRU1FTlRTLCBQUkVWLCBFTkQsIFZBTFVFfSBmcm9tICcuL3N5bWJvbHMuanMnO1xuaW1wb3J0IHtrZXlzfSBmcm9tICcuL29iamVjdC5qcyc7XG5cbmltcG9ydCB7a25vd25Cb3VuZGFyaWVzLCBrbm93blNpYmxpbmdzfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7YXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrLCBjb25uZWN0ZWRDYWxsYmFja30gZnJvbSAnLi4vaW50ZXJmYWNlL2N1c3RvbS1lbGVtZW50LXJlZ2lzdHJ5LmpzJztcblxuY29uc3Qge1BhcnNlcn0gPSBIVE1MUGFyc2VyMjtcblxuLy8gaW1wb3J0IHtNaW1lfSBmcm9tICcuL21pbWUuanMnO1xuLy8gY29uc3QgVk9JRF9TT1VSQ0UgPSBNaW1lWyd0ZXh0L2h0bWwnXS52b2lkRWxlbWVudHMuc291cmNlLnNsaWNlKDQsIC0yKTtcbi8vIGNvbnN0IFZPSURfRUxFTUVOVFMgPSBuZXcgUmVnRXhwKGA8KCR7Vk9JRF9TT1VSQ0V9KShbXj5dKj8pPmAsICdnaScpO1xuLy8gY29uc3QgVk9JRF9TQU5JVElaRVIgPSAoXywgJDEsICQyKSA9PiBgPCR7JDF9JHskMn0key9cXC8kLy50ZXN0KCQyKSA/ICcnIDogJyAvJ30+YDtcbi8vIGNvbnN0IHZvaWRTYW5pdGl6ZXIgPSBodG1sID0+IGh0bWwucmVwbGFjZShWT0lEX0VMRU1FTlRTLCBWT0lEX1NBTklUSVpFUik7XG5cbmxldCBub3RQYXJzaW5nID0gdHJ1ZTtcblxuY29uc3QgYXBwZW5kID0gKHNlbGYsIG5vZGUsIGFjdGl2ZSkgPT4ge1xuICBjb25zdCBlbmQgPSBzZWxmW0VORF07XG4gIG5vZGUucGFyZW50Tm9kZSA9IHNlbGY7XG4gIGtub3duQm91bmRhcmllcyhlbmRbUFJFVl0sIG5vZGUsIGVuZCk7XG4gIGlmIChhY3RpdmUgJiYgbm9kZS5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKG5vZGUpO1xuICByZXR1cm4gbm9kZTtcbn07XG5cbmNvbnN0IGF0dHJpYnV0ZSA9IChlbGVtZW50LCBlbmQsIGF0dHJpYnV0ZSwgdmFsdWUsIGFjdGl2ZSkgPT4ge1xuICBhdHRyaWJ1dGVbVkFMVUVdID0gdmFsdWU7XG4gIGF0dHJpYnV0ZS5vd25lckVsZW1lbnQgPSBlbGVtZW50O1xuICBrbm93blNpYmxpbmdzKGVuZFtQUkVWXSwgYXR0cmlidXRlLCBlbmQpO1xuICBpZiAoYXR0cmlidXRlLm5hbWUgPT09ICdjbGFzcycpXG4gICAgZWxlbWVudC5jbGFzc05hbWUgPSB2YWx1ZTtcbiAgaWYgKGFjdGl2ZSlcbiAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soZWxlbWVudCwgYXR0cmlidXRlLm5hbWUsIG51bGwsIHZhbHVlKTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc05vdFBhcnNpbmcgPSAoKSA9PiBub3RQYXJzaW5nO1xuXG5leHBvcnQgY29uc3QgcGFyc2VGcm9tU3RyaW5nID0gKGRvY3VtZW50LCBpc0hUTUwsIG1hcmt1cExhbmd1YWdlKSA9PiB7XG4gIGNvbnN0IHthY3RpdmUsIHJlZ2lzdHJ5fSA9IGRvY3VtZW50W0NVU1RPTV9FTEVNRU5UU107XG5cbiAgbGV0IG5vZGUgPSBkb2N1bWVudDtcbiAgbGV0IG93bmVyU1ZHRWxlbWVudCA9IG51bGw7XG4gIGxldCBwYXJzaW5nQ0RhdGEgPSBmYWxzZTtcblxuICBub3RQYXJzaW5nID0gZmFsc2U7XG5cbiAgY29uc3QgY29udGVudCA9IG5ldyBQYXJzZXIoe1xuICAgIC8vIDwhRE9DVFlQRSAuLi4+XG4gICAgb25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24obmFtZSwgZGF0YSkge1xuICAgICAgaWYgKG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJyFkb2N0eXBlJylcbiAgICAgICAgZG9jdW1lbnQuZG9jdHlwZSA9IGRhdGEuc2xpY2UobmFtZS5sZW5ndGgpLnRyaW0oKTtcbiAgICB9LFxuXG4gICAgLy8gPHRhZ05hbWU+XG4gICAgb25vcGVudGFnKG5hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgICAgIGxldCBjcmVhdGUgPSB0cnVlO1xuICAgICAgaWYgKGlzSFRNTCkge1xuICAgICAgICBpZiAob3duZXJTVkdFbGVtZW50KSB7XG4gICAgICAgICAgbm9kZSA9IGFwcGVuZChub2RlLCBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgbmFtZSksIGFjdGl2ZSk7XG4gICAgICAgICAgbm9kZS5vd25lclNWR0VsZW1lbnQgPSBvd25lclNWR0VsZW1lbnQ7XG4gICAgICAgICAgY3JlYXRlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmFtZSA9PT0gJ3N2ZycgfHwgbmFtZSA9PT0gJ1NWRycpIHtcbiAgICAgICAgICBvd25lclNWR0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgbmFtZSk7XG4gICAgICAgICAgbm9kZSA9IGFwcGVuZChub2RlLCBvd25lclNWR0VsZW1lbnQsIGFjdGl2ZSk7XG4gICAgICAgICAgY3JlYXRlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWN0aXZlKSB7XG4gICAgICAgICAgY29uc3QgY2UgPSBuYW1lLmluY2x1ZGVzKCctJykgPyBuYW1lIDogKGF0dHJpYnV0ZXMuaXMgfHwgJycpO1xuICAgICAgICAgIGlmIChjZSAmJiByZWdpc3RyeS5oYXMoY2UpKSB7XG4gICAgICAgICAgICBjb25zdCB7Q2xhc3N9ID0gcmVnaXN0cnkuZ2V0KGNlKTtcbiAgICAgICAgICAgIG5vZGUgPSBhcHBlbmQobm9kZSwgbmV3IENsYXNzLCBhY3RpdmUpO1xuICAgICAgICAgICAgZGVsZXRlIGF0dHJpYnV0ZXMuaXM7XG4gICAgICAgICAgICBjcmVhdGUgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNyZWF0ZSlcbiAgICAgICAgbm9kZSA9IGFwcGVuZChub2RlLCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpLCBmYWxzZSk7XG5cbiAgICAgIGxldCBlbmQgPSBub2RlW0VORF07XG4gICAgICBmb3IgKGNvbnN0IG5hbWUgb2Yga2V5cyhhdHRyaWJ1dGVzKSlcbiAgICAgICAgYXR0cmlidXRlKG5vZGUsIGVuZCwgZG9jdW1lbnQuY3JlYXRlQXR0cmlidXRlKG5hbWUpLCBhdHRyaWJ1dGVzW25hbWVdLCBhY3RpdmUpO1xuICAgIH0sXG5cbiAgICAvLyAjdGV4dCwgI2NvbW1lbnRcbiAgICBvbmNvbW1lbnQoZGF0YSkgeyBhcHBlbmQobm9kZSwgZG9jdW1lbnQuY3JlYXRlQ29tbWVudChkYXRhKSwgYWN0aXZlKTsgfSxcbiAgICBvbnRleHQodGV4dCkge1xuICAgICAgaWYgKHBhcnNpbmdDRGF0YSkge1xuICAgICAgICBhcHBlbmQobm9kZSwgZG9jdW1lbnQuY3JlYXRlQ0RBVEFTZWN0aW9uKHRleHQpLCBhY3RpdmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwZW5kKG5vZGUsIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpLCBhY3RpdmUpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyAjY2RhdGFcbiAgICBvbmNkYXRhc3RhcnQoKSB7IHBhcnNpbmdDRGF0YSA9IHRydWU7IH0sXG4gICAgb25jZGF0YWVuZCgpIHsgcGFyc2luZ0NEYXRhID0gZmFsc2U7IH0sXG5cbiAgICAvLyA8L3RhZ05hbWU+XG4gICAgb25jbG9zZXRhZygpIHtcbiAgICAgIGlmIChpc0hUTUwgJiYgbm9kZSA9PT0gb3duZXJTVkdFbGVtZW50KVxuICAgICAgICBvd25lclNWR0VsZW1lbnQgPSBudWxsO1xuICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG4gIH0sIHtcbiAgICBsb3dlckNhc2VBdHRyaWJ1dGVOYW1lczogZmFsc2UsXG4gICAgZGVjb2RlRW50aXRpZXM6IHRydWUsXG4gICAgeG1sTW9kZTogIWlzSFRNTFxuICB9KTtcblxuICBjb250ZW50LndyaXRlKG1hcmt1cExhbmd1YWdlKTtcbiAgY29udGVudC5lbmQoKTtcblxuICBub3RQYXJzaW5nID0gdHJ1ZTtcblxuICByZXR1cm4gZG9jdW1lbnQ7XG59O1xuIiwiZXhwb3J0IGNvbnN0IGh0bWxDbGFzc2VzID0gbmV3IE1hcDtcblxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVySFRNTENsYXNzID0gKG5hbWVzLCBDbGFzcykgPT4ge1xuICBmb3IgKGNvbnN0IG5hbWUgb2YgW10uY29uY2F0KG5hbWVzKSkge1xuICAgIGh0bWxDbGFzc2VzLnNldChuYW1lLCBDbGFzcyk7XG4gICAgaHRtbENsYXNzZXMuc2V0KG5hbWUudG9VcHBlckNhc2UoKSwgQ2xhc3MpO1xuICB9XG59O1xuIiwiaW1wb3J0IHtcbiAgTk9ERV9FTkQsXG4gIEFUVFJJQlVURV9OT0RFLFxuICBDREFUQV9TRUNUSU9OX05PREUsXG4gIENPTU1FTlRfTk9ERSxcbiAgRE9DVU1FTlRfVFlQRV9OT0RFLFxuICBFTEVNRU5UX05PREUsXG4gIFRFWFRfTk9ERVxufSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5cbmltcG9ydCB7RU5ELCBORVhULCBWQUxVRX0gZnJvbSAnLi9zeW1ib2xzLmpzJztcblxuaW1wb3J0IHtnZXRFbmR9IGZyb20gJy4vdXRpbHMuanMnO1xuXG5jb25zdCBsb29wU2VnbWVudCA9ICh7W05FWFRdOiBuZXh0LCBbRU5EXTogZW5kfSwganNvbikgPT4ge1xuICB3aGlsZSAobmV4dCAhPT0gZW5kKSB7XG4gICAgc3dpdGNoIChuZXh0Lm5vZGVUeXBlKSB7XG4gICAgICBjYXNlIEFUVFJJQlVURV9OT0RFOlxuICAgICAgICBhdHRyQXNKU09OKG5leHQsIGpzb24pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVEVYVF9OT0RFOlxuICAgICAgY2FzZSBDT01NRU5UX05PREU6XG4gICAgICBjYXNlIENEQVRBX1NFQ1RJT05fTk9ERTpcbiAgICAgICAgY2hhcmFjdGVyRGF0YUFzSlNPTihuZXh0LCBqc29uKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEVMRU1FTlRfTk9ERTpcbiAgICAgICAgZWxlbWVudEFzSlNPTihuZXh0LCBqc29uKTtcbiAgICAgICAgbmV4dCA9IGdldEVuZChuZXh0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERPQ1VNRU5UX1RZUEVfTk9ERTpcbiAgICAgICAgZG9jdW1lbnRUeXBlQXNKU09OKG5leHQsIGpzb24pO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgbmV4dCA9IG5leHRbTkVYVF07XG4gIH1cbiAgY29uc3QgbGFzdCA9IGpzb24ubGVuZ3RoIC0gMTtcbiAgY29uc3QgdmFsdWUgPSBqc29uW2xhc3RdO1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSA8IDApXG4gICAganNvbltsYXN0XSArPSBOT0RFX0VORDtcbiAgZWxzZVxuICAgIGpzb24ucHVzaChOT0RFX0VORCk7XG59O1xuXG5leHBvcnQgY29uc3QgYXR0ckFzSlNPTiA9IChhdHRyLCBqc29uKSA9PiB7XG4gIGpzb24ucHVzaChBVFRSSUJVVEVfTk9ERSwgYXR0ci5uYW1lKTtcbiAgY29uc3QgdmFsdWUgPSBhdHRyW1ZBTFVFXS50cmltKCk7XG4gIGlmICh2YWx1ZSlcbiAgICBqc29uLnB1c2godmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGNoYXJhY3RlckRhdGFBc0pTT04gPSAobm9kZSwganNvbikgPT4ge1xuICBjb25zdCB2YWx1ZSA9IG5vZGVbVkFMVUVdO1xuICBpZiAodmFsdWUudHJpbSgpKVxuICAgIGpzb24ucHVzaChub2RlLm5vZGVUeXBlLCB2YWx1ZSk7XG59O1xuXG5leHBvcnQgY29uc3Qgbm9uRWxlbWVudEFzSlNPTiA9IChub2RlLCBqc29uKSA9PiB7XG4gIGpzb24ucHVzaChub2RlLm5vZGVUeXBlKTtcbiAgbG9vcFNlZ21lbnQobm9kZSwganNvbik7XG59O1xuXG5leHBvcnQgY29uc3QgZG9jdW1lbnRUeXBlQXNKU09OID0gKHtuYW1lLCBwdWJsaWNJZCwgc3lzdGVtSWR9LCBqc29uKSA9PiB7XG4gIGpzb24ucHVzaChET0NVTUVOVF9UWVBFX05PREUsIG5hbWUpO1xuICBpZiAocHVibGljSWQpXG4gICAganNvbi5wdXNoKHB1YmxpY0lkKTtcbiAgaWYgKHN5c3RlbUlkKVxuICAgIGpzb24ucHVzaChzeXN0ZW1JZCk7XG59O1xuXG5leHBvcnQgY29uc3QgZWxlbWVudEFzSlNPTiA9IChlbGVtZW50LCBqc29uKSA9PiB7XG4gIGpzb24ucHVzaChFTEVNRU5UX05PREUsIGVsZW1lbnQubG9jYWxOYW1lKTtcbiAgbG9vcFNlZ21lbnQoZWxlbWVudCwganNvbik7XG59O1xuIiwiaW1wb3J0IHtNVVRBVElPTl9PQlNFUlZFUn0gZnJvbSAnLi4vc2hhcmVkL3N5bWJvbHMuanMnO1xuXG5jb25zdCBjcmVhdGVSZWNvcmQgPVxuICAodHlwZSwgdGFyZ2V0LCBlbGVtZW50LCBhZGRlZE5vZGVzLCByZW1vdmVkTm9kZXMsIGF0dHJpYnV0ZU5hbWUsIG9sZFZhbHVlKSA9PlxuICh7XG4gIHR5cGUsXG4gIHRhcmdldCxcbiAgYWRkZWROb2RlcyxcbiAgcmVtb3ZlZE5vZGVzLFxuICBhdHRyaWJ1dGVOYW1lLFxuICBvbGRWYWx1ZSxcbiAgcHJldmlvdXNTaWJsaW5nOiBlbGVtZW50Py5wcmV2aW91c1NpYmxpbmcgfHwgbnVsbCxcbiAgbmV4dFNpYmxpbmc6IGVsZW1lbnQ/Lm5leHRTaWJsaW5nIHx8IG51bGwsXG59KTtcblxuY29uc3QgcXVldWVBdHRyaWJ1dGUgPSAoXG4gIG9ic2VydmVyLCB0YXJnZXQsIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZUZpbHRlciwgYXR0cmlidXRlT2xkVmFsdWUsIG9sZFZhbHVlXG4pID0+IHtcbiAgaWYgKCghYXR0cmlidXRlRmlsdGVyIHx8IGF0dHJpYnV0ZUZpbHRlci5pbmNsdWRlcyhhdHRyaWJ1dGVOYW1lKSkpIHtcbiAgICBjb25zdCB7Y2FsbGJhY2ssIHJlY29yZHMsIHNjaGVkdWxlZH0gPSBvYnNlcnZlcjtcbiAgICByZWNvcmRzLnB1c2goY3JlYXRlUmVjb3JkKFxuICAgICAgJ2F0dHJpYnV0ZXMnLCB0YXJnZXQsIG51bGwsXG4gICAgICBbXSwgW10sXG4gICAgICBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVPbGRWYWx1ZSA/IG9sZFZhbHVlIDogdm9pZCAwXG4gICAgKSk7XG4gICAgaWYgKCFzY2hlZHVsZWQpIHtcbiAgICAgIG9ic2VydmVyLnNjaGVkdWxlZCA9IHRydWU7XG4gICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIuc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgIGNhbGxiYWNrKHJlY29yZHMuc3BsaWNlKDApLCBvYnNlcnZlcik7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sgPSAoZWxlbWVudCwgYXR0cmlidXRlTmFtZSwgb2xkVmFsdWUpID0+IHtcbiAgY29uc3Qge293bmVyRG9jdW1lbnR9ID0gZWxlbWVudDtcbiAgY29uc3Qge2FjdGl2ZSwgb2JzZXJ2ZXJzfSA9IG93bmVyRG9jdW1lbnRbTVVUQVRJT05fT0JTRVJWRVJdO1xuICBpZiAoYWN0aXZlKSB7XG4gICAgZm9yIChjb25zdCBvYnNlcnZlciBvZiBvYnNlcnZlcnMpIHtcbiAgICAgIGZvciAoY29uc3QgW1xuICAgICAgICB0YXJnZXQsXG4gICAgICAgIHtcbiAgICAgICAgICBjaGlsZExpc3QsXG4gICAgICAgICAgc3VidHJlZSxcbiAgICAgICAgICBhdHRyaWJ1dGVzLFxuICAgICAgICAgIGF0dHJpYnV0ZUZpbHRlcixcbiAgICAgICAgICBhdHRyaWJ1dGVPbGRWYWx1ZVxuICAgICAgICB9XG4gICAgICBdIG9mIG9ic2VydmVyLm5vZGVzKSB7XG4gICAgICAgIGlmIChjaGlsZExpc3QpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAoc3VidHJlZSAmJiAodGFyZ2V0ID09PSBvd25lckRvY3VtZW50IHx8IHRhcmdldC5jb250YWlucyhlbGVtZW50KSkpIHx8XG4gICAgICAgICAgICAoIXN1YnRyZWUgJiYgdGFyZ2V0LmNoaWxkcmVuLmluY2x1ZGVzKGVsZW1lbnQpKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcXVldWVBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgIG9ic2VydmVyLCBlbGVtZW50LFxuICAgICAgICAgICAgICBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVGaWx0ZXIsIGF0dHJpYnV0ZU9sZFZhbHVlLCBvbGRWYWx1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgICBhdHRyaWJ1dGVzICYmXG4gICAgICAgICAgdGFyZ2V0ID09PSBlbGVtZW50XG4gICAgICAgICkge1xuICAgICAgICAgIHF1ZXVlQXR0cmlidXRlKFxuICAgICAgICAgICAgb2JzZXJ2ZXIsIGVsZW1lbnQsXG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVGaWx0ZXIsIGF0dHJpYnV0ZU9sZFZhbHVlLCBvbGRWYWx1ZVxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBtb0NhbGxiYWNrID0gKGVsZW1lbnQsIHBhcmVudE5vZGUpID0+IHtcbiAgY29uc3Qge293bmVyRG9jdW1lbnR9ID0gZWxlbWVudDtcbiAgY29uc3Qge2FjdGl2ZSwgb2JzZXJ2ZXJzfSA9IG93bmVyRG9jdW1lbnRbTVVUQVRJT05fT0JTRVJWRVJdO1xuICBpZiAoYWN0aXZlKSB7XG4gICAgZm9yIChjb25zdCBvYnNlcnZlciBvZiBvYnNlcnZlcnMpIHtcbiAgICAgIGZvciAoY29uc3QgW3RhcmdldCwge3N1YnRyZWUsIGNoaWxkTGlzdCwgY2hhcmFjdGVyRGF0YX1dIG9mIG9ic2VydmVyLm5vZGVzKSB7XG4gICAgICAgIGlmIChjaGlsZExpc3QpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAocGFyZW50Tm9kZSAmJiAodGFyZ2V0ID09PSBwYXJlbnROb2RlIHx8IC8qIGM4IGlnbm9yZSBuZXh0ICovKHN1YnRyZWUgJiYgdGFyZ2V0LmNvbnRhaW5zKHBhcmVudE5vZGUpKSkpIHx8XG4gICAgICAgICAgICAoIXBhcmVudE5vZGUgJiYgKChzdWJ0cmVlICYmICh0YXJnZXQgPT09IG93bmVyRG9jdW1lbnQgfHwgLyogYzggaWdub3JlIG5leHQgKi90YXJnZXQuY29udGFpbnMoZWxlbWVudCkpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICghc3VidHJlZSAmJiB0YXJnZXRbY2hhcmFjdGVyRGF0YSA/ICdjaGlsZE5vZGVzJyA6ICdjaGlsZHJlbiddLmluY2x1ZGVzKGVsZW1lbnQpKSkpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zdCB7Y2FsbGJhY2ssIHJlY29yZHMsIHNjaGVkdWxlZH0gPSBvYnNlcnZlcjtcbiAgICAgICAgICAgIHJlY29yZHMucHVzaChjcmVhdGVSZWNvcmQoXG4gICAgICAgICAgICAgICdjaGlsZExpc3QnLCB0YXJnZXQsIGVsZW1lbnQsXG4gICAgICAgICAgICAgIHBhcmVudE5vZGUgPyBbXSA6IFtlbGVtZW50XSwgcGFyZW50Tm9kZSA/IFtlbGVtZW50XSA6IFtdXG4gICAgICAgICAgICApKTtcbiAgICAgICAgICAgIGlmICghc2NoZWR1bGVkKSB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLnNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLnNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlY29yZHMuc3BsaWNlKDApLCBvYnNlcnZlcik7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgY2xhc3MgTXV0YXRpb25PYnNlcnZlckNsYXNzIHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCkge1xuICAgIGNvbnN0IG9ic2VydmVycyA9IG5ldyBTZXQ7XG4gICAgdGhpcy5vYnNlcnZlcnMgPSBvYnNlcnZlcnM7XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuTXV0YXRpb25PYnNlcnZlclxuICAgICAqL1xuICAgIHRoaXMuY2xhc3MgPSBjbGFzcyBNdXRhdGlvbk9ic2VydmVyIHtcblxuICAgICAgY29uc3RydWN0b3IoY2FsbGJhY2spIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5vZGVzID0gbmV3IE1hcDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVjb3JkcyA9IFtdO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgZGlzY29ubmVjdCgpIHtcbiAgICAgICAgdGhpcy5yZWNvcmRzLnNwbGljZSgwKTtcbiAgICAgICAgdGhpcy5ub2Rlcy5jbGVhcigpO1xuICAgICAgICBvYnNlcnZlcnMuZGVsZXRlKHRoaXMpO1xuICAgICAgICBvd25lckRvY3VtZW50W01VVEFUSU9OX09CU0VSVkVSXS5hY3RpdmUgPSAhIW9ic2VydmVycy5zaXplO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0XG4gICAgICAgKiBAcGFyYW0ge011dGF0aW9uT2JzZXJ2ZXJJbml0fSBvcHRpb25zXG4gICAgICAgKi9cbiAgICAgIG9ic2VydmUodGFyZ2V0LCBvcHRpb25zID0ge1xuICAgICAgICBzdWJ0cmVlOiBmYWxzZSxcbiAgICAgICAgY2hpbGRMaXN0OiBmYWxzZSxcbiAgICAgICAgYXR0cmlidXRlczogZmFsc2UsXG4gICAgICAgIGF0dHJpYnV0ZUZpbHRlcjogbnVsbCxcbiAgICAgICAgYXR0cmlidXRlT2xkVmFsdWU6IGZhbHNlLFxuICAgICAgICBjaGFyYWN0ZXJEYXRhOiBmYWxzZSxcbiAgICAgICAgLy8gVE9ETzogbm90IGltcGxlbWVudGVkIHlldFxuICAgICAgICAvLyBjaGFyYWN0ZXJEYXRhT2xkVmFsdWU6IGZhbHNlXG4gICAgICB9KSB7XG4gICAgICAgIGlmICgoJ2F0dHJpYnV0ZU9sZFZhbHVlJyBpbiBvcHRpb25zKSB8fCAoJ2F0dHJpYnV0ZUZpbHRlcicgaW4gb3B0aW9ucykpXG4gICAgICAgICAgb3B0aW9ucy5hdHRyaWJ1dGVzID0gdHJ1ZTtcbiAgICAgICAgLy8gaWYgKCdjaGFyYWN0ZXJEYXRhT2xkVmFsdWUnIGluIG9wdGlvbnMpXG4gICAgICAgIC8vICAgb3B0aW9ucy5jaGFyYWN0ZXJEYXRhID0gdHJ1ZTtcbiAgICAgICAgb3B0aW9ucy5jaGlsZExpc3QgPSAhIW9wdGlvbnMuY2hpbGRMaXN0O1xuICAgICAgICBvcHRpb25zLnN1YnRyZWUgPSAhIW9wdGlvbnMuc3VidHJlZTtcbiAgICAgICAgdGhpcy5ub2Rlcy5zZXQodGFyZ2V0LCBvcHRpb25zKTtcbiAgICAgICAgb2JzZXJ2ZXJzLmFkZCh0aGlzKTtcbiAgICAgICAgb3duZXJEb2N1bWVudFtNVVRBVElPTl9PQlNFUlZFUl0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBAcmV0dXJucyB7TXV0YXRpb25SZWNvcmRbXX1cbiAgICAgICAqL1xuICAgICAgdGFrZVJlY29yZHMoKSB7IHJldHVybiB0aGlzLnJlY29yZHMuc3BsaWNlKDApOyB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge0NMQVNTX0xJU1QsIE5FWFQsIFBSRVYsIFZBTFVFfSBmcm9tICcuL3N5bWJvbHMuanMnO1xuXG5pbXBvcnQge2tub3duQWRqYWNlbnQsIGtub3duU2libGluZ3N9IGZyb20gJy4vdXRpbHMuanMnO1xuXG5pbXBvcnQge2F0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayBhcyBjZUF0dHJpYnV0ZXN9IGZyb20gJy4uL2ludGVyZmFjZS9jdXN0b20tZWxlbWVudC1yZWdpc3RyeS5qcyc7XG5pbXBvcnQge2F0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayBhcyBtb0F0dHJpYnV0ZXN9IGZyb20gJy4uL2ludGVyZmFjZS9tdXRhdGlvbi1vYnNlcnZlci5qcyc7XG5cbmV4cG9ydCBjb25zdCBlbXB0eUF0dHJpYnV0ZXMgPSBuZXcgU2V0KFtcbiAgJ2FsbG93ZnVsbHNjcmVlbicsXG4gICdhbGxvd3BheW1lbnRyZXF1ZXN0JyxcbiAgJ2FzeW5jJyxcbiAgJ2F1dG9mb2N1cycsXG4gICdhdXRvcGxheScsXG4gICdjaGVja2VkJyxcbiAgJ2NsYXNzJyxcbiAgJ2NvbnRlbnRlZGl0YWJsZScsXG4gICdjb250cm9scycsXG4gICdkZWZhdWx0JyxcbiAgJ2RlZmVyJyxcbiAgJ2Rpc2FibGVkJyxcbiAgJ2RyYWdnYWJsZScsXG4gICdmb3Jtbm92YWxpZGF0ZScsXG4gICdoaWRkZW4nLFxuICAnaWQnLFxuICAnaXNtYXAnLFxuICAnaXRlbXNjb3BlJyxcbiAgJ2xvb3AnLFxuICAnbXVsdGlwbGUnLFxuICAnbXV0ZWQnLFxuICAnbm9tb2R1bGUnLFxuICAnbm92YWxpZGF0ZScsXG4gICdvcGVuJyxcbiAgJ3BsYXlzaW5saW5lJyxcbiAgJ3JlYWRvbmx5JyxcbiAgJ3JlcXVpcmVkJyxcbiAgJ3JldmVyc2VkJyxcbiAgJ3NlbGVjdGVkJyxcbiAgJ3N0eWxlJyxcbiAgJ3RydWVzcGVlZCdcbl0pO1xuXG5leHBvcnQgY29uc3Qgc2V0QXR0cmlidXRlID0gKGVsZW1lbnQsIGF0dHJpYnV0ZSkgPT4ge1xuICBjb25zdCB7W1ZBTFVFXTogdmFsdWUsIG5hbWV9ID0gYXR0cmlidXRlO1xuICBhdHRyaWJ1dGUub3duZXJFbGVtZW50ID0gZWxlbWVudDtcbiAga25vd25TaWJsaW5ncyhlbGVtZW50LCBhdHRyaWJ1dGUsIGVsZW1lbnRbTkVYVF0pO1xuICBpZiAobmFtZSA9PT0gJ2NsYXNzJylcbiAgICBlbGVtZW50LmNsYXNzTmFtZSA9IHZhbHVlO1xuICBtb0F0dHJpYnV0ZXMoZWxlbWVudCwgbmFtZSwgbnVsbCk7XG4gIGNlQXR0cmlidXRlcyhlbGVtZW50LCBuYW1lLCBudWxsLCB2YWx1ZSk7XG59O1xuXG5leHBvcnQgY29uc3QgcmVtb3ZlQXR0cmlidXRlID0gKGVsZW1lbnQsIGF0dHJpYnV0ZSkgPT4ge1xuICBjb25zdCB7W1ZBTFVFXTogdmFsdWUsIG5hbWV9ID0gYXR0cmlidXRlO1xuICBrbm93bkFkamFjZW50KGF0dHJpYnV0ZVtQUkVWXSwgYXR0cmlidXRlW05FWFRdKTtcbiAgYXR0cmlidXRlLm93bmVyRWxlbWVudCA9IGF0dHJpYnV0ZVtQUkVWXSA9IGF0dHJpYnV0ZVtORVhUXSA9IG51bGw7XG4gIGlmIChuYW1lID09PSAnY2xhc3MnKVxuICAgIGVsZW1lbnRbQ0xBU1NfTElTVF0gPSBudWxsO1xuICBtb0F0dHJpYnV0ZXMoZWxlbWVudCwgbmFtZSwgdmFsdWUpO1xuICBjZUF0dHJpYnV0ZXMoZWxlbWVudCwgbmFtZSwgdmFsdWUsIG51bGwpO1xufTtcblxuZXhwb3J0IGNvbnN0IGJvb2xlYW5BdHRyaWJ1dGUgPSB7XG4gIGdldChlbGVtZW50LCBuYW1lKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuaGFzQXR0cmlidXRlKG5hbWUpO1xuICB9LFxuICBzZXQoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUpXG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCAnJyk7XG4gICAgZWxzZVxuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBudW1lcmljQXR0cmlidXRlID0ge1xuICBnZXQoZWxlbWVudCwgbmFtZSkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpIHx8IDApO1xuICB9LFxuICBzZXQoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBzdHJpbmdBdHRyaWJ1dGUgPSB7XG4gIGdldChlbGVtZW50LCBuYW1lKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpIHx8ICcnO1xuICB9LFxuICBzZXQoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8qIG9kZGx5IGVub3VnaCwgdGhpcyBhcHBhcmVudGx5IGlzIG5vdCBhIHRoaW5nXG5leHBvcnQgY29uc3QgbnVsbGFibGVBdHRyaWJ1dGUgPSB7XG4gIGdldChlbGVtZW50LCBuYW1lKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICB9LFxuICBzZXQoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpXG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBlbHNlXG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH1cbn07XG4qL1xuIiwiLy8gaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNpbnRlcmZhY2UtZXZlbnR0YXJnZXRcblxuY29uc3Qgd20gPSBuZXcgV2Vha01hcCgpO1xuXG5mdW5jdGlvbiBkaXNwYXRjaChldmVudCwgbGlzdGVuZXIpIHtcbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICBsaXN0ZW5lci5jYWxsKGV2ZW50LnRhcmdldCwgZXZlbnQpO1xuICBlbHNlXG4gICAgbGlzdGVuZXIuaGFuZGxlRXZlbnQoZXZlbnQpO1xuICByZXR1cm4gZXZlbnQuX3N0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbkZsYWc7XG59XG5cbmZ1bmN0aW9uIGludm9rZUxpc3RlbmVycyh7Y3VycmVudFRhcmdldCwgdGFyZ2V0fSkge1xuICBjb25zdCBtYXAgPSB3bS5nZXQoY3VycmVudFRhcmdldCk7XG4gIGlmIChtYXAgJiYgbWFwLmhhcyh0aGlzLnR5cGUpKSB7XG4gICAgY29uc3QgbGlzdGVuZXJzID0gbWFwLmdldCh0aGlzLnR5cGUpO1xuICAgIGlmIChjdXJyZW50VGFyZ2V0ID09PSB0YXJnZXQpIHtcbiAgICAgIHRoaXMuZXZlbnRQaGFzZSA9IHRoaXMuQVRfVEFSR0VUO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmV2ZW50UGhhc2UgPSB0aGlzLkJVQkJMSU5HX1BIQVNFO1xuICAgIH1cblxuICAgIHRoaXMuY3VycmVudFRhcmdldCA9IGN1cnJlbnRUYXJnZXQ7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgZm9yIChjb25zdCBbbGlzdGVuZXIsIG9wdGlvbnNdIG9mIGxpc3RlbmVycykge1xuICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5vbmNlKVxuICAgICAgICBsaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcbiAgICAgIGlmIChkaXNwYXRjaCh0aGlzLCBsaXN0ZW5lcikpXG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBkZWxldGUgdGhpcy5jdXJyZW50VGFyZ2V0O1xuICAgIGRlbGV0ZSB0aGlzLnRhcmdldDtcbiAgICByZXR1cm4gdGhpcy5jYW5jZWxCdWJibGU7XG4gIH1cbn1cblxuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuRXZlbnRUYXJnZXRcbiAqL1xuY2xhc3MgRE9NRXZlbnRUYXJnZXQge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHdtLnNldCh0aGlzLCBuZXcgTWFwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfZ2V0UGFyZW50KCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucykge1xuICAgIGNvbnN0IG1hcCA9IHdtLmdldCh0aGlzKTtcbiAgICBpZiAoIW1hcC5oYXModHlwZSkpIFxuICAgICAgbWFwLnNldCh0eXBlLCBuZXcgTWFwKTtcbiAgICBtYXAuZ2V0KHR5cGUpLnNldChsaXN0ZW5lciwgb3B0aW9ucyk7XG4gIH1cblxuICByZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgY29uc3QgbWFwID0gd20uZ2V0KHRoaXMpO1xuICAgIGlmIChtYXAuaGFzKHR5cGUpKSB7XG4gICAgICBjb25zdCBsaXN0ZW5lcnMgPSBtYXAuZ2V0KHR5cGUpO1xuICAgICAgaWYgKGxpc3RlbmVycy5kZWxldGUobGlzdGVuZXIpICYmICFsaXN0ZW5lcnMuc2l6ZSlcbiAgICAgICAgbWFwLmRlbGV0ZSh0eXBlKTtcbiAgICB9XG4gIH1cblxuICBkaXNwYXRjaEV2ZW50KGV2ZW50KSB7XG4gICAgbGV0IG5vZGUgPSB0aGlzO1xuICAgIGV2ZW50LmV2ZW50UGhhc2UgPSBldmVudC5DQVBUVVJJTkdfUEhBU0U7XG5cbiAgICAvLyBpbnRlbnRpb25hbGx5IHNpbXBsaWZpZWQsIHNwZWNzIGltcGx5IHdheSBtb3JlIGNvZGU6IGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZXZlbnQtcGF0aFxuICAgIHdoaWxlIChub2RlKSB7XG4gICAgICBpZiAobm9kZS5kaXNwYXRjaEV2ZW50KVxuICAgICAgICBldmVudC5fcGF0aC5wdXNoKHtjdXJyZW50VGFyZ2V0OiBub2RlLCB0YXJnZXQ6IHRoaXN9KTtcbiAgICAgIG5vZGUgPSBldmVudC5idWJibGVzICYmIG5vZGUuX2dldFBhcmVudCAmJiBub2RlLl9nZXRQYXJlbnQoKTtcbiAgICB9XG4gICAgZXZlbnQuX3BhdGguc29tZShpbnZva2VMaXN0ZW5lcnMsIGV2ZW50KTtcbiAgICBldmVudC5fcGF0aCA9IFtdO1xuICAgIGV2ZW50LmV2ZW50UGhhc2UgPSBldmVudC5OT05FO1xuICAgIHJldHVybiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZDtcbiAgfVxuXG59XG5cbmV4cG9ydCB7RE9NRXZlbnRUYXJnZXQgYXMgRXZlbnRUYXJnZXR9O1xuIiwiLy8gaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNpbnRlcmZhY2Utbm9kZWxpc3RcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLk5vZGVMaXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBOb2RlTGlzdCBleHRlbmRzIEFycmF5IHtcbiAgaXRlbShpKSB7IHJldHVybiBpIDwgdGhpcy5sZW5ndGggPyB0aGlzW2ldIDogbnVsbDsgfVxufVxuIiwiLy8gaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNub2RlXG5cbmltcG9ydCB7XG4gIEVMRU1FTlRfTk9ERSxcbiAgQVRUUklCVVRFX05PREUsXG4gIFRFWFRfTk9ERSxcbiAgQ0RBVEFfU0VDVElPTl9OT0RFLFxuICBDT01NRU5UX05PREUsXG4gIERPQ1VNRU5UX05PREUsXG4gIERPQ1VNRU5UX0ZSQUdNRU5UX05PREUsXG4gIERPQ1VNRU5UX1RZUEVfTk9ERSxcbiAgRE9DVU1FTlRfUE9TSVRJT05fRElTQ09OTkVDVEVELFxuICBET0NVTUVOVF9QT1NJVElPTl9QUkVDRURJTkcsXG4gIERPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyxcbiAgRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTlMsXG4gIERPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5FRF9CWSxcbiAgRE9DVU1FTlRfUE9TSVRJT05fSU1QTEVNRU5UQVRJT05fU1BFQ0lGSUNcbn0gZnJvbSAnLi4vc2hhcmVkL2NvbnN0YW50cy5qcyc7XG5cbmltcG9ydCB7TkVYVCwgUFJFVn0gZnJvbSAnLi4vc2hhcmVkL3N5bWJvbHMuanMnO1xuXG5pbXBvcnQge0V2ZW50VGFyZ2V0fSBmcm9tICcuL2V2ZW50LXRhcmdldC5qcyc7XG5cbmltcG9ydCB7Tm9kZUxpc3R9IGZyb20gJy4vbm9kZS1saXN0LmpzJztcblxuY29uc3QgZ2V0UGFyZW50Tm9kZUNvdW50ID0gKHtwYXJlbnROb2RlfSkgPT4ge1xuICBsZXQgY291bnQgPSAwO1xuICB3aGlsZSAocGFyZW50Tm9kZSkge1xuICAgIGNvdW50Kys7XG4gICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4gY291bnQ7XG59O1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuTm9kZVxuICovXG5leHBvcnQgY2xhc3MgTm9kZSBleHRlbmRzIEV2ZW50VGFyZ2V0IHtcblxuICBzdGF0aWMgZ2V0IEVMRU1FTlRfTk9ERSgpIHsgcmV0dXJuIEVMRU1FTlRfTk9ERTsgfVxuICBzdGF0aWMgZ2V0IEFUVFJJQlVURV9OT0RFKCkgeyByZXR1cm4gQVRUUklCVVRFX05PREU7IH1cbiAgc3RhdGljIGdldCBURVhUX05PREUoKSB7IHJldHVybiBURVhUX05PREU7IH1cbiAgc3RhdGljIGdldCBDREFUQV9TRUNUSU9OX05PREUoKSB7IHJldHVybiBDREFUQV9TRUNUSU9OX05PREU7IH1cbiAgc3RhdGljIGdldCBDT01NRU5UX05PREUoKSB7IHJldHVybiBDT01NRU5UX05PREU7IH1cbiAgc3RhdGljIGdldCBET0NVTUVOVF9OT0RFKCkgeyByZXR1cm4gRE9DVU1FTlRfTk9ERTsgfVxuICBzdGF0aWMgZ2V0IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUoKSB7IHJldHVybiBET0NVTUVOVF9GUkFHTUVOVF9OT0RFOyB9XG4gIHN0YXRpYyBnZXQgRE9DVU1FTlRfVFlQRV9OT0RFKCkgeyByZXR1cm4gRE9DVU1FTlRfVFlQRV9OT0RFOyB9XG5cbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lLCBub2RlVHlwZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5vd25lckRvY3VtZW50ID0gb3duZXJEb2N1bWVudDtcbiAgICB0aGlzLmxvY2FsTmFtZSA9IGxvY2FsTmFtZTtcbiAgICB0aGlzLm5vZGVUeXBlID0gbm9kZVR5cGU7XG4gICAgdGhpcy5wYXJlbnROb2RlID0gbnVsbDtcbiAgICB0aGlzW05FWFRdID0gbnVsbDtcbiAgICB0aGlzW1BSRVZdID0gbnVsbDtcbiAgfVxuXG4gIGdldCBFTEVNRU5UX05PREUoKSB7IHJldHVybiBFTEVNRU5UX05PREU7IH1cbiAgZ2V0IEFUVFJJQlVURV9OT0RFKCkgeyByZXR1cm4gQVRUUklCVVRFX05PREU7IH1cbiAgZ2V0IFRFWFRfTk9ERSgpIHsgcmV0dXJuIFRFWFRfTk9ERTsgfVxuICBnZXQgQ0RBVEFfU0VDVElPTl9OT0RFKCkgeyByZXR1cm4gQ0RBVEFfU0VDVElPTl9OT0RFOyB9XG4gIGdldCBDT01NRU5UX05PREUoKSB7IHJldHVybiBDT01NRU5UX05PREU7IH1cbiAgZ2V0IERPQ1VNRU5UX05PREUoKSB7IHJldHVybiBET0NVTUVOVF9OT0RFOyB9XG4gIGdldCBET0NVTUVOVF9GUkFHTUVOVF9OT0RFKCkgeyByZXR1cm4gRE9DVU1FTlRfRlJBR01FTlRfTk9ERTsgfVxuICBnZXQgRE9DVU1FTlRfVFlQRV9OT0RFKCkgeyByZXR1cm4gRE9DVU1FTlRfVFlQRV9OT0RFOyB9XG5cbiAgZ2V0IGJhc2VVUkkoKSB7XG4gICAgY29uc3Qgb3duZXJEb2N1bWVudCA9IHRoaXMubm9kZVR5cGUgPT09IERPQ1VNRU5UX05PREUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgOiB0aGlzLm93bmVyRG9jdW1lbnQ7XG4gICAgaWYgKG93bmVyRG9jdW1lbnQpIHtcbiAgICAgIGNvbnN0IGJhc2UgPSBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICAgIGlmIChiYXNlKVxuICAgICAgICByZXR1cm4gYmFzZS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcblxuICAgICAgY29uc3Qge2xvY2F0aW9ufSA9IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gICAgICBpZiAobG9jYXRpb24pXG4gICAgICAgIHJldHVybiBsb2NhdGlvbi5ocmVmO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gIC8vIG1peGluOiBub2RlXG4gIGdldCBpc0Nvbm5lY3RlZCgpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIGdldCBub2RlTmFtZSgpIHsgcmV0dXJuIHRoaXMubG9jYWxOYW1lOyB9XG4gIGdldCBwYXJlbnRFbGVtZW50KCkgeyByZXR1cm4gbnVsbDsgfVxuICBnZXQgcHJldmlvdXNTaWJsaW5nKCkgeyByZXR1cm4gbnVsbDsgfVxuICBnZXQgcHJldmlvdXNFbGVtZW50U2libGluZygpIHsgcmV0dXJuIG51bGw7IH1cbiAgZ2V0IG5leHRTaWJsaW5nKCkgeyByZXR1cm4gbnVsbDsgfVxuICBnZXQgbmV4dEVsZW1lbnRTaWJsaW5nKCkgeyByZXR1cm4gbnVsbDsgfVxuICBnZXQgY2hpbGROb2RlcygpIHsgcmV0dXJuIG5ldyBOb2RlTGlzdDsgfVxuICBnZXQgZmlyc3RDaGlsZCgpIHsgcmV0dXJuIG51bGw7IH1cbiAgZ2V0IGxhc3RDaGlsZCgpIHsgcmV0dXJuIG51bGw7IH1cblxuICAvLyBkZWZhdWx0IHZhbHVlc1xuICBnZXQgbm9kZVZhbHVlKCkgeyByZXR1cm4gbnVsbDsgfVxuICBzZXQgbm9kZVZhbHVlKHZhbHVlKSB7fVxuICBnZXQgdGV4dENvbnRlbnQoKSB7IHJldHVybiBudWxsOyB9XG4gIHNldCB0ZXh0Q29udGVudCh2YWx1ZSkge31cbiAgbm9ybWFsaXplKCkge31cbiAgY2xvbmVOb2RlKCkgeyByZXR1cm4gbnVsbDsgfVxuICBjb250YWlucygpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIC8qKlxuICAgKiBJbnNlcnRzIGEgbm9kZSBiZWZvcmUgYSByZWZlcmVuY2Ugbm9kZSBhcyBhIGNoaWxkIG9mIHRoaXMgcGFyZW50IG5vZGUuXG4gICAqIEBwYXJhbSB7Tm9kZX0gbmV3Tm9kZSBUaGUgbm9kZSB0byBiZSBpbnNlcnRlZC5cbiAgICogQHBhcmFtIHtOb2RlfSByZWZlcmVuY2VOb2RlIFRoZSBub2RlIGJlZm9yZSB3aGljaCBuZXdOb2RlIGlzIGluc2VydGVkLiBJZiB0aGlzIGlzIG51bGwsIHRoZW4gbmV3Tm9kZSBpcyBpbnNlcnRlZCBhdCB0aGUgZW5kIG9mIG5vZGUncyBjaGlsZCBub2Rlcy5cbiAgICogQHJldHVybnMgVGhlIGFkZGVkIGNoaWxkXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHsgcmV0dXJuIG5ld05vZGUgfVxuICAvKipcbiAgICogQWRkcyBhIG5vZGUgdG8gdGhlIGVuZCBvZiB0aGUgbGlzdCBvZiBjaGlsZHJlbiBvZiB0aGlzIG5vZGUuXG4gICAqIEBwYXJhbSB7Tm9kZX0gY2hpbGQgVGhlIG5vZGUgdG8gYXBwZW5kIHRvIHRoZSBnaXZlbiBwYXJlbnQgbm9kZS5cbiAgICogQHJldHVybnMgVGhlIGFwcGVuZGVkIGNoaWxkLlxuICAgKi9cbiAgYXBwZW5kQ2hpbGQoY2hpbGQpIHsgcmV0dXJuIGNoaWxkIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGEgY2hpbGQgbm9kZSB3aXRoaW4gdGhpcyBub2RlXG4gICAqIEBwYXJhbSB7Tm9kZX0gbmV3Q2hpbGQgVGhlIG5ldyBub2RlIHRvIHJlcGxhY2Ugb2xkQ2hpbGQuXG4gICAqIEBwYXJhbSB7Tm9kZX0gb2xkQ2hpbGQgVGhlIGNoaWxkIHRvIGJlIHJlcGxhY2VkLlxuICAgKiBAcmV0dXJucyBUaGUgcmVwbGFjZWQgTm9kZS4gVGhpcyBpcyB0aGUgc2FtZSBub2RlIGFzIG9sZENoaWxkLlxuICAgKi9cbiAgcmVwbGFjZUNoaWxkKG5ld0NoaWxkLCBvbGRDaGlsZCkgeyByZXR1cm4gb2xkQ2hpbGQgfVxuICAvKipcbiAgICogUmVtb3ZlcyBhIGNoaWxkIG5vZGUgZnJvbSB0aGUgRE9NLlxuICAgKiBAcGFyYW0ge05vZGV9IGNoaWxkIEEgTm9kZSB0aGF0IGlzIHRoZSBjaGlsZCBub2RlIHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NLlxuICAgKiBAcmV0dXJucyBUaGUgcmVtb3ZlZCBub2RlLlxuICAgKi9cbiAgcmVtb3ZlQ2hpbGQoY2hpbGQpIHsgcmV0dXJuIGNoaWxkIH1cbiAgdG9TdHJpbmcoKSB7IHJldHVybiAnJzsgfVxuICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuXG4gIGhhc0NoaWxkTm9kZXMoKSB7IHJldHVybiAhIXRoaXMubGFzdENoaWxkOyB9XG4gIGlzU2FtZU5vZGUobm9kZSkgeyByZXR1cm4gdGhpcyA9PT0gbm9kZTsgfVxuXG4gIC8vIFRPRE86IGF0dHJpYnV0ZXM/XG4gIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHRhcmdldCkge1xuICAgIGxldCByZXN1bHQgPSAwO1xuICAgIGlmICh0aGlzICE9PSB0YXJnZXQpIHtcbiAgICAgIGxldCBzZWxmID0gZ2V0UGFyZW50Tm9kZUNvdW50KHRoaXMpO1xuICAgICAgbGV0IG90aGVyID0gZ2V0UGFyZW50Tm9kZUNvdW50KHRhcmdldCk7XG4gICAgICBpZiAoc2VsZiA8IG90aGVyKSB7XG4gICAgICAgIHJlc3VsdCArPSBET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkc7XG4gICAgICAgIGlmICh0aGlzLmNvbnRhaW5zKHRhcmdldCkpXG4gICAgICAgICAgcmVzdWx0ICs9IERPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5FRF9CWTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG90aGVyIDwgc2VsZikge1xuICAgICAgICByZXN1bHQgKz0gRE9DVU1FTlRfUE9TSVRJT05fUFJFQ0VESU5HO1xuICAgICAgICBpZiAodGFyZ2V0LmNvbnRhaW5zKHRoaXMpKVxuICAgICAgICAgIHJlc3VsdCArPSBET0NVTUVOVF9QT1NJVElPTl9DT05UQUlOUztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHNlbGYgJiYgb3RoZXIpIHtcbiAgICAgICAgY29uc3Qge2NoaWxkTm9kZXN9ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgICAgICBpZiAoY2hpbGROb2Rlcy5pbmRleE9mKHRoaXMpIDwgY2hpbGROb2Rlcy5pbmRleE9mKHRhcmdldCkpXG4gICAgICAgICAgcmVzdWx0ICs9IERPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORztcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJlc3VsdCArPSBET0NVTUVOVF9QT1NJVElPTl9QUkVDRURJTkc7XG4gICAgICB9XG4gICAgICBpZiAoIXNlbGYgfHwgIW90aGVyKSB7XG4gICAgICAgIHJlc3VsdCArPSBET0NVTUVOVF9QT1NJVElPTl9JTVBMRU1FTlRBVElPTl9TUEVDSUZJQztcbiAgICAgICAgcmVzdWx0ICs9IERPQ1VNRU5UX1BPU0lUSU9OX0RJU0NPTk5FQ1RFRDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlzRXF1YWxOb2RlKG5vZGUpIHtcbiAgICBpZiAodGhpcyA9PT0gbm9kZSlcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmICh0aGlzLm5vZGVUeXBlID09PSBub2RlLm5vZGVUeXBlKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMubm9kZVR5cGUpIHtcbiAgICAgICAgY2FzZSBET0NVTUVOVF9OT0RFOlxuICAgICAgICBjYXNlIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6IHtcbiAgICAgICAgICBjb25zdCBhTm9kZXMgPSB0aGlzLmNoaWxkTm9kZXM7XG4gICAgICAgICAgY29uc3QgYk5vZGVzID0gbm9kZS5jaGlsZE5vZGVzO1xuICAgICAgICAgIHJldHVybiBhTm9kZXMubGVuZ3RoID09PSBiTm9kZXMubGVuZ3RoICYmIGFOb2Rlcy5ldmVyeSgobm9kZSwgaSkgPT4gbm9kZS5pc0VxdWFsTm9kZShiTm9kZXNbaV0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKSA9PT0gbm9kZS50b1N0cmluZygpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX2dldFBhcmVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnROb2RlO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxpbmcgaXQgb24gYW4gZWxlbWVudCBpbnNpZGUgYSBzdGFuZGFyZCB3ZWIgcGFnZSB3aWxsIHJldHVybiBhbiBIVE1MRG9jdW1lbnQgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgZW50aXJlIHBhZ2UgKG9yIDxpZnJhbWU+KS5cbiAgICogQ2FsbGluZyBpdCBvbiBhbiBlbGVtZW50IGluc2lkZSBhIHNoYWRvdyBET00gd2lsbCByZXR1cm4gdGhlIGFzc29jaWF0ZWQgU2hhZG93Um9vdC5cbiAgICogQHJldHVybiB7U2hhZG93Um9vdCB8IEhUTUxEb2N1bWVudH1cbiAgICovXG4gIGdldFJvb3ROb2RlKCkge1xuICAgIGxldCByb290ID0gdGhpcztcbiAgICB3aGlsZSAocm9vdC5wYXJlbnROb2RlKVxuICAgICAgcm9vdCA9IHJvb3QucGFyZW50Tm9kZTtcbiAgICByZXR1cm4gcm9vdDtcbiAgfVxufVxuIiwiY29uc3Qge3JlcGxhY2V9ID0gJyc7XG5cbi8vIGVzY2FwZVxuY29uc3QgY2EgPSAvWzw+JlxceEEwXS9nO1xuXG5jb25zdCBlc2NhID0ge1xuICAnXFx4QTAnOiAnJiMxNjA7JyxcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0Oydcbn07XG5cbmNvbnN0IHBlID0gbSA9PiBlc2NhW21dO1xuXG4vKipcbiAqIFNhZmVseSBlc2NhcGUgSFRNTCBlbnRpdGllcyBzdWNoIGFzIGAmYCwgYDxgLCBgPmAgb25seS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBlcyB0aGUgaW5wdXQgdG8gc2FmZWx5IGVzY2FwZVxuICogQHJldHVybnMge3N0cmluZ30gdGhlIGVzY2FwZWQgaW5wdXQsIGFuZCBpdCAqKnRocm93cyoqIGFuIGVycm9yIGlmXG4gKiAgdGhlIGlucHV0IHR5cGUgaXMgdW5leHBlY3RlZCwgZXhjZXB0IGZvciBib29sZWFuIGFuZCBudW1iZXJzLFxuICogIGNvbnZlcnRlZCBhcyBzdHJpbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBlc2NhcGUgPSBlcyA9PiByZXBsYWNlLmNhbGwoZXMsIGNhLCBwZSk7XG4iLCJpbXBvcnQge0FUVFJJQlVURV9OT0RFfSBmcm9tICcuLi9zaGFyZWQvY29uc3RhbnRzLmpzJztcbmltcG9ydCB7Q0hBTkdFRCwgVkFMVUV9IGZyb20gJy4uL3NoYXJlZC9zeW1ib2xzLmpzJztcbmltcG9ydCB7U3RyaW5nLCBpZ25vcmVDYXNlfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMuanMnO1xuaW1wb3J0IHthdHRyQXNKU09OfSBmcm9tICcuLi9zaGFyZWQvanNkb24uanMnO1xuaW1wb3J0IHtlbXB0eUF0dHJpYnV0ZXN9IGZyb20gJy4uL3NoYXJlZC9hdHRyaWJ1dGVzLmpzJztcblxuaW1wb3J0IHthdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sgYXMgbW9BdHRyaWJ1dGVzfSBmcm9tICcuL211dGF0aW9uLW9ic2VydmVyLmpzJztcbmltcG9ydCB7YXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIGFzIGNlQXR0cmlidXRlc30gZnJvbSAnLi9jdXN0b20tZWxlbWVudC1yZWdpc3RyeS5qcyc7XG5cbmltcG9ydCB7Tm9kZX0gZnJvbSAnLi9ub2RlLmpzJztcbmltcG9ydCB7ZXNjYXBlfSBmcm9tICcuLi9zaGFyZWQvdGV4dC1lc2NhcGVyLmpzJztcblxuY29uc3QgUVVPVEUgPSAvXCIvZztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkF0dHJcbiAqL1xuZXhwb3J0IGNsYXNzIEF0dHIgZXh0ZW5kcyBOb2RlIHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbmFtZSwgdmFsdWUgPSAnJykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIG5hbWUsIEFUVFJJQlVURV9OT0RFKTtcbiAgICB0aGlzLm93bmVyRWxlbWVudCA9IG51bGw7XG4gICAgdGhpcy5uYW1lID0gU3RyaW5nKG5hbWUpO1xuICAgIHRoaXNbVkFMVUVdID0gU3RyaW5nKHZhbHVlKTtcbiAgICB0aGlzW0NIQU5HRURdID0gZmFsc2U7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7IHJldHVybiB0aGlzW1ZBTFVFXTsgfVxuICBzZXQgdmFsdWUobmV3VmFsdWUpIHtcbiAgICBjb25zdCB7W1ZBTFVFXTogb2xkVmFsdWUsIG5hbWUsIG93bmVyRWxlbWVudH0gPSB0aGlzO1xuICAgIHRoaXNbVkFMVUVdID0gU3RyaW5nKG5ld1ZhbHVlKTtcbiAgICB0aGlzW0NIQU5HRURdID0gdHJ1ZTtcbiAgICBpZiAob3duZXJFbGVtZW50KSB7XG4gICAgICBtb0F0dHJpYnV0ZXMob3duZXJFbGVtZW50LCBuYW1lLCBvbGRWYWx1ZSk7XG4gICAgICBjZUF0dHJpYnV0ZXMob3duZXJFbGVtZW50LCBuYW1lLCBvbGRWYWx1ZSwgdGhpc1tWQUxVRV0pO1xuICAgIH1cbiAgfVxuXG4gIGNsb25lTm9kZSgpIHtcbiAgICBjb25zdCB7b3duZXJEb2N1bWVudCwgbmFtZSwgW1ZBTFVFXTogdmFsdWV9ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IEF0dHIob3duZXJEb2N1bWVudCwgbmFtZSwgdmFsdWUpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgY29uc3Qge25hbWUsIFtWQUxVRV06IHZhbHVlfSA9IHRoaXM7XG4gICAgaWYgKGVtcHR5QXR0cmlidXRlcy5oYXMobmFtZSkgJiYgIXZhbHVlKSB7XG4gICAgICByZXR1cm4gaWdub3JlQ2FzZSh0aGlzKSA/IG5hbWUgOiBgJHtuYW1lfT1cIlwiYDtcbiAgICB9XG4gICAgY29uc3QgZXNjYXBlZFZhbHVlID0gKGlnbm9yZUNhc2UodGhpcykgPyB2YWx1ZSA6IGVzY2FwZSh2YWx1ZSkpLnJlcGxhY2UoUVVPVEUsICcmcXVvdDsnKTtcbiAgICByZXR1cm4gYCR7bmFtZX09XCIke2VzY2FwZWRWYWx1ZX1cImA7XG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgY29uc3QganNvbiA9IFtdO1xuICAgIGF0dHJBc0pTT04odGhpcywganNvbik7XG4gICAgcmV0dXJuIGpzb247XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIENEQVRBX1NFQ1RJT05fTk9ERSxcbiAgQ09NTUVOVF9OT0RFLFxuICBET0NVTUVOVF9OT0RFLFxuICBET0NVTUVOVF9GUkFHTUVOVF9OT0RFLFxuICBURVhUX05PREUsXG4gIE5PREVfRU5EXG59IGZyb20gJy4vY29uc3RhbnRzLmpzJztcblxuaW1wb3J0IHtTVEFSVCwgTkVYVCwgUFJFVn0gZnJvbSAnLi9zeW1ib2xzLmpzJztcbmltcG9ydCB7Z2V0RW5kfSBmcm9tICcuL3V0aWxzLmpzJztcblxuZXhwb3J0IGNvbnN0IGlzQ29ubmVjdGVkID0gKHtvd25lckRvY3VtZW50LCBwYXJlbnROb2RlfSkgPT4ge1xuICB3aGlsZSAocGFyZW50Tm9kZSkge1xuICAgIGlmIChwYXJlbnROb2RlID09PSBvd25lckRvY3VtZW50KVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50Tm9kZSB8fCBwYXJlbnROb2RlLmhvc3Q7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IGNvbnN0IHBhcmVudEVsZW1lbnQgPSAoe3BhcmVudE5vZGV9KSA9PiB7XG4gIGlmIChwYXJlbnROb2RlKSB7XG4gICAgc3dpdGNoIChwYXJlbnROb2RlLm5vZGVUeXBlKSB7XG4gICAgICBjYXNlIERPQ1VNRU5UX05PREU6XG4gICAgICBjYXNlIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGFyZW50Tm9kZTtcbn07XG5cbmV4cG9ydCBjb25zdCBwcmV2aW91c1NpYmxpbmcgPSAoe1tQUkVWXTogcHJldn0pID0+IHtcbiAgc3dpdGNoIChwcmV2ID8gcHJldi5ub2RlVHlwZSA6IDApIHtcbiAgICBjYXNlIE5PREVfRU5EOlxuICAgICAgcmV0dXJuIHByZXZbU1RBUlRdO1xuICAgIGNhc2UgVEVYVF9OT0RFOlxuICAgIGNhc2UgQ09NTUVOVF9OT0RFOlxuICAgIGNhc2UgQ0RBVEFfU0VDVElPTl9OT0RFOlxuICAgICAgcmV0dXJuIHByZXY7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgbmV4dFNpYmxpbmcgPSBub2RlID0+IHtcbiAgY29uc3QgbmV4dCA9IGdldEVuZChub2RlKVtORVhUXTtcbiAgcmV0dXJuIG5leHQgJiYgKG5leHQubm9kZVR5cGUgPT09IE5PREVfRU5EID8gbnVsbCA6IG5leHQpO1xufTtcbiIsIi8vIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jbm9uZG9jdW1lbnR0eXBlY2hpbGRub2RlXG4vLyBDaGFyYWN0ZXJEYXRhLCBFbGVtZW50XG5cbmltcG9ydCB7RUxFTUVOVF9OT0RFfSBmcm9tICcuLi9zaGFyZWQvY29uc3RhbnRzLmpzJztcblxuaW1wb3J0IHtuZXh0U2libGluZywgcHJldmlvdXNTaWJsaW5nfSBmcm9tICcuLi9zaGFyZWQvbm9kZS5qcyc7XG5cbmV4cG9ydCBjb25zdCBuZXh0RWxlbWVudFNpYmxpbmcgPSBub2RlID0+IHtcbiAgbGV0IG5leHQgPSBuZXh0U2libGluZyhub2RlKTtcbiAgd2hpbGUgKG5leHQgJiYgbmV4dC5ub2RlVHlwZSAhPT0gRUxFTUVOVF9OT0RFKVxuICAgIG5leHQgPSBuZXh0U2libGluZyhuZXh0KTtcbiAgcmV0dXJuIG5leHQ7XG59O1xuXG5leHBvcnQgY29uc3QgcHJldmlvdXNFbGVtZW50U2libGluZyA9IG5vZGUgPT4ge1xuICBsZXQgcHJldiA9IHByZXZpb3VzU2libGluZyhub2RlKTtcbiAgd2hpbGUgKHByZXYgJiYgcHJldi5ub2RlVHlwZSAhPT0gRUxFTUVOVF9OT0RFKVxuICAgIHByZXYgPSBwcmV2aW91c1NpYmxpbmcocHJldik7XG4gIHJldHVybiBwcmV2O1xufTtcbiIsIi8vIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jY2hpbGRub2RlXG4vLyBDaGFyYWN0ZXJEYXRhLCBEb2N1bWVudFR5cGUsIEVsZW1lbnRcblxuaW1wb3J0IHtFTEVNRU5UX05PREV9IGZyb20gJy4uL3NoYXJlZC9jb25zdGFudHMuanMnO1xuaW1wb3J0IHtORVhULCBQUkVWfSBmcm9tICcuLi9zaGFyZWQvc3ltYm9scy5qcyc7XG5cbmltcG9ydCB7Z2V0RW5kLCBzZXRBZGphY2VudH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLmpzJztcblxuaW1wb3J0IHttb0NhbGxiYWNrfSBmcm9tICcuLi9pbnRlcmZhY2UvbXV0YXRpb24tb2JzZXJ2ZXIuanMnO1xuaW1wb3J0IHtkaXNjb25uZWN0ZWRDYWxsYmFja30gZnJvbSAnLi4vaW50ZXJmYWNlL2N1c3RvbS1lbGVtZW50LXJlZ2lzdHJ5LmpzJztcblxuY29uc3QgYXNGcmFnbWVudCA9IChvd25lckRvY3VtZW50LCBub2RlcykgPT4ge1xuICBjb25zdCBmcmFnbWVudCA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICBmcmFnbWVudC5hcHBlbmQoLi4ubm9kZXMpO1xuICByZXR1cm4gZnJhZ21lbnQ7XG59O1xuXG5leHBvcnQgY29uc3QgYmVmb3JlID0gKG5vZGUsIG5vZGVzKSA9PiB7XG4gIGNvbnN0IHtvd25lckRvY3VtZW50LCBwYXJlbnROb2RlfSA9IG5vZGU7XG4gIGlmIChwYXJlbnROb2RlKVxuICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKFxuICAgICAgYXNGcmFnbWVudChvd25lckRvY3VtZW50LCBub2RlcyksXG4gICAgICBub2RlXG4gICAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBhZnRlciA9IChub2RlLCBub2RlcykgPT4ge1xuICBjb25zdCB7b3duZXJEb2N1bWVudCwgcGFyZW50Tm9kZX0gPSBub2RlO1xuICBpZiAocGFyZW50Tm9kZSlcbiAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShcbiAgICAgIGFzRnJhZ21lbnQob3duZXJEb2N1bWVudCwgbm9kZXMpLFxuICAgICAgZ2V0RW5kKG5vZGUpW05FWFRdXG4gICAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCByZXBsYWNlV2l0aCA9IChub2RlLCBub2RlcykgPT4ge1xuICBjb25zdCB7b3duZXJEb2N1bWVudCwgcGFyZW50Tm9kZX0gPSBub2RlO1xuICBpZiAocGFyZW50Tm9kZSkge1xuICAgIGlmIChub2Rlcy5pbmNsdWRlcyhub2RlKSlcbiAgICAgIHJlcGxhY2VXaXRoKG5vZGUsIFtub2RlID0gbm9kZS5jbG9uZU5vZGUoKV0pO1xuICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKFxuICAgICAgYXNGcmFnbWVudChvd25lckRvY3VtZW50LCBub2RlcyksXG4gICAgICBub2RlXG4gICAgKTtcbiAgICBub2RlLnJlbW92ZSgpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcmVtb3ZlID0gKHByZXYsIGN1cnJlbnQsIG5leHQpID0+IHtcbiAgY29uc3Qge3BhcmVudE5vZGUsIG5vZGVUeXBlfSA9IGN1cnJlbnQ7XG4gIGlmIChwcmV2IHx8IG5leHQpIHtcbiAgICBzZXRBZGphY2VudChwcmV2LCBuZXh0KTtcbiAgICBjdXJyZW50W1BSRVZdID0gbnVsbDtcbiAgICBnZXRFbmQoY3VycmVudClbTkVYVF0gPSBudWxsO1xuICB9XG4gIGlmIChwYXJlbnROb2RlKSB7XG4gICAgY3VycmVudC5wYXJlbnROb2RlID0gbnVsbDtcbiAgICBtb0NhbGxiYWNrKGN1cnJlbnQsIHBhcmVudE5vZGUpO1xuICAgIGlmIChub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKVxuICAgICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soY3VycmVudCk7XG4gIH1cbn07XG4iLCIvLyBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2ludGVyZmFjZS1jaGFyYWN0ZXJkYXRhXG5cbmltcG9ydCB7TkVYVCwgUFJFViwgVkFMVUV9IGZyb20gJy4uL3NoYXJlZC9zeW1ib2xzLmpzJztcbmltcG9ydCB7U3RyaW5nfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMuanMnO1xuaW1wb3J0IHtpc0Nvbm5lY3RlZCwgcGFyZW50RWxlbWVudCwgcHJldmlvdXNTaWJsaW5nLCBuZXh0U2libGluZ30gZnJvbSAnLi4vc2hhcmVkL25vZGUuanMnO1xuaW1wb3J0IHtjaGFyYWN0ZXJEYXRhQXNKU09OfSBmcm9tICcuLi9zaGFyZWQvanNkb24uanMnO1xuXG5pbXBvcnQge3ByZXZpb3VzRWxlbWVudFNpYmxpbmcsIG5leHRFbGVtZW50U2libGluZ30gZnJvbSAnLi4vbWl4aW4vbm9uLWRvY3VtZW50LXR5cGUtY2hpbGQtbm9kZS5qcyc7XG5pbXBvcnQge2JlZm9yZSwgYWZ0ZXIsIHJlcGxhY2VXaXRoLCByZW1vdmV9IGZyb20gJy4uL21peGluL2NoaWxkLW5vZGUuanMnO1xuXG5pbXBvcnQge05vZGV9IGZyb20gJy4vbm9kZS5qcyc7XG5pbXBvcnQge21vQ2FsbGJhY2t9IGZyb20gJy4vbXV0YXRpb24tb2JzZXJ2ZXIuanMnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuQ2hhcmFjdGVyRGF0YVxuICovXG5leHBvcnQgY2xhc3MgQ2hhcmFjdGVyRGF0YSBleHRlbmRzIE5vZGUge1xuXG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSwgbm9kZVR5cGUsIGRhdGEpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUsIG5vZGVUeXBlKTtcbiAgICB0aGlzW1ZBTFVFXSA9IFN0cmluZyhkYXRhKTtcbiAgfVxuXG4gIC8vIDxNaXhpbnM+XG4gIGdldCBpc0Nvbm5lY3RlZCgpIHsgcmV0dXJuIGlzQ29ubmVjdGVkKHRoaXMpOyB9XG4gIGdldCBwYXJlbnRFbGVtZW50KCkgeyByZXR1cm4gcGFyZW50RWxlbWVudCh0aGlzKTsgfVxuICBnZXQgcHJldmlvdXNTaWJsaW5nKCkgeyByZXR1cm4gcHJldmlvdXNTaWJsaW5nKHRoaXMpOyB9XG4gIGdldCBuZXh0U2libGluZygpIHsgcmV0dXJuIG5leHRTaWJsaW5nKHRoaXMpOyB9XG5cbiAgZ2V0IHByZXZpb3VzRWxlbWVudFNpYmxpbmcoKSB7IHJldHVybiBwcmV2aW91c0VsZW1lbnRTaWJsaW5nKHRoaXMpOyB9XG4gIGdldCBuZXh0RWxlbWVudFNpYmxpbmcoKSB7IHJldHVybiBuZXh0RWxlbWVudFNpYmxpbmcodGhpcyk7IH1cblxuICBiZWZvcmUoLi4ubm9kZXMpIHsgYmVmb3JlKHRoaXMsIG5vZGVzKTsgfVxuICBhZnRlciguLi5ub2RlcykgeyBhZnRlcih0aGlzLCBub2Rlcyk7IH1cbiAgcmVwbGFjZVdpdGgoLi4ubm9kZXMpIHsgcmVwbGFjZVdpdGgodGhpcywgbm9kZXMpOyB9XG4gIHJlbW92ZSgpIHsgcmVtb3ZlKHRoaXNbUFJFVl0sIHRoaXMsIHRoaXNbTkVYVF0pOyB9XG4gIC8vIDwvTWl4aW5zPlxuXG4gIC8vIENoYXJhY3RlckRhdGEgb25seVxuICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgZ2V0IGRhdGEoKSB7IHJldHVybiB0aGlzW1ZBTFVFXTsgfVxuICBzZXQgZGF0YSh2YWx1ZSkge1xuICAgIHRoaXNbVkFMVUVdID0gU3RyaW5nKHZhbHVlKTtcbiAgICBtb0NhbGxiYWNrKHRoaXMsIHRoaXMucGFyZW50Tm9kZSk7XG4gIH1cblxuICBnZXQgbm9kZVZhbHVlKCkgeyByZXR1cm4gdGhpcy5kYXRhOyB9XG4gIHNldCBub2RlVmFsdWUodmFsdWUpIHsgdGhpcy5kYXRhID0gdmFsdWU7IH1cblxuICBnZXQgdGV4dENvbnRlbnQoKSB7IHJldHVybiB0aGlzLmRhdGE7IH1cbiAgc2V0IHRleHRDb250ZW50KHZhbHVlKSB7IHRoaXMuZGF0YSA9IHZhbHVlOyB9XG5cbiAgZ2V0IGxlbmd0aCgpIHsgcmV0dXJuIHRoaXMuZGF0YS5sZW5ndGg7IH1cblxuICBzdWJzdHJpbmdEYXRhKG9mZnNldCwgY291bnQpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLnN1YnN0cihvZmZzZXQsIGNvdW50KTtcbiAgfVxuXG4gIGFwcGVuZERhdGEoZGF0YSkge1xuICAgIHRoaXMuZGF0YSArPSBkYXRhO1xuICB9XG5cbiAgaW5zZXJ0RGF0YShvZmZzZXQsIGRhdGEpIHtcbiAgICBjb25zdCB7ZGF0YTogdH0gPSB0aGlzO1xuICAgIHRoaXMuZGF0YSA9IHQuc2xpY2UoMCwgb2Zmc2V0KSArIGRhdGEgKyB0LnNsaWNlKG9mZnNldCk7XG4gIH1cblxuICBkZWxldGVEYXRhKG9mZnNldCwgY291bnQpIHtcbiAgICBjb25zdCB7ZGF0YTogdH0gPSB0aGlzO1xuICAgIHRoaXMuZGF0YSA9IHQuc2xpY2UoMCwgb2Zmc2V0KSArIHQuc2xpY2Uob2Zmc2V0ICsgY291bnQpO1xuICB9XG5cbiAgcmVwbGFjZURhdGEob2Zmc2V0LCBjb3VudCwgZGF0YSkge1xuICAgIGNvbnN0IHtkYXRhOiB0fSA9IHRoaXM7XG4gICAgdGhpcy5kYXRhID0gdC5zbGljZSgwLCBvZmZzZXQpICsgZGF0YSArIHQuc2xpY2Uob2Zmc2V0ICsgY291bnQpO1xuICB9XG4gIC8qIGM4IGlnbm9yZSBzdG9wICovXG5cbiAgdG9KU09OKCkge1xuICAgIGNvbnN0IGpzb24gPSBbXTtcbiAgICBjaGFyYWN0ZXJEYXRhQXNKU09OKHRoaXMsIGpzb24pO1xuICAgIHJldHVybiBqc29uO1xuICB9XG59XG4iLCJpbXBvcnQge0NEQVRBX1NFQ1RJT05fTk9ERX0gZnJvbSAnLi4vc2hhcmVkL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQge1ZBTFVFfSBmcm9tICcuLi9zaGFyZWQvc3ltYm9scy5qcyc7XG5cbmltcG9ydCB7Q2hhcmFjdGVyRGF0YX0gZnJvbSAnLi9jaGFyYWN0ZXItZGF0YS5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5DREFUQVNlY3Rpb25cbiAqL1xuZXhwb3J0IGNsYXNzIENEQVRBU2VjdGlvbiBleHRlbmRzIENoYXJhY3RlckRhdGEge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBkYXRhID0gJycpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCAnI2NkYXRhc2VjdGlvbicsIENEQVRBX1NFQ1RJT05fTk9ERSwgZGF0YSk7XG4gIH1cblxuICBjbG9uZU5vZGUoKSB7XG4gICAgY29uc3Qge293bmVyRG9jdW1lbnQsIFtWQUxVRV06IGRhdGF9ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IENEQVRBU2VjdGlvbihvd25lckRvY3VtZW50LCBkYXRhKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkgeyByZXR1cm4gYDwhW0NEQVRBWyR7dGhpc1tWQUxVRV19XV0+YDsgfVxufVxuIiwiaW1wb3J0IHtDT01NRU5UX05PREV9IGZyb20gJy4uL3NoYXJlZC9jb25zdGFudHMuanMnO1xuaW1wb3J0IHtWQUxVRX0gZnJvbSAnLi4vc2hhcmVkL3N5bWJvbHMuanMnO1xuXG5pbXBvcnQge0NoYXJhY3RlckRhdGF9IGZyb20gJy4vY2hhcmFjdGVyLWRhdGEuanMnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuQ29tbWVudFxuICovXG5leHBvcnQgY2xhc3MgQ29tbWVudCBleHRlbmRzIENoYXJhY3RlckRhdGEge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBkYXRhID0gJycpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCAnI2NvbW1lbnQnLCBDT01NRU5UX05PREUsIGRhdGEpO1xuICB9XG5cbiAgY2xvbmVOb2RlKCkge1xuICAgIGNvbnN0IHtvd25lckRvY3VtZW50LCBbVkFMVUVdOiBkYXRhfSA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBDb21tZW50KG93bmVyRG9jdW1lbnQsIGRhdGEpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7IHJldHVybiBgPCEtLSR7dGhpc1tWQUxVRV19LS0+YDsgfVxufVxuIiwiZXhwb3J0IHZhciBTZWxlY3RvclR5cGU7XG4oZnVuY3Rpb24gKFNlbGVjdG9yVHlwZSkge1xuICAgIFNlbGVjdG9yVHlwZVtcIkF0dHJpYnV0ZVwiXSA9IFwiYXR0cmlidXRlXCI7XG4gICAgU2VsZWN0b3JUeXBlW1wiUHNldWRvXCJdID0gXCJwc2V1ZG9cIjtcbiAgICBTZWxlY3RvclR5cGVbXCJQc2V1ZG9FbGVtZW50XCJdID0gXCJwc2V1ZG8tZWxlbWVudFwiO1xuICAgIFNlbGVjdG9yVHlwZVtcIlRhZ1wiXSA9IFwidGFnXCI7XG4gICAgU2VsZWN0b3JUeXBlW1wiVW5pdmVyc2FsXCJdID0gXCJ1bml2ZXJzYWxcIjtcbiAgICAvLyBUcmF2ZXJzYWxzXG4gICAgU2VsZWN0b3JUeXBlW1wiQWRqYWNlbnRcIl0gPSBcImFkamFjZW50XCI7XG4gICAgU2VsZWN0b3JUeXBlW1wiQ2hpbGRcIl0gPSBcImNoaWxkXCI7XG4gICAgU2VsZWN0b3JUeXBlW1wiRGVzY2VuZGFudFwiXSA9IFwiZGVzY2VuZGFudFwiO1xuICAgIFNlbGVjdG9yVHlwZVtcIlBhcmVudFwiXSA9IFwicGFyZW50XCI7XG4gICAgU2VsZWN0b3JUeXBlW1wiU2libGluZ1wiXSA9IFwic2libGluZ1wiO1xuICAgIFNlbGVjdG9yVHlwZVtcIkNvbHVtbkNvbWJpbmF0b3JcIl0gPSBcImNvbHVtbi1jb21iaW5hdG9yXCI7XG59KShTZWxlY3RvclR5cGUgfHwgKFNlbGVjdG9yVHlwZSA9IHt9KSk7XG4vKipcbiAqIE1vZGVzIGZvciBpZ25vcmUgY2FzZS5cbiAqXG4gKiBUaGlzIGNvdWxkIGJlIHVwZGF0ZWQgdG8gYW4gZW51bSwgYW5kIHRoZSBvYmplY3QgaXNcbiAqIHRoZSBjdXJyZW50IHN0YW5kLWluIHRoYXQgd2lsbCBhbGxvdyBjb2RlIHRvIGJlIHVwZGF0ZWRcbiAqIHdpdGhvdXQgYmlnIGNoYW5nZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBJZ25vcmVDYXNlTW9kZSA9IHtcbiAgICBVbmtub3duOiBudWxsLFxuICAgIFF1aXJrc01vZGU6IFwicXVpcmtzXCIsXG4gICAgSWdub3JlQ2FzZTogdHJ1ZSxcbiAgICBDYXNlU2Vuc2l0aXZlOiBmYWxzZSxcbn07XG5leHBvcnQgdmFyIEF0dHJpYnV0ZUFjdGlvbjtcbihmdW5jdGlvbiAoQXR0cmlidXRlQWN0aW9uKSB7XG4gICAgQXR0cmlidXRlQWN0aW9uW1wiQW55XCJdID0gXCJhbnlcIjtcbiAgICBBdHRyaWJ1dGVBY3Rpb25bXCJFbGVtZW50XCJdID0gXCJlbGVtZW50XCI7XG4gICAgQXR0cmlidXRlQWN0aW9uW1wiRW5kXCJdID0gXCJlbmRcIjtcbiAgICBBdHRyaWJ1dGVBY3Rpb25bXCJFcXVhbHNcIl0gPSBcImVxdWFsc1wiO1xuICAgIEF0dHJpYnV0ZUFjdGlvbltcIkV4aXN0c1wiXSA9IFwiZXhpc3RzXCI7XG4gICAgQXR0cmlidXRlQWN0aW9uW1wiSHlwaGVuXCJdID0gXCJoeXBoZW5cIjtcbiAgICBBdHRyaWJ1dGVBY3Rpb25bXCJOb3RcIl0gPSBcIm5vdFwiO1xuICAgIEF0dHJpYnV0ZUFjdGlvbltcIlN0YXJ0XCJdID0gXCJzdGFydFwiO1xufSkoQXR0cmlidXRlQWN0aW9uIHx8IChBdHRyaWJ1dGVBY3Rpb24gPSB7fSkpO1xuIiwiaW1wb3J0IHsgU2VsZWN0b3JUeXBlLCBBdHRyaWJ1dGVBY3Rpb24sIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmNvbnN0IHJlTmFtZSA9IC9eW15cXFxcI10/KD86XFxcXCg/OltcXGRhLWZdezEsNn1cXHM/fC4pfFtcXHdcXC1cXHUwMGIwLVxcdUZGRkZdKSsvO1xuY29uc3QgcmVFc2NhcGUgPSAvXFxcXChbXFxkYS1mXXsxLDZ9XFxzP3woXFxzKXwuKS9naTtcbmNvbnN0IGFjdGlvblR5cGVzID0gbmV3IE1hcChbXG4gICAgWzEyNiAvKiBUaWxkZSAqLywgQXR0cmlidXRlQWN0aW9uLkVsZW1lbnRdLFxuICAgIFs5NCAvKiBDaXJjdW1mbGV4ICovLCBBdHRyaWJ1dGVBY3Rpb24uU3RhcnRdLFxuICAgIFszNiAvKiBEb2xsYXIgKi8sIEF0dHJpYnV0ZUFjdGlvbi5FbmRdLFxuICAgIFs0MiAvKiBBc3RlcmlzayAqLywgQXR0cmlidXRlQWN0aW9uLkFueV0sXG4gICAgWzMzIC8qIEV4Y2xhbWF0aW9uTWFyayAqLywgQXR0cmlidXRlQWN0aW9uLk5vdF0sXG4gICAgWzEyNCAvKiBQaXBlICovLCBBdHRyaWJ1dGVBY3Rpb24uSHlwaGVuXSxcbl0pO1xuLy8gUHNldWRvcywgd2hvc2UgZGF0YSBwcm9wZXJ0eSBpcyBwYXJzZWQgYXMgd2VsbC5cbmNvbnN0IHVucGFja1BzZXVkb3MgPSBuZXcgU2V0KFtcbiAgICBcImhhc1wiLFxuICAgIFwibm90XCIsXG4gICAgXCJtYXRjaGVzXCIsXG4gICAgXCJpc1wiLFxuICAgIFwid2hlcmVcIixcbiAgICBcImhvc3RcIixcbiAgICBcImhvc3QtY29udGV4dFwiLFxuXSk7XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGEgc3BlY2lmaWMgc2VsZWN0b3IgaXMgYSB0cmF2ZXJzYWwuXG4gKiBUaGlzIGlzIHVzZWZ1bCBlZy4gaW4gc3dhcHBpbmcgdGhlIG9yZGVyIG9mIGVsZW1lbnRzIHRoYXRcbiAqIGFyZSBub3QgdHJhdmVyc2Fscy5cbiAqXG4gKiBAcGFyYW0gc2VsZWN0b3IgU2VsZWN0b3IgdG8gY2hlY2suXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1RyYXZlcnNhbChzZWxlY3Rvcikge1xuICAgIHN3aXRjaCAoc2VsZWN0b3IudHlwZSkge1xuICAgICAgICBjYXNlIFNlbGVjdG9yVHlwZS5BZGphY2VudDpcbiAgICAgICAgY2FzZSBTZWxlY3RvclR5cGUuQ2hpbGQ6XG4gICAgICAgIGNhc2UgU2VsZWN0b3JUeXBlLkRlc2NlbmRhbnQ6XG4gICAgICAgIGNhc2UgU2VsZWN0b3JUeXBlLlBhcmVudDpcbiAgICAgICAgY2FzZSBTZWxlY3RvclR5cGUuU2libGluZzpcbiAgICAgICAgY2FzZSBTZWxlY3RvclR5cGUuQ29sdW1uQ29tYmluYXRvcjpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmNvbnN0IHN0cmlwUXVvdGVzRnJvbVBzZXVkb3MgPSBuZXcgU2V0KFtcImNvbnRhaW5zXCIsIFwiaWNvbnRhaW5zXCJdKTtcbi8vIFVuZXNjYXBlIGZ1bmN0aW9uIHRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvYmxvYi9tYXN0ZXIvc3JjL3NpenpsZS5qcyNMMTUyXG5mdW5jdGlvbiBmdW5lc2NhcGUoXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UpIHtcbiAgICBjb25zdCBoaWdoID0gcGFyc2VJbnQoZXNjYXBlZCwgMTYpIC0gMHgxMDAwMDtcbiAgICAvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuICAgIHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlXG4gICAgICAgID8gZXNjYXBlZFxuICAgICAgICA6IGhpZ2ggPCAwXG4gICAgICAgICAgICA/IC8vIEJNUCBjb2RlcG9pbnRcbiAgICAgICAgICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKGhpZ2ggKyAweDEwMDAwKVxuICAgICAgICAgICAgOiAvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcbiAgICAgICAgICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKChoaWdoID4+IDEwKSB8IDB4ZDgwMCwgKGhpZ2ggJiAweDNmZikgfCAweGRjMDApO1xufVxuZnVuY3Rpb24gdW5lc2NhcGVDU1Moc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKHJlRXNjYXBlLCBmdW5lc2NhcGUpO1xufVxuZnVuY3Rpb24gaXNRdW90ZShjKSB7XG4gICAgcmV0dXJuIGMgPT09IDM5IC8qIFNpbmdsZVF1b3RlICovIHx8IGMgPT09IDM0IC8qIERvdWJsZVF1b3RlICovO1xufVxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlKGMpIHtcbiAgICByZXR1cm4gKGMgPT09IDMyIC8qIFNwYWNlICovIHx8XG4gICAgICAgIGMgPT09IDkgLyogVGFiICovIHx8XG4gICAgICAgIGMgPT09IDEwIC8qIE5ld0xpbmUgKi8gfHxcbiAgICAgICAgYyA9PT0gMTIgLyogRm9ybUZlZWQgKi8gfHxcbiAgICAgICAgYyA9PT0gMTMgLyogQ2FycmlhZ2VSZXR1cm4gKi8pO1xufVxuLyoqXG4gKiBQYXJzZXMgYHNlbGVjdG9yYCwgb3B0aW9uYWxseSB3aXRoIHRoZSBwYXNzZWQgYG9wdGlvbnNgLlxuICpcbiAqIEBwYXJhbSBzZWxlY3RvciBTZWxlY3RvciB0byBwYXJzZS5cbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIHBhcnNpbmcuXG4gKiBAcmV0dXJucyBSZXR1cm5zIGEgdHdvLWRpbWVuc2lvbmFsIGFycmF5LlxuICogVGhlIGZpcnN0IGRpbWVuc2lvbiByZXByZXNlbnRzIHNlbGVjdG9ycyBzZXBhcmF0ZWQgYnkgY29tbWFzIChlZy4gYHN1YjEsIHN1YjJgKSxcbiAqIHRoZSBzZWNvbmQgY29udGFpbnMgdGhlIHJlbGV2YW50IHRva2VucyBmb3IgdGhhdCBzZWxlY3Rvci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKHNlbGVjdG9yKSB7XG4gICAgY29uc3Qgc3Vic2VsZWN0cyA9IFtdO1xuICAgIGNvbnN0IGVuZEluZGV4ID0gcGFyc2VTZWxlY3RvcihzdWJzZWxlY3RzLCBgJHtzZWxlY3Rvcn1gLCAwKTtcbiAgICBpZiAoZW5kSW5kZXggPCBzZWxlY3Rvci5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbm1hdGNoZWQgc2VsZWN0b3I6ICR7c2VsZWN0b3Iuc2xpY2UoZW5kSW5kZXgpfWApO1xuICAgIH1cbiAgICByZXR1cm4gc3Vic2VsZWN0cztcbn1cbmZ1bmN0aW9uIHBhcnNlU2VsZWN0b3Ioc3Vic2VsZWN0cywgc2VsZWN0b3IsIHNlbGVjdG9ySW5kZXgpIHtcbiAgICBsZXQgdG9rZW5zID0gW107XG4gICAgZnVuY3Rpb24gZ2V0TmFtZShvZmZzZXQpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBzZWxlY3Rvci5zbGljZShzZWxlY3RvckluZGV4ICsgb2Zmc2V0KS5tYXRjaChyZU5hbWUpO1xuICAgICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIG5hbWUsIGZvdW5kICR7c2VsZWN0b3Iuc2xpY2Uoc2VsZWN0b3JJbmRleCl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgW25hbWVdID0gbWF0Y2g7XG4gICAgICAgIHNlbGVjdG9ySW5kZXggKz0gb2Zmc2V0ICsgbmFtZS5sZW5ndGg7XG4gICAgICAgIHJldHVybiB1bmVzY2FwZUNTUyhuYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3RyaXBXaGl0ZXNwYWNlKG9mZnNldCkge1xuICAgICAgICBzZWxlY3RvckluZGV4ICs9IG9mZnNldDtcbiAgICAgICAgd2hpbGUgKHNlbGVjdG9ySW5kZXggPCBzZWxlY3Rvci5sZW5ndGggJiZcbiAgICAgICAgICAgIGlzV2hpdGVzcGFjZShzZWxlY3Rvci5jaGFyQ29kZUF0KHNlbGVjdG9ySW5kZXgpKSkge1xuICAgICAgICAgICAgc2VsZWN0b3JJbmRleCsrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlYWRWYWx1ZVdpdGhQYXJlbnRoZXNpcygpIHtcbiAgICAgICAgc2VsZWN0b3JJbmRleCArPSAxO1xuICAgICAgICBjb25zdCBzdGFydCA9IHNlbGVjdG9ySW5kZXg7XG4gICAgICAgIGxldCBjb3VudGVyID0gMTtcbiAgICAgICAgZm9yICg7IGNvdW50ZXIgPiAwICYmIHNlbGVjdG9ySW5kZXggPCBzZWxlY3Rvci5sZW5ndGg7IHNlbGVjdG9ySW5kZXgrKykge1xuICAgICAgICAgICAgaWYgKHNlbGVjdG9yLmNoYXJDb2RlQXQoc2VsZWN0b3JJbmRleCkgPT09XG4gICAgICAgICAgICAgICAgNDAgLyogTGVmdFBhcmVudGhlc2lzICovICYmXG4gICAgICAgICAgICAgICAgIWlzRXNjYXBlZChzZWxlY3RvckluZGV4KSkge1xuICAgICAgICAgICAgICAgIGNvdW50ZXIrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNlbGVjdG9yLmNoYXJDb2RlQXQoc2VsZWN0b3JJbmRleCkgPT09XG4gICAgICAgICAgICAgICAgNDEgLyogUmlnaHRQYXJlbnRoZXNpcyAqLyAmJlxuICAgICAgICAgICAgICAgICFpc0VzY2FwZWQoc2VsZWN0b3JJbmRleCkpIHtcbiAgICAgICAgICAgICAgICBjb3VudGVyLS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvdW50ZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcmVudGhlc2lzIG5vdCBtYXRjaGVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmVzY2FwZUNTUyhzZWxlY3Rvci5zbGljZShzdGFydCwgc2VsZWN0b3JJbmRleCAtIDEpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNFc2NhcGVkKHBvcykge1xuICAgICAgICBsZXQgc2xhc2hDb3VudCA9IDA7XG4gICAgICAgIHdoaWxlIChzZWxlY3Rvci5jaGFyQ29kZUF0KC0tcG9zKSA9PT0gOTIgLyogQmFja1NsYXNoICovKVxuICAgICAgICAgICAgc2xhc2hDb3VudCsrO1xuICAgICAgICByZXR1cm4gKHNsYXNoQ291bnQgJiAxKSA9PT0gMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW5zdXJlTm90VHJhdmVyc2FsKCkge1xuICAgICAgICBpZiAodG9rZW5zLmxlbmd0aCA+IDAgJiYgaXNUcmF2ZXJzYWwodG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRpZCBub3QgZXhwZWN0IHN1Y2Nlc3NpdmUgdHJhdmVyc2Fscy5cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYWRkVHJhdmVyc2FsKHR5cGUpIHtcbiAgICAgICAgaWYgKHRva2Vucy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdLnR5cGUgPT09IFNlbGVjdG9yVHlwZS5EZXNjZW5kYW50KSB7XG4gICAgICAgICAgICB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdLnR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVuc3VyZU5vdFRyYXZlcnNhbCgpO1xuICAgICAgICB0b2tlbnMucHVzaCh7IHR5cGUgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFkZFNwZWNpYWxBdHRyaWJ1dGUobmFtZSwgYWN0aW9uKSB7XG4gICAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IFNlbGVjdG9yVHlwZS5BdHRyaWJ1dGUsXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgdmFsdWU6IGdldE5hbWUoMSksXG4gICAgICAgICAgICBuYW1lc3BhY2U6IG51bGwsXG4gICAgICAgICAgICBpZ25vcmVDYXNlOiBcInF1aXJrc1wiLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2UgaGF2ZSBmaW5pc2hlZCBwYXJzaW5nIHRoZSBjdXJyZW50IHBhcnQgb2YgdGhlIHNlbGVjdG9yLlxuICAgICAqXG4gICAgICogUmVtb3ZlIGRlc2NlbmRhbnQgdG9rZW5zIGF0IHRoZSBlbmQgaWYgdGhleSBleGlzdCxcbiAgICAgKiBhbmQgcmV0dXJuIHRoZSBsYXN0IGluZGV4LCBzbyB0aGF0IHBhcnNpbmcgY2FuIGJlXG4gICAgICogcGlja2VkIHVwIGZyb20gaGVyZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5hbGl6ZVN1YnNlbGVjdG9yKCkge1xuICAgICAgICBpZiAodG9rZW5zLmxlbmd0aCAmJlxuICAgICAgICAgICAgdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXS50eXBlID09PSBTZWxlY3RvclR5cGUuRGVzY2VuZGFudCkge1xuICAgICAgICAgICAgdG9rZW5zLnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b2tlbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbXB0eSBzdWItc2VsZWN0b3JcIik7XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2VsZWN0cy5wdXNoKHRva2Vucyk7XG4gICAgfVxuICAgIHN0cmlwV2hpdGVzcGFjZSgwKTtcbiAgICBpZiAoc2VsZWN0b3IubGVuZ3RoID09PSBzZWxlY3RvckluZGV4KSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RvckluZGV4O1xuICAgIH1cbiAgICBsb29wOiB3aGlsZSAoc2VsZWN0b3JJbmRleCA8IHNlbGVjdG9yLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBmaXJzdENoYXIgPSBzZWxlY3Rvci5jaGFyQ29kZUF0KHNlbGVjdG9ySW5kZXgpO1xuICAgICAgICBzd2l0Y2ggKGZpcnN0Q2hhcikge1xuICAgICAgICAgICAgLy8gV2hpdGVzcGFjZVxuICAgICAgICAgICAgY2FzZSAzMiAvKiBTcGFjZSAqLzpcbiAgICAgICAgICAgIGNhc2UgOSAvKiBUYWIgKi86XG4gICAgICAgICAgICBjYXNlIDEwIC8qIE5ld0xpbmUgKi86XG4gICAgICAgICAgICBjYXNlIDEyIC8qIEZvcm1GZWVkICovOlxuICAgICAgICAgICAgY2FzZSAxMyAvKiBDYXJyaWFnZVJldHVybiAqLzoge1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbnMubGVuZ3RoID09PSAwIHx8XG4gICAgICAgICAgICAgICAgICAgIHRva2Vuc1swXS50eXBlICE9PSBTZWxlY3RvclR5cGUuRGVzY2VuZGFudCkge1xuICAgICAgICAgICAgICAgICAgICBlbnN1cmVOb3RUcmF2ZXJzYWwoKTtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5zLnB1c2goeyB0eXBlOiBTZWxlY3RvclR5cGUuRGVzY2VuZGFudCB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RyaXBXaGl0ZXNwYWNlKDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVHJhdmVyc2Fsc1xuICAgICAgICAgICAgY2FzZSA2MiAvKiBHcmVhdGVyVGhhbiAqLzoge1xuICAgICAgICAgICAgICAgIGFkZFRyYXZlcnNhbChTZWxlY3RvclR5cGUuQ2hpbGQpO1xuICAgICAgICAgICAgICAgIHN0cmlwV2hpdGVzcGFjZSgxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgNjAgLyogTGVzc1RoYW4gKi86IHtcbiAgICAgICAgICAgICAgICBhZGRUcmF2ZXJzYWwoU2VsZWN0b3JUeXBlLlBhcmVudCk7XG4gICAgICAgICAgICAgICAgc3RyaXBXaGl0ZXNwYWNlKDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAxMjYgLyogVGlsZGUgKi86IHtcbiAgICAgICAgICAgICAgICBhZGRUcmF2ZXJzYWwoU2VsZWN0b3JUeXBlLlNpYmxpbmcpO1xuICAgICAgICAgICAgICAgIHN0cmlwV2hpdGVzcGFjZSgxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgNDMgLyogUGx1cyAqLzoge1xuICAgICAgICAgICAgICAgIGFkZFRyYXZlcnNhbChTZWxlY3RvclR5cGUuQWRqYWNlbnQpO1xuICAgICAgICAgICAgICAgIHN0cmlwV2hpdGVzcGFjZSgxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNwZWNpYWwgYXR0cmlidXRlIHNlbGVjdG9yczogLmNsYXNzLCAjaWRcbiAgICAgICAgICAgIGNhc2UgNDYgLyogUGVyaW9kICovOiB7XG4gICAgICAgICAgICAgICAgYWRkU3BlY2lhbEF0dHJpYnV0ZShcImNsYXNzXCIsIEF0dHJpYnV0ZUFjdGlvbi5FbGVtZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMzUgLyogSGFzaCAqLzoge1xuICAgICAgICAgICAgICAgIGFkZFNwZWNpYWxBdHRyaWJ1dGUoXCJpZFwiLCBBdHRyaWJ1dGVBY3Rpb24uRXF1YWxzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgOTEgLyogTGVmdFNxdWFyZUJyYWNrZXQgKi86IHtcbiAgICAgICAgICAgICAgICBzdHJpcFdoaXRlc3BhY2UoMSk7XG4gICAgICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIGF0dHJpYnV0ZSBuYW1lIGFuZCBuYW1lc3BhY2VcbiAgICAgICAgICAgICAgICBsZXQgbmFtZTtcbiAgICAgICAgICAgICAgICBsZXQgbmFtZXNwYWNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IuY2hhckNvZGVBdChzZWxlY3RvckluZGV4KSA9PT0gMTI0IC8qIFBpcGUgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRXF1aXZhbGVudCB0byBubyBuYW1lc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGdldE5hbWUoMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNlbGVjdG9yLnN0YXJ0c1dpdGgoXCIqfFwiLCBzZWxlY3RvckluZGV4KSkge1xuICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2UgPSBcIipcIjtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGdldE5hbWUoMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuYW1lID0gZ2V0TmFtZSgwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yLmNoYXJDb2RlQXQoc2VsZWN0b3JJbmRleCkgPT09IDEyNCAvKiBQaXBlICovICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rvci5jaGFyQ29kZUF0KHNlbGVjdG9ySW5kZXggKyAxKSAhPT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA2MSAvKiBFcXVhbCAqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlID0gbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSBnZXROYW1lKDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0cmlwV2hpdGVzcGFjZSgwKTtcbiAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgY29tcGFyaXNvbiBvcGVyYXRpb25cbiAgICAgICAgICAgICAgICBsZXQgYWN0aW9uID0gQXR0cmlidXRlQWN0aW9uLkV4aXN0cztcbiAgICAgICAgICAgICAgICBjb25zdCBwb3NzaWJsZUFjdGlvbiA9IGFjdGlvblR5cGVzLmdldChzZWxlY3Rvci5jaGFyQ29kZUF0KHNlbGVjdG9ySW5kZXgpKTtcbiAgICAgICAgICAgICAgICBpZiAocG9zc2libGVBY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gcG9zc2libGVBY3Rpb247XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rvci5jaGFyQ29kZUF0KHNlbGVjdG9ySW5kZXggKyAxKSAhPT1cbiAgICAgICAgICAgICAgICAgICAgICAgIDYxIC8qIEVxdWFsICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBgPWBcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3RyaXBXaGl0ZXNwYWNlKDIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzZWxlY3Rvci5jaGFyQ29kZUF0KHNlbGVjdG9ySW5kZXgpID09PSA2MSAvKiBFcXVhbCAqLykge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSBBdHRyaWJ1dGVBY3Rpb24uRXF1YWxzO1xuICAgICAgICAgICAgICAgICAgICBzdHJpcFdoaXRlc3BhY2UoMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIERldGVybWluZSB2YWx1ZVxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgbGV0IGlnbm9yZUNhc2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gIT09IFwiZXhpc3RzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzUXVvdGUoc2VsZWN0b3IuY2hhckNvZGVBdChzZWxlY3RvckluZGV4KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHF1b3RlID0gc2VsZWN0b3IuY2hhckNvZGVBdChzZWxlY3RvckluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzZWN0aW9uRW5kID0gc2VsZWN0b3JJbmRleCArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc2VjdGlvbkVuZCA8IHNlbGVjdG9yLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzZWxlY3Rvci5jaGFyQ29kZUF0KHNlY3Rpb25FbmQpICE9PSBxdW90ZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0VzY2FwZWQoc2VjdGlvbkVuZCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbkVuZCArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yLmNoYXJDb2RlQXQoc2VjdGlvbkVuZCkgIT09IHF1b3RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXR0cmlidXRlIHZhbHVlIGRpZG4ndCBlbmRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHVuZXNjYXBlQ1NTKHNlbGVjdG9yLnNsaWNlKHNlbGVjdG9ySW5kZXggKyAxLCBzZWN0aW9uRW5kKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvckluZGV4ID0gc2VjdGlvbkVuZCArIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZVN0YXJ0ID0gc2VsZWN0b3JJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChzZWxlY3RvckluZGV4IDwgc2VsZWN0b3IubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCghaXNXaGl0ZXNwYWNlKHNlbGVjdG9yLmNoYXJDb2RlQXQoc2VsZWN0b3JJbmRleCkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yLmNoYXJDb2RlQXQoc2VsZWN0b3JJbmRleCkgIT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA5MyAvKiBSaWdodFNxdWFyZUJyYWNrZXQgKi8pIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRXNjYXBlZChzZWxlY3RvckluZGV4KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvckluZGV4ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHVuZXNjYXBlQ1NTKHNlbGVjdG9yLnNsaWNlKHZhbHVlU3RhcnQsIHNlbGVjdG9ySW5kZXgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdHJpcFdoaXRlc3BhY2UoMCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNlZSBpZiB3ZSBoYXZlIGEgZm9yY2UgaWdub3JlIGZsYWdcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9yY2VJZ25vcmUgPSBzZWxlY3Rvci5jaGFyQ29kZUF0KHNlbGVjdG9ySW5kZXgpIHwgMHgyMDtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGZvcmNlSWdub3JlIGZsYWcgaXMgc2V0IChlaXRoZXIgYGlgIG9yIGBzYCksIHVzZSB0aGF0IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JjZUlnbm9yZSA9PT0gMTE1IC8qIExvd2VyUyAqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlQ2FzZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXBXaGl0ZXNwYWNlKDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGZvcmNlSWdub3JlID09PSAxMDUgLyogTG93ZXJJICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmVDYXNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwV2hpdGVzcGFjZSgxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IuY2hhckNvZGVBdChzZWxlY3RvckluZGV4KSAhPT1cbiAgICAgICAgICAgICAgICAgICAgOTMgLyogUmlnaHRTcXVhcmVCcmFja2V0ICovKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dHJpYnV0ZSBzZWxlY3RvciBkaWRuJ3QgdGVybWluYXRlXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWxlY3RvckluZGV4ICs9IDE7XG4gICAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlU2VsZWN0b3IgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFNlbGVjdG9yVHlwZS5BdHRyaWJ1dGUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgaWdub3JlQ2FzZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKGF0dHJpYnV0ZVNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgNTggLyogQ29sb24gKi86IHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IuY2hhckNvZGVBdChzZWxlY3RvckluZGV4ICsgMSkgPT09IDU4IC8qIENvbG9uICovKSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFNlbGVjdG9yVHlwZS5Qc2V1ZG9FbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZ2V0TmFtZSgyKS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogc2VsZWN0b3IuY2hhckNvZGVBdChzZWxlY3RvckluZGV4KSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0MCAvKiBMZWZ0UGFyZW50aGVzaXMgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHJlYWRWYWx1ZVdpdGhQYXJlbnRoZXNpcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBnZXROYW1lKDEpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rvci5jaGFyQ29kZUF0KHNlbGVjdG9ySW5kZXgpID09PVxuICAgICAgICAgICAgICAgICAgICA0MCAvKiBMZWZ0UGFyZW50aGVzaXMgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVucGFja1BzZXVkb3MuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNRdW90ZShzZWxlY3Rvci5jaGFyQ29kZUF0KHNlbGVjdG9ySW5kZXggKyAxKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBzZXVkby1zZWxlY3RvciAke25hbWV9IGNhbm5vdCBiZSBxdW90ZWRgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9ySW5kZXggPSBwYXJzZVNlbGVjdG9yKGRhdGEsIHNlbGVjdG9yLCBzZWxlY3RvckluZGV4ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IuY2hhckNvZGVBdChzZWxlY3RvckluZGV4KSAhPT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0MSAvKiBSaWdodFBhcmVudGhlc2lzICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIGNsb3NpbmcgcGFyZW50aGVzaXMgaW4gOiR7bmFtZX0gKCR7c2VsZWN0b3J9KWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JJbmRleCArPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHJlYWRWYWx1ZVdpdGhQYXJlbnRoZXNpcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmlwUXVvdGVzRnJvbVBzZXVkb3MuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcXVvdCA9IGRhdGEuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVvdCA9PT0gZGF0YS5jaGFyQ29kZUF0KGRhdGEubGVuZ3RoIC0gMSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNRdW90ZShxdW90KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gZGF0YS5zbGljZSgxLCAtMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHVuZXNjYXBlQ1NTKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHsgdHlwZTogU2VsZWN0b3JUeXBlLlBzZXVkbywgbmFtZSwgZGF0YSB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgNDQgLyogQ29tbWEgKi86IHtcbiAgICAgICAgICAgICAgICBmaW5hbGl6ZVN1YnNlbGVjdG9yKCk7XG4gICAgICAgICAgICAgICAgdG9rZW5zID0gW107XG4gICAgICAgICAgICAgICAgc3RyaXBXaGl0ZXNwYWNlKDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rvci5zdGFydHNXaXRoKFwiLypcIiwgc2VsZWN0b3JJbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kSW5kZXggPSBzZWxlY3Rvci5pbmRleE9mKFwiKi9cIiwgc2VsZWN0b3JJbmRleCArIDIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW5kSW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb21tZW50IHdhcyBub3QgdGVybWluYXRlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvckluZGV4ID0gZW5kSW5kZXggKyAyO1xuICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgbGVhZGluZyB3aGl0ZXNwYWNlXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpcFdoaXRlc3BhY2UoMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBuYW1lc3BhY2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGxldCBuYW1lO1xuICAgICAgICAgICAgICAgIGlmIChmaXJzdENoYXIgPT09IDQyIC8qIEFzdGVyaXNrICovKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9ySW5kZXggKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IFwiKlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChmaXJzdENoYXIgPT09IDEyNCAvKiBQaXBlICovKSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IuY2hhckNvZGVBdChzZWxlY3RvckluZGV4ICsgMSkgPT09IDEyNCAvKiBQaXBlICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRUcmF2ZXJzYWwoU2VsZWN0b3JUeXBlLkNvbHVtbkNvbWJpbmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXBXaGl0ZXNwYWNlKDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmVOYW1lLnRlc3Qoc2VsZWN0b3Iuc2xpY2Uoc2VsZWN0b3JJbmRleCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSBnZXROYW1lKDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgbG9vcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yLmNoYXJDb2RlQXQoc2VsZWN0b3JJbmRleCkgPT09IDEyNCAvKiBQaXBlICovICYmXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yLmNoYXJDb2RlQXQoc2VsZWN0b3JJbmRleCArIDEpICE9PSAxMjQgLyogUGlwZSAqLykge1xuICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2UgPSBuYW1lO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IuY2hhckNvZGVBdChzZWxlY3RvckluZGV4ICsgMSkgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICA0MiAvKiBBc3RlcmlzayAqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IFwiKlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JJbmRleCArPSAyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGdldE5hbWUoMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2gobmFtZSA9PT0gXCIqXCJcbiAgICAgICAgICAgICAgICAgICAgPyB7IHR5cGU6IFNlbGVjdG9yVHlwZS5Vbml2ZXJzYWwsIG5hbWVzcGFjZSB9XG4gICAgICAgICAgICAgICAgICAgIDogeyB0eXBlOiBTZWxlY3RvclR5cGUuVGFnLCBuYW1lLCBuYW1lc3BhY2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZmluYWxpemVTdWJzZWxlY3RvcigpO1xuICAgIHJldHVybiBzZWxlY3RvckluZGV4O1xufVxuIiwiaW1wb3J0IHsgQXR0cmlidXRlQWN0aW9uLCBTZWxlY3RvclR5cGUgfSBmcm9tIFwiY3NzLXdoYXRcIjtcbmNvbnN0IHByb2NlZHVyZSA9IG5ldyBNYXAoW1xuICAgIFtTZWxlY3RvclR5cGUuVW5pdmVyc2FsLCA1MF0sXG4gICAgW1NlbGVjdG9yVHlwZS5UYWcsIDMwXSxcbiAgICBbU2VsZWN0b3JUeXBlLkF0dHJpYnV0ZSwgMV0sXG4gICAgW1NlbGVjdG9yVHlwZS5Qc2V1ZG8sIDBdLFxuXSk7XG5leHBvcnQgZnVuY3Rpb24gaXNUcmF2ZXJzYWwodG9rZW4pIHtcbiAgICByZXR1cm4gIXByb2NlZHVyZS5oYXModG9rZW4udHlwZSk7XG59XG5jb25zdCBhdHRyaWJ1dGVzID0gbmV3IE1hcChbXG4gICAgW0F0dHJpYnV0ZUFjdGlvbi5FeGlzdHMsIDEwXSxcbiAgICBbQXR0cmlidXRlQWN0aW9uLkVxdWFscywgOF0sXG4gICAgW0F0dHJpYnV0ZUFjdGlvbi5Ob3QsIDddLFxuICAgIFtBdHRyaWJ1dGVBY3Rpb24uU3RhcnQsIDZdLFxuICAgIFtBdHRyaWJ1dGVBY3Rpb24uRW5kLCA2XSxcbiAgICBbQXR0cmlidXRlQWN0aW9uLkFueSwgNV0sXG5dKTtcbi8qKlxuICogU29ydCB0aGUgcGFydHMgb2YgdGhlIHBhc3NlZCBzZWxlY3RvcixcbiAqIGFzIHRoZXJlIGlzIHBvdGVudGlhbCBmb3Igb3B0aW1pemF0aW9uXG4gKiAoc29tZSB0eXBlcyBvZiBzZWxlY3RvcnMgYXJlIGZhc3RlciB0aGFuIG90aGVycylcbiAqXG4gKiBAcGFyYW0gYXJyIFNlbGVjdG9yIHRvIHNvcnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc29ydEJ5UHJvY2VkdXJlKGFycikge1xuICAgIGNvbnN0IHByb2NzID0gYXJyLm1hcChnZXRQcm9jZWR1cmUpO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHByb2NOZXcgPSBwcm9jc1tpXTtcbiAgICAgICAgaWYgKHByb2NOZXcgPCAwKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGZvciAobGV0IGogPSBpIC0gMTsgaiA+PSAwICYmIHByb2NOZXcgPCBwcm9jc1tqXTsgai0tKSB7XG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9IGFycltqICsgMV07XG4gICAgICAgICAgICBhcnJbaiArIDFdID0gYXJyW2pdO1xuICAgICAgICAgICAgYXJyW2pdID0gdG9rZW47XG4gICAgICAgICAgICBwcm9jc1tqICsgMV0gPSBwcm9jc1tqXTtcbiAgICAgICAgICAgIHByb2NzW2pdID0gcHJvY05ldztcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFByb2NlZHVyZSh0b2tlbikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgbGV0IHByb2MgPSAoX2EgPSBwcm9jZWR1cmUuZ2V0KHRva2VuLnR5cGUpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAtMTtcbiAgICBpZiAodG9rZW4udHlwZSA9PT0gU2VsZWN0b3JUeXBlLkF0dHJpYnV0ZSkge1xuICAgICAgICBwcm9jID0gKF9iID0gYXR0cmlidXRlcy5nZXQodG9rZW4uYWN0aW9uKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogNDtcbiAgICAgICAgaWYgKHRva2VuLmFjdGlvbiA9PT0gQXR0cmlidXRlQWN0aW9uLkVxdWFscyAmJiB0b2tlbi5uYW1lID09PSBcImlkXCIpIHtcbiAgICAgICAgICAgIC8vIFByZWZlciBJRCBzZWxlY3RvcnMgKGVnLiAjSUQpXG4gICAgICAgICAgICBwcm9jID0gOTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4uaWdub3JlQ2FzZSkge1xuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIElnbm9yZUNhc2UgYWRkcyBzb21lIG92ZXJoZWFkLCBwcmVmZXIgXCJub3JtYWxcIiB0b2tlblxuICAgICAgICAgICAgICogdGhpcyBpcyBhIGJpbmFyeSBvcGVyYXRpb24sIHRvIGVuc3VyZSBpdCdzIHN0aWxsIGFuIGludFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwcm9jID4+PSAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuLnR5cGUgPT09IFNlbGVjdG9yVHlwZS5Qc2V1ZG8pIHtcbiAgICAgICAgaWYgKCF0b2tlbi5kYXRhKSB7XG4gICAgICAgICAgICBwcm9jID0gMztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0b2tlbi5uYW1lID09PSBcImhhc1wiIHx8IHRva2VuLm5hbWUgPT09IFwiY29udGFpbnNcIikge1xuICAgICAgICAgICAgcHJvYyA9IDA7IC8vIEV4cGVuc2l2ZSBpbiBhbnkgY2FzZVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodG9rZW4uZGF0YSkpIHtcbiAgICAgICAgICAgIC8vIEVnLiA6bWF0Y2hlcywgOm5vdFxuICAgICAgICAgICAgcHJvYyA9IE1hdGgubWluKC4uLnRva2VuLmRhdGEubWFwKChkKSA9PiBNYXRoLm1pbiguLi5kLm1hcChnZXRQcm9jZWR1cmUpKSkpO1xuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSB0cmF2ZXJzYWxzLCB0cnkgdG8gYXZvaWQgZXhlY3V0aW5nIHRoaXMgc2VsZWN0b3JcbiAgICAgICAgICAgIGlmIChwcm9jIDwgMCkge1xuICAgICAgICAgICAgICAgIHByb2MgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcHJvYyA9IDI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByb2M7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb3J0LmpzLm1hcCIsImltcG9ydCBib29sYmFzZSBmcm9tIFwiYm9vbGJhc2VcIjtcbi8qKlxuICogQWxsIHJlc2VydmVkIGNoYXJhY3RlcnMgaW4gYSByZWdleCwgdXNlZCBmb3IgZXNjYXBpbmcuXG4gKlxuICogVGFrZW4gZnJvbSBYUmVnRXhwLCAoYykgMjAwNy0yMDIwIFN0ZXZlbiBMZXZpdGhhbiB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zbGV2aXRoYW4veHJlZ2V4cC9ibG9iLzk1ZWVlYmViOGZhYzg3NTRkNTRlYWZlMmI0NzQzNjYxYWMxY2YwMjgvc3JjL3hyZWdleHAuanMjTDc5NFxuICovXG5jb25zdCByZUNoYXJzID0gL1stW1xcXXt9KCkqKz8uLFxcXFxeJHwjXFxzXS9nO1xuZnVuY3Rpb24gZXNjYXBlUmVnZXgodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZShyZUNoYXJzLCBcIlxcXFwkJlwiKTtcbn1cbi8qKlxuICogQXR0cmlidXRlcyB0aGF0IGFyZSBjYXNlLWluc2Vuc2l0aXZlIGluIEhUTUwuXG4gKlxuICogQHByaXZhdGVcbiAqIEBzZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2VtYW50aWNzLW90aGVyLmh0bWwjY2FzZS1zZW5zaXRpdml0eS1vZi1zZWxlY3RvcnNcbiAqL1xuY29uc3QgY2FzZUluc2Vuc2l0aXZlQXR0cmlidXRlcyA9IG5ldyBTZXQoW1xuICAgIFwiYWNjZXB0XCIsXG4gICAgXCJhY2NlcHQtY2hhcnNldFwiLFxuICAgIFwiYWxpZ25cIixcbiAgICBcImFsaW5rXCIsXG4gICAgXCJheGlzXCIsXG4gICAgXCJiZ2NvbG9yXCIsXG4gICAgXCJjaGFyc2V0XCIsXG4gICAgXCJjaGVja2VkXCIsXG4gICAgXCJjbGVhclwiLFxuICAgIFwiY29kZXR5cGVcIixcbiAgICBcImNvbG9yXCIsXG4gICAgXCJjb21wYWN0XCIsXG4gICAgXCJkZWNsYXJlXCIsXG4gICAgXCJkZWZlclwiLFxuICAgIFwiZGlyXCIsXG4gICAgXCJkaXJlY3Rpb25cIixcbiAgICBcImRpc2FibGVkXCIsXG4gICAgXCJlbmN0eXBlXCIsXG4gICAgXCJmYWNlXCIsXG4gICAgXCJmcmFtZVwiLFxuICAgIFwiaHJlZmxhbmdcIixcbiAgICBcImh0dHAtZXF1aXZcIixcbiAgICBcImxhbmdcIixcbiAgICBcImxhbmd1YWdlXCIsXG4gICAgXCJsaW5rXCIsXG4gICAgXCJtZWRpYVwiLFxuICAgIFwibWV0aG9kXCIsXG4gICAgXCJtdWx0aXBsZVwiLFxuICAgIFwibm9ocmVmXCIsXG4gICAgXCJub3Jlc2l6ZVwiLFxuICAgIFwibm9zaGFkZVwiLFxuICAgIFwibm93cmFwXCIsXG4gICAgXCJyZWFkb25seVwiLFxuICAgIFwicmVsXCIsXG4gICAgXCJyZXZcIixcbiAgICBcInJ1bGVzXCIsXG4gICAgXCJzY29wZVwiLFxuICAgIFwic2Nyb2xsaW5nXCIsXG4gICAgXCJzZWxlY3RlZFwiLFxuICAgIFwic2hhcGVcIixcbiAgICBcInRhcmdldFwiLFxuICAgIFwidGV4dFwiLFxuICAgIFwidHlwZVwiLFxuICAgIFwidmFsaWduXCIsXG4gICAgXCJ2YWx1ZXR5cGVcIixcbiAgICBcInZsaW5rXCIsXG5dKTtcbmZ1bmN0aW9uIHNob3VsZElnbm9yZUNhc2Uoc2VsZWN0b3IsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yLmlnbm9yZUNhc2UgPT09IFwiYm9vbGVhblwiXG4gICAgICAgID8gc2VsZWN0b3IuaWdub3JlQ2FzZVxuICAgICAgICA6IHNlbGVjdG9yLmlnbm9yZUNhc2UgPT09IFwicXVpcmtzXCJcbiAgICAgICAgICAgID8gISFvcHRpb25zLnF1aXJrc01vZGVcbiAgICAgICAgICAgIDogIW9wdGlvbnMueG1sTW9kZSAmJiBjYXNlSW5zZW5zaXRpdmVBdHRyaWJ1dGVzLmhhcyhzZWxlY3Rvci5uYW1lKTtcbn1cbi8qKlxuICogQXR0cmlidXRlIHNlbGVjdG9yc1xuICovXG5leHBvcnQgY29uc3QgYXR0cmlidXRlUnVsZXMgPSB7XG4gICAgZXF1YWxzKG5leHQsIGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBhZGFwdGVyIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCB7IG5hbWUgfSA9IGRhdGE7XG4gICAgICAgIGxldCB7IHZhbHVlIH0gPSBkYXRhO1xuICAgICAgICBpZiAoc2hvdWxkSWdub3JlQ2FzZShkYXRhLCBvcHRpb25zKSkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIChlbGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXR0ciA9IGFkYXB0ZXIuZ2V0QXR0cmlidXRlVmFsdWUoZWxlbSwgbmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhdHRyICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgYXR0ci5sZW5ndGggPT09IHZhbHVlLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IHZhbHVlICYmXG4gICAgICAgICAgICAgICAgICAgIG5leHQoZWxlbSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKGVsZW0pID0+IGFkYXB0ZXIuZ2V0QXR0cmlidXRlVmFsdWUoZWxlbSwgbmFtZSkgPT09IHZhbHVlICYmIG5leHQoZWxlbSk7XG4gICAgfSxcbiAgICBoeXBoZW4obmV4dCwgZGF0YSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGFkYXB0ZXIgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gZGF0YTtcbiAgICAgICAgbGV0IHsgdmFsdWUgfSA9IGRhdGE7XG4gICAgICAgIGNvbnN0IGxlbiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgaWYgKHNob3VsZElnbm9yZUNhc2UoZGF0YSwgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBoeXBoZW5JQyhlbGVtKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXR0ciA9IGFkYXB0ZXIuZ2V0QXR0cmlidXRlVmFsdWUoZWxlbSwgbmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhdHRyICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgKGF0dHIubGVuZ3RoID09PSBsZW4gfHwgYXR0ci5jaGFyQXQobGVuKSA9PT0gXCItXCIpICYmXG4gICAgICAgICAgICAgICAgICAgIGF0dHIuc3Vic3RyKDAsIGxlbikudG9Mb3dlckNhc2UoKSA9PT0gdmFsdWUgJiZcbiAgICAgICAgICAgICAgICAgICAgbmV4dChlbGVtKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBoeXBoZW4oZWxlbSkge1xuICAgICAgICAgICAgY29uc3QgYXR0ciA9IGFkYXB0ZXIuZ2V0QXR0cmlidXRlVmFsdWUoZWxlbSwgbmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gKGF0dHIgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIChhdHRyLmxlbmd0aCA9PT0gbGVuIHx8IGF0dHIuY2hhckF0KGxlbikgPT09IFwiLVwiKSAmJlxuICAgICAgICAgICAgICAgIGF0dHIuc3Vic3RyKDAsIGxlbikgPT09IHZhbHVlICYmXG4gICAgICAgICAgICAgICAgbmV4dChlbGVtKSk7XG4gICAgICAgIH07XG4gICAgfSxcbiAgICBlbGVtZW50KG5leHQsIGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBhZGFwdGVyIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBkYXRhO1xuICAgICAgICBpZiAoL1xccy8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBib29sYmFzZS5mYWxzZUZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGAoPzpefFxcXFxzKSR7ZXNjYXBlUmVnZXgodmFsdWUpfSg/OiR8XFxcXHMpYCwgc2hvdWxkSWdub3JlQ2FzZShkYXRhLCBvcHRpb25zKSA/IFwiaVwiIDogXCJcIik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBlbGVtZW50KGVsZW0pIHtcbiAgICAgICAgICAgIGNvbnN0IGF0dHIgPSBhZGFwdGVyLmdldEF0dHJpYnV0ZVZhbHVlKGVsZW0sIG5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIChhdHRyICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICBhdHRyLmxlbmd0aCA+PSB2YWx1ZS5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICByZWdleC50ZXN0KGF0dHIpICYmXG4gICAgICAgICAgICAgICAgbmV4dChlbGVtKSk7XG4gICAgICAgIH07XG4gICAgfSxcbiAgICBleGlzdHMobmV4dCwgeyBuYW1lIH0sIHsgYWRhcHRlciB9KSB7XG4gICAgICAgIHJldHVybiAoZWxlbSkgPT4gYWRhcHRlci5oYXNBdHRyaWIoZWxlbSwgbmFtZSkgJiYgbmV4dChlbGVtKTtcbiAgICB9LFxuICAgIHN0YXJ0KG5leHQsIGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBhZGFwdGVyIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCB7IG5hbWUgfSA9IGRhdGE7XG4gICAgICAgIGxldCB7IHZhbHVlIH0gPSBkYXRhO1xuICAgICAgICBjb25zdCBsZW4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBib29sYmFzZS5mYWxzZUZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZElnbm9yZUNhc2UoZGF0YSwgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHJldHVybiAoZWxlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHIgPSBhZGFwdGVyLmdldEF0dHJpYnV0ZVZhbHVlKGVsZW0sIG5hbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoYXR0ciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgIGF0dHIubGVuZ3RoID49IGxlbiAmJlxuICAgICAgICAgICAgICAgICAgICBhdHRyLnN1YnN0cigwLCBsZW4pLnRvTG93ZXJDYXNlKCkgPT09IHZhbHVlICYmXG4gICAgICAgICAgICAgICAgICAgIG5leHQoZWxlbSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKGVsZW0pID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiAhISgoX2EgPSBhZGFwdGVyLmdldEF0dHJpYnV0ZVZhbHVlKGVsZW0sIG5hbWUpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3RhcnRzV2l0aCh2YWx1ZSkpICYmXG4gICAgICAgICAgICAgICAgbmV4dChlbGVtKTtcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGVuZChuZXh0LCBkYXRhLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgYWRhcHRlciB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBuYW1lIH0gPSBkYXRhO1xuICAgICAgICBsZXQgeyB2YWx1ZSB9ID0gZGF0YTtcbiAgICAgICAgY29uc3QgbGVuID0gLXZhbHVlLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGJvb2xiYXNlLmZhbHNlRnVuYztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvdWxkSWdub3JlQ2FzZShkYXRhLCBvcHRpb25zKSkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIChlbGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIHJldHVybiAoKF9hID0gYWRhcHRlclxuICAgICAgICAgICAgICAgICAgICAuZ2V0QXR0cmlidXRlVmFsdWUoZWxlbSwgbmFtZSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdWJzdHIobGVuKS50b0xvd2VyQ2FzZSgpKSA9PT0gdmFsdWUgJiYgbmV4dChlbGVtKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChlbGVtKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gISEoKF9hID0gYWRhcHRlci5nZXRBdHRyaWJ1dGVWYWx1ZShlbGVtLCBuYW1lKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmVuZHNXaXRoKHZhbHVlKSkgJiZcbiAgICAgICAgICAgICAgICBuZXh0KGVsZW0pO1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgYW55KG5leHQsIGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBhZGFwdGVyIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBkYXRhO1xuICAgICAgICBpZiAodmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBib29sYmFzZS5mYWxzZUZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZElnbm9yZUNhc2UoZGF0YSwgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdleCh2YWx1ZSksIFwiaVwiKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBhbnlJQyhlbGVtKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXR0ciA9IGFkYXB0ZXIuZ2V0QXR0cmlidXRlVmFsdWUoZWxlbSwgbmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhdHRyICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgYXR0ci5sZW5ndGggPj0gdmFsdWUubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgIHJlZ2V4LnRlc3QoYXR0cikgJiZcbiAgICAgICAgICAgICAgICAgICAgbmV4dChlbGVtKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoZWxlbSkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuICEhKChfYSA9IGFkYXB0ZXIuZ2V0QXR0cmlidXRlVmFsdWUoZWxlbSwgbmFtZSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pbmNsdWRlcyh2YWx1ZSkpICYmXG4gICAgICAgICAgICAgICAgbmV4dChlbGVtKTtcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIG5vdChuZXh0LCBkYXRhLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgYWRhcHRlciB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBuYW1lIH0gPSBkYXRhO1xuICAgICAgICBsZXQgeyB2YWx1ZSB9ID0gZGF0YTtcbiAgICAgICAgaWYgKHZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gKGVsZW0pID0+ICEhYWRhcHRlci5nZXRBdHRyaWJ1dGVWYWx1ZShlbGVtLCBuYW1lKSAmJiBuZXh0KGVsZW0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNob3VsZElnbm9yZUNhc2UoZGF0YSwgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHJldHVybiAoZWxlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHIgPSBhZGFwdGVyLmdldEF0dHJpYnV0ZVZhbHVlKGVsZW0sIG5hbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoKGF0dHIgPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICBhdHRyLmxlbmd0aCAhPT0gdmFsdWUubGVuZ3RoIHx8XG4gICAgICAgICAgICAgICAgICAgIGF0dHIudG9Mb3dlckNhc2UoKSAhPT0gdmFsdWUpICYmXG4gICAgICAgICAgICAgICAgICAgIG5leHQoZWxlbSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKGVsZW0pID0+IGFkYXB0ZXIuZ2V0QXR0cmlidXRlVmFsdWUoZWxlbSwgbmFtZSkgIT09IHZhbHVlICYmIG5leHQoZWxlbSk7XG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdHRyaWJ1dGVzLmpzLm1hcCIsIi8vIEZvbGxvd2luZyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jbnRoLWNoaWxkLXBzZXVkb1xuLy8gV2hpdGVzcGFjZSBhcyBwZXIgaHR0cHM6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy0zLyNsZXggaXMgXCIgXFx0XFxyXFxuXFxmXCJcbmNvbnN0IHdoaXRlc3BhY2UgPSBuZXcgU2V0KFs5LCAxMCwgMTIsIDEzLCAzMl0pO1xuY29uc3QgWkVSTyA9IFwiMFwiLmNoYXJDb2RlQXQoMCk7XG5jb25zdCBOSU5FID0gXCI5XCIuY2hhckNvZGVBdCgwKTtcbi8qKlxuICogUGFyc2VzIGFuIGV4cHJlc3Npb24uXG4gKlxuICogQHRocm93cyBBbiBgRXJyb3JgIGlmIHBhcnNpbmcgZmFpbHMuXG4gKiBAcmV0dXJucyBBbiBhcnJheSBjb250YWluaW5nIHRoZSBpbnRlZ2VyIHN0ZXAgc2l6ZSBhbmQgdGhlIGludGVnZXIgb2Zmc2V0IG9mIHRoZSBudGggcnVsZS5cbiAqIEBleGFtcGxlIG50aENoZWNrLnBhcnNlKFwiMm4rM1wiKTsgLy8gcmV0dXJucyBbMiwgM11cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKGZvcm11bGEpIHtcbiAgICBmb3JtdWxhID0gZm9ybXVsYS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoZm9ybXVsYSA9PT0gXCJldmVuXCIpIHtcbiAgICAgICAgcmV0dXJuIFsyLCAwXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZm9ybXVsYSA9PT0gXCJvZGRcIikge1xuICAgICAgICByZXR1cm4gWzIsIDFdO1xuICAgIH1cbiAgICAvLyBQYXJzZSBbIFsnLSd8JysnXT8gSU5URUdFUj8ge059IFsgUyogWyctJ3wnKyddIFMqIElOVEVHRVIgXT9cbiAgICBsZXQgaWR4ID0gMDtcbiAgICBsZXQgYSA9IDA7XG4gICAgbGV0IHNpZ24gPSByZWFkU2lnbigpO1xuICAgIGxldCBudW1iZXIgPSByZWFkTnVtYmVyKCk7XG4gICAgaWYgKGlkeCA8IGZvcm11bGEubGVuZ3RoICYmIGZvcm11bGEuY2hhckF0KGlkeCkgPT09IFwiblwiKSB7XG4gICAgICAgIGlkeCsrO1xuICAgICAgICBhID0gc2lnbiAqIChudW1iZXIgIT09IG51bGwgJiYgbnVtYmVyICE9PSB2b2lkIDAgPyBudW1iZXIgOiAxKTtcbiAgICAgICAgc2tpcFdoaXRlc3BhY2UoKTtcbiAgICAgICAgaWYgKGlkeCA8IGZvcm11bGEubGVuZ3RoKSB7XG4gICAgICAgICAgICBzaWduID0gcmVhZFNpZ24oKTtcbiAgICAgICAgICAgIHNraXBXaGl0ZXNwYWNlKCk7XG4gICAgICAgICAgICBudW1iZXIgPSByZWFkTnVtYmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzaWduID0gbnVtYmVyID0gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBUaHJvdyBpZiB0aGVyZSBpcyBhbnl0aGluZyBlbHNlXG4gICAgaWYgKG51bWJlciA9PT0gbnVsbCB8fCBpZHggPCBmb3JtdWxhLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG4tdGggcnVsZSBjb3VsZG4ndCBiZSBwYXJzZWQgKCcke2Zvcm11bGF9JylgKTtcbiAgICB9XG4gICAgcmV0dXJuIFthLCBzaWduICogbnVtYmVyXTtcbiAgICBmdW5jdGlvbiByZWFkU2lnbigpIHtcbiAgICAgICAgaWYgKGZvcm11bGEuY2hhckF0KGlkeCkgPT09IFwiLVwiKSB7XG4gICAgICAgICAgICBpZHgrKztcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybXVsYS5jaGFyQXQoaWR4KSA9PT0gXCIrXCIpIHtcbiAgICAgICAgICAgIGlkeCsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWFkTnVtYmVyKCkge1xuICAgICAgICBjb25zdCBzdGFydCA9IGlkeDtcbiAgICAgICAgbGV0IHZhbHVlID0gMDtcbiAgICAgICAgd2hpbGUgKGlkeCA8IGZvcm11bGEubGVuZ3RoICYmXG4gICAgICAgICAgICBmb3JtdWxhLmNoYXJDb2RlQXQoaWR4KSA+PSBaRVJPICYmXG4gICAgICAgICAgICBmb3JtdWxhLmNoYXJDb2RlQXQoaWR4KSA8PSBOSU5FKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICogMTAgKyAoZm9ybXVsYS5jaGFyQ29kZUF0KGlkeCkgLSBaRVJPKTtcbiAgICAgICAgICAgIGlkeCsrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJldHVybiBgbnVsbGAgaWYgd2UgZGlkbid0IHJlYWQgYW55dGhpbmcuXG4gICAgICAgIHJldHVybiBpZHggPT09IHN0YXJ0ID8gbnVsbCA6IHZhbHVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBza2lwV2hpdGVzcGFjZSgpIHtcbiAgICAgICAgd2hpbGUgKGlkeCA8IGZvcm11bGEubGVuZ3RoICYmXG4gICAgICAgICAgICB3aGl0ZXNwYWNlLmhhcyhmb3JtdWxhLmNoYXJDb2RlQXQoaWR4KSkpIHtcbiAgICAgICAgICAgIGlkeCsrO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyc2UuanMubWFwIiwiaW1wb3J0IHsgcGFyc2UgfSBmcm9tIFwiLi9wYXJzZS5qc1wiO1xuaW1wb3J0IHsgY29tcGlsZSwgZ2VuZXJhdGUgfSBmcm9tIFwiLi9jb21waWxlLmpzXCI7XG5leHBvcnQgeyBwYXJzZSwgY29tcGlsZSwgZ2VuZXJhdGUgfTtcbi8qKlxuICogUGFyc2VzIGFuZCBjb21waWxlcyBhIGZvcm11bGEgdG8gYSBoaWdobHkgb3B0aW1pemVkIGZ1bmN0aW9uLlxuICogQ29tYmluYXRpb24gb2Yge0BsaW5rIHBhcnNlfSBhbmQge0BsaW5rIGNvbXBpbGV9LlxuICpcbiAqIElmIHRoZSBmb3JtdWxhIGRvZXNuJ3QgbWF0Y2ggYW55IGVsZW1lbnRzLFxuICogaXQgcmV0dXJucyBbYGJvb2xiYXNlYF0oaHR0cHM6Ly9naXRodWIuY29tL2ZiNTUvYm9vbGJhc2UpJ3MgYGZhbHNlRnVuY2AuXG4gKiBPdGhlcndpc2UsIGEgZnVuY3Rpb24gYWNjZXB0aW5nIGFuIF9pbmRleF8gaXMgcmV0dXJuZWQsIHdoaWNoIHJldHVybnNcbiAqIHdoZXRoZXIgb3Igbm90IHRoZSBwYXNzZWQgX2luZGV4XyBtYXRjaGVzIHRoZSBmb3JtdWxhLlxuICpcbiAqIE5vdGU6IFRoZSBudGgtcnVsZSBzdGFydHMgY291bnRpbmcgYXQgYDFgLCB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gYXQgYDBgLlxuICpcbiAqIEBwYXJhbSBmb3JtdWxhIFRoZSBmb3JtdWxhIHRvIGNvbXBpbGUuXG4gKiBAZXhhbXBsZVxuICogY29uc3QgY2hlY2sgPSBudGhDaGVjayhcIjJuKzNcIik7XG4gKlxuICogY2hlY2soMCk7IC8vIGBmYWxzZWBcbiAqIGNoZWNrKDEpOyAvLyBgZmFsc2VgXG4gKiBjaGVjaygyKTsgLy8gYHRydWVgXG4gKiBjaGVjaygzKTsgLy8gYGZhbHNlYFxuICogY2hlY2soNCk7IC8vIGB0cnVlYFxuICogY2hlY2soNSk7IC8vIGBmYWxzZWBcbiAqIGNoZWNrKDYpOyAvLyBgdHJ1ZWBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbnRoQ2hlY2soZm9ybXVsYSkge1xuICAgIHJldHVybiBjb21waWxlKHBhcnNlKGZvcm11bGEpKTtcbn1cbi8qKlxuICogUGFyc2VzIGFuZCBjb21waWxlcyBhIGZvcm11bGEgdG8gYSBnZW5lcmF0b3IgdGhhdCBwcm9kdWNlcyBhIHNlcXVlbmNlIG9mIGluZGljZXMuXG4gKiBDb21iaW5hdGlvbiBvZiB7QGxpbmsgcGFyc2V9IGFuZCB7QGxpbmsgZ2VuZXJhdGV9LlxuICpcbiAqIEBwYXJhbSBmb3JtdWxhIFRoZSBmb3JtdWxhIHRvIGNvbXBpbGUuXG4gKiBAcmV0dXJucyBBIGZ1bmN0aW9uIHRoYXQgcHJvZHVjZXMgYSBzZXF1ZW5jZSBvZiBpbmRpY2VzLlxuICogQGV4YW1wbGUgPGNhcHRpb24+QWx3YXlzIGluY3JlYXNpbmc8L2NhcHRpb24+XG4gKlxuICogYGBganNcbiAqIGNvbnN0IGdlbiA9IG50aENoZWNrLnNlcXVlbmNlKCcybiszJylcbiAqXG4gKiBnZW4oKSAvLyBgMWBcbiAqIGdlbigpIC8vIGAzYFxuICogZ2VuKCkgLy8gYDVgXG4gKiBnZW4oKSAvLyBgOGBcbiAqIGdlbigpIC8vIGAxMWBcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPldpdGggZW5kIHZhbHVlPC9jYXB0aW9uPlxuICpcbiAqIGBgYGpzXG4gKlxuICogY29uc3QgZ2VuID0gbnRoQ2hlY2suc2VxdWVuY2UoJy0ybis1Jyk7XG4gKlxuICogZ2VuKCkgLy8gMFxuICogZ2VuKCkgLy8gMlxuICogZ2VuKCkgLy8gNFxuICogZ2VuKCkgLy8gbnVsbFxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXF1ZW5jZShmb3JtdWxhKSB7XG4gICAgcmV0dXJuIGdlbmVyYXRlKHBhcnNlKGZvcm11bGEpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCBib29sYmFzZSBmcm9tIFwiYm9vbGJhc2VcIjtcbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmIGFuIGVsZW1lbnRzIGluZGV4IG1hdGNoZXMgdGhlIGdpdmVuIHJ1bGVcbiAqIGhpZ2hseSBvcHRpbWl6ZWQgdG8gcmV0dXJuIHRoZSBmYXN0ZXN0IHNvbHV0aW9uLlxuICpcbiAqIEBwYXJhbSBwYXJzZWQgQSB0dXBsZSBbYSwgYl0sIGFzIHJldHVybmVkIGJ5IGBwYXJzZWAuXG4gKiBAcmV0dXJucyBBIGhpZ2hseSBvcHRpbWl6ZWQgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHdoZXRoZXIgYW4gaW5kZXggbWF0Y2hlcyB0aGUgbnRoLWNoZWNrLlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogY29uc3QgY2hlY2sgPSBudGhDaGVjay5jb21waWxlKFsyLCAzXSk7XG4gKlxuICogY2hlY2soMCk7IC8vIGBmYWxzZWBcbiAqIGNoZWNrKDEpOyAvLyBgZmFsc2VgXG4gKiBjaGVjaygyKTsgLy8gYHRydWVgXG4gKiBjaGVjaygzKTsgLy8gYGZhbHNlYFxuICogY2hlY2soNCk7IC8vIGB0cnVlYFxuICogY2hlY2soNSk7IC8vIGBmYWxzZWBcbiAqIGNoZWNrKDYpOyAvLyBgdHJ1ZWBcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZShwYXJzZWQpIHtcbiAgICBjb25zdCBhID0gcGFyc2VkWzBdO1xuICAgIC8vIFN1YnRyYWN0IDEgZnJvbSBgYmAsIHRvIGNvbnZlcnQgZnJvbSBvbmUtIHRvIHplcm8taW5kZXhlZC5cbiAgICBjb25zdCBiID0gcGFyc2VkWzFdIC0gMTtcbiAgICAvKlxuICAgICAqIFdoZW4gYGIgPD0gMGAsIGBhICogbmAgd29uJ3QgYmUgbGVhZCB0byBhbnkgbWF0Y2hlcyBmb3IgYGEgPCAwYC5cbiAgICAgKiBCZXNpZGVzLCB0aGUgc3BlY2lmaWNhdGlvbiBzdGF0ZXMgdGhhdCBubyBlbGVtZW50cyBhcmVcbiAgICAgKiBtYXRjaGVkIHdoZW4gYGFgIGFuZCBgYmAgYXJlIDAuXG4gICAgICpcbiAgICAgKiBgYiA8IDBgIGhlcmUgYXMgd2Ugc3VidHJhY3RlZCAxIGZyb20gYGJgIGFib3ZlLlxuICAgICAqL1xuICAgIGlmIChiIDwgMCAmJiBhIDw9IDApXG4gICAgICAgIHJldHVybiBib29sYmFzZS5mYWxzZUZ1bmM7XG4gICAgLy8gV2hlbiBgYWAgaXMgaW4gdGhlIHJhbmdlIC0xLi4xLCBpdCBtYXRjaGVzIGFueSBlbGVtZW50IChzbyBvbmx5IGBiYCBpcyBjaGVja2VkKS5cbiAgICBpZiAoYSA9PT0gLTEpXG4gICAgICAgIHJldHVybiAoaW5kZXgpID0+IGluZGV4IDw9IGI7XG4gICAgaWYgKGEgPT09IDApXG4gICAgICAgIHJldHVybiAoaW5kZXgpID0+IGluZGV4ID09PSBiO1xuICAgIC8vIFdoZW4gYGIgPD0gMGAgYW5kIGBhID09PSAxYCwgdGhleSBtYXRjaCBhbnkgZWxlbWVudC5cbiAgICBpZiAoYSA9PT0gMSlcbiAgICAgICAgcmV0dXJuIGIgPCAwID8gYm9vbGJhc2UudHJ1ZUZ1bmMgOiAoaW5kZXgpID0+IGluZGV4ID49IGI7XG4gICAgLypcbiAgICAgKiBPdGhlcndpc2UsIG1vZHVsbyBjYW4gYmUgdXNlZCB0byBjaGVjayBpZiB0aGVyZSBpcyBhIG1hdGNoLlxuICAgICAqXG4gICAgICogTW9kdWxvIGRvZXNuJ3QgY2FyZSBhYm91dCB0aGUgc2lnbiwgc28gbGV0J3MgdXNlIGBhYHMgYWJzb2x1dGUgdmFsdWUuXG4gICAgICovXG4gICAgY29uc3QgYWJzQSA9IE1hdGguYWJzKGEpO1xuICAgIC8vIEdldCBgYiBtb2QgYWAsICsgYSBpZiB0aGlzIGlzIG5lZ2F0aXZlLlxuICAgIGNvbnN0IGJNb2QgPSAoKGIgJSBhYnNBKSArIGFic0EpICUgYWJzQTtcbiAgICByZXR1cm4gYSA+IDFcbiAgICAgICAgPyAoaW5kZXgpID0+IGluZGV4ID49IGIgJiYgaW5kZXggJSBhYnNBID09PSBiTW9kXG4gICAgICAgIDogKGluZGV4KSA9PiBpbmRleCA8PSBiICYmIGluZGV4ICUgYWJzQSA9PT0gYk1vZDtcbn1cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgcHJvZHVjZXMgYSBtb25vdG9ub3VzbHkgaW5jcmVhc2luZyBzZXF1ZW5jZSBvZiBpbmRpY2VzLlxuICpcbiAqIElmIHRoZSBzZXF1ZW5jZSBoYXMgYW4gZW5kLCB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gd2lsbCByZXR1cm4gYG51bGxgIGFmdGVyXG4gKiB0aGUgbGFzdCBpbmRleCBpbiB0aGUgc2VxdWVuY2UuXG4gKlxuICogQHBhcmFtIHBhcnNlZCBBIHR1cGxlIFthLCBiXSwgYXMgcmV0dXJuZWQgYnkgYHBhcnNlYC5cbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhIHNlcXVlbmNlIG9mIGluZGljZXMuXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5BbHdheXMgaW5jcmVhc2luZyAoMm4rMyk8L2NhcHRpb24+XG4gKlxuICogYGBganNcbiAqIGNvbnN0IGdlbiA9IG50aENoZWNrLmdlbmVyYXRlKFsyLCAzXSlcbiAqXG4gKiBnZW4oKSAvLyBgMWBcbiAqIGdlbigpIC8vIGAzYFxuICogZ2VuKCkgLy8gYDVgXG4gKiBnZW4oKSAvLyBgOGBcbiAqIGdlbigpIC8vIGAxMWBcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPldpdGggZW5kIHZhbHVlICgtMm4rMTApPC9jYXB0aW9uPlxuICpcbiAqIGBgYGpzXG4gKlxuICogY29uc3QgZ2VuID0gbnRoQ2hlY2suZ2VuZXJhdGUoWy0yLCA1XSk7XG4gKlxuICogZ2VuKCkgLy8gMFxuICogZ2VuKCkgLy8gMlxuICogZ2VuKCkgLy8gNFxuICogZ2VuKCkgLy8gbnVsbFxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZShwYXJzZWQpIHtcbiAgICBjb25zdCBhID0gcGFyc2VkWzBdO1xuICAgIC8vIFN1YnRyYWN0IDEgZnJvbSBgYmAsIHRvIGNvbnZlcnQgZnJvbSBvbmUtIHRvIHplcm8taW5kZXhlZC5cbiAgICBsZXQgYiA9IHBhcnNlZFsxXSAtIDE7XG4gICAgbGV0IG4gPSAwO1xuICAgIC8vIE1ha2Ugc3VyZSB0byBhbHdheXMgcmV0dXJuIGFuIGluY3JlYXNpbmcgc2VxdWVuY2VcbiAgICBpZiAoYSA8IDApIHtcbiAgICAgICAgY29uc3QgYVBvcyA9IC1hO1xuICAgICAgICAvLyBHZXQgYGIgbW9kIGFgXG4gICAgICAgIGNvbnN0IG1pblZhbHVlID0gKChiICUgYVBvcykgKyBhUG9zKSAlIGFQb3M7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSBtaW5WYWx1ZSArIGFQb3MgKiBuKys7XG4gICAgICAgICAgICByZXR1cm4gdmFsID4gYiA/IG51bGwgOiB2YWw7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChhID09PSAwKVxuICAgICAgICByZXR1cm4gYiA8IDBcbiAgICAgICAgICAgID8gLy8gVGhlcmUgYXJlIG5vIHJlc3VsdCDigJQgYWx3YXlzIHJldHVybiBgbnVsbGBcbiAgICAgICAgICAgICAgICAoKSA9PiBudWxsXG4gICAgICAgICAgICA6IC8vIFJldHVybiBgYmAgZXhhY3RseSBvbmNlXG4gICAgICAgICAgICAgICAgKCkgPT4gKG4rKyA9PT0gMCA/IGIgOiBudWxsKTtcbiAgICBpZiAoYiA8IDApIHtcbiAgICAgICAgYiArPSBhICogTWF0aC5jZWlsKC1iIC8gYSk7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiBhICogbisrICsgYjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBpbGUuanMubWFwIiwiaW1wb3J0IGdldE5DaGVjayBmcm9tIFwibnRoLWNoZWNrXCI7XG5pbXBvcnQgYm9vbGJhc2UgZnJvbSBcImJvb2xiYXNlXCI7XG5mdW5jdGlvbiBnZXRDaGlsZEZ1bmMobmV4dCwgYWRhcHRlcikge1xuICAgIHJldHVybiAoZWxlbSkgPT4ge1xuICAgICAgICBjb25zdCBwYXJlbnQgPSBhZGFwdGVyLmdldFBhcmVudChlbGVtKTtcbiAgICAgICAgcmV0dXJuIHBhcmVudCAhPSBudWxsICYmIGFkYXB0ZXIuaXNUYWcocGFyZW50KSAmJiBuZXh0KGVsZW0pO1xuICAgIH07XG59XG5leHBvcnQgY29uc3QgZmlsdGVycyA9IHtcbiAgICBjb250YWlucyhuZXh0LCB0ZXh0LCB7IGFkYXB0ZXIgfSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gY29udGFpbnMoZWxlbSkge1xuICAgICAgICAgICAgcmV0dXJuIG5leHQoZWxlbSkgJiYgYWRhcHRlci5nZXRUZXh0KGVsZW0pLmluY2x1ZGVzKHRleHQpO1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgaWNvbnRhaW5zKG5leHQsIHRleHQsIHsgYWRhcHRlciB9KSB7XG4gICAgICAgIGNvbnN0IGl0ZXh0ID0gdGV4dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gaWNvbnRhaW5zKGVsZW0pIHtcbiAgICAgICAgICAgIHJldHVybiAobmV4dChlbGVtKSAmJlxuICAgICAgICAgICAgICAgIGFkYXB0ZXIuZ2V0VGV4dChlbGVtKS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGl0ZXh0KSk7XG4gICAgICAgIH07XG4gICAgfSxcbiAgICAvLyBMb2NhdGlvbiBzcGVjaWZpYyBtZXRob2RzXG4gICAgXCJudGgtY2hpbGRcIihuZXh0LCBydWxlLCB7IGFkYXB0ZXIsIGVxdWFscyB9KSB7XG4gICAgICAgIGNvbnN0IGZ1bmMgPSBnZXROQ2hlY2socnVsZSk7XG4gICAgICAgIGlmIChmdW5jID09PSBib29sYmFzZS5mYWxzZUZ1bmMpXG4gICAgICAgICAgICByZXR1cm4gYm9vbGJhc2UuZmFsc2VGdW5jO1xuICAgICAgICBpZiAoZnVuYyA9PT0gYm9vbGJhc2UudHJ1ZUZ1bmMpXG4gICAgICAgICAgICByZXR1cm4gZ2V0Q2hpbGRGdW5jKG5leHQsIGFkYXB0ZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbnRoQ2hpbGQoZWxlbSkge1xuICAgICAgICAgICAgY29uc3Qgc2libGluZ3MgPSBhZGFwdGVyLmdldFNpYmxpbmdzKGVsZW0pO1xuICAgICAgICAgICAgbGV0IHBvcyA9IDA7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpYmxpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVxdWFscyhlbGVtLCBzaWJsaW5nc1tpXSkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGlmIChhZGFwdGVyLmlzVGFnKHNpYmxpbmdzW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuYyhwb3MpICYmIG5leHQoZWxlbSk7XG4gICAgICAgIH07XG4gICAgfSxcbiAgICBcIm50aC1sYXN0LWNoaWxkXCIobmV4dCwgcnVsZSwgeyBhZGFwdGVyLCBlcXVhbHMgfSkge1xuICAgICAgICBjb25zdCBmdW5jID0gZ2V0TkNoZWNrKHJ1bGUpO1xuICAgICAgICBpZiAoZnVuYyA9PT0gYm9vbGJhc2UuZmFsc2VGdW5jKVxuICAgICAgICAgICAgcmV0dXJuIGJvb2xiYXNlLmZhbHNlRnVuYztcbiAgICAgICAgaWYgKGZ1bmMgPT09IGJvb2xiYXNlLnRydWVGdW5jKVxuICAgICAgICAgICAgcmV0dXJuIGdldENoaWxkRnVuYyhuZXh0LCBhZGFwdGVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG50aExhc3RDaGlsZChlbGVtKSB7XG4gICAgICAgICAgICBjb25zdCBzaWJsaW5ncyA9IGFkYXB0ZXIuZ2V0U2libGluZ3MoZWxlbSk7XG4gICAgICAgICAgICBsZXQgcG9zID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBzaWJsaW5ncy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIGlmIChlcXVhbHMoZWxlbSwgc2libGluZ3NbaV0pKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBpZiAoYWRhcHRlci5pc1RhZyhzaWJsaW5nc1tpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmMocG9zKSAmJiBuZXh0KGVsZW0pO1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgXCJudGgtb2YtdHlwZVwiKG5leHQsIHJ1bGUsIHsgYWRhcHRlciwgZXF1YWxzIH0pIHtcbiAgICAgICAgY29uc3QgZnVuYyA9IGdldE5DaGVjayhydWxlKTtcbiAgICAgICAgaWYgKGZ1bmMgPT09IGJvb2xiYXNlLmZhbHNlRnVuYylcbiAgICAgICAgICAgIHJldHVybiBib29sYmFzZS5mYWxzZUZ1bmM7XG4gICAgICAgIGlmIChmdW5jID09PSBib29sYmFzZS50cnVlRnVuYylcbiAgICAgICAgICAgIHJldHVybiBnZXRDaGlsZEZ1bmMobmV4dCwgYWRhcHRlcik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBudGhPZlR5cGUoZWxlbSkge1xuICAgICAgICAgICAgY29uc3Qgc2libGluZ3MgPSBhZGFwdGVyLmdldFNpYmxpbmdzKGVsZW0pO1xuICAgICAgICAgICAgbGV0IHBvcyA9IDA7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpYmxpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFNpYmxpbmcgPSBzaWJsaW5nc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoZXF1YWxzKGVsZW0sIGN1cnJlbnRTaWJsaW5nKSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgaWYgKGFkYXB0ZXIuaXNUYWcoY3VycmVudFNpYmxpbmcpICYmXG4gICAgICAgICAgICAgICAgICAgIGFkYXB0ZXIuZ2V0TmFtZShjdXJyZW50U2libGluZykgPT09IGFkYXB0ZXIuZ2V0TmFtZShlbGVtKSkge1xuICAgICAgICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuYyhwb3MpICYmIG5leHQoZWxlbSk7XG4gICAgICAgIH07XG4gICAgfSxcbiAgICBcIm50aC1sYXN0LW9mLXR5cGVcIihuZXh0LCBydWxlLCB7IGFkYXB0ZXIsIGVxdWFscyB9KSB7XG4gICAgICAgIGNvbnN0IGZ1bmMgPSBnZXROQ2hlY2socnVsZSk7XG4gICAgICAgIGlmIChmdW5jID09PSBib29sYmFzZS5mYWxzZUZ1bmMpXG4gICAgICAgICAgICByZXR1cm4gYm9vbGJhc2UuZmFsc2VGdW5jO1xuICAgICAgICBpZiAoZnVuYyA9PT0gYm9vbGJhc2UudHJ1ZUZ1bmMpXG4gICAgICAgICAgICByZXR1cm4gZ2V0Q2hpbGRGdW5jKG5leHQsIGFkYXB0ZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbnRoTGFzdE9mVHlwZShlbGVtKSB7XG4gICAgICAgICAgICBjb25zdCBzaWJsaW5ncyA9IGFkYXB0ZXIuZ2V0U2libGluZ3MoZWxlbSk7XG4gICAgICAgICAgICBsZXQgcG9zID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBzaWJsaW5ncy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTaWJsaW5nID0gc2libGluZ3NbaV07XG4gICAgICAgICAgICAgICAgaWYgKGVxdWFscyhlbGVtLCBjdXJyZW50U2libGluZykpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGlmIChhZGFwdGVyLmlzVGFnKGN1cnJlbnRTaWJsaW5nKSAmJlxuICAgICAgICAgICAgICAgICAgICBhZGFwdGVyLmdldE5hbWUoY3VycmVudFNpYmxpbmcpID09PSBhZGFwdGVyLmdldE5hbWUoZWxlbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmMocG9zKSAmJiBuZXh0KGVsZW0pO1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgLy8gVE9ETyBkZXRlcm1pbmUgdGhlIGFjdHVhbCByb290IGVsZW1lbnRcbiAgICByb290KG5leHQsIF9ydWxlLCB7IGFkYXB0ZXIgfSkge1xuICAgICAgICByZXR1cm4gKGVsZW0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGFkYXB0ZXIuZ2V0UGFyZW50KGVsZW0pO1xuICAgICAgICAgICAgcmV0dXJuIChwYXJlbnQgPT0gbnVsbCB8fCAhYWRhcHRlci5pc1RhZyhwYXJlbnQpKSAmJiBuZXh0KGVsZW0pO1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgc2NvcGUobmV4dCwgcnVsZSwgb3B0aW9ucywgY29udGV4dCkge1xuICAgICAgICBjb25zdCB7IGVxdWFscyB9ID0gb3B0aW9ucztcbiAgICAgICAgaWYgKCFjb250ZXh0IHx8IGNvbnRleHQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAvLyBFcXVpdmFsZW50IHRvIDpyb290XG4gICAgICAgICAgICByZXR1cm4gZmlsdGVyc1tcInJvb3RcIl0obmV4dCwgcnVsZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAvLyBOT1RFOiBjYW4ndCBiZSB1bnBhY2tlZCwgYXMgOmhhcyB1c2VzIHRoaXMgZm9yIHNpZGUtZWZmZWN0c1xuICAgICAgICAgICAgcmV0dXJuIChlbGVtKSA9PiBlcXVhbHMoY29udGV4dFswXSwgZWxlbSkgJiYgbmV4dChlbGVtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKGVsZW0pID0+IGNvbnRleHQuaW5jbHVkZXMoZWxlbSkgJiYgbmV4dChlbGVtKTtcbiAgICB9LFxuICAgIGhvdmVyOiBkeW5hbWljU3RhdGVQc2V1ZG8oXCJpc0hvdmVyZWRcIiksXG4gICAgdmlzaXRlZDogZHluYW1pY1N0YXRlUHNldWRvKFwiaXNWaXNpdGVkXCIpLFxuICAgIGFjdGl2ZTogZHluYW1pY1N0YXRlUHNldWRvKFwiaXNBY3RpdmVcIiksXG59O1xuLyoqXG4gKiBEeW5hbWljIHN0YXRlIHBzZXVkb3MuIFRoZXNlIGRlcGVuZCBvbiBvcHRpb25hbCBBZGFwdGVyIG1ldGhvZHMuXG4gKlxuICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIGFkYXB0ZXIgbWV0aG9kIHRvIGNhbGwuXG4gKiBAcmV0dXJucyBQc2V1ZG8gZm9yIHRoZSBgZmlsdGVyc2Agb2JqZWN0LlxuICovXG5mdW5jdGlvbiBkeW5hbWljU3RhdGVQc2V1ZG8obmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBkeW5hbWljUHNldWRvKG5leHQsIF9ydWxlLCB7IGFkYXB0ZXIgfSkge1xuICAgICAgICBjb25zdCBmdW5jID0gYWRhcHRlcltuYW1lXTtcbiAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBib29sYmFzZS5mYWxzZUZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGFjdGl2ZShlbGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuYyhlbGVtKSAmJiBuZXh0KGVsZW0pO1xuICAgICAgICB9O1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXJzLmpzLm1hcCIsIi8vIFdoaWxlIGZpbHRlcnMgYXJlIHByZWNvbXBpbGVkLCBwc2V1ZG9zIGdldCBjYWxsZWQgd2hlbiB0aGV5IGFyZSBuZWVkZWRcbmV4cG9ydCBjb25zdCBwc2V1ZG9zID0ge1xuICAgIGVtcHR5KGVsZW0sIHsgYWRhcHRlciB9KSB7XG4gICAgICAgIHJldHVybiAhYWRhcHRlci5nZXRDaGlsZHJlbihlbGVtKS5zb21lKChlbGVtKSA9PiBcbiAgICAgICAgLy8gRklYTUU6IGBnZXRUZXh0YCBjYWxsIGlzIHBvdGVudGlhbGx5IGV4cGVuc2l2ZS5cbiAgICAgICAgYWRhcHRlci5pc1RhZyhlbGVtKSB8fCBhZGFwdGVyLmdldFRleHQoZWxlbSkgIT09IFwiXCIpO1xuICAgIH0sXG4gICAgXCJmaXJzdC1jaGlsZFwiKGVsZW0sIHsgYWRhcHRlciwgZXF1YWxzIH0pIHtcbiAgICAgICAgaWYgKGFkYXB0ZXIucHJldkVsZW1lbnRTaWJsaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gYWRhcHRlci5wcmV2RWxlbWVudFNpYmxpbmcoZWxlbSkgPT0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaXJzdENoaWxkID0gYWRhcHRlclxuICAgICAgICAgICAgLmdldFNpYmxpbmdzKGVsZW0pXG4gICAgICAgICAgICAuZmluZCgoZWxlbSkgPT4gYWRhcHRlci5pc1RhZyhlbGVtKSk7XG4gICAgICAgIHJldHVybiBmaXJzdENoaWxkICE9IG51bGwgJiYgZXF1YWxzKGVsZW0sIGZpcnN0Q2hpbGQpO1xuICAgIH0sXG4gICAgXCJsYXN0LWNoaWxkXCIoZWxlbSwgeyBhZGFwdGVyLCBlcXVhbHMgfSkge1xuICAgICAgICBjb25zdCBzaWJsaW5ncyA9IGFkYXB0ZXIuZ2V0U2libGluZ3MoZWxlbSk7XG4gICAgICAgIGZvciAobGV0IGkgPSBzaWJsaW5ncy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgaWYgKGVxdWFscyhlbGVtLCBzaWJsaW5nc1tpXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpZiAoYWRhcHRlci5pc1RhZyhzaWJsaW5nc1tpXSkpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgXCJmaXJzdC1vZi10eXBlXCIoZWxlbSwgeyBhZGFwdGVyLCBlcXVhbHMgfSkge1xuICAgICAgICBjb25zdCBzaWJsaW5ncyA9IGFkYXB0ZXIuZ2V0U2libGluZ3MoZWxlbSk7XG4gICAgICAgIGNvbnN0IGVsZW1OYW1lID0gYWRhcHRlci5nZXROYW1lKGVsZW0pO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpYmxpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50U2libGluZyA9IHNpYmxpbmdzW2ldO1xuICAgICAgICAgICAgaWYgKGVxdWFscyhlbGVtLCBjdXJyZW50U2libGluZykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpZiAoYWRhcHRlci5pc1RhZyhjdXJyZW50U2libGluZykgJiZcbiAgICAgICAgICAgICAgICBhZGFwdGVyLmdldE5hbWUoY3VycmVudFNpYmxpbmcpID09PSBlbGVtTmFtZSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIFwibGFzdC1vZi10eXBlXCIoZWxlbSwgeyBhZGFwdGVyLCBlcXVhbHMgfSkge1xuICAgICAgICBjb25zdCBzaWJsaW5ncyA9IGFkYXB0ZXIuZ2V0U2libGluZ3MoZWxlbSk7XG4gICAgICAgIGNvbnN0IGVsZW1OYW1lID0gYWRhcHRlci5nZXROYW1lKGVsZW0pO1xuICAgICAgICBmb3IgKGxldCBpID0gc2libGluZ3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTaWJsaW5nID0gc2libGluZ3NbaV07XG4gICAgICAgICAgICBpZiAoZXF1YWxzKGVsZW0sIGN1cnJlbnRTaWJsaW5nKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChhZGFwdGVyLmlzVGFnKGN1cnJlbnRTaWJsaW5nKSAmJlxuICAgICAgICAgICAgICAgIGFkYXB0ZXIuZ2V0TmFtZShjdXJyZW50U2libGluZykgPT09IGVsZW1OYW1lKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgXCJvbmx5LW9mLXR5cGVcIihlbGVtLCB7IGFkYXB0ZXIsIGVxdWFscyB9KSB7XG4gICAgICAgIGNvbnN0IGVsZW1OYW1lID0gYWRhcHRlci5nZXROYW1lKGVsZW0pO1xuICAgICAgICByZXR1cm4gYWRhcHRlclxuICAgICAgICAgICAgLmdldFNpYmxpbmdzKGVsZW0pXG4gICAgICAgICAgICAuZXZlcnkoKHNpYmxpbmcpID0+IGVxdWFscyhlbGVtLCBzaWJsaW5nKSB8fFxuICAgICAgICAgICAgIWFkYXB0ZXIuaXNUYWcoc2libGluZykgfHxcbiAgICAgICAgICAgIGFkYXB0ZXIuZ2V0TmFtZShzaWJsaW5nKSAhPT0gZWxlbU5hbWUpO1xuICAgIH0sXG4gICAgXCJvbmx5LWNoaWxkXCIoZWxlbSwgeyBhZGFwdGVyLCBlcXVhbHMgfSkge1xuICAgICAgICByZXR1cm4gYWRhcHRlclxuICAgICAgICAgICAgLmdldFNpYmxpbmdzKGVsZW0pXG4gICAgICAgICAgICAuZXZlcnkoKHNpYmxpbmcpID0+IGVxdWFscyhlbGVtLCBzaWJsaW5nKSB8fCAhYWRhcHRlci5pc1RhZyhzaWJsaW5nKSk7XG4gICAgfSxcbn07XG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5UHNldWRvQXJncyhmdW5jLCBuYW1lLCBzdWJzZWxlY3QsIGFyZ0luZGV4KSB7XG4gICAgaWYgKHN1YnNlbGVjdCA9PT0gbnVsbCkge1xuICAgICAgICBpZiAoZnVuYy5sZW5ndGggPiBhcmdJbmRleCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQc2V1ZG8tY2xhc3MgOiR7bmFtZX0gcmVxdWlyZXMgYW4gYXJndW1lbnRgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChmdW5jLmxlbmd0aCA9PT0gYXJnSW5kZXgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQc2V1ZG8tY2xhc3MgOiR7bmFtZX0gZG9lc24ndCBoYXZlIGFueSBhcmd1bWVudHNgKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wc2V1ZG9zLmpzLm1hcCIsIi8qKlxuICogQWxpYXNlcyBhcmUgcHNldWRvcyB0aGF0IGFyZSBleHByZXNzZWQgYXMgc2VsZWN0b3JzLlxuICovXG5leHBvcnQgY29uc3QgYWxpYXNlcyA9IHtcbiAgICAvLyBMaW5rc1xuICAgIFwiYW55LWxpbmtcIjogXCI6aXMoYSwgYXJlYSwgbGluaylbaHJlZl1cIixcbiAgICBsaW5rOiBcIjphbnktbGluazpub3QoOnZpc2l0ZWQpXCIsXG4gICAgLy8gRm9ybXNcbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNkaXNhYmxlZC1lbGVtZW50c1xuICAgIGRpc2FibGVkOiBgOmlzKFxuICAgICAgICA6aXMoYnV0dG9uLCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgb3B0Z3JvdXAsIG9wdGlvbilbZGlzYWJsZWRdLFxuICAgICAgICBvcHRncm91cFtkaXNhYmxlZF0gPiBvcHRpb24sXG4gICAgICAgIGZpZWxkc2V0W2Rpc2FibGVkXTpub3QoZmllbGRzZXRbZGlzYWJsZWRdIGxlZ2VuZDpmaXJzdC1vZi10eXBlICopXG4gICAgKWAsXG4gICAgZW5hYmxlZDogXCI6bm90KDpkaXNhYmxlZClcIixcbiAgICBjaGVja2VkOiBcIjppcyg6aXMoaW5wdXRbdHlwZT1yYWRpb10sIGlucHV0W3R5cGU9Y2hlY2tib3hdKVtjaGVja2VkXSwgb3B0aW9uOnNlbGVjdGVkKVwiLFxuICAgIHJlcXVpcmVkOiBcIjppcyhpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSlbcmVxdWlyZWRdXCIsXG4gICAgb3B0aW9uYWw6IFwiOmlzKGlucHV0LCBzZWxlY3QsIHRleHRhcmVhKTpub3QoW3JlcXVpcmVkXSlcIixcbiAgICAvLyBKUXVlcnkgZXh0ZW5zaW9uc1xuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tZWxlbWVudHMuaHRtbCNjb25jZXB0LW9wdGlvbi1zZWxlY3RlZG5lc3NcbiAgICBzZWxlY3RlZDogXCJvcHRpb246aXMoW3NlbGVjdGVkXSwgc2VsZWN0Om5vdChbbXVsdGlwbGVdKTpub3QoOmhhcyg+IG9wdGlvbltzZWxlY3RlZF0pKSA+IDpmaXJzdC1vZi10eXBlKVwiLFxuICAgIGNoZWNrYm94OiBcIlt0eXBlPWNoZWNrYm94XVwiLFxuICAgIGZpbGU6IFwiW3R5cGU9ZmlsZV1cIixcbiAgICBwYXNzd29yZDogXCJbdHlwZT1wYXNzd29yZF1cIixcbiAgICByYWRpbzogXCJbdHlwZT1yYWRpb11cIixcbiAgICByZXNldDogXCJbdHlwZT1yZXNldF1cIixcbiAgICBpbWFnZTogXCJbdHlwZT1pbWFnZV1cIixcbiAgICBzdWJtaXQ6IFwiW3R5cGU9c3VibWl0XVwiLFxuICAgIHBhcmVudDogXCI6bm90KDplbXB0eSlcIixcbiAgICBoZWFkZXI6IFwiOmlzKGgxLCBoMiwgaDMsIGg0LCBoNSwgaDYpXCIsXG4gICAgYnV0dG9uOiBcIjppcyhidXR0b24sIGlucHV0W3R5cGU9YnV0dG9uXSlcIixcbiAgICBpbnB1dDogXCI6aXMoaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QsIGJ1dHRvbilcIixcbiAgICB0ZXh0OiBcImlucHV0OmlzKDpub3QoW3R5cGUhPScnXSksIFt0eXBlPXRleHRdKVwiLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFsaWFzZXMuanMubWFwIiwiaW1wb3J0IGJvb2xiYXNlIGZyb20gXCJib29sYmFzZVwiO1xuaW1wb3J0IHsgaXNUcmF2ZXJzYWwgfSBmcm9tIFwiLi4vc29ydC5qc1wiO1xuLyoqIFVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgOmhhcy4gV2lsbCBiZSByZXBsYWNlZCB3aXRoIHRoZSBhY3R1YWwgZWxlbWVudC4gKi9cbmV4cG9ydCBjb25zdCBQTEFDRUhPTERFUl9FTEVNRU5UID0ge307XG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlSXNUYWcobmV4dCwgYWRhcHRlcikge1xuICAgIGlmIChuZXh0ID09PSBib29sYmFzZS5mYWxzZUZ1bmMpXG4gICAgICAgIHJldHVybiBib29sYmFzZS5mYWxzZUZ1bmM7XG4gICAgcmV0dXJuIChlbGVtKSA9PiBhZGFwdGVyLmlzVGFnKGVsZW0pICYmIG5leHQoZWxlbSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dFNpYmxpbmdzKGVsZW0sIGFkYXB0ZXIpIHtcbiAgICBjb25zdCBzaWJsaW5ncyA9IGFkYXB0ZXIuZ2V0U2libGluZ3MoZWxlbSk7XG4gICAgaWYgKHNpYmxpbmdzLmxlbmd0aCA8PSAxKVxuICAgICAgICByZXR1cm4gW107XG4gICAgY29uc3QgZWxlbUluZGV4ID0gc2libGluZ3MuaW5kZXhPZihlbGVtKTtcbiAgICBpZiAoZWxlbUluZGV4IDwgMCB8fCBlbGVtSW5kZXggPT09IHNpYmxpbmdzLmxlbmd0aCAtIDEpXG4gICAgICAgIHJldHVybiBbXTtcbiAgICByZXR1cm4gc2libGluZ3Muc2xpY2UoZWxlbUluZGV4ICsgMSkuZmlsdGVyKGFkYXB0ZXIuaXNUYWcpO1xufVxuZnVuY3Rpb24gY29weU9wdGlvbnMob3B0aW9ucykge1xuICAgIC8vIE5vdCBjb3BpZWQ6IGNvbnRleHQsIHJvb3RGdW5jXG4gICAgcmV0dXJuIHtcbiAgICAgICAgeG1sTW9kZTogISFvcHRpb25zLnhtbE1vZGUsXG4gICAgICAgIGxvd2VyQ2FzZUF0dHJpYnV0ZU5hbWVzOiAhIW9wdGlvbnMubG93ZXJDYXNlQXR0cmlidXRlTmFtZXMsXG4gICAgICAgIGxvd2VyQ2FzZVRhZ3M6ICEhb3B0aW9ucy5sb3dlckNhc2VUYWdzLFxuICAgICAgICBxdWlya3NNb2RlOiAhIW9wdGlvbnMucXVpcmtzTW9kZSxcbiAgICAgICAgY2FjaGVSZXN1bHRzOiAhIW9wdGlvbnMuY2FjaGVSZXN1bHRzLFxuICAgICAgICBwc2V1ZG9zOiBvcHRpb25zLnBzZXVkb3MsXG4gICAgICAgIGFkYXB0ZXI6IG9wdGlvbnMuYWRhcHRlcixcbiAgICAgICAgZXF1YWxzOiBvcHRpb25zLmVxdWFscyxcbiAgICB9O1xufVxuY29uc3QgaXMgPSAobmV4dCwgdG9rZW4sIG9wdGlvbnMsIGNvbnRleHQsIGNvbXBpbGVUb2tlbikgPT4ge1xuICAgIGNvbnN0IGZ1bmMgPSBjb21waWxlVG9rZW4odG9rZW4sIGNvcHlPcHRpb25zKG9wdGlvbnMpLCBjb250ZXh0KTtcbiAgICByZXR1cm4gZnVuYyA9PT0gYm9vbGJhc2UudHJ1ZUZ1bmNcbiAgICAgICAgPyBuZXh0XG4gICAgICAgIDogZnVuYyA9PT0gYm9vbGJhc2UuZmFsc2VGdW5jXG4gICAgICAgICAgICA/IGJvb2xiYXNlLmZhbHNlRnVuY1xuICAgICAgICAgICAgOiAoZWxlbSkgPT4gZnVuYyhlbGVtKSAmJiBuZXh0KGVsZW0pO1xufTtcbi8qXG4gKiA6bm90LCA6aGFzLCA6aXMsIDptYXRjaGVzIGFuZCA6d2hlcmUgaGF2ZSB0byBjb21waWxlIHNlbGVjdG9yc1xuICogZG9pbmcgdGhpcyBpbiBzcmMvcHNldWRvcy50cyB3b3VsZCBsZWFkIHRvIGNpcmN1bGFyIGRlcGVuZGVuY2llcyxcbiAqIHNvIHdlIGFkZCB0aGVtIGhlcmVcbiAqL1xuZXhwb3J0IGNvbnN0IHN1YnNlbGVjdHMgPSB7XG4gICAgaXMsXG4gICAgLyoqXG4gICAgICogYDptYXRjaGVzYCBhbmQgYDp3aGVyZWAgYXJlIGFsaWFzZXMgZm9yIGA6aXNgLlxuICAgICAqL1xuICAgIG1hdGNoZXM6IGlzLFxuICAgIHdoZXJlOiBpcyxcbiAgICBub3QobmV4dCwgdG9rZW4sIG9wdGlvbnMsIGNvbnRleHQsIGNvbXBpbGVUb2tlbikge1xuICAgICAgICBjb25zdCBmdW5jID0gY29tcGlsZVRva2VuKHRva2VuLCBjb3B5T3B0aW9ucyhvcHRpb25zKSwgY29udGV4dCk7XG4gICAgICAgIHJldHVybiBmdW5jID09PSBib29sYmFzZS5mYWxzZUZ1bmNcbiAgICAgICAgICAgID8gbmV4dFxuICAgICAgICAgICAgOiBmdW5jID09PSBib29sYmFzZS50cnVlRnVuY1xuICAgICAgICAgICAgICAgID8gYm9vbGJhc2UuZmFsc2VGdW5jXG4gICAgICAgICAgICAgICAgOiAoZWxlbSkgPT4gIWZ1bmMoZWxlbSkgJiYgbmV4dChlbGVtKTtcbiAgICB9LFxuICAgIGhhcyhuZXh0LCBzdWJzZWxlY3QsIG9wdGlvbnMsIF9jb250ZXh0LCBjb21waWxlVG9rZW4pIHtcbiAgICAgICAgY29uc3QgeyBhZGFwdGVyIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBvcHRzID0gY29weU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG9wdHMucmVsYXRpdmVTZWxlY3RvciA9IHRydWU7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBzdWJzZWxlY3Quc29tZSgocykgPT4gcy5zb21lKGlzVHJhdmVyc2FsKSlcbiAgICAgICAgICAgID8gLy8gVXNlZCBhcyBhIHBsYWNlaG9sZGVyLiBXaWxsIGJlIHJlcGxhY2VkIHdpdGggdGhlIGFjdHVhbCBlbGVtZW50LlxuICAgICAgICAgICAgICAgIFtQTEFDRUhPTERFUl9FTEVNRU5UXVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IGNvbXBpbGVkID0gY29tcGlsZVRva2VuKHN1YnNlbGVjdCwgb3B0cywgY29udGV4dCk7XG4gICAgICAgIGlmIChjb21waWxlZCA9PT0gYm9vbGJhc2UuZmFsc2VGdW5jKVxuICAgICAgICAgICAgcmV0dXJuIGJvb2xiYXNlLmZhbHNlRnVuYztcbiAgICAgICAgY29uc3QgaGFzRWxlbWVudCA9IGVuc3VyZUlzVGFnKGNvbXBpbGVkLCBhZGFwdGVyKTtcbiAgICAgICAgLy8gSWYgYGNvbXBpbGVkYCBpcyBgdHJ1ZUZ1bmNgLCB3ZSBjYW4gc2tpcCB0aGlzLlxuICAgICAgICBpZiAoY29udGV4dCAmJiBjb21waWxlZCAhPT0gYm9vbGJhc2UudHJ1ZUZ1bmMpIHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBgc2hvdWxkVGVzdE5leHRTaWJsaW5nc2Agd2lsbCBvbmx5IGJlIHRydWUgaWYgdGhlIHF1ZXJ5IHN0YXJ0cyB3aXRoXG4gICAgICAgICAgICAgKiBhIHRyYXZlcnNhbCAoc2libGluZyBvciBhZGphY2VudCkuIFRoYXQgbWVhbnMgd2Ugd2lsbCBhbHdheXMgaGF2ZSBhIGNvbnRleHQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IHsgc2hvdWxkVGVzdE5leHRTaWJsaW5ncyA9IGZhbHNlIH0gPSBjb21waWxlZDtcbiAgICAgICAgICAgIHJldHVybiAoZWxlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghbmV4dChlbGVtKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbnRleHRbMF0gPSBlbGVtO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkcyA9IGFkYXB0ZXIuZ2V0Q2hpbGRyZW4oZWxlbSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dEVsZW1lbnRzID0gc2hvdWxkVGVzdE5leHRTaWJsaW5nc1xuICAgICAgICAgICAgICAgICAgICA/IFsuLi5jaGlsZHMsIC4uLmdldE5leHRTaWJsaW5ncyhlbGVtLCBhZGFwdGVyKV1cbiAgICAgICAgICAgICAgICAgICAgOiBjaGlsZHM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFkYXB0ZXIuZXhpc3RzT25lKGhhc0VsZW1lbnQsIG5leHRFbGVtZW50cyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoZWxlbSkgPT4gbmV4dChlbGVtKSAmJlxuICAgICAgICAgICAgYWRhcHRlci5leGlzdHNPbmUoaGFzRWxlbWVudCwgYWRhcHRlci5nZXRDaGlsZHJlbihlbGVtKSk7XG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzZWxlY3RzLmpzLm1hcCIsImltcG9ydCB7IGF0dHJpYnV0ZVJ1bGVzIH0gZnJvbSBcIi4vYXR0cmlidXRlcy5qc1wiO1xuaW1wb3J0IHsgY29tcGlsZVBzZXVkb1NlbGVjdG9yIH0gZnJvbSBcIi4vcHNldWRvLXNlbGVjdG9ycy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgU2VsZWN0b3JUeXBlIH0gZnJvbSBcImNzcy13aGF0XCI7XG5mdW5jdGlvbiBnZXRFbGVtZW50UGFyZW50KG5vZGUsIGFkYXB0ZXIpIHtcbiAgICBjb25zdCBwYXJlbnQgPSBhZGFwdGVyLmdldFBhcmVudChub2RlKTtcbiAgICBpZiAocGFyZW50ICYmIGFkYXB0ZXIuaXNUYWcocGFyZW50KSkge1xuICAgICAgICByZXR1cm4gcGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qXG4gKiBBbGwgYXZhaWxhYmxlIHJ1bGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlR2VuZXJhbFNlbGVjdG9yKG5leHQsIHNlbGVjdG9yLCBvcHRpb25zLCBjb250ZXh0LCBjb21waWxlVG9rZW4pIHtcbiAgICBjb25zdCB7IGFkYXB0ZXIsIGVxdWFscyB9ID0gb3B0aW9ucztcbiAgICBzd2l0Y2ggKHNlbGVjdG9yLnR5cGUpIHtcbiAgICAgICAgY2FzZSBTZWxlY3RvclR5cGUuUHNldWRvRWxlbWVudDoge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHNldWRvLWVsZW1lbnRzIGFyZSBub3Qgc3VwcG9ydGVkIGJ5IGNzcy1zZWxlY3RcIik7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBTZWxlY3RvclR5cGUuQ29sdW1uQ29tYmluYXRvcjoge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29sdW1uIGNvbWJpbmF0b3JzIGFyZSBub3QgeWV0IHN1cHBvcnRlZCBieSBjc3Mtc2VsZWN0XCIpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgU2VsZWN0b3JUeXBlLkF0dHJpYnV0ZToge1xuICAgICAgICAgICAgaWYgKHNlbGVjdG9yLm5hbWVzcGFjZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTmFtZXNwYWNlZCBhdHRyaWJ1dGVzIGFyZSBub3QgeWV0IHN1cHBvcnRlZCBieSBjc3Mtc2VsZWN0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnhtbE1vZGUgfHwgb3B0aW9ucy5sb3dlckNhc2VBdHRyaWJ1dGVOYW1lcykge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yLm5hbWUgPSBzZWxlY3Rvci5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlUnVsZXNbc2VsZWN0b3IuYWN0aW9uXShuZXh0LCBzZWxlY3Rvciwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBTZWxlY3RvclR5cGUuUHNldWRvOiB7XG4gICAgICAgICAgICByZXR1cm4gY29tcGlsZVBzZXVkb1NlbGVjdG9yKG5leHQsIHNlbGVjdG9yLCBvcHRpb25zLCBjb250ZXh0LCBjb21waWxlVG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRhZ3NcbiAgICAgICAgY2FzZSBTZWxlY3RvclR5cGUuVGFnOiB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0b3IubmFtZXNwYWNlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOYW1lc3BhY2VkIHRhZyBuYW1lcyBhcmUgbm90IHlldCBzdXBwb3J0ZWQgYnkgY3NzLXNlbGVjdFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB7IG5hbWUgfSA9IHNlbGVjdG9yO1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnhtbE1vZGUgfHwgb3B0aW9ucy5sb3dlckNhc2VUYWdzKSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiB0YWcoZWxlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhZGFwdGVyLmdldE5hbWUoZWxlbSkgPT09IG5hbWUgJiYgbmV4dChlbGVtKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gVHJhdmVyc2FsXG4gICAgICAgIGNhc2UgU2VsZWN0b3JUeXBlLkRlc2NlbmRhbnQ6IHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmNhY2hlUmVzdWx0cyA9PT0gZmFsc2UgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2YgV2Vha1NldCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkZXNjZW5kYW50KGVsZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJlbnQgPSBlbGVtO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKGN1cnJlbnQgPSBnZXRFbGVtZW50UGFyZW50KGN1cnJlbnQsIGFkYXB0ZXIpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQoY3VycmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYEVsZW1lbnROb2RlYCBpcyBub3QgZXh0ZW5kaW5nIG9iamVjdFxuICAgICAgICAgICAgY29uc3QgaXNGYWxzZUNhY2hlID0gbmV3IFdlYWtTZXQoKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBjYWNoZWREZXNjZW5kYW50KGVsZW0pIHtcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudCA9IGVsZW07XG4gICAgICAgICAgICAgICAgd2hpbGUgKChjdXJyZW50ID0gZ2V0RWxlbWVudFBhcmVudChjdXJyZW50LCBhZGFwdGVyKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0ZhbHNlQ2FjaGUuaGFzKGN1cnJlbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWRhcHRlci5pc1RhZyhjdXJyZW50KSAmJiBuZXh0KGN1cnJlbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0ZhbHNlQ2FjaGUuYWRkKGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIl9mbGV4aWJsZURlc2NlbmRhbnRcIjoge1xuICAgICAgICAgICAgLy8gSW5jbHVkZSBlbGVtZW50IGl0c2VsZiwgb25seSB1c2VkIHdoaWxlIHF1ZXJ5aW5nIGFuIGFycmF5XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gZmxleGlibGVEZXNjZW5kYW50KGVsZW0pIHtcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudCA9IGVsZW07XG4gICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dChjdXJyZW50KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0gd2hpbGUgKChjdXJyZW50ID0gZ2V0RWxlbWVudFBhcmVudChjdXJyZW50LCBhZGFwdGVyKSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBTZWxlY3RvclR5cGUuUGFyZW50OiB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gcGFyZW50KGVsZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRhcHRlclxuICAgICAgICAgICAgICAgICAgICAuZ2V0Q2hpbGRyZW4oZWxlbSlcbiAgICAgICAgICAgICAgICAgICAgLnNvbWUoKGVsZW0pID0+IGFkYXB0ZXIuaXNUYWcoZWxlbSkgJiYgbmV4dChlbGVtKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgU2VsZWN0b3JUeXBlLkNoaWxkOiB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gY2hpbGQoZWxlbSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGFkYXB0ZXIuZ2V0UGFyZW50KGVsZW0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnQgIT0gbnVsbCAmJiBhZGFwdGVyLmlzVGFnKHBhcmVudCkgJiYgbmV4dChwYXJlbnQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFNlbGVjdG9yVHlwZS5TaWJsaW5nOiB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gc2libGluZyhlbGVtKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2libGluZ3MgPSBhZGFwdGVyLmdldFNpYmxpbmdzKGVsZW0pO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2libGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFNpYmxpbmcgPSBzaWJsaW5nc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVxdWFscyhlbGVtLCBjdXJyZW50U2libGluZykpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFkYXB0ZXIuaXNUYWcoY3VycmVudFNpYmxpbmcpICYmIG5leHQoY3VycmVudFNpYmxpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgU2VsZWN0b3JUeXBlLkFkamFjZW50OiB7XG4gICAgICAgICAgICBpZiAoYWRhcHRlci5wcmV2RWxlbWVudFNpYmxpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gYWRqYWNlbnQoZWxlbSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2aW91cyA9IGFkYXB0ZXIucHJldkVsZW1lbnRTaWJsaW5nKGVsZW0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXMgIT0gbnVsbCAmJiBuZXh0KHByZXZpb3VzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGFkamFjZW50KGVsZW0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaWJsaW5ncyA9IGFkYXB0ZXIuZ2V0U2libGluZ3MoZWxlbSk7XG4gICAgICAgICAgICAgICAgbGV0IGxhc3RFbGVtZW50O1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2libGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFNpYmxpbmcgPSBzaWJsaW5nc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVxdWFscyhlbGVtLCBjdXJyZW50U2libGluZykpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFkYXB0ZXIuaXNUYWcoY3VycmVudFNpYmxpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudCA9IGN1cnJlbnRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAhIWxhc3RFbGVtZW50ICYmIG5leHQobGFzdEVsZW1lbnQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFNlbGVjdG9yVHlwZS5Vbml2ZXJzYWw6IHtcbiAgICAgICAgICAgIGlmIChzZWxlY3Rvci5uYW1lc3BhY2UgIT0gbnVsbCAmJiBzZWxlY3Rvci5uYW1lc3BhY2UgIT09IFwiKlwiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTmFtZXNwYWNlZCB1bml2ZXJzYWwgc2VsZWN0b3JzIGFyZSBub3QgeWV0IHN1cHBvcnRlZCBieSBjc3Mtc2VsZWN0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmFsLmpzLm1hcCIsImltcG9ydCB7IHBhcnNlLCBTZWxlY3RvclR5cGUgfSBmcm9tIFwiY3NzLXdoYXRcIjtcbmltcG9ydCBib29sYmFzZSBmcm9tIFwiYm9vbGJhc2VcIjtcbmltcG9ydCBzb3J0UnVsZXMsIHsgaXNUcmF2ZXJzYWwgfSBmcm9tIFwiLi9zb3J0LmpzXCI7XG5pbXBvcnQgeyBjb21waWxlR2VuZXJhbFNlbGVjdG9yIH0gZnJvbSBcIi4vZ2VuZXJhbC5qc1wiO1xuaW1wb3J0IHsgZW5zdXJlSXNUYWcsIFBMQUNFSE9MREVSX0VMRU1FTlQsIH0gZnJvbSBcIi4vcHNldWRvLXNlbGVjdG9ycy9zdWJzZWxlY3RzLmpzXCI7XG4vKipcbiAqIENvbXBpbGVzIGEgc2VsZWN0b3IgdG8gYW4gZXhlY3V0YWJsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gc2VsZWN0b3IgU2VsZWN0b3IgdG8gY29tcGlsZS5cbiAqIEBwYXJhbSBvcHRpb25zIENvbXBpbGF0aW9uIG9wdGlvbnMuXG4gKiBAcGFyYW0gY29udGV4dCBPcHRpb25hbCBjb250ZXh0IGZvciB0aGUgc2VsZWN0b3IuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlKHNlbGVjdG9yLCBvcHRpb25zLCBjb250ZXh0KSB7XG4gICAgY29uc3QgbmV4dCA9IGNvbXBpbGVVbnNhZmUoc2VsZWN0b3IsIG9wdGlvbnMsIGNvbnRleHQpO1xuICAgIHJldHVybiBlbnN1cmVJc1RhZyhuZXh0LCBvcHRpb25zLmFkYXB0ZXIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGVVbnNhZmUoc2VsZWN0b3IsIG9wdGlvbnMsIGNvbnRleHQpIHtcbiAgICBjb25zdCB0b2tlbiA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlKHNlbGVjdG9yKSA6IHNlbGVjdG9yO1xuICAgIHJldHVybiBjb21waWxlVG9rZW4odG9rZW4sIG9wdGlvbnMsIGNvbnRleHQpO1xufVxuZnVuY3Rpb24gaW5jbHVkZXNTY29wZVBzZXVkbyh0KSB7XG4gICAgcmV0dXJuICh0LnR5cGUgPT09IFNlbGVjdG9yVHlwZS5Qc2V1ZG8gJiZcbiAgICAgICAgKHQubmFtZSA9PT0gXCJzY29wZVwiIHx8XG4gICAgICAgICAgICAoQXJyYXkuaXNBcnJheSh0LmRhdGEpICYmXG4gICAgICAgICAgICAgICAgdC5kYXRhLnNvbWUoKGRhdGEpID0+IGRhdGEuc29tZShpbmNsdWRlc1Njb3BlUHNldWRvKSkpKSk7XG59XG5jb25zdCBERVNDRU5EQU5UX1RPS0VOID0geyB0eXBlOiBTZWxlY3RvclR5cGUuRGVzY2VuZGFudCB9O1xuY29uc3QgRkxFWElCTEVfREVTQ0VOREFOVF9UT0tFTiA9IHtcbiAgICB0eXBlOiBcIl9mbGV4aWJsZURlc2NlbmRhbnRcIixcbn07XG5jb25zdCBTQ09QRV9UT0tFTiA9IHtcbiAgICB0eXBlOiBTZWxlY3RvclR5cGUuUHNldWRvLFxuICAgIG5hbWU6IFwic2NvcGVcIixcbiAgICBkYXRhOiBudWxsLFxufTtcbi8qXG4gKiBDU1MgNCBTcGVjIChEcmFmdCk6IDMuNC4xLiBBYnNvbHV0aXppbmcgYSBSZWxhdGl2ZSBTZWxlY3RvclxuICogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzNC8jYWJzb2x1dGl6aW5nXG4gKi9cbmZ1bmN0aW9uIGFic29sdXRpemUodG9rZW4sIHsgYWRhcHRlciB9LCBjb250ZXh0KSB7XG4gICAgLy8gVE9ETyBVc2UgYmV0dGVyIGNoZWNrIGlmIHRoZSBjb250ZXh0IGlzIGEgZG9jdW1lbnRcbiAgICBjb25zdCBoYXNDb250ZXh0ID0gISEoY29udGV4dCA9PT0gbnVsbCB8fCBjb250ZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb250ZXh0LmV2ZXJ5KChlKSA9PiB7XG4gICAgICAgIGNvbnN0IHBhcmVudCA9IGFkYXB0ZXIuaXNUYWcoZSkgJiYgYWRhcHRlci5nZXRQYXJlbnQoZSk7XG4gICAgICAgIHJldHVybiBlID09PSBQTEFDRUhPTERFUl9FTEVNRU5UIHx8IChwYXJlbnQgJiYgYWRhcHRlci5pc1RhZyhwYXJlbnQpKTtcbiAgICB9KSk7XG4gICAgZm9yIChjb25zdCB0IG9mIHRva2VuKSB7XG4gICAgICAgIGlmICh0Lmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgIGlzVHJhdmVyc2FsKHRbMF0pICYmXG4gICAgICAgICAgICB0WzBdLnR5cGUgIT09IFNlbGVjdG9yVHlwZS5EZXNjZW5kYW50KSB7XG4gICAgICAgICAgICAvLyBEb24ndCBjb250aW51ZSBpbiBlbHNlIGJyYW5jaFxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhhc0NvbnRleHQgJiYgIXQuc29tZShpbmNsdWRlc1Njb3BlUHNldWRvKSkge1xuICAgICAgICAgICAgdC51bnNoaWZ0KERFU0NFTkRBTlRfVE9LRU4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdC51bnNoaWZ0KFNDT1BFX1RPS0VOKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZVRva2VuKHRva2VuLCBvcHRpb25zLCBjb250ZXh0KSB7XG4gICAgdmFyIF9hO1xuICAgIHRva2VuLmZvckVhY2goc29ydFJ1bGVzKTtcbiAgICBjb250ZXh0ID0gKF9hID0gb3B0aW9ucy5jb250ZXh0KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBjb250ZXh0O1xuICAgIGNvbnN0IGlzQXJyYXlDb250ZXh0ID0gQXJyYXkuaXNBcnJheShjb250ZXh0KTtcbiAgICBjb25zdCBmaW5hbENvbnRleHQgPSBjb250ZXh0ICYmIChBcnJheS5pc0FycmF5KGNvbnRleHQpID8gY29udGV4dCA6IFtjb250ZXh0XSk7XG4gICAgLy8gQ2hlY2sgaWYgdGhlIHNlbGVjdG9yIGlzIHJlbGF0aXZlXG4gICAgaWYgKG9wdGlvbnMucmVsYXRpdmVTZWxlY3RvciAhPT0gZmFsc2UpIHtcbiAgICAgICAgYWJzb2x1dGl6ZSh0b2tlbiwgb3B0aW9ucywgZmluYWxDb250ZXh0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW4uc29tZSgodCkgPT4gdC5sZW5ndGggPiAwICYmIGlzVHJhdmVyc2FsKHRbMF0pKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWxhdGl2ZSBzZWxlY3RvcnMgYXJlIG5vdCBhbGxvd2VkIHdoZW4gdGhlIGByZWxhdGl2ZVNlbGVjdG9yYCBvcHRpb24gaXMgZGlzYWJsZWRcIik7XG4gICAgfVxuICAgIGxldCBzaG91bGRUZXN0TmV4dFNpYmxpbmdzID0gZmFsc2U7XG4gICAgY29uc3QgcXVlcnkgPSB0b2tlblxuICAgICAgICAubWFwKChydWxlcykgPT4ge1xuICAgICAgICBpZiAocnVsZXMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgIGNvbnN0IFtmaXJzdCwgc2Vjb25kXSA9IHJ1bGVzO1xuICAgICAgICAgICAgaWYgKGZpcnN0LnR5cGUgIT09IFNlbGVjdG9yVHlwZS5Qc2V1ZG8gfHxcbiAgICAgICAgICAgICAgICBmaXJzdC5uYW1lICE9PSBcInNjb3BlXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzQXJyYXlDb250ZXh0ICYmXG4gICAgICAgICAgICAgICAgc2Vjb25kLnR5cGUgPT09IFNlbGVjdG9yVHlwZS5EZXNjZW5kYW50KSB7XG4gICAgICAgICAgICAgICAgcnVsZXNbMV0gPSBGTEVYSUJMRV9ERVNDRU5EQU5UX1RPS0VOO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2Vjb25kLnR5cGUgPT09IFNlbGVjdG9yVHlwZS5BZGphY2VudCB8fFxuICAgICAgICAgICAgICAgIHNlY29uZC50eXBlID09PSBTZWxlY3RvclR5cGUuU2libGluZykge1xuICAgICAgICAgICAgICAgIHNob3VsZFRlc3ROZXh0U2libGluZ3MgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21waWxlUnVsZXMocnVsZXMsIG9wdGlvbnMsIGZpbmFsQ29udGV4dCk7XG4gICAgfSlcbiAgICAgICAgLnJlZHVjZShyZWR1Y2VSdWxlcywgYm9vbGJhc2UuZmFsc2VGdW5jKTtcbiAgICBxdWVyeS5zaG91bGRUZXN0TmV4dFNpYmxpbmdzID0gc2hvdWxkVGVzdE5leHRTaWJsaW5ncztcbiAgICByZXR1cm4gcXVlcnk7XG59XG5mdW5jdGlvbiBjb21waWxlUnVsZXMocnVsZXMsIG9wdGlvbnMsIGNvbnRleHQpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIHJ1bGVzLnJlZHVjZSgocHJldmlvdXMsIHJ1bGUpID0+IHByZXZpb3VzID09PSBib29sYmFzZS5mYWxzZUZ1bmNcbiAgICAgICAgPyBib29sYmFzZS5mYWxzZUZ1bmNcbiAgICAgICAgOiBjb21waWxlR2VuZXJhbFNlbGVjdG9yKHByZXZpb3VzLCBydWxlLCBvcHRpb25zLCBjb250ZXh0LCBjb21waWxlVG9rZW4pLCAoX2EgPSBvcHRpb25zLnJvb3RGdW5jKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBib29sYmFzZS50cnVlRnVuYyk7XG59XG5mdW5jdGlvbiByZWR1Y2VSdWxlcyhhLCBiKSB7XG4gICAgaWYgKGIgPT09IGJvb2xiYXNlLmZhbHNlRnVuYyB8fCBhID09PSBib29sYmFzZS50cnVlRnVuYykge1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG4gICAgaWYgKGEgPT09IGJvb2xiYXNlLmZhbHNlRnVuYyB8fCBiID09PSBib29sYmFzZS50cnVlRnVuYykge1xuICAgICAgICByZXR1cm4gYjtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmUoZWxlbSkge1xuICAgICAgICByZXR1cm4gYShlbGVtKSB8fCBiKGVsZW0pO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21waWxlLmpzLm1hcCIsImltcG9ydCB7IHBhcnNlIH0gZnJvbSBcImNzcy13aGF0XCI7XG5pbXBvcnQgeyBmaWx0ZXJzIH0gZnJvbSBcIi4vZmlsdGVycy5qc1wiO1xuaW1wb3J0IHsgcHNldWRvcywgdmVyaWZ5UHNldWRvQXJncyB9IGZyb20gXCIuL3BzZXVkb3MuanNcIjtcbmltcG9ydCB7IGFsaWFzZXMgfSBmcm9tIFwiLi9hbGlhc2VzLmpzXCI7XG5pbXBvcnQgeyBzdWJzZWxlY3RzIH0gZnJvbSBcIi4vc3Vic2VsZWN0cy5qc1wiO1xuZXhwb3J0IHsgZmlsdGVycywgcHNldWRvcywgYWxpYXNlcyB9O1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGVQc2V1ZG9TZWxlY3RvcihuZXh0LCBzZWxlY3Rvciwgb3B0aW9ucywgY29udGV4dCwgY29tcGlsZVRva2VuKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHsgbmFtZSwgZGF0YSB9ID0gc2VsZWN0b3I7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgaWYgKCEobmFtZSBpbiBzdWJzZWxlY3RzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHBzZXVkby1jbGFzcyA6JHtuYW1lfSgke2RhdGF9KWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJzZWxlY3RzW25hbWVdKG5leHQsIGRhdGEsIG9wdGlvbnMsIGNvbnRleHQsIGNvbXBpbGVUb2tlbik7XG4gICAgfVxuICAgIGNvbnN0IHVzZXJQc2V1ZG8gPSAoX2EgPSBvcHRpb25zLnBzZXVkb3MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtuYW1lXTtcbiAgICBjb25zdCBzdHJpbmdQc2V1ZG8gPSB0eXBlb2YgdXNlclBzZXVkbyA9PT0gXCJzdHJpbmdcIiA/IHVzZXJQc2V1ZG8gOiBhbGlhc2VzW25hbWVdO1xuICAgIGlmICh0eXBlb2Ygc3RyaW5nUHNldWRvID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChkYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUHNldWRvICR7bmFtZX0gZG9lc24ndCBoYXZlIGFueSBhcmd1bWVudHNgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgYWxpYXMgaGFzIHRvIGJlIHBhcnNlZCBoZXJlLCB0byBtYWtlIHN1cmUgb3B0aW9ucyBhcmUgcmVzcGVjdGVkLlxuICAgICAgICBjb25zdCBhbGlhcyA9IHBhcnNlKHN0cmluZ1BzZXVkbyk7XG4gICAgICAgIHJldHVybiBzdWJzZWxlY3RzW1wiaXNcIl0obmV4dCwgYWxpYXMsIG9wdGlvbnMsIGNvbnRleHQsIGNvbXBpbGVUb2tlbik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdXNlclBzZXVkbyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHZlcmlmeVBzZXVkb0FyZ3ModXNlclBzZXVkbywgbmFtZSwgZGF0YSwgMSk7XG4gICAgICAgIHJldHVybiAoZWxlbSkgPT4gdXNlclBzZXVkbyhlbGVtLCBkYXRhKSAmJiBuZXh0KGVsZW0pO1xuICAgIH1cbiAgICBpZiAobmFtZSBpbiBmaWx0ZXJzKSB7XG4gICAgICAgIHJldHVybiBmaWx0ZXJzW25hbWVdKG5leHQsIGRhdGEsIG9wdGlvbnMsIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAobmFtZSBpbiBwc2V1ZG9zKSB7XG4gICAgICAgIGNvbnN0IHBzZXVkbyA9IHBzZXVkb3NbbmFtZV07XG4gICAgICAgIHZlcmlmeVBzZXVkb0FyZ3MocHNldWRvLCBuYW1lLCBkYXRhLCAyKTtcbiAgICAgICAgcmV0dXJuIChlbGVtKSA9PiBwc2V1ZG8oZWxlbSwgb3B0aW9ucywgZGF0YSkgJiYgbmV4dChlbGVtKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHBzZXVkby1jbGFzcyA6JHtuYW1lfWApO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0ICogYXMgRG9tVXRpbHMgZnJvbSBcImRvbXV0aWxzXCI7XG5pbXBvcnQgYm9vbGJhc2UgZnJvbSBcImJvb2xiYXNlXCI7XG5pbXBvcnQgeyBjb21waWxlIGFzIGNvbXBpbGVSYXcsIGNvbXBpbGVVbnNhZmUsIGNvbXBpbGVUb2tlbiwgfSBmcm9tIFwiLi9jb21waWxlLmpzXCI7XG5pbXBvcnQgeyBnZXROZXh0U2libGluZ3MgfSBmcm9tIFwiLi9wc2V1ZG8tc2VsZWN0b3JzL3N1YnNlbGVjdHMuanNcIjtcbmNvbnN0IGRlZmF1bHRFcXVhbHMgPSAoYSwgYikgPT4gYSA9PT0gYjtcbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgIGFkYXB0ZXI6IERvbVV0aWxzLFxuICAgIGVxdWFsczogZGVmYXVsdEVxdWFscyxcbn07XG5mdW5jdGlvbiBjb252ZXJ0T3B0aW9uRm9ybWF0cyhvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIC8qXG4gICAgICogV2UgZm9yY2Ugb25lIGZvcm1hdCBvZiBvcHRpb25zIHRvIHRoZSBvdGhlciBvbmUuXG4gICAgICovXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBEZWZhdWx0IG9wdGlvbnMgbWF5IGhhdmUgaW5jb21wYXRpYmxlIGBOb2RlYCAvIGBFbGVtZW50Tm9kZWAuXG4gICAgY29uc3Qgb3B0cyA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwID8gb3B0aW9ucyA6IGRlZmF1bHRPcHRpb25zO1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgU2FtZSBhcyBhYm92ZS5cbiAgICAoX2EgPSBvcHRzLmFkYXB0ZXIpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChvcHRzLmFkYXB0ZXIgPSBEb21VdGlscyk7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBgZXF1YWxzYCBkb2VzIG5vdCBleGlzdCBvbiBgT3B0aW9uc2BcbiAgICAoX2IgPSBvcHRzLmVxdWFscykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogKG9wdHMuZXF1YWxzID0gKF9kID0gKF9jID0gb3B0cy5hZGFwdGVyKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZXF1YWxzKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBkZWZhdWx0RXF1YWxzKTtcbiAgICByZXR1cm4gb3B0cztcbn1cbmZ1bmN0aW9uIHdyYXBDb21waWxlKGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gYWRkQWRhcHRlcihzZWxlY3Rvciwgb3B0aW9ucywgY29udGV4dCkge1xuICAgICAgICBjb25zdCBvcHRzID0gY29udmVydE9wdGlvbkZvcm1hdHMob3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBmdW5jKHNlbGVjdG9yLCBvcHRzLCBjb250ZXh0KTtcbiAgICB9O1xufVxuLyoqXG4gKiBDb21waWxlcyB0aGUgcXVlcnksIHJldHVybnMgYSBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbXBpbGUgPSB3cmFwQ29tcGlsZShjb21waWxlUmF3KTtcbmV4cG9ydCBjb25zdCBfY29tcGlsZVVuc2FmZSA9IHdyYXBDb21waWxlKGNvbXBpbGVVbnNhZmUpO1xuZXhwb3J0IGNvbnN0IF9jb21waWxlVG9rZW4gPSB3cmFwQ29tcGlsZShjb21waWxlVG9rZW4pO1xuZnVuY3Rpb24gZ2V0U2VsZWN0b3JGdW5jKHNlYXJjaEZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gc2VsZWN0KHF1ZXJ5LCBlbGVtZW50cywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBvcHRzID0gY29udmVydE9wdGlvbkZvcm1hdHMob3B0aW9ucyk7XG4gICAgICAgIGlmICh0eXBlb2YgcXVlcnkgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcXVlcnkgPSBjb21waWxlVW5zYWZlKHF1ZXJ5LCBvcHRzLCBlbGVtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlsdGVyZWRFbGVtZW50cyA9IHByZXBhcmVDb250ZXh0KGVsZW1lbnRzLCBvcHRzLmFkYXB0ZXIsIHF1ZXJ5LnNob3VsZFRlc3ROZXh0U2libGluZ3MpO1xuICAgICAgICByZXR1cm4gc2VhcmNoRnVuYyhxdWVyeSwgZmlsdGVyZWRFbGVtZW50cywgb3B0cyk7XG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlQ29udGV4dChlbGVtcywgYWRhcHRlciwgc2hvdWxkVGVzdE5leHRTaWJsaW5ncyA9IGZhbHNlKSB7XG4gICAgLypcbiAgICAgKiBBZGQgc2libGluZ3MgaWYgdGhlIHF1ZXJ5IHJlcXVpcmVzIHRoZW0uXG4gICAgICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYjU1L2Nzcy1zZWxlY3QvcHVsbC80MyNpc3N1ZWNvbW1lbnQtMjI1NDE0NjkyXG4gICAgICovXG4gICAgaWYgKHNob3VsZFRlc3ROZXh0U2libGluZ3MpIHtcbiAgICAgICAgZWxlbXMgPSBhcHBlbmROZXh0U2libGluZ3MoZWxlbXMsIGFkYXB0ZXIpO1xuICAgIH1cbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShlbGVtcylcbiAgICAgICAgPyBhZGFwdGVyLnJlbW92ZVN1YnNldHMoZWxlbXMpXG4gICAgICAgIDogYWRhcHRlci5nZXRDaGlsZHJlbihlbGVtcyk7XG59XG5mdW5jdGlvbiBhcHBlbmROZXh0U2libGluZ3MoZWxlbSwgYWRhcHRlcikge1xuICAgIC8vIE9yZGVyIG1hdHRlcnMgYmVjYXVzZSBqUXVlcnkgc2VlbXMgdG8gY2hlY2sgdGhlIGNoaWxkcmVuIGJlZm9yZSB0aGUgc2libGluZ3NcbiAgICBjb25zdCBlbGVtcyA9IEFycmF5LmlzQXJyYXkoZWxlbSkgPyBlbGVtLnNsaWNlKDApIDogW2VsZW1dO1xuICAgIGNvbnN0IGVsZW1zTGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbXNMZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBuZXh0U2libGluZ3MgPSBnZXROZXh0U2libGluZ3MoZWxlbXNbaV0sIGFkYXB0ZXIpO1xuICAgICAgICBlbGVtcy5wdXNoKC4uLm5leHRTaWJsaW5ncyk7XG4gICAgfVxuICAgIHJldHVybiBlbGVtcztcbn1cbi8qKlxuICogQHRlbXBsYXRlIE5vZGUgVGhlIGdlbmVyaWMgTm9kZSB0eXBlIGZvciB0aGUgRE9NIGFkYXB0ZXIgYmVpbmcgdXNlZC5cbiAqIEB0ZW1wbGF0ZSBFbGVtZW50Tm9kZSBUaGUgTm9kZSB0eXBlIGZvciBlbGVtZW50cyBmb3IgdGhlIERPTSBhZGFwdGVyIGJlaW5nIHVzZWQuXG4gKiBAcGFyYW0gZWxlbXMgRWxlbWVudHMgdG8gcXVlcnkuIElmIGl0IGlzIGFuIGVsZW1lbnQsIGl0cyBjaGlsZHJlbiB3aWxsIGJlIHF1ZXJpZWQuLlxuICogQHBhcmFtIHF1ZXJ5IGNhbiBiZSBlaXRoZXIgYSBDU1Mgc2VsZWN0b3Igc3RyaW5nIG9yIGEgY29tcGlsZWQgcXVlcnkgZnVuY3Rpb24uXG4gKiBAcGFyYW0gW29wdGlvbnNdIG9wdGlvbnMgZm9yIHF1ZXJ5aW5nIHRoZSBkb2N1bWVudC5cbiAqIEBzZWUgY29tcGlsZSBmb3Igc3VwcG9ydGVkIHNlbGVjdG9yIHF1ZXJpZXMuXG4gKiBAcmV0dXJucyBBbGwgbWF0Y2hpbmcgZWxlbWVudHMuXG4gKlxuICovXG5leHBvcnQgY29uc3Qgc2VsZWN0QWxsID0gZ2V0U2VsZWN0b3JGdW5jKChxdWVyeSwgZWxlbXMsIG9wdGlvbnMpID0+IHF1ZXJ5ID09PSBib29sYmFzZS5mYWxzZUZ1bmMgfHwgIWVsZW1zIHx8IGVsZW1zLmxlbmd0aCA9PT0gMFxuICAgID8gW11cbiAgICA6IG9wdGlvbnMuYWRhcHRlci5maW5kQWxsKHF1ZXJ5LCBlbGVtcykpO1xuLyoqXG4gKiBAdGVtcGxhdGUgTm9kZSBUaGUgZ2VuZXJpYyBOb2RlIHR5cGUgZm9yIHRoZSBET00gYWRhcHRlciBiZWluZyB1c2VkLlxuICogQHRlbXBsYXRlIEVsZW1lbnROb2RlIFRoZSBOb2RlIHR5cGUgZm9yIGVsZW1lbnRzIGZvciB0aGUgRE9NIGFkYXB0ZXIgYmVpbmcgdXNlZC5cbiAqIEBwYXJhbSBlbGVtcyBFbGVtZW50cyB0byBxdWVyeS4gSWYgaXQgaXMgYW4gZWxlbWVudCwgaXRzIGNoaWxkcmVuIHdpbGwgYmUgcXVlcmllZC4uXG4gKiBAcGFyYW0gcXVlcnkgY2FuIGJlIGVpdGhlciBhIENTUyBzZWxlY3RvciBzdHJpbmcgb3IgYSBjb21waWxlZCBxdWVyeSBmdW5jdGlvbi5cbiAqIEBwYXJhbSBbb3B0aW9uc10gb3B0aW9ucyBmb3IgcXVlcnlpbmcgdGhlIGRvY3VtZW50LlxuICogQHNlZSBjb21waWxlIGZvciBzdXBwb3J0ZWQgc2VsZWN0b3IgcXVlcmllcy5cbiAqIEByZXR1cm5zIHRoZSBmaXJzdCBtYXRjaCwgb3IgbnVsbCBpZiB0aGVyZSB3YXMgbm8gbWF0Y2guXG4gKi9cbmV4cG9ydCBjb25zdCBzZWxlY3RPbmUgPSBnZXRTZWxlY3RvckZ1bmMoKHF1ZXJ5LCBlbGVtcywgb3B0aW9ucykgPT4gcXVlcnkgPT09IGJvb2xiYXNlLmZhbHNlRnVuYyB8fCAhZWxlbXMgfHwgZWxlbXMubGVuZ3RoID09PSAwXG4gICAgPyBudWxsXG4gICAgOiBvcHRpb25zLmFkYXB0ZXIuZmluZE9uZShxdWVyeSwgZWxlbXMpKTtcbi8qKlxuICogVGVzdHMgd2hldGhlciBvciBub3QgYW4gZWxlbWVudCBpcyBtYXRjaGVkIGJ5IHF1ZXJ5LlxuICpcbiAqIEB0ZW1wbGF0ZSBOb2RlIFRoZSBnZW5lcmljIE5vZGUgdHlwZSBmb3IgdGhlIERPTSBhZGFwdGVyIGJlaW5nIHVzZWQuXG4gKiBAdGVtcGxhdGUgRWxlbWVudE5vZGUgVGhlIE5vZGUgdHlwZSBmb3IgZWxlbWVudHMgZm9yIHRoZSBET00gYWRhcHRlciBiZWluZyB1c2VkLlxuICogQHBhcmFtIGVsZW0gVGhlIGVsZW1lbnQgdG8gdGVzdCBpZiBpdCBtYXRjaGVzIHRoZSBxdWVyeS5cbiAqIEBwYXJhbSBxdWVyeSBjYW4gYmUgZWl0aGVyIGEgQ1NTIHNlbGVjdG9yIHN0cmluZyBvciBhIGNvbXBpbGVkIHF1ZXJ5IGZ1bmN0aW9uLlxuICogQHBhcmFtIFtvcHRpb25zXSBvcHRpb25zIGZvciBxdWVyeWluZyB0aGUgZG9jdW1lbnQuXG4gKiBAc2VlIGNvbXBpbGUgZm9yIHN1cHBvcnRlZCBzZWxlY3RvciBxdWVyaWVzLlxuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzKGVsZW0sIHF1ZXJ5LCBvcHRpb25zKSB7XG4gICAgY29uc3Qgb3B0cyA9IGNvbnZlcnRPcHRpb25Gb3JtYXRzKG9wdGlvbnMpO1xuICAgIHJldHVybiAodHlwZW9mIHF1ZXJ5ID09PSBcImZ1bmN0aW9uXCIgPyBxdWVyeSA6IGNvbXBpbGVSYXcocXVlcnksIG9wdHMpKShlbGVtKTtcbn1cbi8qKlxuICogQWxpYXMgZm9yIHNlbGVjdEFsbChxdWVyeSwgZWxlbXMsIG9wdGlvbnMpLlxuICogQHNlZSBbY29tcGlsZV0gZm9yIHN1cHBvcnRlZCBzZWxlY3RvciBxdWVyaWVzLlxuICovXG5leHBvcnQgZGVmYXVsdCBzZWxlY3RBbGw7XG4vLyBFeHBvcnQgZmlsdGVycywgcHNldWRvcyBhbmQgYWxpYXNlcyB0byBhbGxvdyB1c2VycyB0byBzdXBwbHkgdGhlaXIgb3duLlxuLyoqIEBkZXByZWNhdGVkIFVzZSB0aGUgYHBzZXVkb3NgIG9wdGlvbiBpbnN0ZWFkLiAqL1xuZXhwb3J0IHsgZmlsdGVycywgcHNldWRvcywgYWxpYXNlcyB9IGZyb20gXCIuL3BzZXVkby1zZWxlY3RvcnMvaW5kZXguanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCAqIGFzIENTU3NlbGVjdCBmcm9tICdjc3Mtc2VsZWN0JztcblxuaW1wb3J0IHtFTEVNRU5UX05PREUsIFRFWFRfTk9ERX0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHtpZ25vcmVDYXNlfSBmcm9tICcuL3V0aWxzLmpzJztcblxuY29uc3Qge2lzQXJyYXl9ID0gQXJyYXk7XG5cbi8qIGM4IGlnbm9yZSBzdGFydCAqL1xuY29uc3QgaXNUYWcgPSAoe25vZGVUeXBlfSkgPT4gbm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERTtcblxuY29uc3QgZXhpc3RzT25lID0gKHRlc3QsIGVsZW1lbnRzKSA9PiBlbGVtZW50cy5zb21lKFxuICBlbGVtZW50ID0+IGlzVGFnKGVsZW1lbnQpICYmIChcbiAgICB0ZXN0KGVsZW1lbnQpIHx8XG4gICAgZXhpc3RzT25lKHRlc3QsIGdldENoaWxkcmVuKGVsZW1lbnQpKVxuICApXG4pO1xuXG5jb25zdCBnZXRBdHRyaWJ1dGVWYWx1ZSA9IChlbGVtZW50LCBuYW1lKSA9PiBuYW1lID09PSAnY2xhc3MnID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC52YWx1ZSA6IGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpO1xuXG5jb25zdCBnZXRDaGlsZHJlbiA9ICh7Y2hpbGROb2Rlc30pID0+IGNoaWxkTm9kZXM7XG5cbmNvbnN0IGdldE5hbWUgPSAoZWxlbWVudCkgPT4ge1xuICBjb25zdCB7bG9jYWxOYW1lfSA9IGVsZW1lbnQ7XG4gIHJldHVybiBpZ25vcmVDYXNlKGVsZW1lbnQpID8gbG9jYWxOYW1lLnRvTG93ZXJDYXNlKCkgOiBsb2NhbE5hbWU7XG59O1xuXG5jb25zdCBnZXRQYXJlbnQgPSAoe3BhcmVudE5vZGV9KSA9PiBwYXJlbnROb2RlO1xuXG5jb25zdCBnZXRTaWJsaW5ncyA9IGVsZW1lbnQgPT4ge1xuICBjb25zdCB7cGFyZW50Tm9kZX0gPSBlbGVtZW50O1xuICByZXR1cm4gcGFyZW50Tm9kZSA/IGdldENoaWxkcmVuKHBhcmVudE5vZGUpIDogZWxlbWVudDtcbn07XG5cbmNvbnN0IGdldFRleHQgPSBub2RlID0+IHtcbiAgaWYgKGlzQXJyYXkobm9kZSkpXG4gICAgcmV0dXJuIG5vZGUubWFwKGdldFRleHQpLmpvaW4oJycpO1xuICBpZiAoaXNUYWcobm9kZSkpXG4gICAgcmV0dXJuIGdldFRleHQoZ2V0Q2hpbGRyZW4obm9kZSkpO1xuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gVEVYVF9OT0RFKVxuICAgIHJldHVybiBub2RlLmRhdGE7XG4gIHJldHVybiAnJztcbn07XG5cbmNvbnN0IGhhc0F0dHJpYiA9IChlbGVtZW50LCBuYW1lKSA9PiBlbGVtZW50Lmhhc0F0dHJpYnV0ZShuYW1lKTtcblxuY29uc3QgcmVtb3ZlU3Vic2V0cyA9IG5vZGVzID0+IHtcbiAgbGV0IHtsZW5ndGh9ID0gbm9kZXM7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tsZW5ndGhdO1xuICAgIGlmIChsZW5ndGggJiYgLTEgPCBub2Rlcy5sYXN0SW5kZXhPZihub2RlLCBsZW5ndGggLSAxKSkge1xuICAgICAgbm9kZXMuc3BsaWNlKGxlbmd0aCwgMSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgZm9yIChsZXQge3BhcmVudE5vZGV9ID0gbm9kZTsgcGFyZW50Tm9kZTsgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgaWYgKG5vZGVzLmluY2x1ZGVzKHBhcmVudE5vZGUpKSB7XG4gICAgICAgIG5vZGVzLnNwbGljZShsZW5ndGgsIDEpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vZGVzO1xufTtcblxuY29uc3QgZmluZEFsbCA9ICh0ZXN0LCBub2RlcykgPT4ge1xuICBjb25zdCBtYXRjaGVzID0gW107XG4gIGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlcykge1xuICAgIGlmIChpc1RhZyhub2RlKSkge1xuICAgICAgaWYgKHRlc3Qobm9kZSkpXG4gICAgICAgIG1hdGNoZXMucHVzaChub2RlKTtcbiAgICAgIG1hdGNoZXMucHVzaCguLi5maW5kQWxsKHRlc3QsIGdldENoaWxkcmVuKG5vZGUpKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXRjaGVzO1xufTtcblxuY29uc3QgZmluZE9uZSA9ICh0ZXN0LCBub2RlcykgPT4ge1xuICBmb3IgKGxldCBub2RlIG9mIG5vZGVzKVxuICAgIGlmICh0ZXN0KG5vZGUpIHx8IChub2RlID0gZmluZE9uZSh0ZXN0LCBnZXRDaGlsZHJlbihub2RlKSkpKVxuICAgICAgcmV0dXJuIG5vZGU7XG4gIHJldHVybiBudWxsO1xufTtcbi8qIGM4IGlnbm9yZSBzdG9wICovXG5cbmNvbnN0IGFkYXB0ZXIgPSB7XG4gIGlzVGFnLFxuICBleGlzdHNPbmUsXG4gIGdldEF0dHJpYnV0ZVZhbHVlLFxuICBnZXRDaGlsZHJlbixcbiAgZ2V0TmFtZSxcbiAgZ2V0UGFyZW50LFxuICBnZXRTaWJsaW5ncyxcbiAgZ2V0VGV4dCxcbiAgaGFzQXR0cmliLFxuICByZW1vdmVTdWJzZXRzLFxuICBmaW5kQWxsLFxuICBmaW5kT25lXG59O1xuXG5leHBvcnQgY29uc3QgcHJlcGFyZU1hdGNoID0gKGVsZW1lbnQsIHNlbGVjdG9ycykgPT4gQ1NTc2VsZWN0LmNvbXBpbGUoXG4gIHNlbGVjdG9ycyxcbiAge1xuICAgIGNvbnRleHQ6IHNlbGVjdG9ycy5pbmNsdWRlcygnOnNjb3BlJykgPyBlbGVtZW50IDogdm9pZCAwLFxuICAgIHhtbE1vZGU6ICFpZ25vcmVDYXNlKGVsZW1lbnQpLFxuICAgIGFkYXB0ZXJcbiAgfVxuKTtcblxuZXhwb3J0IGNvbnN0IG1hdGNoZXMgPSAoZWxlbWVudCwgc2VsZWN0b3JzKSA9PiBDU1NzZWxlY3QuaXMoXG4gIGVsZW1lbnQsXG4gIHNlbGVjdG9ycyxcbiAge1xuICAgIHN0cmljdDogdHJ1ZSxcbiAgICBjb250ZXh0OiBzZWxlY3RvcnMuaW5jbHVkZXMoJzpzY29wZScpID8gZWxlbWVudCA6IHZvaWQgMCxcbiAgICB4bWxNb2RlOiAhaWdub3JlQ2FzZShlbGVtZW50KSxcbiAgICBhZGFwdGVyXG4gIH1cbik7XG4iLCJpbXBvcnQge1RFWFRfTk9ERX0gZnJvbSAnLi4vc2hhcmVkL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQge1ZBTFVFfSBmcm9tICcuLi9zaGFyZWQvc3ltYm9scy5qcyc7XG5pbXBvcnQge2VzY2FwZX0gZnJvbSAnLi4vc2hhcmVkL3RleHQtZXNjYXBlci5qcyc7XG5cbmltcG9ydCB7Q2hhcmFjdGVyRGF0YX0gZnJvbSAnLi9jaGFyYWN0ZXItZGF0YS5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5UZXh0XG4gKi9cbmV4cG9ydCBjbGFzcyBUZXh0IGV4dGVuZHMgQ2hhcmFjdGVyRGF0YSB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGRhdGEgPSAnJykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsICcjdGV4dCcsIFRFWFRfTk9ERSwgZGF0YSk7XG4gIH1cblxuICBnZXQgd2hvbGVUZXh0KCkge1xuICAgIGNvbnN0IHRleHQgPSBbXTtcbiAgICBsZXQge3ByZXZpb3VzU2libGluZywgbmV4dFNpYmxpbmd9ID0gdGhpcztcbiAgICB3aGlsZSAocHJldmlvdXNTaWJsaW5nKSB7XG4gICAgICBpZiAocHJldmlvdXNTaWJsaW5nLm5vZGVUeXBlID09PSBURVhUX05PREUpXG4gICAgICAgIHRleHQudW5zaGlmdChwcmV2aW91c1NpYmxpbmdbVkFMVUVdKTtcbiAgICAgIGVsc2VcbiAgICAgICAgYnJlYWs7XG4gICAgICBwcmV2aW91c1NpYmxpbmcgPSBwcmV2aW91c1NpYmxpbmcucHJldmlvdXNTaWJsaW5nO1xuICAgIH1cbiAgICB0ZXh0LnB1c2godGhpc1tWQUxVRV0pO1xuICAgIHdoaWxlIChuZXh0U2libGluZykge1xuICAgICAgaWYgKG5leHRTaWJsaW5nLm5vZGVUeXBlID09PSBURVhUX05PREUpXG4gICAgICAgIHRleHQucHVzaChuZXh0U2libGluZ1tWQUxVRV0pO1xuICAgICAgZWxzZVxuICAgICAgICBicmVhaztcbiAgICAgIG5leHRTaWJsaW5nID0gbmV4dFNpYmxpbmcubmV4dFNpYmxpbmc7XG4gICAgfVxuICAgIHJldHVybiB0ZXh0LmpvaW4oJycpO1xuICB9XG5cbiAgY2xvbmVOb2RlKCkge1xuICAgIGNvbnN0IHtvd25lckRvY3VtZW50LCBbVkFMVUVdOiBkYXRhfSA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBUZXh0KG93bmVyRG9jdW1lbnQsIGRhdGEpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7IHJldHVybiBlc2NhcGUodGhpc1tWQUxVRV0pOyB9XG59XG4iLCIvLyBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2ludGVyZmFjZS1wYXJlbnRub2RlXG4vLyBEb2N1bWVudCwgRG9jdW1lbnRGcmFnbWVudCwgRWxlbWVudFxuXG5pbXBvcnQge1xuICBBVFRSSUJVVEVfTk9ERSxcbiAgRE9DVU1FTlRfRlJBR01FTlRfTk9ERSxcbiAgRUxFTUVOVF9OT0RFLFxuICBURVhUX05PREUsXG4gIE5PREVfRU5ELFxuICBDREFUQV9TRUNUSU9OX05PREUsXG4gIENPTU1FTlRfTk9ERVxufSBmcm9tICcuLi9zaGFyZWQvY29uc3RhbnRzLmpzJztcblxuaW1wb3J0IHtQUklWQVRFLCBFTkQsIE5FWFQsIFBSRVYsIFNUQVJULCBWQUxVRX0gZnJvbSAnLi4vc2hhcmVkL3N5bWJvbHMuanMnO1xuXG5pbXBvcnQge3ByZXBhcmVNYXRjaH0gZnJvbSAnLi4vc2hhcmVkL21hdGNoZXMuanMnO1xuaW1wb3J0IHtwcmV2aW91c1NpYmxpbmcsIG5leHRTaWJsaW5nfSBmcm9tICcuLi9zaGFyZWQvbm9kZS5qcyc7XG5pbXBvcnQge2dldEVuZCwga25vd25BZGphY2VudCwga25vd25Cb3VuZGFyaWVzLCBrbm93blNlZ21lbnQsIGtub3duU2libGluZ3MsIGxvY2FsQ2FzZX0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLmpzJztcblxuaW1wb3J0IHtOb2RlfSBmcm9tICcuLi9pbnRlcmZhY2Uvbm9kZS5qcyc7XG5pbXBvcnQge1RleHR9IGZyb20gJy4uL2ludGVyZmFjZS90ZXh0LmpzJztcbmltcG9ydCB7Tm9kZUxpc3R9IGZyb20gJy4uL2ludGVyZmFjZS9ub2RlLWxpc3QuanMnO1xuXG5pbXBvcnQge21vQ2FsbGJhY2t9IGZyb20gJy4uL2ludGVyZmFjZS9tdXRhdGlvbi1vYnNlcnZlci5qcyc7XG5pbXBvcnQge2Nvbm5lY3RlZENhbGxiYWNrfSBmcm9tICcuLi9pbnRlcmZhY2UvY3VzdG9tLWVsZW1lbnQtcmVnaXN0cnkuanMnO1xuXG5pbXBvcnQge25leHRFbGVtZW50U2libGluZ30gZnJvbSAnLi9ub24tZG9jdW1lbnQtdHlwZS1jaGlsZC1ub2RlLmpzJztcblxuY29uc3QgaXNOb2RlID0gbm9kZSA9PiBub2RlIGluc3RhbmNlb2YgTm9kZTtcblxuY29uc3QgaW5zZXJ0ID0gKHBhcmVudE5vZGUsIGNoaWxkLCBub2RlcykgPT4ge1xuICBjb25zdCB7b3duZXJEb2N1bWVudH0gPSBwYXJlbnROb2RlO1xuICBmb3IgKGNvbnN0IG5vZGUgb2Ygbm9kZXMpXG4gICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoXG4gICAgICBpc05vZGUobm9kZSkgPyBub2RlIDogbmV3IFRleHQob3duZXJEb2N1bWVudCwgbm9kZSksXG4gICAgICBjaGlsZFxuICAgICk7XG59O1xuXG4vKiogQHR5cGVkZWYgeyBpbXBvcnQoJy4uL2ludGVyZmFjZS9lbGVtZW50LmpzJykuRWxlbWVudCAmIHtcbiAgICBbdHlwZW9mIE5FWFRdOiBOb2RlU3RydWN0LFxuICAgIFt0eXBlb2YgUFJFVl06IE5vZGVTdHJ1Y3QsXG4gICAgW3R5cGVvZiBTVEFSVF06IE5vZGVTdHJ1Y3QsXG4gICAgbm9kZVR5cGU6IHR5cGVvZiBBVFRSSUJVVEVfTk9ERSB8IHR5cGVvZiBET0NVTUVOVF9GUkFHTUVOVF9OT0RFIHwgdHlwZW9mIEVMRU1FTlRfTk9ERSB8IHR5cGVvZiBURVhUX05PREUgfCB0eXBlb2YgTk9ERV9FTkQgfCB0eXBlb2YgQ09NTUVOVF9OT0RFIHwgdHlwZW9mIENEQVRBX1NFQ1RJT05fTk9ERSxcbiAgICBvd25lckRvY3VtZW50OiBEb2N1bWVudCxcbiAgICBwYXJlbnROb2RlOiBQYXJlbnROb2RlLFxufX0gTm9kZVN0cnVjdCAqL1xuXG5leHBvcnQgY2xhc3MgUGFyZW50Tm9kZSBleHRlbmRzIE5vZGUge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUsIG5vZGVUeXBlKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lLCBub2RlVHlwZSk7XG4gICAgdGhpc1tQUklWQVRFXSA9IG51bGw7XG4gICAgLyoqIEB0eXBlIHtOb2RlU3RydWN0fSAqL1xuICAgIHRoaXNbTkVYVF0gPSB0aGlzW0VORF0gPSB7XG4gICAgICBbTkVYVF06IG51bGwsXG4gICAgICBbUFJFVl06IHRoaXMsXG4gICAgICBbU1RBUlRdOiB0aGlzLFxuICAgICAgbm9kZVR5cGU6IE5PREVfRU5ELFxuICAgICAgb3duZXJEb2N1bWVudDogdGhpcy5vd25lckRvY3VtZW50LFxuICAgICAgcGFyZW50Tm9kZTogbnVsbFxuICAgIH07XG4gIH1cblxuICBnZXQgY2hpbGROb2RlcygpIHtcbiAgICBjb25zdCBjaGlsZE5vZGVzID0gbmV3IE5vZGVMaXN0O1xuICAgIGxldCB7Zmlyc3RDaGlsZH0gPSB0aGlzO1xuICAgIHdoaWxlIChmaXJzdENoaWxkKSB7XG4gICAgICBjaGlsZE5vZGVzLnB1c2goZmlyc3RDaGlsZCk7XG4gICAgICBmaXJzdENoaWxkID0gbmV4dFNpYmxpbmcoZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHJldHVybiBjaGlsZE5vZGVzO1xuICB9XG5cbiAgZ2V0IGNoaWxkcmVuKCkge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gbmV3IE5vZGVMaXN0O1xuICAgIGxldCB7Zmlyc3RFbGVtZW50Q2hpbGR9ID0gdGhpcztcbiAgICB3aGlsZSAoZmlyc3RFbGVtZW50Q2hpbGQpIHtcbiAgICAgIGNoaWxkcmVuLnB1c2goZmlyc3RFbGVtZW50Q2hpbGQpO1xuICAgICAgZmlyc3RFbGVtZW50Q2hpbGQgPSBuZXh0RWxlbWVudFNpYmxpbmcoZmlyc3RFbGVtZW50Q2hpbGQpO1xuICAgIH1cbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge05vZGVTdHJ1Y3QgfCBudWxsfVxuICAgKi9cbiAgZ2V0IGZpcnN0Q2hpbGQoKSB7XG4gICAgbGV0IHtbTkVYVF06IG5leHQsIFtFTkRdOiBlbmR9ID0gdGhpcztcbiAgICB3aGlsZSAobmV4dC5ub2RlVHlwZSA9PT0gQVRUUklCVVRFX05PREUpXG4gICAgICBuZXh0ID0gbmV4dFtORVhUXTtcbiAgICByZXR1cm4gbmV4dCA9PT0gZW5kID8gbnVsbCA6IG5leHQ7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge05vZGVTdHJ1Y3QgfCBudWxsfVxuICAgKi9cbiAgZ2V0IGZpcnN0RWxlbWVudENoaWxkKCkge1xuICAgIGxldCB7Zmlyc3RDaGlsZH0gPSB0aGlzO1xuICAgIHdoaWxlIChmaXJzdENoaWxkKSB7XG4gICAgICBpZiAoZmlyc3RDaGlsZC5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKVxuICAgICAgICByZXR1cm4gZmlyc3RDaGlsZDtcbiAgICAgIGZpcnN0Q2hpbGQgPSBuZXh0U2libGluZyhmaXJzdENoaWxkKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBnZXQgbGFzdENoaWxkKCkge1xuICAgIGNvbnN0IHByZXYgPSB0aGlzW0VORF1bUFJFVl07XG4gICAgc3dpdGNoIChwcmV2Lm5vZGVUeXBlKSB7XG4gICAgICBjYXNlIE5PREVfRU5EOlxuICAgICAgICByZXR1cm4gcHJldltTVEFSVF07XG4gICAgICBjYXNlIEFUVFJJQlVURV9OT0RFOlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHByZXYgPT09IHRoaXMgPyBudWxsIDogcHJldjtcbiAgfVxuXG4gIGdldCBsYXN0RWxlbWVudENoaWxkKCkge1xuICAgIGxldCB7bGFzdENoaWxkfSA9IHRoaXM7XG4gICAgd2hpbGUgKGxhc3RDaGlsZCkge1xuICAgICAgaWYgKGxhc3RDaGlsZC5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKVxuICAgICAgICByZXR1cm4gbGFzdENoaWxkO1xuICAgICAgbGFzdENoaWxkID0gcHJldmlvdXNTaWJsaW5nKGxhc3RDaGlsZCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZ2V0IGNoaWxkRWxlbWVudENvdW50KCkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLmxlbmd0aDtcbiAgfVxuXG4gIHByZXBlbmQoLi4ubm9kZXMpIHtcbiAgICBpbnNlcnQodGhpcywgdGhpcy5maXJzdENoaWxkLCBub2Rlcyk7XG4gIH1cblxuICBhcHBlbmQoLi4ubm9kZXMpIHtcbiAgICBpbnNlcnQodGhpcywgdGhpc1tFTkRdLCBub2Rlcyk7XG4gIH1cblxuICByZXBsYWNlQ2hpbGRyZW4oLi4ubm9kZXMpIHtcbiAgICBsZXQge1tORVhUXTogbmV4dCwgW0VORF06IGVuZH0gPSB0aGlzO1xuICAgIHdoaWxlIChuZXh0ICE9PSBlbmQgJiYgbmV4dC5ub2RlVHlwZSA9PT0gQVRUUklCVVRFX05PREUpXG4gICAgICBuZXh0ID0gbmV4dFtORVhUXTtcbiAgICB3aGlsZSAobmV4dCAhPT0gZW5kKSB7XG4gICAgICBjb25zdCBhZnRlciA9IGdldEVuZChuZXh0KVtORVhUXTtcbiAgICAgIG5leHQucmVtb3ZlKCk7XG4gICAgICBuZXh0ID0gYWZ0ZXI7XG4gICAgfVxuICAgIGlmIChub2Rlcy5sZW5ndGgpXG4gICAgICBpbnNlcnQodGhpcywgZW5kLCBub2Rlcyk7XG4gIH1cblxuICBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGNsYXNzTmFtZSkge1xuICAgIGNvbnN0IGVsZW1lbnRzID0gbmV3IE5vZGVMaXN0O1xuICAgIGxldCB7W05FWFRdOiBuZXh0LCBbRU5EXTogZW5kfSA9IHRoaXM7XG4gICAgd2hpbGUgKG5leHQgIT09IGVuZCkge1xuICAgICAgaWYgKFxuICAgICAgICBuZXh0Lm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUgJiZcbiAgICAgICAgbmV4dC5oYXNBdHRyaWJ1dGUoJ2NsYXNzJykgJiZcbiAgICAgICAgbmV4dC5jbGFzc0xpc3QuaGFzKGNsYXNzTmFtZSlcbiAgICAgIClcbiAgICAgICAgZWxlbWVudHMucHVzaChuZXh0KTtcbiAgICAgIG5leHQgPSBuZXh0W05FWFRdO1xuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudHM7XG4gIH1cblxuICBnZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lKSB7XG4gICAgY29uc3QgZWxlbWVudHMgPSBuZXcgTm9kZUxpc3Q7XG4gICAgbGV0IHtbTkVYVF06IG5leHQsIFtFTkRdOiBlbmR9ID0gdGhpcztcbiAgICB3aGlsZSAobmV4dCAhPT0gZW5kKSB7XG4gICAgICBpZiAobmV4dC5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFICYmIChcbiAgICAgICAgbmV4dC5sb2NhbE5hbWUgPT09IHRhZ05hbWUgfHxcbiAgICAgICAgbG9jYWxDYXNlKG5leHQpID09PSB0YWdOYW1lXG4gICAgICApKVxuICAgICAgICBlbGVtZW50cy5wdXNoKG5leHQpO1xuICAgICAgbmV4dCA9IG5leHRbTkVYVF07XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50cztcbiAgfVxuXG4gIHF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JzKSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IHByZXBhcmVNYXRjaCh0aGlzLCBzZWxlY3RvcnMpO1xuICAgIGxldCB7W05FWFRdOiBuZXh0LCBbRU5EXTogZW5kfSA9IHRoaXM7XG4gICAgd2hpbGUgKG5leHQgIT09IGVuZCkge1xuICAgICAgaWYgKG5leHQubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSAmJiBtYXRjaGVzKG5leHQpKVxuICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgIG5leHQgPSBuZXh0Lm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUgJiYgbmV4dC5sb2NhbE5hbWUgPT09ICd0ZW1wbGF0ZScgPyBuZXh0W0VORF0gOiBuZXh0W05FWFRdO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3JzKSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IHByZXBhcmVNYXRjaCh0aGlzLCBzZWxlY3RvcnMpO1xuICAgIGNvbnN0IGVsZW1lbnRzID0gbmV3IE5vZGVMaXN0O1xuICAgIGxldCB7W05FWFRdOiBuZXh0LCBbRU5EXTogZW5kfSA9IHRoaXM7XG4gICAgd2hpbGUgKG5leHQgIT09IGVuZCkge1xuICAgICAgaWYgKG5leHQubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSAmJiBtYXRjaGVzKG5leHQpKVxuICAgICAgICBlbGVtZW50cy5wdXNoKG5leHQpO1xuICAgICAgbmV4dCA9IG5leHQubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSAmJiBuZXh0LmxvY2FsTmFtZSA9PT0gJ3RlbXBsYXRlJyA/IG5leHRbRU5EXSA6IG5leHRbTkVYVF07XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50cztcbiAgfVxuXG4gIGFwcGVuZENoaWxkKG5vZGUpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUobm9kZSwgdGhpc1tFTkRdKTtcbiAgfVxuXG4gIGNvbnRhaW5zKG5vZGUpIHtcbiAgICBsZXQgcGFyZW50Tm9kZSA9IG5vZGU7XG4gICAgd2hpbGUgKHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZSAhPT0gdGhpcylcbiAgICAgIHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgcmV0dXJuIHBhcmVudE5vZGUgPT09IHRoaXM7XG4gIH1cblxuICBpbnNlcnRCZWZvcmUobm9kZSwgYmVmb3JlID0gbnVsbCkge1xuICAgIGlmIChub2RlID09PSBiZWZvcmUpXG4gICAgICByZXR1cm4gbm9kZTtcbiAgICBpZiAobm9kZSA9PT0gdGhpcylcbiAgICAgIHRocm93IG5ldyBFcnJvcigndW5hYmxlIHRvIGFwcGVuZCBhIG5vZGUgdG8gaXRzZWxmJyk7XG4gICAgY29uc3QgbmV4dCA9IGJlZm9yZSB8fCB0aGlzW0VORF07XG4gICAgc3dpdGNoIChub2RlLm5vZGVUeXBlKSB7XG4gICAgICBjYXNlIEVMRU1FTlRfTk9ERTpcbiAgICAgICAgbm9kZS5yZW1vdmUoKTtcbiAgICAgICAgbm9kZS5wYXJlbnROb2RlID0gdGhpcztcbiAgICAgICAga25vd25Cb3VuZGFyaWVzKG5leHRbUFJFVl0sIG5vZGUsIG5leHQpO1xuICAgICAgICBtb0NhbGxiYWNrKG5vZGUsIG51bGwpO1xuICAgICAgICBjb25uZWN0ZWRDYWxsYmFjayhub2RlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6IHtcbiAgICAgICAgbGV0IHtbUFJJVkFURV06IHBhcmVudE5vZGUsIGZpcnN0Q2hpbGQsIGxhc3RDaGlsZH0gPSBub2RlO1xuICAgICAgICBpZiAoZmlyc3RDaGlsZCkge1xuICAgICAgICAgIGtub3duU2VnbWVudChuZXh0W1BSRVZdLCBmaXJzdENoaWxkLCBsYXN0Q2hpbGQsIG5leHQpO1xuICAgICAgICAgIGtub3duQWRqYWNlbnQobm9kZSwgbm9kZVtFTkRdKTtcbiAgICAgICAgICBpZiAocGFyZW50Tm9kZSlcbiAgICAgICAgICAgIHBhcmVudE5vZGUucmVwbGFjZUNoaWxkcmVuKCk7XG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgZmlyc3RDaGlsZC5wYXJlbnROb2RlID0gdGhpcztcbiAgICAgICAgICAgIG1vQ2FsbGJhY2soZmlyc3RDaGlsZCwgbnVsbCk7XG4gICAgICAgICAgICBpZiAoZmlyc3RDaGlsZC5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKVxuICAgICAgICAgICAgICBjb25uZWN0ZWRDYWxsYmFjayhmaXJzdENoaWxkKTtcbiAgICAgICAgICB9IHdoaWxlIChcbiAgICAgICAgICAgIGZpcnN0Q2hpbGQgIT09IGxhc3RDaGlsZCAmJlxuICAgICAgICAgICAgKGZpcnN0Q2hpbGQgPSBuZXh0U2libGluZyhmaXJzdENoaWxkKSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBURVhUX05PREU6XG4gICAgICBjYXNlIENPTU1FTlRfTk9ERTpcbiAgICAgIGNhc2UgQ0RBVEFfU0VDVElPTl9OT0RFOlxuICAgICAgICBub2RlLnJlbW92ZSgpO1xuICAgICAgLyogZXNsaW50IG5vLWZhbGx0aHJvdWdoOjAgKi9cbiAgICAgIC8vIHRoaXMgY292ZXJzIERPQ1VNRU5UX1RZUEVfTk9ERSB0b29cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG5vZGUucGFyZW50Tm9kZSA9IHRoaXM7XG4gICAgICAgIGtub3duU2libGluZ3MobmV4dFtQUkVWXSwgbm9kZSwgbmV4dCk7XG4gICAgICAgIG1vQ2FsbGJhY2sobm9kZSwgbnVsbCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIG5vcm1hbGl6ZSgpIHtcbiAgICBsZXQge1tORVhUXTogbmV4dCwgW0VORF06IGVuZH0gPSB0aGlzO1xuICAgIHdoaWxlIChuZXh0ICE9PSBlbmQpIHtcbiAgICAgIGNvbnN0IHtbTkVYVF06ICRuZXh0LCBbUFJFVl06ICRwcmV2LCBub2RlVHlwZX0gPSBuZXh0O1xuICAgICAgaWYgKG5vZGVUeXBlID09PSBURVhUX05PREUpIHtcbiAgICAgICAgaWYgKCFuZXh0W1ZBTFVFXSlcbiAgICAgICAgICBuZXh0LnJlbW92ZSgpO1xuICAgICAgICBlbHNlIGlmICgkcHJldiAmJiAkcHJldi5ub2RlVHlwZSA9PT0gVEVYVF9OT0RFKSB7XG4gICAgICAgICAgJHByZXYudGV4dENvbnRlbnQgKz0gbmV4dC50ZXh0Q29udGVudDtcbiAgICAgICAgICBuZXh0LnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBuZXh0ID0gJG5leHQ7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlQ2hpbGQobm9kZSkge1xuICAgIGlmIChub2RlLnBhcmVudE5vZGUgIT09IHRoaXMpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vZGUgaXMgbm90IGEgY2hpbGQnKTtcbiAgICBub2RlLnJlbW92ZSgpO1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcmVwbGFjZUNoaWxkKG5vZGUsIHJlcGxhY2VkKSB7XG4gICAgY29uc3QgbmV4dCA9IGdldEVuZChyZXBsYWNlZClbTkVYVF07XG4gICAgcmVwbGFjZWQucmVtb3ZlKCk7XG4gICAgdGhpcy5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG4gICAgcmV0dXJuIHJlcGxhY2VkO1xuICB9XG59XG4iLCIvLyBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2ludGVyZmFjZS1ub25lbGVtZW50cGFyZW50bm9kZVxuLy8gRG9jdW1lbnQsIERvY3VtZW50RnJhZ21lbnRcblxuaW1wb3J0IHtFTEVNRU5UX05PREV9IGZyb20gJy4uL3NoYXJlZC9jb25zdGFudHMuanMnO1xuaW1wb3J0IHtFTkQsIE5FWFR9IGZyb20gJy4uL3NoYXJlZC9zeW1ib2xzLmpzJztcbmltcG9ydCB7bm9uRWxlbWVudEFzSlNPTn0gZnJvbSAnLi4vc2hhcmVkL2pzZG9uLmpzJztcblxuaW1wb3J0IHtQYXJlbnROb2RlfSBmcm9tICcuL3BhcmVudC1ub2RlLmpzJztcblxuZXhwb3J0IGNsYXNzIE5vbkVsZW1lbnRQYXJlbnROb2RlIGV4dGVuZHMgUGFyZW50Tm9kZSB7XG4gIGdldEVsZW1lbnRCeUlkKGlkKSB7XG4gICAgbGV0IHtbTkVYVF06IG5leHQsIFtFTkRdOiBlbmR9ID0gdGhpcztcbiAgICB3aGlsZSAobmV4dCAhPT0gZW5kKSB7XG4gICAgICBpZiAobmV4dC5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFICYmIG5leHQuaWQgPT09IGlkKVxuICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgIG5leHQgPSBuZXh0W05FWFRdO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNsb25lTm9kZShkZWVwKSB7XG4gICAgY29uc3Qge293bmVyRG9jdW1lbnQsIGNvbnN0cnVjdG9yfSA9IHRoaXM7XG4gICAgY29uc3Qgbm9uRVBOID0gbmV3IGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQpO1xuICAgIGlmIChkZWVwKSB7XG4gICAgICBjb25zdCB7W0VORF06IGVuZH0gPSBub25FUE47XG4gICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgdGhpcy5jaGlsZE5vZGVzKVxuICAgICAgICBub25FUE4uaW5zZXJ0QmVmb3JlKG5vZGUuY2xvbmVOb2RlKGRlZXApLCBlbmQpO1xuICAgIH1cbiAgICByZXR1cm4gbm9uRVBOOyBcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGNvbnN0IHtjaGlsZE5vZGVzLCBsb2NhbE5hbWV9ID0gdGhpcztcbiAgICByZXR1cm4gYDwke2xvY2FsTmFtZX0+JHtjaGlsZE5vZGVzLmpvaW4oJycpfTwvJHtsb2NhbE5hbWV9PmA7XG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgY29uc3QganNvbiA9IFtdO1xuICAgIG5vbkVsZW1lbnRBc0pTT04odGhpcywganNvbik7XG4gICAgcmV0dXJuIGpzb247XG4gIH1cbn1cbiIsImltcG9ydCB7RE9DVU1FTlRfRlJBR01FTlRfTk9ERX0gZnJvbSAnLi4vc2hhcmVkL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQge05vbkVsZW1lbnRQYXJlbnROb2RlfSBmcm9tICcuLi9taXhpbi9ub24tZWxlbWVudC1wYXJlbnQtbm9kZS5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5Eb2N1bWVudEZyYWdtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBEb2N1bWVudEZyYWdtZW50IGV4dGVuZHMgTm9uRWxlbWVudFBhcmVudE5vZGUge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50KSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgJyNkb2N1bWVudC1mcmFnbWVudCcsIERPQ1VNRU5UX0ZSQUdNRU5UX05PREUpO1xuICB9XG59XG4iLCJpbXBvcnQge0RPQ1VNRU5UX1RZUEVfTk9ERX0gZnJvbSAnLi4vc2hhcmVkL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQge2RvY3VtZW50VHlwZUFzSlNPTn0gZnJvbSAnLi4vc2hhcmVkL2pzZG9uLmpzJztcblxuaW1wb3J0IHtOb2RlfSBmcm9tICcuL25vZGUuanMnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuRG9jdW1lbnRUeXBlXG4gKi9cbmV4cG9ydCBjbGFzcyBEb2N1bWVudFR5cGUgZXh0ZW5kcyBOb2RlIHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbmFtZSwgcHVibGljSWQgPSAnJywgc3lzdGVtSWQgPSAnJykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsICcjZG9jdW1lbnQtdHlwZScsIERPQ1VNRU5UX1RZUEVfTk9ERSk7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnB1YmxpY0lkID0gcHVibGljSWQ7XG4gICAgdGhpcy5zeXN0ZW1JZCA9IHN5c3RlbUlkO1xuICB9XG5cbiAgY2xvbmVOb2RlKCkge1xuICAgIGNvbnN0IHtvd25lckRvY3VtZW50LCBuYW1lLCBwdWJsaWNJZCwgc3lzdGVtSWR9ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IERvY3VtZW50VHlwZShvd25lckRvY3VtZW50LCBuYW1lLCBwdWJsaWNJZCwgc3lzdGVtSWQpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgY29uc3Qge25hbWUsIHB1YmxpY0lkLCBzeXN0ZW1JZH0gPSB0aGlzO1xuICAgIGNvbnN0IGhhc1B1YmxpYyA9IDAgPCBwdWJsaWNJZC5sZW5ndGg7XG4gICAgY29uc3Qgc3RyID0gW25hbWVdO1xuICAgIGlmIChoYXNQdWJsaWMpXG4gICAgICBzdHIucHVzaCgnUFVCTElDJywgYFwiJHtwdWJsaWNJZH1cImApO1xuICAgIGlmIChzeXN0ZW1JZC5sZW5ndGgpIHtcbiAgICAgIGlmICghaGFzUHVibGljKVxuICAgICAgICBzdHIucHVzaCgnU1lTVEVNJyk7XG4gICAgICBzdHIucHVzaChgXCIke3N5c3RlbUlkfVwiYCk7XG4gICAgfVxuICAgIHJldHVybiBgPCFET0NUWVBFICR7c3RyLmpvaW4oJyAnKX0+YDtcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICBjb25zdCBqc29uID0gW107XG4gICAgZG9jdW1lbnRUeXBlQXNKU09OKHRoaXMsIGpzb24pO1xuICAgIHJldHVybiBqc29uO1xuICB9XG59XG4iLCJpbXBvcnQge0VMRU1FTlRfTk9ERSwgRE9DVU1FTlRfRlJBR01FTlRfTk9ERX0gZnJvbSAnLi4vc2hhcmVkL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQge0NVU1RPTV9FTEVNRU5UU30gZnJvbSAnLi4vc2hhcmVkL3N5bWJvbHMuanMnO1xuaW1wb3J0IHtwYXJzZUZyb21TdHJpbmd9IGZyb20gJy4uL3NoYXJlZC9wYXJzZS1mcm9tLXN0cmluZy5qcyc7XG5pbXBvcnQge2lnbm9yZUNhc2V9IGZyb20gJy4uL3NoYXJlZC91dGlscy5qcyc7XG5cblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRJbm5lckh0bWwgPSBub2RlID0+IG5vZGUuY2hpbGROb2Rlcy5qb2luKCcnKTtcblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBodG1sXG4gKi9cbmV4cG9ydCBjb25zdCBzZXRJbm5lckh0bWwgPSAobm9kZSwgaHRtbCkgPT4ge1xuICBjb25zdCB7b3duZXJEb2N1bWVudH0gPSBub2RlO1xuICBjb25zdCB7Y29uc3RydWN0b3J9ID0gb3duZXJEb2N1bWVudDtcbiAgY29uc3QgZG9jdW1lbnQgPSBuZXcgY29uc3RydWN0b3I7XG4gIGRvY3VtZW50W0NVU1RPTV9FTEVNRU5UU10gPSBvd25lckRvY3VtZW50W0NVU1RPTV9FTEVNRU5UU107XG4gIGNvbnN0IHtjaGlsZE5vZGVzfSA9IHBhcnNlRnJvbVN0cmluZyhkb2N1bWVudCwgaWdub3JlQ2FzZShub2RlKSwgaHRtbCk7XG5cbiAgbm9kZS5yZXBsYWNlQ2hpbGRyZW4oLi4uY2hpbGROb2Rlcy5tYXAoc2V0T3duZXJEb2N1bWVudCwgb3duZXJEb2N1bWVudCkpO1xufTtcblxuZnVuY3Rpb24gc2V0T3duZXJEb2N1bWVudChub2RlKSB7XG4gIG5vZGUub3duZXJEb2N1bWVudCA9IHRoaXM7XG4gIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuICAgIGNhc2UgRUxFTUVOVF9OT0RFOlxuICAgIGNhc2UgRE9DVU1FTlRfRlJBR01FTlRfTk9ERTpcbiAgICAgIG5vZGUuY2hpbGROb2Rlcy5mb3JFYWNoKHNldE93bmVyRG9jdW1lbnQsIHRoaXMpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjYW1lbCA9PiBjYW1lbC5yZXBsYWNlKC8oKFtBLVowLTldKShbQS1aMC05XVthLXpdKSl8KChbYS16MC05XSspKFtBLVpdKSkvZywgJyQyJDUtJDMkNicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuIiwiaW1wb3J0IHVoeXBoZW4gZnJvbSAndWh5cGhlbic7XG5pbXBvcnQge3NldFByb3RvdHlwZU9mfSBmcm9tICcuLi9zaGFyZWQvb2JqZWN0LmpzJztcblxuY29uc3QgcmVmcyA9IG5ldyBXZWFrTWFwO1xuXG5jb25zdCBrZXkgPSBuYW1lID0+IGBkYXRhLSR7dWh5cGhlbihuYW1lKX1gO1xuY29uc3QgcHJvcCA9IG5hbWUgPT4gbmFtZS5zbGljZSg1KS5yZXBsYWNlKC8tKFthLXpdKS9nLCAoXywgJDEpID0+ICQxLnRvVXBwZXJDYXNlKCkpO1xuXG5jb25zdCBoYW5kbGVyID0ge1xuICBnZXQoZGF0YXNldCwgbmFtZSkge1xuICAgIGlmIChuYW1lIGluIGRhdGFzZXQpXG4gICAgICByZXR1cm4gcmVmcy5nZXQoZGF0YXNldCkuZ2V0QXR0cmlidXRlKGtleShuYW1lKSk7XG4gIH0sXG5cbiAgc2V0KGRhdGFzZXQsIG5hbWUsIHZhbHVlKSB7XG4gICAgZGF0YXNldFtuYW1lXSA9IHZhbHVlO1xuICAgIHJlZnMuZ2V0KGRhdGFzZXQpLnNldEF0dHJpYnV0ZShrZXkobmFtZSksIHZhbHVlKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICBkZWxldGVQcm9wZXJ0eShkYXRhc2V0LCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgaW4gZGF0YXNldClcbiAgICAgIHJlZnMuZ2V0KGRhdGFzZXQpLnJlbW92ZUF0dHJpYnV0ZShrZXkobmFtZSkpO1xuICAgIHJldHVybiBkZWxldGUgZGF0YXNldFtuYW1lXTtcbiAgfVxufTtcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkRPTVN0cmluZ01hcFxuICovXG5leHBvcnQgY2xhc3MgRE9NU3RyaW5nTWFwIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gcmVmXG4gICAqL1xuICBjb25zdHJ1Y3RvcihyZWYpIHtcbiAgICBmb3IgKGNvbnN0IHtuYW1lLCB2YWx1ZX0gb2YgcmVmLmF0dHJpYnV0ZXMpIHtcbiAgICAgIGlmICgvXmRhdGEtLy50ZXN0KG5hbWUpKVxuICAgICAgICB0aGlzW3Byb3AobmFtZSldID0gdmFsdWU7XG4gICAgfVxuICAgIHJlZnMuc2V0KHRoaXMsIHJlZik7XG4gICAgcmV0dXJuIG5ldyBQcm94eSh0aGlzLCBoYW5kbGVyKTtcbiAgfVxufVxuXG5zZXRQcm90b3R5cGVPZihET01TdHJpbmdNYXAucHJvdG90eXBlLCBudWxsKTtcbiIsImltcG9ydCB7T1dORVJfRUxFTUVOVH0gZnJvbSAnLi4vc2hhcmVkL3N5bWJvbHMuanMnO1xuaW1wb3J0IHtzZXRBdHRyaWJ1dGV9IGZyb20gJy4uL3NoYXJlZC9hdHRyaWJ1dGVzLmpzJztcblxuaW1wb3J0IHtBdHRyfSBmcm9tICcuLi9pbnRlcmZhY2UvYXR0ci5qcyc7XG5cbmNvbnN0IHthZGR9ID0gU2V0LnByb3RvdHlwZTtcbmNvbnN0IGFkZFRva2VucyA9IChzZWxmLCB0b2tlbnMpID0+IHtcbiAgZm9yIChjb25zdCB0b2tlbiBvZiB0b2tlbnMpIHtcbiAgICBpZiAodG9rZW4pXG4gICAgICBhZGQuY2FsbChzZWxmLCB0b2tlbik7XG4gIH1cbn07XG5cbmNvbnN0IHVwZGF0ZSA9ICh7W09XTkVSX0VMRU1FTlRdOiBvd25lckVsZW1lbnQsIHZhbHVlfSkgPT4ge1xuICBjb25zdCBhdHRyaWJ1dGUgPSBvd25lckVsZW1lbnQuZ2V0QXR0cmlidXRlTm9kZSgnY2xhc3MnKTtcbiAgaWYgKGF0dHJpYnV0ZSlcbiAgICBhdHRyaWJ1dGUudmFsdWUgPSB2YWx1ZTtcbiAgZWxzZVxuICAgIHNldEF0dHJpYnV0ZShcbiAgICAgIG93bmVyRWxlbWVudCxcbiAgICAgIG5ldyBBdHRyKG93bmVyRWxlbWVudC5vd25lckRvY3VtZW50LCAnY2xhc3MnLCB2YWx1ZSlcbiAgICApO1xufTtcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkRPTVRva2VuTGlzdFxuICovXG5leHBvcnQgY2xhc3MgRE9NVG9rZW5MaXN0IGV4dGVuZHMgU2V0IHtcblxuICBjb25zdHJ1Y3Rvcihvd25lckVsZW1lbnQpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXNbT1dORVJfRUxFTUVOVF0gPSBvd25lckVsZW1lbnQ7XG4gICAgY29uc3QgYXR0cmlidXRlID0gb3duZXJFbGVtZW50LmdldEF0dHJpYnV0ZU5vZGUoJ2NsYXNzJyk7XG4gICAgaWYgKGF0dHJpYnV0ZSlcbiAgICAgIGFkZFRva2Vucyh0aGlzLCBhdHRyaWJ1dGUudmFsdWUuc3BsaXQoL1xccysvKSk7XG4gIH1cblxuICBnZXQgbGVuZ3RoKCkgeyByZXR1cm4gdGhpcy5zaXplOyB9XG5cbiAgZ2V0IHZhbHVlKCkgeyByZXR1cm4gWy4uLnRoaXNdLmpvaW4oJyAnKTsgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gIHsuLi5zdHJpbmd9IHRva2Vuc1xuICAgKi9cbiAgYWRkKC4uLnRva2Vucykge1xuICAgIGFkZFRva2Vucyh0aGlzLCB0b2tlbnMpO1xuICAgIHVwZGF0ZSh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9rZW5cbiAgICovXG4gIGNvbnRhaW5zKHRva2VuKSB7IHJldHVybiB0aGlzLmhhcyh0b2tlbik7IH1cblxuICAvKipcbiAgICogQHBhcmFtICB7Li4uc3RyaW5nfSB0b2tlbnNcbiAgICovXG4gIHJlbW92ZSguLi50b2tlbnMpIHtcbiAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2VucylcbiAgICAgIHRoaXMuZGVsZXRlKHRva2VuKTtcbiAgICB1cGRhdGUodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRva2VuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj99IGZvcmNlXG4gICAqL1xuICB0b2dnbGUodG9rZW4sIGZvcmNlKSB7XG4gICAgaWYgKHRoaXMuaGFzKHRva2VuKSkge1xuICAgICAgaWYgKGZvcmNlKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIHRoaXMuZGVsZXRlKHRva2VuKTtcbiAgICAgIHVwZGF0ZSh0aGlzKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZm9yY2UgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgc3VwZXIuYWRkKHRva2VuKTtcbiAgICAgIHVwZGF0ZSh0aGlzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRva2VuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdUb2tlblxuICAgKi9cbiAgcmVwbGFjZSh0b2tlbiwgbmV3VG9rZW4pIHtcbiAgICBpZiAodGhpcy5oYXModG9rZW4pKSB7XG4gICAgICB0aGlzLmRlbGV0ZSh0b2tlbik7XG4gICAgICBzdXBlci5hZGQobmV3VG9rZW4pO1xuICAgICAgdXBkYXRlKHRoaXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9rZW5cbiAgICovXG4gIHN1cHBvcnRzKCkgeyByZXR1cm4gdHJ1ZTsgfVxufVxuIiwiaW1wb3J0IHVoeXBoZW4gZnJvbSAndWh5cGhlbic7XG5cbmltcG9ydCB7Q0hBTkdFRCwgUFJJVkFURSwgVkFMVUV9IGZyb20gJy4uL3NoYXJlZC9zeW1ib2xzLmpzJztcblxuY29uc3QgcmVmcyA9IG5ldyBXZWFrTWFwO1xuXG5jb25zdCBnZXRLZXlzID0gc3R5bGUgPT4gWy4uLnN0eWxlLmtleXMoKV0uZmlsdGVyKGtleSA9PiBrZXkgIT09IFBSSVZBVEUpO1xuXG5jb25zdCB1cGRhdGVLZXlzID0gc3R5bGUgPT4ge1xuICBjb25zdCBhdHRyID0gcmVmcy5nZXQoc3R5bGUpLmdldEF0dHJpYnV0ZU5vZGUoJ3N0eWxlJyk7XG4gIGlmICghYXR0ciB8fCBhdHRyW0NIQU5HRURdIHx8IHN0eWxlLmdldChQUklWQVRFKSAhPT0gYXR0cikge1xuICAgIHN0eWxlLmNsZWFyKCk7XG4gICAgaWYgKGF0dHIpIHtcbiAgICAgIHN0eWxlLnNldChQUklWQVRFLCBhdHRyKTtcbiAgICAgIGZvciAoY29uc3QgcnVsZSBvZiBhdHRyW1ZBTFVFXS5zcGxpdCgvXFxzKjtcXHMqLykpIHtcbiAgICAgICAgbGV0IFtrZXksIC4uLnJlc3RdID0gcnVsZS5zcGxpdCgnOicpO1xuICAgICAgICBpZiAocmVzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAga2V5ID0ga2V5LnRyaW0oKTtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJlc3Quam9pbignOicpLnRyaW0oKTtcbiAgICAgICAgICBpZiAoa2V5ICYmIHZhbHVlKVxuICAgICAgICAgICAgc3R5bGUuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBhdHRyO1xufTtcblxuY29uc3QgaGFuZGxlciA9IHtcbiAgZ2V0KHN0eWxlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgaW4gcHJvdG90eXBlKVxuICAgICAgcmV0dXJuIHN0eWxlW25hbWVdO1xuICAgIHVwZGF0ZUtleXMoc3R5bGUpO1xuICAgIGlmIChuYW1lID09PSAnbGVuZ3RoJylcbiAgICAgIHJldHVybiBnZXRLZXlzKHN0eWxlKS5sZW5ndGg7XG4gICAgaWYgKC9eXFxkKyQvLnRlc3QobmFtZSkpXG4gICAgICByZXR1cm4gZ2V0S2V5cyhzdHlsZSlbbmFtZV07XG4gICAgcmV0dXJuIHN0eWxlLmdldCh1aHlwaGVuKG5hbWUpKTtcbiAgfSxcblxuICBzZXQoc3R5bGUsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKG5hbWUgPT09ICdjc3NUZXh0JylcbiAgICAgIHN0eWxlW25hbWVdID0gdmFsdWU7XG4gICAgZWxzZSB7XG4gICAgICBsZXQgYXR0ciA9IHVwZGF0ZUtleXMoc3R5bGUpO1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgIHN0eWxlLmRlbGV0ZSh1aHlwaGVuKG5hbWUpKTtcbiAgICAgIGVsc2VcbiAgICAgICAgc3R5bGUuc2V0KHVoeXBoZW4obmFtZSksIHZhbHVlKTtcbiAgICAgIGlmICghYXR0cikge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gcmVmcy5nZXQoc3R5bGUpO1xuICAgICAgICBhdHRyID0gZWxlbWVudC5vd25lckRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGVOb2RlKGF0dHIpO1xuICAgICAgICBzdHlsZS5zZXQoUFJJVkFURSwgYXR0cik7XG4gICAgICB9XG4gICAgICBhdHRyW0NIQU5HRURdID0gZmFsc2U7XG4gICAgICBhdHRyW1ZBTFVFXSA9IHN0eWxlLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuQ1NTU3R5bGVEZWNsYXJhdGlvblxuICovXG5leHBvcnQgY2xhc3MgQ1NTU3R5bGVEZWNsYXJhdGlvbiBleHRlbmRzIE1hcCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcigpO1xuICAgIHJlZnMuc2V0KHRoaXMsIGVsZW1lbnQpO1xuICAgIC8qIGM4IGlnbm9yZSBzdGFydCAqL1xuICAgIHJldHVybiBuZXcgUHJveHkodGhpcywgaGFuZGxlcik7XG4gICAgLyogYzggaWdub3JlIHN0b3AgKi9cbiAgfVxuXG4gIGdldCBjc3NUZXh0KCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gIH1cblxuICBzZXQgY3NzVGV4dCh2YWx1ZSkge1xuICAgIHJlZnMuZ2V0KHRoaXMpLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCB2YWx1ZSk7XG4gIH1cblxuICBnZXRQcm9wZXJ0eVZhbHVlKG5hbWUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpc1tQUklWQVRFXTtcbiAgICByZXR1cm4gaGFuZGxlci5nZXQoc2VsZiwgbmFtZSk7XG4gIH1cblxuICBzZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzW1BSSVZBVEVdO1xuICAgIGhhbmRsZXIuc2V0KHNlbGYsIG5hbWUsIHZhbHVlKTtcbiAgfVxuXG4gIHJlbW92ZVByb3BlcnR5KG5hbWUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpc1tQUklWQVRFXTtcbiAgICBoYW5kbGVyLnNldChzZWxmLCBuYW1lLCBudWxsKTtcbiAgfVxuXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzW1BSSVZBVEVdO1xuICAgIHVwZGF0ZUtleXMoc2VsZik7XG4gICAgY29uc3Qga2V5cyA9IGdldEtleXMoc2VsZik7XG4gICAgY29uc3Qge2xlbmd0aH0gPSBrZXlzO1xuICAgIGxldCBpID0gMDtcbiAgICByZXR1cm4ge1xuICAgICAgbmV4dCgpIHtcbiAgICAgICAgY29uc3QgZG9uZSA9IGkgPT09IGxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHtkb25lLCB2YWx1ZTogZG9uZSA/IG51bGwgOiBrZXlzW2krK119O1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBnZXRbUFJJVkFURV0oKSB7IHJldHVybiB0aGlzOyB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXNbUFJJVkFURV07XG4gICAgdXBkYXRlS2V5cyhzZWxmKTtcbiAgICBjb25zdCBjc3NUZXh0ID0gW107XG4gICAgc2VsZi5mb3JFYWNoKHB1c2gsIGNzc1RleHQpO1xuICAgIHJldHVybiBjc3NUZXh0LmpvaW4oJzsnKTtcbiAgfVxufVxuXG5jb25zdCB7cHJvdG90eXBlfSA9IENTU1N0eWxlRGVjbGFyYXRpb247XG5cbmZ1bmN0aW9uIHB1c2godmFsdWUsIGtleSkge1xuICBpZiAoa2V5ICE9PSBQUklWQVRFKVxuICAgIHRoaXMucHVzaChgJHtrZXl9OiR7dmFsdWV9YCk7XG59XG4iLCIvLyBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2ludGVyZmFjZS1ldmVudFxuXG4vKiBjOCBpZ25vcmUgc3RhcnQgKi9cblxuLy8gTm9kZSAxNSBoYXMgRXZlbnQgYnV0IDE0IGFuZCAxMiBkb24ndFxuY29uc3QgQlVCQkxJTkdfUEhBU0UgPSAzO1xuY29uc3QgQVRfVEFSR0VUID0gMjtcbmNvbnN0IENBUFRVUklOR19QSEFTRSA9IDE7XG5jb25zdCBOT05FID0gMDtcblxuZnVuY3Rpb24gZ2V0Q3VycmVudFRhcmdldChldikge1xuICByZXR1cm4gZXYuY3VycmVudFRhcmdldDtcbn1cblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkV2ZW50XG4gKi9cbmNsYXNzIEdsb2JhbEV2ZW50IHtcbiAgICBzdGF0aWMgZ2V0IEJVQkJMSU5HX1BIQVNFKCkgeyByZXR1cm4gQlVCQkxJTkdfUEhBU0U7IH1cbiAgICBzdGF0aWMgZ2V0IEFUX1RBUkdFVCgpIHsgcmV0dXJuIEFUX1RBUkdFVDsgfVxuICAgIHN0YXRpYyBnZXQgQ0FQVFVSSU5HX1BIQVNFKCkgeyByZXR1cm4gQ0FQVFVSSU5HX1BIQVNFOyB9XG4gICAgc3RhdGljIGdldCBOT05FKCkgeyByZXR1cm4gTk9ORTsgfVxuXG4gICAgY29uc3RydWN0b3IodHlwZSwgZXZlbnRJbml0RGljdCA9IHt9KSB7XG4gICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgdGhpcy5idWJibGVzID0gISFldmVudEluaXREaWN0LmJ1YmJsZXM7XG4gICAgICB0aGlzLmNhbmNlbEJ1YmJsZSA9IGZhbHNlO1xuICAgICAgdGhpcy5fc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uRmxhZyA9IGZhbHNlO1xuICAgICAgdGhpcy5jYW5jZWxhYmxlID0gISFldmVudEluaXREaWN0LmNhbmNlbGFibGU7XG4gICAgICB0aGlzLmV2ZW50UGhhc2UgPSB0aGlzLk5PTkU7XG4gICAgICB0aGlzLnRpbWVTdGFtcCA9IERhdGUubm93KCk7XG4gICAgICB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMub3JpZ2luYWxUYXJnZXQgPSBudWxsO1xuICAgICAgdGhpcy5yZXR1cm5WYWx1ZSA9IG51bGw7XG4gICAgICB0aGlzLnNyY0VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy50YXJnZXQgPSBudWxsO1xuICAgICAgdGhpcy5fcGF0aCA9IFtdO1xuICAgIH1cblxuICAgIGdldCBCVUJCTElOR19QSEFTRSgpIHsgcmV0dXJuIEJVQkJMSU5HX1BIQVNFOyB9XG4gICAgZ2V0IEFUX1RBUkdFVCgpIHsgcmV0dXJuIEFUX1RBUkdFVDsgfVxuICAgIGdldCBDQVBUVVJJTkdfUEhBU0UoKSB7IHJldHVybiBDQVBUVVJJTkdfUEhBU0U7IH1cbiAgICBnZXQgTk9ORSgpIHsgcmV0dXJuIE5PTkU7IH1cblxuICAgIHByZXZlbnREZWZhdWx0KCkgeyB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlOyB9XG5cbiAgICAvLyBzaW1wbGlmaWVkIGltcGxlbWVudGF0aW9uLCBzaG91bGQgYmUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZXZlbnQtY29tcG9zZWRwYXRoXG4gICAgY29tcG9zZWRQYXRoKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BhdGgubWFwKGdldEN1cnJlbnRUYXJnZXQpO1xuICAgIH1cblxuICAgIHN0b3BQcm9wYWdhdGlvbigpIHtcbiAgICAgIHRoaXMuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICB9XG4gICAgXG4gICAgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkge1xuICAgICAgdGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHRoaXMuX3N0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbkZsYWcgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG5leHBvcnQge0dsb2JhbEV2ZW50IGFzIEV2ZW50fTtcblxuLyogYzggaWdub3JlIHN0b3AgKi9cbiIsIi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5OYW1lZE5vZGVNYXBcbiAqL1xuZXhwb3J0IGNsYXNzIE5hbWVkTm9kZU1hcCBleHRlbmRzIEFycmF5IHtcbiAgY29uc3RydWN0b3Iob3duZXJFbGVtZW50KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm93bmVyRWxlbWVudCA9IG93bmVyRWxlbWVudDtcbiAgfVxuXG4gIGdldE5hbWVkSXRlbShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMub3duZXJFbGVtZW50LmdldEF0dHJpYnV0ZU5vZGUobmFtZSk7XG4gIH1cblxuICBzZXROYW1lZEl0ZW0oYXR0cikge1xuICAgIHRoaXMub3duZXJFbGVtZW50LnNldEF0dHJpYnV0ZU5vZGUoYXR0cik7XG4gICAgdGhpcy51bnNoaWZ0KGF0dHIpO1xuICB9XG5cbiAgcmVtb3ZlTmFtZWRJdGVtKG5hbWUpIHtcbiAgICBjb25zdCBpdGVtID0gdGhpcy5nZXROYW1lZEl0ZW0obmFtZSk7XG4gICAgdGhpcy5vd25lckVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIHRoaXMuc3BsaWNlKHRoaXMuaW5kZXhPZihpdGVtKSwgMSk7XG4gIH1cblxuICBpdGVtKGluZGV4KSB7XG4gICAgcmV0dXJuIGluZGV4IDwgdGhpcy5sZW5ndGggPyB0aGlzW2luZGV4XSA6IG51bGw7XG4gIH1cblxuICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgZ2V0TmFtZWRJdGVtTlMoXywgbmFtZSkge1xuICAgIHJldHVybiB0aGlzLmdldE5hbWVkSXRlbShuYW1lKTtcbiAgfVxuXG4gIHNldE5hbWVkSXRlbU5TKF8sIGF0dHIpIHtcbiAgICByZXR1cm4gdGhpcy5zZXROYW1lZEl0ZW0oYXR0cik7XG4gIH1cblxuICByZW1vdmVOYW1lZEl0ZW1OUyhfLCBuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucmVtb3ZlTmFtZWRJdGVtKG5hbWUpO1xuICB9XG4gIC8qIGM4IGlnbm9yZSBzdG9wICovXG59XG4iLCJpbXBvcnQge0RPQ1VNRU5UX0ZSQUdNRU5UX05PREV9IGZyb20gJy4uL3NoYXJlZC9jb25zdGFudHMuanMnO1xuaW1wb3J0IHtnZXRJbm5lckh0bWwsIHNldElubmVySHRtbH0gZnJvbSAnLi4vbWl4aW4vaW5uZXItaHRtbC5qcyc7XG5pbXBvcnQge05vbkVsZW1lbnRQYXJlbnROb2RlfSBmcm9tICcuLi9taXhpbi9ub24tZWxlbWVudC1wYXJlbnQtbm9kZS5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5TaGFkb3dSb290XG4gKi9cbmV4cG9ydCBjbGFzcyBTaGFkb3dSb290IGV4dGVuZHMgTm9uRWxlbWVudFBhcmVudE5vZGUge1xuICBjb25zdHJ1Y3Rvcihob3N0KSB7XG4gICAgc3VwZXIoaG9zdC5vd25lckRvY3VtZW50LCAnI3NoYWRvdy1yb290JywgRE9DVU1FTlRfRlJBR01FTlRfTk9ERSk7XG4gICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgfVxuXG4gIGdldCBpbm5lckhUTUwoKSB7XG4gICAgcmV0dXJuIGdldElubmVySHRtbCh0aGlzKTtcbiAgfVxuICBzZXQgaW5uZXJIVE1MKGh0bWwpIHtcbiAgICBzZXRJbm5lckh0bWwodGhpcywgaHRtbCk7XG4gIH1cbn1cbiIsIi8vIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jaW50ZXJmYWNlLWVsZW1lbnRcblxuaW1wb3J0IHtcbiAgQVRUUklCVVRFX05PREUsXG4gIEJMT0NLX0VMRU1FTlRTLFxuICBDREFUQV9TRUNUSU9OX05PREUsXG4gIENPTU1FTlRfTk9ERSxcbiAgRUxFTUVOVF9OT0RFLFxuICBOT0RFX0VORCxcbiAgVEVYVF9OT0RFLFxuICBTVkdfTkFNRVNQQUNFXG59IGZyb20gJy4uL3NoYXJlZC9jb25zdGFudHMuanMnO1xuXG5pbXBvcnQge1xuICBzZXRBdHRyaWJ1dGUsIHJlbW92ZUF0dHJpYnV0ZSxcbiAgbnVtZXJpY0F0dHJpYnV0ZSwgc3RyaW5nQXR0cmlidXRlXG59IGZyb20gJy4uL3NoYXJlZC9hdHRyaWJ1dGVzLmpzJztcblxuaW1wb3J0IHtcbiAgQ0xBU1NfTElTVCwgREFUQVNFVCwgU1RZTEUsXG4gIEVORCwgTkVYVCwgUFJFViwgU1RBUlQsXG4gIE1JTUVcbn0gZnJvbSAnLi4vc2hhcmVkL3N5bWJvbHMuanMnO1xuXG5pbXBvcnQge1xuICBpZ25vcmVDYXNlLFxuICBrbm93bkFkamFjZW50LFxuICBsb2NhbENhc2UsXG4gIFN0cmluZ1xufSBmcm9tICcuLi9zaGFyZWQvdXRpbHMuanMnO1xuXG5pbXBvcnQge2VsZW1lbnRBc0pTT059IGZyb20gJy4uL3NoYXJlZC9qc2Rvbi5qcyc7XG5pbXBvcnQge21hdGNoZXMsIHByZXBhcmVNYXRjaH0gZnJvbSAnLi4vc2hhcmVkL21hdGNoZXMuanMnO1xuaW1wb3J0IHtzaGFkb3dSb290c30gZnJvbSAnLi4vc2hhcmVkL3NoYWRvdy1yb290cy5qcyc7XG5cbmltcG9ydCB7aXNDb25uZWN0ZWQsIHBhcmVudEVsZW1lbnQsIHByZXZpb3VzU2libGluZywgbmV4dFNpYmxpbmd9IGZyb20gJy4uL3NoYXJlZC9ub2RlLmpzJztcbmltcG9ydCB7cHJldmlvdXNFbGVtZW50U2libGluZywgbmV4dEVsZW1lbnRTaWJsaW5nfSBmcm9tICcuLi9taXhpbi9ub24tZG9jdW1lbnQtdHlwZS1jaGlsZC1ub2RlLmpzJztcblxuaW1wb3J0IHtiZWZvcmUsIGFmdGVyLCByZXBsYWNlV2l0aCwgcmVtb3ZlfSBmcm9tICcuLi9taXhpbi9jaGlsZC1ub2RlLmpzJztcbmltcG9ydCB7Z2V0SW5uZXJIdG1sLCBzZXRJbm5lckh0bWx9IGZyb20gJy4uL21peGluL2lubmVyLWh0bWwuanMnO1xuaW1wb3J0IHtQYXJlbnROb2RlfSBmcm9tICcuLi9taXhpbi9wYXJlbnQtbm9kZS5qcyc7XG5cbmltcG9ydCB7RE9NU3RyaW5nTWFwfSBmcm9tICcuLi9kb20vc3RyaW5nLW1hcC5qcyc7XG5pbXBvcnQge0RPTVRva2VuTGlzdH0gZnJvbSAnLi4vZG9tL3Rva2VuLWxpc3QuanMnO1xuXG5pbXBvcnQge0NTU1N0eWxlRGVjbGFyYXRpb259IGZyb20gJy4vY3NzLXN0eWxlLWRlY2xhcmF0aW9uLmpzJztcbmltcG9ydCB7RXZlbnR9IGZyb20gJy4vZXZlbnQuanMnO1xuaW1wb3J0IHtOYW1lZE5vZGVNYXB9IGZyb20gJy4vbmFtZWQtbm9kZS1tYXAuanMnO1xuaW1wb3J0IHtTaGFkb3dSb290fSBmcm9tICcuL3NoYWRvdy1yb290LmpzJztcbmltcG9ydCB7Tm9kZUxpc3R9IGZyb20gJy4vbm9kZS1saXN0LmpzJztcbmltcG9ydCB7QXR0cn0gZnJvbSAnLi9hdHRyLmpzJztcbmltcG9ydCB7VGV4dH0gZnJvbSAnLi90ZXh0LmpzJztcbmltcG9ydCB7ZXNjYXBlfSBmcm9tICcuLi9zaGFyZWQvdGV4dC1lc2NhcGVyLmpzJztcblxuLy8gPHV0aWxzPlxuY29uc3QgYXR0cmlidXRlc0hhbmRsZXIgPSB7XG4gIGdldCh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBrZXkgaW4gdGFyZ2V0ID8gdGFyZ2V0W2tleV0gOiB0YXJnZXQuZmluZCgoe25hbWV9KSA9PiBuYW1lID09PSBrZXkpO1xuICB9XG59O1xuXG5jb25zdCBjcmVhdGUgPSAob3duZXJEb2N1bWVudCwgZWxlbWVudCwgbG9jYWxOYW1lKSAgPT4ge1xuICBpZiAoJ293bmVyU1ZHRWxlbWVudCcgaW4gZWxlbWVudCkge1xuICAgIGNvbnN0IHN2ZyA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OQU1FU1BBQ0UsIGxvY2FsTmFtZSk7XG4gICAgc3ZnLm93bmVyU1ZHRWxlbWVudCA9IGVsZW1lbnQub3duZXJTVkdFbGVtZW50O1xuICAgIHJldHVybiBzdmc7XG4gIH1cbiAgcmV0dXJuIG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChsb2NhbE5hbWUpO1xufTtcblxuY29uc3QgaXNWb2lkID0gKHtsb2NhbE5hbWUsIG93bmVyRG9jdW1lbnR9KSA9PiB7XG4gIHJldHVybiBvd25lckRvY3VtZW50W01JTUVdLnZvaWRFbGVtZW50cy50ZXN0KGxvY2FsTmFtZSk7XG59O1xuXG4vLyA8L3V0aWxzPlxuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuRWxlbWVudFxuICovXG5leHBvcnQgY2xhc3MgRWxlbWVudCBleHRlbmRzIFBhcmVudE5vZGUge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUsIEVMRU1FTlRfTk9ERSk7XG4gICAgdGhpc1tDTEFTU19MSVNUXSA9IG51bGw7XG4gICAgdGhpc1tEQVRBU0VUXSA9IG51bGw7XG4gICAgdGhpc1tTVFlMRV0gPSBudWxsO1xuICB9XG5cbiAgLy8gPE1peGlucz5cbiAgZ2V0IGlzQ29ubmVjdGVkKCkgeyByZXR1cm4gaXNDb25uZWN0ZWQodGhpcyk7IH1cbiAgZ2V0IHBhcmVudEVsZW1lbnQoKSB7IHJldHVybiBwYXJlbnRFbGVtZW50KHRoaXMpOyB9XG4gIGdldCBwcmV2aW91c1NpYmxpbmcoKSB7IHJldHVybiBwcmV2aW91c1NpYmxpbmcodGhpcyk7IH1cbiAgZ2V0IG5leHRTaWJsaW5nKCkgeyByZXR1cm4gbmV4dFNpYmxpbmcodGhpcyk7IH1cbiAgZ2V0IG5hbWVzcGFjZVVSSSgpIHtcbiAgICByZXR1cm4gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnO1xuICB9XG5cbiAgZ2V0IHByZXZpb3VzRWxlbWVudFNpYmxpbmcoKSB7IHJldHVybiBwcmV2aW91c0VsZW1lbnRTaWJsaW5nKHRoaXMpOyB9XG4gIGdldCBuZXh0RWxlbWVudFNpYmxpbmcoKSB7IHJldHVybiBuZXh0RWxlbWVudFNpYmxpbmcodGhpcyk7IH1cblxuICBiZWZvcmUoLi4ubm9kZXMpIHsgYmVmb3JlKHRoaXMsIG5vZGVzKTsgfVxuICBhZnRlciguLi5ub2RlcykgeyBhZnRlcih0aGlzLCBub2Rlcyk7IH1cbiAgcmVwbGFjZVdpdGgoLi4ubm9kZXMpIHsgcmVwbGFjZVdpdGgodGhpcywgbm9kZXMpOyB9XG4gIHJlbW92ZSgpIHsgcmVtb3ZlKHRoaXNbUFJFVl0sIHRoaXMsIHRoaXNbRU5EXVtORVhUXSk7IH1cbiAgLy8gPC9NaXhpbnM+XG5cbiAgLy8gPHNwZWNpYWxHZXR0ZXJzPlxuICBnZXQgaWQoKSB7IHJldHVybiBzdHJpbmdBdHRyaWJ1dGUuZ2V0KHRoaXMsICdpZCcpOyB9XG4gIHNldCBpZCh2YWx1ZSkgeyBzdHJpbmdBdHRyaWJ1dGUuc2V0KHRoaXMsICdpZCcsIHZhbHVlKTsgfVxuXG4gIGdldCBjbGFzc05hbWUoKSB7IHJldHVybiB0aGlzLmNsYXNzTGlzdC52YWx1ZTsgfVxuICBzZXQgY2xhc3NOYW1lKHZhbHVlKSB7XG4gICAgY29uc3Qge2NsYXNzTGlzdH0gPSB0aGlzO1xuICAgIGNsYXNzTGlzdC5jbGVhcigpO1xuICAgIGNsYXNzTGlzdC5hZGQoLi4uKFN0cmluZyh2YWx1ZSkuc3BsaXQoL1xccysvKSkpO1xuICB9XG5cbiAgZ2V0IG5vZGVOYW1lKCkgeyByZXR1cm4gbG9jYWxDYXNlKHRoaXMpOyB9XG4gIGdldCB0YWdOYW1lKCkgeyByZXR1cm4gbG9jYWxDYXNlKHRoaXMpOyB9XG5cbiAgZ2V0IGNsYXNzTGlzdCgpIHtcbiAgICByZXR1cm4gdGhpc1tDTEFTU19MSVNUXSB8fCAoXG4gICAgICB0aGlzW0NMQVNTX0xJU1RdID0gbmV3IERPTVRva2VuTGlzdCh0aGlzKVxuICAgICk7XG4gIH1cblxuICBnZXQgZGF0YXNldCgpIHtcbiAgICByZXR1cm4gdGhpc1tEQVRBU0VUXSB8fCAoXG4gICAgICB0aGlzW0RBVEFTRVRdID0gbmV3IERPTVN0cmluZ01hcCh0aGlzKVxuICAgICk7XG4gIH1cblxuICBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgd2lkdGg6IDBcbiAgICB9O1xuICB9XG5cbiAgZ2V0IG5vbmNlKCkgeyByZXR1cm4gc3RyaW5nQXR0cmlidXRlLmdldCh0aGlzLCAnbm9uY2UnKTsgfVxuICBzZXQgbm9uY2UodmFsdWUpIHsgc3RyaW5nQXR0cmlidXRlLnNldCh0aGlzLCAnbm9uY2UnLCB2YWx1ZSk7IH1cblxuICBnZXQgc3R5bGUoKSB7XG4gICAgcmV0dXJuIHRoaXNbU1RZTEVdIHx8IChcbiAgICAgIHRoaXNbU1RZTEVdID0gbmV3IENTU1N0eWxlRGVjbGFyYXRpb24odGhpcylcbiAgICApO1xuICB9XG5cbiAgZ2V0IHRhYkluZGV4KCkgeyByZXR1cm4gbnVtZXJpY0F0dHJpYnV0ZS5nZXQodGhpcywgJ3RhYmluZGV4JykgfHwgLTE7IH1cbiAgc2V0IHRhYkluZGV4KHZhbHVlKSB7IG51bWVyaWNBdHRyaWJ1dGUuc2V0KHRoaXMsICd0YWJpbmRleCcsIHZhbHVlKTsgfVxuXG4gIGdldCBzbG90KCkgeyByZXR1cm4gc3RyaW5nQXR0cmlidXRlLmdldCh0aGlzLCAnc2xvdCcpOyB9XG4gIHNldCBzbG90KHZhbHVlKSB7IHN0cmluZ0F0dHJpYnV0ZS5zZXQodGhpcywgJ3Nsb3QnLCB2YWx1ZSk7IH1cbiAgLy8gPC9zcGVjaWFsR2V0dGVycz5cblxuXG4gIC8vIDxjb250ZW50UmVsYXRlZD5cbiAgZ2V0IGlubmVyVGV4dCgpIHtcbiAgICBjb25zdCB0ZXh0ID0gW107XG4gICAgbGV0IHtbTkVYVF06IG5leHQsIFtFTkRdOiBlbmR9ID0gdGhpcztcbiAgICB3aGlsZSAobmV4dCAhPT0gZW5kKSB7XG4gICAgICBpZiAobmV4dC5ub2RlVHlwZSA9PT0gVEVYVF9OT0RFKSB7XG4gICAgICAgIHRleHQucHVzaChuZXh0LnRleHRDb250ZW50LnJlcGxhY2UoL1xccysvZywgJyAnKSk7XG4gICAgICB9IGVsc2UgaWYoXG4gICAgICAgIHRleHQubGVuZ3RoICYmIG5leHRbTkVYVF0gIT0gZW5kICYmXG4gICAgICAgIEJMT0NLX0VMRU1FTlRTLmhhcyhuZXh0LnRhZ05hbWUpXG4gICAgICApIHtcbiAgICAgICAgdGV4dC5wdXNoKCdcXG4nKTtcbiAgICAgIH1cbiAgICAgIG5leHQgPSBuZXh0W05FWFRdO1xuICAgIH1cbiAgICByZXR1cm4gdGV4dC5qb2luKCcnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgKi9cbiAgZ2V0IHRleHRDb250ZW50KCkge1xuICAgIGNvbnN0IHRleHQgPSBbXTtcbiAgICBsZXQge1tORVhUXTogbmV4dCwgW0VORF06IGVuZH0gPSB0aGlzO1xuICAgIHdoaWxlIChuZXh0ICE9PSBlbmQpIHtcbiAgICAgIGNvbnN0IG5vZGVUeXBlID0gbmV4dC5ub2RlVHlwZTtcbiAgICAgIGlmIChub2RlVHlwZSA9PT0gVEVYVF9OT0RFIHx8IG5vZGVUeXBlID09PSBDREFUQV9TRUNUSU9OX05PREUpXG4gICAgICAgIHRleHQucHVzaChuZXh0LnRleHRDb250ZW50KTtcbiAgICAgIG5leHQgPSBuZXh0W05FWFRdO1xuICAgIH1cbiAgICByZXR1cm4gdGV4dC5qb2luKCcnKTtcbiAgfVxuXG4gIHNldCB0ZXh0Q29udGVudCh0ZXh0KSB7XG4gICAgdGhpcy5yZXBsYWNlQ2hpbGRyZW4oKTtcbiAgICBpZiAodGV4dCAhPSBudWxsICYmIHRleHQgIT09ICcnKVxuICAgICAgdGhpcy5hcHBlbmRDaGlsZChuZXcgVGV4dCh0aGlzLm93bmVyRG9jdW1lbnQsIHRleHQpKTtcbiAgfVxuXG4gIGdldCBpbm5lckhUTUwoKSB7XG4gICAgcmV0dXJuIGdldElubmVySHRtbCh0aGlzKTtcbiAgfVxuICBzZXQgaW5uZXJIVE1MKGh0bWwpIHtcbiAgICBzZXRJbm5lckh0bWwodGhpcywgaHRtbCk7XG4gIH1cblxuICBnZXQgb3V0ZXJIVE1MKCkgeyByZXR1cm4gdGhpcy50b1N0cmluZygpOyB9XG4gIHNldCBvdXRlckhUTUwoaHRtbCkge1xuICAgIGNvbnN0IHRlbXBsYXRlID0gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJycpO1xuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWw7XG4gICAgdGhpcy5yZXBsYWNlV2l0aCguLi50ZW1wbGF0ZS5jaGlsZE5vZGVzKTtcbiAgfVxuICAvLyA8L2NvbnRlbnRSZWxhdGVkPlxuXG4gIC8vIDxhdHRyaWJ1dGVzPlxuICBnZXQgYXR0cmlidXRlcygpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IE5hbWVkTm9kZU1hcCh0aGlzKTtcbiAgICBsZXQgbmV4dCA9IHRoaXNbTkVYVF07XG4gICAgd2hpbGUgKG5leHQubm9kZVR5cGUgPT09IEFUVFJJQlVURV9OT0RFKSB7XG4gICAgICBhdHRyaWJ1dGVzLnB1c2gobmV4dCk7XG4gICAgICBuZXh0ID0gbmV4dFtORVhUXTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm94eShhdHRyaWJ1dGVzLCBhdHRyaWJ1dGVzSGFuZGxlcik7XG4gIH1cblxuICBmb2N1cygpIHsgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnZm9jdXMnKSk7IH1cblxuICBnZXRBdHRyaWJ1dGUobmFtZSkge1xuICAgIGlmIChuYW1lID09PSAnY2xhc3MnKVxuICAgICAgcmV0dXJuIHRoaXMuY2xhc3NOYW1lO1xuICAgIGNvbnN0IGF0dHJpYnV0ZSA9IHRoaXMuZ2V0QXR0cmlidXRlTm9kZShuYW1lKTtcbiAgICByZXR1cm4gYXR0cmlidXRlICYmIChpZ25vcmVDYXNlKHRoaXMpID8gYXR0cmlidXRlLnZhbHVlIDogZXNjYXBlKGF0dHJpYnV0ZS52YWx1ZSkpO1xuICB9XG5cbiAgZ2V0QXR0cmlidXRlTm9kZShuYW1lKSB7XG4gICAgbGV0IG5leHQgPSB0aGlzW05FWFRdO1xuICAgIHdoaWxlIChuZXh0Lm5vZGVUeXBlID09PSBBVFRSSUJVVEVfTk9ERSkge1xuICAgICAgaWYgKG5leHQubmFtZSA9PT0gbmFtZSlcbiAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICBuZXh0ID0gbmV4dFtORVhUXTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBnZXRBdHRyaWJ1dGVOYW1lcygpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IE5vZGVMaXN0O1xuICAgIGxldCBuZXh0ID0gdGhpc1tORVhUXTtcbiAgICB3aGlsZSAobmV4dC5ub2RlVHlwZSA9PT0gQVRUUklCVVRFX05PREUpIHtcbiAgICAgIGF0dHJpYnV0ZXMucHVzaChuZXh0Lm5hbWUpO1xuICAgICAgbmV4dCA9IG5leHRbTkVYVF07XG4gICAgfVxuICAgIHJldHVybiBhdHRyaWJ1dGVzO1xuICB9XG5cbiAgaGFzQXR0cmlidXRlKG5hbWUpIHsgcmV0dXJuICEhdGhpcy5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpOyB9XG4gIGhhc0F0dHJpYnV0ZXMoKSB7IHJldHVybiB0aGlzW05FWFRdLm5vZGVUeXBlID09PSBBVFRSSUJVVEVfTk9ERTsgfVxuXG4gIHJlbW92ZUF0dHJpYnV0ZShuYW1lKSB7XG4gICAgaWYgKG5hbWUgPT09ICdjbGFzcycgJiYgdGhpc1tDTEFTU19MSVNUXSlcbiAgICAgICAgdGhpc1tDTEFTU19MSVNUXS5jbGVhcigpO1xuICAgIGxldCBuZXh0ID0gdGhpc1tORVhUXTtcbiAgICB3aGlsZSAobmV4dC5ub2RlVHlwZSA9PT0gQVRUUklCVVRFX05PREUpIHtcbiAgICAgIGlmIChuZXh0Lm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmVtb3ZlQXR0cmlidXRlKHRoaXMsIG5leHQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBuZXh0ID0gbmV4dFtORVhUXTtcbiAgICB9XG4gIH1cblxuICByZW1vdmVBdHRyaWJ1dGVOb2RlKGF0dHJpYnV0ZSkge1xuICAgIGxldCBuZXh0ID0gdGhpc1tORVhUXTtcbiAgICB3aGlsZSAobmV4dC5ub2RlVHlwZSA9PT0gQVRUUklCVVRFX05PREUpIHtcbiAgICAgIGlmIChuZXh0ID09PSBhdHRyaWJ1dGUpIHtcbiAgICAgICAgcmVtb3ZlQXR0cmlidXRlKHRoaXMsIG5leHQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBuZXh0ID0gbmV4dFtORVhUXTtcbiAgICB9XG4gIH1cblxuICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpIHtcbiAgICBpZiAobmFtZSA9PT0gJ2NsYXNzJylcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gdmFsdWU7XG4gICAgZWxzZSB7XG4gICAgICBjb25zdCBhdHRyaWJ1dGUgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGUobmFtZSk7XG4gICAgICBpZiAoYXR0cmlidXRlKVxuICAgICAgICBhdHRyaWJ1dGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgIGVsc2VcbiAgICAgICAgc2V0QXR0cmlidXRlKHRoaXMsIG5ldyBBdHRyKHRoaXMub3duZXJEb2N1bWVudCwgbmFtZSwgdmFsdWUpKTtcbiAgICB9XG4gIH1cblxuICBzZXRBdHRyaWJ1dGVOb2RlKGF0dHJpYnV0ZSkge1xuICAgIGNvbnN0IHtuYW1lfSA9IGF0dHJpYnV0ZTtcbiAgICBjb25zdCBwcmV2aW91c2x5ID0gdGhpcy5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpO1xuICAgIGlmIChwcmV2aW91c2x5ICE9PSBhdHRyaWJ1dGUpIHtcbiAgICAgIGlmIChwcmV2aW91c2x5KVxuICAgICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5vZGUocHJldmlvdXNseSk7XG4gICAgICBjb25zdCB7b3duZXJFbGVtZW50fSA9IGF0dHJpYnV0ZTtcbiAgICAgIGlmIChvd25lckVsZW1lbnQpXG4gICAgICAgIG93bmVyRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGVOb2RlKGF0dHJpYnV0ZSk7XG4gICAgICBzZXRBdHRyaWJ1dGUodGhpcywgYXR0cmlidXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIHByZXZpb3VzbHk7XG4gIH1cblxuICB0b2dnbGVBdHRyaWJ1dGUobmFtZSwgZm9yY2UpIHtcbiAgICBpZiAodGhpcy5oYXNBdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgIGlmICghZm9yY2UpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChmb3JjZSB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCAnJyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIDwvYXR0cmlidXRlcz5cblxuICAvLyA8U2hhZG93RE9NPlxuICBnZXQgc2hhZG93Um9vdCgpIHtcbiAgICBpZiAoc2hhZG93Um9vdHMuaGFzKHRoaXMpKSB7XG4gICAgICBjb25zdCB7bW9kZSwgc2hhZG93Um9vdH0gPSBzaGFkb3dSb290cy5nZXQodGhpcyk7XG4gICAgICBpZiAobW9kZSA9PT0gJ29wZW4nKVxuICAgICAgICByZXR1cm4gc2hhZG93Um9vdDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBhdHRhY2hTaGFkb3coaW5pdCkge1xuICAgIGlmIChzaGFkb3dSb290cy5oYXModGhpcykpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ29wZXJhdGlvbiBub3Qgc3VwcG9ydGVkJyk7XG4gICAgLy8gVE9ETzogc2hhZG93Um9vdCBzaG91bGQgYmUgbGlrZWx5IGEgc3BlY2lhbGl6ZWQgY2xhc3MgdGhhdCBleHRlbmRzIERvY3VtZW50RnJhZ21lbnRcbiAgICAvLyAgICAgICBidXQgdW50aWwgRFNEIGlzIG91dCwgSSBhbSBub3Qgc3VyZSBJIHNob3VsZCBzcGVuZCB0aW1lIG9uIHRoaXMuXG4gICAgY29uc3Qgc2hhZG93Um9vdCA9IG5ldyBTaGFkb3dSb290KHRoaXMpO1xuICAgIHNoYWRvd1Jvb3RzLnNldCh0aGlzLCB7XG4gICAgICBtb2RlOiBpbml0Lm1vZGUsXG4gICAgICBzaGFkb3dSb290XG4gICAgfSk7XG4gICAgcmV0dXJuIHNoYWRvd1Jvb3Q7XG4gIH1cbiAgLy8gPC9TaGFkb3dET00+XG5cbiAgLy8gPHNlbGVjdG9ycz5cbiAgbWF0Y2hlcyhzZWxlY3RvcnMpIHsgcmV0dXJuIG1hdGNoZXModGhpcywgc2VsZWN0b3JzKTsgfVxuICBjbG9zZXN0KHNlbGVjdG9ycykge1xuICAgIGxldCBwYXJlbnRFbGVtZW50ID0gdGhpcztcbiAgICBjb25zdCBtYXRjaGVzID0gcHJlcGFyZU1hdGNoKHBhcmVudEVsZW1lbnQsIHNlbGVjdG9ycyk7XG4gICAgd2hpbGUgKHBhcmVudEVsZW1lbnQgJiYgIW1hdGNoZXMocGFyZW50RWxlbWVudCkpXG4gICAgICBwYXJlbnRFbGVtZW50ID0gcGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgIHJldHVybiBwYXJlbnRFbGVtZW50O1xuICB9XG4gIC8vIDwvc2VsZWN0b3JzPlxuXG4gIC8vIDxpbnNlcnRBZGphY2VudD5cbiAgaW5zZXJ0QWRqYWNlbnRFbGVtZW50KHBvc2l0aW9uLCBlbGVtZW50KSB7XG4gICAgY29uc3Qge3BhcmVudEVsZW1lbnR9ID0gdGhpcztcbiAgICBzd2l0Y2ggKHBvc2l0aW9uKSB7XG4gICAgICBjYXNlICdiZWZvcmViZWdpbic6XG4gICAgICAgIGlmIChwYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgcGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUoZWxlbWVudCwgdGhpcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICBjYXNlICdhZnRlcmJlZ2luJzpcbiAgICAgICAgdGhpcy5pbnNlcnRCZWZvcmUoZWxlbWVudCwgdGhpcy5maXJzdENoaWxkKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdiZWZvcmVlbmQnOlxuICAgICAgICB0aGlzLmluc2VydEJlZm9yZShlbGVtZW50LCBudWxsKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdhZnRlcmVuZCc6XG4gICAgICAgIGlmIChwYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgcGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUoZWxlbWVudCwgdGhpcy5uZXh0U2libGluZyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgaW5zZXJ0QWRqYWNlbnRIVE1MKHBvc2l0aW9uLCBodG1sKSB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sO1xuICAgIHRoaXMuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KHBvc2l0aW9uLCB0ZW1wbGF0ZS5jb250ZW50KTtcbiAgfVxuXG4gIGluc2VydEFkamFjZW50VGV4dChwb3NpdGlvbiwgdGV4dCkge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCk7XG4gICAgdGhpcy5pbnNlcnRBZGphY2VudEVsZW1lbnQocG9zaXRpb24sIG5vZGUpO1xuICB9XG4gIC8vIDwvaW5zZXJ0QWRqYWNlbnQ+XG5cbiAgY2xvbmVOb2RlKGRlZXAgPSBmYWxzZSkge1xuICAgIGNvbnN0IHtvd25lckRvY3VtZW50LCBsb2NhbE5hbWV9ID0gdGhpcztcbiAgICBjb25zdCBhZGROZXh0ID0gbmV4dCA9PiB7XG4gICAgICBuZXh0LnBhcmVudE5vZGUgPSBwYXJlbnROb2RlO1xuICAgICAga25vd25BZGphY2VudCgkbmV4dCwgbmV4dCk7XG4gICAgICAkbmV4dCA9IG5leHQ7XG4gICAgfTtcbiAgICBjb25zdCBjbG9uZSA9IGNyZWF0ZShvd25lckRvY3VtZW50LCB0aGlzLCBsb2NhbE5hbWUpO1xuICAgIGxldCBwYXJlbnROb2RlID0gY2xvbmUsICRuZXh0ID0gY2xvbmU7XG4gICAgbGV0IHtbTkVYVF06IG5leHQsIFtFTkRdOiBwcmV2fSA9IHRoaXM7XG4gICAgd2hpbGUgKG5leHQgIT09IHByZXYgJiYgKGRlZXAgfHwgbmV4dC5ub2RlVHlwZSA9PT0gQVRUUklCVVRFX05PREUpKSB7XG4gICAgICBzd2l0Y2ggKG5leHQubm9kZVR5cGUpIHtcbiAgICAgICAgY2FzZSBOT0RFX0VORDpcbiAgICAgICAgICBrbm93bkFkamFjZW50KCRuZXh0LCBwYXJlbnROb2RlW0VORF0pO1xuICAgICAgICAgICRuZXh0ID0gcGFyZW50Tm9kZVtFTkRdO1xuICAgICAgICAgIHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgRUxFTUVOVF9OT0RFOiB7XG4gICAgICAgICAgY29uc3Qgbm9kZSA9IGNyZWF0ZShvd25lckRvY3VtZW50LCBuZXh0LCBuZXh0LmxvY2FsTmFtZSk7XG4gICAgICAgICAgYWRkTmV4dChub2RlKTtcbiAgICAgICAgICBwYXJlbnROb2RlID0gbm9kZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEFUVFJJQlVURV9OT0RFOiB7XG4gICAgICAgICAgY29uc3QgYXR0ciA9IG5leHQuY2xvbmVOb2RlKGRlZXApO1xuICAgICAgICAgIGF0dHIub3duZXJFbGVtZW50ID0gcGFyZW50Tm9kZTtcbiAgICAgICAgICBhZGROZXh0KGF0dHIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgVEVYVF9OT0RFOlxuICAgICAgICBjYXNlIENPTU1FTlRfTk9ERTpcbiAgICAgICAgY2FzZSBDREFUQV9TRUNUSU9OX05PREU6XG4gICAgICAgICAgYWRkTmV4dChuZXh0LmNsb25lTm9kZShkZWVwKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBuZXh0ID0gbmV4dFtORVhUXTtcbiAgICB9XG4gICAga25vd25BZGphY2VudCgkbmV4dCwgY2xvbmVbRU5EXSk7XG4gICAgcmV0dXJuIGNsb25lO1xuICB9XG5cbiAgLy8gPGN1c3RvbT5cbiAgdG9TdHJpbmcoKSB7XG4gICAgY29uc3Qgb3V0ID0gW107XG4gICAgY29uc3Qge1tFTkRdOiBlbmR9ID0gdGhpcztcbiAgICBsZXQgbmV4dCA9IHtbTkVYVF06IHRoaXN9O1xuICAgIGxldCBpc09wZW5lZCA9IGZhbHNlO1xuICAgIGRvIHtcbiAgICAgIG5leHQgPSBuZXh0W05FWFRdO1xuICAgICAgc3dpdGNoIChuZXh0Lm5vZGVUeXBlKSB7XG4gICAgICAgIGNhc2UgQVRUUklCVVRFX05PREU6IHtcbiAgICAgICAgICBjb25zdCBhdHRyID0gJyAnICsgbmV4dDtcbiAgICAgICAgICBzd2l0Y2ggKGF0dHIpIHtcbiAgICAgICAgICAgIGNhc2UgJyBpZCc6XG4gICAgICAgICAgICBjYXNlICcgY2xhc3MnOlxuICAgICAgICAgICAgY2FzZSAnIHN0eWxlJzpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBvdXQucHVzaChhdHRyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBOT0RFX0VORDoge1xuICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gbmV4dFtTVEFSVF07XG4gICAgICAgICAgaWYgKGlzT3BlbmVkKSB7XG4gICAgICAgICAgICBpZiAoJ293bmVyU1ZHRWxlbWVudCcgaW4gc3RhcnQpXG4gICAgICAgICAgICAgIG91dC5wdXNoKCcgLz4nKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzVm9pZChzdGFydCkpXG4gICAgICAgICAgICAgIG91dC5wdXNoKGlnbm9yZUNhc2Uoc3RhcnQpID8gJz4nIDogJyAvPicpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICBvdXQucHVzaChgPjwvJHtzdGFydC5sb2NhbE5hbWV9PmApO1xuICAgICAgICAgICAgaXNPcGVuZWQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgb3V0LnB1c2goYDwvJHtzdGFydC5sb2NhbE5hbWV9PmApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgRUxFTUVOVF9OT0RFOlxuICAgICAgICAgIGlmIChpc09wZW5lZClcbiAgICAgICAgICAgIG91dC5wdXNoKCc+Jyk7XG4gICAgICAgICAgaWYgKG5leHQudG9TdHJpbmcgIT09IHRoaXMudG9TdHJpbmcpIHtcbiAgICAgICAgICAgIG91dC5wdXNoKG5leHQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBuZXh0ID0gbmV4dFtFTkRdO1xuICAgICAgICAgICAgaXNPcGVuZWQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvdXQucHVzaChgPCR7bmV4dC5sb2NhbE5hbWV9YCk7XG4gICAgICAgICAgICBpc09wZW5lZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFRFWFRfTk9ERTpcbiAgICAgICAgY2FzZSBDT01NRU5UX05PREU6XG4gICAgICAgIGNhc2UgQ0RBVEFfU0VDVElPTl9OT0RFOlxuICAgICAgICAgIG91dC5wdXNoKChpc09wZW5lZCA/ICc+JyA6ICcnKSArIG5leHQpO1xuICAgICAgICAgIGlzT3BlbmVkID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSB3aGlsZSAobmV4dCAhPT0gZW5kKTtcbiAgICByZXR1cm4gb3V0LmpvaW4oJycpO1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIGNvbnN0IGpzb24gPSBbXTtcbiAgICBlbGVtZW50QXNKU09OKHRoaXMsIGpzb24pO1xuICAgIHJldHVybiBqc29uO1xuICB9XG4gIC8vIDwvY3VzdG9tPlxuXG5cbiAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gIGdldEF0dHJpYnV0ZU5TKF8sIG5hbWUpIHsgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpOyB9XG4gIGdldEVsZW1lbnRzQnlUYWdOYW1lTlMoXywgbmFtZSkgeyByZXR1cm4gdGhpcy5nZXRFbGVtZW50c0J5VGFnTmFtZShuYW1lKTsgfVxuICBoYXNBdHRyaWJ1dGVOUyhfLCBuYW1lKSB7IHJldHVybiB0aGlzLmhhc0F0dHJpYnV0ZShuYW1lKTsgfVxuICByZW1vdmVBdHRyaWJ1dGVOUyhfLCBuYW1lKSB7IHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpOyB9XG4gIHNldEF0dHJpYnV0ZU5TKF8sIG5hbWUsIHZhbHVlKSB7IHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTsgfVxuICBzZXRBdHRyaWJ1dGVOb2RlTlMoYXR0cikgeyByZXR1cm4gdGhpcy5zZXRBdHRyaWJ1dGVOb2RlKGF0dHIpOyB9XG4gIC8qIGM4IGlnbm9yZSBzdG9wICovXG59XG4iLCJpbXBvcnQge0VsZW1lbnR9IGZyb20gJy4uL2ludGVyZmFjZS9lbGVtZW50LmpzJztcbmltcG9ydCB7U3RyaW5nfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMuanMnO1xuXG5jb25zdCBjbGFzc05hbWVzID0gbmV3IFdlYWtNYXA7XG5cbmNvbnN0IGhhbmRsZXIgPSB7XG4gIGdldCh0YXJnZXQsIG5hbWUpIHtcbiAgICByZXR1cm4gdGFyZ2V0W25hbWVdO1xuICB9LFxuICBzZXQodGFyZ2V0LCBuYW1lLCB2YWx1ZSkge1xuICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuU1ZHRWxlbWVudFxuICovXG5leHBvcnQgY2xhc3MgU1ZHRWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUsIG93bmVyU1ZHRWxlbWVudCA9IG51bGwpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICAgIHRoaXMub3duZXJTVkdFbGVtZW50ID0gb3duZXJTVkdFbGVtZW50O1xuICB9XG5cbiAgZ2V0IGNsYXNzTmFtZSgpIHtcbiAgICBpZiAoIWNsYXNzTmFtZXMuaGFzKHRoaXMpKVxuICAgICAgY2xhc3NOYW1lcy5zZXQodGhpcywgbmV3IFByb3h5KHtiYXNlVmFsOiAnJywgYW5pbVZhbDogJyd9LCBoYW5kbGVyKSk7XG4gICAgcmV0dXJuIGNsYXNzTmFtZXMuZ2V0KHRoaXMpO1xuICB9XG5cbiAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gIHNldCBjbGFzc05hbWUodmFsdWUpIHtcbiAgICBjb25zdCB7Y2xhc3NMaXN0fSA9IHRoaXM7XG4gICAgY2xhc3NMaXN0LmNsZWFyKCk7XG4gICAgY2xhc3NMaXN0LmFkZCguLi4oU3RyaW5nKHZhbHVlKS5zcGxpdCgvXFxzKy8pKSk7XG4gIH1cbiAgLyogYzggaWdub3JlIHN0b3AgKi9cblxuICBnZXQgbmFtZXNwYWNlVVJJKCkge1xuICAgIHJldHVybiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuICB9XG5cbiAgZ2V0QXR0cmlidXRlKG5hbWUpIHtcbiAgICByZXR1cm4gbmFtZSA9PT0gJ2NsYXNzJyA/XG4gICAgICBbLi4udGhpcy5jbGFzc0xpc3RdLmpvaW4oJyAnKSA6XG4gICAgICBzdXBlci5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gIH1cblxuICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpIHtcbiAgICBpZiAobmFtZSA9PT0gJ2NsYXNzJylcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gdmFsdWU7XG4gICAgZWxzZSBpZiAobmFtZSA9PT0gJ3N0eWxlJykge1xuICAgICAgY29uc3Qge2NsYXNzTmFtZX0gPSB0aGlzO1xuICAgICAgY2xhc3NOYW1lLmJhc2VWYWwgPSBjbGFzc05hbWUuYW5pbVZhbCA9IHZhbHVlO1xuICAgIH1cbiAgICBzdXBlci5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICB9XG59XG4iLCJpbXBvcnQge0F0dHIgYXMgX0F0dHJ9IGZyb20gJy4uL2ludGVyZmFjZS9hdHRyLmpzJztcbmltcG9ydCB7Q2hhcmFjdGVyRGF0YSBhcyBfQ2hhcmFjdGVyRGF0YX0gZnJvbSAnLi4vaW50ZXJmYWNlL2NoYXJhY3Rlci1kYXRhLmpzJztcbmltcG9ydCB7Q0RBVEFTZWN0aW9uIGFzIF9DREFUQVNlY3Rpb259IGZyb20gJy4uL2ludGVyZmFjZS9jZGF0YS1zZWN0aW9uLmpzJztcbmltcG9ydCB7Q29tbWVudCBhcyBfQ29tbWVudH0gZnJvbSAnLi4vaW50ZXJmYWNlL2NvbW1lbnQuanMnO1xuaW1wb3J0IHtEb2N1bWVudEZyYWdtZW50IGFzIF9Eb2N1bWVudEZyYWdtZW50fSBmcm9tICcuLi9pbnRlcmZhY2UvZG9jdW1lbnQtZnJhZ21lbnQuanMnO1xuaW1wb3J0IHtEb2N1bWVudFR5cGUgYXMgX0RvY3VtZW50VHlwZX0gZnJvbSAnLi4vaW50ZXJmYWNlL2RvY3VtZW50LXR5cGUuanMnO1xuaW1wb3J0IHtFbGVtZW50IGFzIF9FbGVtZW50fSBmcm9tICcuLi9pbnRlcmZhY2UvZWxlbWVudC5qcyc7XG5pbXBvcnQge05vZGUgYXMgX05vZGV9IGZyb20gJy4uL2ludGVyZmFjZS9ub2RlLmpzJztcbmltcG9ydCB7U2hhZG93Um9vdCBhcyBfU2hhZG93Um9vdH0gZnJvbSAnLi4vaW50ZXJmYWNlL3NoYWRvdy1yb290LmpzJztcbmltcG9ydCB7VGV4dCBhcyBfVGV4dH0gZnJvbSAnLi4vaW50ZXJmYWNlL3RleHQuanMnO1xuaW1wb3J0IHtTVkdFbGVtZW50IGFzIF9TVkdFbGVtZW50fSBmcm9tICcuLi9zdmcvZWxlbWVudC5qcyc7XG5cbmltcG9ydCB7c2V0UHJvdG90eXBlT2Z9IGZyb20gJy4vb2JqZWN0LmpzJztcblxuLyogYzggaWdub3JlIHN0YXJ0ICovXG5leHBvcnQgY29uc3QgaWxsZWdhbENvbnN0cnVjdG9yID0gKCkgPT4ge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIGNvbnN0cnVjdG9yJyk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gQXR0cigpIHsgaWxsZWdhbENvbnN0cnVjdG9yKCk7IH1cbnNldFByb3RvdHlwZU9mKEF0dHIsIF9BdHRyKTtcbkF0dHIucHJvdG90eXBlID0gX0F0dHIucHJvdG90eXBlO1xuXG5leHBvcnQgZnVuY3Rpb24gQ0RBVEFTZWN0aW9uKCkgeyBpbGxlZ2FsQ29uc3RydWN0b3IoKTsgfVxuc2V0UHJvdG90eXBlT2YoQ0RBVEFTZWN0aW9uLCBfQ0RBVEFTZWN0aW9uKTtcbkNEQVRBU2VjdGlvbi5wcm90b3R5cGUgPSBfQ0RBVEFTZWN0aW9uLnByb3RvdHlwZTtcblxuZXhwb3J0IGZ1bmN0aW9uIENoYXJhY3RlckRhdGEoKSB7IGlsbGVnYWxDb25zdHJ1Y3RvcigpOyB9XG5zZXRQcm90b3R5cGVPZihDaGFyYWN0ZXJEYXRhLCBfQ2hhcmFjdGVyRGF0YSk7XG5DaGFyYWN0ZXJEYXRhLnByb3RvdHlwZSA9IF9DaGFyYWN0ZXJEYXRhLnByb3RvdHlwZTtcblxuZXhwb3J0IGZ1bmN0aW9uIENvbW1lbnQoKSB7IGlsbGVnYWxDb25zdHJ1Y3RvcigpOyB9XG5zZXRQcm90b3R5cGVPZihDb21tZW50LCBfQ29tbWVudCk7XG5Db21tZW50LnByb3RvdHlwZSA9IF9Db21tZW50LnByb3RvdHlwZTtcblxuZXhwb3J0IGZ1bmN0aW9uIERvY3VtZW50RnJhZ21lbnQoKSB7IGlsbGVnYWxDb25zdHJ1Y3RvcigpOyB9XG5zZXRQcm90b3R5cGVPZihEb2N1bWVudEZyYWdtZW50LCBfRG9jdW1lbnRGcmFnbWVudCk7XG5Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZSA9IF9Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZTtcblxuZXhwb3J0IGZ1bmN0aW9uIERvY3VtZW50VHlwZSgpIHsgaWxsZWdhbENvbnN0cnVjdG9yKCk7IH1cbnNldFByb3RvdHlwZU9mKERvY3VtZW50VHlwZSwgX0RvY3VtZW50VHlwZSk7XG5Eb2N1bWVudFR5cGUucHJvdG90eXBlID0gX0RvY3VtZW50VHlwZS5wcm90b3R5cGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBFbGVtZW50KCkgeyBpbGxlZ2FsQ29uc3RydWN0b3IoKTsgfVxuc2V0UHJvdG90eXBlT2YoRWxlbWVudCwgX0VsZW1lbnQpO1xuRWxlbWVudC5wcm90b3R5cGUgPSBfRWxlbWVudC5wcm90b3R5cGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBOb2RlKCkgeyBpbGxlZ2FsQ29uc3RydWN0b3IoKTsgfVxuc2V0UHJvdG90eXBlT2YoTm9kZSwgX05vZGUpO1xuTm9kZS5wcm90b3R5cGUgPSBfTm9kZS5wcm90b3R5cGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBTaGFkb3dSb290KCkgeyBpbGxlZ2FsQ29uc3RydWN0b3IoKTsgfVxuc2V0UHJvdG90eXBlT2YoU2hhZG93Um9vdCwgX1NoYWRvd1Jvb3QpO1xuU2hhZG93Um9vdC5wcm90b3R5cGUgPSBfU2hhZG93Um9vdC5wcm90b3R5cGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBUZXh0KCkgeyBpbGxlZ2FsQ29uc3RydWN0b3IoKTsgfVxuc2V0UHJvdG90eXBlT2YoVGV4dCwgX1RleHQpO1xuVGV4dC5wcm90b3R5cGUgPSBfVGV4dC5wcm90b3R5cGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBTVkdFbGVtZW50KCkgeyBpbGxlZ2FsQ29uc3RydWN0b3IoKTsgfVxuc2V0UHJvdG90eXBlT2YoU1ZHRWxlbWVudCwgX1NWR0VsZW1lbnQpO1xuU1ZHRWxlbWVudC5wcm90b3R5cGUgPSBfU1ZHRWxlbWVudC5wcm90b3R5cGU7XG4vKiBjOCBpZ25vcmUgc3RvcCAqL1xuXG5leHBvcnQgY29uc3QgRmFjYWRlcyA9IHtcbiAgQXR0cixcbiAgQ0RBVEFTZWN0aW9uLFxuICBDaGFyYWN0ZXJEYXRhLFxuICBDb21tZW50LFxuICBEb2N1bWVudEZyYWdtZW50LFxuICBEb2N1bWVudFR5cGUsXG4gIEVsZW1lbnQsXG4gIE5vZGUsXG4gIFNoYWRvd1Jvb3QsXG4gIFRleHQsXG4gIFNWR0VsZW1lbnRcbn07XG4iLCJpbXBvcnQge0VORCwgVVBHUkFERX0gZnJvbSAnLi4vc2hhcmVkL3N5bWJvbHMuanMnO1xuaW1wb3J0IHtib29sZWFuQXR0cmlidXRlLCBzdHJpbmdBdHRyaWJ1dGV9IGZyb20gJy4uL3NoYXJlZC9hdHRyaWJ1dGVzLmpzJztcblxuaW1wb3J0IHtFdmVudH0gZnJvbSAnLi4vaW50ZXJmYWNlL2V2ZW50LmpzJztcbmltcG9ydCB7RWxlbWVudH0gZnJvbSAnLi4vaW50ZXJmYWNlL2VsZW1lbnQuanMnO1xuaW1wb3J0IHtDbGFzc2VzLCBjdXN0b21FbGVtZW50c30gZnJvbSAnLi4vaW50ZXJmYWNlL2N1c3RvbS1lbGVtZW50LXJlZ2lzdHJ5LmpzJztcblxuY29uc3QgTGV2ZWwwID0gbmV3IFdlYWtNYXA7XG5jb25zdCBsZXZlbDAgPSB7XG4gIGdldChlbGVtZW50LCBuYW1lKSB7XG4gICAgcmV0dXJuIExldmVsMC5oYXMoZWxlbWVudCkgJiYgTGV2ZWwwLmdldChlbGVtZW50KVtuYW1lXSB8fCBudWxsO1xuICB9LFxuICBzZXQoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoIUxldmVsMC5oYXMoZWxlbWVudCkpXG4gICAgICBMZXZlbDAuc2V0KGVsZW1lbnQsIHt9KTtcbiAgICBjb25zdCBoYW5kbGVycyA9IExldmVsMC5nZXQoZWxlbWVudCk7XG4gICAgY29uc3QgdHlwZSA9IG5hbWUuc2xpY2UoMik7XG4gICAgaWYgKGhhbmRsZXJzW25hbWVdKVxuICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXJzW25hbWVdLCBmYWxzZSk7XG4gICAgaWYgKChoYW5kbGVyc1tuYW1lXSA9IHZhbHVlKSlcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCB2YWx1ZSwgZmFsc2UpO1xuICB9XG59O1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTEVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG5cbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7IHJldHVybiBbXTsgfVxuXG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQgPSBudWxsLCBsb2NhbE5hbWUgPSAnJykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG5cbiAgICBjb25zdCBvd25lckxlc3MgPSAhb3duZXJEb2N1bWVudDtcbiAgICBsZXQgb3B0aW9ucztcblxuICAgIGlmIChvd25lckxlc3MpIHtcbiAgICAgIGNvbnN0IHtjb25zdHJ1Y3RvcjogQ2xhc3N9ID0gdGhpcztcbiAgICAgIGlmICghQ2xhc3Nlcy5oYXMoQ2xhc3MpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBpbml0aWFsaXplIHRoaXMgQ3VzdG9tIEVsZW1lbnQnKTtcbiAgICAgICh7b3duZXJEb2N1bWVudCwgbG9jYWxOYW1lLCBvcHRpb25zfSA9IENsYXNzZXMuZ2V0KENsYXNzKSk7XG4gICAgfVxuXG4gICAgaWYgKG93bmVyRG9jdW1lbnRbVVBHUkFERV0pIHtcbiAgICAgIGNvbnN0IHtlbGVtZW50LCB2YWx1ZXN9ID0gb3duZXJEb2N1bWVudFtVUEdSQURFXTtcbiAgICAgIG93bmVyRG9jdW1lbnRbVVBHUkFERV0gPSBudWxsO1xuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdmFsdWVzKVxuICAgICAgICBlbGVtZW50W2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIGlmIChvd25lckxlc3MpIHtcbiAgICAgIHRoaXMub3duZXJEb2N1bWVudCA9IHRoaXNbRU5EXS5vd25lckRvY3VtZW50ID0gb3duZXJEb2N1bWVudDtcbiAgICAgIHRoaXMubG9jYWxOYW1lID0gbG9jYWxOYW1lO1xuICAgICAgY3VzdG9tRWxlbWVudHMuc2V0KHRoaXMsIHtjb25uZWN0ZWQ6IGZhbHNlfSk7XG4gICAgICBpZiAob3B0aW9ucy5pcylcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2lzJywgb3B0aW9ucy5pcyk7XG4gICAgfVxuICB9XG5cbiAgLyogYzggaWdub3JlIHN0YXJ0ICovXG5cbiAgLyogVE9ETzogd2hhdCBhYm91dCB0aGVzZT9cbiAgb2Zmc2V0SGVpZ2h0XG4gIG9mZnNldExlZnRcbiAgb2Zmc2V0UGFyZW50XG4gIG9mZnNldFRvcFxuICBvZmZzZXRXaWR0aFxuICAqL1xuXG4gIGJsdXIoKSB7IHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2JsdXInKSk7IH1cbiAgY2xpY2soKSB7XG4gICAgY29uc3QgY2xpY2tFdmVudCA9IG5ldyBFdmVudCgnY2xpY2snLCB7YnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZX0pO1xuICAgIGNsaWNrRXZlbnQuYnV0dG9uID0gMDtcblxuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChjbGlja0V2ZW50KTtcbiAgfVxuXG4gIC8vIEJvb2xlYW4gZ2V0dGVyc1xuICBnZXQgYWNjZXNzS2V5TGFiZWwoKSB7XG4gICAgY29uc3Qge2FjY2Vzc0tleX0gPSB0aGlzO1xuICAgIHJldHVybiBhY2Nlc3NLZXkgJiYgYEFsdCtTaGlmdCske2FjY2Vzc0tleX1gO1xuICB9XG4gIGdldCBpc0NvbnRlbnRFZGl0YWJsZSgpIHsgcmV0dXJuIHRoaXMuaGFzQXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnKTsgfVxuXG4gIC8vIEJvb2xlYW4gQWNjZXNzb3JzXG4gIGdldCBjb250ZW50RWRpdGFibGUoKSB7IHJldHVybiBib29sZWFuQXR0cmlidXRlLmdldCh0aGlzLCAnY29udGVudGVkaXRhYmxlJyk7IH1cbiAgc2V0IGNvbnRlbnRFZGl0YWJsZSh2YWx1ZSkgeyBib29sZWFuQXR0cmlidXRlLnNldCh0aGlzLCAnY29udGVudGVkaXRhYmxlJywgdmFsdWUpOyB9XG4gIGdldCBkcmFnZ2FibGUoKSB7IHJldHVybiBib29sZWFuQXR0cmlidXRlLmdldCh0aGlzLCAnZHJhZ2dhYmxlJyk7IH1cbiAgc2V0IGRyYWdnYWJsZSh2YWx1ZSkgeyBib29sZWFuQXR0cmlidXRlLnNldCh0aGlzLCAnZHJhZ2dhYmxlJywgdmFsdWUpOyB9XG4gIGdldCBoaWRkZW4oKSB7IHJldHVybiBib29sZWFuQXR0cmlidXRlLmdldCh0aGlzLCAnaGlkZGVuJyk7IH1cbiAgc2V0IGhpZGRlbih2YWx1ZSkgeyBib29sZWFuQXR0cmlidXRlLnNldCh0aGlzLCAnaGlkZGVuJywgdmFsdWUpOyB9XG4gIGdldCBzcGVsbGNoZWNrKCkgeyByZXR1cm4gYm9vbGVhbkF0dHJpYnV0ZS5nZXQodGhpcywgJ3NwZWxsY2hlY2snKTsgfVxuICBzZXQgc3BlbGxjaGVjayh2YWx1ZSkgeyBib29sZWFuQXR0cmlidXRlLnNldCh0aGlzLCAnc3BlbGxjaGVjaycsIHZhbHVlKTsgfVxuXG4gIC8vIFN0cmluZyBBY2Nlc3NvcnNcbiAgZ2V0IGFjY2Vzc0tleSgpIHsgcmV0dXJuIHN0cmluZ0F0dHJpYnV0ZS5nZXQodGhpcywgJ2FjY2Vzc2tleScpOyB9XG4gIHNldCBhY2Nlc3NLZXkodmFsdWUpIHsgc3RyaW5nQXR0cmlidXRlLnNldCh0aGlzLCAnYWNjZXNza2V5JywgdmFsdWUpOyB9XG4gIGdldCBkaXIoKSB7IHJldHVybiBzdHJpbmdBdHRyaWJ1dGUuZ2V0KHRoaXMsICdkaXInKTsgfVxuICBzZXQgZGlyKHZhbHVlKSB7IHN0cmluZ0F0dHJpYnV0ZS5zZXQodGhpcywgJ2RpcicsIHZhbHVlKTsgfVxuICBnZXQgbGFuZygpIHsgcmV0dXJuIHN0cmluZ0F0dHJpYnV0ZS5nZXQodGhpcywgJ2xhbmcnKTsgfVxuICBzZXQgbGFuZyh2YWx1ZSkgeyBzdHJpbmdBdHRyaWJ1dGUuc2V0KHRoaXMsICdsYW5nJywgdmFsdWUpOyB9XG4gIGdldCB0aXRsZSgpIHsgcmV0dXJuIHN0cmluZ0F0dHJpYnV0ZS5nZXQodGhpcywgJ3RpdGxlJyk7IH1cbiAgc2V0IHRpdGxlKHZhbHVlKSB7IHN0cmluZ0F0dHJpYnV0ZS5zZXQodGhpcywgJ3RpdGxlJywgdmFsdWUpOyB9XG5cbiAgLy8gRE9NIExldmVsIDBcbiAgZ2V0IG9uYWJvcnQoKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbmFib3J0Jyk7IH1cbiAgc2V0IG9uYWJvcnQodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25hYm9ydCcsIHZhbHVlKTsgfVxuXG4gIGdldCBvbmJsdXIoKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbmJsdXInKTsgfVxuICBzZXQgb25ibHVyKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29uYmx1cicsIHZhbHVlKTsgfVxuXG4gIGdldCBvbmNhbmNlbCgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29uY2FuY2VsJyk7IH1cbiAgc2V0IG9uY2FuY2VsKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29uY2FuY2VsJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9uY2FucGxheSgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29uY2FucGxheScpOyB9XG4gIHNldCBvbmNhbnBsYXkodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25jYW5wbGF5JywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9uY2FucGxheXRocm91Z2goKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbmNhbnBsYXl0aHJvdWdoJyk7IH1cbiAgc2V0IG9uY2FucGxheXRocm91Z2godmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25jYW5wbGF5dGhyb3VnaCcsIHZhbHVlKTsgfVxuXG4gIGdldCBvbmNoYW5nZSgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29uY2hhbmdlJyk7IH1cbiAgc2V0IG9uY2hhbmdlKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29uY2hhbmdlJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9uY2xpY2soKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbmNsaWNrJyk7IH1cbiAgc2V0IG9uY2xpY2sodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25jbGljaycsIHZhbHVlKTsgfVxuXG4gIGdldCBvbmNsb3NlKCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb25jbG9zZScpOyB9XG4gIHNldCBvbmNsb3NlKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29uY2xvc2UnLCB2YWx1ZSk7IH1cblxuICBnZXQgb25jb250ZXh0bWVudSgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29uY29udGV4dG1lbnUnKTsgfVxuICBzZXQgb25jb250ZXh0bWVudSh2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbmNvbnRleHRtZW51JywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9uY3VlY2hhbmdlKCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb25jdWVjaGFuZ2UnKTsgfVxuICBzZXQgb25jdWVjaGFuZ2UodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25jdWVjaGFuZ2UnLCB2YWx1ZSk7IH1cblxuICBnZXQgb25kYmxjbGljaygpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29uZGJsY2xpY2snKTsgfVxuICBzZXQgb25kYmxjbGljayh2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbmRibGNsaWNrJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9uZHJhZygpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29uZHJhZycpOyB9XG4gIHNldCBvbmRyYWcodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25kcmFnJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9uZHJhZ2VuZCgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29uZHJhZ2VuZCcpOyB9XG4gIHNldCBvbmRyYWdlbmQodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25kcmFnZW5kJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9uZHJhZ2VudGVyKCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb25kcmFnZW50ZXInKTsgfVxuICBzZXQgb25kcmFnZW50ZXIodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25kcmFnZW50ZXInLCB2YWx1ZSk7IH1cblxuICBnZXQgb25kcmFnbGVhdmUoKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbmRyYWdsZWF2ZScpOyB9XG4gIHNldCBvbmRyYWdsZWF2ZSh2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbmRyYWdsZWF2ZScsIHZhbHVlKTsgfVxuXG4gIGdldCBvbmRyYWdvdmVyKCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb25kcmFnb3ZlcicpOyB9XG4gIHNldCBvbmRyYWdvdmVyKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29uZHJhZ292ZXInLCB2YWx1ZSk7IH1cblxuICBnZXQgb25kcmFnc3RhcnQoKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbmRyYWdzdGFydCcpOyB9XG4gIHNldCBvbmRyYWdzdGFydCh2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbmRyYWdzdGFydCcsIHZhbHVlKTsgfVxuXG4gIGdldCBvbmRyb3AoKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbmRyb3AnKTsgfVxuICBzZXQgb25kcm9wKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29uZHJvcCcsIHZhbHVlKTsgfVxuXG4gIGdldCBvbmR1cmF0aW9uY2hhbmdlKCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb25kdXJhdGlvbmNoYW5nZScpOyB9XG4gIHNldCBvbmR1cmF0aW9uY2hhbmdlKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29uZHVyYXRpb25jaGFuZ2UnLCB2YWx1ZSk7IH1cblxuICBnZXQgb25lbXB0aWVkKCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb25lbXB0aWVkJyk7IH1cbiAgc2V0IG9uZW1wdGllZCh2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbmVtcHRpZWQnLCB2YWx1ZSk7IH1cblxuICBnZXQgb25lbmRlZCgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29uZW5kZWQnKTsgfVxuICBzZXQgb25lbmRlZCh2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbmVuZGVkJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9uZXJyb3IoKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbmVycm9yJyk7IH1cbiAgc2V0IG9uZXJyb3IodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25lcnJvcicsIHZhbHVlKTsgfVxuXG4gIGdldCBvbmZvY3VzKCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb25mb2N1cycpOyB9XG4gIHNldCBvbmZvY3VzKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29uZm9jdXMnLCB2YWx1ZSk7IH1cblxuICBnZXQgb25pbnB1dCgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29uaW5wdXQnKTsgfVxuICBzZXQgb25pbnB1dCh2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbmlucHV0JywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9uaW52YWxpZCgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29uaW52YWxpZCcpOyB9XG4gIHNldCBvbmludmFsaWQodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25pbnZhbGlkJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9ua2V5ZG93bigpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29ua2V5ZG93bicpOyB9XG4gIHNldCBvbmtleWRvd24odmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25rZXlkb3duJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9ua2V5cHJlc3MoKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbmtleXByZXNzJyk7IH1cbiAgc2V0IG9ua2V5cHJlc3ModmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25rZXlwcmVzcycsIHZhbHVlKTsgfVxuXG4gIGdldCBvbmtleXVwKCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb25rZXl1cCcpOyB9XG4gIHNldCBvbmtleXVwKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29ua2V5dXAnLCB2YWx1ZSk7IH1cblxuICBnZXQgb25sb2FkKCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb25sb2FkJyk7IH1cbiAgc2V0IG9ubG9hZCh2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbmxvYWQnLCB2YWx1ZSk7IH1cblxuICBnZXQgb25sb2FkZWRkYXRhKCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb25sb2FkZWRkYXRhJyk7IH1cbiAgc2V0IG9ubG9hZGVkZGF0YSh2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbmxvYWRlZGRhdGEnLCB2YWx1ZSk7IH1cblxuICBnZXQgb25sb2FkZWRtZXRhZGF0YSgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29ubG9hZGVkbWV0YWRhdGEnKTsgfVxuICBzZXQgb25sb2FkZWRtZXRhZGF0YSh2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbmxvYWRlZG1ldGFkYXRhJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9ubG9hZHN0YXJ0KCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb25sb2Fkc3RhcnQnKTsgfVxuICBzZXQgb25sb2Fkc3RhcnQodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25sb2Fkc3RhcnQnLCB2YWx1ZSk7IH1cblxuICBnZXQgb25tb3VzZWRvd24oKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbm1vdXNlZG93bicpOyB9XG4gIHNldCBvbm1vdXNlZG93bih2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbm1vdXNlZG93bicsIHZhbHVlKTsgfVxuXG4gIGdldCBvbm1vdXNlZW50ZXIoKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbm1vdXNlZW50ZXInKTsgfVxuICBzZXQgb25tb3VzZWVudGVyKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29ubW91c2VlbnRlcicsIHZhbHVlKTsgfVxuXG4gIGdldCBvbm1vdXNlbGVhdmUoKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbm1vdXNlbGVhdmUnKTsgfVxuICBzZXQgb25tb3VzZWxlYXZlKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29ubW91c2VsZWF2ZScsIHZhbHVlKTsgfVxuXG4gIGdldCBvbm1vdXNlbW92ZSgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29ubW91c2Vtb3ZlJyk7IH1cbiAgc2V0IG9ubW91c2Vtb3ZlKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29ubW91c2Vtb3ZlJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9ubW91c2VvdXQoKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbm1vdXNlb3V0Jyk7IH1cbiAgc2V0IG9ubW91c2VvdXQodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25tb3VzZW91dCcsIHZhbHVlKTsgfVxuXG4gIGdldCBvbm1vdXNlb3ZlcigpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29ubW91c2VvdmVyJyk7IH1cbiAgc2V0IG9ubW91c2VvdmVyKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29ubW91c2VvdmVyJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9ubW91c2V1cCgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29ubW91c2V1cCcpOyB9XG4gIHNldCBvbm1vdXNldXAodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25tb3VzZXVwJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9ubW91c2V3aGVlbCgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29ubW91c2V3aGVlbCcpOyB9XG4gIHNldCBvbm1vdXNld2hlZWwodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25tb3VzZXdoZWVsJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9ucGF1c2UoKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbnBhdXNlJyk7IH1cbiAgc2V0IG9ucGF1c2UodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25wYXVzZScsIHZhbHVlKTsgfVxuXG4gIGdldCBvbnBsYXkoKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbnBsYXknKTsgfVxuICBzZXQgb25wbGF5KHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29ucGxheScsIHZhbHVlKTsgfVxuXG4gIGdldCBvbnBsYXlpbmcoKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbnBsYXlpbmcnKTsgfVxuICBzZXQgb25wbGF5aW5nKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29ucGxheWluZycsIHZhbHVlKTsgfVxuXG4gIGdldCBvbnByb2dyZXNzKCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb25wcm9ncmVzcycpOyB9XG4gIHNldCBvbnByb2dyZXNzKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29ucHJvZ3Jlc3MnLCB2YWx1ZSk7IH1cblxuICBnZXQgb25yYXRlY2hhbmdlKCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb25yYXRlY2hhbmdlJyk7IH1cbiAgc2V0IG9ucmF0ZWNoYW5nZSh2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbnJhdGVjaGFuZ2UnLCB2YWx1ZSk7IH1cblxuICBnZXQgb25yZXNldCgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29ucmVzZXQnKTsgfVxuICBzZXQgb25yZXNldCh2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbnJlc2V0JywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9ucmVzaXplKCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb25yZXNpemUnKTsgfVxuICBzZXQgb25yZXNpemUodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25yZXNpemUnLCB2YWx1ZSk7IH1cblxuICBnZXQgb25zY3JvbGwoKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbnNjcm9sbCcpOyB9XG4gIHNldCBvbnNjcm9sbCh2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbnNjcm9sbCcsIHZhbHVlKTsgfVxuXG4gIGdldCBvbnNlZWtlZCgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29uc2Vla2VkJyk7IH1cbiAgc2V0IG9uc2Vla2VkKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29uc2Vla2VkJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9uc2Vla2luZygpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29uc2Vla2luZycpOyB9XG4gIHNldCBvbnNlZWtpbmcodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25zZWVraW5nJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9uc2VsZWN0KCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb25zZWxlY3QnKTsgfVxuICBzZXQgb25zZWxlY3QodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25zZWxlY3QnLCB2YWx1ZSk7IH1cblxuICBnZXQgb25zaG93KCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb25zaG93Jyk7IH1cbiAgc2V0IG9uc2hvdyh2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbnNob3cnLCB2YWx1ZSk7IH1cblxuICBnZXQgb25zdGFsbGVkKCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb25zdGFsbGVkJyk7IH1cbiAgc2V0IG9uc3RhbGxlZCh2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbnN0YWxsZWQnLCB2YWx1ZSk7IH1cblxuICBnZXQgb25zdWJtaXQoKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbnN1Ym1pdCcpOyB9XG4gIHNldCBvbnN1Ym1pdCh2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbnN1Ym1pdCcsIHZhbHVlKTsgfVxuXG4gIGdldCBvbnN1c3BlbmQoKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbnN1c3BlbmQnKTsgfVxuICBzZXQgb25zdXNwZW5kKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29uc3VzcGVuZCcsIHZhbHVlKTsgfVxuXG4gIGdldCBvbnRpbWV1cGRhdGUoKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbnRpbWV1cGRhdGUnKTsgfVxuICBzZXQgb250aW1ldXBkYXRlKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29udGltZXVwZGF0ZScsIHZhbHVlKTsgfVxuXG4gIGdldCBvbnRvZ2dsZSgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29udG9nZ2xlJyk7IH1cbiAgc2V0IG9udG9nZ2xlKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29udG9nZ2xlJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9udm9sdW1lY2hhbmdlKCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb252b2x1bWVjaGFuZ2UnKTsgfVxuICBzZXQgb252b2x1bWVjaGFuZ2UodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb252b2x1bWVjaGFuZ2UnLCB2YWx1ZSk7IH1cblxuICBnZXQgb253YWl0aW5nKCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb253YWl0aW5nJyk7IH1cbiAgc2V0IG9ud2FpdGluZyh2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbndhaXRpbmcnLCB2YWx1ZSk7IH1cblxuICBnZXQgb25hdXhjbGljaygpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29uYXV4Y2xpY2snKTsgfVxuICBzZXQgb25hdXhjbGljayh2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbmF1eGNsaWNrJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9uZ290cG9pbnRlcmNhcHR1cmUoKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbmdvdHBvaW50ZXJjYXB0dXJlJyk7IH1cbiAgc2V0IG9uZ290cG9pbnRlcmNhcHR1cmUodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25nb3Rwb2ludGVyY2FwdHVyZScsIHZhbHVlKTsgfVxuXG4gIGdldCBvbmxvc3Rwb2ludGVyY2FwdHVyZSgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29ubG9zdHBvaW50ZXJjYXB0dXJlJyk7IH1cbiAgc2V0IG9ubG9zdHBvaW50ZXJjYXB0dXJlKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29ubG9zdHBvaW50ZXJjYXB0dXJlJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9ucG9pbnRlcmNhbmNlbCgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29ucG9pbnRlcmNhbmNlbCcpOyB9XG4gIHNldCBvbnBvaW50ZXJjYW5jZWwodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25wb2ludGVyY2FuY2VsJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9ucG9pbnRlcmRvd24oKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbnBvaW50ZXJkb3duJyk7IH1cbiAgc2V0IG9ucG9pbnRlcmRvd24odmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25wb2ludGVyZG93bicsIHZhbHVlKTsgfVxuXG4gIGdldCBvbnBvaW50ZXJlbnRlcigpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29ucG9pbnRlcmVudGVyJyk7IH1cbiAgc2V0IG9ucG9pbnRlcmVudGVyKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29ucG9pbnRlcmVudGVyJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9ucG9pbnRlcmxlYXZlKCkgeyByZXR1cm4gbGV2ZWwwLmdldCh0aGlzLCAnb25wb2ludGVybGVhdmUnKTsgfVxuICBzZXQgb25wb2ludGVybGVhdmUodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25wb2ludGVybGVhdmUnLCB2YWx1ZSk7IH1cblxuICBnZXQgb25wb2ludGVybW92ZSgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29ucG9pbnRlcm1vdmUnKTsgfVxuICBzZXQgb25wb2ludGVybW92ZSh2YWx1ZSkgeyBsZXZlbDAuc2V0KHRoaXMsICdvbnBvaW50ZXJtb3ZlJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9ucG9pbnRlcm91dCgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29ucG9pbnRlcm91dCcpOyB9XG4gIHNldCBvbnBvaW50ZXJvdXQodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25wb2ludGVyb3V0JywgdmFsdWUpOyB9XG5cbiAgZ2V0IG9ucG9pbnRlcm92ZXIoKSB7IHJldHVybiBsZXZlbDAuZ2V0KHRoaXMsICdvbnBvaW50ZXJvdmVyJyk7IH1cbiAgc2V0IG9ucG9pbnRlcm92ZXIodmFsdWUpIHsgbGV2ZWwwLnNldCh0aGlzLCAnb25wb2ludGVyb3ZlcicsIHZhbHVlKTsgfVxuXG4gIGdldCBvbnBvaW50ZXJ1cCgpIHsgcmV0dXJuIGxldmVsMC5nZXQodGhpcywgJ29ucG9pbnRlcnVwJyk7IH1cbiAgc2V0IG9ucG9pbnRlcnVwKHZhbHVlKSB7IGxldmVsMC5zZXQodGhpcywgJ29ucG9pbnRlcnVwJywgdmFsdWUpOyB9XG4gIC8qIGM4IGlnbm9yZSBzdG9wICovXG5cbn1cbiIsImltcG9ydCB7Q09OVEVOVCwgUFJJVkFURX0gZnJvbSAnLi4vc2hhcmVkL3N5bWJvbHMuanMnO1xuXG5pbXBvcnQge3JlZ2lzdGVySFRNTENsYXNzfSBmcm9tICcuLi9zaGFyZWQvcmVnaXN0ZXItaHRtbC1jbGFzcy5qcyc7XG5cbmltcG9ydCB7SFRNTEVsZW1lbnR9IGZyb20gJy4vZWxlbWVudC5qcyc7XG5cbmNvbnN0IHRhZ05hbWUgPSAndGVtcGxhdGUnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTFRlbXBsYXRlRWxlbWVudFxuICovXG5jbGFzcyBIVE1MVGVtcGxhdGVFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50KSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgdGFnTmFtZSk7XG4gICAgY29uc3QgY29udGVudCA9IHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgKHRoaXNbQ09OVEVOVF0gPSBjb250ZW50KVtQUklWQVRFXSA9IHRoaXM7XG4gIH1cblxuICBnZXQgY29udGVudCgpIHtcbiAgICBpZiAodGhpcy5oYXNDaGlsZE5vZGVzKCkgJiYgIXRoaXNbQ09OVEVOVF0uaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgdGhpcy5jaGlsZE5vZGVzKVxuICAgICAgICB0aGlzW0NPTlRFTlRdLmFwcGVuZENoaWxkKG5vZGUuY2xvbmVOb2RlKHRydWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNbQ09OVEVOVF07XG4gIH1cbn1cblxucmVnaXN0ZXJIVE1MQ2xhc3ModGFnTmFtZSwgSFRNTFRlbXBsYXRlRWxlbWVudCk7XG5cbmV4cG9ydCB7SFRNTFRlbXBsYXRlRWxlbWVudH07XG4iLCJpbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG5jb25zdCB7dG9TdHJpbmd9ID0gSFRNTEVsZW1lbnQucHJvdG90eXBlO1xuXG5leHBvcnQgY2xhc3MgVGV4dEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG5cbiAgZ2V0IGlubmVySFRNTCgpIHsgcmV0dXJuIHRoaXMudGV4dENvbnRlbnQ7IH1cbiAgc2V0IGlubmVySFRNTChodG1sKSB7IHRoaXMudGV4dENvbnRlbnQgPSBodG1sOyB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgY29uc3Qgb3V0ZXJIVE1MID0gdG9TdHJpbmcuY2FsbCh0aGlzLmNsb25lTm9kZSgpKTtcbiAgICByZXR1cm4gb3V0ZXJIVE1MLnJlcGxhY2UoJz48JywgKCkgPT4gYD4ke3RoaXMudGV4dENvbnRlbnR9PGApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBib29sZWFuQXR0cmlidXRlLCBzdHJpbmdBdHRyaWJ1dGUgfSBmcm9tICcuLi9zaGFyZWQvYXR0cmlidXRlcy5qcyc7XG5pbXBvcnQgeyByZWdpc3RlckhUTUxDbGFzcyB9IGZyb20gJy4uL3NoYXJlZC9yZWdpc3Rlci1odG1sLWNsYXNzLmpzJztcblxuaW1wb3J0IHsgVGV4dEVsZW1lbnQgfSBmcm9tICcuL3RleHQtZWxlbWVudC5qcyc7XG5cbmNvbnN0IHRhZ05hbWUgPSAnc2NyaXB0JztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxTY3JpcHRFbGVtZW50XG4gKi9cbmNsYXNzIEhUTUxTY3JpcHRFbGVtZW50IGV4dGVuZHMgVGV4dEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUgPSB0YWdOYW1lKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxuXG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiBzdHJpbmdBdHRyaWJ1dGUuZ2V0KHRoaXMsICd0eXBlJyk7XG4gIH1cbiAgc2V0IHR5cGUodmFsdWUpIHtcbiAgICBzdHJpbmdBdHRyaWJ1dGUuc2V0KHRoaXMsICd0eXBlJywgdmFsdWUpO1xuICB9XG5cbiAgZ2V0IHNyYygpIHtcbiAgICByZXR1cm4gc3RyaW5nQXR0cmlidXRlLmdldCh0aGlzLCAnc3JjJyk7XG4gIH1cbiAgc2V0IHNyYyh2YWx1ZSkge1xuICAgIHN0cmluZ0F0dHJpYnV0ZS5zZXQodGhpcywgJ3NyYycsIHZhbHVlKTtcbiAgfVxuXG4gIGdldCBkZWZlcigpIHtcbiAgICByZXR1cm4gYm9vbGVhbkF0dHJpYnV0ZS5nZXQodGhpcywgJ2RlZmVyJyk7XG4gIH1cblxuICBzZXQgZGVmZXIodmFsdWUpIHtcbiAgICBib29sZWFuQXR0cmlidXRlLnNldCh0aGlzLCAnZGVmZXInLCB2YWx1ZSk7XG4gIH1cblxuICBnZXQgY3Jvc3NPcmlnaW4oKSB7XG4gICAgcmV0dXJuIHN0cmluZ0F0dHJpYnV0ZS5nZXQodGhpcywgJ2Nyb3Nzb3JpZ2luJyk7XG4gIH1cbiAgc2V0IGNyb3NzT3JpZ2luKHZhbHVlKSB7XG4gICAgc3RyaW5nQXR0cmlidXRlLnNldCh0aGlzLCAnY3Jvc3NvcmlnaW4nLCB2YWx1ZSk7XG4gIH1cblxuICBnZXQgbm9tb2R1bGUoKSB7XG4gICAgcmV0dXJuIGJvb2xlYW5BdHRyaWJ1dGUuZ2V0KHRoaXMsICdub21vZHVsZScpO1xuICB9XG4gIHNldCBub21vZHVsZSh2YWx1ZSkge1xuICAgIGJvb2xlYW5BdHRyaWJ1dGUuc2V0KHRoaXMsICdub21vZHVsZScsIHZhbHVlKTtcbiAgfVxuXG4gIGdldCByZWZlcnJlclBvbGljeSgpIHtcbiAgICByZXR1cm4gc3RyaW5nQXR0cmlidXRlLmdldCh0aGlzLCAncmVmZXJyZXJwb2xpY3knKTtcbiAgfVxuICBzZXQgcmVmZXJyZXJQb2xpY3kodmFsdWUpIHtcbiAgICBzdHJpbmdBdHRyaWJ1dGUuc2V0KHRoaXMsICdyZWZlcnJlcnBvbGljeScsIHZhbHVlKTtcbiAgfVxuXG4gIGdldCBub25jZSgpIHtcbiAgICByZXR1cm4gc3RyaW5nQXR0cmlidXRlLmdldCh0aGlzLCAnbm9uY2UnKTtcbiAgfVxuICBzZXQgbm9uY2UodmFsdWUpIHtcbiAgICBzdHJpbmdBdHRyaWJ1dGUuc2V0KHRoaXMsICdub25jZScsIHZhbHVlKTtcbiAgfVxuXG4gIGdldCBhc3luYygpIHtcbiAgICByZXR1cm4gYm9vbGVhbkF0dHJpYnV0ZS5nZXQodGhpcywgJ2FzeW5jJyk7XG4gIH1cbiAgc2V0IGFzeW5jKHZhbHVlKSB7XG4gICAgYm9vbGVhbkF0dHJpYnV0ZS5zZXQodGhpcywgJ2FzeW5jJywgdmFsdWUpO1xuICB9XG5cbiAgZ2V0IHRleHQoKSB7IHJldHVybiB0aGlzLnRleHRDb250ZW50OyB9XG4gIHNldCB0ZXh0KGNvbnRlbnQpIHsgdGhpcy50ZXh0Q29udGVudCA9IGNvbnRlbnQ7IH1cbn1cblxucmVnaXN0ZXJIVE1MQ2xhc3ModGFnTmFtZSwgSFRNTFNjcmlwdEVsZW1lbnQpO1xuXG5leHBvcnQgeyBIVE1MU2NyaXB0RWxlbWVudCB9O1xuIiwiaW1wb3J0IHtyZWdpc3RlckhUTUxDbGFzc30gZnJvbSAnLi4vc2hhcmVkL3JlZ2lzdGVyLWh0bWwtY2xhc3MuanMnO1xuaW1wb3J0IHtib29sZWFuQXR0cmlidXRlLCBzdHJpbmdBdHRyaWJ1dGV9IGZyb20gJy4uL3NoYXJlZC9hdHRyaWJ1dGVzLmpzJztcblxuaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuY29uc3QgdGFnTmFtZSA9ICdpZnJhbWUnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTElGcmFtZUVsZW1lbnRcbiAqL1xuY2xhc3MgSFRNTElGcmFtZUVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9IHRhZ05hbWUpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG5cbiAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gIGdldCBzcmMoKSB7IHJldHVybiBzdHJpbmdBdHRyaWJ1dGUuZ2V0KHRoaXMsICdzcmMnKTsgfVxuICBzZXQgc3JjKHZhbHVlKSB7IHN0cmluZ0F0dHJpYnV0ZS5zZXQodGhpcywgJ3NyYycsIHZhbHVlKTsgfVxuXG4gIGdldCBzcmNkb2MoKSB7IHJldHVybiBzdHJpbmdBdHRyaWJ1dGUuZ2V0KHRoaXMsIFwic3JjZG9jXCIpOyB9XG4gIHNldCBzcmNkb2ModmFsdWUpIHsgc3RyaW5nQXR0cmlidXRlLnNldCh0aGlzLCBcInNyY2RvY1wiLCB2YWx1ZSk7IH1cblxuICBnZXQgbmFtZSgpIHsgcmV0dXJuIHN0cmluZ0F0dHJpYnV0ZS5nZXQodGhpcywgXCJuYW1lXCIpOyB9XG4gIHNldCBuYW1lKHZhbHVlKSB7IHN0cmluZ0F0dHJpYnV0ZS5zZXQodGhpcywgXCJuYW1lXCIsIHZhbHVlKTsgfVxuXG4gIGdldCBhbGxvdygpIHsgcmV0dXJuIHN0cmluZ0F0dHJpYnV0ZS5nZXQodGhpcywgXCJhbGxvd1wiKTsgfVxuICBzZXQgYWxsb3codmFsdWUpIHsgc3RyaW5nQXR0cmlidXRlLnNldCh0aGlzLCBcImFsbG93XCIsIHZhbHVlKTsgfVxuXG4gIGdldCBhbGxvd0Z1bGxzY3JlZW4oKSB7IHJldHVybiBib29sZWFuQXR0cmlidXRlLmdldCh0aGlzLCBcImFsbG93ZnVsbHNjcmVlblwiKTsgfVxuICBzZXQgYWxsb3dGdWxsc2NyZWVuKHZhbHVlKSB7IGJvb2xlYW5BdHRyaWJ1dGUuc2V0KHRoaXMsIFwiYWxsb3dmdWxsc2NyZWVuXCIsIHZhbHVlKTsgfVxuICBcbiAgZ2V0IHJlZmVycmVyUG9saWN5KCkgeyByZXR1cm4gc3RyaW5nQXR0cmlidXRlLmdldCh0aGlzLCBcInJlZmVycmVycG9saWN5XCIpOyB9XG4gIHNldCByZWZlcnJlclBvbGljeSh2YWx1ZSkgeyBzdHJpbmdBdHRyaWJ1dGUuc2V0KHRoaXMsIFwicmVmZXJyZXJwb2xpY3lcIiwgdmFsdWUpOyB9XG4gIFxuICBnZXQgbG9hZGluZygpIHsgcmV0dXJuIHN0cmluZ0F0dHJpYnV0ZS5nZXQodGhpcywgXCJsb2FkaW5nXCIpOyB9XG4gIHNldCBsb2FkaW5nKHZhbHVlKSB7IHN0cmluZ0F0dHJpYnV0ZS5zZXQodGhpcywgXCJsb2FkaW5nXCIsIHZhbHVlKTsgfVxuICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xufVxuXG5yZWdpc3RlckhUTUxDbGFzcyh0YWdOYW1lLCBIVE1MSUZyYW1lRWxlbWVudCk7XG5cbmV4cG9ydCB7SFRNTElGcmFtZUVsZW1lbnR9O1xuIiwiaW1wb3J0IHtwYXJzZX0gZnJvbSAnY3Nzb20nO1xuXG5pbXBvcnQge3JlZ2lzdGVySFRNTENsYXNzfSBmcm9tICcuLi9zaGFyZWQvcmVnaXN0ZXItaHRtbC1jbGFzcy5qcyc7XG5pbXBvcnQge1NIRUVUfSBmcm9tICcuLi9zaGFyZWQvc3ltYm9scy5qcyc7XG5cbmltcG9ydCB7VGV4dEVsZW1lbnR9IGZyb20gJy4vdGV4dC1lbGVtZW50LmpzJztcblxuY29uc3QgdGFnTmFtZSA9ICdzdHlsZSc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5IVE1MU3R5bGVFbGVtZW50XG4gKi9cbmNsYXNzIEhUTUxTdHlsZUVsZW1lbnQgZXh0ZW5kcyBUZXh0RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9IHRhZ05hbWUpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICAgIHRoaXNbU0hFRVRdID0gbnVsbDtcbiAgfVxuXG4gIGdldCBzaGVldCgpIHtcbiAgICBjb25zdCBzaGVldCA9IHRoaXNbU0hFRVRdO1xuICAgIGlmIChzaGVldCAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH1cbiAgICByZXR1cm4gdGhpc1tTSEVFVF0gPSBwYXJzZSh0aGlzLnRleHRDb250ZW50KTtcbiAgfVxuXG4gIGdldCBpbm5lckhUTUwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmlubmVySFRNTCB8fCAnJztcbiAgfVxuICBzZXQgaW5uZXJIVE1MKHZhbHVlKSB7XG4gICAgc3VwZXIudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgICB0aGlzW1NIRUVUXSA9IG51bGw7XG4gIH1cbiAgZ2V0IGlubmVyVGV4dCgpIHtcbiAgICByZXR1cm4gc3VwZXIuaW5uZXJUZXh0IHx8ICcnO1xuICB9XG4gIHNldCBpbm5lclRleHQodmFsdWUpIHtcbiAgICBzdXBlci50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgIHRoaXNbU0hFRVRdID0gbnVsbDtcbiAgfVxuICBnZXQgdGV4dENvbnRlbnQoKSB7XG4gICAgcmV0dXJuIHN1cGVyLnRleHRDb250ZW50IHx8ICcnO1xuICB9XG4gIHNldCB0ZXh0Q29udGVudCh2YWx1ZSkge1xuICAgIHN1cGVyLnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgdGhpc1tTSEVFVF0gPSBudWxsO1xuICB9XG59XG5cbnJlZ2lzdGVySFRNTENsYXNzKHRhZ05hbWUsIEhUTUxTdHlsZUVsZW1lbnQpO1xuXG5leHBvcnQge0hUTUxTdHlsZUVsZW1lbnR9O1xuIiwiaW1wb3J0IHtzdHJpbmdBdHRyaWJ1dGV9IGZyb20gJy4uL3NoYXJlZC9hdHRyaWJ1dGVzLmpzJztcbmltcG9ydCB7cmVnaXN0ZXJIVE1MQ2xhc3N9IGZyb20gJy4uL3NoYXJlZC9yZWdpc3Rlci1odG1sLWNsYXNzLmpzJztcblxuaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxUaW1lRWxlbWVudFxuICovXG5jbGFzcyBIVE1MVGltZUVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9ICd0aW1lJykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBkYXRlVGltZSgpIHsgcmV0dXJuIHN0cmluZ0F0dHJpYnV0ZS5nZXQodGhpcywgJ2RhdGV0aW1lJyk7IH1cbiAgc2V0IGRhdGVUaW1lKHZhbHVlKSB7IHN0cmluZ0F0dHJpYnV0ZS5zZXQodGhpcywgJ2RhdGV0aW1lJywgdmFsdWUpOyB9XG59XG5cbnJlZ2lzdGVySFRNTENsYXNzKCd0aW1lJywgSFRNTFRpbWVFbGVtZW50KVxuXG5leHBvcnQge0hUTUxUaW1lRWxlbWVudH07XG4iLCJpbXBvcnQge3JlZ2lzdGVySFRNTENsYXNzfSBmcm9tICcuLi9zaGFyZWQvcmVnaXN0ZXItaHRtbC1jbGFzcy5qcyc7XG5pbXBvcnQge2Jvb2xlYW5BdHRyaWJ1dGUsIHN0cmluZ0F0dHJpYnV0ZX0gZnJvbSAnLi4vc2hhcmVkL2F0dHJpYnV0ZXMuanMnO1xuXG5pbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG5jb25zdCB0YWdOYW1lID0gJ2lucHV0JztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxJbnB1dEVsZW1lbnRcbiAqL1xuY2xhc3MgSFRNTElucHV0RWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gdGFnTmFtZSkge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cblxuICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgZ2V0IGF1dG9mb2N1cygpIHsgcmV0dXJuIGJvb2xlYW5BdHRyaWJ1dGUuZ2V0KHRoaXMsICdhdXRvZm9jdXMnKSB8fCAtMTsgfVxuICBzZXQgYXV0b2ZvY3VzKHZhbHVlKSB7IGJvb2xlYW5BdHRyaWJ1dGUuc2V0KHRoaXMsICdhdXRvZm9jdXMnLCB2YWx1ZSk7IH1cblxuICBnZXQgZGlzYWJsZWQoKSB7IHJldHVybiBib29sZWFuQXR0cmlidXRlLmdldCh0aGlzLCAnZGlzYWJsZWQnKTsgfVxuICBzZXQgZGlzYWJsZWQodmFsdWUpIHsgYm9vbGVhbkF0dHJpYnV0ZS5zZXQodGhpcywgJ2Rpc2FibGVkJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG5hbWUoKSB7IHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZSgnbmFtZScpOyB9XG4gIHNldCBuYW1lKHZhbHVlKSB7IHRoaXMuc2V0QXR0cmlidXRlKCduYW1lJywgdmFsdWUpOyB9XG5cbiAgZ2V0IHBsYWNlaG9sZGVyKCkgeyByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ3BsYWNlaG9sZGVyJyk7IH1cbiAgc2V0IHBsYWNlaG9sZGVyKHZhbHVlKSB7IHRoaXMuc2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicsIHZhbHVlKTsgfVxuXG4gIGdldCB0eXBlKCkgeyByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ3R5cGUnKTsgfVxuICBzZXQgdHlwZSh2YWx1ZSkgeyB0aGlzLnNldEF0dHJpYnV0ZSgndHlwZScsIHZhbHVlKTsgfVxuXG4gIGdldCB2YWx1ZSgpIHsgcmV0dXJuIHN0cmluZ0F0dHJpYnV0ZS5nZXQodGhpcywgJ3ZhbHVlJyk7IH1cbiAgc2V0IHZhbHVlKHZhbHVlKSB7IHN0cmluZ0F0dHJpYnV0ZS5zZXQodGhpcywgJ3ZhbHVlJywgdmFsdWUpOyB9XG4gIC8qIGM4IGlnbm9yZSBzdG9wICovXG59XG5cbnJlZ2lzdGVySFRNTENsYXNzKHRhZ05hbWUsIEhUTUxJbnB1dEVsZW1lbnQpO1xuXG5leHBvcnQge0hUTUxJbnB1dEVsZW1lbnR9O1xuIiwiaW1wb3J0IHtyZWdpc3RlckhUTUxDbGFzc30gZnJvbSAnLi4vc2hhcmVkL3JlZ2lzdGVyLWh0bWwtY2xhc3MuanMnO1xuXG5pbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG5jb25zdCB0YWdOYW1lID0gJ2gxJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxIZWFkaW5nRWxlbWVudFxuICovXG5jbGFzcyBIVE1MSGVhZGluZ0VsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9IHRhZ05hbWUpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG59XG5cbnJlZ2lzdGVySFRNTENsYXNzKFt0YWdOYW1lLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnXSwgSFRNTEhlYWRpbmdFbGVtZW50KTtcblxuZXhwb3J0IHtIVE1MSGVhZGluZ0VsZW1lbnR9O1xuIiwiaW1wb3J0IHtJTUFHRX0gZnJvbSAnLi4vc2hhcmVkL3N5bWJvbHMuanMnO1xuXG5pbXBvcnQge3JlZ2lzdGVySFRNTENsYXNzfSBmcm9tICcuLi9zaGFyZWQvcmVnaXN0ZXItaHRtbC1jbGFzcy5qcyc7XG5pbXBvcnQge251bWVyaWNBdHRyaWJ1dGV9IGZyb20gJy4uL3NoYXJlZC9hdHRyaWJ1dGVzLmpzJztcblxuaW1wb3J0IENhbnZhcyBmcm9tICcuLi8uLi9jb21tb25qcy9jYW52YXMuY2pzJztcblxuaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuY29uc3Qge2NyZWF0ZUNhbnZhc30gPSBDYW52YXM7XG5cbmNvbnN0IHRhZ05hbWUgPSAnY2FudmFzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxDYW52YXNFbGVtZW50XG4gKi9cbmNsYXNzIEhUTUxDYW52YXNFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUgPSB0YWdOYW1lKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgICB0aGlzW0lNQUdFXSA9IGNyZWF0ZUNhbnZhcygzMDAsIDE1MCk7XG4gIH1cblxuICBnZXQgd2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXNbSU1BR0VdLndpZHRoO1xuICB9XG5cbiAgc2V0IHdpZHRoKHZhbHVlKSB7XG4gICAgbnVtZXJpY0F0dHJpYnV0ZS5zZXQodGhpcywgJ3dpZHRoJywgdmFsdWUpO1xuICAgIHRoaXNbSU1BR0VdLndpZHRoID0gdmFsdWU7XG4gIH1cblxuICBnZXQgaGVpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzW0lNQUdFXS5oZWlnaHQ7XG4gIH1cblxuICBzZXQgaGVpZ2h0KHZhbHVlKSB7XG4gICAgbnVtZXJpY0F0dHJpYnV0ZS5zZXQodGhpcywgJ2hlaWdodCcsIHZhbHVlKTtcbiAgICB0aGlzW0lNQUdFXS5oZWlnaHQgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldENvbnRleHQodHlwZSkge1xuICAgIHJldHVybiB0aGlzW0lNQUdFXS5nZXRDb250ZXh0KHR5cGUpO1xuICB9XG5cbiAgdG9EYXRhVVJMKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpc1tJTUFHRV0udG9EYXRhVVJMKC4uLmFyZ3MpO1xuICB9XG59XG5cbnJlZ2lzdGVySFRNTENsYXNzKHRhZ05hbWUsIEhUTUxDYW52YXNFbGVtZW50KTtcblxuZXhwb3J0IHtIVE1MQ2FudmFzRWxlbWVudH07XG4iLCJpbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuaW1wb3J0IHtib29sZWFuQXR0cmlidXRlLCBzdHJpbmdBdHRyaWJ1dGV9IGZyb20gJy4uL3NoYXJlZC9hdHRyaWJ1dGVzLmpzJztcbmltcG9ydCB7cmVnaXN0ZXJIVE1MQ2xhc3N9IGZyb20gJy4uL3NoYXJlZC9yZWdpc3Rlci1odG1sLWNsYXNzLmpzJztcblxuY29uc3QgdGFnTmFtZSA9ICdvcHRpb24nO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTE9wdGlvbkVsZW1lbnRcbiAqL1xuY2xhc3MgSFRNTE9wdGlvbkVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9IHRhZ05hbWUpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG5cbiAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gIGdldCB2YWx1ZSgpIHsgcmV0dXJuIHN0cmluZ0F0dHJpYnV0ZS5nZXQodGhpcywgJ3ZhbHVlJyk7IH1cbiAgc2V0IHZhbHVlKHZhbHVlKSB7IHN0cmluZ0F0dHJpYnV0ZS5zZXQodGhpcywgJ3ZhbHVlJywgdmFsdWUpOyB9XG4gIC8qIGM4IGlnbm9yZSBzdG9wICovXG5cbiAgZ2V0IHNlbGVjdGVkKCkgeyByZXR1cm4gYm9vbGVhbkF0dHJpYnV0ZS5nZXQodGhpcywgJ3NlbGVjdGVkJyk7IH1cbiAgc2V0IHNlbGVjdGVkKHZhbHVlKSB7XG4gICAgY29uc3Qgb3B0aW9uID0gdGhpcy5wYXJlbnRFbGVtZW50Py5xdWVyeVNlbGVjdG9yKCdvcHRpb25bc2VsZWN0ZWRdJyk7XG4gICAgaWYgKG9wdGlvbiAmJiBvcHRpb24gIT09IHRoaXMpXG4gICAgICBvcHRpb24uc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICBib29sZWFuQXR0cmlidXRlLnNldCh0aGlzLCAnc2VsZWN0ZWQnLCB2YWx1ZSk7XG4gIH1cbn1cblxucmVnaXN0ZXJIVE1MQ2xhc3ModGFnTmFtZSwgSFRNTE9wdGlvbkVsZW1lbnQpO1xuXG5leHBvcnQge0hUTUxPcHRpb25FbGVtZW50fTtcbiIsImltcG9ydCB7cmVnaXN0ZXJIVE1MQ2xhc3N9IGZyb20gJy4uL3NoYXJlZC9yZWdpc3Rlci1odG1sLWNsYXNzLmpzJztcblxuaW1wb3J0IHtUZXh0RWxlbWVudH0gZnJvbSAnLi90ZXh0LWVsZW1lbnQuanMnO1xuXG5jb25zdCB0YWdOYW1lID0gJ3RpdGxlJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxUaXRsZUVsZW1lbnRcbiAqL1xuY2xhc3MgSFRNTFRpdGxlRWxlbWVudCBleHRlbmRzIFRleHRFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gdGFnTmFtZSkge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cbn1cblxucmVnaXN0ZXJIVE1MQ2xhc3ModGFnTmFtZSwgSFRNTFRpdGxlRWxlbWVudCk7XG5cbmV4cG9ydCB7SFRNTFRpdGxlRWxlbWVudH07XG4iLCJpbXBvcnQge3JlZ2lzdGVySFRNTENsYXNzfSBmcm9tICcuLi9zaGFyZWQvcmVnaXN0ZXItaHRtbC1jbGFzcy5qcyc7XG5pbXBvcnQge2Jvb2xlYW5BdHRyaWJ1dGV9IGZyb20gJy4uL3NoYXJlZC9hdHRyaWJ1dGVzLmpzJztcblxuaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcbmltcG9ydCB7Tm9kZUxpc3R9IGZyb20gJy4uL2ludGVyZmFjZS9ub2RlLWxpc3QuanMnO1xuXG5jb25zdCB0YWdOYW1lID0gJ3NlbGVjdCc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5IVE1MU2VsZWN0RWxlbWVudFxuICovXG5jbGFzcyBIVE1MU2VsZWN0RWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gdGFnTmFtZSkge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cblxuICBnZXQgb3B0aW9ucygpIHtcbiAgICBsZXQgY2hpbGRyZW4gPSBuZXcgTm9kZUxpc3Q7XG4gICAgbGV0IHtmaXJzdEVsZW1lbnRDaGlsZH0gPSB0aGlzO1xuICAgIHdoaWxlIChmaXJzdEVsZW1lbnRDaGlsZCkge1xuICAgICAgaWYgKGZpcnN0RWxlbWVudENoaWxkLnRhZ05hbWUgPT09ICdPUFRHUk9VUCcpXG4gICAgICAgIGNoaWxkcmVuLnB1c2goLi4uZmlyc3RFbGVtZW50Q2hpbGQuY2hpbGRyZW4pO1xuICAgICAgZWxzZVxuICAgICAgICBjaGlsZHJlbi5wdXNoKGZpcnN0RWxlbWVudENoaWxkKTtcbiAgICAgIGZpcnN0RWxlbWVudENoaWxkID0gZmlyc3RFbGVtZW50Q2hpbGQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgIH1cbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cblxuICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgZ2V0IGRpc2FibGVkKCkgeyByZXR1cm4gYm9vbGVhbkF0dHJpYnV0ZS5nZXQodGhpcywgJ2Rpc2FibGVkJyk7IH1cbiAgc2V0IGRpc2FibGVkKHZhbHVlKSB7IGJvb2xlYW5BdHRyaWJ1dGUuc2V0KHRoaXMsICdkaXNhYmxlZCcsIHZhbHVlKTsgfVxuXG4gIGdldCBuYW1lKCkgeyByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ25hbWUnKTsgfVxuICBzZXQgbmFtZSh2YWx1ZSkgeyB0aGlzLnNldEF0dHJpYnV0ZSgnbmFtZScsIHZhbHVlKTsgfVxuICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuXG4gIGdldCB2YWx1ZSgpIHsgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3Rvcignb3B0aW9uW3NlbGVjdGVkXScpPy52YWx1ZTsgfVxufVxuXG5yZWdpc3RlckhUTUxDbGFzcyh0YWdOYW1lLCBIVE1MU2VsZWN0RWxlbWVudCk7XG5cbmV4cG9ydCB7SFRNTFNlbGVjdEVsZW1lbnR9O1xuXG4iLCJpbXBvcnQge3JlZ2lzdGVySFRNTENsYXNzfSBmcm9tICcuLi9zaGFyZWQvcmVnaXN0ZXItaHRtbC1jbGFzcy5qcyc7XG5pbXBvcnQge2Jvb2xlYW5BdHRyaWJ1dGV9IGZyb20gJy4uL3NoYXJlZC9hdHRyaWJ1dGVzLmpzJztcblxuaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuY29uc3QgdGFnTmFtZSA9ICdidXR0b24nO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTEJ1dHRvbkVsZW1lbnRcbiAqL1xuY2xhc3MgSFRNTEJ1dHRvbkVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9IHRhZ05hbWUpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG5cbiAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gIGdldCBkaXNhYmxlZCgpIHsgcmV0dXJuIGJvb2xlYW5BdHRyaWJ1dGUuZ2V0KHRoaXMsICdkaXNhYmxlZCcpOyB9XG4gIHNldCBkaXNhYmxlZCh2YWx1ZSkgeyBib29sZWFuQXR0cmlidXRlLnNldCh0aGlzLCAnZGlzYWJsZWQnLCB2YWx1ZSk7IH1cblxuICBnZXQgbmFtZSgpIHsgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKCduYW1lJyk7IH1cbiAgc2V0IG5hbWUodmFsdWUpIHsgdGhpcy5zZXRBdHRyaWJ1dGUoJ25hbWUnLCB2YWx1ZSk7IH1cblxuICBnZXQgdHlwZSgpIHsgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKCd0eXBlJyk7IH1cbiAgc2V0IHR5cGUodmFsdWUpIHsgdGhpcy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCB2YWx1ZSk7IH1cbiAgLyogYzggaWdub3JlIHN0b3AgKi9cbn1cblxucmVnaXN0ZXJIVE1MQ2xhc3ModGFnTmFtZSwgSFRNTEJ1dHRvbkVsZW1lbnQpO1xuXG5leHBvcnQge0hUTUxCdXR0b25FbGVtZW50fTtcbiIsImltcG9ydCB7cmVnaXN0ZXJIVE1MQ2xhc3N9IGZyb20gJy4uL3NoYXJlZC9yZWdpc3Rlci1odG1sLWNsYXNzLmpzJztcbmltcG9ydCB7Ym9vbGVhbkF0dHJpYnV0ZX0gZnJvbSAnLi4vc2hhcmVkL2F0dHJpYnV0ZXMuanMnO1xuXG5pbXBvcnQge1RleHRFbGVtZW50fSBmcm9tICcuL3RleHQtZWxlbWVudC5qcyc7XG5cbmNvbnN0IHRhZ05hbWUgPSAndGV4dGFyZWEnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTFRleHRBcmVhRWxlbWVudFxuICovXG5jbGFzcyBIVE1MVGV4dEFyZWFFbGVtZW50IGV4dGVuZHMgVGV4dEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUgPSB0YWdOYW1lKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxuXG4gIC8qIGM4IGlnbm9yZSBzdGFydCAqL1xuICBnZXQgZGlzYWJsZWQoKSB7IHJldHVybiBib29sZWFuQXR0cmlidXRlLmdldCh0aGlzLCAnZGlzYWJsZWQnKTsgfVxuICBzZXQgZGlzYWJsZWQodmFsdWUpIHsgYm9vbGVhbkF0dHJpYnV0ZS5zZXQodGhpcywgJ2Rpc2FibGVkJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG5hbWUoKSB7IHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZSgnbmFtZScpOyB9XG4gIHNldCBuYW1lKHZhbHVlKSB7IHRoaXMuc2V0QXR0cmlidXRlKCduYW1lJywgdmFsdWUpOyB9XG5cbiAgZ2V0IHBsYWNlaG9sZGVyKCkgeyByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ3BsYWNlaG9sZGVyJyk7IH1cbiAgc2V0IHBsYWNlaG9sZGVyKHZhbHVlKSB7IHRoaXMuc2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicsIHZhbHVlKTsgfVxuXG4gIGdldCB0eXBlKCkgeyByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ3R5cGUnKTsgfVxuICBzZXQgdHlwZSh2YWx1ZSkgeyB0aGlzLnNldEF0dHJpYnV0ZSgndHlwZScsIHZhbHVlKTsgfVxuXG4gIGdldCB2YWx1ZSgpIHsgcmV0dXJuIHRoaXMudGV4dENvbnRlbnQ7IH1cbiAgc2V0IHZhbHVlKGNvbnRlbnQpIHsgdGhpcy50ZXh0Q29udGVudCA9IGNvbnRlbnQ7IH1cbiAgLyogYzggaWdub3JlIHN0b3AgKi9cbn1cblxucmVnaXN0ZXJIVE1MQ2xhc3ModGFnTmFtZSwgSFRNTFRleHRBcmVhRWxlbWVudCk7XG5cbmV4cG9ydCB7SFRNTFRleHRBcmVhRWxlbWVudH07XG4iLCJpbXBvcnQge3JlZ2lzdGVySFRNTENsYXNzfSBmcm9tICcuLi9zaGFyZWQvcmVnaXN0ZXItaHRtbC1jbGFzcy5qcyc7XG5pbXBvcnQge2Jvb2xlYW5BdHRyaWJ1dGUsIHN0cmluZ0F0dHJpYnV0ZX0gZnJvbSAnLi4vc2hhcmVkL2F0dHJpYnV0ZXMuanMnO1xuXG5pbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG5jb25zdCB0YWdOYW1lID0gJ2xpbmsnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTExpbmtFbGVtZW50XG4gKi9cbmNsYXNzIEhUTUxMaW5rRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gdGFnTmFtZSkge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cblxuICAvKiBjOCBpZ25vcmUgc3RhcnQgKi8gLy8gY29weSBwYXN0ZSBmcm9tIGltZy5zcmMsIGFscmVhZHkgY292ZXJlZFxuICBnZXQgZGlzYWJsZWQoKSB7IHJldHVybiBib29sZWFuQXR0cmlidXRlLmdldCh0aGlzLCAnZGlzYWJsZWQnKTsgfVxuICBzZXQgZGlzYWJsZWQodmFsdWUpIHsgYm9vbGVhbkF0dHJpYnV0ZS5zZXQodGhpcywgJ2Rpc2FibGVkJywgdmFsdWUpOyB9XG5cbiAgZ2V0IGhyZWYoKSB7IHJldHVybiBzdHJpbmdBdHRyaWJ1dGUuZ2V0KHRoaXMsICdocmVmJyk7IH1cbiAgc2V0IGhyZWYodmFsdWUpIHsgc3RyaW5nQXR0cmlidXRlLnNldCh0aGlzLCAnaHJlZicsIHZhbHVlKTsgfVxuXG4gIGdldCBocmVmbGFuZygpIHsgcmV0dXJuIHN0cmluZ0F0dHJpYnV0ZS5nZXQodGhpcywgJ2hyZWZsYW5nJyk7IH1cbiAgc2V0IGhyZWZsYW5nKHZhbHVlKSB7IHN0cmluZ0F0dHJpYnV0ZS5zZXQodGhpcywgJ2hyZWZsYW5nJywgdmFsdWUpOyB9XG5cbiAgZ2V0IG1lZGlhKCkgeyByZXR1cm4gc3RyaW5nQXR0cmlidXRlLmdldCh0aGlzLCAnbWVkaWEnKTsgfVxuICBzZXQgbWVkaWEodmFsdWUpIHsgc3RyaW5nQXR0cmlidXRlLnNldCh0aGlzLCAnbWVkaWEnLCB2YWx1ZSk7IH1cblxuICBnZXQgcmVsKCkgeyByZXR1cm4gc3RyaW5nQXR0cmlidXRlLmdldCh0aGlzLCAncmVsJyk7IH1cbiAgc2V0IHJlbCh2YWx1ZSkgeyBzdHJpbmdBdHRyaWJ1dGUuc2V0KHRoaXMsICdyZWwnLCB2YWx1ZSk7IH1cblxuICBnZXQgdHlwZSgpIHsgcmV0dXJuIHN0cmluZ0F0dHJpYnV0ZS5nZXQodGhpcywgJ3R5cGUnKTsgfVxuICBzZXQgdHlwZSh2YWx1ZSkgeyBzdHJpbmdBdHRyaWJ1dGUuc2V0KHRoaXMsICd0eXBlJywgdmFsdWUpOyB9XG4gIC8qIGM4IGlnbm9yZSBzdG9wICovXG5cbn1cblxucmVnaXN0ZXJIVE1MQ2xhc3ModGFnTmFtZSwgSFRNTExpbmtFbGVtZW50KTtcblxuZXhwb3J0IHtIVE1MTGlua0VsZW1lbnR9O1xuIiwiaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcbmltcG9ydCB7cmVnaXN0ZXJIVE1MQ2xhc3N9IGZyb20gJy4uL3NoYXJlZC9yZWdpc3Rlci1odG1sLWNsYXNzLmpzJztcblxuY29uc3QgdGFnTmFtZSA9ICdzbG90JztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxTbG90RWxlbWVudFxuICovXG5jbGFzcyBIVE1MU2xvdEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9IHRhZ05hbWUpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG5cbiAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gIGdldCBuYW1lKCkgeyByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ25hbWUnKTsgfVxuICBzZXQgbmFtZSh2YWx1ZSkgeyB0aGlzLnNldEF0dHJpYnV0ZSgnbmFtZScsIHZhbHVlKTsgfVxuXG4gIGFzc2lnbigpIHt9XG5cbiAgYXNzaWduZWROb2RlcyhvcHRpb25zKSB7XG4gICAgY29uc3QgaXNOYW1lZFNsb3QgPSAhIXRoaXMubmFtZTtcbiAgICBjb25zdCBob3N0Q2hpbGROb2RlcyA9IHRoaXMuZ2V0Um9vdE5vZGUoKS5ob3N0Py5jaGlsZE5vZGVzID8/IFtdO1xuICAgIGxldCBzbG90dGFibGVzO1xuXG4gICAgaWYgKGlzTmFtZWRTbG90KSB7XG4gICAgICBzbG90dGFibGVzID0gWy4uLmhvc3RDaGlsZE5vZGVzXS5maWx0ZXIobm9kZSA9PiBub2RlLnNsb3QgPT09IHRoaXMubmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsb3R0YWJsZXMgPSBbLi4uaG9zdENoaWxkTm9kZXNdLmZpbHRlcihub2RlID0+ICFub2RlLnNsb3QpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zPy5mbGF0dGVuKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBbXTtcblxuICAgICAgLy8gRWxlbWVudCBhbmQgVGV4dCBub2RlcyBhcmUgc2xvdHRhYmxlcy4gQSBzbG90IGNhbiBiZSBhIHNsb3R0YWJsZS5cbiAgICAgIGZvciAobGV0IHNsb3R0YWJsZSBvZiBzbG90dGFibGVzKSB7XG4gICAgICAgIGlmIChzbG90dGFibGUubG9jYWxOYW1lID09PSAnc2xvdCcpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCguLi5zbG90dGFibGUuYXNzaWduZWROb2Rlcyh7IGZsYXR0ZW46IHRydWUgfSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHNsb3R0YWJsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2xvdHRhYmxlcyA9IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBJZiBubyBhc3NpZ25lZCBub2RlcyBhcmUgZm91bmQsIGl0IHJldHVybnMgdGhlIHNsb3QncyBmYWxsYmFjayBjb250ZW50LlxuICAgIHJldHVybiBzbG90dGFibGVzLmxlbmd0aCA/IHNsb3R0YWJsZXMgOiBbLi4udGhpcy5jaGlsZE5vZGVzXTtcbiAgfVxuXG4gIGFzc2lnbmVkRWxlbWVudHMob3B0aW9ucykge1xuICAgIGNvbnN0IHNsb3R0YWJsZXMgPSB0aGlzLmFzc2lnbmVkTm9kZXMob3B0aW9ucykuZmlsdGVyKG4gPT4gbi5ub2RlVHlwZSA9PT0gMSk7XG5cbiAgICAvLyBJZiBubyBhc3NpZ25lZCBlbGVtZW50cyBhcmUgZm91bmQsIGl0IHJldHVybnMgdGhlIHNsb3QncyBmYWxsYmFjayBjb250ZW50LlxuICAgIHJldHVybiBzbG90dGFibGVzLmxlbmd0aCA/IHNsb3R0YWJsZXMgOiBbLi4udGhpcy5jaGlsZHJlbl07XG4gIH1cbiAgLyogYzggaWdub3JlIHN0b3AgKi9cbn1cblxucmVnaXN0ZXJIVE1MQ2xhc3ModGFnTmFtZSwgSFRNTFNsb3RFbGVtZW50KTtcblxuZXhwb3J0IHtIVE1MU2xvdEVsZW1lbnR9O1xuIiwiaW1wb3J0IHtyZWdpc3RlckhUTUxDbGFzc30gZnJvbSAnLi4vc2hhcmVkL3JlZ2lzdGVyLWh0bWwtY2xhc3MuanMnO1xuaW1wb3J0IHtudW1lcmljQXR0cmlidXRlLCBzdHJpbmdBdHRyaWJ1dGV9IGZyb20gJy4uL3NoYXJlZC9hdHRyaWJ1dGVzLmpzJztcblxuaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuY29uc3QgdGFnTmFtZSA9ICdpbWcnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTEltYWdlRWxlbWVudFxuICovXG5jbGFzcyBIVE1MSW1hZ2VFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUgPSB0YWdOYW1lKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxuXG4gIC8qIGM4IGlnbm9yZSBzdGFydCAqL1xuICBnZXQgYWx0KCkgeyByZXR1cm4gc3RyaW5nQXR0cmlidXRlLmdldCh0aGlzLCAnYWx0Jyk7IH1cbiAgc2V0IGFsdCh2YWx1ZSkgeyBzdHJpbmdBdHRyaWJ1dGUuc2V0KHRoaXMsICdhbHQnLCB2YWx1ZSk7IH1cblxuICBnZXQgc2l6ZXMoKSB7IHJldHVybiBzdHJpbmdBdHRyaWJ1dGUuZ2V0KHRoaXMsICdzaXplcycpOyB9XG4gIHNldCBzaXplcyh2YWx1ZSkgeyBzdHJpbmdBdHRyaWJ1dGUuc2V0KHRoaXMsICdzaXplcycsIHZhbHVlKTsgfVxuXG4gIGdldCBzcmMoKSB7IHJldHVybiBzdHJpbmdBdHRyaWJ1dGUuZ2V0KHRoaXMsICdzcmMnKTsgfVxuICBzZXQgc3JjKHZhbHVlKSB7IHN0cmluZ0F0dHJpYnV0ZS5zZXQodGhpcywgJ3NyYycsIHZhbHVlKTsgfVxuXG4gIGdldCBzcmNzZXQoKSB7IHJldHVybiBzdHJpbmdBdHRyaWJ1dGUuZ2V0KHRoaXMsICdzcmNzZXQnKTsgfVxuICBzZXQgc3Jjc2V0KHZhbHVlKSB7IHN0cmluZ0F0dHJpYnV0ZS5zZXQodGhpcywgJ3NyY3NldCcsIHZhbHVlKTsgfVxuXG4gIGdldCB0aXRsZSgpIHsgcmV0dXJuIHN0cmluZ0F0dHJpYnV0ZS5nZXQodGhpcywgJ3RpdGxlJyk7IH1cbiAgc2V0IHRpdGxlKHZhbHVlKSB7IHN0cmluZ0F0dHJpYnV0ZS5zZXQodGhpcywgJ3RpdGxlJywgdmFsdWUpOyB9XG5cbiAgZ2V0IHdpZHRoKCkgeyByZXR1cm4gbnVtZXJpY0F0dHJpYnV0ZS5nZXQodGhpcywgJ3dpZHRoJyk7IH1cbiAgc2V0IHdpZHRoKHZhbHVlKSB7IG51bWVyaWNBdHRyaWJ1dGUuc2V0KHRoaXMsICd3aWR0aCcsIHZhbHVlKTsgfVxuXG4gIGdldCBoZWlnaHQoKSB7IHJldHVybiBudW1lcmljQXR0cmlidXRlLmdldCh0aGlzLCAnaGVpZ2h0Jyk7IH1cbiAgc2V0IGhlaWdodCh2YWx1ZSkgeyBudW1lcmljQXR0cmlidXRlLnNldCh0aGlzLCAnaGVpZ2h0JywgdmFsdWUpOyB9XG4gIC8qIGM4IGlnbm9yZSBzdG9wICovXG59XG5cbnJlZ2lzdGVySFRNTENsYXNzKHRhZ05hbWUsIEhUTUxJbWFnZUVsZW1lbnQpO1xuXG5leHBvcnQge0hUTUxJbWFnZUVsZW1lbnR9O1xuIiwiaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcbmltcG9ydCB7cmVnaXN0ZXJIVE1MQ2xhc3N9IGZyb20gJy4uL3NoYXJlZC9yZWdpc3Rlci1odG1sLWNsYXNzLmpzJztcbmltcG9ydCB7IHN0cmluZ0F0dHJpYnV0ZSB9IGZyb20gJy4uL3NoYXJlZC9hdHRyaWJ1dGVzLmpzJztcblxuY29uc3QgdGFnTmFtZSA9ICdtZXRhJ1xuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxNZXRhRWxlbWVudFxuICovXG5leHBvcnQgY2xhc3MgSFRNTE1ldGFFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUgPXRhZ05hbWUpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG5cbiAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gIGdldCBuYW1lKCkgeyByZXR1cm4gc3RyaW5nQXR0cmlidXRlLmdldCh0aGlzLCAnbmFtZScpOyB9XG4gIHNldCBuYW1lKHZhbHVlKSB7IHN0cmluZ0F0dHJpYnV0ZS5zZXQodGhpcywgJ25hbWUnLCB2YWx1ZSk7IH1cblxuICBnZXQgaHR0cEVxdWl2KCkgeyByZXR1cm4gc3RyaW5nQXR0cmlidXRlLmdldCh0aGlzLCAnaHR0cC1lcXVpdicpOyB9XG4gIHNldCBodHRwRXF1aXYodmFsdWUpIHsgc3RyaW5nQXR0cmlidXRlLnNldCh0aGlzLCAnaHR0cC1lcXVpdicsIHZhbHVlKTsgfVxuXG4gIGdldCBjb250ZW50KCkgeyByZXR1cm4gc3RyaW5nQXR0cmlidXRlLmdldCh0aGlzLCAnY29udGVudCcpOyB9XG4gIHNldCBjb250ZW50KHZhbHVlKSB7IHN0cmluZ0F0dHJpYnV0ZS5zZXQodGhpcywgJ2NvbnRlbnQnLCB2YWx1ZSk7IH1cblxuICBnZXQgY2hhcnNldCgpIHsgcmV0dXJuIHN0cmluZ0F0dHJpYnV0ZS5nZXQodGhpcywgJ2NoYXJzZXQnKTsgfVxuICBzZXQgY2hhcnNldCh2YWx1ZSkgeyBzdHJpbmdBdHRyaWJ1dGUuc2V0KHRoaXMsICdjaGFyc2V0JywgdmFsdWUpOyB9XG5cbiAgZ2V0IG1lZGlhKCkgeyByZXR1cm4gc3RyaW5nQXR0cmlidXRlLmdldCh0aGlzLCAnbWVkaWEnKTsgfVxuICBzZXQgbWVkaWEodmFsdWUpIHsgc3RyaW5nQXR0cmlidXRlLnNldCh0aGlzLCAnbWVkaWEnLCB2YWx1ZSk7IH1cbiAgLyogYzggaWdub3JlIHN0b3AgKi9cblxufVxuXG5yZWdpc3RlckhUTUxDbGFzcyh0YWdOYW1lLCBIVE1MTWV0YUVsZW1lbnQpO1xuXG4iLCJpbXBvcnQge3JlZ2lzdGVySFRNTENsYXNzfSBmcm9tICcuLi9zaGFyZWQvcmVnaXN0ZXItaHRtbC1jbGFzcy5qcyc7XG5pbXBvcnQge3N0cmluZ0F0dHJpYnV0ZX0gZnJvbSAnLi4vc2hhcmVkL2F0dHJpYnV0ZXMuanMnO1xuXG5pbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG5jb25zdCB0YWdOYW1lID0gJ2EnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTEFuY2hvckVsZW1lbnRcbiAqL1xuY2xhc3MgSFRNTEFuY2hvckVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9IHRhZ05hbWUpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG5cbiAgLyogYzggaWdub3JlIHN0YXJ0ICovIC8vIGNvcHkgcGFzdGUgZnJvbSBpbWcuc3JjLCBhbHJlYWR5IGNvdmVyZWRcbiAgZ2V0IGhyZWYoKSB7IHJldHVybiBlbmNvZGVVUkkoZGVjb2RlVVJJKHN0cmluZ0F0dHJpYnV0ZS5nZXQodGhpcywgJ2hyZWYnKSkpOyB9XG4gIHNldCBocmVmKHZhbHVlKSB7IHN0cmluZ0F0dHJpYnV0ZS5zZXQodGhpcywgJ2hyZWYnLCBkZWNvZGVVUkkodmFsdWUpKTsgfVxuXG4gIGdldCBkb3dubG9hZCgpIHsgcmV0dXJuIGVuY29kZVVSSShkZWNvZGVVUkkoc3RyaW5nQXR0cmlidXRlLmdldCh0aGlzLCAnZG93bmxvYWQnKSkpOyB9XG4gIHNldCBkb3dubG9hZCh2YWx1ZSkgeyBzdHJpbmdBdHRyaWJ1dGUuc2V0KHRoaXMsICdkb3dubG9hZCcsIGRlY29kZVVSSSh2YWx1ZSkpOyB9XG5cbiAgZ2V0IHRhcmdldCgpIHsgcmV0dXJuIHN0cmluZ0F0dHJpYnV0ZS5nZXQodGhpcywgJ3RhcmdldCcpOyB9XG4gIHNldCB0YXJnZXQodmFsdWUpIHsgc3RyaW5nQXR0cmlidXRlLnNldCh0aGlzLCAndGFyZ2V0JywgdmFsdWUpOyB9XG5cbiAgZ2V0IHR5cGUoKSB7IHJldHVybiBzdHJpbmdBdHRyaWJ1dGUuZ2V0KHRoaXMsICd0eXBlJyk7IH1cbiAgc2V0IHR5cGUodmFsdWUpIHsgc3RyaW5nQXR0cmlidXRlLnNldCh0aGlzLCAndHlwZScsIHZhbHVlKTsgfVxuXG4gIGdldCByZWwoKSB7IHJldHVybiBzdHJpbmdBdHRyaWJ1dGUuZ2V0KHRoaXMsICdyZWwnKTsgfVxuICBzZXQgcmVsKHZhbHVlKSB7IHN0cmluZ0F0dHJpYnV0ZS5zZXQodGhpcywgJ3JlbCcsIHZhbHVlKTsgfVxuICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuXG59XG5cbnJlZ2lzdGVySFRNTENsYXNzKHRhZ05hbWUsIEhUTUxBbmNob3JFbGVtZW50KTtcblxuZXhwb3J0IHtIVE1MQW5jaG9yRWxlbWVudH07XG4iLCJpbXBvcnQge3JlZ2lzdGVySFRNTENsYXNzfSBmcm9tICcuLi9zaGFyZWQvcmVnaXN0ZXItaHRtbC1jbGFzcy5qcyc7XG5pbXBvcnQge3N0cmluZ0F0dHJpYnV0ZX0gZnJvbSAnLi4vc2hhcmVkL2F0dHJpYnV0ZXMuanMnO1xuXG5pbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG5jb25zdCB0YWdOYW1lID0gJ3NvdXJjZSc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5IVE1MU291cmNlRWxlbWVudFxuICovXG5jbGFzcyBIVE1MU291cmNlRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gdGFnTmFtZSkge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cblxuICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgZ2V0IHNyYygpIHsgcmV0dXJuIHN0cmluZ0F0dHJpYnV0ZS5nZXQodGhpcywgJ3NyYycpOyB9XG4gIHNldCBzcmModmFsdWUpIHsgc3RyaW5nQXR0cmlidXRlLnNldCh0aGlzLCAnc3JjJywgdmFsdWUpOyB9XG5cbiAgZ2V0IHNyY3NldCgpIHsgcmV0dXJuIHN0cmluZ0F0dHJpYnV0ZS5nZXQodGhpcywgJ3NyY3NldCcpOyB9XG4gIHNldCBzcmNzZXQodmFsdWUpIHsgc3RyaW5nQXR0cmlidXRlLnNldCh0aGlzLCAnc3Jjc2V0JywgdmFsdWUpOyB9XG5cbiAgZ2V0IHNpemVzKCkgeyByZXR1cm4gc3RyaW5nQXR0cmlidXRlLmdldCh0aGlzLCAnc2l6ZXMnKTsgfVxuICBzZXQgc2l6ZXModmFsdWUpIHsgc3RyaW5nQXR0cmlidXRlLnNldCh0aGlzLCAnc2l6ZXMnLCB2YWx1ZSk7IH1cblxuICBnZXQgdHlwZSgpIHsgcmV0dXJuIHN0cmluZ0F0dHJpYnV0ZS5nZXQodGhpcywgJ3R5cGUnKTsgfVxuICBzZXQgdHlwZSh2YWx1ZSkgeyBzdHJpbmdBdHRyaWJ1dGUuc2V0KHRoaXMsICd0eXBlJywgdmFsdWUpOyB9XG4gIC8qIGM4IGlnbm9yZSBzdG9wICovXG59XG5cbnJlZ2lzdGVySFRNTENsYXNzKHRhZ05hbWUsIEhUTUxTb3VyY2VFbGVtZW50KTtcblxuZXhwb3J0IHtIVE1MU291cmNlRWxlbWVudH07XG4iLCJpbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuLi9odG1sL2VsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MVGVtcGxhdGVFbGVtZW50fSBmcm9tICcuLi9odG1sL3RlbXBsYXRlLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MSHRtbEVsZW1lbnR9IGZyb20gJy4uL2h0bWwvaHRtbC1lbGVtZW50LmpzJztcbmltcG9ydCB7SFRNTFNjcmlwdEVsZW1lbnR9IGZyb20gJy4uL2h0bWwvc2NyaXB0LWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MRnJhbWVFbGVtZW50fSBmcm9tICcuLi9odG1sL2ZyYW1lLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MSUZyYW1lRWxlbWVudH0gZnJvbSAnLi4vaHRtbC9pLWZyYW1lLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MT2JqZWN0RWxlbWVudH0gZnJvbSAnLi4vaHRtbC9vYmplY3QtZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxIZWFkRWxlbWVudH0gZnJvbSAnLi4vaHRtbC9oZWFkLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MQm9keUVsZW1lbnR9IGZyb20gJy4uL2h0bWwvYm9keS1lbGVtZW50LmpzJztcbmltcG9ydCB7SFRNTFN0eWxlRWxlbWVudH0gZnJvbSAnLi4vaHRtbC9zdHlsZS1lbGVtZW50LmpzJztcbmltcG9ydCB7SFRNTFRpbWVFbGVtZW50fSBmcm9tICcuLi9odG1sL3RpbWUtZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxGaWVsZFNldEVsZW1lbnR9IGZyb20gJy4uL2h0bWwvZmllbGQtc2V0LWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MRW1iZWRFbGVtZW50fSBmcm9tICcuLi9odG1sL2VtYmVkLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MSFJFbGVtZW50fSBmcm9tICcuLi9odG1sL2hyLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MUHJvZ3Jlc3NFbGVtZW50fSBmcm9tICcuLi9odG1sL3Byb2dyZXNzLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MUGFyYWdyYXBoRWxlbWVudH0gZnJvbSAnLi4vaHRtbC9wYXJhZ3JhcGgtZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxUYWJsZUVsZW1lbnR9IGZyb20gJy4uL2h0bWwvdGFibGUtZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxGcmFtZVNldEVsZW1lbnR9IGZyb20gJy4uL2h0bWwvZnJhbWUtc2V0LWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MTElFbGVtZW50fSBmcm9tICcuLi9odG1sL2xpLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MQmFzZUVsZW1lbnR9IGZyb20gJy4uL2h0bWwvYmFzZS1lbGVtZW50LmpzJztcbmltcG9ydCB7SFRNTERhdGFMaXN0RWxlbWVudH0gZnJvbSAnLi4vaHRtbC9kYXRhLWxpc3QtZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxJbnB1dEVsZW1lbnR9IGZyb20gJy4uL2h0bWwvaW5wdXQtZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxQYXJhbUVsZW1lbnR9IGZyb20gJy4uL2h0bWwvcGFyYW0tZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxNZWRpYUVsZW1lbnR9IGZyb20gJy4uL2h0bWwvbWVkaWEtZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxBdWRpb0VsZW1lbnR9IGZyb20gJy4uL2h0bWwvYXVkaW8tZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxIZWFkaW5nRWxlbWVudH0gZnJvbSAnLi4vaHRtbC9oZWFkaW5nLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MRGlyZWN0b3J5RWxlbWVudH0gZnJvbSAnLi4vaHRtbC9kaXJlY3RvcnktZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxRdW90ZUVsZW1lbnR9IGZyb20gJy4uL2h0bWwvcXVvdGUtZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxDYW52YXNFbGVtZW50fSBmcm9tICcuLi9odG1sL2NhbnZhcy1lbGVtZW50LmpzJztcbmltcG9ydCB7SFRNTExlZ2VuZEVsZW1lbnR9IGZyb20gJy4uL2h0bWwvbGVnZW5kLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MT3B0aW9uRWxlbWVudH0gZnJvbSAnLi4vaHRtbC9vcHRpb24tZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxTcGFuRWxlbWVudH0gZnJvbSAnLi4vaHRtbC9zcGFuLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MTWV0ZXJFbGVtZW50fSBmcm9tICcuLi9odG1sL21ldGVyLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MVmlkZW9FbGVtZW50fSBmcm9tICcuLi9odG1sL3ZpZGVvLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MVGFibGVDZWxsRWxlbWVudH0gZnJvbSAnLi4vaHRtbC90YWJsZS1jZWxsLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MVGl0bGVFbGVtZW50fSBmcm9tICcuLi9odG1sL3RpdGxlLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MT3V0cHV0RWxlbWVudH0gZnJvbSAnLi4vaHRtbC9vdXRwdXQtZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxUYWJsZVJvd0VsZW1lbnR9IGZyb20gJy4uL2h0bWwvdGFibGUtcm93LWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MRGF0YUVsZW1lbnR9IGZyb20gJy4uL2h0bWwvZGF0YS1lbGVtZW50LmpzJztcbmltcG9ydCB7SFRNTE1lbnVFbGVtZW50fSBmcm9tICcuLi9odG1sL21lbnUtZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxTZWxlY3RFbGVtZW50fSBmcm9tICcuLi9odG1sL3NlbGVjdC1lbGVtZW50LmpzJztcbmltcG9ydCB7SFRNTEJSRWxlbWVudH0gZnJvbSAnLi4vaHRtbC9ici1lbGVtZW50LmpzJztcbmltcG9ydCB7SFRNTEJ1dHRvbkVsZW1lbnR9IGZyb20gJy4uL2h0bWwvYnV0dG9uLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MTWFwRWxlbWVudH0gZnJvbSAnLi4vaHRtbC9tYXAtZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxPcHRHcm91cEVsZW1lbnR9IGZyb20gJy4uL2h0bWwvb3B0LWdyb3VwLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MRExpc3RFbGVtZW50fSBmcm9tICcuLi9odG1sL2QtbGlzdC1lbGVtZW50LmpzJztcbmltcG9ydCB7SFRNTFRleHRBcmVhRWxlbWVudH0gZnJvbSAnLi4vaHRtbC90ZXh0LWFyZWEtZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxGb250RWxlbWVudH0gZnJvbSAnLi4vaHRtbC9mb250LWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MRGl2RWxlbWVudH0gZnJvbSAnLi4vaHRtbC9kaXYtZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxMaW5rRWxlbWVudH0gZnJvbSAnLi4vaHRtbC9saW5rLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MU2xvdEVsZW1lbnR9IGZyb20gJy4uL2h0bWwvc2xvdC1lbGVtZW50LmpzJztcbmltcG9ydCB7SFRNTEZvcm1FbGVtZW50fSBmcm9tICcuLi9odG1sL2Zvcm0tZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxJbWFnZUVsZW1lbnR9IGZyb20gJy4uL2h0bWwvaW1hZ2UtZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxQcmVFbGVtZW50fSBmcm9tICcuLi9odG1sL3ByZS1lbGVtZW50LmpzJztcbmltcG9ydCB7SFRNTFVMaXN0RWxlbWVudH0gZnJvbSAnLi4vaHRtbC91LWxpc3QtZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxNZXRhRWxlbWVudH0gZnJvbSAnLi4vaHRtbC9tZXRhLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MUGljdHVyZUVsZW1lbnR9IGZyb20gJy4uL2h0bWwvcGljdHVyZS1lbGVtZW50LmpzJztcbmltcG9ydCB7SFRNTEFyZWFFbGVtZW50fSBmcm9tICcuLi9odG1sL2FyZWEtZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxPTGlzdEVsZW1lbnR9IGZyb20gJy4uL2h0bWwvby1saXN0LWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MVGFibGVDYXB0aW9uRWxlbWVudH0gZnJvbSAnLi4vaHRtbC90YWJsZS1jYXB0aW9uLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MQW5jaG9yRWxlbWVudH0gZnJvbSAnLi4vaHRtbC9hbmNob3ItZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxMYWJlbEVsZW1lbnR9IGZyb20gJy4uL2h0bWwvbGFiZWwtZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxVbmtub3duRWxlbWVudH0gZnJvbSAnLi4vaHRtbC91bmtub3duLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MTW9kRWxlbWVudH0gZnJvbSAnLi4vaHRtbC9tb2QtZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxEZXRhaWxzRWxlbWVudH0gZnJvbSAnLi4vaHRtbC9kZXRhaWxzLWVsZW1lbnQuanMnO1xuaW1wb3J0IHtIVE1MU291cmNlRWxlbWVudH0gZnJvbSAnLi4vaHRtbC9zb3VyY2UtZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxUcmFja0VsZW1lbnR9IGZyb20gJy4uL2h0bWwvdHJhY2stZWxlbWVudC5qcyc7XG5pbXBvcnQge0hUTUxNYXJxdWVlRWxlbWVudH0gZnJvbSAnLi4vaHRtbC9tYXJxdWVlLWVsZW1lbnQuanMnO1xuXG5leHBvcnQge1xuICBIVE1MRWxlbWVudCxcbiAgSFRNTFRlbXBsYXRlRWxlbWVudCxcbiAgSFRNTEh0bWxFbGVtZW50LFxuICBIVE1MU2NyaXB0RWxlbWVudCxcbiAgSFRNTEZyYW1lRWxlbWVudCxcbiAgSFRNTElGcmFtZUVsZW1lbnQsXG4gIEhUTUxPYmplY3RFbGVtZW50LFxuICBIVE1MSGVhZEVsZW1lbnQsXG4gIEhUTUxCb2R5RWxlbWVudCxcbiAgSFRNTFN0eWxlRWxlbWVudCxcbiAgSFRNTFRpbWVFbGVtZW50LFxuICBIVE1MRmllbGRTZXRFbGVtZW50LFxuICBIVE1MRW1iZWRFbGVtZW50LFxuICBIVE1MSFJFbGVtZW50LFxuICBIVE1MUHJvZ3Jlc3NFbGVtZW50LFxuICBIVE1MUGFyYWdyYXBoRWxlbWVudCxcbiAgSFRNTFRhYmxlRWxlbWVudCxcbiAgSFRNTEZyYW1lU2V0RWxlbWVudCxcbiAgSFRNTExJRWxlbWVudCxcbiAgSFRNTEJhc2VFbGVtZW50LFxuICBIVE1MRGF0YUxpc3RFbGVtZW50LFxuICBIVE1MSW5wdXRFbGVtZW50LFxuICBIVE1MUGFyYW1FbGVtZW50LFxuICBIVE1MTWVkaWFFbGVtZW50LFxuICBIVE1MQXVkaW9FbGVtZW50LFxuICBIVE1MSGVhZGluZ0VsZW1lbnQsXG4gIEhUTUxEaXJlY3RvcnlFbGVtZW50LFxuICBIVE1MUXVvdGVFbGVtZW50LFxuICBIVE1MQ2FudmFzRWxlbWVudCxcbiAgSFRNTExlZ2VuZEVsZW1lbnQsXG4gIEhUTUxPcHRpb25FbGVtZW50LFxuICBIVE1MU3BhbkVsZW1lbnQsXG4gIEhUTUxNZXRlckVsZW1lbnQsXG4gIEhUTUxWaWRlb0VsZW1lbnQsXG4gIEhUTUxUYWJsZUNlbGxFbGVtZW50LFxuICBIVE1MVGl0bGVFbGVtZW50LFxuICBIVE1MT3V0cHV0RWxlbWVudCxcbiAgSFRNTFRhYmxlUm93RWxlbWVudCxcbiAgSFRNTERhdGFFbGVtZW50LFxuICBIVE1MTWVudUVsZW1lbnQsXG4gIEhUTUxTZWxlY3RFbGVtZW50LFxuICBIVE1MQlJFbGVtZW50LFxuICBIVE1MQnV0dG9uRWxlbWVudCxcbiAgSFRNTE1hcEVsZW1lbnQsXG4gIEhUTUxPcHRHcm91cEVsZW1lbnQsXG4gIEhUTUxETGlzdEVsZW1lbnQsXG4gIEhUTUxUZXh0QXJlYUVsZW1lbnQsXG4gIEhUTUxGb250RWxlbWVudCxcbiAgSFRNTERpdkVsZW1lbnQsXG4gIEhUTUxMaW5rRWxlbWVudCxcbiAgSFRNTFNsb3RFbGVtZW50LFxuICBIVE1MRm9ybUVsZW1lbnQsXG4gIEhUTUxJbWFnZUVsZW1lbnQsXG4gIEhUTUxQcmVFbGVtZW50LFxuICBIVE1MVUxpc3RFbGVtZW50LFxuICBIVE1MTWV0YUVsZW1lbnQsXG4gIEhUTUxQaWN0dXJlRWxlbWVudCxcbiAgSFRNTEFyZWFFbGVtZW50LFxuICBIVE1MT0xpc3RFbGVtZW50LFxuICBIVE1MVGFibGVDYXB0aW9uRWxlbWVudCxcbiAgSFRNTEFuY2hvckVsZW1lbnQsXG4gIEhUTUxMYWJlbEVsZW1lbnQsXG4gIEhUTUxVbmtub3duRWxlbWVudCxcbiAgSFRNTE1vZEVsZW1lbnQsXG4gIEhUTUxEZXRhaWxzRWxlbWVudCxcbiAgSFRNTFNvdXJjZUVsZW1lbnQsXG4gIEhUTUxUcmFja0VsZW1lbnQsXG4gIEhUTUxNYXJxdWVlRWxlbWVudFxufTtcblxuZXhwb3J0IGNvbnN0IEhUTUxDbGFzc2VzID0ge1xuICBIVE1MRWxlbWVudCxcbiAgSFRNTFRlbXBsYXRlRWxlbWVudCxcbiAgSFRNTEh0bWxFbGVtZW50LFxuICBIVE1MU2NyaXB0RWxlbWVudCxcbiAgSFRNTEZyYW1lRWxlbWVudCxcbiAgSFRNTElGcmFtZUVsZW1lbnQsXG4gIEhUTUxPYmplY3RFbGVtZW50LFxuICBIVE1MSGVhZEVsZW1lbnQsXG4gIEhUTUxCb2R5RWxlbWVudCxcbiAgSFRNTFN0eWxlRWxlbWVudCxcbiAgSFRNTFRpbWVFbGVtZW50LFxuICBIVE1MRmllbGRTZXRFbGVtZW50LFxuICBIVE1MRW1iZWRFbGVtZW50LFxuICBIVE1MSFJFbGVtZW50LFxuICBIVE1MUHJvZ3Jlc3NFbGVtZW50LFxuICBIVE1MUGFyYWdyYXBoRWxlbWVudCxcbiAgSFRNTFRhYmxlRWxlbWVudCxcbiAgSFRNTEZyYW1lU2V0RWxlbWVudCxcbiAgSFRNTExJRWxlbWVudCxcbiAgSFRNTEJhc2VFbGVtZW50LFxuICBIVE1MRGF0YUxpc3RFbGVtZW50LFxuICBIVE1MSW5wdXRFbGVtZW50LFxuICBIVE1MUGFyYW1FbGVtZW50LFxuICBIVE1MTWVkaWFFbGVtZW50LFxuICBIVE1MQXVkaW9FbGVtZW50LFxuICBIVE1MSGVhZGluZ0VsZW1lbnQsXG4gIEhUTUxEaXJlY3RvcnlFbGVtZW50LFxuICBIVE1MUXVvdGVFbGVtZW50LFxuICBIVE1MQ2FudmFzRWxlbWVudCxcbiAgSFRNTExlZ2VuZEVsZW1lbnQsXG4gIEhUTUxPcHRpb25FbGVtZW50LFxuICBIVE1MU3BhbkVsZW1lbnQsXG4gIEhUTUxNZXRlckVsZW1lbnQsXG4gIEhUTUxWaWRlb0VsZW1lbnQsXG4gIEhUTUxUYWJsZUNlbGxFbGVtZW50LFxuICBIVE1MVGl0bGVFbGVtZW50LFxuICBIVE1MT3V0cHV0RWxlbWVudCxcbiAgSFRNTFRhYmxlUm93RWxlbWVudCxcbiAgSFRNTERhdGFFbGVtZW50LFxuICBIVE1MTWVudUVsZW1lbnQsXG4gIEhUTUxTZWxlY3RFbGVtZW50LFxuICBIVE1MQlJFbGVtZW50LFxuICBIVE1MQnV0dG9uRWxlbWVudCxcbiAgSFRNTE1hcEVsZW1lbnQsXG4gIEhUTUxPcHRHcm91cEVsZW1lbnQsXG4gIEhUTUxETGlzdEVsZW1lbnQsXG4gIEhUTUxUZXh0QXJlYUVsZW1lbnQsXG4gIEhUTUxGb250RWxlbWVudCxcbiAgSFRNTERpdkVsZW1lbnQsXG4gIEhUTUxMaW5rRWxlbWVudCxcbiAgSFRNTFNsb3RFbGVtZW50LFxuICBIVE1MRm9ybUVsZW1lbnQsXG4gIEhUTUxJbWFnZUVsZW1lbnQsXG4gIEhUTUxQcmVFbGVtZW50LFxuICBIVE1MVUxpc3RFbGVtZW50LFxuICBIVE1MTWV0YUVsZW1lbnQsXG4gIEhUTUxQaWN0dXJlRWxlbWVudCxcbiAgSFRNTEFyZWFFbGVtZW50LFxuICBIVE1MT0xpc3RFbGVtZW50LFxuICBIVE1MVGFibGVDYXB0aW9uRWxlbWVudCxcbiAgSFRNTEFuY2hvckVsZW1lbnQsXG4gIEhUTUxMYWJlbEVsZW1lbnQsXG4gIEhUTUxVbmtub3duRWxlbWVudCxcbiAgSFRNTE1vZEVsZW1lbnQsXG4gIEhUTUxEZXRhaWxzRWxlbWVudCxcbiAgSFRNTFNvdXJjZUVsZW1lbnQsXG4gIEhUTUxUcmFja0VsZW1lbnQsXG4gIEhUTUxNYXJxdWVlRWxlbWVudFxufTtcbiIsImltcG9ydCB7SFRNTEVsZW1lbnR9IGZyb20gJy4vZWxlbWVudC5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5IVE1MSHRtbEVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxIdG1sRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gJ2h0bWwnKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxGcmFtZUVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxGcmFtZUVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9ICdmcmFtZScpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG59XG4iLCJpbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTE9iamVjdEVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxPYmplY3RFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUgPSAnb2JqZWN0Jykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7SFRNTEVsZW1lbnR9IGZyb20gJy4vZWxlbWVudC5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5IVE1MSGVhZEVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxIZWFkRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gJ2hlYWQnKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxCb2R5RWxlbWVudFxuICovXG5leHBvcnQgY2xhc3MgSFRNTEJvZHlFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUgPSAnYm9keScpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG59XG4iLCJpbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTEZpZWxkU2V0RWxlbWVudFxuICovXG5leHBvcnQgY2xhc3MgSFRNTEZpZWxkU2V0RWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gJ2ZpZWxkc2V0Jykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7SFRNTEVsZW1lbnR9IGZyb20gJy4vZWxlbWVudC5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5IVE1MRW1iZWRFbGVtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBIVE1MRW1iZWRFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUgPSAnZW1iZWQnKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxIUkVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxIUkVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9ICdocicpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG59XG4iLCJpbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTFByb2dyZXNzRWxlbWVudFxuICovXG5leHBvcnQgY2xhc3MgSFRNTFByb2dyZXNzRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gJ3Byb2dyZXNzJykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7SFRNTEVsZW1lbnR9IGZyb20gJy4vZWxlbWVudC5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5IVE1MUGFyYWdyYXBoRWxlbWVudFxuICovXG5leHBvcnQgY2xhc3MgSFRNTFBhcmFncmFwaEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9ICdwJykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7SFRNTEVsZW1lbnR9IGZyb20gJy4vZWxlbWVudC5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5IVE1MVGFibGVFbGVtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBIVE1MVGFibGVFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUgPSAndGFibGUnKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxGcmFtZVNldEVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxGcmFtZVNldEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9ICdmcmFtZXNldCcpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG59XG4iLCJpbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTExJRWxlbWVudFxuICovXG5leHBvcnQgY2xhc3MgSFRNTExJRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gJ2xpJykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7SFRNTEVsZW1lbnR9IGZyb20gJy4vZWxlbWVudC5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5IVE1MQmFzZUVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxCYXNlRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gJ2Jhc2UnKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxEYXRhTGlzdEVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxEYXRhTGlzdEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9ICdkYXRhbGlzdCcpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG59XG4iLCJpbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTFBhcmFtRWxlbWVudFxuICovXG5leHBvcnQgY2xhc3MgSFRNTFBhcmFtRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gJ3BhcmFtJykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7SFRNTEVsZW1lbnR9IGZyb20gJy4vZWxlbWVudC5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5IVE1MTWVkaWFFbGVtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBIVE1MTWVkaWFFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUgPSAnbWVkaWEnKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxBdWRpb0VsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxBdWRpb0VsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9ICdhdWRpbycpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG59XG4iLCJpbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTERpcmVjdG9yeUVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxEaXJlY3RvcnlFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUgPSAnZGlyJykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7SFRNTEVsZW1lbnR9IGZyb20gJy4vZWxlbWVudC5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5IVE1MUXVvdGVFbGVtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBIVE1MUXVvdGVFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUgPSAncXVvdGUnKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxMZWdlbmRFbGVtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBIVE1MTGVnZW5kRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gJ2xlZ2VuZCcpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG59XG4iLCJpbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTFNwYW5FbGVtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBIVE1MU3BhbkVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9ICdzcGFuJykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7SFRNTEVsZW1lbnR9IGZyb20gJy4vZWxlbWVudC5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5IVE1MTWV0ZXJFbGVtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBIVE1MTWV0ZXJFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUgPSAnbWV0ZXInKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxWaWRlb0VsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxWaWRlb0VsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9ICd2aWRlbycpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG59XG4iLCJpbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTFRhYmxlQ2VsbEVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxUYWJsZUNlbGxFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUgPSAndGQnKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxPdXRwdXRFbGVtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBIVE1MT3V0cHV0RWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gJ291dHB1dCcpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG59XG4iLCJpbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTFRhYmxlUm93RWxlbWVudFxuICovXG5leHBvcnQgY2xhc3MgSFRNTFRhYmxlUm93RWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gJ3RyJykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7SFRNTEVsZW1lbnR9IGZyb20gJy4vZWxlbWVudC5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5IVE1MRGF0YUVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxEYXRhRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gJ2RhdGEnKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxNZW51RWxlbWVudFxuICovXG5leHBvcnQgY2xhc3MgSFRNTE1lbnVFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUgPSAnbWVudScpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG59XG4iLCJpbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTEJSRWxlbWVudFxuICovXG5leHBvcnQgY2xhc3MgSFRNTEJSRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gJ2JyJykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7SFRNTEVsZW1lbnR9IGZyb20gJy4vZWxlbWVudC5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5IVE1MTWFwRWxlbWVudFxuICovXG5leHBvcnQgY2xhc3MgSFRNTE1hcEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9ICdtYXAnKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxPcHRHcm91cEVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxPcHRHcm91cEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9ICdvcHRncm91cCcpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG59XG4iLCJpbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTERMaXN0RWxlbWVudFxuICovXG5leHBvcnQgY2xhc3MgSFRNTERMaXN0RWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gJ2RsJykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7SFRNTEVsZW1lbnR9IGZyb20gJy4vZWxlbWVudC5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5IVE1MRm9udEVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxGb250RWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gJ2ZvbnQnKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxEaXZFbGVtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBIVE1MRGl2RWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gJ2RpdicpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG59XG4iLCJpbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTEZvcm1FbGVtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBIVE1MRm9ybUVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9ICdmb3JtJykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7SFRNTEVsZW1lbnR9IGZyb20gJy4vZWxlbWVudC5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5IVE1MUHJlRWxlbWVudFxuICovXG5leHBvcnQgY2xhc3MgSFRNTFByZUVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9ICdwcmUnKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxVTGlzdEVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxVTGlzdEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9ICd1bCcpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG59XG4iLCJpbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTFBpY3R1cmVFbGVtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBIVE1MUGljdHVyZUVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9ICdwaWN0dXJlJykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7SFRNTEVsZW1lbnR9IGZyb20gJy4vZWxlbWVudC5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5IVE1MQXJlYUVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxBcmVhRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gJ2FyZWEnKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxPTGlzdEVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxPTGlzdEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9ICdvbCcpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG59XG4iLCJpbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTFRhYmxlQ2FwdGlvbkVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxUYWJsZUNhcHRpb25FbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUgPSAnY2FwdGlvbicpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG59XG4iLCJpbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTExhYmVsRWxlbWVudFxuICovXG5leHBvcnQgY2xhc3MgSFRNTExhYmVsRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gJ2xhYmVsJykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7SFRNTEVsZW1lbnR9IGZyb20gJy4vZWxlbWVudC5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5IVE1MVW5rbm93bkVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxVbmtub3duRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gJ3Vua25vd24nKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxNb2RFbGVtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBIVE1MTW9kRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lID0gJ21vZCcpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG59XG4iLCJpbXBvcnQge0hUTUxFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQuanMnO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTERldGFpbHNFbGVtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBIVE1MRGV0YWlsc0VsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSA9ICdkZXRhaWxzJykge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7SFRNTEVsZW1lbnR9IGZyb20gJy4vZWxlbWVudC5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5IVE1MVHJhY2tFbGVtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBIVE1MVHJhY2tFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUgPSAndHJhY2snKSB7XG4gICAgc3VwZXIob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtIVE1MRWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkhUTUxNYXJxdWVlRWxlbWVudFxuICovXG5leHBvcnQgY2xhc3MgSFRNTE1hcnF1ZWVFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUgPSAnbWFycXVlZScpIHtcbiAgICBzdXBlcihvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xuICB9XG59XG4iLCIvLyBUT0RPOiBlbnN1cmUgYWxsIHRoZXNlIGFyZSB0ZXh0IG9ubHlcbi8vIC9eKD86cGxhaW50ZXh0fHNjcmlwdHxzdHlsZXx0ZXh0YXJlYXx0aXRsZXx4bXApJC9pXG5cbmNvbnN0IHZvaWRFbGVtZW50cyA9IHt0ZXN0OiAoKSA9PiB0cnVlfTtcbmV4cG9ydCBjb25zdCBNaW1lID0ge1xuICAndGV4dC9odG1sJzoge1xuICAgIGRvY1R5cGU6ICc8IURPQ1RZUEUgaHRtbD4nLFxuICAgIGlnbm9yZUNhc2U6IHRydWUsXG4gICAgdm9pZEVsZW1lbnRzOiAvXig/OmFyZWF8YmFzZXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGtleWdlbnxsaW5rfG1lbnVpdGVtfG1ldGF8cGFyYW18c291cmNlfHRyYWNrfHdicikkL2lcbiAgfSxcbiAgJ2ltYWdlL3N2Zyt4bWwnOiB7XG4gICAgZG9jVHlwZTogJzw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cInV0Zi04XCI/PicsXG4gICAgaWdub3JlQ2FzZTogZmFsc2UsXG4gICAgdm9pZEVsZW1lbnRzXG4gIH0sXG4gICd0ZXh0L3htbCc6IHtcbiAgICBkb2NUeXBlOiAnPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwidXRmLThcIj8+JyxcbiAgICBpZ25vcmVDYXNlOiBmYWxzZSxcbiAgICB2b2lkRWxlbWVudHNcbiAgfSxcbiAgJ2FwcGxpY2F0aW9uL3htbCc6IHtcbiAgICBkb2NUeXBlOiAnPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwidXRmLThcIj8+JyxcbiAgICBpZ25vcmVDYXNlOiBmYWxzZSxcbiAgICB2b2lkRWxlbWVudHNcbiAgfSxcbiAgJ2FwcGxpY2F0aW9uL3hodG1sK3htbCc6IHtcbiAgICBkb2NUeXBlOiAnPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwidXRmLThcIj8+JyxcbiAgICBpZ25vcmVDYXNlOiBmYWxzZSxcbiAgICB2b2lkRWxlbWVudHNcbiAgfVxufTtcbiIsIi8vIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jaW50ZXJmYWNlLWN1c3RvbWV2ZW50XG5cbi8qIGM4IGlnbm9yZSBzdGFydCAqL1xuXG4vLyBPbmUgZGF5IE5vZGUgbWlnaHQgaGF2ZSBDdXN0b21FdmVudCB0b29cblxuaW1wb3J0IHtFdmVudH0gZnJvbSAnLi9ldmVudC5qcyc7XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5DdXN0b21FdmVudFxuICovXG5leHBvcnQgY2xhc3MgQ3VzdG9tRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gIGNvbnN0cnVjdG9yKHR5cGUsIGV2ZW50SW5pdERpY3QgPSB7fSkge1xuICAgIHN1cGVyKHR5cGUsIGV2ZW50SW5pdERpY3QpO1xuICAgIHRoaXMuZGV0YWlsID0gZXZlbnRJbml0RGljdC5kZXRhaWw7XG4gIH1cbn1cblxuLyogYzggaWdub3JlIHN0b3AgKi9cbiIsImltcG9ydCB7SFRNTEltYWdlRWxlbWVudH0gZnJvbSAnLi4vaHRtbC9pbWFnZS1lbGVtZW50LmpzJztcblxuZXhwb3J0IGNvbnN0IEltYWdlQ2xhc3MgPSBvd25lckRvY3VtZW50ID0+XG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSW1hZ2VcbiAqL1xuY2xhc3MgSW1hZ2UgZXh0ZW5kcyBIVE1MSW1hZ2VFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCkge1xuICAgIHN1cGVyKG93bmVyRG9jdW1lbnQpO1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICB0aGlzLmhlaWdodCA9IHdpZHRoO1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbn07XG4iLCIvLyBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtbGl2ZS1yYW5nZVxuXG5pbXBvcnQge0VORCwgTkVYVCwgUFJFViwgU1RBUlR9IGZyb20gJy4uL3NoYXJlZC9zeW1ib2xzLmpzJztcblxuaW1wb3J0IHtTVkdFbGVtZW50fSBmcm9tICcuLi9zdmcvZWxlbWVudC5qcyc7XG5cbmltcG9ydCB7Z2V0RW5kLCBzZXRBZGphY2VudH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLmpzJztcblxuY29uc3QgZGVsZXRlQ29udGVudHMgPSAoe1tTVEFSVF06IHN0YXJ0LCBbRU5EXTogZW5kfSwgZnJhZ21lbnQgPSBudWxsKSA9PiB7XG4gIHNldEFkamFjZW50KHN0YXJ0W1BSRVZdLCBlbmRbTkVYVF0pO1xuICBkbyB7XG4gICAgY29uc3QgYWZ0ZXIgPSBnZXRFbmQoc3RhcnQpO1xuICAgIGNvbnN0IG5leHQgPSBhZnRlciA9PT0gZW5kID8gYWZ0ZXIgOiBhZnRlcltORVhUXTtcbiAgICBpZiAoZnJhZ21lbnQpXG4gICAgICBmcmFnbWVudC5pbnNlcnRCZWZvcmUoc3RhcnQsIGZyYWdtZW50W0VORF0pO1xuICAgIGVsc2VcbiAgICAgIHN0YXJ0LnJlbW92ZSgpO1xuICAgIHN0YXJ0ID0gbmV4dDtcbiAgfSB3aGlsZSAoc3RhcnQgIT09IGVuZCk7XG59O1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuUmFuZ2VcbiAqL1xuZXhwb3J0IGNsYXNzIFJhbmdlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpc1tTVEFSVF0gPSBudWxsO1xuICAgIHRoaXNbRU5EXSA9IG51bGw7XG4gICAgdGhpcy5jb21tb25BbmNlc3RvckNvbnRhaW5lciA9IG51bGw7XG4gIH1cblxuICAvKiBUT0RPOiB0aGlzIGlzIG1vcmUgY29tcGxpY2F0ZWQgdGhhbiBpdCBsb29rc1xuICBzZXRTdGFydChub2RlLCBvZmZzZXQpIHtcbiAgICB0aGlzW1NUQVJUXSA9IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXRdO1xuICB9XG5cbiAgc2V0RW5kKG5vZGUsIG9mZnNldCkge1xuICAgIHRoaXNbRU5EXSA9IGdldEVuZChub2RlLmNoaWxkTm9kZXNbb2Zmc2V0XSk7XG4gIH1cbiAgLy8qL1xuXG4gIGluc2VydE5vZGUobmV3Tm9kZSkge1xuICAgIHRoaXNbRU5EXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCB0aGlzW1NUQVJUXSk7XG4gIH1cblxuICBzZWxlY3ROb2RlKG5vZGUpIHtcbiAgICB0aGlzW1NUQVJUXSA9IG5vZGU7XG4gICAgdGhpc1tFTkRdID0gZ2V0RW5kKG5vZGUpO1xuICB9XG5cbiAgLy8gVE9ETzogU1ZHIGVsZW1lbnRzIHNob3VsZCB0aGVuIGNyZWF0ZSBjb250ZXh0dWFsIGZyYWdtZW50c1xuICAvLyAgICAgICB0aGF0IHJldHVybiBTVkcgbm9kZXNcbiAgc2VsZWN0Tm9kZUNvbnRlbnRzKG5vZGUpIHtcbiAgICB0aGlzLnNlbGVjdE5vZGUobm9kZSk7XG4gICAgdGhpcy5jb21tb25BbmNlc3RvckNvbnRhaW5lciA9IG5vZGU7XG4gIH1cblxuICBzdXJyb3VuZENvbnRlbnRzKHBhcmVudE5vZGUpIHtcbiAgICBwYXJlbnROb2RlLnJlcGxhY2VDaGlsZHJlbih0aGlzLmV4dHJhY3RDb250ZW50cygpKTtcbiAgfVxuXG4gIHNldFN0YXJ0QmVmb3JlKG5vZGUpIHtcbiAgICB0aGlzW1NUQVJUXSA9IG5vZGU7XG4gIH1cblxuICBzZXRTdGFydEFmdGVyKG5vZGUpIHtcbiAgICB0aGlzW1NUQVJUXSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gIH1cblxuICBzZXRFbmRCZWZvcmUobm9kZSkge1xuICAgIHRoaXNbRU5EXSA9IGdldEVuZChub2RlLnByZXZpb3VzU2libGluZyk7XG4gIH1cblxuICBzZXRFbmRBZnRlcihub2RlKSB7XG4gICAgdGhpc1tFTkRdID0gZ2V0RW5kKG5vZGUpO1xuICB9XG5cbiAgY2xvbmVDb250ZW50cygpIHtcbiAgICBsZXQge1tTVEFSVF06IHN0YXJ0LCBbRU5EXTogZW5kfSA9IHRoaXM7XG4gICAgY29uc3QgZnJhZ21lbnQgPSBzdGFydC5vd25lckRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICB3aGlsZSAoc3RhcnQgIT09IGVuZCkge1xuICAgICAgZnJhZ21lbnQuaW5zZXJ0QmVmb3JlKHN0YXJ0LmNsb25lTm9kZSh0cnVlKSwgZnJhZ21lbnRbRU5EXSk7XG4gICAgICBzdGFydCA9IGdldEVuZChzdGFydCk7XG4gICAgICBpZiAoc3RhcnQgIT09IGVuZClcbiAgICAgICAgc3RhcnQgPSBzdGFydFtORVhUXTtcbiAgICB9XG4gICAgcmV0dXJuIGZyYWdtZW50O1xuICB9XG5cbiAgZGVsZXRlQ29udGVudHMoKSB7XG4gICAgZGVsZXRlQ29udGVudHModGhpcyk7XG4gIH1cblxuICBleHRyYWN0Q29udGVudHMoKSB7XG4gICAgY29uc3QgZnJhZ21lbnQgPSB0aGlzW1NUQVJUXS5vd25lckRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICBkZWxldGVDb250ZW50cyh0aGlzLCBmcmFnbWVudCk7XG4gICAgcmV0dXJuIGZyYWdtZW50O1xuICB9XG5cbiAgY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KGh0bWwpIHtcbiAgICBjb25zdCB7IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyOiBkb2MgfSA9IHRoaXM7XG4gICAgY29uc3QgaXNTVkcgPSAnb3duZXJTVkdFbGVtZW50JyBpbiBkb2M7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBpc1NWRyA/IGRvYy5vd25lckRvY3VtZW50IDogZG9jO1xuICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sO1xuICAgIGxldCB7Y29udGVudH0gPSB0ZW1wbGF0ZTtcbiAgICBpZiAoaXNTVkcpIHtcbiAgICAgIGNvbnN0IGNoaWxkTm9kZXMgPSBbLi4uY29udGVudC5jaGlsZE5vZGVzXTtcbiAgICAgIGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoY29udGVudCwgU1ZHRWxlbWVudC5wcm90b3R5cGUpO1xuICAgICAgY29udGVudC5vd25lclNWR0VsZW1lbnQgPSBkb2N1bWVudDtcbiAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGROb2Rlcykge1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoY2hpbGQsIFNWR0VsZW1lbnQucHJvdG90eXBlKTtcbiAgICAgICAgY2hpbGQub3duZXJTVkdFbGVtZW50ID0gZG9jdW1lbnQ7XG4gICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlXG4gICAgICB0aGlzLnNlbGVjdE5vZGUoY29udGVudCk7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBjbG9uZVJhbmdlKCkge1xuICAgIGNvbnN0IHJhbmdlID0gbmV3IFJhbmdlO1xuICAgIHJhbmdlW1NUQVJUXSA9IHRoaXNbU1RBUlRdO1xuICAgIHJhbmdlW0VORF0gPSB0aGlzW0VORF07XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9XG59XG4iLCJpbXBvcnQge1xuICBET0NVTUVOVF9OT0RFLFxuICBFTEVNRU5UX05PREUsXG4gIFRFWFRfTk9ERSxcbiAgQ0RBVEFfU0VDVElPTl9OT0RFLFxuICBDT01NRU5UX05PREUsXG4gIFNIT1dfQUxMLFxuICBTSE9XX0VMRU1FTlQsXG4gIFNIT1dfQ0RBVEFfU0VDVElPTixcbiAgU0hPV19DT01NRU5ULFxuICBTSE9XX1RFWFRcbn0gZnJvbSAnLi4vc2hhcmVkL2NvbnN0YW50cy5qcyc7XG5cbmltcG9ydCB7UFJJVkFURSwgRU5ELCBORVhUfSBmcm9tICcuLi9zaGFyZWQvc3ltYm9scy5qcyc7XG5cbmNvbnN0IGlzT0sgPSAoe25vZGVUeXBlfSwgbWFzaykgPT4ge1xuICBzd2l0Y2ggKG5vZGVUeXBlKSB7XG4gICAgY2FzZSBFTEVNRU5UX05PREU6XG4gICAgICByZXR1cm4gbWFzayAmIFNIT1dfRUxFTUVOVDtcbiAgICBjYXNlIFRFWFRfTk9ERTpcbiAgICAgIHJldHVybiBtYXNrICYgU0hPV19URVhUO1xuICAgIGNhc2UgQ09NTUVOVF9OT0RFOlxuICAgICAgcmV0dXJuIG1hc2sgJiBTSE9XX0NPTU1FTlQ7XG4gICAgY2FzZSBDREFUQV9TRUNUSU9OX05PREU6XG4gICAgICByZXR1cm4gbWFzayAmIFNIT1dfQ0RBVEFfU0VDVElPTjtcbiAgfVxuICByZXR1cm4gMDtcbn07XG5cbi8qKlxuICogQGltcGxlbWVudHMgZ2xvYmFsVGhpcy5UcmVlV2Fsa2VyXG4gKi9cbmV4cG9ydCBjbGFzcyBUcmVlV2Fsa2VyIHtcbiAgY29uc3RydWN0b3Iocm9vdCwgd2hhdFRvU2hvdyA9IFNIT1dfQUxMKSB7XG4gICAgdGhpcy5yb290ID0gcm9vdDtcbiAgICB0aGlzLmN1cnJlbnROb2RlID0gcm9vdDtcbiAgICB0aGlzLndoYXRUb1Nob3cgPSB3aGF0VG9TaG93O1xuICAgIGxldCB7W05FWFRdOiBuZXh0LCBbRU5EXTogZW5kfSA9IHJvb3Q7XG4gICAgaWYgKHJvb3Qubm9kZVR5cGUgPT09IERPQ1VNRU5UX05PREUpIHtcbiAgICAgIGNvbnN0IHtkb2N1bWVudEVsZW1lbnR9ID0gcm9vdDtcbiAgICAgIG5leHQgPSBkb2N1bWVudEVsZW1lbnQ7XG4gICAgICBlbmQgPSBkb2N1bWVudEVsZW1lbnRbRU5EXTtcbiAgICB9XG4gICAgY29uc3Qgbm9kZXMgPSBbXTtcbiAgICB3aGlsZSAobmV4dCAmJiBuZXh0ICE9PSBlbmQpIHtcbiAgICAgIGlmIChpc09LKG5leHQsIHdoYXRUb1Nob3cpKVxuICAgICAgICBub2Rlcy5wdXNoKG5leHQpO1xuICAgICAgbmV4dCA9IG5leHRbTkVYVF07XG4gICAgfVxuICAgIHRoaXNbUFJJVkFURV0gPSB7aTogMCwgbm9kZXN9O1xuICB9XG5cbiAgbmV4dE5vZGUoKSB7XG4gICAgY29uc3QgJCA9IHRoaXNbUFJJVkFURV07XG4gICAgdGhpcy5jdXJyZW50Tm9kZSA9ICQuaSA8ICQubm9kZXMubGVuZ3RoID8gJC5ub2Rlc1skLmkrK10gOiBudWxsO1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnROb2RlO1xuICB9XG59XG4iLCJpbXBvcnQge3BlcmZvcm1hbmNlfSBmcm9tICcuLi8uLi9jb21tb25qcy9wZXJmX2hvb2tzLmNqcyc7XG5cbmltcG9ydCB7RE9DVU1FTlRfTk9ERSwgRE9DVU1FTlRfRlJBR01FTlRfTk9ERSwgRE9DVU1FTlRfVFlQRV9OT0RFLCBFTEVNRU5UX05PREUsIFNWR19OQU1FU1BBQ0V9IGZyb20gJy4uL3NoYXJlZC9jb25zdGFudHMuanMnO1xuXG5pbXBvcnQge1xuICBDVVNUT01fRUxFTUVOVFMsIERPTV9QQVJTRVIsIEdMT0JBTFMsIElNQUdFLCBNVVRBVElPTl9PQlNFUlZFUixcbiAgRE9DVFlQRSwgRU5ELCBORVhULCBNSU1FLCBFVkVOVF9UQVJHRVQsIFVQR1JBREVcbn0gZnJvbSAnLi4vc2hhcmVkL3N5bWJvbHMuanMnO1xuXG5pbXBvcnQge0ZhY2FkZXMsIGlsbGVnYWxDb25zdHJ1Y3Rvcn0gZnJvbSAnLi4vc2hhcmVkL2ZhY2FkZXMuanMnO1xuaW1wb3J0IHtIVE1MQ2xhc3Nlc30gZnJvbSAnLi4vc2hhcmVkL2h0bWwtY2xhc3Nlcy5qcyc7XG5pbXBvcnQge01pbWV9IGZyb20gJy4uL3NoYXJlZC9taW1lLmpzJztcbmltcG9ydCB7a25vd25TaWJsaW5nc30gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLmpzJztcbmltcG9ydCB7YXNzaWduLCBjcmVhdGUsIGRlZmluZVByb3BlcnRpZXMsIHNldFByb3RvdHlwZU9mfSBmcm9tICcuLi9zaGFyZWQvb2JqZWN0LmpzJztcblxuaW1wb3J0IHtOb25FbGVtZW50UGFyZW50Tm9kZX0gZnJvbSAnLi4vbWl4aW4vbm9uLWVsZW1lbnQtcGFyZW50LW5vZGUuanMnO1xuXG5pbXBvcnQge1NWR0VsZW1lbnR9IGZyb20gJy4uL3N2Zy9lbGVtZW50LmpzJztcblxuaW1wb3J0IHtBdHRyfSBmcm9tICcuL2F0dHIuanMnO1xuaW1wb3J0IHtDREFUQVNlY3Rpb259IGZyb20gJy4vY2RhdGEtc2VjdGlvbi5qcydcbmltcG9ydCB7Q29tbWVudH0gZnJvbSAnLi9jb21tZW50LmpzJztcbmltcG9ydCB7Q3VzdG9tRWxlbWVudFJlZ2lzdHJ5fSBmcm9tICcuL2N1c3RvbS1lbGVtZW50LXJlZ2lzdHJ5LmpzJztcbmltcG9ydCB7Q3VzdG9tRXZlbnR9IGZyb20gJy4vY3VzdG9tLWV2ZW50LmpzJztcbmltcG9ydCB7RG9jdW1lbnRGcmFnbWVudH0gZnJvbSAnLi9kb2N1bWVudC1mcmFnbWVudC5qcyc7XG5pbXBvcnQge0RvY3VtZW50VHlwZX0gZnJvbSAnLi9kb2N1bWVudC10eXBlLmpzJztcbmltcG9ydCB7RWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJztcbmltcG9ydCB7RXZlbnR9IGZyb20gJy4vZXZlbnQuanMnO1xuaW1wb3J0IHtFdmVudFRhcmdldH0gZnJvbSAnLi9ldmVudC10YXJnZXQuanMnO1xuaW1wb3J0IHtJbnB1dEV2ZW50fSBmcm9tICcuL2lucHV0LWV2ZW50LmpzJztcbmltcG9ydCB7SW1hZ2VDbGFzc30gZnJvbSAnLi9pbWFnZS5qcyc7XG5pbXBvcnQge011dGF0aW9uT2JzZXJ2ZXJDbGFzc30gZnJvbSAnLi9tdXRhdGlvbi1vYnNlcnZlci5qcyc7XG5pbXBvcnQge05hbWVkTm9kZU1hcH0gZnJvbSAnLi9uYW1lZC1ub2RlLW1hcC5qcyc7XG5pbXBvcnQge05vZGVMaXN0fSBmcm9tICcuL25vZGUtbGlzdC5qcyc7XG5pbXBvcnQge1JhbmdlfSBmcm9tICcuL3JhbmdlLmpzJztcbmltcG9ydCB7VGV4dH0gZnJvbSAnLi90ZXh0LmpzJztcbmltcG9ydCB7VHJlZVdhbGtlcn0gZnJvbSAnLi90cmVlLXdhbGtlci5qcyc7XG5cbmNvbnN0IHF1ZXJ5ID0gKG1ldGhvZCwgb3duZXJEb2N1bWVudCwgc2VsZWN0b3JzKSA9PiB7XG4gIGxldCB7W05FWFRdOiBuZXh0LCBbRU5EXTogZW5kfSA9IG93bmVyRG9jdW1lbnQ7XG4gIHJldHVybiBtZXRob2QuY2FsbCh7b3duZXJEb2N1bWVudCwgW05FWFRdOiBuZXh0LCBbRU5EXTogZW5kfSwgc2VsZWN0b3JzKTtcbn07XG5cbmNvbnN0IGdsb2JhbEV4cG9ydHMgPSBhc3NpZ24oXG4gIHt9LFxuICBGYWNhZGVzLFxuICBIVE1MQ2xhc3NlcyxcbiAge1xuICAgIEN1c3RvbUV2ZW50LFxuICAgIEV2ZW50LFxuICAgIEV2ZW50VGFyZ2V0LFxuICAgIElucHV0RXZlbnQsXG4gICAgTmFtZWROb2RlTWFwLFxuICAgIE5vZGVMaXN0XG4gIH1cbik7XG5cbmNvbnN0IHdpbmRvdyA9IG5ldyBXZWFrTWFwO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuRG9jdW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIERvY3VtZW50IGV4dGVuZHMgTm9uRWxlbWVudFBhcmVudE5vZGUge1xuICBjb25zdHJ1Y3Rvcih0eXBlKSB7XG4gICAgc3VwZXIobnVsbCwgJyNkb2N1bWVudCcsIERPQ1VNRU5UX05PREUpO1xuICAgIHRoaXNbQ1VTVE9NX0VMRU1FTlRTXSA9IHthY3RpdmU6IGZhbHNlLCByZWdpc3RyeTogbnVsbH07XG4gICAgdGhpc1tNVVRBVElPTl9PQlNFUlZFUl0gPSB7YWN0aXZlOiBmYWxzZSwgY2xhc3M6IG51bGx9O1xuICAgIHRoaXNbTUlNRV0gPSBNaW1lW3R5cGVdO1xuICAgIC8qKiBAdHlwZSB7RG9jdW1lbnRUeXBlfSAqL1xuICAgIHRoaXNbRE9DVFlQRV0gPSBudWxsO1xuICAgIHRoaXNbRE9NX1BBUlNFUl0gPSBudWxsO1xuICAgIHRoaXNbR0xPQkFMU10gPSBudWxsO1xuICAgIHRoaXNbSU1BR0VdID0gbnVsbDtcbiAgICB0aGlzW1VQR1JBREVdID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7Z2xvYmFsVGhpcy5Eb2N1bWVudFsnZGVmYXVsdFZpZXcnXX1cbiAgICovXG4gIGdldCBkZWZhdWx0VmlldygpIHtcbiAgICBpZiAoIXdpbmRvdy5oYXModGhpcykpXG4gICAgICB3aW5kb3cuc2V0KHRoaXMsIG5ldyBQcm94eShnbG9iYWxUaGlzLCB7XG4gICAgICAgIHNldDogKHRhcmdldCwgbmFtZSwgdmFsdWUpID0+IHtcbiAgICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2FkZEV2ZW50TGlzdGVuZXInOlxuICAgICAgICAgICAgY2FzZSAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6XG4gICAgICAgICAgICBjYXNlICdkaXNwYXRjaEV2ZW50JzpcbiAgICAgICAgICAgICAgdGhpc1tFVkVOVF9UQVJHRVRdW25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiAoZ2xvYmFsVGhpcywgbmFtZSkgPT4ge1xuICAgICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgY2FzZSAnYWRkRXZlbnRMaXN0ZW5lcic6XG4gICAgICAgICAgICBjYXNlICdyZW1vdmVFdmVudExpc3RlbmVyJzpcbiAgICAgICAgICAgIGNhc2UgJ2Rpc3BhdGNoRXZlbnQnOlxuICAgICAgICAgICAgICBpZiAoIXRoaXNbRVZFTlRfVEFSR0VUXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV0ID0gdGhpc1tFVkVOVF9UQVJHRVRdID0gbmV3IEV2ZW50VGFyZ2V0O1xuICAgICAgICAgICAgICAgIGV0LmRpc3BhdGNoRXZlbnQgPSBldC5kaXNwYXRjaEV2ZW50LmJpbmQoZXQpO1xuICAgICAgICAgICAgICAgIGV0LmFkZEV2ZW50TGlzdGVuZXIgPSBldC5hZGRFdmVudExpc3RlbmVyLmJpbmQoZXQpO1xuICAgICAgICAgICAgICAgIGV0LnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBldC5yZW1vdmVFdmVudExpc3RlbmVyLmJpbmQoZXQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzW0VWRU5UX1RBUkdFVF1bbmFtZV07XG4gICAgICAgICAgICBjYXNlICdkb2N1bWVudCc6XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgICAgICAgICBjYXNlICduYXZpZ2F0b3InOlxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVzZXJBZ2VudDogJ01vemlsbGEvNS4wIChYMTE7IExpbnV4IHg4Nl82NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg4LjAuNDMyNC4xNTAgU2FmYXJpLzUzNy4zNidcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXG4gICAgICAgICAgICBjYXNlICd3aW5kb3cnOlxuICAgICAgICAgICAgICByZXR1cm4gd2luZG93LmdldCh0aGlzKTtcbiAgICAgICAgICAgIGNhc2UgJ2N1c3RvbUVsZW1lbnRzJzpcbiAgICAgICAgICAgICAgaWYgKCF0aGlzW0NVU1RPTV9FTEVNRU5UU10ucmVnaXN0cnkpXG4gICAgICAgICAgICAgICAgdGhpc1tDVVNUT01fRUxFTUVOVFNdID0gbmV3IEN1c3RvbUVsZW1lbnRSZWdpc3RyeSh0aGlzKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbQ1VTVE9NX0VMRU1FTlRTXTtcbiAgICAgICAgICAgIGNhc2UgJ3BlcmZvcm1hbmNlJzpcbiAgICAgICAgICAgICAgcmV0dXJuIHBlcmZvcm1hbmNlO1xuICAgICAgICAgICAgY2FzZSAnRE9NUGFyc2VyJzpcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbRE9NX1BBUlNFUl07XG4gICAgICAgICAgICBjYXNlICdJbWFnZSc6XG4gICAgICAgICAgICAgIGlmICghdGhpc1tJTUFHRV0pXG4gICAgICAgICAgICAgICAgdGhpc1tJTUFHRV0gPSBJbWFnZUNsYXNzKHRoaXMpO1xuICAgICAgICAgICAgICByZXR1cm4gdGhpc1tJTUFHRV07XG4gICAgICAgICAgICBjYXNlICdNdXRhdGlvbk9ic2VydmVyJzpcbiAgICAgICAgICAgICAgaWYgKCF0aGlzW01VVEFUSU9OX09CU0VSVkVSXS5jbGFzcylcbiAgICAgICAgICAgICAgICB0aGlzW01VVEFUSU9OX09CU0VSVkVSXSA9IG5ldyBNdXRhdGlvbk9ic2VydmVyQ2xhc3ModGhpcyk7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzW01VVEFUSU9OX09CU0VSVkVSXS5jbGFzcztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuICh0aGlzW0dMT0JBTFNdICYmIHRoaXNbR0xPQkFMU11bbmFtZV0pIHx8XG4gICAgICAgICAgICAgICAgICBnbG9iYWxFeHBvcnRzW25hbWVdIHx8XG4gICAgICAgICAgICAgICAgICBnbG9iYWxUaGlzW25hbWVdO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgcmV0dXJuIHdpbmRvdy5nZXQodGhpcyk7XG4gIH1cblxuICBnZXQgZG9jdHlwZSgpIHtcbiAgICBjb25zdCBkb2NUeXBlID0gdGhpc1tET0NUWVBFXTtcbiAgICBpZiAoZG9jVHlwZSlcbiAgICAgIHJldHVybiBkb2NUeXBlO1xuICAgIGNvbnN0IHtmaXJzdENoaWxkfSA9IHRoaXM7XG4gICAgaWYgKGZpcnN0Q2hpbGQgJiYgZmlyc3RDaGlsZC5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfVFlQRV9OT0RFKVxuICAgICAgcmV0dXJuICh0aGlzW0RPQ1RZUEVdID0gZmlyc3RDaGlsZCk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzZXQgZG9jdHlwZSh2YWx1ZSkge1xuICAgIGlmICgvXihbYS16Ol0rKShcXHMrc3lzdGVtfFxccytwdWJsaWMoXFxzK1wiKFteXCJdKylcIik/KT8oXFxzK1wiKFteXCJdKylcIik/L2kudGVzdCh2YWx1ZSkpIHtcbiAgICAgIGNvbnN0IHskMTogbmFtZSwgJDQ6IHB1YmxpY0lkLCAkNjogc3lzdGVtSWR9ID0gUmVnRXhwO1xuICAgICAgdGhpc1tET0NUWVBFXSA9IG5ldyBEb2N1bWVudFR5cGUodGhpcywgbmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKTtcbiAgICAgIGtub3duU2libGluZ3ModGhpcywgdGhpc1tET0NUWVBFXSwgdGhpc1tORVhUXSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGRvY3VtZW50RWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5maXJzdEVsZW1lbnRDaGlsZDtcbiAgfVxuXG4gIGdldCBpc0Nvbm5lY3RlZCgpIHsgcmV0dXJuIHRydWU7IH1cblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgIF9nZXRQYXJlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXNbRVZFTlRfVEFSR0VUXTtcbiAgfVxuXG4gIGNyZWF0ZUF0dHJpYnV0ZShuYW1lKSB7IHJldHVybiBuZXcgQXR0cih0aGlzLCBuYW1lKTsgfVxuICBjcmVhdGVDREFUQVNlY3Rpb24oZGF0YSkgeyByZXR1cm4gbmV3IENEQVRBU2VjdGlvbih0aGlzLCBkYXRhKTsgfVxuICBjcmVhdGVDb21tZW50KHRleHRDb250ZW50KSB7IHJldHVybiBuZXcgQ29tbWVudCh0aGlzLCB0ZXh0Q29udGVudCk7IH1cbiAgY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpIHsgcmV0dXJuIG5ldyBEb2N1bWVudEZyYWdtZW50KHRoaXMpOyB9XG4gIGNyZWF0ZURvY3VtZW50VHlwZShuYW1lLCBwdWJsaWNJZCwgc3lzdGVtSWQpIHsgcmV0dXJuIG5ldyBEb2N1bWVudFR5cGUodGhpcywgbmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKTsgfVxuICBjcmVhdGVFbGVtZW50KGxvY2FsTmFtZSkgeyByZXR1cm4gbmV3IEVsZW1lbnQodGhpcywgbG9jYWxOYW1lKTsgfVxuICBjcmVhdGVSYW5nZSgpIHtcbiAgICBjb25zdCByYW5nZSA9IG5ldyBSYW5nZTtcbiAgICByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lciA9IHRoaXM7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9XG4gIGNyZWF0ZVRleHROb2RlKHRleHRDb250ZW50KSB7IHJldHVybiBuZXcgVGV4dCh0aGlzLCB0ZXh0Q29udGVudCk7IH1cbiAgY3JlYXRlVHJlZVdhbGtlcihyb290LCB3aGF0VG9TaG93ID0gLTEpIHsgcmV0dXJuIG5ldyBUcmVlV2Fsa2VyKHJvb3QsIHdoYXRUb1Nob3cpOyB9XG4gIGNyZWF0ZU5vZGVJdGVyYXRvcihyb290LCB3aGF0VG9TaG93ID0gLTEpIHsgcmV0dXJuIHRoaXMuY3JlYXRlVHJlZVdhbGtlcihyb290LCB3aGF0VG9TaG93KTsgfVxuXG4gIGNyZWF0ZUV2ZW50KG5hbWUpIHtcbiAgICBjb25zdCBldmVudCA9IGNyZWF0ZShuYW1lID09PSAnRXZlbnQnID8gbmV3IEV2ZW50KCcnKSA6IG5ldyBDdXN0b21FdmVudCgnJykpO1xuICAgIGV2ZW50LmluaXRFdmVudCA9IGV2ZW50LmluaXRDdXN0b21FdmVudCA9IChcbiAgICAgIHR5cGUsXG4gICAgICBjYW5CdWJibGUgPSBmYWxzZSxcbiAgICAgIGNhbmNlbGFibGUgPSBmYWxzZSxcbiAgICAgIGRldGFpbFxuICAgICkgPT4ge1xuICAgICAgZXZlbnQuYnViYmxlcyA9ICEhY2FuQnViYmxlO1xuXG4gICAgICBkZWZpbmVQcm9wZXJ0aWVzKGV2ZW50LCB7XG4gICAgICAgIHR5cGU6IHt2YWx1ZTogdHlwZX0sXG4gICAgICAgIGNhbkJ1YmJsZToge3ZhbHVlOiBjYW5CdWJibGV9LFxuICAgICAgICBjYW5jZWxhYmxlOiB7dmFsdWU6IGNhbmNlbGFibGV9LFxuICAgICAgICBkZXRhaWw6IHt2YWx1ZTogZGV0YWlsfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cblxuICBjbG9uZU5vZGUoZGVlcCA9IGZhbHNlKSB7XG4gICAgY29uc3Qge1xuICAgICAgY29uc3RydWN0b3IsXG4gICAgICBbQ1VTVE9NX0VMRU1FTlRTXTogY3VzdG9tRWxlbWVudHMsXG4gICAgICBbRE9DVFlQRV06IGRvY3R5cGVcbiAgICB9ID0gdGhpcztcbiAgICBjb25zdCBkb2N1bWVudCA9IG5ldyBjb25zdHJ1Y3RvcigpO1xuICAgIGRvY3VtZW50W0NVU1RPTV9FTEVNRU5UU10gPSBjdXN0b21FbGVtZW50cztcbiAgICBpZiAoZGVlcCkge1xuICAgICAgY29uc3QgZW5kID0gZG9jdW1lbnRbRU5EXTtcbiAgICAgIGNvbnN0IHtjaGlsZE5vZGVzfSA9IHRoaXM7XG4gICAgICBmb3IgKGxldCB7bGVuZ3RofSA9IGNoaWxkTm9kZXMsIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG4gICAgICAgIGRvY3VtZW50Lmluc2VydEJlZm9yZShjaGlsZE5vZGVzW2ldLmNsb25lTm9kZSh0cnVlKSwgZW5kKTtcbiAgICAgIGlmIChkb2N0eXBlKVxuICAgICAgICBkb2N1bWVudFtET0NUWVBFXSA9IGNoaWxkTm9kZXNbMF07XG4gICAgfVxuICAgIHJldHVybiBkb2N1bWVudDtcbiAgfVxuXG4gIGltcG9ydE5vZGUoZXh0ZXJuYWxOb2RlKSB7XG4gICAgLy8gaW1wb3J0YW50OiBrZWVwIHRoZSBzaWduYXR1cmUgbGVuZ3RoIGFzICpvbmUqXG4gICAgLy8gb3IgaXQgd291bGQgYmVoYXZlIGxpa2Ugb2xkIElFIG9yIEVkZ2Ugd2l0aCBwb2x5ZmlsbHNcbiAgICBjb25zdCBkZWVwID0gMSA8IGFyZ3VtZW50cy5sZW5ndGggJiYgISFhcmd1bWVudHNbMV07XG4gICAgY29uc3Qgbm9kZSA9IGV4dGVybmFsTm9kZS5jbG9uZU5vZGUoZGVlcCk7XG4gICAgY29uc3Qge1tDVVNUT01fRUxFTUVOVFNdOiBjdXN0b21FbGVtZW50c30gPSB0aGlzO1xuICAgIGNvbnN0IHthY3RpdmV9ID0gY3VzdG9tRWxlbWVudHM7XG4gICAgY29uc3QgdXBncmFkZSA9IGVsZW1lbnQgPT4ge1xuICAgICAgY29uc3Qge293bmVyRG9jdW1lbnQsIG5vZGVUeXBlfSA9IGVsZW1lbnQ7XG4gICAgICBlbGVtZW50Lm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuICAgICAgaWYgKGFjdGl2ZSAmJiBvd25lckRvY3VtZW50ICE9PSB0aGlzICYmIG5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpXG4gICAgICAgIGN1c3RvbUVsZW1lbnRzLnVwZ3JhZGUoZWxlbWVudCk7XG4gICAgfTtcbiAgICB1cGdyYWRlKG5vZGUpO1xuICAgIGlmIChkZWVwKSB7XG4gICAgICBzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHtcbiAgICAgICAgY2FzZSBFTEVNRU5UX05PREU6XG4gICAgICAgIGNhc2UgRE9DVU1FTlRfRlJBR01FTlRfTk9ERToge1xuICAgICAgICAgIGxldCB7W05FWFRdOiBuZXh0LCBbRU5EXTogZW5kfSA9IG5vZGU7XG4gICAgICAgICAgd2hpbGUgKG5leHQgIT09IGVuZCkge1xuICAgICAgICAgICAgaWYgKG5leHQubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSlcbiAgICAgICAgICAgICAgdXBncmFkZShuZXh0KTtcbiAgICAgICAgICAgIG5leHQgPSBuZXh0W05FWFRdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkgeyByZXR1cm4gdGhpcy5jaGlsZE5vZGVzLmpvaW4oJycpOyB9XG5cbiAgcXVlcnlTZWxlY3RvcihzZWxlY3RvcnMpIHtcbiAgICByZXR1cm4gcXVlcnkoc3VwZXIucXVlcnlTZWxlY3RvciwgdGhpcywgc2VsZWN0b3JzKTtcbiAgfVxuXG4gIHF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3JzKSB7XG4gICAgcmV0dXJuIHF1ZXJ5KHN1cGVyLnF1ZXJ5U2VsZWN0b3JBbGwsIHRoaXMsIHNlbGVjdG9ycyk7XG4gIH1cblxuICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgZ2V0RWxlbWVudHNCeVRhZ05hbWVOUyhfLCBuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUobmFtZSk7XG4gIH1cbiAgY3JlYXRlQXR0cmlidXRlTlMoXywgbmFtZSkge1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfVxuICBjcmVhdGVFbGVtZW50TlMobnNwLCBsb2NhbE5hbWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbnNwID09PSBTVkdfTkFNRVNQQUNFID9cbiAgICAgICAgICAgIG5ldyBTVkdFbGVtZW50KHRoaXMsIGxvY2FsTmFtZSwgbnVsbCkgOlxuICAgICAgICAgICAgdGhpcy5jcmVhdGVFbGVtZW50KGxvY2FsTmFtZSwgb3B0aW9ucyk7XG4gIH1cbiAgLyogYzggaWdub3JlIHN0b3AgKi9cbn1cblxuc2V0UHJvdG90eXBlT2YoXG4gIGdsb2JhbEV4cG9ydHMuRG9jdW1lbnQgPSBmdW5jdGlvbiBEb2N1bWVudCgpIHtcbiAgICBpbGxlZ2FsQ29uc3RydWN0b3IoKTtcbiAgfSxcbiAgRG9jdW1lbnRcbikucHJvdG90eXBlID0gRG9jdW1lbnQucHJvdG90eXBlO1xuIiwiLy8gaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNpbnRlcmZhY2UtY3VzdG9tZXZlbnRcblxuLyogYzggaWdub3JlIHN0YXJ0ICovXG5cbi8vIE9uZSBkYXkgTm9kZSBtaWdodCBoYXZlIEN1c3RvbUV2ZW50IHRvb1xuXG5pbXBvcnQge0V2ZW50fSBmcm9tICcuL2V2ZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLklucHV0RXZlbnRcbiAqL1xuZXhwb3J0IGNsYXNzIElucHV0RXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gIGNvbnN0cnVjdG9yKHR5cGUsIGlucHV0RXZlbnRJbml0ID0ge30pIHtcbiAgICBzdXBlcih0eXBlLCBpbnB1dEV2ZW50SW5pdCk7XG4gICAgdGhpcy5pbnB1dFR5cGUgPSBpbnB1dEV2ZW50SW5pdC5pbnB1dFR5cGU7XG4gICAgdGhpcy5kYXRhID0gaW5wdXRFdmVudEluaXQuZGF0YTtcbiAgICB0aGlzLmRhdGFUcmFuc2ZlciA9IGlucHV0RXZlbnRJbml0LmRhdGFUcmFuc2ZlcjtcbiAgICB0aGlzLmlzQ29tcG9zaW5nID0gaW5wdXRFdmVudEluaXQuaXNDb21wb3NpbmcgfHwgZmFsc2U7XG4gICAgdGhpcy5yYW5nZXMgPSBpbnB1dEV2ZW50SW5pdC5yYW5nZXM7XG4gIH1cbn1cbi8qIGM4IGlnbm9yZSBzdG9wICovXG4iLCJpbXBvcnQge0VMRU1FTlRfTk9ERX0gZnJvbSAnLi4vc2hhcmVkL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQge0NVU1RPTV9FTEVNRU5UUywgRU5ELCBORVhUfSBmcm9tICcuLi9zaGFyZWQvc3ltYm9scy5qcyc7XG5pbXBvcnQge2h0bWxDbGFzc2VzfSBmcm9tICcuLi9zaGFyZWQvcmVnaXN0ZXItaHRtbC1jbGFzcy5qcyc7XG5cbmltcG9ydCB7RG9jdW1lbnR9IGZyb20gJy4uL2ludGVyZmFjZS9kb2N1bWVudC5qcyc7XG5pbXBvcnQge05vZGVMaXN0fSBmcm9tICcuLi9pbnRlcmZhY2Uvbm9kZS1saXN0LmpzJztcbmltcG9ydCB7Y3VzdG9tRWxlbWVudHN9IGZyb20gJy4uL2ludGVyZmFjZS9jdXN0b20tZWxlbWVudC1yZWdpc3RyeS5qcyc7XG5cbmltcG9ydCB7SFRNTEVsZW1lbnR9IGZyb20gJy4vZWxlbWVudC5qcyc7XG5cbmNvbnN0IGNyZWF0ZUhUTUxFbGVtZW50ID0gKG93bmVyRG9jdW1lbnQsIGJ1aWx0aW4sIGxvY2FsTmFtZSwgb3B0aW9ucykgPT4ge1xuICBpZiAoIWJ1aWx0aW4gJiYgaHRtbENsYXNzZXMuaGFzKGxvY2FsTmFtZSkpIHtcbiAgICBjb25zdCBDbGFzcyA9IGh0bWxDbGFzc2VzLmdldChsb2NhbE5hbWUpO1xuICAgIHJldHVybiBuZXcgQ2xhc3Mob3duZXJEb2N1bWVudCwgbG9jYWxOYW1lKTtcbiAgfVxuICBjb25zdCB7W0NVU1RPTV9FTEVNRU5UU106IHthY3RpdmUsIHJlZ2lzdHJ5fX0gPSBvd25lckRvY3VtZW50O1xuICBpZiAoYWN0aXZlKSB7XG4gICAgY29uc3QgY2UgPSBidWlsdGluID8gb3B0aW9ucy5pcyA6IGxvY2FsTmFtZTtcbiAgICBpZiAocmVnaXN0cnkuaGFzKGNlKSkge1xuICAgICAgY29uc3Qge0NsYXNzfSA9IHJlZ2lzdHJ5LmdldChjZSk7XG4gICAgICBjb25zdCBlbGVtZW50ID0gbmV3IENsYXNzKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gICAgICBjdXN0b21FbGVtZW50cy5zZXQoZWxlbWVudCwge2Nvbm5lY3RlZDogZmFsc2V9KTtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IEhUTUxFbGVtZW50KG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG59O1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIGdsb2JhbFRoaXMuSFRNTERvY3VtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBIVE1MRG9jdW1lbnQgZXh0ZW5kcyBEb2N1bWVudCB7XG4gIGNvbnN0cnVjdG9yKCkgeyBzdXBlcigndGV4dC9odG1sJyk7IH1cblxuICBnZXQgYWxsKCkge1xuICAgIGNvbnN0IG5vZGVMaXN0ID0gbmV3IE5vZGVMaXN0O1xuICAgIGxldCB7W05FWFRdOiBuZXh0LCBbRU5EXTogZW5kfSA9IHRoaXM7XG4gICAgd2hpbGUgKG5leHQgIT09IGVuZCkge1xuICAgICAgc3dpdGNoIChuZXh0Lm5vZGVUeXBlKSB7XG4gICAgICAgIGNhc2UgRUxFTUVOVF9OT0RFOlxuICAgICAgICAgIG5vZGVMaXN0LnB1c2gobmV4dCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBuZXh0ID0gbmV4dFtORVhUXTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGVMaXN0O1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIEhUTUxIZWFkRWxlbWVudFxuICAgKi9cbiAgZ2V0IGhlYWQoKSB7XG4gICAgY29uc3Qge2RvY3VtZW50RWxlbWVudH0gPSB0aGlzO1xuICAgIGxldCB7Zmlyc3RFbGVtZW50Q2hpbGR9ID0gZG9jdW1lbnRFbGVtZW50O1xuICAgIGlmICghZmlyc3RFbGVtZW50Q2hpbGQgfHwgZmlyc3RFbGVtZW50Q2hpbGQudGFnTmFtZSAhPT0gJ0hFQUQnKSB7XG4gICAgICBmaXJzdEVsZW1lbnRDaGlsZCA9IHRoaXMuY3JlYXRlRWxlbWVudCgnaGVhZCcpO1xuICAgICAgZG9jdW1lbnRFbGVtZW50LnByZXBlbmQoZmlyc3RFbGVtZW50Q2hpbGQpO1xuICAgIH1cbiAgICByZXR1cm4gZmlyc3RFbGVtZW50Q2hpbGQ7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUgSFRNTEJvZHlFbGVtZW50XG4gICAqL1xuICBnZXQgYm9keSgpIHtcbiAgICBjb25zdCB7aGVhZH0gPSB0aGlzO1xuICAgIGxldCB7bmV4dEVsZW1lbnRTaWJsaW5nfSA9IGhlYWQ7XG4gICAgaWYgKCFuZXh0RWxlbWVudFNpYmxpbmcgfHwgbmV4dEVsZW1lbnRTaWJsaW5nLnRhZ05hbWUgIT09ICdCT0RZJykge1xuICAgICAgbmV4dEVsZW1lbnRTaWJsaW5nID0gdGhpcy5jcmVhdGVFbGVtZW50KCdib2R5Jyk7XG4gICAgICBoZWFkLmFmdGVyKG5leHRFbGVtZW50U2libGluZyk7XG4gICAgfVxuICAgIHJldHVybiBuZXh0RWxlbWVudFNpYmxpbmc7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUgSFRNTFRpdGxlRWxlbWVudFxuICAgKi9cbiAgZ2V0IHRpdGxlKCkge1xuICAgIGNvbnN0IHtoZWFkfSA9IHRoaXM7XG4gICAgcmV0dXJuIGhlYWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RpdGxlJykuYXQoMCk/LnRleHRDb250ZW50IHx8ICcnO1xuICB9XG5cbiAgc2V0IHRpdGxlKHRleHRDb250ZW50KSB7XG4gICAgY29uc3Qge2hlYWR9ID0gdGhpcztcbiAgICBsZXQgdGl0bGUgPSBoZWFkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0aXRsZScpLmF0KDApO1xuICAgIGlmICh0aXRsZSlcbiAgICAgIHRpdGxlLnRleHRDb250ZW50ID0gdGV4dENvbnRlbnQ7XG4gICAgZWxzZSB7XG4gICAgICBoZWFkLmluc2VydEJlZm9yZShcbiAgICAgICAgdGhpcy5jcmVhdGVFbGVtZW50KCd0aXRsZScpLFxuICAgICAgICBoZWFkLmZpcnN0Q2hpbGRcbiAgICAgICkudGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudDtcbiAgICB9XG4gIH1cblxuICBjcmVhdGVFbGVtZW50KGxvY2FsTmFtZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGJ1aWx0aW4gPSAhIShvcHRpb25zICYmIG9wdGlvbnMuaXMpO1xuICAgIGNvbnN0IGVsZW1lbnQgPSBjcmVhdGVIVE1MRWxlbWVudCh0aGlzLCBidWlsdGluLCBsb2NhbE5hbWUsIG9wdGlvbnMpO1xuICAgIGlmIChidWlsdGluKVxuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lzJywgb3B0aW9ucy5pcyk7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbn1cbiIsImltcG9ydCB7TUlNRX0gZnJvbSAnLi4vc2hhcmVkL3N5bWJvbHMuanMnO1xuaW1wb3J0IHtEb2N1bWVudH0gZnJvbSAnLi4vaW50ZXJmYWNlL2RvY3VtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkRvY3VtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBTVkdEb2N1bWVudCBleHRlbmRzIERvY3VtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7IHN1cGVyKCdpbWFnZS9zdmcreG1sJyk7IH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXNbTUlNRV0uZG9jVHlwZSArIHN1cGVyLnRvU3RyaW5nKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7TUlNRX0gZnJvbSAnLi4vc2hhcmVkL3N5bWJvbHMuanMnO1xuaW1wb3J0IHtEb2N1bWVudH0gZnJvbSAnLi4vaW50ZXJmYWNlL2RvY3VtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLlhNTERvY3VtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBYTUxEb2N1bWVudCBleHRlbmRzIERvY3VtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7IHN1cGVyKCd0ZXh0L3htbCcpOyB9XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzW01JTUVdLmRvY1R5cGUgKyBzdXBlci50b1N0cmluZygpO1xuICB9XG59XG4iLCJpbXBvcnQge0RPTV9QQVJTRVIsIEdMT0JBTFN9IGZyb20gJy4uL3NoYXJlZC9zeW1ib2xzLmpzJztcbmltcG9ydCB7cGFyc2VGcm9tU3RyaW5nfSBmcm9tICcuLi9zaGFyZWQvcGFyc2UtZnJvbS1zdHJpbmcuanMnO1xuXG5pbXBvcnQge0hUTUxEb2N1bWVudH0gZnJvbSAnLi4vaHRtbC9kb2N1bWVudC5qcyc7XG5pbXBvcnQge1NWR0RvY3VtZW50fSBmcm9tICcuLi9zdmcvZG9jdW1lbnQuanMnO1xuaW1wb3J0IHtYTUxEb2N1bWVudH0gZnJvbSAnLi4veG1sL2RvY3VtZW50LmpzJztcblxuLyoqXG4gKiBAaW1wbGVtZW50cyBnbG9iYWxUaGlzLkRPTVBhcnNlclxuICovXG5leHBvcnQgY2xhc3MgRE9NUGFyc2VyIHtcblxuICAvKiogQHR5cGVkZWYge3sgXCJ0ZXh0L2h0bWxcIjogSFRNTERvY3VtZW50LCBcImltYWdlL3N2Zyt4bWxcIjogU1ZHRG9jdW1lbnQsIFwidGV4dC94bWxcIjogWE1MRG9jdW1lbnQgfX0gTWltZVRvRG9jICovXG4gIC8qKlxuICAgKiBAdGVtcGxhdGUge2tleW9mIE1pbWVUb0RvY30gTUlNRVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwTGFuZ3VhZ2VcbiAgICogQHBhcmFtIHtNSU1FfSBtaW1lVHlwZVxuICAgKiBAcmV0dXJucyB7TWltZVRvRG9jW01JTUVdfVxuICAgKi9cbiAgcGFyc2VGcm9tU3RyaW5nKG1hcmt1cExhbmd1YWdlLCBtaW1lVHlwZSwgZ2xvYmFscyA9IG51bGwpIHtcbiAgICBsZXQgaXNIVE1MID0gZmFsc2UsIGRvY3VtZW50O1xuICAgIGlmIChtaW1lVHlwZSA9PT0gJ3RleHQvaHRtbCcpIHtcbiAgICAgIGlzSFRNTCA9IHRydWU7XG4gICAgICBkb2N1bWVudCA9IG5ldyBIVE1MRG9jdW1lbnQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKG1pbWVUeXBlID09PSAnaW1hZ2Uvc3ZnK3htbCcpXG4gICAgICBkb2N1bWVudCA9IG5ldyBTVkdEb2N1bWVudDtcbiAgICBlbHNlXG4gICAgICBkb2N1bWVudCA9IG5ldyBYTUxEb2N1bWVudDtcbiAgICBkb2N1bWVudFtET01fUEFSU0VSXSA9IERPTVBhcnNlcjtcbiAgICBpZiAoZ2xvYmFscylcbiAgICAgIGRvY3VtZW50W0dMT0JBTFNdID0gZ2xvYmFscztcbiAgICBpZiAoaXNIVE1MICYmIG1hcmt1cExhbmd1YWdlID09PSAnLi4uJylcbiAgICAgIG1hcmt1cExhbmd1YWdlID0gJzwhZG9jdHlwZSBodG1sPjxodG1sPjxoZWFkPjwvaGVhZD48Ym9keT48L2JvZHk+PC9odG1sPic7XG4gICAgcmV0dXJuIG1hcmt1cExhbmd1YWdlID9cbiAgICAgICAgICAgIHBhcnNlRnJvbVN0cmluZyhkb2N1bWVudCwgaXNIVE1MLCBtYXJrdXBMYW5ndWFnZSkgOlxuICAgICAgICAgICAgZG9jdW1lbnQ7XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIE5PREVfRU5ELFxuICBFTEVNRU5UX05PREUsXG4gIEFUVFJJQlVURV9OT0RFLFxuICBURVhUX05PREUsXG4gIENEQVRBX1NFQ1RJT05fTk9ERSxcbiAgQ09NTUVOVF9OT0RFLFxuICBET0NVTUVOVF9OT0RFLFxuICBET0NVTUVOVF9UWVBFX05PREUsXG4gIERPQ1VNRU5UX0ZSQUdNRU5UX05PREVcbn0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuXG5pbXBvcnQge0VORCwgUFJFVn0gZnJvbSAnLi9zeW1ib2xzLmpzJztcblxuaW1wb3J0IHtodG1sQ2xhc3Nlc30gZnJvbSAnLi9yZWdpc3Rlci1odG1sLWNsYXNzLmpzJztcbmltcG9ydCB7a25vd25Cb3VuZGFyaWVzLCBrbm93blNpYmxpbmdzfSBmcm9tICcuL3V0aWxzLmpzJztcblxuaW1wb3J0IHtBdHRyfSBmcm9tICcuLi9pbnRlcmZhY2UvYXR0ci5qcyc7XG5pbXBvcnQge0NEQVRBU2VjdGlvbn0gZnJvbSAnLi4vaW50ZXJmYWNlL2NkYXRhLXNlY3Rpb24uanMnO1xuaW1wb3J0IHtDb21tZW50fSBmcm9tICcuLi9pbnRlcmZhY2UvY29tbWVudC5qcyc7XG5pbXBvcnQge0RvY3VtZW50VHlwZX0gZnJvbSAnLi4vaW50ZXJmYWNlL2RvY3VtZW50LXR5cGUuanMnO1xuaW1wb3J0IHtUZXh0fSBmcm9tICcuLi9pbnRlcmZhY2UvdGV4dC5qcyc7XG5cbmltcG9ydCB7SFRNTERvY3VtZW50fSBmcm9tICcuLi9odG1sL2RvY3VtZW50LmpzJztcbmltcG9ydCB7SFRNTEVsZW1lbnR9IGZyb20gJy4uL2h0bWwvZWxlbWVudC5qcyc7XG5pbXBvcnQge1NWR0VsZW1lbnR9IGZyb20gJy4uL3N2Zy9lbGVtZW50LmpzJztcblxuY29uc3Qge3BhcnNlfSA9IEpTT047XG5cbmNvbnN0IGFwcGVuZCA9IChwYXJlbnROb2RlLCBub2RlLCBlbmQpID0+IHtcbiAgbm9kZS5wYXJlbnROb2RlID0gcGFyZW50Tm9kZTtcbiAga25vd25TaWJsaW5ncyhlbmRbUFJFVl0sIG5vZGUsIGVuZCk7XG59O1xuXG5jb25zdCBjcmVhdGVIVE1MRWxlbWVudCA9IChvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpID0+IHtcbiAgaWYgKGh0bWxDbGFzc2VzLmhhcyhsb2NhbE5hbWUpKSB7XG4gICAgY29uc3QgQ2xhc3MgPSBodG1sQ2xhc3Nlcy5nZXQobG9jYWxOYW1lKTtcbiAgICByZXR1cm4gbmV3IENsYXNzKG93bmVyRG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBIVE1MRWxlbWVudChvd25lckRvY3VtZW50LCBsb2NhbE5hbWUpO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7bnVtYmVyfHN0cmluZ30ganNkb25WYWx1ZSAtIGVpdGhlciBhIG5vZGUgdHlwZSBvciBpdHMgY29udGVudFxuICovXG5cbi8qKlxuICogR2l2ZW4gYSBzdHJpbmdpZmllZCwgb3IgYXJyYXlmaWVkIERPTSBlbGVtZW50LCByZXR1cm5zIGFuIEhUTUxEb2N1bWVudFxuICogdGhhdCByZXByZXNlbnQgdGhlIGNvbnRlbnQgb2Ygc3VjaCBzdHJpbmcsIG9yIGFycmF5LlxuICogQHBhcmFtIHtzdHJpbmd8anNkb25WYWx1ZVtdfSB2YWx1ZVxuICogQHJldHVybnMge0hUTUxEb2N1bWVudH1cbiAqL1xuZXhwb3J0IGNvbnN0IHBhcnNlSlNPTiA9IHZhbHVlID0+IHtcbiAgY29uc3QgYXJyYXkgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gcGFyc2UodmFsdWUpIDogdmFsdWU7XG4gIGNvbnN0IHtsZW5ndGh9ID0gYXJyYXk7XG4gIGNvbnN0IGRvY3VtZW50ID0gbmV3IEhUTUxEb2N1bWVudDtcbiAgbGV0IHBhcmVudE5vZGUgPSBkb2N1bWVudCwgZW5kID0gcGFyZW50Tm9kZVtFTkRdLCBzdmcgPSBmYWxzZSwgaSA9IDA7XG4gIHdoaWxlIChpIDwgbGVuZ3RoKSB7XG4gICAgbGV0IG5vZGVUeXBlID0gYXJyYXlbaSsrXTtcbiAgICBzd2l0Y2ggKG5vZGVUeXBlKSB7XG4gICAgICBjYXNlIEVMRU1FTlRfTk9ERToge1xuICAgICAgICBjb25zdCBsb2NhbE5hbWUgPSBhcnJheVtpKytdO1xuICAgICAgICBjb25zdCBpc1NWRyA9IHN2ZyB8fCBsb2NhbE5hbWUgPT09ICdzdmcnIHx8IGxvY2FsTmFtZSA9PT0gJ1NWRyc7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBpc1NWRyA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTVkdFbGVtZW50KGRvY3VtZW50LCBsb2NhbE5hbWUsIHBhcmVudE5vZGUub3duZXJTVkdFbGVtZW50IHx8IG51bGwpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlSFRNTEVsZW1lbnQoZG9jdW1lbnQsIGxvY2FsTmFtZSk7XG4gICAgICAgIGtub3duQm91bmRhcmllcyhlbmRbUFJFVl0sIGVsZW1lbnQsIGVuZCk7XG4gICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZSA9IHBhcmVudE5vZGU7XG4gICAgICAgIHBhcmVudE5vZGUgPSBlbGVtZW50O1xuICAgICAgICBlbmQgPSBwYXJlbnROb2RlW0VORF07XG4gICAgICAgIHN2ZyA9IGlzU1ZHO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgQVRUUklCVVRFX05PREU6IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGFycmF5W2krK107XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdHlwZW9mIGFycmF5W2ldID09PSAnc3RyaW5nJyA/IGFycmF5W2krK10gOiAnJztcbiAgICAgICAgY29uc3QgYXR0ciA9IG5ldyBBdHRyKGRvY3VtZW50LCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIGF0dHIub3duZXJFbGVtZW50ID0gcGFyZW50Tm9kZTtcbiAgICAgICAga25vd25TaWJsaW5ncyhlbmRbUFJFVl0sIGF0dHIsIGVuZCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBURVhUX05PREU6XG4gICAgICAgIGFwcGVuZChwYXJlbnROb2RlLCBuZXcgVGV4dChkb2N1bWVudCwgYXJyYXlbaSsrXSksIGVuZCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDT01NRU5UX05PREU6XG4gICAgICAgIGFwcGVuZChwYXJlbnROb2RlLCBuZXcgQ29tbWVudChkb2N1bWVudCwgYXJyYXlbaSsrXSksIGVuZCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDREFUQV9TRUNUSU9OX05PREU6XG4gICAgICAgIGFwcGVuZChwYXJlbnROb2RlLCBuZXcgQ0RBVEFTZWN0aW9uKGRvY3VtZW50LCBhcnJheVtpKytdKSwgZW5kKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERPQ1VNRU5UX1RZUEVfTk9ERToge1xuICAgICAgICBjb25zdCBhcmdzID0gW2RvY3VtZW50XTtcbiAgICAgICAgd2hpbGUgKHR5cGVvZiBhcnJheVtpXSA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgYXJncy5wdXNoKGFycmF5W2krK10pO1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDMgJiYgL1xcLmR0ZCQvaS50ZXN0KGFyZ3NbMl0pKVxuICAgICAgICAgIGFyZ3Muc3BsaWNlKDIsIDAsICcnKTtcbiAgICAgICAgYXBwZW5kKHBhcmVudE5vZGUsIG5ldyBEb2N1bWVudFR5cGUoLi4uYXJncyksIGVuZCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFOlxuICAgICAgICBwYXJlbnROb2RlID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICBlbmQgPSBwYXJlbnROb2RlW0VORF07XG4gICAgICAvKiBlc2xpbnQgbm8tZmFsbHRocm91Z2g6MCAqL1xuICAgICAgY2FzZSBET0NVTUVOVF9OT0RFOlxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBub2RlVHlwZSAtPSBOT0RFX0VORDtcbiAgICAgICAgICBpZiAoc3ZnICYmICFwYXJlbnROb2RlLm93bmVyU1ZHRWxlbWVudClcbiAgICAgICAgICAgIHN2ZyA9IGZhbHNlO1xuICAgICAgICAgIHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudE5vZGUgfHwgcGFyZW50Tm9kZTtcbiAgICAgICAgfSB3aGlsZSAobm9kZVR5cGUgPCAwKTtcbiAgICAgICAgZW5kID0gcGFyZW50Tm9kZVtFTkRdO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3dpdGNoIChpICYmIGFycmF5WzBdKSB7XG4gICAgY2FzZSBFTEVNRU5UX05PREU6XG4gICAgICByZXR1cm4gZG9jdW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgY2FzZSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFOlxuICAgICAgcmV0dXJuIHBhcmVudE5vZGU7XG4gIH1cbiAgcmV0dXJuIGRvY3VtZW50O1xufTtcblxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7RG9jdW1lbnR8RWxlbWVudH0gbm9kZSB0aGUgRG9jdW1lbnQgb3IgRWxlbWVudCB0byBzZXJpYWxpemVcbiAqIEByZXR1cm5zIHtqc2RvblZhbHVlW119IHRoZSBsaW5lYXIganNkb24gc2VyaWFsaXplZCBhcnJheVxuICovXG5leHBvcnQgY29uc3QgdG9KU09OID0gbm9kZSA9PiBub2RlLnRvSlNPTigpO1xuIiwiaW1wb3J0IHtET01QYXJzZXJ9IGZyb20gJy4vZG9tL3BhcnNlci5qcyc7XG5pbXBvcnQge0RvY3VtZW50IGFzIF9Eb2N1bWVudH0gZnJvbSAnLi9pbnRlcmZhY2UvZG9jdW1lbnQuanMnO1xuXG5pbXBvcnQge2lsbGVnYWxDb25zdHJ1Y3Rvcn0gZnJvbSAnLi9zaGFyZWQvZmFjYWRlcy5qcyc7XG5pbXBvcnQge3NldFByb3RvdHlwZU9mfSBmcm9tICcuL3NoYXJlZC9vYmplY3QuanMnO1xuZXhwb3J0IHtwYXJzZUpTT04sIHRvSlNPTn0gZnJvbSAnLi9zaGFyZWQvcGFyc2UtanNvbi5qcyc7XG5cbmV4cG9ydCAqIGZyb20gJy4vc2hhcmVkL2ZhY2FkZXMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9zaGFyZWQvaHRtbC1jbGFzc2VzLmpzJztcblxuZXhwb3J0IHtET01QYXJzZXJ9O1xuXG5leHBvcnQge0N1c3RvbUV2ZW50fSBmcm9tICcuL2ludGVyZmFjZS9jdXN0b20tZXZlbnQuanMnO1xuZXhwb3J0IHtFdmVudH0gZnJvbSAnLi9pbnRlcmZhY2UvZXZlbnQuanMnO1xuZXhwb3J0IHtFdmVudFRhcmdldH0gZnJvbSAnLi9pbnRlcmZhY2UvZXZlbnQtdGFyZ2V0LmpzJztcbmV4cG9ydCB7SW5wdXRFdmVudH0gZnJvbSAnLi9pbnRlcmZhY2UvaW5wdXQtZXZlbnQuanMnO1xuZXhwb3J0IHtOb2RlTGlzdH0gZnJvbSAnLi9pbnRlcmZhY2Uvbm9kZS1saXN0LmpzJztcbmV4cG9ydCB7Tm9kZUZpbHRlcn0gZnJvbSAnLi9pbnRlcmZhY2Uvbm9kZS1maWx0ZXIuanMnO1xuXG5leHBvcnQgY29uc3QgcGFyc2VIVE1MID0gKGh0bWwsIGdsb2JhbHMgPSBudWxsKSA9PiAobmV3IERPTVBhcnNlcikucGFyc2VGcm9tU3RyaW5nKFxuICBodG1sLCAndGV4dC9odG1sJywgZ2xvYmFsc1xuKS5kZWZhdWx0VmlldztcblxuZXhwb3J0IGZ1bmN0aW9uIERvY3VtZW50KCkge1xuICBpbGxlZ2FsQ29uc3RydWN0b3IoKTtcbn1cblxuc2V0UHJvdG90eXBlT2YoRG9jdW1lbnQsIF9Eb2N1bWVudCkucHJvdG90eXBlID0gX0RvY3VtZW50LnByb3RvdHlwZTtcbiIsImNvbnN0IHJhbmRvbVVVSUQgPSB0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiBjcnlwdG8ucmFuZG9tVVVJRCAmJiBjcnlwdG8ucmFuZG9tVVVJRC5iaW5kKGNyeXB0byk7XG5leHBvcnQgZGVmYXVsdCB7IHJhbmRvbVVVSUQgfTtcbiIsImxldCBnZXRSYW5kb21WYWx1ZXM7XG5jb25zdCBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJuZygpIHtcbiAgICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgICAgICBpZiAodHlwZW9mIGNyeXB0byA9PT0gJ3VuZGVmaW5lZCcgfHwgIWNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY3J5cHRvLmdldFJhbmRvbVZhbHVlcygpIG5vdCBzdXBwb3J0ZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQjZ2V0cmFuZG9tdmFsdWVzLW5vdC1zdXBwb3J0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBnZXRSYW5kb21WYWx1ZXMgPSBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKTtcbiAgICB9XG4gICAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG59XG4iLCJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG5jb25zdCBieXRlVG9IZXggPSBbXTtcbmZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc2xpY2UoMSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgICByZXR1cm4gKGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMF1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDJdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgM11dICtcbiAgICAgICAgJy0nICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA0XV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDVdXSArXG4gICAgICAgICctJyArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNl1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA3XV0gK1xuICAgICAgICAnLScgK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDhdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOV1dICtcbiAgICAgICAgJy0nICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMF1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMV1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMl1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxM11dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNF1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNV1dKS50b0xvd2VyQ2FzZSgpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICAgIGNvbnN0IHV1aWQgPSB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQpO1xuICAgIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmdpZmllZCBVVUlEIGlzIGludmFsaWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHV1aWQ7XG59XG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnk7XG4iLCJpbXBvcnQgbmF0aXZlIGZyb20gJy4vbmF0aXZlLmpzJztcbmltcG9ydCBybmcgZnJvbSAnLi9ybmcuanMnO1xuaW1wb3J0IHsgdW5zYWZlU3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgICBpZiAobmF0aXZlLnJhbmRvbVVVSUQgJiYgIWJ1ZiAmJiAhb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmF0aXZlLnJhbmRvbVVVSUQoKTtcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgY29uc3Qgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7XG4gICAgcm5kc1s2XSA9IChybmRzWzZdICYgMHgwZikgfCAweDQwO1xuICAgIHJuZHNbOF0gPSAocm5kc1s4XSAmIDB4M2YpIHwgMHg4MDtcbiAgICBpZiAoYnVmKSB7XG4gICAgICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgICAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHJuZHNbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG4gICAgcmV0dXJuIHVuc2FmZVN0cmluZ2lmeShybmRzKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHY0O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSB1c2VkICdtb2R1bGUnIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOTkpO1xuIl0sIm5hbWVzIjpbIndlYnBhY2tRdWV1ZXMiLCJ3ZWJwYWNrRXhwb3J0cyIsIndlYnBhY2tFcnJvciIsInJlc29sdmVRdWV1ZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0cnVlRnVuYyIsImZhbHNlRnVuYyIsIkNTU09NIiwiQ1NTUnVsZSIsIkNTU0dyb3VwaW5nUnVsZSIsImNhbGwiLCJ0aGlzIiwiY3NzUnVsZXMiLCJDU1NDb25kaXRpb25SdWxlIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJjb25kaXRpb25UZXh0IiwiY3NzVGV4dCIsIk1hdGNoZXJMaXN0IiwibWF0Y2hlciIsIkNTU0RvY3VtZW50UnVsZSIsInR5cGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsImNzc1RleHRzIiwiaSIsImxlbmd0aCIsInB1c2giLCJtYXRjaGVyVGV4dCIsImpvaW4iLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwic3R5bGUiLCJwYXJlbnRSdWxlIiwiQ1NTRm9udEZhY2VSdWxlIiwiaW5zZXJ0UnVsZSIsInJ1bGUiLCJpbmRleCIsIlJhbmdlRXJyb3IiLCJjc3NSdWxlIiwicGFyc2UiLCJzcGxpY2UiLCJkZWxldGVSdWxlIiwiQ1NTSG9zdFJ1bGUiLCJDU1NTdHlsZVNoZWV0IiwiTWVkaWFMaXN0IiwiaHJlZiIsIm1lZGlhIiwic3R5bGVTaGVldCIsIkNTU0ltcG9ydFJ1bGUiLCJtZWRpYVRleHQiLCJzZXQiLCJjaGFyYWN0ZXIiLCJzdGF0ZSIsImJ1ZmZlciIsImNoYXJBdCIsImluZGV4T2YiLCJ1cmwiLCJzbGljZSIsInRyaW0iLCJrZXlUZXh0IiwiQ1NTS2V5ZnJhbWVSdWxlIiwibmFtZSIsIkNTU0tleWZyYW1lc1J1bGUiLCJfdmVuZG9yUHJlZml4IiwiQ1NTTWVkaWFSdWxlIiwiZGVmaW5lUHJvcGVydGllcyIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsInBhcmVudFN0eWxlU2hlZXQiLCJVTktOT1dOX1JVTEUiLCJTVFlMRV9SVUxFIiwiQ0hBUlNFVF9SVUxFIiwiSU1QT1JUX1JVTEUiLCJNRURJQV9SVUxFIiwiRk9OVF9GQUNFX1JVTEUiLCJQQUdFX1JVTEUiLCJLRVlGUkFNRVNfUlVMRSIsIktFWUZSQU1FX1JVTEUiLCJNQVJHSU5fUlVMRSIsIk5BTUVTUEFDRV9SVUxFIiwiQ09VTlRFUl9TVFlMRV9SVUxFIiwiU1VQUE9SVFNfUlVMRSIsIkRPQ1VNRU5UX1JVTEUiLCJGT05UX0ZFQVRVUkVfVkFMVUVTX1JVTEUiLCJWSUVXUE9SVF9SVUxFIiwiUkVHSU9OX1NUWUxFX1JVTEUiLCJfaW1wb3J0YW50cyIsImdldFByb3BlcnR5VmFsdWUiLCJzZXRQcm9wZXJ0eSIsInByaW9yaXR5IiwiQXJyYXkiLCJyZW1vdmVQcm9wZXJ0eSIsInByZXZWYWx1ZSIsImdldFByb3BlcnR5Q1NTVmFsdWUiLCJnZXRQcm9wZXJ0eVByaW9yaXR5IiwiZ2V0UHJvcGVydHlTaG9ydGhhbmQiLCJpc1Byb3BlcnR5SW1wbGljaXQiLCJwcm9wZXJ0aWVzIiwidGV4dCIsImR1bW15UnVsZSIsInNlbGVjdG9yVGV4dCIsIkNTU1N0eWxlUnVsZSIsInJ1bGVUZXh0IiwiaiIsIlNJR05JRklDQU5UX1dISVRFU1BBQ0UiLCJzdHlsZVJ1bGUiLCJTeW50YXhFcnJvciIsIlN0eWxlU2hlZXQiLCJ0b1N0cmluZyIsInJlc3VsdCIsInJ1bGVzIiwiQ1NTU3VwcG9ydHNSdWxlIiwiQ1NTVmFsdWUiLCJfZ2V0Q29uc3RydWN0b3JOYW1lIiwiRXJyb3IiLCJtYXRjaCIsInRva2VuIiwiaWR4IiwiX3Rva2VuIiwiX2lkeCIsIkNTU1ZhbHVlRXhwcmVzc2lvbiIsImluZm8iLCJleHByZXNzaW9uIiwiZXJyb3IiLCJwYXJlbiIsInBvcCIsIl9wYXJzZUpTQ29tbWVudCIsIl9wYXJzZUpTUmV4RXhwIiwiX3BhcnNlSlNTdHJpbmciLCJuZXh0Q2hhciIsImVuZElkeCIsImNvbW1lbnRFbmRDaGFyIiwic3RhcnRJZHgiLCJzdWJzdHJpbmciLCJzZXAiLCJfZmluZE1hdGNoZWRJZHgiLCJiZWZvcmUiLCJyZXBsYWNlIiwic29tZSIsInJlZyIsInRlc3QiLCJtYXRjaGVkIiwidmFsdWVzIiwic3BsaXQiLCJhcHBlbmRNYXRjaGVyIiwiZGVsZXRlTWF0Y2hlciIsImFwcGVuZE1lZGl1bSIsIm1lZGl1bSIsImRlbGV0ZU1lZGl1bSIsImNsb25lIiwic3R5bGVzaGVldCIsImNsb25lZCIsInJ1bGVzTGVuZ3RoIiwicnVsZUNsb25lIiwic3R5bGVDbG9uZSIsInN0eWxlTGVuZ3RoIiwiaGFzT3duUHJvcGVydHkiLCJlIiwicHJldlNjb3BlIiwibWVkaWFSdWxlIiwic3VwcG9ydHNSdWxlIiwiaW1wb3J0UnVsZSIsImZvbnRGYWNlUnVsZSIsImtleWZyYW1lc1J1bGUiLCJkb2N1bWVudFJ1bGUiLCJob3N0UnVsZSIsInZhbHVlUGFyZW50aGVzaXNEZXB0aCIsImN1cnJlbnRTY29wZSIsImFuY2VzdG9yUnVsZXMiLCJoYXNBbmNlc3RvcnMiLCJhdEtleWZyYW1lc1JlZ0V4cCIsInBhcnNlRXJyb3IiLCJtZXNzYWdlIiwibGluZXMiLCJsaW5lQ291bnQiLCJjaGFyQ291bnQiLCJsaW5lIiwiX19zdGFydHMiLCJsYXN0SW5kZXgiLCJtYXRjaEtleWZyYW1lcyIsImV4ZWMiLCJfX2VuZHMiLCJzIiwiYSIsIm8iLCJoIiwidSIsInIiLCJsIiwibiIsImNvZGUiLCJ0IiwiZCIsImMiLCJwIiwiZW5jb2RlIiwiZiIsImdldFR5cGVPZiIsImNoYXJDb2RlQXQiLCJkZWNvZGUiLCJzdWJzdHIiLCJ1aW50OGFycmF5IiwiVWludDhBcnJheSIsImNvbXByZXNzZWRTaXplIiwidW5jb21wcmVzc2VkU2l6ZSIsImNyYzMyIiwiY29tcHJlc3Npb24iLCJjb21wcmVzc2VkQ29udGVudCIsImdldENvbnRlbnRXb3JrZXIiLCJQcm9taXNlIiwicmVzb2x2ZSIsInBpcGUiLCJ1bmNvbXByZXNzV29ya2VyIiwib24iLCJzdHJlYW1JbmZvIiwiZGF0YV9sZW5ndGgiLCJnZXRDb21wcmVzc2VkV29ya2VyIiwid2l0aFN0cmVhbUluZm8iLCJjcmVhdGVXb3JrZXJGcm9tIiwiY29tcHJlc3NXb3JrZXIiLCJTVE9SRSIsIm1hZ2ljIiwiREVGTEFURSIsImJhc2U2NCIsImJpbmFyeSIsImRpciIsImNyZWF0ZUZvbGRlcnMiLCJkYXRlIiwiY29tcHJlc3Npb25PcHRpb25zIiwiY29tbWVudCIsInVuaXhQZXJtaXNzaW9ucyIsImRvc1Blcm1pc3Npb25zIiwibGllIiwiVWludDE2QXJyYXkiLCJVaW50MzJBcnJheSIsIl9wYWtvIiwiX3Bha29BY3Rpb24iLCJfcGFrb09wdGlvbnMiLCJtZXRhIiwiaW5oZXJpdHMiLCJwcm9jZXNzQ2h1bmsiLCJfY3JlYXRlUGFrbyIsInRyYW5zZm9ybVRvIiwiZGF0YSIsImZsdXNoIiwiY2xlYW5VcCIsInJhdyIsImxldmVsIiwib25EYXRhIiwicGFrbyIsIkEiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJmaWxlIiwiTyIsInV0ZjhlbmNvZGUiLCJJIiwibSIsIl8iLCJnIiwiYiIsInYiLCJ5IiwidyIsImsiLCJ4IiwiUyIsInoiLCJDIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiQiIsIkUiLCJmaWxlUmVjb3JkIiwiUiIsIkxPQ0FMX0ZJTEVfSEVBREVSIiwiZGlyUmVjb3JkIiwiQ0VOVFJBTF9GSUxFX0hFQURFUiIsImJ5dGVzV3JpdHRlbiIsInppcENvbW1lbnQiLCJ6aXBQbGF0Zm9ybSIsImVuY29kZUZpbGVOYW1lIiwic3RyZWFtRmlsZXMiLCJhY2N1bXVsYXRlIiwiY29udGVudEJ1ZmZlciIsImRpclJlY29yZHMiLCJjdXJyZW50U291cmNlT2Zmc2V0IiwiZW50cmllc0NvdW50IiwiY3VycmVudEZpbGUiLCJfc291cmNlcyIsInBlcmNlbnQiLCJvcGVuZWRTb3VyY2UiLCJjbG9zZWRTb3VyY2UiLCJEQVRBX0RFU0NSSVBUT1IiLCJzaGlmdCIsIkNFTlRSQUxfRElSRUNUT1JZX0VORCIsInByZXBhcmVOZXh0U291cmNlIiwicHJldmlvdXMiLCJpc1BhdXNlZCIsInBhdXNlIiwicmVzdW1lIiwicmVnaXN0ZXJQcmV2aW91cyIsImVuZCIsImdlbmVyYXRlZEVycm9yIiwibG9jayIsImdlbmVyYXRlV29ya2VyIiwicGxhdGZvcm0iLCJmb3JFYWNoIiwib3B0aW9ucyIsIl9jb21wcmVzc1dvcmtlciIsImFyZ3VtZW50cyIsImZpbGVzIiwiY3JlYXRlIiwicm9vdCIsImxvYWRBc3luYyIsInN1cHBvcnQiLCJkZWZhdWx0cyIsInZlcnNpb24iLCJleHRlcm5hbCIsImRlY29tcHJlc3NlZCIsImV4dGVuZCIsImNoZWNrQ1JDMzIiLCJvcHRpbWl6ZWRCaW5hcnlTdHJpbmciLCJkZWNvZGVGaWxlTmFtZSIsInV0ZjhkZWNvZGUiLCJpc05vZGUiLCJpc1N0cmVhbSIsInJlamVjdCIsInByZXBhcmVDb250ZW50IiwidGhlbiIsImxvYWQiLCJhbGwiLCJmaWxlTmFtZVN0ciIsImZpbGVDb21tZW50U3RyIiwidW5zYWZlT3JpZ2luYWxOYW1lIiwiX3Vwc3RyZWFtRW5kZWQiLCJfYmluZFN0cmVhbSIsIl9zdHJlYW0iLCJSZWFkYWJsZSIsIl9oZWxwZXIiLCJlbWl0IiwiX3JlYWQiLCJCdWZmZXIiLCJuZXdCdWZmZXJGcm9tIiwiZnJvbSIsImFsbG9jQnVmZmVyIiwiYWxsb2MiLCJmaWxsIiwiaXNCdWZmZXIiLCJEYXRlIiwidG9VcHBlckNhc2UiLCJwYXJzZUludCIsImxhc3RJbmRleE9mIiwiZmlsdGVyIiwiZm9sZGVyIiwicmVtb3ZlIiwiZ2VuZXJhdGUiLCJnZW5lcmF0ZUludGVybmFsU3RyZWFtIiwibWltZVR5cGUiLCJ0b0xvd2VyQ2FzZSIsImNoZWNrU3VwcG9ydCIsImdlbmVyYXRlQXN5bmMiLCJnZW5lcmF0ZU5vZGVTdHJlYW0iLCJ0b05vZGVqc1N0cmVhbSIsInN0cmVhbSIsImJ5dGVBdCIsInplcm8iLCJsYXN0SW5kZXhPZlNpZ25hdHVyZSIsInJlYWRBbmRDaGVja1NpZ25hdHVyZSIsInJlYWREYXRhIiwiY2hlY2tPZmZzZXQiLCJjaGVja0luZGV4Iiwic2V0SW5kZXgiLCJza2lwIiwicmVhZEludCIsInJlYWRTdHJpbmciLCJyZWFkRGF0ZSIsIlVUQyIsInN1YmFycmF5IiwiWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUiIsIlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORCIsImRlc3RUeXBlIiwicHJvcE5hbWUiLCJkYXRhSXNSZWFkeSIsIm1heCIsIl90aWNrU2NoZWR1bGVkIiwiX3RpY2tBbmRSZXBlYXQiLCJkZWxheSIsImlzRmluaXNoZWQiLCJfdGljayIsIk1hdGgiLCJtaW4iLCJleHRyYVN0cmVhbUluZm8iLCJpc0xvY2tlZCIsIl9saXN0ZW5lcnMiLCJtZXJnZVN0cmVhbUluZm8iLCJub2Rlc3RyZWFtIiwiX2ludGVybmFsVHlwZSIsIl9vdXRwdXRUeXBlIiwiX21pbWVUeXBlIiwiX3dvcmtlciIsIm5ld0Jsb2IiLCJjb25jYXQiLCJhcHBseSIsIm9iamVjdE1vZGUiLCJhcnJheSIsInN0cmluZyIsImFycmF5YnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJub2RlYnVmZmVyIiwiYmxvYiIsIkJsb2IiLCJzaXplIiwic2VsZiIsIkJsb2JCdWlsZGVyIiwiV2ViS2l0QmxvYkJ1aWxkZXIiLCJNb3pCbG9iQnVpbGRlciIsIk1TQmxvYkJ1aWxkZXIiLCJhcHBlbmQiLCJnZXRCbG9iIiwibGVmdE92ZXIiLCJhcHBseUZyb21DaGFyQ29kZSIsIlV0ZjhEZWNvZGVXb3JrZXIiLCJVdGY4RW5jb2RlV29ya2VyIiwic3RyaW5naWZ5QnlDaHVuayIsInN0cmluZ2lmeUJ5Q2hhciIsImFwcGx5Q2FuQmVVc2VkIiwiZmxvb3IiLCJieXRlTGVuZ3RoIiwiTUFYX1ZBTFVFXzE2QklUUyIsIk1BWF9WQUxVRV8zMkJJVFMiLCJwcmV0dHkiLCJzZXRJbW1lZGlhdGUiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwidGFyZ2V0Iiwib25lcnJvciIsInJlYWRBc0FycmF5QnVmZmVyIiwic2V0aW1tZWRpYXRlIiwibG9hZE9wdGlvbnMiLCJjaGVja1NpZ25hdHVyZSIsInJlYWRlciIsImlzU2lnbmF0dXJlIiwicmVhZEJsb2NrRW5kT2ZDZW50cmFsIiwiZGlza051bWJlciIsImRpc2tXaXRoQ2VudHJhbERpclN0YXJ0IiwiY2VudHJhbERpclJlY29yZHNPblRoaXNEaXNrIiwiY2VudHJhbERpclJlY29yZHMiLCJjZW50cmFsRGlyU2l6ZSIsImNlbnRyYWxEaXJPZmZzZXQiLCJ6aXBDb21tZW50TGVuZ3RoIiwicmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWwiLCJ6aXA2NEVuZE9mQ2VudHJhbFNpemUiLCJ6aXA2NEV4dGVuc2libGVEYXRhIiwiaWQiLCJyZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbExvY2F0b3IiLCJkaXNrV2l0aFppcDY0Q2VudHJhbERpclN0YXJ0IiwicmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpciIsImRpc2tzQ291bnQiLCJyZWFkTG9jYWxGaWxlcyIsImxvY2FsSGVhZGVyT2Zmc2V0IiwicmVhZExvY2FsUGFydCIsImhhbmRsZVVURjgiLCJwcm9jZXNzQXR0cmlidXRlcyIsInJlYWRDZW50cmFsRGlyIiwiemlwNjQiLCJyZWFkQ2VudHJhbFBhcnQiLCJyZWFkRW5kT2ZDZW50cmFsIiwiYWJzIiwicHJlcGFyZVJlYWRlciIsImlzRW5jcnlwdGVkIiwiYml0RmxhZyIsInVzZVVURjgiLCJmaWxlTmFtZUxlbmd0aCIsImZpbGVOYW1lIiwiY29tcHJlc3Npb25NZXRob2QiLCJ2ZXJzaW9uTWFkZUJ5IiwiZXh0cmFGaWVsZHNMZW5ndGgiLCJmaWxlQ29tbWVudExlbmd0aCIsImRpc2tOdW1iZXJTdGFydCIsImludGVybmFsRmlsZUF0dHJpYnV0ZXMiLCJleHRlcm5hbEZpbGVBdHRyaWJ1dGVzIiwicmVhZEV4dHJhRmllbGRzIiwicGFyc2VaSVA2NEV4dHJhRmllbGQiLCJmaWxlQ29tbWVudCIsImV4dHJhRmllbGRzIiwiZmluZEV4dHJhRmllbGRVbmljb2RlUGF0aCIsImZpbmRFeHRyYUZpZWxkVW5pY29kZUNvbW1lbnQiLCJfZGF0YSIsIl9kYXRhQmluYXJ5IiwiaW50ZXJuYWxTdHJlYW0iLCJfZGVjb21wcmVzc1dvcmtlciIsImFzeW5jIiwibm9kZVN0cmVhbSIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiZG9jdW1lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwiTWVzc2FnZUNoYW5uZWwiLCJjcmVhdGVFbGVtZW50Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiZG9jdW1lbnRFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJzZXRUaW1lb3V0IiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3J0MiIsInBvc3RNZXNzYWdlIiwid2luZG93IiwiVHlwZUVycm9yIiwicXVldWUiLCJvdXRjb21lIiwicHJvbWlzZSIsIm9uRnVsZmlsbGVkIiwiY2FsbEZ1bGZpbGxlZCIsIm90aGVyQ2FsbEZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYWxsUmVqZWN0ZWQiLCJvdGhlckNhbGxSZWplY3RlZCIsInN0YXR1cyIsImZpbmFsbHkiLCJjYXRjaCIsInJhY2UiLCJpbW1lZGlhdGUiLCJhc3NpZ24iLCJtZXRob2QiLCJjaHVua1NpemUiLCJ3aW5kb3dCaXRzIiwibWVtTGV2ZWwiLCJzdHJhdGVneSIsInRvIiwiZ3ppcCIsImVyciIsIm1zZyIsImVuZGVkIiwiY2h1bmtzIiwic3RybSIsImF2YWlsX291dCIsImRlZmxhdGVJbml0MiIsImhlYWRlciIsImRlZmxhdGVTZXRIZWFkZXIiLCJkaWN0aW9uYXJ5Iiwic3RyaW5nMmJ1ZiIsImRlZmxhdGVTZXREaWN0aW9uYXJ5IiwiX2RpY3Rfc2V0IiwiaW5wdXQiLCJuZXh0X2luIiwiYXZhaWxfaW4iLCJvdXRwdXQiLCJCdWY4IiwibmV4dF9vdXQiLCJkZWZsYXRlIiwib25FbmQiLCJidWYyYmluc3RyaW5nIiwic2hyaW5rQnVmIiwiZGVmbGF0ZUVuZCIsImZsYXR0ZW5DaHVua3MiLCJEZWZsYXRlIiwiZGVmbGF0ZVJhdyIsImluZmxhdGVJbml0MiIsIlpfT0siLCJpbmZsYXRlR2V0SGVhZGVyIiwiWl9GSU5JU0giLCJaX05PX0ZMVVNIIiwiYmluc3RyaW5nMmJ1ZiIsImluZmxhdGUiLCJaX05FRURfRElDVCIsImluZmxhdGVTZXREaWN0aW9uYXJ5IiwiWl9CVUZfRVJST1IiLCJaX1NUUkVBTV9FTkQiLCJaX1NZTkNfRkxVU0giLCJ1dGY4Ym9yZGVyIiwiYnVmMnN0cmluZyIsImFycmF5U2V0IiwiaW5mbGF0ZUVuZCIsIkluZmxhdGUiLCJpbmZsYXRlUmF3IiwidW5nemlwIiwiSW50MzJBcnJheSIsInNldFR5cGVkIiwiQnVmMTYiLCJCdWYzMiIsIlpfUEFSVElBTF9GTFVTSCIsIlpfRlVMTF9GTFVTSCIsIlpfQkxPQ0siLCJaX1RSRUVTIiwiWl9FUlJOTyIsIlpfU1RSRUFNX0VSUk9SIiwiWl9EQVRBX0VSUk9SIiwiWl9OT19DT01QUkVTU0lPTiIsIlpfQkVTVF9TUEVFRCIsIlpfQkVTVF9DT01QUkVTU0lPTiIsIlpfREVGQVVMVF9DT01QUkVTU0lPTiIsIlpfRklMVEVSRUQiLCJaX0hVRkZNQU5fT05MWSIsIlpfUkxFIiwiWl9GSVhFRCIsIlpfREVGQVVMVF9TVFJBVEVHWSIsIlpfQklOQVJZIiwiWl9URVhUIiwiWl9VTktOT1dOIiwiWl9ERUZMQVRFRCIsIlQiLCJEIiwiRiIsInBlbmRpbmciLCJwZW5kaW5nX2J1ZiIsInBlbmRpbmdfb3V0IiwidG90YWxfb3V0IiwiTiIsIl90cl9mbHVzaF9ibG9jayIsImJsb2NrX3N0YXJ0Iiwic3Ryc3RhcnQiLCJVIiwiUCIsIkwiLCJtYXhfY2hhaW5fbGVuZ3RoIiwicHJldl9sZW5ndGgiLCJuaWNlX21hdGNoIiwid19zaXplIiwid19tYXNrIiwicHJldiIsImdvb2RfbWF0Y2giLCJsb29rYWhlYWQiLCJtYXRjaF9zdGFydCIsIndpbmRvd19zaXplIiwiaGFzaF9zaXplIiwiaGVhZCIsIndyYXAiLCJhZGxlciIsInRvdGFsX2luIiwiaW5zZXJ0IiwiaW5zX2giLCJoYXNoX3NoaWZ0IiwiaGFzaF9tYXNrIiwiWiIsIm1hdGNoX2xlbmd0aCIsIl90cl90YWxseSIsIm1heF9sYXp5X21hdGNoIiwibGFzdF9saXQiLCJXIiwicHJldl9tYXRjaCIsIm1hdGNoX2F2YWlsYWJsZSIsIk0iLCJnb29kX2xlbmd0aCIsIm1heF9sYXp5IiwibmljZV9sZW5ndGgiLCJtYXhfY2hhaW4iLCJmdW5jIiwiSCIsInBlbmRpbmdfYnVmX3NpemUiLCJnemhlYWQiLCJnemluZGV4IiwibGFzdF9mbHVzaCIsIndfYml0cyIsImhhc2hfYml0cyIsImR5bl9sdHJlZSIsImR5bl9kdHJlZSIsImJsX3RyZWUiLCJsX2Rlc2MiLCJkX2Rlc2MiLCJibF9kZXNjIiwiYmxfY291bnQiLCJoZWFwIiwiaGVhcF9sZW4iLCJoZWFwX21heCIsImRlcHRoIiwibF9idWYiLCJsaXRfYnVmc2l6ZSIsImRfYnVmIiwib3B0X2xlbiIsInN0YXRpY19sZW4iLCJtYXRjaGVzIiwiYmlfYnVmIiwiYmlfdmFsaWQiLCJHIiwiZGF0YV90eXBlIiwiX3RyX2luaXQiLCJLIiwiWSIsImRlZmxhdGVJbml0IiwiZGVmbGF0ZVJlc2V0IiwiZGVmbGF0ZVJlc2V0S2VlcCIsImhjcmMiLCJleHRyYSIsInRpbWUiLCJvcyIsIl90cl9hbGlnbiIsIl90cl9zdG9yZWRfYmxvY2siLCJkZWZsYXRlSW5mbyIsInhmbGFncyIsImV4dHJhX2xlbiIsImRvbmUiLCJkbWF4Iiwid3NpemUiLCJ3aGF2ZSIsInduZXh0IiwiaG9sZCIsImJpdHMiLCJsZW5jb2RlIiwiZGlzdGNvZGUiLCJsZW5iaXRzIiwiZGlzdGJpdHMiLCJtb2RlIiwic2FuZSIsImxhc3QiLCJoYXZlZGljdCIsImZsYWdzIiwiY2hlY2siLCJ0b3RhbCIsIndiaXRzIiwib2Zmc2V0IiwibmNvZGUiLCJubGVuIiwibmRpc3QiLCJoYXZlIiwibmV4dCIsImxlbnMiLCJ3b3JrIiwibGVuZHluIiwiZGlzdGR5biIsImJhY2siLCJ3YXMiLCJpbmZsYXRlUmVzZXQiLCJpbmZsYXRlUmVzZXQyIiwiaW5mbGF0ZVJlc2V0S2VlcCIsImluZmxhdGVJbml0IiwiaW5mbGF0ZUluZm8iLCJzdGF0aWNfdHJlZSIsImV4dHJhX2JpdHMiLCJleHRyYV9iYXNlIiwiZWxlbXMiLCJtYXhfbGVuZ3RoIiwiaGFzX3N0cmVlIiwiZHluX3RyZWUiLCJtYXhfY29kZSIsInN0YXRfZGVzYyIsIlgiLCJWIiwicSIsIkoiLCJnZXRQcm90b3R5cGVPZiIsInByb2Nlc3MiLCJuZXh0VGljayIsImltcG9ydFNjcmlwdHMiLCJyYW5kb20iLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJGdW5jdGlvbiIsImNhbGxiYWNrIiwiYXJncyIsImNsZWFySW1tZWRpYXRlIiwic291cmNlIiwidXBsb2FkVGltZXIiLCJsYXN0VGltZXN0YW1wIiwibGFzdHVwbG9hZFRpbWVzdGFtcCIsImxhc3RHZW5lcmF0ZVByZXNpZ25lZFBvc3RSZXNwb25zZSIsImludGVyYWN0aW9uc191cmwiLCJnZW5lcmF0ZV9wcmVzaWduZWRfcG9zdF91cmwiLCJ0YWJOYXZpZ2F0aW9uSGlzdG9yeSIsImZldGNoQ2FydEluZm8iLCJwYXRoIiwic3RhcnQiLCJwZXJmb3JtYW5jZSIsIm5vdyIsInJlc3BvbnNlIiwiZmV0Y2giLCJodG1sQ29udGVudCIsIm1pZCIsImNvbnNvbGUiLCJsb2ciLCJwYXJzZUZyb21TdHJpbmciLCJyb290RWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJkZWZhdWx0VmlldyIsIkV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJIVE1MRWxlbWVudCIsImN1c3RvbUVsZW1lbnRzIiwicGFnZU1ldGEiLCJkYiIsInVwZ3JhZGUiLCJvYmplY3RTdG9yZU5hbWVzIiwiY29udGFpbnMiLCJpbnRlcmFjdGlvbnNTdG9yZSIsImNyZWF0ZU9iamVjdFN0b3JlIiwia2V5UGF0aCIsImF1dG9JbmNyZW1lbnQiLCJjcmVhdGVJbmRleCIsInVuaXF1ZSIsInNjcmVlbnNob3RzU3RvcmUiLCJyZWFzb25zQW5ub3RhdGlvblN0b3JlIiwiaHRtbFNuYXBzaG90c1N0b3JlIiwib3JkZXJTdG9yZSIsImFuYWx5emVOYXZpZ2F0aW9uIiwidGFiSWQiLCJiYWNrU3RhY2siLCJmb3J3YXJkU3RhY2siLCJjdXJyZW50VXJsIiwiaGlzdG9yeSIsInNhdmVTY3JlZW5zaG90X2lkYiIsInNjcmVlbnNob3REYXRhVXJsIiwidGltZXN0YW1wIiwidXVpZCIsInNjcmVlbnNob3REYXRhIiwic2NyZWVuc2hvdElkIiwiZGF0YVVybCIsImFkZCIsInVwbG9hZGVkIiwiY2FwdHVyZVNjcmVlbnNob3QiLCJ0YWIiLCJjaHJvbWUiLCJ0YWJzIiwicXVlcnkiLCJhY3RpdmUiLCJjdXJyZW50V2luZG93IiwiY2FwdHVyZVZpc2libGVUYWIiLCJ3aW5kb3dJZCIsImZvcm1hdCIsInF1YWxpdHkiLCJoYXNoQ29kZSIsInN0ciIsImhhc2giLCJydW50aW1lIiwib25NZXNzYWdlIiwiYWRkTGlzdGVuZXIiLCJzZW5kZXIiLCJzZW5kUmVzcG9uc2UiLCJhY3Rpb24iLCJodG1sZGF0YSIsImh0bWxTbmFwc2hvdElkIiwic2ltcGxpZmllZEhUTUwiLCJmZXRjaFVybCIsInNhdmVEYXRhIiwiZXZlbnRUeXBlIiwiY2FydEluZm8iLCJjYXJ0ZGF0YSIsIm1ldGFkYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsInNhdmVIVE1MIiwic2VuZFBvcHVwIiwic3VjY2VzcyIsImlzQXJyYXkiLCJ0eCIsInRyYW5zYWN0aW9uIiwic3RvcmUiLCJvYmplY3RTdG9yZSIsIm1hcCIsIml0ZW0iLCJnZXRUaW1lIiwidW5kZWZpbmVkIiwiZG93bmxvYWREYXRhTG9jYWxseSIsImNsZWFyUHJvbWlzZXMiLCJjbGVhciIsImN1cnJlbnRTbmFwc2hvdElkIiwic2F2ZUludGVyYWN0aW9uIiwidGFyZ2V0X3VybCIsIm5hdmlnYXRpb25UeXBlIiwid2luZG93U2l6ZSIsInNhdmVTY3JlZW5zaG90IiwiaW5jbHVkZXMiLCJjbGFzc05hbWUiLCJxdWVzdGlvbiIsInBsYWNlaG9sZGVyIiwicHJvYmFiaWxpdHkiLCJyZWFzb24iLCJzZW5kTWVzc2FnZSIsIm5ld2l0ZW0iLCJ0b0lTT1N0cmluZyIsInVzZXJfaWQiLCJzdG9yYWdlIiwibG9jYWwiLCJ1c2VySWQiLCJmb2xkZXJOYW1lIiwiaW50ZXJhY3Rpb25zVG9Eb3dubG9hZCIsImdldEFsbCIsImh0bWxTbmFwc2hvdHNUb0Rvd25sb2FkIiwib3JkZXJEZXRhaWxzVG9Eb3dubG9hZCIsInNjcmVlbnNob3RzVG9Eb3dubG9hZCIsInJlYXNvbnNBbm5vdGF0aW9uVG9Eb3dubG9hZCIsInppcCIsImZ1bGxEYXRhIiwiaW50ZXJhY3Rpb25zIiwicmVhc29ucyIsIm9yZGVyRGV0YWlscyIsImludGVyYWN0aW9uc19qc29uIiwic2NyZWVuc2hvdHNGb2xkZXIiLCJzY3JlZW5zaG90IiwiaHRtbFNuYXBzaG90c0ZvbGRlciIsInNuYXBzaG90IiwiemlwQmxvYiIsIm9ubG9hZGVuZCIsImJhc2U2NFppcCIsImRvd25sb2FkcyIsImRvd25sb2FkIiwiZmlsZW5hbWUiLCJzYXZlQXMiLCJyZWFkQXNEYXRhVVJMIiwiZGVsZXRlUHJvbWlzZXMiLCJkZWxldGUiLCJwcmVzaWduZWRGb3JtRGF0YSIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJrZXlzIiwiZmllbGRzIiwia2V5Iiwib25BY3RpdmF0ZWQiLCJhY3RpdmVJbmZvIiwiaHRtbCIsIndlYk5hdmlnYXRpb24iLCJvbkRPTUNvbnRlbnRMb2FkZWQiLCJkZXRhaWxzIiwiZnJhbWVJZCIsIm9uUmVtb3ZlZCIsInJlcXVlc3QiLCJiYXNlVVJMIiwiZ3ppcEh0bWwiLCJjb250ZW50IiwiY3MiLCJDb21wcmVzc2lvblN0cmVhbSIsIndyaXRlciIsIndyaXRhYmxlIiwiZ2V0V3JpdGVyIiwiZW5jb2RlZENvbnRlbnQiLCJUZXh0RW5jb2RlciIsIndyaXRlIiwiY2xvc2UiLCJSZXNwb25zZSIsInJlYWRhYmxlIiwic3RhcnRQZXJpb2RpY1VwbG9hZCIsInNldEludGVydmFsIiwidXBsb2FkRGF0YVRvU2VydmVyX25ldyIsImNsZWFySW50ZXJ2YWwiLCJsYXN0VXBsb2FkUmVzdWx0IiwiY3VycmVudFRpbWVzdGFtcCIsImxhc3RUaW1lc3RhbXBSZXN1bHQiLCJ1c2VyX2ludGVyYWN0aW9uX3RyYWNrZXJfbGFzdF90aW1lc3RhbXAiLCJpbnRlcmFjdGlvbnNUb1VwbG9hZCIsIklEQktleVJhbmdlIiwib25seSIsImh0bWxTbmFwc2hvdHNUb1VwbG9hZCIsIm9yZGVyRGV0YWlsc1RvVXBsb2FkIiwic2NyZWVuc2hvdHNUb1VwbG9hZCIsInJlYXNvbnNBbm5vdGF0aW9uVG9VcGxvYWQiLCJleHBpcmVfdGltZXN0YW1wIiwicG9zdFVybFJlc3VsdCIsInBhcmFtcyIsInNlc3Npb25JbmZvQ29udGVudCIsInNlc3Npb25JbmZvIiwic2Vzc2lvbkZvcm1EYXRhIiwic2Vzc2lvblVwbG9hZFByb21pc2UiLCJwb3N0IiwiaHRtbFVwbG9hZFByb21pc2VzIiwiaHRtbEJsb2IiLCJ1cGxvYWRQcm9taXNlcyIsInNpbXBsaWZpZWRIdG1sQmxvYiIsInNpbXBsaWZpZWRGb3JtRGF0YSIsInNjcmVlbnNob3RVcGxvYWRQcm9taXNlcyIsImludGVyYWN0aW9uc0Jsb2IiLCJqc29uRm9ybURhdGFGaWxlIiwianNvblVwbG9hZFByb21pc2UiLCJqc29uMmRiVXBsb2FkUHJvbWlzZSIsImhlYWRlcnMiLCJBY2NlcHQiLCJ1cGRhdGVQcm9taXNlcyIsInB1dCIsIm9uQ2hhbmdlZCIsImNoYW5nZXMiLCJoYXNBbWF6b25QYWdlIiwib25VcGRhdGVkIiwiY2hhbmdlSW5mbyIsImN1cnJlbnRVc2VySWQiLCJvayIsImpzb24iLCJwb3B1cF9wcm9iYWJpbGl0eSIsInBvcHVwX3Njcm9sbF9wcm9iYWJpbGl0eSIsInBvcHVwX2NsaWNrX3Byb2JhYmlsaXR5IiwicG9wdXBfbmF2aWdhdGlvbl9wcm9iYWJpbGl0eSIsInBvcHVwX3RhYkFjdGl2YXRlX3Byb2JhYmlsaXR5IiwiZm9sZGVyX25hbWUiLCJiYXNlX3VybCIsImRhdGFfY29sbGVjdG9yX3NlY3JldF9pZCIsInVybF9pbmNsdWRlcyIsInJhdGlvbmFsZV9zdGF0dXNfdXJsIiwiZmlsdGVyX3VybCIsIm5hdiIsInNlbGVjdG9yIiwiY2hpbGRyZW4iLCJjbGlja2FibGUiLCJnZW5lcmF0ZV9tZXRhZGF0YSIsImVtIiwidGVybSIsInRleHRfc2VsZWN0b3IiLCJhZGRfdGV4dCIsImNhcnRfc2lkZV9iYXIiLCJ0ZXh0X2pzIiwidGl0bGVFbSIsImFsdCIsInRleHRfZm9ybWF0IiwiYXNpbiIsImdldEF0dHJpYnV0ZSIsInByaWNlRW0iLCJwcmljZSIsImlubmVyVGV4dCIsInRpdGxlIiwidXJsRW0iLCJwYXJlbnRFbGVtZW50IiwicXVhbnRpdHlFbSIsInF1YW50aXR5IiwicHJvZHVjdF9mYWN0cyIsImNsYXNzIiwicHJvZHVjdF9kZWxpdmVyeSIsInF1YW50aXR5X3NlbGVjdG9yIiwidXNlX3Jvb3QiLCJhZGRfdG9fY2FydF9idXR0b24iLCJidXlfbm93X2J1dHRvbiIsImJ1eV9ib3hfd2l0aF9hY2NvcmRpb24iLCJidXlfYm94X3dpdGhvdXRfYWNjb3JkaW9uX2RlbGl2ZXJ5IiwiY2FydCIsImVsZW1lbnQiLCJoYXNBdHRyaWJ1dGUiLCJkZWxpdmVyeUVtIiwiZGVsaXZlcnkiLCJzZWxlY3RlZEVtIiwic2VsZWN0ZWQiLCJvcHRpb25zRW0iLCJxdWVyeVNlbGVjdG9yQWxsIiwib3B0aW9uRW0iLCJvcHRpb25LZXlFbSIsIm9wdGlvblZhbHVlRW0iLCJvcHRpb25LZXkiLCJvcHRpb25WYWx1ZSIsIm9wdGlvbiIsImZyZXNoX2Nhcm91c2VsX2NhcmQiLCJhc2luRW0iLCJyZWNpcGVzIiwibWF0Y2hfbWV0aG9kIiwibWF0Y2hfd2l0aF9yZWYiLCJhQ2hpbGQiLCJkaXJlY3RfY2hpbGQiLCJuYW1lRW0iLCJjbG9zZXN0IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJyYW5nZSIsImtlZXBfYXR0ciIsIm92ZXJyaWRlX2F0dHIiLCJzdGVwX3ZhbHVlcyIsImZvcm1FbSIsInByb3AiLCJzdGVwTGFiZWxzIiwiY3VycmVudF92YWx1ZSIsIk51bWJlciIsImluc2VydF9zcGxpdF9tYXJrZXIiLCJpbnNlcnRfc3BsaXRfbWFya2VyX2V2ZXJ5IiwiY2xpY2tfc2VsZWN0b3IiLCJtYXRjaF90ZXh0IiwibGFiZWwiLCJpbm5lckhUTUwiLCJpbWdDaGlsZCIsInRleHRFbSIsIm5leHRFbGVtZW50U2libGluZyIsImJ1bGxldF9saXN0IiwiZmV0Y2hfdXJsIiwidGVybWluYXRlIiwidGVybWluYXRlX2NhbGxiYWNrIiwiY2hlY2tlZCIsInBhcmVudFRpdGxlRW0iLCJwYXJlbnRUaXRsZSIsInByb2Nlc3NFbGVtZW50IiwicmVjaXBlIiwicGFyZW50TmFtZSIsIm50aENoaWxkIiwiZ2xvYmFsVGhpcyIsInRhZ05hbWUiLCJ0YWdfbmFtZSIsImVuZHNXaXRoIiwibmV3RWxlbWVudCIsImVsZW1lbnRUZXh0IiwidGV4dEVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsImVsZW1lbnROYW1lIiwic2V0QXR0cmlidXRlIiwibWV0YW9iaiIsIm1ldGFuYW1lIiwiY2xpY2tfZWxlbWVudCIsImNsaWNrYWJsZV9yZWNpcGVzIiwiaW5wdXRUeXBlIiwiaW5wdXRfcmVjaXBlcyIsInNlbGVjdElkIiwidGFnIiwibmV3VGFnIiwib3B0aW9uTmFtZSIsIm5ld09wdGlvbiIsImF0dHIiLCJjaGlsZFJlY2lwZSIsImNoaWxkRWxlbWVudHMiLCJjaGlsZEVsZW1lbnQiLCJjaGlsZE5vZGUiLCJzcGxpdE1hcmtlciIsImVtcHR5X21lc3NhZ2UiLCJlbXB0eVRleHROb2RlIiwidXBkYXRlX2ljb24iLCJzaG91bGRFeGNsdWRlIiwic2V0SWNvbiIsImZpbmRQYWdlTWV0YSIsImFsbF9lbGVtZW50X3dpdGhfbWV0YV9kYXRhIiwiZ3JvdXBlZFJlc3VsdCIsIm1ldGFOYW1lIiwibWV0YURhdGEiLCJpZ25vcmVVc2VySWQiLCJoYW5kbGVNZXNzYWdlIiwiZXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaW5jbHVkZVVybCIsImV4Y2x1ZGVVcmwiLCJwcm9jZXNzUmVjaXBlIiwicGFyc2VkVXJsIiwiVVJMIiwibG9jYXRpb24iLCJwYXRobmFtZSIsIm1hdGNoTWV0aG9kIiwic3RhcnRzV2l0aCIsInNlbGVjdFJlY2lwZSIsIm91dGVySFRNTCIsImdldEN1c3RvbVF1ZXN0aW9uIiwiQ2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJnZXRDb250ZXh0IiwidG9EYXRhVVJMIiwiY3JlYXRlQ2FudmFzIiwiZmFsbGJhY2siLCJiaW5kIiwiZm4iLCJ0aGlzQXJnIiwia2luZE9mIiwiY2FjaGUiLCJ0aGluZyIsImtpbmRPZlRlc3QiLCJ0eXBlT2ZUZXN0IiwiaXNVbmRlZmluZWQiLCJpc0FycmF5QnVmZmVyIiwiaXNTdHJpbmciLCJpc0Z1bmN0aW9uIiwiaXNOdW1iZXIiLCJpc09iamVjdCIsImlzUGxhaW5PYmplY3QiLCJ2YWwiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsIml0ZXJhdG9yIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNGaWxlTGlzdCIsImlzVVJMU2VhcmNoUGFyYW1zIiwiaXNSZWFkYWJsZVN0cmVhbSIsImlzUmVxdWVzdCIsImlzUmVzcG9uc2UiLCJpc0hlYWRlcnMiLCJvYmoiLCJhbGxPd25LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImxlbiIsImZpbmRLZXkiLCJfa2V5IiwiX2dsb2JhbCIsImdsb2JhbCIsImlzQ29udGV4dERlZmluZWQiLCJjb250ZXh0IiwiaXNUeXBlZEFycmF5IiwiVHlwZWRBcnJheSIsImlzSFRNTEZvcm0iLCJpc1JlZ0V4cCIsInJlZHVjZURlc2NyaXB0b3JzIiwicmVkdWNlciIsImRlc2NyaXB0b3JzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsInJlZHVjZWREZXNjcmlwdG9ycyIsImRlc2NyaXB0b3IiLCJyZXQiLCJBTFBIQSIsIkRJR0lUIiwiQUxQSEFCRVQiLCJBTFBIQV9ESUdJVCIsImlzQXN5bmNGbiIsIl9zZXRJbW1lZGlhdGUiLCJzZXRJbW1lZGlhdGVTdXBwb3J0ZWQiLCJwb3N0TWVzc2FnZVN1cHBvcnRlZCIsImNhbGxiYWNrcyIsImNiIiwiYXNhcCIsInF1ZXVlTWljcm90YXNrIiwiaXNGb3JtRGF0YSIsImtpbmQiLCJpc0FycmF5QnVmZmVyVmlldyIsImlzVmlldyIsImlzQm9vbGVhbiIsIm1lcmdlIiwiY2FzZWxlc3MiLCJhc3NpZ25WYWx1ZSIsInRhcmdldEtleSIsInN0cmlwQk9NIiwic3VwZXJDb25zdHJ1Y3RvciIsInByb3BzIiwidG9GbGF0T2JqZWN0Iiwic291cmNlT2JqIiwiZGVzdE9iaiIsInByb3BGaWx0ZXIiLCJtZXJnZWQiLCJzZWFyY2hTdHJpbmciLCJwb3NpdGlvbiIsInRvQXJyYXkiLCJhcnIiLCJmb3JFYWNoRW50cnkiLCJwYWlyIiwibWF0Y2hBbGwiLCJyZWdFeHAiLCJoYXNPd25Qcm9wIiwiZnJlZXplTWV0aG9kcyIsInRvT2JqZWN0U2V0IiwiYXJyYXlPclN0cmluZyIsImRlbGltaXRlciIsImRlZmluZSIsInRvQ2FtZWxDYXNlIiwicDEiLCJwMiIsIm5vb3AiLCJ0b0Zpbml0ZU51bWJlciIsImRlZmF1bHRWYWx1ZSIsImlzRmluaXRlIiwiZ2VuZXJhdGVTdHJpbmciLCJhbHBoYWJldCIsImlzU3BlY0NvbXBsaWFudEZvcm0iLCJ0b0pTT05PYmplY3QiLCJzdGFjayIsInZpc2l0IiwicmVkdWNlZFZhbHVlIiwiaXNUaGVuYWJsZSIsIkF4aW9zRXJyb3IiLCJjb25maWciLCJjYXB0dXJlU3RhY2tUcmFjZSIsInV0aWxzIiwidG9KU09OIiwiZGVzY3JpcHRpb24iLCJudW1iZXIiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwiY3VzdG9tUHJvcHMiLCJheGlvc0Vycm9yIiwiY2F1c2UiLCJpc1Zpc2l0YWJsZSIsInJlbW92ZUJyYWNrZXRzIiwicmVuZGVyS2V5IiwiZG90cyIsInByZWRpY2F0ZXMiLCJtZXRhVG9rZW5zIiwiaW5kZXhlcyIsInZpc2l0b3IiLCJkZWZhdWx0VmlzaXRvciIsInVzZUJsb2IiLCJjb252ZXJ0VmFsdWUiLCJpc0ZsYXRBcnJheSIsImVsIiwiZXhwb3NlZEhlbHBlcnMiLCJidWlsZCIsImNoYXJNYXAiLCJlbmNvZGVVUklDb21wb25lbnQiLCJBeGlvc1VSTFNlYXJjaFBhcmFtcyIsIl9wYWlycyIsImVuY29kZXIiLCJfZW5jb2RlIiwiYnVpbGRVUkwiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVGbiIsInNlcmlhbGl6ZWRQYXJhbXMiLCJoYXNobWFya0luZGV4IiwiaGFuZGxlcnMiLCJ1c2UiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInN5bmNocm9ub3VzIiwicnVuV2hlbiIsImVqZWN0Iiwic2lsZW50SlNPTlBhcnNpbmciLCJmb3JjZWRKU09OUGFyc2luZyIsImNsYXJpZnlUaW1lb3V0RXJyb3IiLCJpc0Jyb3dzZXIiLCJjbGFzc2VzIiwiVVJMU2VhcmNoUGFyYW1zIiwicHJvdG9jb2xzIiwiaGFzQnJvd3NlckVudiIsIl9uYXZpZ2F0b3IiLCJuYXZpZ2F0b3IiLCJoYXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJwcm9kdWN0IiwiaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52IiwiV29ya2VyR2xvYmFsU2NvcGUiLCJvcmlnaW4iLCJidWlsZFBhdGgiLCJpc051bWVyaWNLZXkiLCJpc0xhc3QiLCJhcnJheVRvT2JqZWN0IiwiZW50cmllcyIsInBhcnNlUHJvcFBhdGgiLCJ0cmFuc2l0aW9uYWwiLCJhZGFwdGVyIiwidHJhbnNmb3JtUmVxdWVzdCIsImNvbnRlbnRUeXBlIiwiZ2V0Q29udGVudFR5cGUiLCJoYXNKU09OQ29udGVudFR5cGUiLCJpc09iamVjdFBheWxvYWQiLCJzZXRDb250ZW50VHlwZSIsImhlbHBlcnMiLCJ0b1VSTEVuY29kZWRGb3JtIiwiZm9ybVNlcmlhbGl6ZXIiLCJfRm9ybURhdGEiLCJlbnYiLCJyYXdWYWx1ZSIsInN0cmluZ2lmeVNhZmVseSIsInRyYW5zZm9ybVJlc3BvbnNlIiwiSlNPTlJlcXVlc3RlZCIsInJlc3BvbnNlVHlwZSIsInN0cmljdEpTT05QYXJzaW5nIiwiRVJSX0JBRF9SRVNQT05TRSIsInRpbWVvdXQiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsIm1heEJvZHlMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsImNvbW1vbiIsImlnbm9yZUR1cGxpY2F0ZU9mIiwiJGludGVybmFscyIsIm5vcm1hbGl6ZUhlYWRlciIsIm5vcm1hbGl6ZVZhbHVlIiwibWF0Y2hIZWFkZXJWYWx1ZSIsImlzSGVhZGVyTmFtZUZpbHRlciIsIkF4aW9zSGVhZGVycyIsInZhbHVlT3JSZXdyaXRlIiwicmV3cml0ZSIsInNldEhlYWRlciIsIl92YWx1ZSIsIl9oZWFkZXIiLCJfcmV3cml0ZSIsImxIZWFkZXIiLCJzZXRIZWFkZXJzIiwicmF3SGVhZGVycyIsInBhcnNlZCIsInBhcnNlSGVhZGVycyIsInBhcnNlciIsInRva2VucyIsInRva2Vuc1JFIiwicGFyc2VUb2tlbnMiLCJoYXMiLCJkZWxldGVkIiwiZGVsZXRlSGVhZGVyIiwibm9ybWFsaXplIiwibm9ybWFsaXplZCIsImNoYXIiLCJmb3JtYXRIZWFkZXIiLCJ0YXJnZXRzIiwiYXNTdHJpbmdzIiwiZmlyc3QiLCJjb21wdXRlZCIsImFjY2Vzc29yIiwiYWNjZXNzb3JzIiwiZGVmaW5lQWNjZXNzb3IiLCJhY2Nlc3Nvck5hbWUiLCJtZXRob2ROYW1lIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiYnVpbGRBY2Nlc3NvcnMiLCJtYXBwZWQiLCJoZWFkZXJWYWx1ZSIsInRyYW5zZm9ybURhdGEiLCJmbnMiLCJpc0NhbmNlbCIsIl9fQ0FOQ0VMX18iLCJDYW5jZWxlZEVycm9yIiwiRVJSX0NBTkNFTEVEIiwic2V0dGxlIiwiRVJSX0JBRF9SRVFVRVNUIiwicHJvZ3Jlc3NFdmVudFJlZHVjZXIiLCJsaXN0ZW5lciIsImlzRG93bmxvYWRTdHJlYW0iLCJmcmVxIiwiYnl0ZXNOb3RpZmllZCIsIl9zcGVlZG9tZXRlciIsInNhbXBsZXNDb3VudCIsImJ5dGVzIiwidGltZXN0YW1wcyIsImZpcnN0U2FtcGxlVFMiLCJ0YWlsIiwiY2h1bmtMZW5ndGgiLCJzdGFydGVkQXQiLCJieXRlc0NvdW50IiwicGFzc2VkIiwicm91bmQiLCJsYXN0QXJncyIsInRpbWVyIiwidGhyZXNob2xkIiwiaW52b2tlIiwiY2xlYXJUaW1lb3V0IiwibG9hZGVkIiwibGVuZ3RoQ29tcHV0YWJsZSIsInByb2dyZXNzQnl0ZXMiLCJyYXRlIiwicHJvZ3Jlc3MiLCJlc3RpbWF0ZWQiLCJwcm9ncmVzc0V2ZW50RGVjb3JhdG9yIiwidGhyb3R0bGVkIiwiYXN5bmNEZWNvcmF0b3IiLCJpc01TSUUiLCJwcm90b2NvbCIsImhvc3QiLCJwb3J0IiwidXNlckFnZW50IiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInRvR01UU3RyaW5nIiwicmVhZCIsIlJlZ0V4cCIsImRlY29kZVVSSUNvbXBvbmVudCIsImJ1aWxkRnVsbFBhdGgiLCJyZXF1ZXN0ZWRVUkwiLCJyZWxhdGl2ZVVSTCIsImNvbWJpbmVVUkxzIiwiaGVhZGVyc1RvT2JqZWN0IiwibWVyZ2VDb25maWciLCJjb25maWcxIiwiY29uZmlnMiIsImdldE1lcmdlZFZhbHVlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsInZhbHVlRnJvbUNvbmZpZzIiLCJkZWZhdWx0VG9Db25maWcyIiwibWVyZ2VEaXJlY3RLZXlzIiwibWVyZ2VNYXAiLCJwYXJhbXNTZXJpYWxpemVyIiwidGltZW91dE1lc3NhZ2UiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ3aXRoWFNSRlRva2VuIiwib25VcGxvYWRQcm9ncmVzcyIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImRlY29tcHJlc3MiLCJiZWZvcmVSZWRpcmVjdCIsInRyYW5zcG9ydCIsImh0dHBBZ2VudCIsImh0dHBzQWdlbnQiLCJjYW5jZWxUb2tlbiIsInNvY2tldFBhdGgiLCJyZXNwb25zZUVuY29kaW5nIiwiY29uZmlnVmFsdWUiLCJuZXdDb25maWciLCJhdXRoIiwiYnRvYSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ1bmVzY2FwZSIsIkJvb2xlYW4iLCJpc1VSTFNhbWVPcmlnaW4iLCJ4c3JmVmFsdWUiLCJjb29raWVzIiwiWE1MSHR0cFJlcXVlc3QiLCJfY29uZmlnIiwicmVzb2x2ZUNvbmZpZyIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJvbkNhbmNlbGVkIiwidXBsb2FkVGhyb3R0bGVkIiwiZG93bmxvYWRUaHJvdHRsZWQiLCJmbHVzaFVwbG9hZCIsImZsdXNoRG93bmxvYWQiLCJ1bnN1YnNjcmliZSIsInNpZ25hbCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvcGVuIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwib25hYm9ydCIsIkVDT05OQUJPUlRFRCIsIkVSUl9ORVRXT1JLIiwib250aW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsIkVUSU1FRE9VVCIsInNldFJlcXVlc3RIZWFkZXIiLCJ1cGxvYWQiLCJjYW5jZWwiLCJhYm9ydCIsInN1YnNjcmliZSIsImFib3J0ZWQiLCJwYXJzZVByb3RvY29sIiwic2VuZCIsInNpZ25hbHMiLCJjb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwic3RyZWFtQ2h1bmsiLCJjaHVuayIsInBvcyIsInRyYWNrU3RyZWFtIiwib25Qcm9ncmVzcyIsIm9uRmluaXNoIiwiaXRlcmFibGUiLCJhc3luY0l0ZXJhdG9yIiwiZ2V0UmVhZGVyIiwicmVhZFN0cmVhbSIsInJlYWRCeXRlcyIsIl9vbkZpbmlzaCIsIlJlYWRhYmxlU3RyZWFtIiwicHVsbCIsImxvYWRlZEJ5dGVzIiwiZW5xdWV1ZSIsInJldHVybiIsImhpZ2hXYXRlck1hcmsiLCJpc0ZldGNoU3VwcG9ydGVkIiwiUmVxdWVzdCIsImlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQiLCJlbmNvZGVUZXh0IiwiYXJyYXlCdWZmZXIiLCJzdXBwb3J0c1JlcXVlc3RTdHJlYW0iLCJkdXBsZXhBY2Nlc3NlZCIsImhhc0NvbnRlbnRUeXBlIiwiYm9keSIsImR1cGxleCIsInN1cHBvcnRzUmVzcG9uc2VTdHJlYW0iLCJyZXNvbHZlcnMiLCJyZXMiLCJFUlJfTk9UX1NVUFBPUlQiLCJrbm93bkFkYXB0ZXJzIiwiaHR0cCIsInhociIsImZldGNoT3B0aW9ucyIsImNvbXBvc2VkU2lnbmFsIiwidG9BYm9ydFNpZ25hbCIsInJlcXVlc3RDb250ZW50TGVuZ3RoIiwiZ2V0Q29udGVudExlbmd0aCIsIl9yZXF1ZXN0IiwiZ2V0Qm9keUxlbmd0aCIsInJlc29sdmVCb2R5TGVuZ3RoIiwiY29udGVudFR5cGVIZWFkZXIiLCJpc0NyZWRlbnRpYWxzU3VwcG9ydGVkIiwiY3JlZGVudGlhbHMiLCJpc1N0cmVhbVJlc3BvbnNlIiwicmVzcG9uc2VDb250ZW50TGVuZ3RoIiwicmVzcG9uc2VEYXRhIiwicmVuZGVyUmVhc29uIiwiaXNSZXNvbHZlZEhhbmRsZSIsImFkYXB0ZXJzIiwibmFtZU9yQWRhcHRlciIsInJlamVjdGVkUmVhc29ucyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwiZGlzcGF0Y2hSZXF1ZXN0IiwidmFsaWRhdG9ycyIsImRlcHJlY2F0ZWRXYXJuaW5ncyIsInZhbGlkYXRvciIsImZvcm1hdE1lc3NhZ2UiLCJvcHQiLCJkZXNjIiwib3B0cyIsIkVSUl9ERVBSRUNBVEVEIiwid2FybiIsInNwZWxsaW5nIiwiY29ycmVjdFNwZWxsaW5nIiwiYXNzZXJ0T3B0aW9ucyIsInNjaGVtYSIsImFsbG93VW5rbm93biIsIkVSUl9CQURfT1BUSU9OX1ZBTFVFIiwiRVJSX0JBRF9PUFRJT04iLCJBeGlvcyIsImluc3RhbmNlQ29uZmlnIiwiaW50ZXJjZXB0b3JzIiwiY29uZmlnT3JVcmwiLCJkdW1teSIsImJvb2xlYW4iLCJmdW5jdGlvbiIsImJhc2VVcmwiLCJ3aXRoWHNyZlRva2VuIiwiY29udGV4dEhlYWRlcnMiLCJyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiIsInN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwidW5zaGlmdCIsInJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiIsImNoYWluIiwiZ2V0VXJpIiwiZ2VuZXJhdGVIVFRQTWV0aG9kIiwiaXNGb3JtIiwiQ2FuY2VsVG9rZW4iLCJleGVjdXRvciIsInJlc29sdmVQcm9taXNlIiwib25mdWxmaWxsZWQiLCJfcmVzb2x2ZSIsIkh0dHBTdGF0dXNDb2RlIiwiQ29udGludWUiLCJTd2l0Y2hpbmdQcm90b2NvbHMiLCJQcm9jZXNzaW5nIiwiRWFybHlIaW50cyIsIk9rIiwiQ3JlYXRlZCIsIkFjY2VwdGVkIiwiTm9uQXV0aG9yaXRhdGl2ZUluZm9ybWF0aW9uIiwiTm9Db250ZW50IiwiUmVzZXRDb250ZW50IiwiUGFydGlhbENvbnRlbnQiLCJNdWx0aVN0YXR1cyIsIkFscmVhZHlSZXBvcnRlZCIsIkltVXNlZCIsIk11bHRpcGxlQ2hvaWNlcyIsIk1vdmVkUGVybWFuZW50bHkiLCJGb3VuZCIsIlNlZU90aGVyIiwiTm90TW9kaWZpZWQiLCJVc2VQcm94eSIsIlVudXNlZCIsIlRlbXBvcmFyeVJlZGlyZWN0IiwiUGVybWFuZW50UmVkaXJlY3QiLCJCYWRSZXF1ZXN0IiwiVW5hdXRob3JpemVkIiwiUGF5bWVudFJlcXVpcmVkIiwiRm9yYmlkZGVuIiwiTm90Rm91bmQiLCJNZXRob2ROb3RBbGxvd2VkIiwiTm90QWNjZXB0YWJsZSIsIlByb3h5QXV0aGVudGljYXRpb25SZXF1aXJlZCIsIlJlcXVlc3RUaW1lb3V0IiwiQ29uZmxpY3QiLCJHb25lIiwiTGVuZ3RoUmVxdWlyZWQiLCJQcmVjb25kaXRpb25GYWlsZWQiLCJQYXlsb2FkVG9vTGFyZ2UiLCJVcmlUb29Mb25nIiwiVW5zdXBwb3J0ZWRNZWRpYVR5cGUiLCJSYW5nZU5vdFNhdGlzZmlhYmxlIiwiRXhwZWN0YXRpb25GYWlsZWQiLCJJbUFUZWFwb3QiLCJNaXNkaXJlY3RlZFJlcXVlc3QiLCJVbnByb2Nlc3NhYmxlRW50aXR5IiwiTG9ja2VkIiwiRmFpbGVkRGVwZW5kZW5jeSIsIlRvb0Vhcmx5IiwiVXBncmFkZVJlcXVpcmVkIiwiUHJlY29uZGl0aW9uUmVxdWlyZWQiLCJUb29NYW55UmVxdWVzdHMiLCJSZXF1ZXN0SGVhZGVyRmllbGRzVG9vTGFyZ2UiLCJVbmF2YWlsYWJsZUZvckxlZ2FsUmVhc29ucyIsIkludGVybmFsU2VydmVyRXJyb3IiLCJOb3RJbXBsZW1lbnRlZCIsIkJhZEdhdGV3YXkiLCJTZXJ2aWNlVW5hdmFpbGFibGUiLCJHYXRld2F5VGltZW91dCIsIkh0dHBWZXJzaW9uTm90U3VwcG9ydGVkIiwiVmFyaWFudEFsc29OZWdvdGlhdGVzIiwiSW5zdWZmaWNpZW50U3RvcmFnZSIsIkxvb3BEZXRlY3RlZCIsIk5vdEV4dGVuZGVkIiwiTmV0d29ya0F1dGhlbnRpY2F0aW9uUmVxdWlyZWQiLCJheGlvcyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImluc3RhbmNlIiwiVkVSU0lPTiIsInRvRm9ybURhdGEiLCJDYW5jZWwiLCJwcm9taXNlcyIsInNwcmVhZCIsImlzQXhpb3NFcnJvciIsInBheWxvYWQiLCJmb3JtVG9KU09OIiwiZ2V0QWRhcHRlciIsImRlZmF1bHQiLCJpbnN0YW5jZU9mQW55Iiwib2JqZWN0IiwiY29uc3RydWN0b3JzIiwiaWRiUHJveHlhYmxlVHlwZXMiLCJjdXJzb3JBZHZhbmNlTWV0aG9kcyIsInRyYW5zYWN0aW9uRG9uZU1hcCIsIldlYWtNYXAiLCJ0cmFuc2Zvcm1DYWNoZSIsInJldmVyc2VUcmFuc2Zvcm1DYWNoZSIsImlkYlByb3h5VHJhcHMiLCJyZWNlaXZlciIsIklEQlRyYW5zYWN0aW9uIiwicmVwbGFjZVRyYXBzIiwidHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSIsIklEQkN1cnNvciIsImFkdmFuY2UiLCJjb250aW51ZSIsImNvbnRpbnVlUHJpbWFyeUtleSIsInVud3JhcCIsInVubGlzdGVuIiwiY29tcGxldGUiLCJET01FeGNlcHRpb24iLCJjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24iLCJJREJEYXRhYmFzZSIsIklEQk9iamVjdFN0b3JlIiwiSURCSW5kZXgiLCJQcm94eSIsIklEQlJlcXVlc3QiLCJwcm9taXNpZnlSZXF1ZXN0IiwibmV3VmFsdWUiLCJvcGVuREIiLCJibG9ja2VkIiwiYmxvY2tpbmciLCJ0ZXJtaW5hdGVkIiwiaW5kZXhlZERCIiwib3BlblByb21pc2UiLCJvbGRWZXJzaW9uIiwibmV3VmVyc2lvbiIsInJlYWRNZXRob2RzIiwid3JpdGVNZXRob2RzIiwiY2FjaGVkTWV0aG9kcyIsIk1hcCIsImdldE1ldGhvZCIsInRhcmdldEZ1bmNOYW1lIiwidXNlSW5kZXgiLCJpc1dyaXRlIiwic3RvcmVOYW1lIiwib2xkVHJhcHMiLCJhZHZhbmNlTWV0aG9kUHJvcHMiLCJtZXRob2RNYXAiLCJhZHZhbmNlUmVzdWx0cyIsIml0dHJQcm94aWVkQ3Vyc29yVG9PcmlnaW5hbFByb3h5IiwiY3Vyc29ySXRlcmF0b3JUcmFwcyIsImNhY2hlZEZ1bmMiLCJpdGVyYXRlIiwiY3Vyc29yIiwib3BlbkN1cnNvciIsInByb3hpZWRDdXJzb3IiLCJpc0l0ZXJhdG9yUHJvcCIsIkNIQU5HRUQiLCJDTEFTU19MSVNUIiwiQ1VTVE9NX0VMRU1FTlRTIiwiQ09OVEVOVCIsIkRBVEFTRVQiLCJET0NUWVBFIiwiRE9NX1BBUlNFUiIsIkVWRU5UX1RBUkdFVCIsIkdMT0JBTFMiLCJJTUFHRSIsIk1JTUUiLCJNVVRBVElPTl9PQlNFUlZFUiIsIk5FWFQiLCJPV05FUl9FTEVNRU5UIiwiUFJJVkFURSIsIlNIRUVUIiwiU1RBUlQiLCJTVFlMRSIsIlVQR1JBREUiLCJWQUxVRSIsIl9hIiwiZGVjb2RlTWFwIiwiZnJvbUNvZGVQb2ludCIsImNvZGVQb2ludCIsIkNoYXJDb2RlcyIsIkJpblRyaWVGbGFncyIsIkVudGl0eURlY29kZXJTdGF0ZSIsIkRlY29kaW5nTW9kZSIsIlN0YXRlIiwiUXVvdGVUeXBlIiwiWkVSTyIsIk5JTkUiLCJFbnRpdHlEZWNvZGVyIiwiZGVjb2RlVHJlZSIsImVtaXRDb2RlUG9pbnQiLCJlcnJvcnMiLCJFbnRpdHlTdGFydCIsImNvbnN1bWVkIiwidHJlZUluZGV4IiwiZXhjZXNzIiwiZGVjb2RlTW9kZSIsIlN0cmljdCIsInN0YXJ0RW50aXR5IiwiTlVNIiwiTnVtZXJpY1N0YXJ0Iiwic3RhdGVOdW1lcmljU3RhcnQiLCJOYW1lZEVudGl0eSIsInN0YXRlTmFtZWRFbnRpdHkiLCJOdW1lcmljRGVjaW1hbCIsInN0YXRlTnVtZXJpY0RlY2ltYWwiLCJOdW1lcmljSGV4Iiwic3RhdGVOdW1lcmljSGV4IiwiTE9XRVJfWCIsImFkZFRvTnVtZXJpY1Jlc3VsdCIsImJhc2UiLCJkaWdpdENvdW50IiwicG93Iiwic3RhcnRJbmRleCIsIlVQUEVSX0EiLCJVUFBFUl9GIiwiTE9XRVJfQSIsIkxPV0VSX0YiLCJlbWl0TnVtZXJpY0VudGl0eSIsImxhc3RDcCIsImV4cGVjdGVkTGVuZ3RoIiwiYWJzZW5jZU9mRGlnaXRzSW5OdW1lcmljQ2hhcmFjdGVyUmVmZXJlbmNlIiwiU0VNSSIsInJlcGxhY2VDb2RlUG9pbnQiLCJtaXNzaW5nU2VtaWNvbG9uQWZ0ZXJDaGFyYWN0ZXJSZWZlcmVuY2UiLCJ2YWxpZGF0ZU51bWVyaWNDaGFyYWN0ZXJSZWZlcmVuY2UiLCJjdXJyZW50IiwidmFsdWVMZW5ndGgiLCJWQUxVRV9MRU5HVEgiLCJkZXRlcm1pbmVCcmFuY2giLCJBdHRyaWJ1dGUiLCJFUVVBTFMiLCJVUFBFUl9aIiwiTE9XRVJfWiIsImlzQXNjaWlBbHBoYU51bWVyaWMiLCJlbWl0Tm90VGVybWluYXRlZE5hbWVkRW50aXR5IiwiZW1pdE5hbWVkRW50aXR5RGF0YSIsIm5vZGVJbmRleCIsImJyYW5jaENvdW50IiwiQlJBTkNIX0xFTkdUSCIsImp1bXBPZmZzZXQiLCJKVU1QX1RBQkxFIiwibG8iLCJoaSIsIm1pZFZhbHVlIiwiaXNXaGl0ZXNwYWNlIiwiU3BhY2UiLCJOZXdMaW5lIiwiVGFiIiwiRm9ybUZlZWQiLCJDYXJyaWFnZVJldHVybiIsImlzRW5kT2ZUYWdTZWN0aW9uIiwiU2xhc2giLCJHdCIsIlNlcXVlbmNlcyIsIkNkYXRhIiwiQ2RhdGFFbmQiLCJDb21tZW50RW5kIiwiU2NyaXB0RW5kIiwiU3R5bGVFbmQiLCJUaXRsZUVuZCIsIlRleHRhcmVhRW5kIiwiWG1wRW5kIiwiVG9rZW5pemVyIiwieG1sTW9kZSIsImRlY29kZUVudGl0aWVzIiwiY2JzIiwiVGV4dCIsInNlY3Rpb25TdGFydCIsImVudGl0eVN0YXJ0IiwiYmFzZVN0YXRlIiwiaXNTcGVjaWFsIiwicnVubmluZyIsImN1cnJlbnRTZXF1ZW5jZSIsInNlcXVlbmNlSW5kZXgiLCJlbnRpdHlEZWNvZGVyIiwiY3AiLCJyZXNldCIsImZpbmlzaCIsInN0YXRlVGV4dCIsIkx0IiwiZmFzdEZvcndhcmRUbyIsIm9udGV4dCIsIkJlZm9yZVRhZ05hbWUiLCJBbXAiLCJzdGF0ZVNwZWNpYWxTdGFydFNlcXVlbmNlIiwiaXNFbmQiLCJJblRhZ05hbWUiLCJzdGF0ZUluVGFnTmFtZSIsInN0YXRlSW5TcGVjaWFsVGFnIiwiZW5kT2ZUZXh0IiwiYWN0dWFsSW5kZXgiLCJzdGF0ZUluQ2xvc2luZ1RhZ05hbWUiLCJzdGF0ZUNEQVRBU2VxdWVuY2UiLCJJbkNvbW1lbnRMaWtlIiwiSW5EZWNsYXJhdGlvbiIsInN0YXRlSW5EZWNsYXJhdGlvbiIsInN0YXRlSW5Db21tZW50TGlrZSIsIm9uY2RhdGEiLCJvbmNvbW1lbnQiLCJpc1RhZ1N0YXJ0Q2hhciIsIkxvd2VyQSIsIkxvd2VyWiIsIlVwcGVyQSIsIlVwcGVyWiIsImlzQVNDSUlBbHBoYSIsInN0YXJ0U3BlY2lhbCIsInNlcXVlbmNlIiwiU3BlY2lhbFN0YXJ0U2VxdWVuY2UiLCJzdGF0ZUJlZm9yZVRhZ05hbWUiLCJFeGNsYW1hdGlvbk1hcmsiLCJCZWZvcmVEZWNsYXJhdGlvbiIsIlF1ZXN0aW9ubWFyayIsIkluUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwibG93ZXIiLCJCZWZvcmVTcGVjaWFsUyIsIkJlZm9yZVNwZWNpYWxUIiwiQmVmb3JlQ2xvc2luZ1RhZ05hbWUiLCJvbm9wZW50YWduYW1lIiwiQmVmb3JlQXR0cmlidXRlTmFtZSIsInN0YXRlQmVmb3JlQXR0cmlidXRlTmFtZSIsInN0YXRlQmVmb3JlQ2xvc2luZ1RhZ05hbWUiLCJJbkNsb3NpbmdUYWdOYW1lIiwiSW5TcGVjaWFsQ29tbWVudCIsIm9uY2xvc2V0YWciLCJBZnRlckNsb3NpbmdUYWdOYW1lIiwic3RhdGVBZnRlckNsb3NpbmdUYWdOYW1lIiwib25vcGVudGFnZW5kIiwiSW5TcGVjaWFsVGFnIiwiSW5TZWxmQ2xvc2luZ1RhZyIsIkluQXR0cmlidXRlTmFtZSIsInN0YXRlSW5TZWxmQ2xvc2luZ1RhZyIsIm9uc2VsZmNsb3Npbmd0YWciLCJzdGF0ZUluQXR0cmlidXRlTmFtZSIsIkVxIiwib25hdHRyaWJuYW1lIiwiQWZ0ZXJBdHRyaWJ1dGVOYW1lIiwic3RhdGVBZnRlckF0dHJpYnV0ZU5hbWUiLCJCZWZvcmVBdHRyaWJ1dGVWYWx1ZSIsIm9uYXR0cmliZW5kIiwiTm9WYWx1ZSIsInN0YXRlQmVmb3JlQXR0cmlidXRlVmFsdWUiLCJEb3VibGVRdW90ZSIsIkluQXR0cmlidXRlVmFsdWVEcSIsIlNpbmdsZVF1b3RlIiwiSW5BdHRyaWJ1dGVWYWx1ZVNxIiwiSW5BdHRyaWJ1dGVWYWx1ZU5xIiwic3RhdGVJbkF0dHJpYnV0ZVZhbHVlTm9RdW90ZXMiLCJoYW5kbGVJbkF0dHJpYnV0ZVZhbHVlIiwicXVvdGUiLCJvbmF0dHJpYmRhdGEiLCJEb3VibGUiLCJTaW5nbGUiLCJzdGF0ZUluQXR0cmlidXRlVmFsdWVEb3VibGVRdW90ZXMiLCJzdGF0ZUluQXR0cmlidXRlVmFsdWVTaW5nbGVRdW90ZXMiLCJVbnF1b3RlZCIsInN0YXRlQmVmb3JlRGVjbGFyYXRpb24iLCJPcGVuaW5nU3F1YXJlQnJhY2tldCIsIkNEQVRBU2VxdWVuY2UiLCJEYXNoIiwiQmVmb3JlQ29tbWVudCIsIm9uZGVjbGFyYXRpb24iLCJzdGF0ZUluUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwib25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24iLCJzdGF0ZUJlZm9yZUNvbW1lbnQiLCJzdGF0ZUluU3BlY2lhbENvbW1lbnQiLCJzdGF0ZUJlZm9yZVNwZWNpYWxTIiwic3RhdGVCZWZvcmVTcGVjaWFsVCIsIkluRW50aXR5IiwiTGVnYWN5Iiwic3RhdGVJbkVudGl0eSIsImNsZWFudXAiLCJzaG91bGRDb250aW51ZSIsImhhbmRsZVRyYWlsaW5nRGF0YSIsIm9uZW5kIiwiZW5kSW5kZXgiLCJvbmF0dHJpYmVudGl0eSIsIm9udGV4dGVudGl0eSIsImZvcm1UYWdzIiwiU2V0IiwicFRhZyIsInRhYmxlU2VjdGlvblRhZ3MiLCJkZHRUYWdzIiwicnRwVGFncyIsIm9wZW5JbXBsaWVzQ2xvc2UiLCJ2b2lkRWxlbWVudHMiLCJmb3JlaWduQ29udGV4dEVsZW1lbnRzIiwiaHRtbEludGVncmF0aW9uRWxlbWVudHMiLCJyZU5hbWVFbmQiLCJfYiIsIl9jIiwiX2QiLCJfZSIsIl9mIiwib3BlblRhZ1N0YXJ0IiwidGFnbmFtZSIsImF0dHJpYm5hbWUiLCJhdHRyaWJ2YWx1ZSIsImF0dHJpYnMiLCJidWZmZXJzIiwiYnVmZmVyT2Zmc2V0Iiwid3JpdGVJbmRleCIsImh0bWxNb2RlIiwibG93ZXJDYXNlVGFnTmFtZXMiLCJsb3dlckNhc2VUYWdzIiwibG93ZXJDYXNlQXR0cmlidXRlTmFtZXMiLCJyZWNvZ25pemVTZWxmQ2xvc2luZyIsInRva2VuaXplciIsImZvcmVpZ25Db250ZXh0Iiwib25wYXJzZXJpbml0IiwiZ2V0U2xpY2UiLCJpc1ZvaWRFbGVtZW50IiwiZW1pdE9wZW5UYWciLCJpbXBsaWVzQ2xvc2UiLCJvbm9wZW50YWciLCJlbmRPcGVuVGFnIiwiaXNJbXBsaWVkIiwiX2ciLCJfaCIsImNsb3NlQ3VycmVudFRhZyIsImlzT3BlbkltcGxpZWQiLCJvbmF0dHJpYnV0ZSIsImdldEluc3RydWN0aW9uTmFtZSIsInNlYXJjaCIsIm9uY29tbWVudGVuZCIsIl9qIiwiX2siLCJyZWNvZ25pemVDREFUQSIsIm9uY2RhdGFzdGFydCIsIm9uY2RhdGFlbmQiLCJvbnJlc2V0IiwicGFyc2VDb21wbGV0ZSIsInNoaWZ0QnVmZmVyIiwicGFyc2VDaHVuayIsIkVsZW1lbnRUeXBlIiwiUm9vdCIsIkRpcmVjdGl2ZSIsIkNvbW1lbnQiLCJTY3JpcHQiLCJTdHlsZSIsIlRhZyIsIkNEQVRBIiwiRG9jdHlwZSIsIm5vZGUiLCJlbGVtIiwiaXNDREFUQSIsImlzVGV4dCIsImlzQ29tbWVudCIsImlzRG9jdW1lbnQiLCJoYXNDaGlsZHJlbiIsImRlY29kZXIiLCJub2RlSWR4IiwibWlkVmFsIiwicmVzdG9yZURpZmYiLCJ4bWxDb2RlTWFwIiwiY29kZVBvaW50QXQiLCJsYXN0SWR4IiwiZ2V0RXNjYXBlciIsInJlZ2V4IiwiRW50aXR5TGV2ZWwiLCJFbmNvZGluZ01vZGUiLCJlbGVtZW50TmFtZXMiLCJhdHRyaWJ1dGVOYW1lcyIsInVuZW5jb2RlZEVsZW1lbnRzIiwicmVwbGFjZVF1b3RlcyIsInNpbmdsZVRhZyIsInJlbmRlciIsIm5vZGVzIiwicmVuZGVyTm9kZSIsInJlbmRlckNkYXRhIiwicGFyZW50IiwiZm9yZWlnbk1vZGVJbnRlZ3JhdGlvblBvaW50cyIsImZvcmVpZ25FbGVtZW50cyIsImF0dHJpYnV0ZXMiLCJlbmNvZGVFbnRpdGllcyIsImVtcHR5QXR0cnMiLCJmb3JtYXRBdHRyaWJ1dGVzIiwic2VsZkNsb3NpbmdUYWdzIiwicmVuZGVyVGFnIiwicmVuZGVyVGV4dCIsImdldE91dGVySFRNTCIsImdldElubmVySFRNTCIsImdldFRleHQiLCJnZXRDaGlsZHJlbiIsImdldFBhcmVudCIsImdldFNpYmxpbmdzIiwic2libGluZ3MiLCJnZXRBdHRyaWJ1dGVWYWx1ZSIsImhhc0F0dHJpYiIsImdldE5hbWUiLCJwcmV2RWxlbWVudFNpYmxpbmciLCJyZW1vdmVFbGVtZW50IiwiY2hpbGRzIiwiY2hpbGRzSW5kZXgiLCJyZXBsYWNlRWxlbWVudCIsInJlcGxhY2VtZW50IiwiY2hpbGQiLCJzaWJsaW5nIiwiY3Vyck5leHQiLCJwcmVwZW5kQ2hpbGQiLCJwcmVwZW5kIiwicmVjdXJzZSIsImxpbWl0IiwiSW5maW5pdHkiLCJmaW5kIiwibm9kZVN0YWNrIiwiaW5kZXhTdGFjayIsImZpbmRPbmVDaGlsZCIsImZpbmRPbmUiLCJzZWFyY2hlZE5vZGVzIiwiZm91bmQiLCJleGlzdHNPbmUiLCJmaW5kQWxsIiwiQ2hlY2tzIiwidGFnX3R5cGUiLCJ0YWdfY29udGFpbnMiLCJnZXRBdHRyaWJDaGVjayIsImF0dHJpYiIsImNvbWJpbmVGdW5jcyIsImNvbXBpbGVUZXN0IiwiZnVuY3MiLCJyZWR1Y2UiLCJ0ZXN0RWxlbWVudCIsImdldEVsZW1lbnRzIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJnZXRFbGVtZW50c0J5VGFnVHlwZSIsInJlbW92ZVN1YnNldHMiLCJhbmNlc3RvciIsIkRvY3VtZW50UG9zaXRpb24iLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIm5vZGVBIiwibm9kZUIiLCJhUGFyZW50cyIsImJQYXJlbnRzIiwibWF4SWR4IiwiRElTQ09OTkVDVEVEIiwic2hhcmVkUGFyZW50IiwiYVNpYmxpbmciLCJiU2libGluZyIsIkZPTExPV0lORyIsIkNPTlRBSU5FRF9CWSIsIlBSRUNFRElORyIsIkNPTlRBSU5TIiwidW5pcXVlU29ydCIsInNvcnQiLCJyZWxhdGl2ZSIsImRvYyIsImZlZWRSb290IiwiZ2V0T25lRWxlbWVudCIsImlzVmFsaWRGZWVkIiwiZmVlZCIsIml0ZW1zIiwiZW50cnkiLCJnZXRNZWRpYUVsZW1lbnRzIiwiYWRkQ29uZGl0aW9uYWxseSIsImxpbmsiLCJwdWJEYXRlIiwidXBkYXRlZCIsImdldEF0b21GZWVkIiwiZ2V0UnNzRmVlZCIsIk1FRElBX0tFWVNfU1RSSU5HIiwiTUVESUFfS0VZU19JTlQiLCJ3aGVyZSIsImlzRGVmYXVsdCIsIkJMT0NLX0VMRU1FTlRTIiwiU1ZHX05BTUVTUEFDRSIsInNldFByb3RvdHlwZU9mIiwiJFN0cmluZyIsImdldEVuZCIsIm5vZGVUeXBlIiwiaWdub3JlQ2FzZSIsIm93bmVyRG9jdW1lbnQiLCJrbm93bkFkamFjZW50IiwibG9jYWxDYXNlIiwibG9jYWxOYW1lIiwic2V0QWRqYWNlbnQiLCJzaGFkb3dSb290cyIsInJlYWN0aXZlIiwiQ2xhc3NlcyIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsImF0dHJpYnV0ZU5hbWUiLCJvbGRWYWx1ZSIsIm9ic2VydmVkQXR0cmlidXRlcyIsImNyZWF0ZVRyaWdnZXIiLCJpc0Nvbm5lY3RlZCIsImNvbm5lY3RlZCIsInRyaWdnZXJDb25uZWN0ZWQiLCJjb25uZWN0ZWRDYWxsYmFjayIsInNoYWRvd1Jvb3QiLCJ0cmlnZ2VyRGlzY29ubmVjdGVkIiwiQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5IiwicmVnaXN0cnkiLCJ3YWl0aW5nIiwiQ2xhc3MiLCJleHRlbmRzIiwiaXMiLCJjZSIsInJlbW92ZUF0dHJpYnV0ZU5vZGUiLCJzZXRBdHRyaWJ1dGVOb2RlIiwid2hlbkRlZmluZWQiLCJub3RQYXJzaW5nIiwiYXR0cmlidXRlIiwib3duZXJFbGVtZW50IiwiaXNIVE1MIiwibWFya3VwTGFuZ3VhZ2UiLCJvd25lclNWR0VsZW1lbnQiLCJwYXJzaW5nQ0RhdGEiLCJkb2N0eXBlIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlQXR0cmlidXRlIiwiY3JlYXRlQ29tbWVudCIsImNyZWF0ZUNEQVRBU2VjdGlvbiIsInJlZ2lzdGVySFRNTENsYXNzIiwibmFtZXMiLCJsb29wU2VnbWVudCIsImF0dHJBc0pTT04iLCJjaGFyYWN0ZXJEYXRhQXNKU09OIiwiZWxlbWVudEFzSlNPTiIsImRvY3VtZW50VHlwZUFzSlNPTiIsInB1YmxpY0lkIiwic3lzdGVtSWQiLCJjcmVhdGVSZWNvcmQiLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwicHJldmlvdXNTaWJsaW5nIiwibmV4dFNpYmxpbmciLCJxdWV1ZUF0dHJpYnV0ZSIsIm9ic2VydmVyIiwiYXR0cmlidXRlRmlsdGVyIiwiYXR0cmlidXRlT2xkVmFsdWUiLCJyZWNvcmRzIiwic2NoZWR1bGVkIiwib2JzZXJ2ZXJzIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsIm1vQ2FsbGJhY2siLCJNdXRhdGlvbk9ic2VydmVyQ2xhc3MiLCJkaXNjb25uZWN0IiwidGFrZVJlY29yZHMiLCJlbXB0eUF0dHJpYnV0ZXMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJib29sZWFuQXR0cmlidXRlIiwibnVtZXJpY0F0dHJpYnV0ZSIsInBhcnNlRmxvYXQiLCJzdHJpbmdBdHRyaWJ1dGUiLCJ3bSIsImRpc3BhdGNoIiwiaGFuZGxlRXZlbnQiLCJfc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uRmxhZyIsImludm9rZUxpc3RlbmVycyIsImN1cnJlbnRUYXJnZXQiLCJsaXN0ZW5lcnMiLCJldmVudFBoYXNlIiwiQVRfVEFSR0VUIiwiQlVCQkxJTkdfUEhBU0UiLCJvbmNlIiwiY2FuY2VsQnViYmxlIiwiRE9NRXZlbnRUYXJnZXQiLCJfZ2V0UGFyZW50IiwiZGlzcGF0Y2hFdmVudCIsIkNBUFRVUklOR19QSEFTRSIsIl9wYXRoIiwiYnViYmxlcyIsIk5PTkUiLCJkZWZhdWx0UHJldmVudGVkIiwiTm9kZUxpc3QiLCJnZXRQYXJlbnROb2RlQ291bnQiLCJjb3VudCIsIkVMRU1FTlRfTk9ERSIsIkFUVFJJQlVURV9OT0RFIiwiVEVYVF9OT0RFIiwiQ0RBVEFfU0VDVElPTl9OT0RFIiwiQ09NTUVOVF9OT0RFIiwiRE9DVU1FTlRfTk9ERSIsIkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUiLCJET0NVTUVOVF9UWVBFX05PREUiLCJzdXBlciIsImJhc2VVUkkiLCJub2RlTmFtZSIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJjaGlsZE5vZGVzIiwiZmlyc3RDaGlsZCIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsImNsb25lTm9kZSIsImluc2VydEJlZm9yZSIsIm5ld05vZGUiLCJyZWZlcmVuY2VOb2RlIiwicmVwbGFjZUNoaWxkIiwibmV3Q2hpbGQiLCJvbGRDaGlsZCIsImhhc0NoaWxkTm9kZXMiLCJpc1NhbWVOb2RlIiwib3RoZXIiLCJpc0VxdWFsTm9kZSIsImFOb2RlcyIsImJOb2RlcyIsImV2ZXJ5IiwiZ2V0Um9vdE5vZGUiLCJjYSIsImVzY2EiLCJwZSIsImVzIiwiUVVPVEUiLCJhc0ZyYWdtZW50IiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwiQ2hhcmFjdGVyRGF0YSIsInN1YnN0cmluZ0RhdGEiLCJhcHBlbmREYXRhIiwiaW5zZXJ0RGF0YSIsImRlbGV0ZURhdGEiLCJyZXBsYWNlRGF0YSIsIlNlbGVjdG9yVHlwZSIsIkF0dHJpYnV0ZUFjdGlvbiIsInJlTmFtZSIsInJlRXNjYXBlIiwiYWN0aW9uVHlwZXMiLCJFbGVtZW50IiwiU3RhcnQiLCJFbmQiLCJBbnkiLCJOb3QiLCJIeXBoZW4iLCJ1bnBhY2tQc2V1ZG9zIiwic3RyaXBRdW90ZXNGcm9tUHNldWRvcyIsImZ1bmVzY2FwZSIsImVzY2FwZWQiLCJlc2NhcGVkV2hpdGVzcGFjZSIsImhpZ2giLCJ1bmVzY2FwZUNTUyIsImlzUXVvdGUiLCJzdWJzZWxlY3RzIiwicGFyc2VTZWxlY3RvciIsInNlbGVjdG9ySW5kZXgiLCJzdHJpcFdoaXRlc3BhY2UiLCJyZWFkVmFsdWVXaXRoUGFyZW50aGVzaXMiLCJjb3VudGVyIiwiaXNFc2NhcGVkIiwic2xhc2hDb3VudCIsImVuc3VyZU5vdFRyYXZlcnNhbCIsIkFkamFjZW50IiwiQ2hpbGQiLCJEZXNjZW5kYW50IiwiUGFyZW50IiwiU2libGluZyIsIkNvbHVtbkNvbWJpbmF0b3IiLCJpc1RyYXZlcnNhbCIsImFkZFRyYXZlcnNhbCIsImFkZFNwZWNpYWxBdHRyaWJ1dGUiLCJuYW1lc3BhY2UiLCJmaW5hbGl6ZVN1YnNlbGVjdG9yIiwibG9vcCIsImZpcnN0Q2hhciIsIkVxdWFscyIsIkV4aXN0cyIsInBvc3NpYmxlQWN0aW9uIiwic2VjdGlvbkVuZCIsInZhbHVlU3RhcnQiLCJmb3JjZUlnbm9yZSIsImF0dHJpYnV0ZVNlbGVjdG9yIiwiUHNldWRvRWxlbWVudCIsInF1b3QiLCJQc2V1ZG8iLCJVbml2ZXJzYWwiLCJwcm9jZWR1cmUiLCJzb3J0QnlQcm9jZWR1cmUiLCJwcm9jcyIsImdldFByb2NlZHVyZSIsInByb2NOZXciLCJwcm9jIiwicmVDaGFycyIsImVzY2FwZVJlZ2V4IiwiY2FzZUluc2Vuc2l0aXZlQXR0cmlidXRlcyIsInNob3VsZElnbm9yZUNhc2UiLCJxdWlya3NNb2RlIiwiYXR0cmlidXRlUnVsZXMiLCJlcXVhbHMiLCJoeXBoZW4iLCJib29sYmFzZSIsImV4aXN0cyIsImFueSIsIm5vdCIsIndoaXRlc3BhY2UiLCJudGhDaGVjayIsImZvcm11bGEiLCJhYnNBIiwiYk1vZCIsImNvbXBpbGUiLCJzaWduIiwicmVhZFNpZ24iLCJyZWFkTnVtYmVyIiwic2tpcFdoaXRlc3BhY2UiLCJnZXRDaGlsZEZ1bmMiLCJpc1RhZyIsImZpbHRlcnMiLCJpY29udGFpbnMiLCJpdGV4dCIsImN1cnJlbnRTaWJsaW5nIiwiX3J1bGUiLCJzY29wZSIsImhvdmVyIiwiZHluYW1pY1N0YXRlUHNldWRvIiwidmlzaXRlZCIsInBzZXVkb3MiLCJlbXB0eSIsImVsZW1OYW1lIiwidmVyaWZ5UHNldWRvQXJncyIsInN1YnNlbGVjdCIsImFyZ0luZGV4IiwiYWxpYXNlcyIsImRpc2FibGVkIiwiZW5hYmxlZCIsInJlcXVpcmVkIiwib3B0aW9uYWwiLCJjaGVja2JveCIsInJhZGlvIiwiaW1hZ2UiLCJzdWJtaXQiLCJidXR0b24iLCJQTEFDRUhPTERFUl9FTEVNRU5UIiwiZW5zdXJlSXNUYWciLCJnZXROZXh0U2libGluZ3MiLCJlbGVtSW5kZXgiLCJjb3B5T3B0aW9ucyIsImNhY2hlUmVzdWx0cyIsImNvbXBpbGVUb2tlbiIsIl9jb250ZXh0IiwicmVsYXRpdmVTZWxlY3RvciIsImNvbXBpbGVkIiwiaGFzRWxlbWVudCIsInNob3VsZFRlc3ROZXh0U2libGluZ3MiLCJuZXh0RWxlbWVudHMiLCJnZXRFbGVtZW50UGFyZW50IiwiY29tcGlsZVVuc2FmZSIsImluY2x1ZGVzU2NvcGVQc2V1ZG8iLCJERVNDRU5EQU5UX1RPS0VOIiwiRkxFWElCTEVfREVTQ0VOREFOVF9UT0tFTiIsIlNDT1BFX1RPS0VOIiwiaXNBcnJheUNvbnRleHQiLCJmaW5hbENvbnRleHQiLCJoYXNDb250ZXh0IiwiYWJzb2x1dGl6ZSIsInNlY29uZCIsInVzZXJQc2V1ZG8iLCJzdHJpbmdQc2V1ZG8iLCJhbGlhcyIsInBzZXVkbyIsImNvbXBpbGVQc2V1ZG9TZWxlY3RvciIsIldlYWtTZXQiLCJpc0ZhbHNlQ2FjaGUiLCJsYXN0RWxlbWVudCIsImNvbXBpbGVHZW5lcmFsU2VsZWN0b3IiLCJyb290RnVuYyIsImNvbXBpbGVSdWxlcyIsInJlZHVjZVJ1bGVzIiwiZGVmYXVsdEVxdWFscyIsImRlZmF1bHRPcHRpb25zIiwiY29udmVydE9wdGlvbkZvcm1hdHMiLCJ3cmFwQ29tcGlsZSIsImdldFNlbGVjdG9yRnVuYyIsInNlYXJjaEZ1bmMiLCJlbGVtZW50cyIsImZpbHRlcmVkRWxlbWVudHMiLCJlbGVtc0xlbmd0aCIsIm5leHRTaWJsaW5ncyIsImFwcGVuZE5leHRTaWJsaW5ncyIsInByZXBhcmVDb250ZXh0IiwiY2xhc3NMaXN0IiwicHJlcGFyZU1hdGNoIiwic2VsZWN0b3JzIiwid2hvbGVUZXh0IiwiUGFyZW50Tm9kZSIsImxhc3RFbGVtZW50Q2hpbGQiLCJjaGlsZEVsZW1lbnRDb3VudCIsInJlcGxhY2VDaGlsZHJlbiIsImtub3duU2VnbWVudCIsIiRuZXh0IiwiJHByZXYiLCJyZXBsYWNlZCIsIk5vbkVsZW1lbnRQYXJlbnROb2RlIiwiZGVlcCIsIm5vbkVQTiIsIm5vbkVsZW1lbnRBc0pTT04iLCJEb2N1bWVudEZyYWdtZW50IiwiaGFzUHVibGljIiwiZ2V0SW5uZXJIdG1sIiwic2V0SW5uZXJIdG1sIiwic2V0T3duZXJEb2N1bWVudCIsImNhbWVsIiwicmVmcyIsIiQxIiwiaGFuZGxlciIsImRhdGFzZXQiLCJkZWxldGVQcm9wZXJ0eSIsIkRPTVN0cmluZ01hcCIsInJlZiIsImFkZFRva2VucyIsInVwZGF0ZSIsImdldEF0dHJpYnV0ZU5vZGUiLCJET01Ub2tlbkxpc3QiLCJ0b2dnbGUiLCJmb3JjZSIsIm5ld1Rva2VuIiwic3VwcG9ydHMiLCJnZXRLZXlzIiwidXBkYXRlS2V5cyIsInJlc3QiLCJnZXRDdXJyZW50VGFyZ2V0IiwiZXYiLCJHbG9iYWxFdmVudCIsImV2ZW50SW5pdERpY3QiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwib3JpZ2luYWxUYXJnZXQiLCJyZXR1cm5WYWx1ZSIsInNyY0VsZW1lbnQiLCJwcmV2ZW50RGVmYXVsdCIsImNvbXBvc2VkUGF0aCIsInN0b3BQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIk5hbWVkTm9kZU1hcCIsImdldE5hbWVkSXRlbSIsInNldE5hbWVkSXRlbSIsInJlbW92ZU5hbWVkSXRlbSIsImdldE5hbWVkSXRlbU5TIiwic2V0TmFtZWRJdGVtTlMiLCJyZW1vdmVOYW1lZEl0ZW1OUyIsIlNoYWRvd1Jvb3QiLCJhdHRyaWJ1dGVzSGFuZGxlciIsInN2ZyIsImlzVm9pZCIsIm5hbWVzcGFjZVVSSSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsInRvcCIsIm5vbmNlIiwidGFiSW5kZXgiLCJzbG90IiwidGVtcGxhdGUiLCJmb2N1cyIsImdldEF0dHJpYnV0ZU5hbWVzIiwiaGFzQXR0cmlidXRlcyIsInByZXZpb3VzbHkiLCJ0b2dnbGVBdHRyaWJ1dGUiLCJhdHRhY2hTaGFkb3ciLCJpbml0Iiwic3RyaWN0IiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiaW5zZXJ0QWRqYWNlbnRUZXh0IiwiYWRkTmV4dCIsIm91dCIsImlzT3BlbmVkIiwiZ2V0QXR0cmlidXRlTlMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZU5TIiwiaGFzQXR0cmlidXRlTlMiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInNldEF0dHJpYnV0ZU5TIiwic2V0QXR0cmlidXRlTm9kZU5TIiwiY2xhc3NOYW1lcyIsImJhc2VWYWwiLCJhbmltVmFsIiwiaWxsZWdhbENvbnN0cnVjdG9yIiwiRmFjYWRlcyIsIkF0dHIiLCJDREFUQVNlY3Rpb24iLCJEb2N1bWVudFR5cGUiLCJOb2RlIiwiU1ZHRWxlbWVudCIsIkxldmVsMCIsImxldmVsMCIsIm93bmVyTGVzcyIsImJsdXIiLCJjbGljayIsImNsaWNrRXZlbnQiLCJhY2Nlc3NLZXlMYWJlbCIsImFjY2Vzc0tleSIsImlzQ29udGVudEVkaXRhYmxlIiwiY29udGVudEVkaXRhYmxlIiwiZHJhZ2dhYmxlIiwiaGlkZGVuIiwic3BlbGxjaGVjayIsImxhbmciLCJvbmJsdXIiLCJvbmNhbmNlbCIsIm9uY2FucGxheSIsIm9uY2FucGxheXRocm91Z2giLCJvbmNoYW5nZSIsIm9uY2xpY2siLCJvbmNsb3NlIiwib25jb250ZXh0bWVudSIsIm9uY3VlY2hhbmdlIiwib25kYmxjbGljayIsIm9uZHJhZyIsIm9uZHJhZ2VuZCIsIm9uZHJhZ2VudGVyIiwib25kcmFnbGVhdmUiLCJvbmRyYWdvdmVyIiwib25kcmFnc3RhcnQiLCJvbmRyb3AiLCJvbmR1cmF0aW9uY2hhbmdlIiwib25lbXB0aWVkIiwib25lbmRlZCIsIm9uZm9jdXMiLCJvbmlucHV0Iiwib25pbnZhbGlkIiwib25rZXlkb3duIiwib25rZXlwcmVzcyIsIm9ua2V5dXAiLCJvbmxvYWRlZGRhdGEiLCJvbmxvYWRlZG1ldGFkYXRhIiwib25sb2Fkc3RhcnQiLCJvbm1vdXNlZG93biIsIm9ubW91c2VlbnRlciIsIm9ubW91c2VsZWF2ZSIsIm9ubW91c2Vtb3ZlIiwib25tb3VzZW91dCIsIm9ubW91c2VvdmVyIiwib25tb3VzZXVwIiwib25tb3VzZXdoZWVsIiwib25wYXVzZSIsIm9ucGxheSIsIm9ucGxheWluZyIsIm9ucHJvZ3Jlc3MiLCJvbnJhdGVjaGFuZ2UiLCJvbnJlc2l6ZSIsIm9uc2Nyb2xsIiwib25zZWVrZWQiLCJvbnNlZWtpbmciLCJvbnNlbGVjdCIsIm9uc2hvdyIsIm9uc3RhbGxlZCIsIm9uc3VibWl0Iiwib25zdXNwZW5kIiwib250aW1ldXBkYXRlIiwib250b2dnbGUiLCJvbnZvbHVtZWNoYW5nZSIsIm9ud2FpdGluZyIsIm9uYXV4Y2xpY2siLCJvbmdvdHBvaW50ZXJjYXB0dXJlIiwib25sb3N0cG9pbnRlcmNhcHR1cmUiLCJvbnBvaW50ZXJjYW5jZWwiLCJvbnBvaW50ZXJkb3duIiwib25wb2ludGVyZW50ZXIiLCJvbnBvaW50ZXJsZWF2ZSIsIm9ucG9pbnRlcm1vdmUiLCJvbnBvaW50ZXJvdXQiLCJvbnBvaW50ZXJvdmVyIiwib25wb2ludGVydXAiLCJIVE1MVGVtcGxhdGVFbGVtZW50IiwiVGV4dEVsZW1lbnQiLCJIVE1MU2NyaXB0RWxlbWVudCIsInNyYyIsImRlZmVyIiwiY3Jvc3NPcmlnaW4iLCJub21vZHVsZSIsInJlZmVycmVyUG9saWN5IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJzcmNkb2MiLCJhbGxvdyIsImFsbG93RnVsbHNjcmVlbiIsImxvYWRpbmciLCJIVE1MU3R5bGVFbGVtZW50Iiwic2hlZXQiLCJIVE1MVGltZUVsZW1lbnQiLCJkYXRlVGltZSIsIkhUTUxJbnB1dEVsZW1lbnQiLCJhdXRvZm9jdXMiLCJIVE1MSGVhZGluZ0VsZW1lbnQiLCJIVE1MQ2FudmFzRWxlbWVudCIsIkhUTUxPcHRpb25FbGVtZW50IiwiSFRNTFRpdGxlRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiSFRNTEJ1dHRvbkVsZW1lbnQiLCJIVE1MVGV4dEFyZWFFbGVtZW50IiwiSFRNTExpbmtFbGVtZW50IiwiaHJlZmxhbmciLCJyZWwiLCJIVE1MU2xvdEVsZW1lbnQiLCJhc3NpZ25lZE5vZGVzIiwiaXNOYW1lZFNsb3QiLCJob3N0Q2hpbGROb2RlcyIsInNsb3R0YWJsZXMiLCJmbGF0dGVuIiwic2xvdHRhYmxlIiwiYXNzaWduZWRFbGVtZW50cyIsIkhUTUxJbWFnZUVsZW1lbnQiLCJzaXplcyIsInNyY3NldCIsIkhUTUxNZXRhRWxlbWVudCIsImh0dHBFcXVpdiIsImNoYXJzZXQiLCJIVE1MQW5jaG9yRWxlbWVudCIsImVuY29kZVVSSSIsImRlY29kZVVSSSIsIkhUTUxTb3VyY2VFbGVtZW50IiwiSFRNTENsYXNzZXMiLCJIVE1MSHRtbEVsZW1lbnQiLCJIVE1MRnJhbWVFbGVtZW50IiwiSFRNTE9iamVjdEVsZW1lbnQiLCJIVE1MSGVhZEVsZW1lbnQiLCJIVE1MQm9keUVsZW1lbnQiLCJIVE1MRmllbGRTZXRFbGVtZW50IiwiSFRNTEVtYmVkRWxlbWVudCIsIkhUTUxIUkVsZW1lbnQiLCJIVE1MUHJvZ3Jlc3NFbGVtZW50IiwiSFRNTFBhcmFncmFwaEVsZW1lbnQiLCJIVE1MVGFibGVFbGVtZW50IiwiSFRNTEZyYW1lU2V0RWxlbWVudCIsIkhUTUxMSUVsZW1lbnQiLCJIVE1MQmFzZUVsZW1lbnQiLCJIVE1MRGF0YUxpc3RFbGVtZW50IiwiSFRNTFBhcmFtRWxlbWVudCIsIkhUTUxNZWRpYUVsZW1lbnQiLCJIVE1MQXVkaW9FbGVtZW50IiwiSFRNTERpcmVjdG9yeUVsZW1lbnQiLCJIVE1MUXVvdGVFbGVtZW50IiwiSFRNTExlZ2VuZEVsZW1lbnQiLCJIVE1MU3BhbkVsZW1lbnQiLCJIVE1MTWV0ZXJFbGVtZW50IiwiSFRNTFZpZGVvRWxlbWVudCIsIkhUTUxUYWJsZUNlbGxFbGVtZW50IiwiSFRNTE91dHB1dEVsZW1lbnQiLCJIVE1MVGFibGVSb3dFbGVtZW50IiwiSFRNTERhdGFFbGVtZW50IiwiSFRNTE1lbnVFbGVtZW50IiwiSFRNTEJSRWxlbWVudCIsIkhUTUxNYXBFbGVtZW50IiwiSFRNTE9wdEdyb3VwRWxlbWVudCIsIkhUTUxETGlzdEVsZW1lbnQiLCJIVE1MRm9udEVsZW1lbnQiLCJIVE1MRGl2RWxlbWVudCIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxQcmVFbGVtZW50IiwiSFRNTFVMaXN0RWxlbWVudCIsIkhUTUxQaWN0dXJlRWxlbWVudCIsIkhUTUxBcmVhRWxlbWVudCIsIkhUTUxPTGlzdEVsZW1lbnQiLCJIVE1MVGFibGVDYXB0aW9uRWxlbWVudCIsIkhUTUxMYWJlbEVsZW1lbnQiLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJIVE1MTW9kRWxlbWVudCIsIkhUTUxEZXRhaWxzRWxlbWVudCIsIkhUTUxUcmFja0VsZW1lbnQiLCJIVE1MTWFycXVlZUVsZW1lbnQiLCJNaW1lIiwiZG9jVHlwZSIsImRldGFpbCIsIkltYWdlQ2xhc3MiLCJkZWxldGVDb250ZW50cyIsIlJhbmdlIiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJpbnNlcnROb2RlIiwic2VsZWN0Tm9kZSIsInNlbGVjdE5vZGVDb250ZW50cyIsInN1cnJvdW5kQ29udGVudHMiLCJleHRyYWN0Q29udGVudHMiLCJzZXRTdGFydEJlZm9yZSIsInNldFN0YXJ0QWZ0ZXIiLCJzZXRFbmRCZWZvcmUiLCJzZXRFbmRBZnRlciIsImNsb25lQ29udGVudHMiLCJjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQiLCJpc1NWRyIsImNsb25lUmFuZ2UiLCJpc09LIiwibWFzayIsIlRyZWVXYWxrZXIiLCJ3aGF0VG9TaG93IiwiY3VycmVudE5vZGUiLCJuZXh0Tm9kZSIsIiQiLCJnbG9iYWxFeHBvcnRzIiwiRXZlbnRUYXJnZXQiLCJJbnB1dEV2ZW50IiwiaW5wdXRFdmVudEluaXQiLCJkYXRhVHJhbnNmZXIiLCJpc0NvbXBvc2luZyIsInJhbmdlcyIsImV0IiwiJDQiLCIkNiIsImNyZWF0ZURvY3VtZW50VHlwZSIsImNyZWF0ZVJhbmdlIiwiY3JlYXRlVHJlZVdhbGtlciIsImNyZWF0ZU5vZGVJdGVyYXRvciIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwiY2FuQnViYmxlIiwiaW1wb3J0Tm9kZSIsImV4dGVybmFsTm9kZSIsImNyZWF0ZUF0dHJpYnV0ZU5TIiwibnNwIiwiRG9jdW1lbnQiLCJub2RlTGlzdCIsImF0IiwiYnVpbHRpbiIsImNyZWF0ZUhUTUxFbGVtZW50IiwiU1ZHRG9jdW1lbnQiLCJYTUxEb2N1bWVudCIsImdsb2JhbHMiLCJyYW5kb21VVUlEIiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwicm5kczgiLCJybmciLCJieXRlVG9IZXgiLCJ1bnNhZmVTdHJpbmdpZnkiLCJidWYiLCJybmRzIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImhhc0F3YWl0IiwiY3VycmVudERlcHMiLCJvdXRlclJlc29sdmUiLCJkZXBRdWV1ZXMiLCJyZWoiLCJkZXBzIiwiZGVwIiwid3JhcERlcHMiLCJnZXRSZXN1bHQiLCJmblF1ZXVlIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImRlZmluaXRpb24iXSwic291cmNlUm9vdCI6IiJ9
