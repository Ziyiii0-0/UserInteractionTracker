/*! For license information please see background.js.LICENSE.txt */
(()=>{var e,t,r,n,i={1264:e=>{e.exports={trueFunc:function(){return!0},falseFunc:function(){return!1}}},2860:(e,t,r)=>{var n={CSSRule:r(8845).W,CSSGroupingRule:r(1324).h,CSSConditionRule:function(){n.CSSGroupingRule.call(this),this.cssRules=[]}};n.CSSConditionRule.prototype=new n.CSSGroupingRule,n.CSSConditionRule.prototype.constructor=n.CSSConditionRule,n.CSSConditionRule.prototype.conditionText="",n.CSSConditionRule.prototype.cssText="",t.l=n.CSSConditionRule},2528:(e,t,r)=>{var n={CSSRule:r(8845).W,MatcherList:r(8274).J,CSSDocumentRule:function(){n.CSSRule.call(this),this.matcher=new n.MatcherList,this.cssRules=[]}};n.CSSDocumentRule.prototype=new n.CSSRule,n.CSSDocumentRule.prototype.constructor=n.CSSDocumentRule,n.CSSDocumentRule.prototype.type=10,Object.defineProperty(n.CSSDocumentRule.prototype,"cssText",{get:function(){for(var e=[],t=0,r=this.cssRules.length;t<r;t++)e.push(this.cssRules[t].cssText);return"@-moz-document "+this.matcher.matcherText+" {"+e.join("")+"}"}}),t.N=n.CSSDocumentRule},4641:(e,t,r)=>{var n={CSSStyleDeclaration:r(3788).d,CSSRule:r(8845).W,CSSFontFaceRule:function(){n.CSSRule.call(this),this.style=new n.CSSStyleDeclaration,this.style.parentRule=this}};n.CSSFontFaceRule.prototype=new n.CSSRule,n.CSSFontFaceRule.prototype.constructor=n.CSSFontFaceRule,n.CSSFontFaceRule.prototype.type=5,Object.defineProperty(n.CSSFontFaceRule.prototype,"cssText",{get:function(){return"@font-face {"+this.style.cssText+"}"}}),t.O=n.CSSFontFaceRule},1324:(e,t,r)=>{var n={CSSRule:r(8845).W,CSSGroupingRule:function(){n.CSSRule.call(this),this.cssRules=[]}};n.CSSGroupingRule.prototype=new n.CSSRule,n.CSSGroupingRule.prototype.constructor=n.CSSGroupingRule,n.CSSGroupingRule.prototype.insertRule=function(e,t){if(t<0||t>this.cssRules.length)throw new RangeError("INDEX_SIZE_ERR");var r=n.parse(e).cssRules[0];return r.parentRule=this,this.cssRules.splice(t,0,r),t},n.CSSGroupingRule.prototype.deleteRule=function(e){if(e<0||e>=this.cssRules.length)throw new RangeError("INDEX_SIZE_ERR");this.cssRules.splice(e,1)[0].parentRule=null},t.h=n.CSSGroupingRule},7567:(e,t,r)=>{var n={CSSRule:r(8845).W,CSSHostRule:function(){n.CSSRule.call(this),this.cssRules=[]}};n.CSSHostRule.prototype=new n.CSSRule,n.CSSHostRule.prototype.constructor=n.CSSHostRule,n.CSSHostRule.prototype.type=1001,Object.defineProperty(n.CSSHostRule.prototype,"cssText",{get:function(){for(var e=[],t=0,r=this.cssRules.length;t<r;t++)e.push(this.cssRules[t].cssText);return"@host {"+e.join("")+"}"}}),t.c=n.CSSHostRule},8964:(e,t,r)=>{var n={CSSRule:r(8845).W,CSSStyleSheet:r(1883).e,MediaList:r(7668).b,CSSImportRule:function(){n.CSSRule.call(this),this.href="",this.media=new n.MediaList,this.styleSheet=new n.CSSStyleSheet}};n.CSSImportRule.prototype=new n.CSSRule,n.CSSImportRule.prototype.constructor=n.CSSImportRule,n.CSSImportRule.prototype.type=3,Object.defineProperty(n.CSSImportRule.prototype,"cssText",{get:function(){var e=this.media.mediaText;return"@import url("+this.href+")"+(e?" "+e:"")+";"},set:function(e){for(var t,r,n=0,i="",s="";r=e.charAt(n);n++)switch(r){case" ":case"\t":case"\r":case"\n":case"\f":"after-import"===i?i="url":s+=r;break;case"@":i||e.indexOf("@import",n)!==n||(i="after-import",n+=6,s="");break;case"u":if("url"===i&&e.indexOf("url(",n)===n){if(-1===(t=e.indexOf(")",n+1)))throw n+': ")" not found';n+=4;var a=e.slice(n,t);a[0]===a[a.length-1]&&('"'!==a[0]&&"'"!==a[0]||(a=a.slice(1,-1))),this.href=a,n=t,i="media"}break;case'"':if("url"===i){if(!(t=e.indexOf('"',n+1)))throw n+": '\"' not found";this.href=e.slice(n+1,t),n=t,i="media"}break;case"'":if("url"===i){if(!(t=e.indexOf("'",n+1)))throw n+': "\'" not found';this.href=e.slice(n+1,t),n=t,i="media"}break;case";":"media"===i&&s&&(this.media.mediaText=s.trim());break;default:"media"===i&&(s+=r)}}}),t.X=n.CSSImportRule},4561:(e,t,r)=>{var n={CSSRule:r(8845).W,CSSStyleDeclaration:r(3788).d,CSSKeyframeRule:function(){n.CSSRule.call(this),this.keyText="",this.style=new n.CSSStyleDeclaration,this.style.parentRule=this}};n.CSSKeyframeRule.prototype=new n.CSSRule,n.CSSKeyframeRule.prototype.constructor=n.CSSKeyframeRule,n.CSSKeyframeRule.prototype.type=8,Object.defineProperty(n.CSSKeyframeRule.prototype,"cssText",{get:function(){return this.keyText+" {"+this.style.cssText+"} "}}),t.o=n.CSSKeyframeRule},4172:(e,t,r)=>{var n={CSSRule:r(8845).W,CSSKeyframesRule:function(){n.CSSRule.call(this),this.name="",this.cssRules=[]}};n.CSSKeyframesRule.prototype=new n.CSSRule,n.CSSKeyframesRule.prototype.constructor=n.CSSKeyframesRule,n.CSSKeyframesRule.prototype.type=7,Object.defineProperty(n.CSSKeyframesRule.prototype,"cssText",{get:function(){for(var e=[],t=0,r=this.cssRules.length;t<r;t++)e.push("  "+this.cssRules[t].cssText);return"@"+(this._vendorPrefix||"")+"keyframes "+this.name+" { \n"+e.join("\n")+"\n}"}}),t.D=n.CSSKeyframesRule},9793:(e,t,r)=>{var n={CSSRule:r(8845).W,CSSGroupingRule:r(1324).h,CSSConditionRule:r(2860).l,MediaList:r(7668).b,CSSMediaRule:function(){n.CSSConditionRule.call(this),this.media=new n.MediaList}};n.CSSMediaRule.prototype=new n.CSSConditionRule,n.CSSMediaRule.prototype.constructor=n.CSSMediaRule,n.CSSMediaRule.prototype.type=4,Object.defineProperties(n.CSSMediaRule.prototype,{conditionText:{get:function(){return this.media.mediaText},set:function(e){this.media.mediaText=e},configurable:!0,enumerable:!0},cssText:{get:function(){for(var e=[],t=0,r=this.cssRules.length;t<r;t++)e.push(this.cssRules[t].cssText);return"@media "+this.media.mediaText+" {"+e.join("")+"}"},configurable:!0,enumerable:!0}}),t.O=n.CSSMediaRule},8845:(e,t)=>{var r={CSSRule:function(){this.parentRule=null,this.parentStyleSheet=null}};r.CSSRule.UNKNOWN_RULE=0,r.CSSRule.STYLE_RULE=1,r.CSSRule.CHARSET_RULE=2,r.CSSRule.IMPORT_RULE=3,r.CSSRule.MEDIA_RULE=4,r.CSSRule.FONT_FACE_RULE=5,r.CSSRule.PAGE_RULE=6,r.CSSRule.KEYFRAMES_RULE=7,r.CSSRule.KEYFRAME_RULE=8,r.CSSRule.MARGIN_RULE=9,r.CSSRule.NAMESPACE_RULE=10,r.CSSRule.COUNTER_STYLE_RULE=11,r.CSSRule.SUPPORTS_RULE=12,r.CSSRule.DOCUMENT_RULE=13,r.CSSRule.FONT_FEATURE_VALUES_RULE=14,r.CSSRule.VIEWPORT_RULE=15,r.CSSRule.REGION_STYLE_RULE=16,r.CSSRule.prototype={constructor:r.CSSRule},t.W=r.CSSRule},3788:(e,t,r)=>{var n={CSSStyleDeclaration:function(){this.length=0,this.parentRule=null,this._importants={}}};n.CSSStyleDeclaration.prototype={constructor:n.CSSStyleDeclaration,getPropertyValue:function(e){return this[e]||""},setProperty:function(e,t,r){this[e]?Array.prototype.indexOf.call(this,e)<0&&(this[this.length]=e,this.length++):(this[this.length]=e,this.length++),this[e]=t+"",this._importants[e]=r},removeProperty:function(e){if(!(e in this))return"";var t=Array.prototype.indexOf.call(this,e);if(t<0)return"";var r=this[e];return this[e]="",Array.prototype.splice.call(this,t,1),r},getPropertyCSSValue:function(){},getPropertyPriority:function(e){return this._importants[e]||""},getPropertyShorthand:function(){},isPropertyImplicit:function(){},get cssText(){for(var e=[],t=0,r=this.length;t<r;++t){var n=this[t],i=this.getPropertyValue(n),s=this.getPropertyPriority(n);s&&(s=" !"+s),e[t]=n+": "+i+s+";"}return e.join(" ")},set cssText(e){var t,r;for(t=this.length;t--;)this[r=this[t]]="";Array.prototype.splice.call(this,0,this.length),this._importants={};var i=n.parse("#bogus{"+e+"}").cssRules[0].style,s=i.length;for(t=0;t<s;++t)r=i[t],this.setProperty(i[t],i.getPropertyValue(r),i.getPropertyPriority(r))}},t.d=n.CSSStyleDeclaration,n.parse=r(6535).parse},1244:(e,t,r)=>{var n={CSSStyleDeclaration:r(3788).d,CSSRule:r(8845).W,CSSStyleRule:function(){n.CSSRule.call(this),this.selectorText="",this.style=new n.CSSStyleDeclaration,this.style.parentRule=this}};n.CSSStyleRule.prototype=new n.CSSRule,n.CSSStyleRule.prototype.constructor=n.CSSStyleRule,n.CSSStyleRule.prototype.type=1,Object.defineProperty(n.CSSStyleRule.prototype,"cssText",{get:function(){return this.selectorText?this.selectorText+" {"+this.style.cssText+"}":""},set:function(e){var t=n.CSSStyleRule.parse(e);this.style=t.style,this.selectorText=t.selectorText}}),n.CSSStyleRule.parse=function(e){for(var t,r,i,s=0,a="selector",o=s,l="",c={selector:!0,value:!0},u=new n.CSSStyleRule,d="";i=e.charAt(s);s++)switch(i){case" ":case"\t":case"\r":case"\n":case"\f":if(c[a])switch(e.charAt(s-1)){case" ":case"\t":case"\r":case"\n":case"\f":break;default:l+=" "}break;case'"':if(o=s+1,!(t=e.indexOf('"',o)+1))throw'" is missing';l+=e.slice(s,t),s=t-1;break;case"'":if(o=s+1,!(t=e.indexOf("'",o)+1))throw"' is missing";l+=e.slice(s,t),s=t-1;break;case"/":if("*"===e.charAt(s+1)){if(s+=2,-1===(t=e.indexOf("*/",s)))throw new SyntaxError("Missing */");s=t+1}else l+=i;break;case"{":"selector"===a&&(u.selectorText=l.trim(),l="",a="name");break;case":":"name"===a?(r=l.trim(),l="",a="value"):l+=i;break;case"!":"value"===a&&e.indexOf("!important",s)===s?(d="important",s+=9):l+=i;break;case";":"value"===a?(u.style.setProperty(r,l.trim(),d),d="",l="",a="name"):l+=i;break;case"}":if("value"===a)u.style.setProperty(r,l.trim(),d),d="",l="";else{if("name"===a)break;l+=i}a="selector";break;default:l+=i}return u},t.f=n.CSSStyleRule},1883:(e,t,r)=>{var n={StyleSheet:r(1486).v,CSSStyleRule:r(1244).f,CSSStyleSheet:function(){n.StyleSheet.call(this),this.cssRules=[]}};n.CSSStyleSheet.prototype=new n.StyleSheet,n.CSSStyleSheet.prototype.constructor=n.CSSStyleSheet,n.CSSStyleSheet.prototype.insertRule=function(e,t){if(t<0||t>this.cssRules.length)throw new RangeError("INDEX_SIZE_ERR");var r=n.parse(e).cssRules[0];return r.parentStyleSheet=this,this.cssRules.splice(t,0,r),t},n.CSSStyleSheet.prototype.deleteRule=function(e){if(e<0||e>=this.cssRules.length)throw new RangeError("INDEX_SIZE_ERR");this.cssRules.splice(e,1)},n.CSSStyleSheet.prototype.toString=function(){for(var e="",t=this.cssRules,r=0;r<t.length;r++)e+=t[r].cssText+"\n";return e},t.e=n.CSSStyleSheet,n.parse=r(6535).parse},9961:(e,t,r)=>{var n={CSSRule:r(8845).W,CSSGroupingRule:r(1324).h,CSSConditionRule:r(2860).l,CSSSupportsRule:function(){n.CSSConditionRule.call(this)}};n.CSSSupportsRule.prototype=new n.CSSConditionRule,n.CSSSupportsRule.prototype.constructor=n.CSSSupportsRule,n.CSSSupportsRule.prototype.type=12,Object.defineProperty(n.CSSSupportsRule.prototype,"cssText",{get:function(){for(var e=[],t=0,r=this.cssRules.length;t<r;t++)e.push(this.cssRules[t].cssText);return"@supports "+this.conditionText+" {"+e.join("")+"}"}}),t._=n.CSSSupportsRule},3646:(e,t)=>{var r={CSSValue:function(){}};r.CSSValue.prototype={constructor:r.CSSValue,set cssText(e){var t=this._getConstructorName();throw new Error('DOMException: property "cssText" of "'+t+'" is readonly and can not be replaced with "'+e+'"!')},get cssText(){var e=this._getConstructorName();throw new Error('getter "cssText" of "'+e+'" is not implemented!')},_getConstructorName:function(){return this.constructor.toString().match(/function\s([^\(]+)/)[1]}},t.F=r.CSSValue},1080:(e,t,r)=>{var n={CSSValue:r(3646).F,CSSValueExpression:function(e,t){this._token=e,this._idx=t}};n.CSSValueExpression.prototype=new n.CSSValue,n.CSSValueExpression.prototype.constructor=n.CSSValueExpression,n.CSSValueExpression.prototype.parse=function(){for(var e,t=this._token,r=this._idx,n="",i="",s="",a=[];;++r){if(""===(n=t.charAt(r))){s="css expression error: unfinished expression!";break}switch(n){case"(":a.push(n),i+=n;break;case")":a.pop(n),i+=n;break;case"/":(e=this._parseJSComment(t,r))?e.error?s="css expression error: unfinished comment in expression!":r=e.idx:(e=this._parseJSRexExp(t,r))?(r=e.idx,i+=e.text):i+=n;break;case"'":case'"':(e=this._parseJSString(t,r,n))?(r=e.idx,i+=e.text):i+=n;break;default:i+=n}if(s)break;if(0===a.length)break}return s?{error:s}:{idx:r,expression:i}},n.CSSValueExpression.prototype._parseJSComment=function(e,t){var r=e.charAt(t+1);if("/"===r||"*"===r){var n,i,s=t;return"/"===r?i="\n":"*"===r&&(i="*/"),-1!==(n=e.indexOf(i,s+1+1))?{idx:n=n+i.length-1,text:e.substring(t,n+1)}:{error:"css expression error: unfinished comment in expression!"}}return!1},n.CSSValueExpression.prototype._parseJSString=function(e,t,r){var n=this._findMatchedIdx(e,t,r);return-1!==n&&{idx:n,text:e.substring(t,n+r.length)}},n.CSSValueExpression.prototype._parseJSRexExp=function(e,t){var r=e.substring(0,t).replace(/\s+$/,"");return!![/^$/,/\($/,/\[$/,/\!$/,/\+$/,/\-$/,/\*$/,/\/\s+/,/\%$/,/\=$/,/\>$/,/<$/,/\&$/,/\|$/,/\^$/,/\~$/,/\?$/,/\,$/,/delete$/,/in$/,/instanceof$/,/new$/,/typeof$/,/void$/].some((function(e){return e.test(r)}))&&this._parseJSString(e,t,"/")},n.CSSValueExpression.prototype._findMatchedIdx=function(e,t,r){for(var n,i=t;;){if(-1===(n=e.indexOf(r,i+1))){n=-1;break}var s=e.substring(t+1,n).match(/\\+$/);if(!s||s[0]%2==0)break;i=n}return e.indexOf("\n",t+1)<n&&(n=-1),n},t.t=n.CSSValueExpression},8274:(e,t)=>{var r={MatcherList:function(){this.length=0}};r.MatcherList.prototype={constructor:r.MatcherList,get matcherText(){return Array.prototype.join.call(this,", ")},set matcherText(e){for(var t=e.split(","),r=this.length=t.length,n=0;n<r;n++)this[n]=t[n].trim()},appendMatcher:function(e){-1===Array.prototype.indexOf.call(this,e)&&(this[this.length]=e,this.length++)},deleteMatcher:function(e){var t=Array.prototype.indexOf.call(this,e);-1!==t&&Array.prototype.splice.call(this,t,1)}},t.J=r.MatcherList},7668:(e,t)=>{var r={MediaList:function(){this.length=0}};r.MediaList.prototype={constructor:r.MediaList,get mediaText(){return Array.prototype.join.call(this,", ")},set mediaText(e){for(var t=e.split(","),r=this.length=t.length,n=0;n<r;n++)this[n]=t[n].trim()},appendMedium:function(e){-1===Array.prototype.indexOf.call(this,e)&&(this[this.length]=e,this.length++)},deleteMedium:function(e){var t=Array.prototype.indexOf.call(this,e);-1!==t&&Array.prototype.splice.call(this,t,1)}},t.b=r.MediaList},1486:(e,t)=>{t.v={StyleSheet:function(){this.parentStyleSheet=null}}.StyleSheet},3625:(e,t,r)=>{var n={CSSStyleSheet:r(1883).e,CSSRule:r(8845).W,CSSStyleRule:r(1244).f,CSSGroupingRule:r(1324).h,CSSConditionRule:r(2860).l,CSSMediaRule:r(9793).O,CSSSupportsRule:r(9961)._,CSSStyleDeclaration:r(3788).d,CSSKeyframeRule:r(4561).o,CSSKeyframesRule:r(4172).D,clone:function e(t){var r=new n.CSSStyleSheet,i=t.cssRules;if(!i)return r;for(var s=0,a=i.length;s<a;s++){var o=i[s],l=r.cssRules[s]=new o.constructor,c=o.style;if(c){for(var u=l.style=new n.CSSStyleDeclaration,d=0,h=c.length;d<h;d++){var p=u[d]=c[d];u[p]=c[p],u._importants[p]=c.getPropertyPriority(p)}u.length=c.length}o.hasOwnProperty("keyText")&&(l.keyText=o.keyText),o.hasOwnProperty("selectorText")&&(l.selectorText=o.selectorText),o.hasOwnProperty("mediaText")&&(l.mediaText=o.mediaText),o.hasOwnProperty("conditionText")&&(l.conditionText=o.conditionText),o.hasOwnProperty("cssRules")&&(l.cssRules=e(o).cssRules)}return r}};n.clone},7908:(e,t,r)=>{"use strict";r(3788).d,r(8845).W,r(1324).h,r(2860).l,r(1244).f,r(7668).b,r(9793).O,r(9961)._,r(8964).X,r(4641).O,r(7567).c,r(1486).v,r(1883).e,r(4172).D,r(4561).o,r(8274).J,r(2528).N,r(3646).F,r(1080).t,t.parse=r(6535).parse,r(3625)},6535:(e,t,r)=>{var n={parse:function(e){for(var t,r,i,s,a,o,l,c,u,d,h,p,f,m=0,g="before-selector",b="",v=0,y={selector:!0,value:!0,"value-parenthesis":!0,atRule:!0,"importRule-begin":!0,importRule:!0,atBlock:!0,conditionBlock:!0,"documentRule-begin":!0},_=new n.CSSStyleSheet,x=_,w=[],S=!1,k="",E=/@(-(?:\w+-)+)?keyframes/g,A=function(t){var r=e.substring(0,m).split("\n"),n=r.length,i=r.pop().length+1,s=new Error(t+" (line "+n+", char "+i+")");throw s.line=n,s.char=i,s.styleSheet=_,s};f=e.charAt(m);m++)switch(f){case" ":case"\t":case"\r":case"\n":case"\f":y[g]&&(b+=f);break;case'"':t=m+1;do{(t=e.indexOf('"',t)+1)||A('Unmatched "')}while("\\"===e[t-2]);switch(b+=e.slice(m,t),m=t-1,g){case"before-value":g="value";break;case"importRule-begin":g="importRule"}break;case"'":t=m+1;do{(t=e.indexOf("'",t)+1)||A("Unmatched '")}while("\\"===e[t-2]);switch(b+=e.slice(m,t),m=t-1,g){case"before-value":g="value";break;case"importRule-begin":g="importRule"}break;case"/":"*"===e.charAt(m+1)?(m+=2,-1===(t=e.indexOf("*/",m))?A("Missing */"):m=t+1):b+=f,"importRule-begin"===g&&(b+=" ",g="importRule");break;case"@":if(e.indexOf("@-moz-document",m)===m){g="documentRule-begin",(h=new n.CSSDocumentRule).__starts=m,m+=13,b="";break}if(e.indexOf("@media",m)===m){g="atBlock",(o=new n.CSSMediaRule).__starts=m,m+=5,b="";break}if(e.indexOf("@supports",m)===m){g="conditionBlock",(l=new n.CSSSupportsRule).__starts=m,m+=8,b="";break}if(e.indexOf("@host",m)===m){g="hostRule-begin",m+=4,(p=new n.CSSHostRule).__starts=m,b="";break}if(e.indexOf("@import",m)===m){g="importRule-begin",m+=6,b+="@import";break}if(e.indexOf("@font-face",m)===m){g="fontFaceRule-begin",m+=9,(u=new n.CSSFontFaceRule).__starts=m,b="";break}E.lastIndex=m;var C=E.exec(e);if(C&&C.index===m){g="keyframesRule-begin",(d=new n.CSSKeyframesRule).__starts=m,d._vendorPrefix=C[1],m+=C[0].length-1,b="";break}"selector"===g&&(g="atRule"),b+=f;break;case"{":"selector"===g||"atRule"===g?(a.selectorText=b.trim(),a.style.__starts=m,b="",g="before-name"):"atBlock"===g?(o.media.mediaText=b.trim(),r&&w.push(r),x=r=o,o.parentStyleSheet=_,b="",g="before-selector"):"conditionBlock"===g?(l.conditionText=b.trim(),r&&w.push(r),x=r=l,l.parentStyleSheet=_,b="",g="before-selector"):"hostRule-begin"===g?(r&&w.push(r),x=r=p,p.parentStyleSheet=_,b="",g="before-selector"):"fontFaceRule-begin"===g?(r&&(u.parentRule=r),u.parentStyleSheet=_,a=u,b="",g="before-name"):"keyframesRule-begin"===g?(d.name=b.trim(),r&&(w.push(r),d.parentRule=r),d.parentStyleSheet=_,x=r=d,b="",g="keyframeRule-begin"):"keyframeRule-begin"===g?((a=new n.CSSKeyframeRule).keyText=b.trim(),a.__starts=m,b="",g="before-name"):"documentRule-begin"===g&&(h.matcher.matcherText=b.trim(),r&&(w.push(r),h.parentRule=r),x=r=h,h.parentStyleSheet=_,b="",g="before-selector");break;case":":"name"===g?(s=b.trim(),b="",g="before-value"):b+=f;break;case"(":if("value"===g)if("expression"===b.trim()){var T=new n.CSSValueExpression(e,m).parse();T.error?A(T.error):(b+=T.expression,m=T.idx)}else g="value-parenthesis",v=1,b+=f;else"value-parenthesis"===g?(v++,b+=f):b+=f;break;case")":"value-parenthesis"===g&&0==--v&&(g="value"),b+=f;break;case"!":"value"===g&&e.indexOf("!important",m)===m?(k="important",m+=9):b+=f;break;case";":switch(g){case"value":a.style.setProperty(s,b.trim(),k),k="",b="",g="before-name";break;case"atRule":b="",g="before-selector";break;case"importRule":(c=new n.CSSImportRule).parentStyleSheet=c.styleSheet.parentStyleSheet=_,c.cssText=b+f,_.cssRules.push(c),b="",g="before-selector";break;default:b+=f}break;case"}":switch(g){case"value":a.style.setProperty(s,b.trim(),k),k="";case"before-name":case"name":a.__ends=m+1,r&&(a.parentRule=r),a.parentStyleSheet=_,x.cssRules.push(a),b="",g=x.constructor===n.CSSKeyframesRule?"keyframeRule-begin":"before-selector";break;case"keyframeRule-begin":case"before-selector":case"selector":for(r||A("Unexpected }"),S=w.length>0;w.length>0;){if("CSSMediaRule"===(r=w.pop()).constructor.name||"CSSSupportsRule"===r.constructor.name){i=x,(x=r).cssRules.push(i);break}0===w.length&&(S=!1)}S||(x.__ends=m+1,_.cssRules.push(x),x=_,r=null),b="",g="before-selector"}break;default:switch(g){case"before-selector":g="selector",(a=new n.CSSStyleRule).__starts=m;break;case"before-name":g="name";break;case"before-value":g="value";break;case"importRule-begin":g="importRule"}b+=f}return _}};t.parse=n.parse,n.CSSStyleSheet=r(1883).e,n.CSSStyleRule=r(1244).f,n.CSSImportRule=r(8964).X,n.CSSGroupingRule=r(1324).h,n.CSSMediaRule=r(9793).O,n.CSSConditionRule=r(2860).l,n.CSSSupportsRule=r(9961)._,n.CSSFontFaceRule=r(4641).O,n.CSSHostRule=r(7567).c,n.CSSStyleDeclaration=r(3788).d,n.CSSKeyframeRule=r(4561).o,n.CSSKeyframesRule=r(4172).D,n.CSSValueExpression=r(1080).t,n.CSSDocumentRule=r(2528).N},1710:(e,t,r)=>{e.exports=function e(t,r,n){function i(a,o){if(!r[a]){if(!t[a]){if(s)return s(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var c=r[a]={exports:{}};t[a][0].call(c.exports,(function(e){return i(t[a][1][e]||e)}),c,c.exports,e,t,r,n)}return r[a].exports}for(var s=void 0,a=0;a<n.length;a++)i(n[a]);return i}({1:[function(e,t,r){"use strict";var n=e("./utils"),i=e("./support"),s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(e){for(var t,r,i,a,o,l,c,u=[],d=0,h=e.length,p=h,f="string"!==n.getTypeOf(e);d<e.length;)p=h-d,i=f?(t=e[d++],r=d<h?e[d++]:0,d<h?e[d++]:0):(t=e.charCodeAt(d++),r=d<h?e.charCodeAt(d++):0,d<h?e.charCodeAt(d++):0),a=t>>2,o=(3&t)<<4|r>>4,l=1<p?(15&r)<<2|i>>6:64,c=2<p?63&i:64,u.push(s.charAt(a)+s.charAt(o)+s.charAt(l)+s.charAt(c));return u.join("")},r.decode=function(e){var t,r,n,a,o,l,c=0,u=0,d="data:";if(e.substr(0,5)===d)throw new Error("Invalid base64 input, it looks like a data url.");var h,p=3*(e=e.replace(/[^A-Za-z0-9+/=]/g,"")).length/4;if(e.charAt(e.length-1)===s.charAt(64)&&p--,e.charAt(e.length-2)===s.charAt(64)&&p--,p%1!=0)throw new Error("Invalid base64 input, bad content length.");for(h=i.uint8array?new Uint8Array(0|p):new Array(0|p);c<e.length;)t=s.indexOf(e.charAt(c++))<<2|(a=s.indexOf(e.charAt(c++)))>>4,r=(15&a)<<4|(o=s.indexOf(e.charAt(c++)))>>2,n=(3&o)<<6|(l=s.indexOf(e.charAt(c++))),h[u++]=t,64!==o&&(h[u++]=r),64!==l&&(h[u++]=n);return h}},{"./support":30,"./utils":32}],2:[function(e,t,r){"use strict";var n=e("./external"),i=e("./stream/DataWorker"),s=e("./stream/Crc32Probe"),a=e("./stream/DataLengthProbe");function o(e,t,r,n,i){this.compressedSize=e,this.uncompressedSize=t,this.crc32=r,this.compression=n,this.compressedContent=i}o.prototype={getContentWorker:function(){var e=new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")),t=this;return e.on("end",(function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")})),e},getCompressedWorker:function(){return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},o.createWorkerFrom=function(e,t,r){return e.pipe(new s).pipe(new a("uncompressedSize")).pipe(t.compressWorker(r)).pipe(new a("compressedSize")).withStreamInfo("compression",t)},t.exports=o},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,r){"use strict";var n=e("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(){return new n("STORE compression")},uncompressWorker:function(){return new n("STORE decompression")}},r.DEFLATE=e("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,r){"use strict";var n=e("./utils"),i=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?"string"!==n.getTypeOf(e)?function(e,t,r){var n=i,s=0+r;e^=-1;for(var a=0;a<s;a++)e=e>>>8^n[255&(e^t[a])];return~e}(0|t,e,e.length):function(e,t,r){var n=i,s=0+r;e^=-1;for(var a=0;a<s;a++)e=e>>>8^n[255&(e^t.charCodeAt(a))];return~e}(0|t,e,e.length):0}},{"./utils":32}],5:[function(e,t,r){"use strict";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(e,t,r){"use strict";var n;n="undefined"!=typeof Promise?Promise:e("lie"),t.exports={Promise:n}},{lie:37}],7:[function(e,t,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,i=e("pako"),s=e("./utils"),a=e("./stream/GenericWorker"),o=n?"uint8array":"array";function l(e,t){a.call(this,"FlateWorker/"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}r.magic="\b\0",s.inherits(l,a),l.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,e.data),!1)},l.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},l.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},l.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var e=this;this._pako.onData=function(t){e.push({data:t,meta:e.meta})}},r.compressWorker=function(e){return new l("Deflate",e)},r.uncompressWorker=function(){return new l("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,r){"use strict";function n(e,t){var r,n="";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n}function i(e,t,r,i,a,u){var d,h,p=e.file,f=e.compression,m=u!==o.utf8encode,g=s.transformTo("string",u(p.name)),b=s.transformTo("string",o.utf8encode(p.name)),v=p.comment,y=s.transformTo("string",u(v)),_=s.transformTo("string",o.utf8encode(v)),x=b.length!==p.name.length,w=_.length!==v.length,S="",k="",E="",A=p.dir,C=p.date,T={crc32:0,compressedSize:0,uncompressedSize:0};t&&!r||(T.crc32=e.crc32,T.compressedSize=e.compressedSize,T.uncompressedSize=e.uncompressedSize);var R=0;t&&(R|=8),m||!x&&!w||(R|=2048);var N=0,q=0;A&&(N|=16),"UNIX"===a?(q=798,N|=function(e,t){var r=e;return e||(r=t?16893:33204),(65535&r)<<16}(p.unixPermissions,A)):(q=20,N|=function(e){return 63&(e||0)}(p.dosPermissions)),d=C.getUTCHours(),d<<=6,d|=C.getUTCMinutes(),d<<=5,d|=C.getUTCSeconds()/2,h=C.getUTCFullYear()-1980,h<<=4,h|=C.getUTCMonth()+1,h<<=5,h|=C.getUTCDate(),x&&(k=n(1,1)+n(l(g),4)+b,S+="up"+n(k.length,2)+k),w&&(E=n(1,1)+n(l(y),4)+_,S+="uc"+n(E.length,2)+E);var I="";return I+="\n\0",I+=n(R,2),I+=f.magic,I+=n(d,2),I+=n(h,2),I+=n(T.crc32,4),I+=n(T.compressedSize,4),I+=n(T.uncompressedSize,4),I+=n(g.length,2),I+=n(S.length,2),{fileRecord:c.LOCAL_FILE_HEADER+I+g+S,dirRecord:c.CENTRAL_FILE_HEADER+n(q,2)+I+n(y.length,2)+"\0\0\0\0"+n(N,4)+n(i,4)+g+S+y}}var s=e("../utils"),a=e("../stream/GenericWorker"),o=e("../utf8"),l=e("../crc32"),c=e("../signature");function u(e,t,r,n){a.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}s.inherits(u,a),u.prototype.push=function(e){var t=e.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,a.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:r?(t+100*(r-n-1))/r:100}}))},u.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var r=i(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},u.prototype.closedSource=function(e){this.accumulate=!1;var t=this.streamFiles&&!e.file.dir,r=i(e,t,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),t)this.push({data:function(e){return c.DATA_DESCRIPTOR+n(e.crc32,4)+n(e.compressedSize,4)+n(e.uncompressedSize,4)}(e),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},u.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var r=this.bytesWritten-e,i=function(e,t,r,i,a){var o=s.transformTo("string",a(i));return c.CENTRAL_DIRECTORY_END+"\0\0\0\0"+n(e,2)+n(e,2)+n(t,4)+n(r,4)+n(o.length,2)+o}(this.dirRecords.length,r,e,this.zipComment,this.encodeFileName);this.push({data:i,meta:{percent:100}})},u.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},u.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()})),e.on("error",(function(e){t.error(e)})),this},u.prototype.resume=function(){return!!a.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},u.prototype.error=function(e){var t=this._sources;if(!a.prototype.error.call(this,e))return!1;for(var r=0;r<t.length;r++)try{t[r].error(e)}catch(e){}return!0},u.prototype.lock=function(){a.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=u},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,r){"use strict";var n=e("../compressions"),i=e("./ZipFileWorker");r.generateWorker=function(e,t,r){var s=new i(t.streamFiles,r,t.platform,t.encodeFileName),a=0;try{e.forEach((function(e,r){a++;var i=function(e,t){var r=e||t,i=n[r];if(!i)throw new Error(r+" is not a valid compression method !");return i}(r.options.compression,t.compression),o=r.options.compressionOptions||t.compressionOptions||{},l=r.dir,c=r.date;r._compressWorker(i,o).withStreamInfo("file",{name:e,dir:l,date:c,comment:r.comment||"",unixPermissions:r.unixPermissions,dosPermissions:r.dosPermissions}).pipe(s)})),s.entriesCount=a}catch(e){s.error(e)}return s}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,r){"use strict";function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var e=new n;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e}}(n.prototype=e("./object")).loadAsync=e("./load"),n.support=e("./support"),n.defaults=e("./defaults"),n.version="3.10.1",n.loadAsync=function(e,t){return(new n).loadAsync(e,t)},n.external=e("./external"),t.exports=n},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,r){"use strict";var n=e("./utils"),i=e("./external"),s=e("./utf8"),a=e("./zipEntries"),o=e("./stream/Crc32Probe"),l=e("./nodejsUtils");function c(e){return new i.Promise((function(t,r){var n=e.decompressed.getContentWorker().pipe(new o);n.on("error",(function(e){r(e)})).on("end",(function(){n.streamInfo.crc32!==e.decompressed.crc32?r(new Error("Corrupted zip : CRC32 mismatch")):t()})).resume()}))}t.exports=function(e,t){var r=this;return t=n.extend(t||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:s.utf8decode}),l.isNode&&l.isStream(e)?i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):n.prepareContent("the loaded zip file",e,!0,t.optimizedBinaryString,t.base64).then((function(e){var r=new a(t);return r.load(e),r})).then((function(e){var r=[i.Promise.resolve(e)],n=e.files;if(t.checkCRC32)for(var s=0;s<n.length;s++)r.push(c(n[s]));return i.Promise.all(r)})).then((function(e){for(var i=e.shift(),s=i.files,a=0;a<s.length;a++){var o=s[a],l=o.fileNameStr,c=n.resolve(o.fileNameStr);r.file(c,o.decompressed,{binary:!0,optimizedBinaryString:!0,date:o.date,dir:o.dir,comment:o.fileCommentStr.length?o.fileCommentStr:null,unixPermissions:o.unixPermissions,dosPermissions:o.dosPermissions,createFolders:t.createFolders}),o.dir||(r.file(c).unsafeOriginalName=l)}return i.zipComment.length&&(r.comment=i.zipComment),r}))}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,r){"use strict";var n=e("../utils"),i=e("../stream/GenericWorker");function s(e,t){i.call(this,"Nodejs stream input adapter for "+e),this._upstreamEnded=!1,this._bindStream(t)}n.inherits(s,i),s.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on("data",(function(e){t.push({data:e,meta:{percent:0}})})).on("error",(function(e){t.isPaused?this.generatedError=e:t.error(e)})).on("end",(function(){t.isPaused?t._upstreamEnded=!0:t.end()}))},s.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=s},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,r){"use strict";var n=e("readable-stream").Readable;function i(e,t,r){n.call(this,t),this._helper=e;var i=this;e.on("data",(function(e,t){i.push(e)||i._helper.pause(),r&&r(t)})).on("error",(function(e){i.emit("error",e)})).on("end",(function(){i.push(null)}))}e("../utils").inherits(i,n),i.prototype._read=function(){this._helper.resume()},t.exports=i},{"../utils":32,"readable-stream":16}],14:[function(e,t,r){"use strict";t.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(e,t){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(e,t);if("number"==typeof e)throw new Error('The "data" argument must not be a number');return new Buffer(e,t)},allocBuffer:function(e){if(Buffer.alloc)return Buffer.alloc(e);var t=new Buffer(e);return t.fill(0),t},isBuffer:function(e){return Buffer.isBuffer(e)},isStream:function(e){return e&&"function"==typeof e.on&&"function"==typeof e.pause&&"function"==typeof e.resume}}},{}],15:[function(e,t,r){"use strict";function n(e,t,r){var n,i=s.getTypeOf(t),o=s.extend(r||{},l);o.date=o.date||new Date,null!==o.compression&&(o.compression=o.compression.toUpperCase()),"string"==typeof o.unixPermissions&&(o.unixPermissions=parseInt(o.unixPermissions,8)),o.unixPermissions&&16384&o.unixPermissions&&(o.dir=!0),o.dosPermissions&&16&o.dosPermissions&&(o.dir=!0),o.dir&&(e=m(e)),o.createFolders&&(n=f(e))&&g.call(this,n,!0);var d="string"===i&&!1===o.binary&&!1===o.base64;r&&void 0!==r.binary||(o.binary=!d),(t instanceof c&&0===t.uncompressedSize||o.dir||!t||0===t.length)&&(o.base64=!1,o.binary=!0,t="",o.compression="STORE",i="string");var b;b=t instanceof c||t instanceof a?t:h.isNode&&h.isStream(t)?new p(e,t):s.prepareContent(e,t,o.binary,o.optimizedBinaryString,o.base64);var v=new u(e,b,o);this.files[e]=v}var i=e("./utf8"),s=e("./utils"),a=e("./stream/GenericWorker"),o=e("./stream/StreamHelper"),l=e("./defaults"),c=e("./compressedObject"),u=e("./zipObject"),d=e("./generate"),h=e("./nodejsUtils"),p=e("./nodejs/NodejsStreamInputAdapter"),f=function(e){"/"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return 0<t?e.substring(0,t):""},m=function(e){return"/"!==e.slice(-1)&&(e+="/"),e},g=function(e,t){return t=void 0!==t?t:l.createFolders,e=m(e),this.files[e]||n.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function b(e){return"[object RegExp]"===Object.prototype.toString.call(e)}var v={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(e){var t,r,n;for(t in this.files)n=this.files[t],(r=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(r,n)},filter:function(e){var t=[];return this.forEach((function(r,n){e(r,n)&&t.push(n)})),t},file:function(e,t,r){if(1!==arguments.length)return e=this.root+e,n.call(this,e,t,r),this;if(b(e)){var i=e;return this.filter((function(e,t){return!t.dir&&i.test(e)}))}var s=this.files[this.root+e];return s&&!s.dir?s:null},folder:function(e){if(!e)return this;if(b(e))return this.filter((function(t,r){return r.dir&&e.test(t)}));var t=this.root+e,r=g.call(this,t),n=this.clone();return n.root=r.name,n},remove:function(e){e=this.root+e;var t=this.files[e];if(t||("/"!==e.slice(-1)&&(e+="/"),t=this.files[e]),t&&!t.dir)delete this.files[e];else for(var r=this.filter((function(t,r){return r.name.slice(0,e.length)===e})),n=0;n<r.length;n++)delete this.files[r[n].name];return this},generate:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(e){var t,r={};try{if((r=s.extend(e||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:i.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");s.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var n=r.comment||this.comment||"";t=d.generateWorker(this,r,n)}catch(e){(t=new a("error")).error(e)}return new o(t,r.type||"string",r.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type="nodebuffer"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=v},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,r){"use strict";t.exports=e("stream")},{stream:void 0}],17:[function(e,t,r){"use strict";var n=e("./DataReader");function i(e){n.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e("../utils").inherits(i,n),i.prototype.byteAt=function(e){return this.data[this.zero+e]},i.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===t&&this.data[s+1]===r&&this.data[s+2]===n&&this.data[s+3]===i)return s-this.zero;return-1},i.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.readData(4);return t===s[0]&&r===s[1]&&n===s[2]&&i===s[3]},i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./DataReader":18}],18:[function(e,t,r){"use strict";var n=e("../utils");function i(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo("string",this.readData(e))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=i},{"../utils":32}],19:[function(e,t,r){"use strict";var n=e("./Uint8ArrayReader");function i(e){n.call(this,e)}e("../utils").inherits(i,n),i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,r){"use strict";var n=e("./DataReader");function i(e){n.call(this,e)}e("../utils").inherits(i,n),i.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},i.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},i.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./DataReader":18}],21:[function(e,t,r){"use strict";var n=e("./ArrayReader");function i(e){n.call(this,e)}e("../utils").inherits(i,n),i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,r){"use strict";var n=e("../utils"),i=e("../support"),s=e("./ArrayReader"),a=e("./StringReader"),o=e("./NodeBufferReader"),l=e("./Uint8ArrayReader");t.exports=function(e){var t=n.getTypeOf(e);return n.checkSupport(t),"string"!==t||i.uint8array?"nodebuffer"===t?new o(e):i.uint8array?new l(n.transformTo("uint8array",e)):new s(n.transformTo("array",e)):new a(e)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,r){"use strict";r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b"},{}],24:[function(e,t,r){"use strict";var n=e("./GenericWorker"),i=e("../utils");function s(e){n.call(this,"ConvertWorker to "+e),this.destType=e}i.inherits(s,n),s.prototype.processChunk=function(e){this.push({data:i.transformTo(this.destType,e.data),meta:e.meta})},t.exports=s},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,r){"use strict";var n=e("./GenericWorker"),i=e("../crc32");function s(){n.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}e("../utils").inherits(s,n),s.prototype.processChunk=function(e){this.streamInfo.crc32=i(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=s},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,r){"use strict";var n=e("../utils"),i=e("./GenericWorker");function s(e){i.call(this,"DataLengthProbe for "+e),this.propName=e,this.withStreamInfo(e,0)}n.inherits(s,i),s.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}i.prototype.processChunk.call(this,e)},t.exports=s},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,r){"use strict";var n=e("../utils"),i=e("./GenericWorker");function s(e){i.call(this,"DataWorker");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,e.then((function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=n.getTypeOf(e),t.isPaused||t._tickAndRepeat()}),(function(e){t.error(e)}))}n.inherits(s,i),s.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":e=this.data.substring(this.index,t);break;case"uint8array":e=this.data.subarray(this.index,t);break;case"array":case"nodebuffer":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=s},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,r){"use strict";function n(e){this.name=e||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}n.prototype={push:function(e){this.emit("data",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit("error",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit("error",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var r=0;r<this._listeners[e].length;r++)this._listeners[e][r].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.end()})),e.on("error",(function(e){t.error(e)})),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e="Worker "+this.name;return this.previous?this.previous+" -> "+e:e}},t.exports=n},{}],29:[function(e,t,r){"use strict";var n=e("../utils"),i=e("./ConvertWorker"),s=e("./GenericWorker"),a=e("../base64"),o=e("../support"),l=e("../external"),c=null;if(o.nodestream)try{c=e("../nodejs/NodejsStreamOutputAdapter")}catch(e){}function u(e,t,r){var a=t;switch(t){case"blob":case"arraybuffer":a="uint8array";break;case"base64":a="string"}try{this._internalType=a,this._outputType=t,this._mimeType=r,n.checkSupport(a),this._worker=e.pipe(new i(a)),e.lock()}catch(e){this._worker=new s("error"),this._worker.error(e)}}u.prototype={accumulate:function(e){return function(e,t){return new l.Promise((function(r,i){var s=[],o=e._internalType,l=e._outputType,c=e._mimeType;e.on("data",(function(e,r){s.push(e),t&&t(r)})).on("error",(function(e){s=[],i(e)})).on("end",(function(){try{var e=function(e,t,r){switch(e){case"blob":return n.newBlob(n.transformTo("arraybuffer",t),r);case"base64":return a.encode(t);default:return n.transformTo(e,t)}}(l,function(e,t){var r,n=0,i=null,s=0;for(r=0;r<t.length;r++)s+=t[r].length;switch(e){case"string":return t.join("");case"array":return Array.prototype.concat.apply([],t);case"uint8array":for(i=new Uint8Array(s),r=0;r<t.length;r++)i.set(t[r],n),n+=t[r].length;return i;case"nodebuffer":return Buffer.concat(t);default:throw new Error("concat : unsupported type '"+e+"'")}}(o,s),c);r(e)}catch(e){i(e)}s=[]})).resume()}))}(this,e)},on:function(e,t){var r=this;return"data"===e?this._worker.on(e,(function(e){t.call(r,e.data,e.meta)})):this._worker.on(e,(function(){n.delay(t,arguments,r)})),this},resume:function(){return n.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(n.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new c(this,{objectMode:"nodebuffer"!==this._outputType},e)}},t.exports=u},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,t,r){"use strict";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer="undefined"!=typeof Buffer,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else{var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:"application/zip"}).size}catch(e){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(n),r.blob=0===i.getBlob("application/zip").size}catch(e){r.blob=!1}}}try{r.nodestream=!!e("readable-stream").Readable}catch(e){r.nodestream=!1}},{"readable-stream":16}],31:[function(e,t,r){"use strict";for(var n=e("./utils"),i=e("./support"),s=e("./nodejsUtils"),a=e("./stream/GenericWorker"),o=new Array(256),l=0;l<256;l++)o[l]=252<=l?6:248<=l?5:240<=l?4:224<=l?3:192<=l?2:1;function c(){a.call(this,"utf-8 decode"),this.leftOver=null}function u(){a.call(this,"utf-8 encode")}o[254]=o[254]=1,r.utf8encode=function(e){return i.nodebuffer?s.newBufferFrom(e,"utf-8"):function(e){var t,r,n,s,a,o=e.length,l=0;for(s=0;s<o;s++)55296==(64512&(r=e.charCodeAt(s)))&&s+1<o&&56320==(64512&(n=e.charCodeAt(s+1)))&&(r=65536+(r-55296<<10)+(n-56320),s++),l+=r<128?1:r<2048?2:r<65536?3:4;for(t=i.uint8array?new Uint8Array(l):new Array(l),s=a=0;a<l;s++)55296==(64512&(r=e.charCodeAt(s)))&&s+1<o&&56320==(64512&(n=e.charCodeAt(s+1)))&&(r=65536+(r-55296<<10)+(n-56320),s++),r<128?t[a++]=r:(r<2048?t[a++]=192|r>>>6:(r<65536?t[a++]=224|r>>>12:(t[a++]=240|r>>>18,t[a++]=128|r>>>12&63),t[a++]=128|r>>>6&63),t[a++]=128|63&r);return t}(e)},r.utf8decode=function(e){return i.nodebuffer?n.transformTo("nodebuffer",e).toString("utf-8"):function(e){var t,r,i,s,a=e.length,l=new Array(2*a);for(t=r=0;t<a;)if((i=e[t++])<128)l[r++]=i;else if(4<(s=o[i]))l[r++]=65533,t+=s-1;else{for(i&=2===s?31:3===s?15:7;1<s&&t<a;)i=i<<6|63&e[t++],s--;1<s?l[r++]=65533:i<65536?l[r++]=i:(i-=65536,l[r++]=55296|i>>10&1023,l[r++]=56320|1023&i)}return l.length!==r&&(l.subarray?l=l.subarray(0,r):l.length=r),n.applyFromCharCode(l)}(e=n.transformTo(i.uint8array?"uint8array":"array",e))},n.inherits(c,a),c.prototype.processChunk=function(e){var t=n.transformTo(i.uint8array?"uint8array":"array",e.data);if(this.leftOver&&this.leftOver.length){if(i.uint8array){var s=t;(t=new Uint8Array(s.length+this.leftOver.length)).set(this.leftOver,0),t.set(s,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var a=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0||0===r?t:r+o[e[r]]>t?r:t}(t),l=t;a!==t.length&&(i.uint8array?(l=t.subarray(0,a),this.leftOver=t.subarray(a,t.length)):(l=t.slice(0,a),this.leftOver=t.slice(a,t.length))),this.push({data:r.utf8decode(l),meta:e.meta})},c.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:r.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},r.Utf8DecodeWorker=c,n.inherits(u,a),u.prototype.processChunk=function(e){this.push({data:r.utf8encode(e.data),meta:e.meta})},r.Utf8EncodeWorker=u},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,r){"use strict";var n=e("./support"),i=e("./base64"),s=e("./nodejsUtils"),a=e("./external");function o(e){return e}function l(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}e("setimmediate"),r.newBlob=function(e,t){r.checkSupport("blob");try{return new Blob([e],{type:t})}catch(r){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(e),n.getBlob(t)}catch(e){throw new Error("Bug : can't construct the Blob.")}}};var c={stringifyByChunk:function(e,t,r){var n=[],i=0,s=e.length;if(s<=r)return String.fromCharCode.apply(null,e);for(;i<s;)"array"===t||"nodebuffer"===t?n.push(String.fromCharCode.apply(null,e.slice(i,Math.min(i+r,s)))):n.push(String.fromCharCode.apply(null,e.subarray(i,Math.min(i+r,s)))),i+=r;return n.join("")},stringifyByChar:function(e){for(var t="",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},applyCanBeUsed:{uint8array:function(){try{return n.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return n.nodebuffer&&1===String.fromCharCode.apply(null,s.allocBuffer(1)).length}catch(e){return!1}}()}};function u(e){var t=65536,n=r.getTypeOf(e),i=!0;if("uint8array"===n?i=c.applyCanBeUsed.uint8array:"nodebuffer"===n&&(i=c.applyCanBeUsed.nodebuffer),i)for(;1<t;)try{return c.stringifyByChunk(e,n,t)}catch(e){t=Math.floor(t/2)}return c.stringifyByChar(e)}function d(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}r.applyFromCharCode=u;var h={};h.string={string:o,array:function(e){return l(e,new Array(e.length))},arraybuffer:function(e){return h.string.uint8array(e).buffer},uint8array:function(e){return l(e,new Uint8Array(e.length))},nodebuffer:function(e){return l(e,s.allocBuffer(e.length))}},h.array={string:u,array:o,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return s.newBufferFrom(e)}},h.arraybuffer={string:function(e){return u(new Uint8Array(e))},array:function(e){return d(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:o,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return s.newBufferFrom(new Uint8Array(e))}},h.uint8array={string:u,array:function(e){return d(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:o,nodebuffer:function(e){return s.newBufferFrom(e)}},h.nodebuffer={string:u,array:function(e){return d(e,new Array(e.length))},arraybuffer:function(e){return h.nodebuffer.uint8array(e).buffer},uint8array:function(e){return d(e,new Uint8Array(e.length))},nodebuffer:o},r.transformTo=function(e,t){if(t=t||"",!e)return t;r.checkSupport(e);var n=r.getTypeOf(t);return h[n][e](t)},r.resolve=function(e){for(var t=e.split("/"),r=[],n=0;n<t.length;n++){var i=t[n];"."===i||""===i&&0!==n&&n!==t.length-1||(".."===i?r.pop():r.push(i))}return r.join("/")},r.getTypeOf=function(e){return"string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":n.nodebuffer&&s.isBuffer(e)?"nodebuffer":n.uint8array&&e instanceof Uint8Array?"uint8array":n.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},r.checkSupport=function(e){if(!n[e.toLowerCase()])throw new Error(e+" is not supported by this platform")},r.MAX_VALUE_16BITS=65535,r.MAX_VALUE_32BITS=-1,r.pretty=function(e){var t,r,n="";for(r=0;r<(e||"").length;r++)n+="\\x"+((t=e.charCodeAt(r))<16?"0":"")+t.toString(16).toUpperCase();return n},r.delay=function(e,t,r){setImmediate((function(){e.apply(r||null,t||[])}))},r.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.prototype=new r},r.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r},r.prepareContent=function(e,t,s,o,c){return a.Promise.resolve(t).then((function(e){return n.blob&&(e instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(e)))&&"undefined"!=typeof FileReader?new a.Promise((function(t,r){var n=new FileReader;n.onload=function(e){t(e.target.result)},n.onerror=function(e){r(e.target.error)},n.readAsArrayBuffer(e)})):e})).then((function(t){var u=r.getTypeOf(t);return u?("arraybuffer"===u?t=r.transformTo("uint8array",t):"string"===u&&(c?t=i.decode(t):s&&!0!==o&&(t=function(e){return l(e,n.uint8array?new Uint8Array(e.length):new Array(e.length))}(t))),t):a.Promise.reject(new Error("Can't read the data of '"+e+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))}))}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(e,t,r){"use strict";var n=e("./reader/readerFor"),i=e("./utils"),s=e("./signature"),a=e("./zipEntry"),o=e("./support");function l(e){this.files=[],this.loadOptions=e}l.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+i.pretty(t)+", expected "+i.pretty(e)+")")}},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=o.uint8array?"uint8array":"array",r=i.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(e=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(e<0)throw this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(e);var t=e;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(0<n)this.isSignature(t,s.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error("Corrupted zip: missing "+Math.abs(n)+" bytes.")},prepareReader:function(e){this.reader=n(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=l},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utils":32,"./zipEntry":34}],34:[function(e,t,r){"use strict";var n=e("./reader/readerFor"),i=e("./utils"),s=e("./compressedObject"),a=e("./crc32"),o=e("./utf8"),l=e("./compressions"),c=e("./support");function u(e,t){this.options=e,this.loadOptions=t}u.prototype={isEncrypted:function(){return!(1&~this.bitFlag)},useUTF8:function(){return!(2048&~this.bitFlag)},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(t=function(e){for(var t in l)if(Object.prototype.hasOwnProperty.call(l,t)&&l[t].magic===e)return l[t];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+i.pretty(this.compressionMethod)+" unknown (inner file : "+i.transformTo("string",this.fileName)+")");this.decompressed=new s(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var e=n(this.extraFields[1].value);this.uncompressedSize===i.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===i.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===i.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===i.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(e){var t,r,n,i=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<i;)t=e.readInt(2),r=e.readInt(2),n=e.readData(r),this.extraFields[t]={id:t,length:r,value:n};e.setIndex(i)},handleUTF8:function(){var e=c.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var r=i.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else{var s=i.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(s)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=n(e.value);return 1!==t.readInt(1)||a(this.fileName)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=n(e.value);return 1!==t.readInt(1)||a(this.fileComment)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null}},t.exports=u},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,r){"use strict";function n(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var i=e("./stream/StreamHelper"),s=e("./stream/DataWorker"),a=e("./utf8"),o=e("./compressedObject"),l=e("./stream/GenericWorker");n.prototype={internalStream:function(e){var t=null,r="string";try{if(!e)throw new Error("No output type specified.");var n="string"===(r=e.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),t=this._decompressWorker();var s=!this._dataBinary;s&&!n&&(t=t.pipe(new a.Utf8EncodeWorker)),!s&&n&&(t=t.pipe(new a.Utf8DecodeWorker))}catch(e){(t=new l("error")).error(e)}return new i(t,r,"")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||"nodebuffer").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof o&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,e,t)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof l?this._data:new s(this._data)}};for(var c=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],u=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},d=0;d<c.length;d++)n.prototype[c[d]]=u;t.exports=n},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,t,n){(function(e){"use strict";var r,n,i=e.MutationObserver||e.WebKitMutationObserver;if(i){var s=0,a=new i(u),o=e.document.createTextNode("");a.observe(o,{characterData:!0}),r=function(){o.data=s=++s%2}}else if(e.setImmediate||void 0===e.MessageChannel)r="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){u(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(u,0)};else{var l=new e.MessageChannel;l.port1.onmessage=u,r=function(){l.port2.postMessage(0)}}var c=[];function u(){var e,t;n=!0;for(var r=c.length;r;){for(t=c,c=[],e=-1;++e<r;)t[e]();r=c.length}n=!1}t.exports=function(e){1!==c.push(e)||n||r()}}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(e,t,r){"use strict";var n=e("immediate");function i(){}var s={},a=["REJECTED"],o=["FULFILLED"],l=["PENDING"];function c(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=l,this.queue=[],this.outcome=void 0,e!==i&&p(this,e)}function u(e,t,r){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function d(e,t,r){n((function(){var n;try{n=t(r)}catch(n){return s.reject(e,n)}n===e?s.reject(e,new TypeError("Cannot resolve promise with itself")):s.resolve(e,n)}))}function h(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function p(e,t){var r=!1;function n(t){r||(r=!0,s.reject(e,t))}function i(t){r||(r=!0,s.resolve(e,t))}var a=f((function(){t(i,n)}));"error"===a.status&&n(a.value)}function f(e,t){var r={};try{r.value=e(t),r.status="success"}catch(e){r.status="error",r.value=e}return r}(t.exports=c).prototype.finally=function(e){if("function"!=typeof e)return this;var t=this.constructor;return this.then((function(r){return t.resolve(e()).then((function(){return r}))}),(function(r){return t.resolve(e()).then((function(){throw r}))}))},c.prototype.catch=function(e){return this.then(null,e)},c.prototype.then=function(e,t){if("function"!=typeof e&&this.state===o||"function"!=typeof t&&this.state===a)return this;var r=new this.constructor(i);return this.state!==l?d(r,this.state===o?e:t,this.outcome):this.queue.push(new u(r,e,t)),r},u.prototype.callFulfilled=function(e){s.resolve(this.promise,e)},u.prototype.otherCallFulfilled=function(e){d(this.promise,this.onFulfilled,e)},u.prototype.callRejected=function(e){s.reject(this.promise,e)},u.prototype.otherCallRejected=function(e){d(this.promise,this.onRejected,e)},s.resolve=function(e,t){var r=f(h,t);if("error"===r.status)return s.reject(e,r.value);var n=r.value;if(n)p(e,n);else{e.state=o,e.outcome=t;for(var i=-1,a=e.queue.length;++i<a;)e.queue[i].callFulfilled(t)}return e},s.reject=function(e,t){e.state=a,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},c.resolve=function(e){return e instanceof this?e:s.resolve(new this(i),e)},c.reject=function(e){var t=new this(i);return s.reject(t,e)},c.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var r=e.length,n=!1;if(!r)return this.resolve([]);for(var a=new Array(r),o=0,l=-1,c=new this(i);++l<r;)u(e[l],l);return c;function u(e,i){t.resolve(e).then((function(e){a[i]=e,++o!==r||n||(n=!0,s.resolve(c,a))}),(function(e){n||(n=!0,s.reject(c,e))}))}},c.race=function(e){if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var t=e.length,r=!1;if(!t)return this.resolve([]);for(var n,a=-1,o=new this(i);++a<t;)n=e[a],this.resolve(n).then((function(e){r||(r=!0,s.resolve(o,e))}),(function(e){r||(r=!0,s.reject(o,e))}));return o}},{immediate:36}],38:[function(e,t,r){"use strict";var n={};(0,e("./lib/utils/common").assign)(n,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=n},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,r){"use strict";var n=e("./zlib/deflate"),i=e("./utils/common"),s=e("./utils/strings"),a=e("./zlib/messages"),o=e("./zlib/zstream"),l=Object.prototype.toString,c=0,u=-1,d=0,h=8;function p(e){if(!(this instanceof p))return new p(e);this.options=i.assign({level:u,method:h,chunkSize:16384,windowBits:15,memLevel:8,strategy:d,to:""},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new o,this.strm.avail_out=0;var r=n.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==c)throw new Error(a[r]);if(t.header&&n.deflateSetHeader(this.strm,t.header),t.dictionary){var f;if(f="string"==typeof t.dictionary?s.string2buf(t.dictionary):"[object ArrayBuffer]"===l.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(r=n.deflateSetDictionary(this.strm,f))!==c)throw new Error(a[r]);this._dict_set=!0}}function f(e,t){var r=new p(t);if(r.push(e,!0),r.err)throw r.msg||a[r.err];return r.result}p.prototype.push=function(e,t){var r,a,o=this.strm,u=this.options.chunkSize;if(this.ended)return!1;a=t===~~t?t:!0===t?4:0,"string"==typeof e?o.input=s.string2buf(e):"[object ArrayBuffer]"===l.call(e)?o.input=new Uint8Array(e):o.input=e,o.next_in=0,o.avail_in=o.input.length;do{if(0===o.avail_out&&(o.output=new i.Buf8(u),o.next_out=0,o.avail_out=u),1!==(r=n.deflate(o,a))&&r!==c)return this.onEnd(r),!(this.ended=!0);0!==o.avail_out&&(0!==o.avail_in||4!==a&&2!==a)||("string"===this.options.to?this.onData(s.buf2binstring(i.shrinkBuf(o.output,o.next_out))):this.onData(i.shrinkBuf(o.output,o.next_out)))}while((0<o.avail_in||0===o.avail_out)&&1!==r);return 4===a?(r=n.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===c):2!==a||(this.onEnd(c),!(o.avail_out=0))},p.prototype.onData=function(e){this.chunks.push(e)},p.prototype.onEnd=function(e){e===c&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Deflate=p,r.deflate=f,r.deflateRaw=function(e,t){return(t=t||{}).raw=!0,f(e,t)},r.gzip=function(e,t){return(t=t||{}).gzip=!0,f(e,t)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,r){"use strict";var n=e("./zlib/inflate"),i=e("./utils/common"),s=e("./utils/strings"),a=e("./zlib/constants"),o=e("./zlib/messages"),l=e("./zlib/zstream"),c=e("./zlib/gzheader"),u=Object.prototype.toString;function d(e){if(!(this instanceof d))return new d(e);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&!(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new l,this.strm.avail_out=0;var r=n.inflateInit2(this.strm,t.windowBits);if(r!==a.Z_OK)throw new Error(o[r]);this.header=new c,n.inflateGetHeader(this.strm,this.header)}function h(e,t){var r=new d(t);if(r.push(e,!0),r.err)throw r.msg||o[r.err];return r.result}d.prototype.push=function(e,t){var r,o,l,c,d,h,p=this.strm,f=this.options.chunkSize,m=this.options.dictionary,g=!1;if(this.ended)return!1;o=t===~~t?t:!0===t?a.Z_FINISH:a.Z_NO_FLUSH,"string"==typeof e?p.input=s.binstring2buf(e):"[object ArrayBuffer]"===u.call(e)?p.input=new Uint8Array(e):p.input=e,p.next_in=0,p.avail_in=p.input.length;do{if(0===p.avail_out&&(p.output=new i.Buf8(f),p.next_out=0,p.avail_out=f),(r=n.inflate(p,a.Z_NO_FLUSH))===a.Z_NEED_DICT&&m&&(h="string"==typeof m?s.string2buf(m):"[object ArrayBuffer]"===u.call(m)?new Uint8Array(m):m,r=n.inflateSetDictionary(this.strm,h)),r===a.Z_BUF_ERROR&&!0===g&&(r=a.Z_OK,g=!1),r!==a.Z_STREAM_END&&r!==a.Z_OK)return this.onEnd(r),!(this.ended=!0);p.next_out&&(0!==p.avail_out&&r!==a.Z_STREAM_END&&(0!==p.avail_in||o!==a.Z_FINISH&&o!==a.Z_SYNC_FLUSH)||("string"===this.options.to?(l=s.utf8border(p.output,p.next_out),c=p.next_out-l,d=s.buf2string(p.output,l),p.next_out=c,p.avail_out=f-c,c&&i.arraySet(p.output,p.output,l,c,0),this.onData(d)):this.onData(i.shrinkBuf(p.output,p.next_out)))),0===p.avail_in&&0===p.avail_out&&(g=!0)}while((0<p.avail_in||0===p.avail_out)&&r!==a.Z_STREAM_END);return r===a.Z_STREAM_END&&(o=a.Z_FINISH),o===a.Z_FINISH?(r=n.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===a.Z_OK):o!==a.Z_SYNC_FLUSH||(this.onEnd(a.Z_OK),!(p.avail_out=0))},d.prototype.onData=function(e){this.chunks.push(e)},d.prototype.onEnd=function(e){e===a.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Inflate=d,r.inflate=h,r.inflateRaw=function(e,t){return(t=t||{}).raw=!0,h(e,t)},r.ungzip=h},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n])}}return e},r.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var i={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),i);else for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){var t,r,n,i,s,a;for(t=n=0,r=e.length;t<r;t++)n+=e[t].length;for(a=new Uint8Array(n),t=i=0,r=e.length;t<r;t++)s=e[t],a.set(s,i),i+=s.length;return a}},s={arraySet:function(e,t,r,n,i){for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){return[].concat.apply([],e)}};r.setTyped=function(e){e?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s))},r.setTyped(n)},{}],42:[function(e,t,r){"use strict";var n=e("./common"),i=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(e){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){s=!1}for(var a=new n.Buf8(256),o=0;o<256;o++)a[o]=252<=o?6:248<=o?5:240<=o?4:224<=o?3:192<=o?2:1;function l(e,t){if(t<65537&&(e.subarray&&s||!e.subarray&&i))return String.fromCharCode.apply(null,n.shrinkBuf(e,t));for(var r="",a=0;a<t;a++)r+=String.fromCharCode(e[a]);return r}a[254]=a[254]=1,r.string2buf=function(e){var t,r,i,s,a,o=e.length,l=0;for(s=0;s<o;s++)55296==(64512&(r=e.charCodeAt(s)))&&s+1<o&&56320==(64512&(i=e.charCodeAt(s+1)))&&(r=65536+(r-55296<<10)+(i-56320),s++),l+=r<128?1:r<2048?2:r<65536?3:4;for(t=new n.Buf8(l),s=a=0;a<l;s++)55296==(64512&(r=e.charCodeAt(s)))&&s+1<o&&56320==(64512&(i=e.charCodeAt(s+1)))&&(r=65536+(r-55296<<10)+(i-56320),s++),r<128?t[a++]=r:(r<2048?t[a++]=192|r>>>6:(r<65536?t[a++]=224|r>>>12:(t[a++]=240|r>>>18,t[a++]=128|r>>>12&63),t[a++]=128|r>>>6&63),t[a++]=128|63&r);return t},r.buf2binstring=function(e){return l(e,e.length)},r.binstring2buf=function(e){for(var t=new n.Buf8(e.length),r=0,i=t.length;r<i;r++)t[r]=e.charCodeAt(r);return t},r.buf2string=function(e,t){var r,n,i,s,o=t||e.length,c=new Array(2*o);for(r=n=0;r<o;)if((i=e[r++])<128)c[n++]=i;else if(4<(s=a[i]))c[n++]=65533,r+=s-1;else{for(i&=2===s?31:3===s?15:7;1<s&&r<o;)i=i<<6|63&e[r++],s--;1<s?c[n++]=65533:i<65536?c[n++]=i:(i-=65536,c[n++]=55296|i>>10&1023,c[n++]=56320|1023&i)}return l(c,n)},r.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0||0===r?t:r+a[e[r]]>t?r:t}},{"./common":41}],43:[function(e,t,r){"use strict";t.exports=function(e,t,r,n){for(var i=65535&e,s=e>>>16&65535,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(i=i+t[n++]|0)|0,--a;);i%=65521,s%=65521}return i|s<<16}},{}],44:[function(e,t,r){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,r){"use strict";var n=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t,r,i){var s=n,a=i+r;e^=-1;for(var o=i;o<a;o++)e=e>>>8^s[255&(e^t[o])];return~e}},{}],46:[function(e,t,r){"use strict";var n,i=e("../utils/common"),s=e("./trees"),a=e("./adler32"),o=e("./crc32"),l=e("./messages"),c=0,u=0,d=-2,h=2,p=8,f=286,m=30,g=19,b=2*f+1,v=15,y=3,_=258,x=_+y+1,w=42,S=113;function k(e,t){return e.msg=l[t],t}function E(e){return(e<<1)-(4<e?9:0)}function A(e){for(var t=e.length;0<=--t;)e[t]=0}function C(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(i.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function T(e,t){s._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,C(e.strm)}function R(e,t){e.pending_buf[e.pending++]=t}function N(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function q(e,t){var r,n,i=e.max_chain_length,s=e.strstart,a=e.prev_length,o=e.nice_match,l=e.strstart>e.w_size-x?e.strstart-(e.w_size-x):0,c=e.window,u=e.w_mask,d=e.prev,h=e.strstart+_,p=c[s+a-1],f=c[s+a];e.prev_length>=e.good_match&&(i>>=2),o>e.lookahead&&(o=e.lookahead);do{if(c[(r=t)+a]===f&&c[r+a-1]===p&&c[r]===c[s]&&c[++r]===c[s+1]){s+=2,r++;do{}while(c[++s]===c[++r]&&c[++s]===c[++r]&&c[++s]===c[++r]&&c[++s]===c[++r]&&c[++s]===c[++r]&&c[++s]===c[++r]&&c[++s]===c[++r]&&c[++s]===c[++r]&&s<h);if(n=_-(h-s),s=h-_,a<n){if(e.match_start=t,o<=(a=n))break;p=c[s+a-1],f=c[s+a]}}}while((t=d[t&u])>l&&0!=--i);return a<=e.lookahead?a:e.lookahead}function I(e){var t,r,n,s,l,c,u,d,h,p,f=e.w_size;do{if(s=e.window_size-e.lookahead-e.strstart,e.strstart>=f+(f-x)){for(i.arraySet(e.window,e.window,f,f,0),e.match_start-=f,e.strstart-=f,e.block_start-=f,t=r=e.hash_size;n=e.head[--t],e.head[t]=f<=n?n-f:0,--r;);for(t=r=f;n=e.prev[--t],e.prev[t]=f<=n?n-f:0,--r;);s+=f}if(0===e.strm.avail_in)break;if(c=e.strm,u=e.window,d=e.strstart+e.lookahead,p=void 0,(h=s)<(p=c.avail_in)&&(p=h),r=0===p?0:(c.avail_in-=p,i.arraySet(u,c.input,c.next_in,p,d),1===c.state.wrap?c.adler=a(c.adler,u,p,d):2===c.state.wrap&&(c.adler=o(c.adler,u,p,d)),c.next_in+=p,c.total_in+=p,p),e.lookahead+=r,e.lookahead+e.insert>=y)for(l=e.strstart-e.insert,e.ins_h=e.window[l],e.ins_h=(e.ins_h<<e.hash_shift^e.window[l+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[l+y-1])&e.hash_mask,e.prev[l&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=l,l++,e.insert--,!(e.lookahead+e.insert<y)););}while(e.lookahead<x&&0!==e.strm.avail_in)}function D(e,t){for(var r,n;;){if(e.lookahead<x){if(I(e),e.lookahead<x&&t===c)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=y&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+y-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-x&&(e.match_length=q(e,r)),e.match_length>=y)if(n=s._tr_tally(e,e.strstart-e.match_start,e.match_length-y),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=y){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+y-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=s._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(T(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<y-1?e.strstart:y-1,4===t?(T(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(T(e,!1),0===e.strm.avail_out)?1:2}function L(e,t){for(var r,n,i;;){if(e.lookahead<x){if(I(e),e.lookahead<x&&t===c)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=y&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+y-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=y-1,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-x&&(e.match_length=q(e,r),e.match_length<=5&&(1===e.strategy||e.match_length===y&&4096<e.strstart-e.match_start)&&(e.match_length=y-1)),e.prev_length>=y&&e.match_length<=e.prev_length){for(i=e.strstart+e.lookahead-y,n=s._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-y),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+y-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=y-1,e.strstart++,n&&(T(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((n=s._tr_tally(e,0,e.window[e.strstart-1]))&&T(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=s._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<y-1?e.strstart:y-1,4===t?(T(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(T(e,!1),0===e.strm.avail_out)?1:2}function O(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i}function P(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=p,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(2*b),this.dyn_dtree=new i.Buf16(2*(2*m+1)),this.bl_tree=new i.Buf16(2*(2*g+1)),A(this.dyn_ltree),A(this.dyn_dtree),A(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(v+1),this.heap=new i.Buf16(2*f+1),A(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(2*f+1),A(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function B(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=h,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?w:S,e.adler=2===t.wrap?0:1,t.last_flush=c,s._tr_init(t),u):k(e,d)}function M(e){var t=B(e);return t===u&&function(e){e.window_size=2*e.w_size,A(e.head),e.max_lazy_match=n[e.level].max_lazy,e.good_match=n[e.level].good_length,e.nice_match=n[e.level].nice_length,e.max_chain_length=n[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=y-1,e.match_available=0,e.ins_h=0}(e.state),t}function U(e,t,r,n,s,a){if(!e)return d;var o=1;if(-1===t&&(t=6),n<0?(o=0,n=-n):15<n&&(o=2,n-=16),s<1||9<s||r!==p||n<8||15<n||t<0||9<t||a<0||4<a)return k(e,d);8===n&&(n=9);var l=new P;return(e.state=l).strm=e,l.wrap=o,l.gzhead=null,l.w_bits=n,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=s+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+y-1)/y),l.window=new i.Buf8(2*l.w_size),l.head=new i.Buf16(l.hash_size),l.prev=new i.Buf16(l.w_size),l.lit_bufsize=1<<s+6,l.pending_buf_size=4*l.lit_bufsize,l.pending_buf=new i.Buf8(l.pending_buf_size),l.d_buf=1*l.lit_bufsize,l.l_buf=3*l.lit_bufsize,l.level=t,l.strategy=a,l.method=r,M(e)}n=[new O(0,0,0,0,(function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(I(e),0===e.lookahead&&t===c)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,T(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-x&&(T(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(T(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(T(e,!1),e.strm.avail_out),1)})),new O(4,4,8,4,D),new O(4,5,16,8,D),new O(4,6,32,32,D),new O(4,4,16,16,L),new O(8,16,32,32,L),new O(8,16,128,128,L),new O(8,32,128,256,L),new O(32,128,258,1024,L),new O(32,258,258,4096,L)],r.deflateInit=function(e,t){return U(e,t,p,15,8,0)},r.deflateInit2=U,r.deflateReset=M,r.deflateResetKeep=B,r.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?d:(e.state.gzhead=t,u):d},r.deflate=function(e,t){var r,i,a,l;if(!e||!e.state||5<t||t<0)return e?k(e,d):d;if(i=e.state,!e.output||!e.input&&0!==e.avail_in||666===i.status&&4!==t)return k(e,0===e.avail_out?-5:d);if(i.strm=e,r=i.last_flush,i.last_flush=t,i.status===w)if(2===i.wrap)e.adler=0,R(i,31),R(i,139),R(i,8),i.gzhead?(R(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),R(i,255&i.gzhead.time),R(i,i.gzhead.time>>8&255),R(i,i.gzhead.time>>16&255),R(i,i.gzhead.time>>24&255),R(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),R(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(R(i,255&i.gzhead.extra.length),R(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(e.adler=o(e.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(R(i,0),R(i,0),R(i,0),R(i,0),R(i,0),R(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),R(i,3),i.status=S);else{var h=p+(i.w_bits-8<<4)<<8;h|=(2<=i.strategy||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(h|=32),h+=31-h%31,i.status=S,N(i,h),0!==i.strstart&&(N(i,e.adler>>>16),N(i,65535&e.adler)),e.adler=1}if(69===i.status)if(i.gzhead.extra){for(a=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>a&&(e.adler=o(e.adler,i.pending_buf,i.pending-a,a)),C(e),a=i.pending,i.pending!==i.pending_buf_size));)R(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>a&&(e.adler=o(e.adler,i.pending_buf,i.pending-a,a)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(e.adler=o(e.adler,i.pending_buf,i.pending-a,a)),C(e),a=i.pending,i.pending===i.pending_buf_size)){l=1;break}l=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,R(i,l)}while(0!==l);i.gzhead.hcrc&&i.pending>a&&(e.adler=o(e.adler,i.pending_buf,i.pending-a,a)),0===l&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(e.adler=o(e.adler,i.pending_buf,i.pending-a,a)),C(e),a=i.pending,i.pending===i.pending_buf_size)){l=1;break}l=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,R(i,l)}while(0!==l);i.gzhead.hcrc&&i.pending>a&&(e.adler=o(e.adler,i.pending_buf,i.pending-a,a)),0===l&&(i.status=103)}else i.status=103;if(103===i.status&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&C(e),i.pending+2<=i.pending_buf_size&&(R(i,255&e.adler),R(i,e.adler>>8&255),e.adler=0,i.status=S)):i.status=S),0!==i.pending){if(C(e),0===e.avail_out)return i.last_flush=-1,u}else if(0===e.avail_in&&E(t)<=E(r)&&4!==t)return k(e,-5);if(666===i.status&&0!==e.avail_in)return k(e,-5);if(0!==e.avail_in||0!==i.lookahead||t!==c&&666!==i.status){var f=2===i.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(I(e),0===e.lookahead)){if(t===c)return 1;break}if(e.match_length=0,r=s._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(T(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(T(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(T(e,!1),0===e.strm.avail_out)?1:2}(i,t):3===i.strategy?function(e,t){for(var r,n,i,a,o=e.window;;){if(e.lookahead<=_){if(I(e),e.lookahead<=_&&t===c)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=y&&0<e.strstart&&(n=o[i=e.strstart-1])===o[++i]&&n===o[++i]&&n===o[++i]){a=e.strstart+_;do{}while(n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&i<a);e.match_length=_-(a-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=y?(r=s._tr_tally(e,1,e.match_length-y),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=s._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(T(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(T(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(T(e,!1),0===e.strm.avail_out)?1:2}(i,t):n[i.level].func(i,t);if(3!==f&&4!==f||(i.status=666),1===f||3===f)return 0===e.avail_out&&(i.last_flush=-1),u;if(2===f&&(1===t?s._tr_align(i):5!==t&&(s._tr_stored_block(i,0,0,!1),3===t&&(A(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),C(e),0===e.avail_out))return i.last_flush=-1,u}return 4!==t?u:i.wrap<=0?1:(2===i.wrap?(R(i,255&e.adler),R(i,e.adler>>8&255),R(i,e.adler>>16&255),R(i,e.adler>>24&255),R(i,255&e.total_in),R(i,e.total_in>>8&255),R(i,e.total_in>>16&255),R(i,e.total_in>>24&255)):(N(i,e.adler>>>16),N(i,65535&e.adler)),C(e),0<i.wrap&&(i.wrap=-i.wrap),0!==i.pending?u:1)},r.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==w&&69!==t&&73!==t&&91!==t&&103!==t&&t!==S&&666!==t?k(e,d):(e.state=null,t===S?k(e,-3):u):d},r.deflateSetDictionary=function(e,t){var r,n,s,o,l,c,h,p,f=t.length;if(!e||!e.state)return d;if(2===(o=(r=e.state).wrap)||1===o&&r.status!==w||r.lookahead)return d;for(1===o&&(e.adler=a(e.adler,t,f,0)),r.wrap=0,f>=r.w_size&&(0===o&&(A(r.head),r.strstart=0,r.block_start=0,r.insert=0),p=new i.Buf8(r.w_size),i.arraySet(p,t,f-r.w_size,r.w_size,0),t=p,f=r.w_size),l=e.avail_in,c=e.next_in,h=e.input,e.avail_in=f,e.next_in=0,e.input=t,I(r);r.lookahead>=y;){for(n=r.strstart,s=r.lookahead-(y-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+y-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--s;);r.strstart=n,r.lookahead=y-1,I(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=y-1,r.match_available=0,e.next_in=c,e.input=h,e.avail_in=l,r.wrap=o,u},r.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,r){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,r){"use strict";t.exports=function(e,t){var r,n,i,s,a,o,l,c,u,d,h,p,f,m,g,b,v,y,_,x,w,S,k,E,A;r=e.state,n=e.next_in,E=e.input,i=n+(e.avail_in-5),s=e.next_out,A=e.output,a=s-(t-e.avail_out),o=s+(e.avail_out-257),l=r.dmax,c=r.wsize,u=r.whave,d=r.wnext,h=r.window,p=r.hold,f=r.bits,m=r.lencode,g=r.distcode,b=(1<<r.lenbits)-1,v=(1<<r.distbits)-1;e:do{f<15&&(p+=E[n++]<<f,f+=8,p+=E[n++]<<f,f+=8),y=m[p&b];t:for(;;){if(p>>>=_=y>>>24,f-=_,0==(_=y>>>16&255))A[s++]=65535&y;else{if(!(16&_)){if(!(64&_)){y=m[(65535&y)+(p&(1<<_)-1)];continue t}if(32&_){r.mode=12;break e}e.msg="invalid literal/length code",r.mode=30;break e}x=65535&y,(_&=15)&&(f<_&&(p+=E[n++]<<f,f+=8),x+=p&(1<<_)-1,p>>>=_,f-=_),f<15&&(p+=E[n++]<<f,f+=8,p+=E[n++]<<f,f+=8),y=g[p&v];r:for(;;){if(p>>>=_=y>>>24,f-=_,!(16&(_=y>>>16&255))){if(!(64&_)){y=g[(65535&y)+(p&(1<<_)-1)];continue r}e.msg="invalid distance code",r.mode=30;break e}if(w=65535&y,f<(_&=15)&&(p+=E[n++]<<f,(f+=8)<_&&(p+=E[n++]<<f,f+=8)),l<(w+=p&(1<<_)-1)){e.msg="invalid distance too far back",r.mode=30;break e}if(p>>>=_,f-=_,(_=s-a)<w){if(u<(_=w-_)&&r.sane){e.msg="invalid distance too far back",r.mode=30;break e}if(k=h,(S=0)===d){if(S+=c-_,_<x){for(x-=_;A[s++]=h[S++],--_;);S=s-w,k=A}}else if(d<_){if(S+=c+d-_,(_-=d)<x){for(x-=_;A[s++]=h[S++],--_;);if(S=0,d<x){for(x-=_=d;A[s++]=h[S++],--_;);S=s-w,k=A}}}else if(S+=d-_,_<x){for(x-=_;A[s++]=h[S++],--_;);S=s-w,k=A}for(;2<x;)A[s++]=k[S++],A[s++]=k[S++],A[s++]=k[S++],x-=3;x&&(A[s++]=k[S++],1<x&&(A[s++]=k[S++]))}else{for(S=s-w;A[s++]=A[S++],A[s++]=A[S++],A[s++]=A[S++],2<(x-=3););x&&(A[s++]=A[S++],1<x&&(A[s++]=A[S++]))}break}}break}}while(n<i&&s<o);n-=x=f>>3,p&=(1<<(f-=x<<3))-1,e.next_in=n,e.next_out=s,e.avail_in=n<i?i-n+5:5-(n-i),e.avail_out=s<o?o-s+257:257-(s-o),r.hold=p,r.bits=f}},{}],49:[function(e,t,r){"use strict";var n=e("../utils/common"),i=e("./adler32"),s=e("./crc32"),a=e("./inffast"),o=e("./inftrees"),l=0,c=-2,u=1,d=852,h=592;function p(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function f(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function m(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=u,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new n.Buf32(d),t.distcode=t.distdyn=new n.Buf32(h),t.sane=1,t.back=-1,l):c}function g(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,m(e)):c}function b(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?c:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,g(e))):c}function v(e,t){var r,n;return e?(n=new f,(e.state=n).window=null,(r=b(e,t))!==l&&(e.state=null),r):c}var y,_,x=!0;function w(e){if(x){var t;for(y=new n.Buf32(512),_=new n.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(o(1,e.lens,0,288,y,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;o(2,e.lens,0,32,_,0,e.work,{bits:5}),x=!1}e.lencode=y,e.lenbits=9,e.distcode=_,e.distbits=5}function S(e,t,r,i){var s,a=e.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new n.Buf8(a.wsize)),i>=a.wsize?(n.arraySet(a.window,t,r-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):(i<(s=a.wsize-a.wnext)&&(s=i),n.arraySet(a.window,t,r-i,s,a.wnext),(i-=s)?(n.arraySet(a.window,t,r-i,i,0),a.wnext=i,a.whave=a.wsize):(a.wnext+=s,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=s))),0}r.inflateReset=g,r.inflateReset2=b,r.inflateResetKeep=m,r.inflateInit=function(e){return v(e,15)},r.inflateInit2=v,r.inflate=function(e,t){var r,d,h,f,m,g,b,v,y,_,x,k,E,A,C,T,R,N,q,I,D,L,O,P,B=0,M=new n.Buf8(4),U=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return c;12===(r=e.state).mode&&(r.mode=13),m=e.next_out,h=e.output,b=e.avail_out,f=e.next_in,d=e.input,g=e.avail_in,v=r.hold,y=r.bits,_=g,x=b,L=l;e:for(;;)switch(r.mode){case u:if(0===r.wrap){r.mode=13;break}for(;y<16;){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}if(2&r.wrap&&35615===v){M[r.check=0]=255&v,M[1]=v>>>8&255,r.check=s(r.check,M,2,0),y=v=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&v)<<8)+(v>>8))%31){e.msg="incorrect header check",r.mode=30;break}if(8!=(15&v)){e.msg="unknown compression method",r.mode=30;break}if(y-=4,D=8+(15&(v>>>=4)),0===r.wbits)r.wbits=D;else if(D>r.wbits){e.msg="invalid window size",r.mode=30;break}r.dmax=1<<D,e.adler=r.check=1,r.mode=512&v?10:12,y=v=0;break;case 2:for(;y<16;){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}if(r.flags=v,8!=(255&r.flags)){e.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=v>>8&1),512&r.flags&&(M[0]=255&v,M[1]=v>>>8&255,r.check=s(r.check,M,2,0)),y=v=0,r.mode=3;case 3:for(;y<32;){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}r.head&&(r.head.time=v),512&r.flags&&(M[0]=255&v,M[1]=v>>>8&255,M[2]=v>>>16&255,M[3]=v>>>24&255,r.check=s(r.check,M,4,0)),y=v=0,r.mode=4;case 4:for(;y<16;){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}r.head&&(r.head.xflags=255&v,r.head.os=v>>8),512&r.flags&&(M[0]=255&v,M[1]=v>>>8&255,r.check=s(r.check,M,2,0)),y=v=0,r.mode=5;case 5:if(1024&r.flags){for(;y<16;){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}r.length=v,r.head&&(r.head.extra_len=v),512&r.flags&&(M[0]=255&v,M[1]=v>>>8&255,r.check=s(r.check,M,2,0)),y=v=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(g<(k=r.length)&&(k=g),k&&(r.head&&(D=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,d,f,k,D)),512&r.flags&&(r.check=s(r.check,d,k,f)),g-=k,f+=k,r.length-=k),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===g)break e;for(k=0;D=d[f+k++],r.head&&D&&r.length<65536&&(r.head.name+=String.fromCharCode(D)),D&&k<g;);if(512&r.flags&&(r.check=s(r.check,d,k,f)),g-=k,f+=k,D)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===g)break e;for(k=0;D=d[f+k++],r.head&&D&&r.length<65536&&(r.head.comment+=String.fromCharCode(D)),D&&k<g;);if(512&r.flags&&(r.check=s(r.check,d,k,f)),g-=k,f+=k,D)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;y<16;){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}if(v!==(65535&r.check)){e.msg="header crc mismatch",r.mode=30;break}y=v=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;y<32;){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}e.adler=r.check=p(v),y=v=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=m,e.avail_out=b,e.next_in=f,e.avail_in=g,r.hold=v,r.bits=y,2;e.adler=r.check=1,r.mode=12;case 12:if(5===t||6===t)break e;case 13:if(r.last){v>>>=7&y,y-=7&y,r.mode=27;break}for(;y<3;){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}switch(r.last=1&v,y-=1,3&(v>>>=1)){case 0:r.mode=14;break;case 1:if(w(r),r.mode=20,6!==t)break;v>>>=2,y-=2;break e;case 2:r.mode=17;break;case 3:e.msg="invalid block type",r.mode=30}v>>>=2,y-=2;break;case 14:for(v>>>=7&y,y-=7&y;y<32;){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}if((65535&v)!=(v>>>16^65535)){e.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&v,y=v=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(k=r.length){if(g<k&&(k=g),b<k&&(k=b),0===k)break e;n.arraySet(h,d,f,k,m),g-=k,f+=k,b-=k,m+=k,r.length-=k;break}r.mode=12;break;case 17:for(;y<14;){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}if(r.nlen=257+(31&v),v>>>=5,y-=5,r.ndist=1+(31&v),v>>>=5,y-=5,r.ncode=4+(15&v),v>>>=4,y-=4,286<r.nlen||30<r.ndist){e.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;y<3;){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}r.lens[U[r.have++]]=7&v,v>>>=3,y-=3}for(;r.have<19;)r.lens[U[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,O={bits:r.lenbits},L=o(0,r.lens,0,19,r.lencode,0,r.work,O),r.lenbits=O.bits,L){e.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;T=(B=r.lencode[v&(1<<r.lenbits)-1])>>>16&255,R=65535&B,!((C=B>>>24)<=y);){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}if(R<16)v>>>=C,y-=C,r.lens[r.have++]=R;else{if(16===R){for(P=C+2;y<P;){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}if(v>>>=C,y-=C,0===r.have){e.msg="invalid bit length repeat",r.mode=30;break}D=r.lens[r.have-1],k=3+(3&v),v>>>=2,y-=2}else if(17===R){for(P=C+3;y<P;){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}y-=C,D=0,k=3+(7&(v>>>=C)),v>>>=3,y-=3}else{for(P=C+7;y<P;){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}y-=C,D=0,k=11+(127&(v>>>=C)),v>>>=7,y-=7}if(r.have+k>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=30;break}for(;k--;)r.lens[r.have++]=D}}if(30===r.mode)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,O={bits:r.lenbits},L=o(1,r.lens,0,r.nlen,r.lencode,0,r.work,O),r.lenbits=O.bits,L){e.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,O={bits:r.distbits},L=o(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,O),r.distbits=O.bits,L){e.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(6<=g&&258<=b){e.next_out=m,e.avail_out=b,e.next_in=f,e.avail_in=g,r.hold=v,r.bits=y,a(e,x),m=e.next_out,h=e.output,b=e.avail_out,f=e.next_in,d=e.input,g=e.avail_in,v=r.hold,y=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;T=(B=r.lencode[v&(1<<r.lenbits)-1])>>>16&255,R=65535&B,!((C=B>>>24)<=y);){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}if(T&&!(240&T)){for(N=C,q=T,I=R;T=(B=r.lencode[I+((v&(1<<N+q)-1)>>N)])>>>16&255,R=65535&B,!(N+(C=B>>>24)<=y);){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}v>>>=N,y-=N,r.back+=N}if(v>>>=C,y-=C,r.back+=C,r.length=R,0===T){r.mode=26;break}if(32&T){r.back=-1,r.mode=12;break}if(64&T){e.msg="invalid literal/length code",r.mode=30;break}r.extra=15&T,r.mode=22;case 22:if(r.extra){for(P=r.extra;y<P;){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}r.length+=v&(1<<r.extra)-1,v>>>=r.extra,y-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;T=(B=r.distcode[v&(1<<r.distbits)-1])>>>16&255,R=65535&B,!((C=B>>>24)<=y);){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}if(!(240&T)){for(N=C,q=T,I=R;T=(B=r.distcode[I+((v&(1<<N+q)-1)>>N)])>>>16&255,R=65535&B,!(N+(C=B>>>24)<=y);){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}v>>>=N,y-=N,r.back+=N}if(v>>>=C,y-=C,r.back+=C,64&T){e.msg="invalid distance code",r.mode=30;break}r.offset=R,r.extra=15&T,r.mode=24;case 24:if(r.extra){for(P=r.extra;y<P;){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}r.offset+=v&(1<<r.extra)-1,v>>>=r.extra,y-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===b)break e;if(k=x-b,r.offset>k){if((k=r.offset-k)>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=30;break}E=k>r.wnext?(k-=r.wnext,r.wsize-k):r.wnext-k,k>r.length&&(k=r.length),A=r.window}else A=h,E=m-r.offset,k=r.length;for(b<k&&(k=b),b-=k,r.length-=k;h[m++]=A[E++],--k;);0===r.length&&(r.mode=21);break;case 26:if(0===b)break e;h[m++]=r.length,b--,r.mode=21;break;case 27:if(r.wrap){for(;y<32;){if(0===g)break e;g--,v|=d[f++]<<y,y+=8}if(x-=b,e.total_out+=x,r.total+=x,x&&(e.adler=r.check=r.flags?s(r.check,h,x,m-x):i(r.check,h,x,m-x)),x=b,(r.flags?v:p(v))!==r.check){e.msg="incorrect data check",r.mode=30;break}y=v=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;y<32;){if(0===g)break e;g--,v+=d[f++]<<y,y+=8}if(v!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=30;break}y=v=0}r.mode=29;case 29:L=1;break e;case 30:L=-3;break e;case 31:return-4;default:return c}return e.next_out=m,e.avail_out=b,e.next_in=f,e.avail_in=g,r.hold=v,r.bits=y,(r.wsize||x!==e.avail_out&&r.mode<30&&(r.mode<27||4!==t))&&S(e,e.output,e.next_out,x-e.avail_out)?(r.mode=31,-4):(_-=e.avail_in,x-=e.avail_out,e.total_in+=_,e.total_out+=x,r.total+=x,r.wrap&&x&&(e.adler=r.check=r.flags?s(r.check,h,x,e.next_out-x):i(r.check,h,x,e.next_out-x)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==_&&0===x||4===t)&&L===l&&(L=-5),L)},r.inflateEnd=function(e){if(!e||!e.state)return c;var t=e.state;return t.window&&(t.window=null),e.state=null,l},r.inflateGetHeader=function(e,t){var r;return e&&e.state&&2&(r=e.state).wrap?((r.head=t).done=!1,l):c},r.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?c:11===r.mode&&i(1,t,n,0)!==r.check?-3:S(e,t,n,n)?(r.mode=31,-4):(r.havedict=1,l):c},r.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,r){"use strict";var n=e("../utils/common"),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],s=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],o=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,r,l,c,u,d,h){var p,f,m,g,b,v,y,_,x,w=h.bits,S=0,k=0,E=0,A=0,C=0,T=0,R=0,N=0,q=0,I=0,D=null,L=0,O=new n.Buf16(16),P=new n.Buf16(16),B=null,M=0;for(S=0;S<=15;S++)O[S]=0;for(k=0;k<l;k++)O[t[r+k]]++;for(C=w,A=15;1<=A&&0===O[A];A--);if(A<C&&(C=A),0===A)return c[u++]=20971520,c[u++]=20971520,h.bits=1,0;for(E=1;E<A&&0===O[E];E++);for(C<E&&(C=E),S=N=1;S<=15;S++)if(N<<=1,(N-=O[S])<0)return-1;if(0<N&&(0===e||1!==A))return-1;for(P[1]=0,S=1;S<15;S++)P[S+1]=P[S]+O[S];for(k=0;k<l;k++)0!==t[r+k]&&(d[P[t[r+k]]++]=k);if(v=0===e?(D=B=d,19):1===e?(D=i,L-=257,B=s,M-=257,256):(D=a,B=o,-1),S=E,b=u,R=k=I=0,m=-1,g=(q=1<<(T=C))-1,1===e&&852<q||2===e&&592<q)return 1;for(;;){for(y=S-R,x=d[k]<v?(_=0,d[k]):d[k]>v?(_=B[M+d[k]],D[L+d[k]]):(_=96,0),p=1<<S-R,E=f=1<<T;c[b+(I>>R)+(f-=p)]=y<<24|_<<16|x,0!==f;);for(p=1<<S-1;I&p;)p>>=1;if(0!==p?(I&=p-1,I+=p):I=0,k++,0==--O[S]){if(S===A)break;S=t[r+d[k]]}if(C<S&&(I&g)!==m){for(0===R&&(R=C),b+=E,N=1<<(T=S-R);T+R<A&&!((N-=O[T+R])<=0);)T++,N<<=1;if(q+=1<<T,1===e&&852<q||2===e&&592<q)return 1;c[m=I&g]=C<<24|T<<16|b-u}}return 0!==I&&(c[b+I]=S-R<<24|64<<16),h.bits=C,0}},{"../utils/common":41}],51:[function(e,t,r){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(e,t,r){"use strict";var n=e("../utils/common");function i(e){for(var t=e.length;0<=--t;)e[t]=0}var s=256,a=286,o=30,l=15,c=16,u=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],d=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],h=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],p=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],f=new Array(576);i(f);var m=new Array(60);i(m);var g=new Array(512);i(g);var b=new Array(256);i(b);var v=new Array(29);i(v);var y,_,x,w=new Array(o);function S(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length}function k(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function E(e){return e<256?g[e]:g[256+(e>>>7)]}function A(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function C(e,t,r){e.bi_valid>c-r?(e.bi_buf|=t<<e.bi_valid&65535,A(e,e.bi_buf),e.bi_buf=t>>c-e.bi_valid,e.bi_valid+=r-c):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function T(e,t,r){C(e,r[2*t],r[2*t+1])}function R(e,t){for(var r=0;r|=1&e,e>>>=1,r<<=1,0<--t;);return r>>>1}function N(e,t,r){var n,i,s=new Array(l+1),a=0;for(n=1;n<=l;n++)s[n]=a=a+r[n-1]<<1;for(i=0;i<=t;i++){var o=e[2*i+1];0!==o&&(e[2*i]=R(s[o]++,o))}}function q(e){var t;for(t=0;t<a;t++)e.dyn_ltree[2*t]=0;for(t=0;t<o;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function I(e){8<e.bi_valid?A(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function D(e,t,r,n){var i=2*t,s=2*r;return e[i]<e[s]||e[i]===e[s]&&n[t]<=n[r]}function L(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&D(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!D(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n}function O(e,t,r){var n,i,a,o,l=0;if(0!==e.last_lit)for(;n=e.pending_buf[e.d_buf+2*l]<<8|e.pending_buf[e.d_buf+2*l+1],i=e.pending_buf[e.l_buf+l],l++,0===n?T(e,i,t):(T(e,(a=b[i])+s+1,t),0!==(o=u[a])&&C(e,i-=v[a],o),T(e,a=E(--n),r),0!==(o=d[a])&&C(e,n-=w[a],o)),l<e.last_lit;);T(e,256,t)}function P(e,t){var r,n,i,s=t.dyn_tree,a=t.stat_desc.static_tree,o=t.stat_desc.has_stree,c=t.stat_desc.elems,u=-1;for(e.heap_len=0,e.heap_max=573,r=0;r<c;r++)0!==s[2*r]?(e.heap[++e.heap_len]=u=r,e.depth[r]=0):s[2*r+1]=0;for(;e.heap_len<2;)s[2*(i=e.heap[++e.heap_len]=u<2?++u:0)]=1,e.depth[i]=0,e.opt_len--,o&&(e.static_len-=a[2*i+1]);for(t.max_code=u,r=e.heap_len>>1;1<=r;r--)L(e,s,r);for(i=c;r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],L(e,s,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,s[2*i]=s[2*r]+s[2*n],e.depth[i]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,s[2*r+1]=s[2*n+1]=i,e.heap[1]=i++,L(e,s,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,i,s,a,o,c=t.dyn_tree,u=t.max_code,d=t.stat_desc.static_tree,h=t.stat_desc.has_stree,p=t.stat_desc.extra_bits,f=t.stat_desc.extra_base,m=t.stat_desc.max_length,g=0;for(s=0;s<=l;s++)e.bl_count[s]=0;for(c[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<573;r++)m<(s=c[2*c[2*(n=e.heap[r])+1]+1]+1)&&(s=m,g++),c[2*n+1]=s,u<n||(e.bl_count[s]++,a=0,f<=n&&(a=p[n-f]),o=c[2*n],e.opt_len+=o*(s+a),h&&(e.static_len+=o*(d[2*n+1]+a)));if(0!==g){do{for(s=m-1;0===e.bl_count[s];)s--;e.bl_count[s]--,e.bl_count[s+1]+=2,e.bl_count[m]--,g-=2}while(0<g);for(s=m;0!==s;s--)for(n=e.bl_count[s];0!==n;)u<(i=e.heap[--r])||(c[2*i+1]!==s&&(e.opt_len+=(s-c[2*i+1])*c[2*i],c[2*i+1]=s),n--)}}(e,t),N(s,u,e.bl_count)}function B(e,t,r){var n,i,s=-1,a=t[1],o=0,l=7,c=4;for(0===a&&(l=138,c=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=t[2*(n+1)+1],++o<l&&i===a||(o<c?e.bl_tree[2*i]+=o:0!==i?(i!==s&&e.bl_tree[2*i]++,e.bl_tree[32]++):o<=10?e.bl_tree[34]++:e.bl_tree[36]++,s=i,c=(o=0)===a?(l=138,3):i===a?(l=6,3):(l=7,4))}function M(e,t,r){var n,i,s=-1,a=t[1],o=0,l=7,c=4;for(0===a&&(l=138,c=3),n=0;n<=r;n++)if(i=a,a=t[2*(n+1)+1],!(++o<l&&i===a)){if(o<c)for(;T(e,i,e.bl_tree),0!=--o;);else 0!==i?(i!==s&&(T(e,i,e.bl_tree),o--),T(e,16,e.bl_tree),C(e,o-3,2)):o<=10?(T(e,17,e.bl_tree),C(e,o-3,3)):(T(e,18,e.bl_tree),C(e,o-11,7));s=i,c=(o=0)===a?(l=138,3):i===a?(l=6,3):(l=7,4)}}i(w);var U=!1;function z(e,t,r,i){C(e,0+(i?1:0),3),function(e,t,r){I(e),A(e,r),A(e,~r),n.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r}(e,t,r)}r._tr_init=function(e){U||(function(){var e,t,r,n,i,s=new Array(l+1);for(n=r=0;n<28;n++)for(v[n]=r,e=0;e<1<<u[n];e++)b[r++]=n;for(b[r-1]=n,n=i=0;n<16;n++)for(w[n]=i,e=0;e<1<<d[n];e++)g[i++]=n;for(i>>=7;n<o;n++)for(w[n]=i<<7,e=0;e<1<<d[n]-7;e++)g[256+i++]=n;for(t=0;t<=l;t++)s[t]=0;for(e=0;e<=143;)f[2*e+1]=8,e++,s[8]++;for(;e<=255;)f[2*e+1]=9,e++,s[9]++;for(;e<=279;)f[2*e+1]=7,e++,s[7]++;for(;e<=287;)f[2*e+1]=8,e++,s[8]++;for(N(f,287,s),e=0;e<o;e++)m[2*e+1]=5,m[2*e]=R(e,5);y=new S(f,u,257,a,l),_=new S(m,d,0,o,l),x=new S(new Array(0),h,0,19,7)}(),U=!0),e.l_desc=new k(e.dyn_ltree,y),e.d_desc=new k(e.dyn_dtree,_),e.bl_desc=new k(e.bl_tree,x),e.bi_buf=0,e.bi_valid=0,q(e)},r._tr_stored_block=z,r._tr_flush_block=function(e,t,r,n){var i,a,o=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<s;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),P(e,e.l_desc),P(e,e.d_desc),o=function(e){var t;for(B(e,e.dyn_ltree,e.l_desc.max_code),B(e,e.dyn_dtree,e.d_desc.max_code),P(e,e.bl_desc),t=18;3<=t&&0===e.bl_tree[2*p[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(a=e.static_len+3+7>>>3)<=i&&(i=a)):i=a=r+5,r+4<=i&&-1!==t?z(e,t,r,n):4===e.strategy||a===i?(C(e,2+(n?1:0),3),O(e,f,m)):(C(e,4+(n?1:0),3),function(e,t,r,n){var i;for(C(e,t-257,5),C(e,r-1,5),C(e,n-4,4),i=0;i<n;i++)C(e,e.bl_tree[2*p[i]+1],3);M(e,e.dyn_ltree,t-1),M(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,o+1),O(e,e.dyn_ltree,e.dyn_dtree)),q(e),n&&I(e)},r._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(b[r]+s+1)]++,e.dyn_dtree[2*E(t)]++),e.last_lit===e.lit_bufsize-1},r._tr_align=function(e){C(e,2,3),T(e,256,f),function(e){16===e.bi_valid?(A(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):8<=e.bi_valid&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},{"../utils/common":41}],53:[function(e,t,r){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,n){(function(e){!function(e,t){"use strict";if(!e.setImmediate){var r,n,i,s,a=1,o={},l=!1,c=e.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(e);u=u&&u.setTimeout?u:e,r="[object process]"==={}.toString.call(e.process)?function(e){process.nextTick((function(){h(e)}))}:function(){if(e.postMessage&&!e.importScripts){var t=!0,r=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=r,t}}()?(s="setImmediate$"+Math.random()+"$",e.addEventListener?e.addEventListener("message",p,!1):e.attachEvent("onmessage",p),function(t){e.postMessage(s+t,"*")}):e.MessageChannel?((i=new MessageChannel).port1.onmessage=function(e){h(e.data)},function(e){i.port2.postMessage(e)}):c&&"onreadystatechange"in c.createElement("script")?(n=c.documentElement,function(e){var t=c.createElement("script");t.onreadystatechange=function(){h(e),t.onreadystatechange=null,n.removeChild(t),t=null},n.appendChild(t)}):function(e){setTimeout(h,0,e)},u.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var i={callback:e,args:t};return o[a]=i,r(a),a++},u.clearImmediate=d}function d(e){delete o[e]}function h(e){if(l)setTimeout(h,0,e);else{var r=o[e];if(r){l=!0;try{!function(e){var r=e.callback,n=e.args;switch(n.length){case 0:r();break;case 1:r(n[0]);break;case 2:r(n[0],n[1]);break;case 3:r(n[0],n[1],n[2]);break;default:r.apply(t,n)}}(r)}finally{d(e),l=!1}}}}function p(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(s)&&h(+t.data.slice(s.length))}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[10])(10)},9199:(e,t,r)=>{"use strict";r.a(e,(async(e,t)=>{try{var n=r(6235),i=r(1710),s=r.n(i),a=r(7137),o=r(1083),l=r(5776),c=r(1129),u=r(602),d=function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function a(e){try{l(n.next(e))}catch(e){s(e)}}function o(e){try{l(n.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,o)}l((n=n.apply(e,t||[])).next())}))};let h=null,p=null,f=null,m=null;const g=`${c.Ay}/interactions`,b=`${c.Ay}/generate_presigned_post`,v={};function y(e){return d(this,void 0,void 0,(function*(){if(null===e||""===e)return"";try{performance.now();const t="https://www.amazon.com"+e,r=yield fetch(t),n=yield r.text(),i=(new l.S4).parseFromString(n),s=i.querySelector("html"),{defaultView:o}=i,{Event:c,CustomEvent:u,HTMLElement:d,customElements:h}=o;return(0,a.c5)(s,t,i,o),(0,a.sZ)(s,i)}catch(e){return console.error("Error fetching cart information:"+e),""}}))}const _=await(0,u.P2)("userInteractions",1,{upgrade(e){if(!e.objectStoreNames.contains("interactions")){const t=e.createObjectStore("interactions",{keyPath:"id",autoIncrement:!0});t.createIndex("timestamp","timestamp",{unique:!1}),t.createIndex("uuid","uuid",{unique:!0}),t.createIndex("uploaded","uploaded",{unique:!1}),console.log("Database interactions initialized")}if(!e.objectStoreNames.contains("screenshots")){const t=e.createObjectStore("screenshots",{keyPath:"id",autoIncrement:!0});t.createIndex("timestamp","timestamp",{unique:!1}),t.createIndex("uuid","uuid",{unique:!0}),t.createIndex("uploaded","uploaded",{unique:!1}),console.log("Database screenshots initialized")}if(!e.objectStoreNames.contains("reasonsAnnotation")){const t=e.createObjectStore("reasonsAnnotation",{keyPath:"id",autoIncrement:!0});t.createIndex("timestamp","timestamp",{unique:!1}),t.createIndex("uuid","uuid",{unique:!0}),t.createIndex("uploaded","uploaded",{unique:!1}),console.log("Database reasonsAnnotation initialized")}if(!e.objectStoreNames.contains("htmlSnapshots")){const t=e.createObjectStore("htmlSnapshots",{keyPath:"id",autoIncrement:!0});t.createIndex("timestamp","timestamp",{unique:!1}),t.createIndex("uuid","uuid",{unique:!0}),t.createIndex("uploaded","uploaded",{unique:!1}),console.log("Database htmlSnapshots initialized")}if(!e.objectStoreNames.contains("order")){const t=e.createObjectStore("order",{keyPath:"id",autoIncrement:!0});t.createIndex("timestamp","timestamp",{unique:!0}),t.createIndex("uploaded","uploaded",{unique:!1}),console.log("Database order initialized")}}});function x(e,t){v[e]||(v[e]={backStack:[],forwardStack:[],currentUrl:null});const r=v[e];return r.currentUrl?r.currentUrl===t?"reload":r.backStack.length>0&&r.backStack[r.backStack.length-1]===t?(r.forwardStack.push(r.currentUrl),r.currentUrl=r.backStack.pop(),"back"):r.forwardStack.length>0&&r.forwardStack[r.forwardStack.length-1]===t?(r.backStack.push(r.currentUrl),r.currentUrl=r.forwardStack.pop(),"forward"):(r.backStack.push(r.currentUrl),r.forwardStack=[],r.currentUrl=t,"new"):(r.currentUrl=t,"new")}function w(e,t,r){return d(this,void 0,void 0,(function*(){if(e){const n={screenshotId:`screenshot_${t}_${r}`,dataUrl:e,timestamp:t,uuid:r};return yield _.add("screenshots",Object.assign(Object.assign({},n),{uploaded:0})),!0}return!1}))}function S(){return d(this,void 0,void 0,(function*(){try{const[e]=yield chrome.tabs.query({active:!0,currentWindow:!0});if(e)return yield chrome.tabs.captureVisibleTab(e.windowId,{format:"jpeg",quality:25})}catch(e){console.error("Error capturing screenshot:",e)}return null}))}function k(e){let t=0;for(let r=0;r<e.length;r++)t=(t<<5)-t+e.charCodeAt(r),t|=0;return console.log("Hash value before return:",t),t.toString()}chrome.runtime.onMessage.addListener(((e,t,r)=>(d(void 0,void 0,void 0,(function*(){var n;if("saveData"===e.action){try{const i=e.data.uuid,s={htmlSnapshotId:e.data.htmlSnapshotId,htmlContent:e.data.htmlContent,simplifiedHTML:e.data.simplifiedHTML,timestamp:e.data.timestamp,uuid:i},a=e.data.fetchUrl||"";delete e.data.htmlContent,delete e.data.simplifiedHTML,delete e.data.fetchUrl;const o=()=>d(void 0,void 0,void 0,(function*(){console.log("saveData ",e.data.eventType),console.log(a),""!==a&&y(a).then((t=>d(void 0,void 0,void 0,(function*(){const r={url:a,timestamp:e.data.timestamp,uuid:e.data.uuid,metadata:t};console.log("cartdata",r),yield _.add("order",Object.assign(Object.assign({},r),{uploaded:0}))})))),console.log("start save db",performance.now()),yield _.add("interactions",Object.assign(Object.assign({},e.data),{uploaded:0}))}));yield Promise.all([o(),E(s.htmlContent,s.simplifiedHTML,s.htmlSnapshotId,s.timestamp,s.uuid),T(null===(n=t.tab)||void 0===n?void 0:n.id,e.data.timestamp,e.data.eventType,e.data,i)]),r({success:!0})}catch(e){console.error("Error in saveData:",e),r({success:!1,error:e.message})}return!0}if("saveOrder"===e.action){try{if(console.log("saveOrder",e.data),"object"==typeof e.data)yield _.add("order",Object.assign(Object.assign({},e.data),{uploaded:0}));else if(Array.isArray(e.data))if(e.data.length>0){const t=_.transaction("order","readwrite"),r=t.objectStore("order");yield Promise.all([...e.data.map((e=>r.add(e))),t.done])}else console.error("Invalid data format for saveOrder:",e.data),r({success:!1,error:"Invalid data format for saveOrder"});r({success:!0})}catch(e){console.error("Error in saveOrder:",e),r({success:!1,error:e.message})}return!0}if("captureScreenshot"===e.action){try{console.log("get screenshot request"),(new Date).getTime();const t=yield S();if(t){const n=yield w(t,e.timestamp,e.uuid);console.log("save screenshot success",n),r({success:n,message:n?void 0:"Failed to capture screenshot"})}else r({success:!1,message:"Failed to capture screenshot"})}catch(e){console.error("Error in captureScreenshot:",e),r({success:!1,message:"Failed to capture screenshot"})}return!0}if("downloadData"===e.action){try{console.log("downloadData");const e=yield R();r({success:e})}catch(e){console.error("Error handling download:",e),r({success:!1,error:e.message})}return!0}if("clearMemoryCache"===e.action){try{const e=_.transaction(["interactions","htmlSnapshots","order","screenshots","reasonsAnnotation"],"readwrite"),t=[];t.push(e.objectStore("interactions").clear()),t.push(e.objectStore("htmlSnapshots").clear()),t.push(e.objectStore("order").clear()),t.push(e.objectStore("screenshots").clear()),t.push(e.objectStore("reasonsAnnotation").clear()),t.push(e.done),yield Promise.all(t),r({success:!0})}catch(e){console.error("Error handling clearMemoryCache:",e),r({success:!1,error:e.message})}return!0}})),!0)));const E=(e,t,r,n,i)=>d(void 0,void 0,void 0,(function*(){e&&(yield _.add("htmlSnapshots",{htmlSnapshotId:r,htmlContent:e,simplifiedHTML:t,timestamp:n,uuid:i,uploaded:0}))})),A=(e,t,r,n,i,s=null,a=null,o=null)=>d(void 0,void 0,void 0,(function*(){const l={eventType:e,timestamp:t,target_url:r,htmlSnapshotId:n,uuid:i,pageMeta:a,windowSize:o};s&&(l.navigationType=s),yield _.add("interactions",Object.assign(Object.assign({},l),{uploaded:0}))})),C=(e,t,r)=>d(void 0,void 0,void 0,(function*(){try{const n=yield chrome.tabs.captureVisibleTab(e,{format:"jpeg",quality:25});yield w(n,t,r)}catch(e){console.error("Error in saveScreenshot:",e)}})),T=(e,t,r,n,i)=>d(void 0,void 0,void 0,(function*(){var s,o,l,u;if((null===(o=null===(s=n.target)||void 0===s?void 0:s.id)||void 0===o?void 0:o.toLowerCase().includes("rufus"))||(null===(u=null===(l=n.target)||void 0===l?void 0:l.className)||void 0===u?void 0:u.toLowerCase().includes("rufus"))||"input"===r)return;const{question:d,placeholder:h}=(0,a.ii)(r,n);let p=c.FI;switch(r){case"scroll":p=c.Lm;break;case"click":case"click_a":case"click_b":case"click_c":p=c.sG;break;case"navigation":p=c.WG;break;case"tabActivate":p=c.WI}if(Math.random()<p&&e){console.log("send popup");try{const n=yield chrome.tabs.sendMessage(e,{action:"show_popup",question:d,placeholder:h});if(console.log("reason",n),n&&null!==n.input&&!1!==n.success){const e={uuid:i,timestamp:t,eventType:r,reason:n.input};yield _.add("reasonsAnnotation",Object.assign(Object.assign({},e),{uploaded:0}))}}catch(e){console.error("Error popup:",e)}}}));function R(){return d(this,void 0,void 0,(function*(){try{const e=(new Date).toISOString().replace(/[:.]/g,"-");let t=(yield chrome.storage.local.get({userId:""})).userId||"unknown";const r=`${c.xe}/USER/${t}/data_${e}`,n=yield _.getAll("interactions"),i=yield _.getAll("htmlSnapshots"),a=yield _.getAll("order"),o=yield _.getAll("screenshots"),l=yield _.getAll("reasonsAnnotation");console.log("downloading zip file");const u=new(s());u.file(`order_info/order_info_${e}.txt`,`Session data for timestamp: ${e}\n        \n user id: ${t}\n              \n order details:\n              \n ${JSON.stringify(a)}`);const d={interactions:n,reasons:l,orderDetails:a},h=JSON.stringify(d,null,2);u.file(`interactions/interactions_${e}.json`,h);const p=u.folder("screenshots");for(const e of o){const t=yield fetch(e.dataUrl),r=yield t.blob();p.file(e.screenshotId.replace(/[:.]/g,"-")+".jpg",r)}const f=u.folder("htmlSnapshots");for(const e of i)f.file(e.htmlSnapshotId+".html",e.htmlContent),e.simplifiedHTML&&f.file("simplified_"+e.htmlSnapshotId+".html",e.simplifiedHTML);const m=yield u.generateAsync({type:"blob"});console.log("ZIP file generated");const g=new FileReader;g.onloadend=function(){const e=g.result.split(",")[1];chrome.downloads.download({url:"data:application/zip;base64,"+e,filename:`${r}.zip`,saveAs:!1})},g.readAsDataURL(m);const b=_.transaction(["interactions","htmlSnapshots","order","screenshots","reasonsAnnotation"],"readwrite"),v=[];return n.forEach((e=>{v.push(b.objectStore("interactions").delete(e.id))})),i.forEach((e=>{v.push(b.objectStore("htmlSnapshots").delete(e.id))})),a.forEach((e=>{v.push(b.objectStore("order").delete(e.id))})),o.forEach((e=>{v.push(b.objectStore("screenshots").delete(e.id))})),l.forEach((e=>{v.push(b.objectStore("reasonsAnnotation").delete(e.id))})),v.push(b.done),yield Promise.all(v),!0}catch(e){return console.error("Error download data:",e),!1}}))}function N(e){const t=new FormData;return t.append("key",e),Object.keys(m.fields).forEach((e=>{"key"!=e&&t.append(e,m.fields[e])})),t}chrome.tabs.onActivated.addListener((e=>d(void 0,void 0,void 0,(function*(){try{const t=e.tabId,r=yield chrome.tabs.get(t);if(!r)return void console.error(`Failed to get tab with ID: ${t}`);if(console.log(`Switched to tab ${t} with URL: ${r.url}`),(0,a.Ez)(r.url),r.url&&!(yield(0,a.Ip)(r.url))){const e=(new Date).toISOString(),i=(0,n.A)(),s=`html_${k(r.url)}_${e}_${i}`;yield new Promise((e=>setTimeout(e,100))),chrome.tabs.sendMessage(t,{action:"getHTML"},(n=>d(void 0,void 0,void 0,(function*(){const a=null==n?void 0:n.html,o=null==n?void 0:n.simplifiedHTML,l=null==n?void 0:n.pageMeta,c=null==n?void 0:n.windowSize;yield Promise.all([E(a,o,s,e,i),A("tabActivate",e,r.url,s,i,null,l,c),C(r.windowId,e,i)]),yield new Promise((r=>T(t,e,"tabActivate",{},i)))}))))}}catch(e){console.error("Error in tab activate handler:",e)}})))),chrome.webNavigation.onDOMContentLoaded.addListener((e=>d(void 0,void 0,void 0,(function*(){if(0===e.frameId&&(console.log("webNavigation onDOMContentLoaded event triggered:",e),(0,a.Ez)(e.url),!(yield(0,a.Ip)(e.url)))){const t=x(e.tabId,e.url);console.log(`Navigation type: ${t} for tab ${e.tabId} to ${e.url}`);const r=(new Date).toISOString(),i=(0,n.A)();chrome.tabs.sendMessage(e.tabId,{action:"getHTML"},(n=>d(void 0,void 0,void 0,(function*(){const s=null==n?void 0:n.html,a=null==n?void 0:n.simplifiedHTML,o=null==n?void 0:n.pageMeta,l=null==n?void 0:n.windowSize,c=`html_${k(e.url)}_${r}_${i}`;yield Promise.all([E(s,a,c,r,i),A("navigation",r,e.url,c,i,t,o,l),C((yield chrome.tabs.get(e.tabId)).windowId,r,i)]),"new"!==t&&"reload"!==t&&(console.log("send message to popup navigation"),yield T(e.tabId,r,"navigation",{navigationType:t},i))}))))}})))),chrome.tabs.onRemoved.addListener((e=>{delete v[e]}));const q=o.A.create({baseURL:c.Ay});function I(e){return d(this,void 0,void 0,(function*(){const t=new CompressionStream("gzip"),r=t.writable.getWriter(),n=(new TextEncoder).encode(e);return r.write(n),r.close(),yield new Response(t.readable).blob()}))}function D(){h||(console.log("startPeriodicUpload"),h=setInterval(L,1e4))}function L(){var e;return d(this,void 0,void 0,(function*(){h&&(clearInterval(h),h=!1);try{const t=yield chrome.storage.local.get({lastuploadTimestamp:null});f=t.lastuploadTimestamp||null;const r=(new Date).toISOString(),n=yield chrome.storage.local.get({user_interaction_tracker_last_timestamp:null});p=n.user_interaction_tracker_last_timestamp||null,p&&console.log("lastTimestamp restored: ",p);const i=p||r.replace(/[:.]/g,"-");yield chrome.storage.local.set({user_interaction_tracker_last_timestamp:i});const s=(yield chrome.storage.local.get({userId:""})).userId||"unknown",a=`${c.xe}/USER/${s}`,o=_.transaction(["interactions","htmlSnapshots","order","screenshots","reasonsAnnotation"],"readonly"),l=yield o.objectStore("interactions").index("uploaded").getAll(IDBKeyRange.only(0)),u=yield o.objectStore("htmlSnapshots").index("uploaded").getAll(IDBKeyRange.only(0)),h=yield o.objectStore("order").index("uploaded").getAll(IDBKeyRange.only(0)),v=yield o.objectStore("screenshots").index("uploaded").getAll(IDBKeyRange.only(0)),y=yield o.objectStore("reasonsAnnotation").index("uploaded").getAll(IDBKeyRange.only(0));if(0===l.length)return console.log("No interactions to upload"),D(),!1;const x={interactions:l,reasons:y,orderDetails:h};if(!m||(null==m?void 0:m.expire_timestamp)<Date.now()/1e3||!(null===(e=null==m?void 0:m.fields)||void 0===e?void 0:e.key.includes(s))){console.log("Getting new presigned post URL");let e=yield q.get(`${b}`,{params:{user_id:s}});m=e.data,console.log("New presigned post URL received",(null==m?void 0:m.expire_timestamp)-Date.now()/1e3)}try{const e=`Session data for timestamp: ${i}\n                                  \n user id: ${s}\n                                  \n order details:\n                                  \n ${JSON.stringify(h)}`,t=new Blob([e],{type:"text/plain"}),r=N(`${a}/order_info/order_info_${i}.txt`);r.append("file",t),console.log("Uploading session info");const n=q.post(m.url,r);console.log("Uploading HTML snapshots");const o=u.map((e=>d(this,void 0,void 0,(function*(){const t=yield I(e.htmlContent);let r=[],n=N(`${a}/html/${e.htmlSnapshotId}.html.gz`);if(n.append("file",t),r.push(q.post(m.url,n)),e.simplifiedHTML){const t=yield I(e.simplifiedHTML),n=N(`${a}/html/simplified${e.htmlSnapshotId}.html.gz`);n.append("file",t),r.push(q.post(m.url,n))}return Promise.all(r)}))));console.log("Uploading screenshots");const l=v.map((e=>d(this,void 0,void 0,(function*(){const t=yield fetch(e.dataUrl),r=yield t.blob(),n=N(`${a}/screenshots/${e.screenshotId.replace(/[:.]/g,"-")}.jpg`);return n.append("file",r),q.post(m.url,n)}))));console.log("Uploading interactions");const c=JSON.stringify(x),p=new Blob([c],{type:"application/json"}),f=N(`${a}/interactions/interactions_${i}.json`);f.append("file",p);const b=q.post(m.url,f),y=q.post(g,c,{headers:{Accept:"application/json","Content-Type":"application/json"},params:{user_id:s}});yield Promise.all([n,...o,...l,b,y])}catch(e){return D(),console.error("Error uploading data:",e),!1}if(s.includes(c.Cv)){const e=_.transaction(["interactions","htmlSnapshots","order","screenshots","reasonsAnnotation"],"readwrite"),t=[];l.forEach((r=>{r.uploaded=1,t.push(e.objectStore("interactions").put(r))})),u.forEach((r=>{r.uploaded=1,t.push(e.objectStore("htmlSnapshots").put(r))})),h.forEach((r=>{r.uploaded=1,t.push(e.objectStore("order").put(r))})),v.forEach((r=>{r.uploaded=1,t.push(e.objectStore("screenshots").put(r))})),y.forEach((r=>{r.uploaded=1,t.push(e.objectStore("reasonsAnnotation").put(r))})),t.push(e.done),yield Promise.all(t),p=null,f=r,yield chrome.storage.local.set({lastuploadTimestamp:f}),chrome.storage.local.remove("user_interaction_tracker_last_timestamp")}else{const e=_.transaction(["interactions","htmlSnapshots","order","screenshots","reasonsAnnotation"],"readwrite"),t=[];l.forEach((r=>{t.push(e.objectStore("interactions").delete(r.id))})),u.forEach((r=>{t.push(e.objectStore("htmlSnapshots").delete(r.id))})),h.forEach((r=>{t.push(e.objectStore("order").delete(r.id))})),v.forEach((r=>{t.push(e.objectStore("screenshots").delete(r.id))})),y.forEach((r=>{t.push(e.objectStore("reasonsAnnotation").delete(r.id))})),t.push(e.done),yield Promise.all(t),p=null,f=r,yield chrome.storage.local.set({lastuploadTimestamp:f}),chrome.storage.local.remove("user_interaction_tracker_last_timestamp")}return D(),!0}catch(e){return D(),console.error("Error uploading data:",e),!1}}))}null==h&&(console.log("--initializing interval--"),D()),chrome.storage.local.onChanged.addListener((e=>{e.userId&&chrome.tabs.query({active:!0,currentWindow:!0},(e=>{var t;const r=null===(t=e[0])||void 0===t?void 0:t.url;(0,a.Ez)(r)}))}));let O=!1;chrome.tabs.onUpdated.addListener(((e,t,r)=>d(void 0,void 0,void 0,(function*(){if(console.log("onUpdated"),"complete"===t.status&&!(yield(0,a.Ip)(r.url))&&!O){O=!0,console.log("send reminder");const t=(yield chrome.storage.local.get({userId:""})).userId,r=yield fetch(`${c.$M}?user_id=${t}`,{method:"GET"});if(r.ok){const t=yield r.json();chrome.tabs.sendMessage(e,{action:"showReminder",data:t})}console.log("send finished")}})))),t()}catch(P){t(P)}}),1)},1129:(e,t,r)=>{"use strict";r.d(t,{$M:()=>h,Ay:()=>c,Cv:()=>u,FI:()=>n,Lm:()=>i,WG:()=>a,WI:()=>o,Wd:()=>d,sG:()=>s,x2:()=>p,xe:()=>l});const n=.15,i=.05,s=.2,a=.15,o=.15,l="user_interaction_data",c="http://userdatacollect.hailab.io/api",u="hailab",d=["www.amazon.com"],h=`${c}/rationale_status`,p=["https://www.amazon.com/checkout/","https://www.amazon.com/gp/buy/","https://www.amazon.com/a/addresses","https://www.amazon.com/cpe/yourpayments/","https://www.amazon.com/ap/signin","https://www.amazon.com/ap/cvf/","https://www.amazon.com/ap/profile/","https://www.amazon.com/ax/account/","https://www.amazon.com/gp/product/handle-buy-box/","https://www.amazon.com/gp/checkoutportal/","https://www.amazon.com/gp/cart/desktop/","https://www.amazon.com/gp/primecentral/editPaymentPreference"]},4828:(e,t,r)=>{"use strict";r.d(t,{_e:()=>g});const n={selector:"#navbar-main",name:"nav_bar",children:[{selector:"#nav-search-bar-form",children:[{selector:"input#twotabsearchtextbox",name:"search_input",clickable:!0,generate_metadata:e=>({name:"search_term",data:{term:null==e?void 0:e.value}})},{selector:"#nav-search-submit-button",clickable:!0,name:"search_button"}]},{selector:"#nav-link-accountList",text_selector:"#nav-link-accountList span.nav-line-2",add_text:!0,clickable:!0,name:"account_and_list_button"},{selector:"#nav-orders",add_text:!0,clickable:!0,name:"order_button"},{selector:"#nav-cart",text_selector:"#nav-cart .nav-line-2",add_text:!0,clickable:!0,name:"cart_button"},{selector:"#nav-flyout-searchAjax",name:"suggested_terms",children:[{selector:"div.s-suggestion-container",name:"from_text",add_text:!0,clickable:!0}]},{selector:"#nav-xshop",name:"stores",children:[{selector:"li",clickable:!0,add_text:!0,name:"from_text"}]}]},i={selector:"#nav-flyout-ewc",name:"cart_side_bar",children:[{selector:"div.ewc-cart-header",add_text:!0},{selector:"div.ewc-compact-actions a",add_text:!0,clickable:!0,name:"go_to_cart"},{selector:"#ewc-compact-body ul",name:"product_list",children:[{selector:"li div[id^='sc-item']",name:"from_text",text_js:e=>{const t=e.querySelector("div.ewc-item-image a.sc-product-link img:not(.ewc-sfl-image-small)");return(null==t?void 0:t.alt)||""},children:[{selector:"div.ewc-item-image a.sc-product-link img:not(.ewc-sfl-image-small)",name:"product_image",clickable:!0,add_text:!0,text_format:"Product Image"},{selector:"span.ewc-unit-price",add_text:!0},{selector:"select",name:"drop_down_list"},{selector:'div[data-action="a-dropdown-button"], span[data-action="a-dropdown-button"]',name:"drop_down_list",clickable:!0,add_text:!0},{selector:"div.ewc-delete-icon-container button",name:"delete",add_text:!0,text_format:"delete",clickable:!0}],generate_metadata:e=>{var t;const r=e.getAttribute("data-asin"),n=e.querySelector("span.ewc-unit-price"),i=null===(t=null==n?void 0:n.innerText)||void 0===t?void 0:t.replace(/[\n]/g,"").trim(),s=e.querySelector("div.ewc-item-image a.sc-product-link img:not(.ewc-sfl-image-small)"),a=null==s?void 0:s.alt,o=null==s?void 0:s.parentElement,l=null==o?void 0:o.getAttribute("href"),c=e.querySelector('div[data-action="a-dropdown-button"], span[data-action="a-dropdown-button"]');return{name:"cart_items",data:{title:a,asin:r,price:i,url:l,quantity:null==c?void 0:c.innerText}}}}]}]},s={selector:"#productFactsDesktopExpander",add_text:!0,class:"product-facts"},a={selector:"div.mir-layout-DELIVERY_BLOCK-slot-PRIMARY_DELIVERY_MESSAGE_LARGE",add_text:!0,class:"product-delivery"},o={selector:'#selectQuantity, div[id^="qs-widget-button-container-atfc"]',name:"quantity_selector",children:[{selector:"label",add_text:!0},{selector:"span.a-dropdown-prompt",add_text:!0,generate_metadata:e=>({name:"product_quantity",data:{quantity:e.innerText}})},{selector:"select",name:"drop_down_list"},{selector:"button",name:"drop_down_list",clickable:!0,add_text:!0},{selector:'div.qs-widget-dropdown-wrapper span[data-action="qs-widget-dropdown-decl"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text",text_format:"Drop Down Option {}"}]},l={selector:"input[name='submit.add-to-cart'], input[name='submit.add-to-cart-ubb'], #freshAddToCartButton input",add_text:!0,clickable:!0,name:"add_to_cart",class:"product-add-to-cart"},c={selector:"input[name='submit.buy-now']",add_text:!0,clickable:!0,name:"buy_now",class:"product-buy-now"},u={selector:"#buyBoxAccordion > div.a-box.celwidget",name:"from_text",text_selector:"div.accordion-caption > span",children:[{selector:"div[data-csa-c-content-id='offer_display_desktop_accordion_header'], div[data-csa-c-content-id='offer_display_mobile_accordion_header']",name:"accordion_selector",add_text:!0,clickable:!0,text_selector:"h5 span.a-text-bold"},{selector:"div.a-accordion-inner.accordion-row-content",name:"purchase_form",children:[s,a,o,{selector:"#replenishmentFrequency_feature_div",name:"delivery_frequency_selector",text_selector:"div.a-section.a-spacing-micro > span",add_text:!0,children:[{selector:"#rcxOrdFreqOnmlWrapper span.a-dropdown-prompt",add_text:!0},{selector:"#rcxOrdFreqOnmlWrapper select",name:"drop_down_list"}]},{selector:"#rcx-subscribe-submit-button-announce",add_text:!0,clickable:!0,name:"set_up_now",class:"product-set-up-now"},l,c]}]},d={selector:"#gsod_singleOfferDisplay_Desktop",children:[{selector:"#addToCart",name:"purchase_form",children:[s,a,o,l,c]}]},h={selector:"li.a-carousel-card:not(.a-carousel-card-empty), #gridItemRoot",name:"from_text",text_js:e=>{const t=e.querySelector('a div[class*="sc-truncate-desktop"], a span.title, a div[class*="sc-css-line-clamp"], a span[class*="titleR3"], div[data-cy="title-recipe"], a[id*="title"]');return(null==t?void 0:t.title)||(null==t?void 0:t.innerText)||""},children:[{selector:'a:has(img[class*="product-image"], img.a-dynamic-image, img[class*="carousel-image"]), img.s-image, a[target="_top"]:has(img):not(:has(div, span))',name:"product_image",add_text:!0,text_format:"Product Image",clickable:!0},{selector:'a div[class*="sc-truncate-desktop"], a span.title, a div[class*="sc-css-line-clamp"], a:has(span[class*="titleR3"]), div[data-cy="title-recipe"], a[id*="title"]',add_text:!0,name:"product_title",clickable:!0},{selector:'a:has(i[class*="star"]), a:has(i[data-cy="reviews-ratings-slot"]), a.adReviewLink',name:"product_rating",clickable:!0,add_text:!0,text_js:e=>e.title||e.getAttribute("aria-label")||""},{selector:"span.a-size-base.s-underline-text",add_text:!0,text_format:"{} reviews",class:"product-rating-count",name:"product_rating_count",clickable:!0},{selector:'a[aria-describedby*="sp_detail_thematic-deals"]:not(:has(span.a-price)), a[aria-describedby*="sp_detail_thematic-recent_history"]:not(:has(span.a-price))',add_text:!0,name:"from_text",clickable:!0},{selector:'div[class*="sc-price"]',add_text:!0,text_selector:'span[class*="sc-price"]',name:"product_price",clickable:!0},{selector:'div.a-section.aok-relative:has(span.a-price span.a-offscreen), div.a-color-price:has(span.a-price span.a-offscreen), a[aria-describedby="price-link"]:has(span.a-price span.a-offscreen)',add_text:!0,clickable:!0,text_selector:"span.a-price span.a-offscreen",name:"product_price"},{selector:"span.a-price span.a-offscreen",add_text:!0},{selector:"a.pBooks-sf-points-component",add_text:!0,clickable:!0,name:"product_points"},{selector:'input[name="submit.addToCart"], span[class*="actionButton"]:has(i.a-icon-cart)',name:"add_to_cart",add_text:!0,text_format:"Add To Cart",clickable:!0},{selector:'div[name="ax-qs"], div[id^="atcStepperSection"]',children:[{selector:"button[aria-label='Decrease quantity by one'], button[data-action='remove']",add_text:!0,text_format:"Decrease quantity by one",clickable:!0,name:"from_text"},{selector:"div[role='spinbutton'], span.atcStepperQuantity",add_text:!0,text_format:"Current Quantity: {}"},{selector:"button[aria-label='Increase quantity by one'], button[data-action='add']",add_text:!0,text_format:"Increase quantity by one",clickable:!0,name:"from_text"}]}],generate_metadata:e=>{var t,r;const n=e.querySelector('div[id*="sc-turbo-container"], div[data-asin], input[data-asin]'),i=(null==n?void 0:n.getAttribute("data-asin"))||(null===(t=null==n?void 0:n.getAttribute("id"))||void 0===t?void 0:t.split("-").pop())||"",s=e.querySelector('a span[class*="sc-price"], span.a-price span.a-offscreen'),a=null===(r=null==s?void 0:s.innerText)||void 0===r?void 0:r.replace(/[\n]/g,""),o=e.querySelector('a div[class*="sc-truncate-desktop"], a span.title, a div[class*="sc-css-line-clamp"], a span[class*="titleR3"], div[data-cy="title-recipe"], a[id*="title"]'),l=(null==o?void 0:o.title)||(null==o?void 0:o.innerText)||"",c=e.querySelector('a:has(div[class*="sc-truncate-desktop"]), a:has(span.title), a:has(span[class*="title"])'),u=null==c?void 0:c.getAttribute("href"),d=e.querySelector('div[name="ax-qs"] div[role="spinbutton"], div[id^="atcStepperSection"] span.atcStepperQuantity');return{name:"promotion_items",data:{title:l,asin:i,price:a,url:u,quantity:(null==d?void 0:d.innerText)||""}}}},p=[n,{selector:"#sc-collapsed-carts-container",name:"carts",children:[{selector:"div.sc-collapsed-cart-container",name:"from_text",text_js:e=>{var t;const r=e.querySelector("div.sc-cart-header");return(null===(t=null==r?void 0:r.querySelector("h2[aria-label]"))||void 0===t?void 0:t.getAttribute("aria-label"))||(null==r?void 0:r.innerText)||"cart"},children:[{selector:"a h2 img",clickable:!0,name:"from_text",text_js:e=>e.alt},{selector:'div[data-name="collapsed_item_list"]',clickable:!0,name:"item_list"},{selector:'div.sc-buy-box-inner-box input[name^="proceedToALMCheckout"]',clickable:!0,name:"check_out",add_text:!0},{selector:"div.sc-buy-box-inner-box a",clickable:!0,name:"from_text",add_text:!0}]}]},{selector:"div[data-name='Active Items']",name:"active_item_list",children:[{selector:"div.sc-list-item-content",text_selector:"div.sc-item-content-group ul > li > span.a-list-item > a.sc-product-title span.a-truncate-full",name:"from_text",children:[{selector:"div.sc-item-check-checkbox-selector label",clickable:!0,name:"checkbox"},{selector:"div.sc-image-wrapper a",clickable:!0,name:"product_image",add_text:!0,text_format:"Product Image"},{selector:"div.sc-item-content-group ul > li > span.a-list-item > a.sc-product-title",clickable:!0,text_selector:"span.a-truncate-full",add_text:!0,name:"product_detail"},{selector:"li.sc-delivery-messaging",add_text:!0},{selector:"div.sc-badge-price-to-pay span.sc-product-price span:not(.a-offscreen)",add_text:!0},{selector:"li.sc-product-variation",add_text:!0},{selector:"a.sns-opt-in-link-desktop",add_text:!0,clickable:!0,name:"from_text"},{selector:"a.sns-recurrence-period-selector",add_text:!0,clickable:!0,name:"from_text",text_format:"Delivery every: {}"},{selector:"div.sc-item-content-group span.sc-quantity-stepper",children:[{selector:"button[aria-label='Decrease quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div[role='spinbutton']",add_text:!0,text_format:"Current Quantity: {}"},{selector:"button[aria-label='Increase quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]},{selector:"div.sc-item-content-group input[data-action='delete']",add_text:!0,clickable:!0,name:"delete"},{selector:"div.sc-item-content-group input[data-action='save-for-later']",add_text:!0,clickable:!0,name:"save_for_later"}],generate_metadata:e=>{var t,r;const n=null===(t=e.parentElement)||void 0===t?void 0:t.getAttribute("data-asin"),i=e.querySelector("div.sc-badge-price-to-pay span.sc-product-price span:not(.a-offscreen)"),s=null===(r=null==i?void 0:i.innerText)||void 0===r?void 0:r.replace(/[\n]/g,""),a=e.querySelector("div.sc-item-content-group ul > li > span.a-list-item > a.sc-product-title span.a-truncate-full"),o=null==a?void 0:a.innerText,l=e.querySelector("div.sc-item-content-group ul > li > span.a-list-item > a.sc-product-title"),c=null==l?void 0:l.getAttribute("href"),u=e.querySelector("li.sc-delivery-messaging"),d=null==u?void 0:u.innerText.replace(/[\n]/g," "),h=e.querySelector("div.sc-item-content-group span.sc-quantity-stepper div[role='spinbutton']"),p=null==h?void 0:h.innerText,f=e.querySelector("div.sc-item-check-checkbox-selector input"),m=null!==(null==f?void 0:f.getAttribute("checked")),g=e.querySelectorAll("li.sc-product-variation > span"),b=[];for(const e of g){const t=null==e?void 0:e.querySelector("span.a-text-bold"),r=null==e?void 0:e.querySelector("span:not(.a-text-bold)"),n=null==t?void 0:t.innerText.replace(/[:\n]/g,"").trim(),i=null==r?void 0:r.innerText.replace(/[:\n]/g,"").trim(),s={[n]:i};b.push(s)}return{name:"active_items",data:{title:o,asin:n,price:s,url:c,delivery:d,quantity:p,selected:m,options:b}}}}]},{selector:"#sc-buy-box-ptc-button input",add_text:!0,clickable:!0,name:"check_out"},{selector:"div.a-modal-scroller div.a-popover-wrapper",use_root:!0,name:"subscribe_n_save_popover",children:[{selector:"button.a-button-close",clickable:!0,name:"from_text",text_format:"Close",add_Text:!0},{selector:"select",name:"drop_down_list"},{selector:"li",clickable:!0,name:"from_text",add_text:!0},{selector:"div.a-popover-footer span.a-button-inner",name:"from_text",clickable:!0,add_text:!0,text_selector:"span.a-button-text"}]},{selector:"#sns-accordion",use_root:!0,name:"subscribe_n_save_frequency_selector_popover",children:[{selector:"div.a-box",add_text:!0,name:"from_text",clickable:!0}]}],f={selector:'li.a-carousel-card, div[id^="gridElement"]',name:"from_text",text_selector:"span.a-truncate-full",children:[{selector:"a:has(div.a-image-container)",name:"product_image",add_text:!0,text_format:"Product Image",clickable:!0},{selector:"span[id^='qs-widget-atc-button']",name:"add_to_cart",add_text:!0,text_format:"Add To Cart",clickable:!0},{selector:'div[id^="qs-widget-button-container-atfc"]',name:"quantity_selector",children:[{selector:"input[aria-label^='Remove']",add_text:!0,text_format:"Decrease quantity by 1",name:"from_text",clickable:!0},{selector:"button[id^='qs-widget-button-atfc']",add_text:!0},{selector:"input[aria-label^='Add']",add_text:!0,text_format:"Increase quantity by 1",name:"from_text",clickable:!0}]},{selector:"a > span > span > span.a-truncate-full",add_text:!0,name:"product_detail",clickable:!0},{selector:"div > span > span > span.a-truncate-full",add_text:!0},{selector:'div[class*="priceToPay"] span.a-offscreen',add_text:!0},{selector:"li.a-carousel-card a.a-size-mini",name:"from_text",clickable:!0,add_text:!0}],generate_metadata:e=>{var t,r;const n=e.querySelector('div[data-csa-c-item-id^="amzn1.asin"]'),i=null===(t=null==n?void 0:n.getAttribute("data-csa-c-item-id"))||void 0===t?void 0:t.split(":")[0].split(".").pop(),s=e.querySelector('div[class*="priceToPay"] span.a-offscreen'),a=null===(r=null==s?void 0:s.innerText)||void 0===r?void 0:r.replace(/[\n]/g,""),o=e.querySelector("span.a-truncate-full"),l=null==o?void 0:o.innerText,c=e.querySelector("a:has(span.a-truncate-full)"),u=null==c?void 0:c.getAttribute("href"),d=e.querySelector('div[id^="qs-widget-button-container-atfc"] button[id^="qs-widget-button-atfc"]');return{name:"promotion_items",data:{title:l,asin:i,price:a,url:u,quantity:null==d?void 0:d.innerText}}}},m=[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,{selector:"#zg_header",name:"categories",children:[{selector:"li a",clickable:!0,name:"from_text",add_text:!0}]},{selector:'div[class*="zg-banner-landing-page-header"]',add_text:!0},{selector:'div[class*="g-nav-tree-all_style_zg-browse-root"]',name:"departments",children:[{selector:'div[class*="zg-nav-tree-all_style_zg-root-browse-item"] > a, div[class*="zg-nav-tree-all_style_zg-browse-item"] > a',add_text:!0,clickable:!0,name:"from_text"},{selector:'div[class*="zg-nav-tree-all_style_zg-root-browse-item"] > span, div[class*="zg-nav-tree-all_style_zg-browse-item"] > span',name:"from_text",add_text:!0}]},{selector:'div[id^="CardInstance"]',text_selector:"h2.a-carousel-heading, h1",name:"from_text",children:[{selector:"h2.a-carousel-heading, h1",add_text:!0},{selector:"div.a-carousel-header-row a",add_text:!0,clickable:!0,name:"from_text"},h]}]}],g=[{match:"/",match_method:"url",match_with_ref:!0,selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,i,{selector:"div.gw-col",text_selector:"h1 span.a-truncate-full, h2 span.a-truncate-full, h3 span.a-truncate-full, h1:not(:has(span.a-truncate-full)), h2:not(:has(span.a-truncate-full)), h3:not(:has(span.a-truncate-full))",name:"from_text",children:[{selector:"h1 span.a-truncate-full, h2 span.a-truncate-full, h3 span.a-truncate-full, h1:not(:has(span.a-truncate-full)), h2:not(:has(span.a-truncate-full)), h3:not(:has(span.a-truncate-full))",add_text:!0},{selector:"a",add_text:!0,clickable:!0,name:"from_text",text_js:e=>{var t,r;return e.getAttribute("aria-label")||(null===(t=e.querySelector("img"))||void 0===t?void 0:t.alt)||(null===(r=e.querySelector("span.a-truncate-full"))||void 0===r?void 0:r.innerText)||e.innerText||""}}]},{selector:'div[data-card-metrics-id*="rhf"]',text_selector:"h2.a-carousel-heading",name:"from_text",children:[{selector:"h2.a-carousel-heading",add_text:!0},h]},{selector:'div[data-card-metrics-id*="rvi"]',text_selector:"h2.a-carousel-heading",name:"from_text",children:[{selector:"h2.a-carousel-heading",add_text:!0},{selector:"a",clickable:!0,add_text:!0,name:"from_text",text_js:e=>{var t;return(null===(t=e.querySelector("img"))||void 0===t?void 0:t.alt)||e.innerText||""}}]}]}]},{match:"/fmc/storefront",match_method:"url",match_with_ref:!0,selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,i]}]},{match:"/s",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,i,{selector:"div.sf-rib-v1-toolbar",name:"refinements_toolbar",children:[{selector:'span[data-csa-c-slot-id="nav-rib"], div[data-csa-c-slot-id="nav-rib"], a.sf-clear-all',add_text:!0,clickable:!0,name:"from_text",text_js:e=>"s-all-filters"==e.getAttribute("data-csa-c-content-id")?"Show All Filters":e.getAttribute("aria-label")||e.innerText||""},{selector:"div.sf-rib-v1-dropdown-main-container",name:"drop_down_lists",children:[{selector:"div.a-section.a-spacing-none",name:"from_text",text_selector:"div.sf-rib-v1-dropdown-popup-title-container",direct_child:!0,children:[{selector:"div.sf-rib-v1-dropdown-popup-title-container",add_text:!0},{selector:'ul span[role="listitem"]',clickable:!0,add_text:!0,name:"from_text",children:[{selector:'input[type="checkbox"]'}]},{selector:"div.sf-rib-v1-range-slider-label-container",add_text:!0},{selector:"div.s-slider-container div.s-lower-bound input",name:"price_min_value",add_text:!0,clickable:!0,keep_attr:["min","max","step"],override_attr:{step_values:e=>{const t=e.closest("form");if(t){const e=t.getAttribute("data-slider-props");if(e)return JSON.parse(e).stepLabels}return""},current_value:e=>{const t=Number.parseInt(e.getAttribute("value"));if(null!==t){const r=e.closest("form");if(r){const e=r.getAttribute("data-slider-props");if(e)return JSON.parse(e).stepLabels[t]}}return""}}},{selector:"div.s-slider-container div.s-upper-bound input",name:"price_min_value",add_text:!0,clickable:!0,keep_attr:["min","max","step"],override_attr:{step_values:e=>{const t=e.closest("form");if(t){const e=t.getAttribute("data-slider-props");if(e)return JSON.parse(e).stepLabels}return""},current_value:e=>{const t=Number.parseInt(e.getAttribute("value"));if(null!==t){const r=e.closest("form");if(r){const e=r.getAttribute("data-slider-props");if(e)return JSON.parse(e).stepLabels[t]}}return""}}},{selector:"div.sf-rib-v1-dropdown-buttons button, div.sf-rib-v1-dropdown-buttons input",name:"from_text",add_text:!0,clickable:!0}]}]}]},{selector:"#s-refinements",name:"refinements",children:[{selector:"#topRefinements\\/0",name:"top_refinements",add_text:"true",text_format:"Recently used filters",children:[{selector:"li",add_text:!0,name:"from_text",clickable:!0,text_js:function(e){try{let t="";if(!e)return t;const r=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())t+=e.innerText.trim(),r&&r.hasAttribute("title")&&(t+=" ",t+=r.getAttribute("title"));else{const r=e.querySelector("a.a-link-normal.s-navigation-item");r&&r.hasAttribute("title")&&(t+=r.getAttribute("title"))}return t}catch(e){return console.log(e),""}},children:[{selector:"input[type='checkbox']"}]}]},{selector:"div.a-section.a-spacing-none:not(:has(#n-title)):has(span.a-size-base.a-color-base.puis-bold-weight-text):has(ul span.a-declarative > span > li):not(#reviewsRefinements):not(#departments):not(#priceRefinements):not(#filters)",name:"from_text",text_selector:"span.a-size-base.a-color-base.puis-bold-weight-text",children:[{selector:"span.a-size-base.a-color-base.puis-bold-weight-text",add_text:!0,class:"refinement-title"},{selector:"a.s-navigation-clear-link",add_text:!0,name:"clear_selection",clickable:!0},{selector:"ul > span.a-declarative > span > li:has(a.a-link-normal.s-navigation-item)",add_text:!0,name:"from_text",clickable:!0,direct_child:!0,text_js:function(e){try{let t="";if(!e)return t;const r=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())t+=e.innerText.trim(),r&&r.hasAttribute("title")&&(t+=" ",t+=r.getAttribute("title"));else{const r=e.querySelector("a.a-link-normal.s-navigation-item");r&&r.hasAttribute("title")&&(t+=r.getAttribute("title"))}return r&&r.getAttribute("aria-current"),t}catch(e){return console.log(e),""}},generate_metadata:e=>{var t,r,n;let i="";const s=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())i+=e.innerText.trim(),s&&s.hasAttribute("title")&&(i+="_",i+=s.getAttribute("title"));else{const t=e.querySelector("a.a-link-normal.s-navigation-item");t&&t.hasAttribute("title")&&(i+=t.getAttribute("title"))}const a=null===(r=null===(t=e.closest("ul"))||void 0===t?void 0:t.parentElement)||void 0===r?void 0:r.firstElementChild,o=null===(n=null==a?void 0:a.innerText)||void 0===n?void 0:n.trim().replace(/[ ]/g,"_").toLowerCase().trim().replace(/^_+|_+$/g,"").replace(/[_\d]+$/,"");let l="";return s&&s.hasAttribute("href")&&(l=s.getAttribute("href")),s&&"true"===s.getAttribute("aria-current")?{name:"refinements."+o,data:{title:(null==i?void 0:i.trim())||"",selected:!0,url:l}}:{name:"refinements."+o,data:{title:(null==i?void 0:i.trim())||"",selected:!1,url:l}}},children:[{selector:"input[type='checkbox']"}]},{selector:"ul > span.a-declarative > li > span > div[data-a-expander-name='filter-content-expander']",name:"more_options",children:[{selector:"a[data-csa-c-func-deps='aui-da-a-expander-toggle']",name:"toggle_expansion",add_text:!0},{selector:"li",add_text:!0,name:"from_text",clickable:!0,text_js:function(e){try{let t="";if(!e)return t;const r=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())t+=e.innerText.trim(),r&&r.hasAttribute("title")&&(t+=" ",t+=r.getAttribute("title"));else{const r=e.querySelector("a.a-link-normal.s-navigation-item");r&&r.hasAttribute("title")&&(t+=r.getAttribute("title"))}return r&&r.getAttribute("aria-current"),t}catch(e){return console.log(e),""}},generate_metadata:e=>{var t,r,n,i,s;let a="";const o=e.querySelector("a.a-link-normal.s-navigation-item");if(e.innerText&&e.innerText.trim())a+=e.innerText.trim(),o&&o.hasAttribute("title")&&(a+="_",a+=o.getAttribute("title"));else{const t=e.querySelector("a.a-link-normal.s-navigation-item");t&&t.hasAttribute("title")&&(a+=t.getAttribute("title"))}const l=null===(i=null===(n=null===(r=null===(t=e.closest("ul"))||void 0===t?void 0:t.parentElement)||void 0===r?void 0:r.closest("ul"))||void 0===n?void 0:n.parentElement)||void 0===i?void 0:i.firstElementChild,c=null===(s=null==l?void 0:l.innerText)||void 0===s?void 0:s.trim().replace(/[ ]/g,"_").toLowerCase().trim().replace(/^_+|_+$/g,"").replace(/[_\d]+$/,"");let u="";return o&&o.hasAttribute("href")&&(u=o.getAttribute("href")),o&&"true"===o.getAttribute("aria-current")?{name:"refinements."+c,data:{title:(null==a?void 0:a.trim())||"",selected:!0,url:u}}:{name:"refinements."+c,data:{title:(null==a?void 0:a.trim())||"",selected:!1,url:u}}},children:[{selector:"input[type='checkbox']"}]}]}]},{selector:"#departments",name:"departments",add_text:!0,text_format:"Department",children:[{selector:"li a",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>{var t;const r=null==e?void 0:e.getAttribute("aria-current"),n=null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.trim(),i=null==e?void 0:e.getAttribute("href");return r&&"true"==r?{name:"refinements.departments",data:{title:n,selected:!0,url:i}}:{name:"refinements.departments",data:{title:n,selected:!1,url:i}}}}]},{selector:"#reviewsRefinements",name:"reviews_refinements",add_text:!0,text_format:"Customer Reviews",children:[{selector:"a.s-navigation-clear-link",add_text:!0,name:"clear_selection",clickable:!0},{selector:"li a[aria-current='true']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>{var t,r;return{name:"refinements.reviews",data:{title:null===(r=null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.replace(/\n/g," "))||void 0===r?void 0:r.trim(),selected:!0,url:null==e?void 0:e.getAttribute("href")}}}},{selector:"li a[aria-current='false']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>{var t,r;return{name:"refinements.reviews",data:{title:null===(r=null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.replace(/\n/g," "))||void 0===r?void 0:r.trim(),selected:!1,url:null==e?void 0:e.getAttribute("href")}}}}]},{selector:"#priceRefinements",name:"price_refinements",children:[{selector:"#p_36-title, div.sf-refinement-heading span",add_text:!0,name:"price_heading"},{selector:"div[aria-labelledby='p_36-title'] > a",add_text:!0,name:"clear_price_selection",clickable:!0},{selector:"ul[aria-labelledby='p_36-title'] a[aria-current='true']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>{var t;return{name:"refinements.price",data:{title:null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.trim(),selected:!0,url:null==e?void 0:e.getAttribute("href")}}}},{selector:"ul[aria-labelledby='p_36-title'] a[aria-current='false']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>{var t;return{name:"refinements.price",data:{title:null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.trim(),selected:!1,url:null==e?void 0:e.getAttribute("href")}}}},{selector:"div.sf-range-slider-row:nth-of-type(1)",add_text:!0,generate_metadata:e=>{var t;return{name:"refinements.price",data:{title:"price_range",range:null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.replace(/\s+/g,"")}}}},{selector:"div.sf-range-slider-row:nth-of-type(2) div.s-lower-bound input",name:"price_min_value",add_text:!0,clickable:!0,keep_attr:["min","max","step"],override_attr:{step_values:e=>{const t=e.closest("form");if(t){const e=t.getAttribute("data-slider-props");if(e)return JSON.parse(e).stepLabels}return""},current_value:e=>{const t=Number.parseInt(e.getAttribute("value"));if(null!==t){const r=e.closest("form");if(r){const e=r.getAttribute("data-slider-props");if(e)return JSON.parse(e).stepLabels[t]}}return""}}},{selector:"div.sf-range-slider-row:nth-of-type(2) div.s-upper-bound input",name:"price_max_value",add_text:!0,clickable:!0,keep_attr:["min","max","step"],override_attr:{step_values:e=>{const t=e.closest("form");if(t){const e=t.getAttribute("data-slider-props");if(e)return JSON.parse(e).stepLabels}return""},current_value:e=>{const t=Number.parseInt(e.getAttribute("value"));if(null!==t){const r=e.closest("form");if(r){const e=r.getAttribute("data-slider-props");if(e)return JSON.parse(e).stepLabels[t]}}return""}}},{selector:"div.sf-submit-range-button input",name:"submit_price_range",add_text:!0,text_format:"Go",clickable:!0},{selector:"div.sf-reset-range-link a",name:"reset_price_selection",add_text:!0,clickable:!0},{selector:"#p_n_deal_type-title",add_text:!0,name:"deals_discounts_heading"},{selector:"div[aria-labelledby='p_n_deal_type-title'] > a",add_text:!0,name:"clear_deals_discount_selection",clickable:!0},{selector:"ul[aria-labelledby='p_n_deal_type-title'] a[aria-current='true']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>{var t;return{name:"refinements.price",data:{title:null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.trim(),selected:!0,url:null==e?void 0:e.getAttribute("href")}}}},{selector:"ul[aria-labelledby='p_n_deal_type-title'] a[aria-current='false']",add_text:!0,name:"from_text",clickable:!0,generate_metadata:e=>{var t;return{name:"refinements.price",data:{title:null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.trim(),selected:!1,url:null==e?void 0:e.getAttribute("href")}}}}]}]},{selector:'div:has(> span[data-component-type="s-searchgrid-carousel"])',name:"from_text",text_selector:"div.sg-row h2",children:[{selector:"div.sg-row h2",add_text:!0},h]},{selector:"div.s-main-slot.s-result-list.s-search-results",name:"search_results",children:[{selector:"div.AdHolder",name:"ads",children:[{selector:"div[data-asin]",name:"from_text",add_text:!0,clickable:!0,text_js:e=>{const t=e.querySelector("img");return(null==t?void 0:t.getAttribute("alt")).trim()||""},generate_metadata:e=>{const t=null==e?void 0:e.getAttribute("data-asin"),r=e.querySelector("img"),n=null==r?void 0:r.getAttribute("alt"),i=e.querySelector("a[data-type='productTitle']");return{name:"ads",data:{title:n,asin:t,url:null==i?void 0:i.getAttribute("href")}}}}]},{insert_split_marker:!0,insert_split_marker_every:4,selector:'div[data-component-type="s-search-result"]',text_selector:"span.a-color-base.a-text-normal, h2.a-color-base.a-text-normal span",name:"from_text",class:"search-result",children:[{selector:"div[data-cy='title-recipe'] a.a-link-normal.s-link-style.a-text-normal",add_text:!0,class:"product-name",clickable:!0,name:"product_name"},{selector:"div.s-product-image-container, div.s-image-overlay-black",add_text:!0,name:"product_image",clickable:!0,text_format:"Product Image"},{selector:"div.s-color-swatch-container",name:"available_colors",children:[{selector:"div.s-color-swatch-pad",name:"from_text",clickable:!0,add_text:!0,text_js:e=>{const t=e.querySelector("a");return t&&t.getAttribute("aria-label")||""}},{selector:"div[data-csa-c-type='link'] a",direct_child:!0,name:"from_text",clickable:!0,add_text:!0}]},{selector:"div.s-variations-options-elevated, div.s-variations-options-justify-content",name:"options",add_text:!0,clickable:!0,click_selector:"a"},{selector:"div[data-cy='reviews-block']",class:"product-review",children:[{selector:"span.a-icon-alt",add_text:!0,class:"product-rating"},{selector:'a:has(i[data-cy="reviews-ratings-slot"])',clickable:!0,name:"product_rating"},{selector:"span.a-size-base.s-underline-text",add_text:!0,text_format:"{} reviews",class:"product-rating-count",name:"product_rating_count",clickable:!0}]},{selector:"div[data-cy='price-recipe']",class:"product-price",children:[{selector:"a.a-link-normal:has(> span.a-price > span.a-offscreen)",clickable:!0,name:"product_price",add_text:!0,text_selector:"a > span.a-price > span.a-offscreen"}]},{selector:"div[data-cy='delivery-recipe']",add_text:!0,class:"product-delivery"},{selector:"div[data-cy='add-to-cart'] button, span[id*='add-to-cart'] input",add_text:!0,clickable:!0,name:"add_to_cart"},{selector:"div[data-csa-c-content-id='s-search-see-details-button'] a",add_text:!0,clickable:!0,name:"see_options"},{selector:'div[name="ax-qs"]',children:[{selector:"button[aria-label='Decrease quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div[role='spinbutton']",add_text:!0,text_format:"Current Quantity: {}"},{selector:"button[aria-label='Increase quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]}],generate_metadata:e=>{const t=e.getAttribute("data-asin"),r=e.querySelector("div[data-cy='price-recipe'] a.a-link-normal > span.a-price > span.a-offscreen"),n=null==r?void 0:r.innerText,i=e.querySelector("span.a-color-base.a-text-normal, h2.a-color-base.a-text-normal span"),s=null==i?void 0:i.innerText,a=e.querySelector("div[data-cy='title-recipe'] a.a-link-normal.s-link-style.a-text-normal"),o=null==a?void 0:a.getAttribute("href"),l=e.querySelector("div[data-cy='delivery-recipe']");return{name:"search_results",data:{title:s,asin:t,price:n,url:o,delivery:null==l?void 0:l.innerText.replace(/[\n]/g," ")}}}}]},{selector:"span.s-pagination-strip",name:"pagination",children:[{selector:".s-pagination-item",add_text:!0,name:"from_text",clickable:!0}]},{selector:"div.a-popover-wrapper",name:"popover",children:[{selector:"header.a-popover-header button",add_text:!0,clickable:!0,name:"close",text_format:"Close"},{selector:"div.a-popover-inner div.puis-atc-size-variation",children:[{selector:"div.a-row:nth-of-type(1)",direct_child:!0,children:[{selector:"span[data-component-type='s-product-image'] a",name:"product_image",add_text:!0,clickable:!0,text_format:"Product Image"},{selector:"div.puis-size-variation-title a",name:"product_title",add_text:!0,clickable:!0},{selector:"div.puis-size-variation-product-spec",name:"product_specification",add_text:!0,clickable:!0,click_selector:"a"}]},{selector:"div.a-row:nth-of-type(2)",direct_child:!0,children:[{selector:"div.puis-size-variation-product-options",name:"from_text",text_selector:"span.a-size-base.a-color-secondary",children:[{selector:"span.a-size-base.a-color-secondary",add_text:!0},{selector:"span.a-dropdown-prompt",add_text:!0},{selector:"select",name:"drop_down_list"}]},{selector:"div.puis-size-variation-price a.a-text-normal",name:"price",clickable:!0,add_text:!0,text_selector:"span[aria-hidden='true']"},{selector:"div.puis-size-variation-delivery",add_text:!0,name:"delivery"}]},{selector:"div.a-row:nth-of-type(3)",direct_child:!0,children:[{selector:"span.s-no-js-hide input",name:"cancel",clickable:!0,add_text:!0,text_format:"Cancel"},{selector:"div.puis-atcb-add-container button",name:"add_to_cart",clickable:!0,add_text:!0}]}]}],generate_metadata:e=>{var t,r;const n=null===(t=e.querySelector("div[data-asin]"))||void 0===t?void 0:t.getAttribute("data-asin"),i=e.querySelector('div.a-popover-inner div.puis-atc-size-variation div.a-row:nth-of-type(2) div.puis-size-variation-price a.a-text-normal span[aria-hidden="true"]'),s=null===(r=null==i?void 0:i.innerText)||void 0===r?void 0:r.replace(/[\n]/g,""),a=e.querySelector("div.a-popover-inner div.puis-atc-size-variation div.a-row:nth-of-type(1) div.puis-size-variation-title a"),o=null==a?void 0:a.innerText,l=null==a?void 0:a.getAttribute("href"),c=(e.querySelector('div[data-action="a-dropdown-button"]'),e.querySelectorAll("div.a-popover-inner div.puis-atc-size-variation div.a-row:nth-of-type(1) div.puis-size-variation-product-spec, div.a-popover-inner div.puis-atc-size-variation div.a-row:nth-of-type(2) div.puis-size-variation-product-options")),u=[];for(const e of c){const t=null==e?void 0:e.querySelector("span.a-size-base.a-color-secondary"),r=null==e?void 0:e.querySelector("span.a-size-base.a-color-base, span.a-dropdown-prompt"),n=null==t?void 0:t.innerText.replace(/[:\n]/g,"").trim(),i=null==r?void 0:r.innerText.replace(/[:\n]/g,"").trim(),s={[n]:i};u.push(s)}return{name:"popover_item",data:{title:o,asin:n,price:s,url:l,options:u}}}}]}]},{match:"#productTitle, #titleBlock",match_text:"",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,i,{selector:"#centerCol",class:"product-card",children:[{selector:"#title",add_text:!0,keep_attr:["id"],generate_metadata:e=>({name:"product_details",data:{title:(null==e?void 0:e.innerText)||""}})},{selector:"#bondByLine_feature_div",add_text:!0,clickable:!0,name:"product_brand",generate_metadata:e=>({name:"product_details",data:{brand:(null==e?void 0:e.innerText)||""}})},{selector:"#bondByLine_feature_div",add_text:!0,name:"product_title",generate_metadata:e=>({name:"product_details",data:{title:(null==e?void 0:e.innerText)||""}})},{selector:"#averageCustomerReviews",class:"review",children:[{selector:"span.a-icon-alt",add_text:!0},{selector:"#acrCustomerReviewText",add_text:!0}]},{selector:'#apex_desktop > div[data-csa-c-slot-id="apex_dp_center_column"] > div[class="offersConsistencyEnabled"] > div:not([style="display:none;"]):not([style="display: none;"]) #corePriceDisplay_desktop_feature_div:has(#sns-base-price) #sns-base-price span.a-price.aok-align-center.reinventPricePriceToPayMargin.priceToPay, #apex_desktop > div[data-csa-c-slot-id="apex_dp_center_column"] > div[class="offersConsistencyEnabled"] > div:not([style="display:none;"]):not([style="display: none;"]) #corePriceDisplay_desktop_feature_div:not(:has(#sns-base-price)) span.a-price.aok-align-center.reinventPricePriceToPayMargin.priceToPay, #apex_desktop > div[data-csa-c-slot-id="apex_dp_center_column"] > div[data-csa-c-content-id="apex_with_rio_cx"] #corePriceDisplay_desktop_feature_div span.a-price.aok-align-center.reinventPricePriceToPayMargin.priceToPay',add_text:!0,text_format:"Price: {}",class:"product-price",generate_metadata:e=>{var t;return{name:"product_details",data:{price:(null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.replace(/\n/g,""))||""}}},text_js:e=>{var t;return(null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.replace(/\n/g,""))||""}},{selector:"span.bondApexPrice span.a-offscreen",add_text:!0,text_format:"Price: {}",class:"product-price",generate_metadata:e=>{var t;return{name:"product_details",data:{price:(null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.replace(/\n/g,""))||""}}}},{selector:"#twister",class:"product-options",name:"product_options",children:[{selector:"div.a-section",text_selector:"div.a-row:has(label.a-form-label) > label.a-form-label",name:"from_text",direct_child:!0,generate_metadata:e=>{var t,r,n;const i=null===(t=e.querySelector("div.a-row:has(label.a-form-label) label.a-form-label"))||void 0===t?void 0:t.innerHTML.replace(/[:\n]/g,"").trim();let s=null===(r=e.querySelector("div.a-row:has(label.a-form-label) span.selection"))||void 0===r?void 0:r.innerHTML;if(void 0===s||""===s){const t=null===(n=e.querySelector("select"))||void 0===n?void 0:n.querySelectorAll("option");if(t)for(const e of t)e&&null!==e.getAttribute("selected")&&(s=e.innerHTML.trim())}return{name:"product_options",data:{[i]:s.trim()}}},children:[{selector:"div.a-row:has(label.a-form-label)",children:[{selector:"label.a-form-label",add_text:!0},{selector:"span.selection",add_text:!0}]},{selector:"select",add_text:!0,name:"drop_down_list"},{selector:"ul",name:"button_list",children:[{selector:"li button",add_text:!0,clickable:!0,name:"from_text",text_js:function(e){let t="";if(e.innerText.trim()){t+=e.innerText.trim();const r=e.querySelector("img");r&&r.alt&&(t+=" ",t+=r.alt)}else{const r=e.querySelector("img");r&&r.alt&&(t+=r.alt)}return t.trim()}}]}]}]},{selector:"#twister-plus-inline-twister",class:"product-options",name:"product_options",children:[{selector:"div.inline-twister-row",text_selector:"div.inline-twister-dim-title-value-truncate-expanded span.a-size-base.a-color-secondary",name:"from_text",direct_child:!0,generate_metadata:e=>{var t,r,n;const i=null===(t=e.querySelector("div.inline-twister-dim-title-value-truncate-expanded span.a-size-base.a-color-secondary"))||void 0===t?void 0:t.innerHTML.replace(/[:\n]/g,"").trim();let s=null===(r=e.querySelector("div.inline-twister-dim-title-value-truncate-expanded span.inline-twister-dim-title-value"))||void 0===r?void 0:r.innerHTML;if(void 0===s||""===s){const t=null===(n=e.querySelector("select"))||void 0===n?void 0:n.querySelectorAll("option");if(t)for(const e of t)e&&null!==e.getAttribute("selected")&&(s=e.innerHTML.trim())}return{name:"product_options",data:{[i]:s.trim()}}},children:[{selector:"div.inline-twister-dim-title-value-truncate-expanded",children:[{selector:"span.a-size-base.a-color-secondary",add_text:!0},{selector:"span.inline-twister-dim-title-value",add_text:!0}]},{selector:"select",add_text:!0,name:"drop_down_list"},{selector:"ul",name:"button_list",children:[{selector:"li span.a-button:not(.aok-hidden) input",add_text:!0,clickable:!0,name:"from_text",text_js:function(e){const t=e.nextElementSibling;let r="";if(t.innerText.trim()){r+=t.innerText.trim();const e=t.querySelector("img");e&&e.alt&&(r+=" ",r+=e.alt)}else{const e=t.querySelector("img");e&&e.alt&&(r+=e.alt)}return r.trim()}}]}]},{selector:"div.inline-twister-singleton-header",text_selector:"span.a-size-base.a-color-secondary",name:"from_text",children:[{selector:"span.a-size-base.a-color-secondary",add_text:!0},{selector:"span.inline-twister-dim-title-value-truncate",add_text:!0}],generate_metadata:e=>{var t,r;const n=null===(t=e.querySelector("span.a-size-base.a-color-secondary"))||void 0===t?void 0:t.innerHTML.replace(/[:\n]/g,"").trim(),i=null===(r=e.querySelector("span.inline-twister-dim-title-value-truncate"))||void 0===r?void 0:r.innerHTML;return{name:"product_options",data:{[n]:i.trim()}}}}]},{selector:"#productFactsDesktopExpander ul.a-unordered-list, #featurebullets_feature_div ul.a-unordered-list, #bond-feature-bullets-desktop ul.a-unordered-list",add_text:!0,name:"about_this_item",text_format:"About this item: ",children:[{selector:"li",add_text:!0}],generate_metadata:e=>{var t;return{name:"product_details",data:{bullet_list:(null===(t=null==e?void 0:e.innerText)||void 0===t?void 0:t.replace(/\n/g," "))||""}}}}]},{selector:"#buybox:has(div.a-tab-container):not(:has(#partialState_buybox_desktop)):not(:has(#luxury_buybox_desktop))",name:"buybox",children:[{selector:"#tab_heading_desktop_buybox_group_1 a",name:"deliver_tab",clickable:!0,add_text:!0},{selector:"#tab_heading_desktop_buybox_group_2 a",name:"pick_up_tab",clickable:!0,add_text:!0},{selector:"#tab_desktop_buybox_group_1",name:"delivery",add_text:!0,text_format:"Delivery",children:[u,d]},{selector:"#tab_desktop_buybox_group_2",name:"pick_up",add_text:!0,text_format:"Pick Up",children:[{selector:"#gsod_singleOfferDisplay_group_2_Desktop",children:[{selector:"#pickUpOfferDisplay",name:"purchase_form",children:[s,a,o,l,c]}]}]}],generate_metadata:e=>{const t=e.querySelector("input#ASIN");return{name:"product_details",data:{asin:(null==t?void 0:t.value)||""}}}},{selector:"#buybox:not(:has(div.a-tab-container)):not(:has(#partialState_buybox_desktop)):not(:has(#luxury_buybox_desktop))",name:"buybox",children:[u,d],generate_metadata:e=>{const t=e.querySelector("input#ASIN");return{name:"product_details",data:{asin:(null==t?void 0:t.value)||""}}}},{selector:"#partialState_buybox_desktop",children:[{selector:"#partialStateBuybox div.a-section.a-text-center.a-spacing-small",add_text:!0}],generate_metadata:e=>{const t=e.querySelector("input#ASIN");return{name:"product_details",data:{asin:(null==t?void 0:t.value)||""}}}},{selector:"#buybox:has(#luxury_buybox_desktop)",name:"buybox",children:[{selector:"#bondApexPrice_feature_div",add_text:!0},{selector:"#deliveryBlockMessage",add_text:!0},{selector:"span.a-dropdown-container select",name:"drop_down_list"},{selector:"#bond-atc-button input",name:"from_text",text_format:"Add To Cart",clickable:!0,add_text:!0}],generate_metadata:e=>{const t=e.querySelector("input#ASIN");return{name:"product_details",data:{asin:(null==t?void 0:t.value)||""}}}},{selector:"#outOfStock",add_text:!0,text_format:"Currently Unavailable"},{selector:"div.cardRoot.bucket",name:"from_text",text_selector:"h2#similarities-product-bundle-widget-title",children:[{selector:"h2#similarities-product-bundle-widget-title",add_text:!0},{selector:'div[class*="desktop-sims-fbt_fbt-desktop_new-detail-faceout-box"]',name:"from_text",text_selector:'div[id^="ProductTitle"]',children:[{selector:'input[id^="fbtCheck"]',clickable:!0,add_text:!0,text_format:"Checkbox",name:"from_text"},{selector:'a[class*="desktop-sims-fbt_fbt-desktop_image-link"]',text_format:"Product Image",clickable:!0,add_text:!0,name:"from_text"},{selector:'div[id^="ProductTitle"]:has(a)',clickable:!0,add_text:!0,name:"product_title"},{selector:'div[id^="ProductTitle"]:not(:has(a))',add_text:!0},{selector:'div[class*="desktop-sims-fbt_price_p13n"] span.a-price span.a-offscreen',add_text:!0}]},{selector:"span.add-to-cart-button",clickable:!0,add_text:!0,name:"from_text"}]},{selector:"div#dp:not(.grocery):not(.luxury) #similarities_feature_div",text_selector:'h2.a-carousel-heading, h1[class*="carousel-heading"]',name:"from_text",children:[{selector:'h2.a-carousel-heading, h1[class*="carousel-heading"]',add_text:!0},h]},{selector:"div.grocery #similarities_feature_div",text_selector:'h2.a-carousel-heading, h1[class*="carousel-heading"]',name:"from_text",children:[{selector:'h2.a-carousel-heading, h1[class*="carousel-heading"]',add_text:!0},f]},{selector:"div.luxury #similarities_feature_div",text_selector:'h2.a-carousel-heading, h1[class*="carousel-heading"]',name:"from_text",children:[{selector:'h2.a-carousel-heading, h1[class*="carousel-heading"]',add_text:!0},{selector:'li.a-carousel-card, div[id^="gridElement"]',name:"from_text",text_selector:"span.a-truncate-full",children:[{selector:"a",clickable:!0,add_text:!0,name:"from_text",text_selector:"#bondWalledCarouselElementDescription"}],generate_metadata:e=>{var t,r;const n=e.querySelector("a"),i=null===(t=null==n?void 0:n.getAttribute("href"))||void 0===t?void 0:t.split("/").at(-2),s=e.querySelector("span.a-price span.a-offscreen"),a=null===(r=null==s?void 0:s.innerText)||void 0===r?void 0:r.replace(/[\n]/g,""),o=e.querySelector("a #bondWalledCarouselElementDescription"),l=null==o?void 0:o.innerText,c=e.querySelector("a");return{name:"promotion_items",data:{title:l,asin:i,price:a,url:null==c?void 0:c.getAttribute("href")}}}}]},{selector:"#product-comparison_feature_div",name:"product_comparison",children:[{selector:"h2",add_text:!0},{selector:'tr:has(div[class^="_product-comparison-desktop_titleStyle"])',children:[{selector:'td[class*="asin"]',name:"from_text",text_selector:'div[class^="_product-comparison-desktop_titleStyle"]',children:[{selector:'a > div[id^="imageContainer"]',name:"product_image",clickable:!0,add_text:!0,text_format:"Product Image"},{selector:'div > div[id^="imageContainer"]',name:"product_image",add_text:!0,text_format:"Product Image"},{selector:'a > div[class^="_product-comparison-desktop_titleStyle"]',add_text:!0,clickable:!0,name:"product_title"},{selector:'div > div[class^="_product-comparison-desktop_titleStyle"]',add_text:!0,name:"product_title"}]}]},{selector:'tr:has(input[name="submit.addToCart"])',children:[{selector:'td[class*="asin"]',name:"from_text",text_js:e=>{var t,r,n;const i=e.classList.value.split(" ").map((e=>`.${e}`)).join(", "),s=null===(n=null===(r=null===(t=e.closest("tbody"))||void 0===t?void 0:t.querySelector('tr:has(div[class^="_product-comparison-desktop_titleStyle"])'))||void 0===r?void 0:r.querySelector(i))||void 0===n?void 0:n.querySelector('div[class^="_product-comparison-desktop_titleStyle"]');return(null==s?void 0:s.innerText)||""},children:[{selector:'input[name="submit.addToCart"]',name:"add_to_cart",clickable:!0,add_text:!0}],generate_metadata:e=>{var t,r,n,i,s,a,o,l,c,u,d;const h=e.classList.value.split(" ").map((e=>`.${e}`)).join(", "),p=null===(n=null===(r=null===(t=e.closest("tbody"))||void 0===t?void 0:t.querySelector('tr:has(div[class^="_product-comparison-desktop_titleStyle"])'))||void 0===r?void 0:r.querySelector(h))||void 0===n?void 0:n.querySelector('div[class^="_product-comparison-desktop_titleStyle"]'),f=(null==p?void 0:p.innerText)||"",m=null===(s=null===(i=e.querySelector('input[name="submit.addToCart"]'))||void 0===i?void 0:i.getAttribute("data-asins"))||void 0===s?void 0:s.replace(/[\[\]"]/g,""),g=null===(l=null===(o=null===(a=e.closest("tbody"))||void 0===a?void 0:a.querySelector("tr:has(span.a-price)"))||void 0===o?void 0:o.querySelector(h))||void 0===l?void 0:l.querySelector("span.a-price span.a-offscreen"),b=null==g?void 0:g.innerText,v=null===(d=null===(u=null===(c=e.closest("tbody"))||void 0===c?void 0:c.querySelector('tr:has(div[class^="_product-comparison-desktop_titleStyle"])'))||void 0===u?void 0:u.querySelector(h))||void 0===d?void 0:d.querySelector('a:has(div[class^="_product-comparison-desktop_titleStyle"])');return{name:"comparison_items",data:{title:f,asin:m,price:b,url:(null==v?void 0:v.href)||window.location.href}}}}]},{selector:"tr:has(span.a-price)",children:[{selector:'td[class*="asin"]',name:"from_text",text_js:e=>{var t,r,n;const i=e.classList.value.split(" ").map((e=>`.${e}`)).join(", "),s=null===(n=null===(r=null===(t=e.closest("tbody"))||void 0===t?void 0:t.querySelectorAll("tr")[0])||void 0===r?void 0:r.querySelector(i))||void 0===n?void 0:n.querySelector('div[class^="_product-comparison-desktop_titleStyle"]');return(null==s?void 0:s.innerText)||""},children:[{selector:"span.a-price span.a-offscreen",name:"product_price",add_text:!0}]}]},{selector:'tr:has(div[class*="delivery"])',children:[{selector:'td[class*="asin"]',name:"from_text",text_js:e=>{var t,r,n;const i=e.classList.value.split(" ").map((e=>`.${e}`)).join(", "),s=null===(n=null===(r=null===(t=e.closest("tbody"))||void 0===t?void 0:t.querySelectorAll("tr")[0])||void 0===r?void 0:r.querySelector(i))||void 0===n?void 0:n.querySelector('div[class^="_product-comparison-desktop_titleStyle"]');return(null==s?void 0:s.innerText)||""},children:[{selector:'div[class*="delivery"]',name:"product_delivery",add_text:!0}]}]},{selector:'tr:has(div[class*="reviews-rating"])',children:[{selector:'td[class*="asin"]',name:"from_text",text_js:e=>{var t,r,n;const i=e.classList.value.split(" ").map((e=>`.${e}`)).join(", "),s=null===(n=null===(r=null===(t=e.closest("tbody"))||void 0===t?void 0:t.querySelectorAll("tr")[0])||void 0===r?void 0:r.querySelector(i))||void 0===n?void 0:n.querySelector('div[class^="_product-comparison-desktop_titleStyle"]');return(null==s?void 0:s.innerText)||""},children:[{selector:'div[class*="reviews-rating"]',name:"product_rating",add_text:!0,text_js:e=>{const t=e.querySelector("i"),r=e.querySelector("span.a-size-base.a-color-link");return(null==t?void 0:t.innerText)+" Reviewed by "+(null==r?void 0:r.innerText)||""},clickable:!0}]}]}]},{selector:"#attach-warranty-pane #attach-warranty-display",name:"warranty-box",children:[{selector:"div.attach-warranty-box",text_selector:"#attach-warranty-card-display-title",name:"from_text",children:[{selector:"i.a-icon-checkbox",name:"select",clickable:!0},{selector:"#attach-warranty-card-display-title",add_text:!0},{selector:"#attach-warranty-card-price",add_text:!0}]},{selector:"div.a-section.attach-warranty-button-row",children:[{selector:"input[aria-labelledby='attachSiAddCoverage-announce']",name:"add_protection",clickable:!0,add_text:!0,text_format:"Add Protection"},{selector:"input[aria-labelledby='attachSiNoCoverage-announce']",name:"no_protection",clickable:!0,add_text:!0,text_format:"No Thanks"}]}]}]}]},{match:"/hz/mobile/mission",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,{selector:'div[data-intent="intent-feed-mission-switcher"]',name:"category_switcher",children:[{selector:"h4",clickable:!0,name:"from_text",add_text:!0},{selector:"li.a-carousel-card",clickable:!0,name:"from_text",add_text:!0,text_js:e=>{const t=e.querySelector("img");return(null==t?void 0:t.alt)||""}}]},{selector:'div[class*="singleProductContainer"]',name:"from_text",text_selector:'span[class*="titleR2"]',children:[{selector:"a:has(img)",add_text:!0,text_format:"Product Image",name:"from_text",clickable:!0},{selector:'div[class*="singleSwatchesContainer"]',name:"options",children:[{selector:"li a",add_text:!0,name:"from_text",clickable:!0,text_js:e=>e.getAttribute("aria-label")||e.innerText||""},{selector:'a[class*="_link_"]',add_text:!0,name:"from_text",clickable:!0}]},{selector:"a:not(:has(img))",add_text:!0,direct_child:!0,text_format:"Product Detail",name:"from_text",clickable:!0},{selector:"input",add_text:!0,clickable:!0,name:"add_to_cart"},{selector:"a.a-button-text",clickable:!0,add_text:!0,name:"from_text"}],generate_metadata:e=>{var t;const r=e.querySelector("div[data-asin]"),n=null==r?void 0:r.getAttribute("data-asin"),i=e.querySelector("span.a-price span.a-offscreen"),s=null===(t=null==i?void 0:i.innerText)||void 0===t?void 0:t.replace(/[\n]/g,""),a=e.querySelector('span[class*="titleR2"]'),o=null==a?void 0:a.innerText.replace('"',""),l=e.querySelector("a:not(:has(img))");return{name:"promotion_items",data:{title:o,asin:n,price:s,url:null==l?void 0:l.getAttribute("href")}}}},{selector:"#intent-tabs",name:"intent_tabs",children:[{selector:"li",clickable:!0,name:"from_text",add_text:!0,text_js:e=>{var t;return(null===(t=e.getAttribute("data-intent"))||void 0===t?void 0:t.replace("intent-feed-","").replaceAll("-","_"))||""}}]},{selector:'div[id^="CardInstance"]:has(div[class*="productContainer"])',text_selector:"h4",name:"from_text",children:[{selector:"h4",add_text:!0},h]},{selector:'div[id^="CardInstance"]:has(div[class*="twoAsinsProductDetails"])',text_selector:"h4",name:"from_text",children:[{selector:"h4",add_text:!0},h,{selector:'div[class*="twoAsinsProductContainer"]',text_js:e=>e.querySelector('div[class*="twoAsinsProductDetails"] a[aria-label]').getAttribute("aria-label")||"",name:"from_text",children:[{selector:'div[class*="imageBlockContainer"] a',clickable:!0,add_text:!0,text_format:"Product Image",name:"from_text"},{selector:'div[class*="twoAsinsProductDetails"] a',clickable:!0,add_text:!0,text_format:"Product Details",name:"from_text"},{selector:'span[class*="actionButton"]:has(i.a-icon-cart)',clickable:!0,add_text:!0,name:"add_to_cart"}],generate_metadata:e=>{var t;const r=e.querySelector("input[data-asin]"),n=(null==r?void 0:r.getAttribute("data-asin"))||"",i=e.querySelector("span.a-price span.a-offscreen"),s=null===(t=null==i?void 0:i.innerText)||void 0===t?void 0:t.replace(/[\n]/g,""),a=e.querySelector('div[class*="twoAsinsProductDetails"] a'),o=(null==a?void 0:a.getAttribute("aria-label"))||"",l=e.querySelector('div[class*="twoAsinsProductDetails"] a');return{name:"promotion_items",data:{title:o,asin:n,price:s,url:null==l?void 0:l.getAttribute("href")}}}}]},{selector:'div[class*="intuition-sticky-container"]',name:"refinements",children:[{selector:'li[class*="intuition-attribute-bar"]',name:"from_text",text_js:e=>{const t=e.querySelector("a-cardui-header"),r=e.querySelector("button[aria-label]");return(null==r?void 0:r.getAttribute("aria-label"))||(null==t?void 0:t.innerText)||""},children:[{selector:'div[class*="intuition-attribute-with-chevron__attributeWithChevronContainer"]',clickable:!0,name:"apply_filters",add_text:!0,text_js:e=>{const t=e.querySelector("span.a-truncate-full"),r=e.querySelector("button[aria-label]");return(null==r?void 0:r.getAttribute("aria-label"))||(null==t?void 0:t.innerText)||""}},{selector:'div[class*="intuition-attribute-with-chevron__chevronOuterContainer"]',clickable:!0,name:"from_text",add_text:!0,text_format:"Open Filters"},{selector:'div[class*="closeModalIconContainer"]',clickable:!0,add_text:!0,text_format:"Close Filters",name:"from_text"},{selector:"div.a-cardui-content > div > div",clickable:!0,name:"from_text",add_text:!0,text_js:e=>{const t=e.querySelector("button");return(null==t?void 0:t.getAttribute("aria-label"))||(null==t?void 0:t.innerText)||""}},{selector:'div[class*="actionContainer"]',clickable:!0,name:"from_text",add_text:!0}]}]},{selector:"#intent-content-default",name:"from_text",text_js:e=>{var t;return(null===(t=e.getAttribute("data-intent"))||void 0===t?void 0:t.replace("intent-feed-","").replaceAll("-","_"))||""},children:[{selector:'li[class*="productContainer"]',name:"from_text",text_selector:'span[class*="titleR3"]',children:[{selector:"a:has(img)",add_text:!0,text_format:"Product Image",name:"from_text",clickable:!0},{selector:'div[class*="swatches"], div[class*="variationContainer"]',name:"options",children:[{selector:"li a",add_text:!0,name:"from_text",clickable:!0,text_js:e=>e.getAttribute("aria-label")||e.innerText||""},{selector:'a[class*="_link_"]',add_text:!0,name:"from_text",clickable:!0}]},{selector:'a[class*="productLink"]',clickable:!0,add_text:!0,name:"product_title"},{selector:"input",clickable:!0,add_text:!0,name:"add_to_cart"},{selector:"a.a-button-text",clickable:!0,add_text:!0,name:"from_text"}],generate_metadata:e=>{var t,r;const n=e.querySelector("div[data-asin]"),i=null==n?void 0:n.getAttribute("data-asin"),s=e.querySelector("span.a-price span.a-offscreen"),a=null===(t=null==s?void 0:s.innerText)||void 0===t?void 0:t.replace(/[\n]/g,""),o=e.querySelector('span[class*="titleR3"]'),l=null==o?void 0:o.innerText.replace('"',""),c=e.querySelector("a:not(:has(img))"),u=null==c?void 0:c.getAttribute("href"),d=e.closest("#intent-content-default");return{name:(null===(r=null==d?void 0:d.getAttribute("data-intent"))||void 0===r?void 0:r.replace("intent-feed-","").replaceAll("-","_"))||"",data:{title:l,asin:i,price:a,url:u}}}},{selector:'li[class*="intuition-product-grid__faceout"]',name:"from_text",text_selector:'span[class*="titleR3"]',children:[{selector:"a:has(img)",add_text:!0,text_format:"Product Image",name:"from_text",clickable:!0},{selector:'div[class*="swatches"], div[class*="variationContainer"]',name:"options",children:[{selector:"li a",add_text:!0,name:"from_text",clickable:!0,text_js:e=>e.getAttribute("aria-label")||e.innerText||""},{selector:'a[class*="_link_"]',add_text:!0,name:"from_text",clickable:!0}]},{selector:'a[class*="productLink"]',clickable:!0,name:"from_text",add_text:!0,text_format:"Product Detail"},{selector:"input",clickable:!0,add_text:!0,name:"add_to_cart"},{selector:"input",clickable:!0,add_text:!0,name:"add_to_cart"}],generate_metadata:e=>{var t,r;const n=e.querySelector("input"),i=null==n?void 0:n.getAttribute("data-asin"),s=e.querySelector("span.a-price span.a-offscreen"),a=null===(t=null==s?void 0:s.innerText)||void 0===t?void 0:t.replace(/[\n]/g,""),o=e.querySelector('span[class*="titleR3"]'),l=null==o?void 0:o.innerText.replace('"',""),c=e.querySelector("a:not(:has(img))"),u=null==c?void 0:c.getAttribute("href"),d=e.closest("#intent-content-default");return{name:(null===(r=null==d?void 0:d.getAttribute("data-intent"))||void 0===r?void 0:r.replace("intent-feed-","").replaceAll("-","_"))||"",data:{title:l,asin:i,price:a,url:u}}}}]}]}]},{match:"/cart/add-to-cart",match_method:"url",selector:"html",match_with_ref:!0,children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,i,{selector:"#sw-atc-buy-box",children:[{selector:"#sw-subtotal",children:[{selector:"#sw-subtotal-item-count",add_text:!0},{selector:"span[aria-hidden='true']",add_text:!0}]},{selector:"#sc-buy-box-ptc-button span.a-button-inner input",add_text:!0,text_selector:"div.sc-without-multicart",clickable:!0,name:"check_out",fetch_url:"/cart"},{selector:"#sw-gtc a",add_text:!0,clickable:!0,name:"go_to_cart"}]}]}]},{match:"/cart/smart-wagon",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,i,{selector:"#sw-atc-buy-box",children:[{selector:"#sw-subtotal",children:[{selector:"#sw-subtotal-item-count",add_text:!0},{selector:"span[aria-hidden='true']",add_text:!0}]},{selector:"#sc-buy-box-ptc-button span.a-button-inner input",add_text:!0,text_selector:"div.sc-without-multicart",clickable:!0,name:"check_out",fetch_url:"/cart"},{selector:"#sw-gtc a",add_text:!0,clickable:!0,name:"go_to_cart"}]}]}]},{match:"/gp/cart/view.html",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:p}]},{match:"/cart",match_method:"url",match_with_ref:!0,selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:p}]},{match:"/cart/luxury",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,{selector:"div[data-name='Active Items']",name:"active_item_list",children:[{selector:"div.sc-list-item-content",text_selector:"ul > li > span.a-list-item > a.sc-product-title span.a-truncate-full",name:"from_text",children:[{selector:"div.sc-product-image-desktop a img",clickable:!0,name:"product_image",add_text:!0,text_format:"Product Image"},{selector:"ul > li > span.a-list-item > a.sc-product-title",clickable:!0,text_selector:"span.sc-product-title",add_text:!0,name:"product_detail"},{selector:"div.sc-badge-price-to-pay span.sc-price",add_text:!0},{selector:"div.sc-action-links",children:[{selector:"span.sc-quantity-stepper",children:[{selector:'button[data-action="a-stepper-decrement"]',add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:'div[role="spinbutton"]',add_text:!0,name:"quantity_drop_down_list",text_format:"Current Quantity: {}"},{selector:'button[data-action="a-stepper-increment"]',add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]}]},{selector:"input[data-action='delete']",add_text:!0,clickable:!0,name:"delete"}],generate_metadata:e=>{var t,r;const n=null===(t=e.parentElement)||void 0===t?void 0:t.getAttribute("data-asin"),i=e.querySelector("div.sc-badge-price-to-pay span.sc-price"),s=null===(r=null==i?void 0:i.innerText)||void 0===r?void 0:r.replace(/[\n]/g,""),a=e.querySelector("ul > li > span.a-list-item > a.sc-product-title span.sc-product-title"),o=null==a?void 0:a.innerText,l=e.querySelector("ul > li > span.a-list-item > a.sc-product-title"),c=null==l?void 0:l.getAttribute("href"),u=e.querySelector('span.sc-quantity-stepper div[role="spinbutton"]');return{name:"active_items",data:{title:o,asin:n,price:s,url:c,quantity:null==u?void 0:u.innerText}}}}]},{selector:'div.sc-buy-box-inner-box input[name^="proceedToLuxuryCheckout"]',clickable:!0,name:"check_out",add_text:!0}]}]},{match:"/cart/localmarket",match_method:"url",match_with_ref:!0,selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,{selector:"div[data-name='Active Items']",name:"active_item_list",children:[{selector:"div.sc-list-item-content",text_selector:"ul > li > span.a-list-item > a.sc-product-title span.a-truncate-full",name:"from_text",children:[{selector:"div.sc-product-image-desktop a img",clickable:!0,name:"product_image",add_text:!0,text_format:"Product Image"},{selector:"ul > li > span.a-list-item > a.sc-product-title",clickable:!0,text_selector:"span.a-truncate-full",add_text:!0,name:"product_detail"},{selector:"div.sc-badge-price-to-pay span.sc-price",add_text:!0},{selector:"div.sc-action-links",children:[{selector:"div.qs-widget-container",children:[{selector:"input[aria-label='Remove']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div.qs-widget-dropdown-flex-wrapper button",add_text:!0,clickable:!0,name:"quantity_drop_down_list",text_format:"Current Quantity: {}"},{selector:'div.qs-widget-dropdown-wrapper span[data-action="qs-widget-dropdown-decl"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text",text_format:"Drop Down Option {}"},{selector:'div[id^="qs-widget-quantity-container-atfc"] span[data-action="qs-widget-quantity-changelink-decl"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text"},{selector:'div[id^="qs-widget-summary-container-atfc"] span[id^="qs-widget-summary-atc-atfc"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text"},{selector:"input[aria-label='Add']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]}]},{selector:"input[data-action='delete']",add_text:!0,clickable:!0,name:"delete"}],generate_metadata:e=>{var t,r;const n=null===(t=e.parentElement)||void 0===t?void 0:t.getAttribute("data-asin"),i=e.querySelector("div.sc-badge-price-to-pay span.sc-price"),s=null===(r=null==i?void 0:i.innerText)||void 0===r?void 0:r.replace(/[\n]/g,""),a=e.querySelector("ul > li > span.a-list-item > a.sc-product-title span.a-truncate-full"),o=null==a?void 0:a.innerText,l=e.querySelector("ul > li > span.a-list-item > a.sc-product-title"),c=null==l?void 0:l.getAttribute("href"),u=e.querySelector("div.sc-action-links div.qs-widget-dropdown-flex-wrapper button");return{name:"active_items",data:{title:o,asin:n,price:s,url:c,quantity:null==u?void 0:u.innerText}}}}]},{selector:'div[id^="CardInstance"]',text_selector:"h2.a-carousel-heading",name:"from_text",children:[{selector:"h2.a-carousel-heading",add_text:!0},f]},{selector:'div.sc-buy-box-inner-box input[name^="proceedToALMCheckout"]',clickable:!0,name:"check_out",add_text:!0},{selector:"div.sc-buy-box-inner-box a",clickable:!0,name:"from_text",add_text:!0},{selector:"#sc-cart-above-actions button, #sc-cart-above-actions a",clickable:!0,name:"from_text",add_text:!0}]}]},{match:"/alm/byg",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[{selector:'a[name="proceedToCheckout"]',name:"check_out",add_text:!0,clickable:!0},{selector:'div[id^="CardInstance"]',text_selector:"h2.a-carousel-heading",name:"from_text",children:[{selector:"h2.a-carousel-heading",add_text:!0},f]}]}]},{match:"/alm/substitution",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[{selector:"#subsContinueButton input",name:"check_out",add_text:!0,clickable:!0,text_format:"Continue"},{selector:"div.subs-cart-item",name:"from_text",text_selector:"div.a-spacing-top-base span.a-size-base",children:[{selector:"div.a-spacing-top-base span.a-size-base",add_text:!0},{selector:"div.a-spacing-top-mini span.a-color-price",add_text:!0}],generate_metadata:e=>{const t=e.querySelector("div[data-cart-item-asin]"),r=null==t?void 0:t.getAttribute("data-cart-item-asin"),n=e.querySelector("div.a-spacing-top-base span.a-size-base"),i=null==n?void 0:n.innerText,s=e.querySelector("div.a-spacing-top-mini span.a-color-price");return{name:"active_items",data:{asin:r,title:i,price:null==s?void 0:s.innerText}}}}]}]},{match:"/cart/byc",match_method:"url",selector:"html",match_with_ref:!0,children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[{selector:'a[name="sc-byc-ptc-button"]',name:"check_out",add_text:!0,clickable:!0},{selector:'span[cel_widget_id^="byc-back-button"] a',name:"back_to_cart",add_text:!0,clickable:!0},{selector:'div[id^="CardInstance"]',text_selector:"h2.a-carousel-heading",name:"from_text",children:[{selector:"h2.a-carousel-heading",add_text:!0},h]}]}]},{match:"/fmc/ssd-storefront",match_method:"url",selector:"html",match_with_ref:!0,children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,{selector:'div[class*="store-subnav-desktop_style_subnav-content-container"]',name:"sub_stores",children:[{selector:'a[class*="store-subnav-desktop_style"]',add_text:!0,clickable:!0,name:"from_text",text_js:e=>e.innerText||"Same Day Store"}]},{selector:'div[id^="CardInstance"]',text_selector:"h2.seeMoreTitleHeader",name:"from_text",children:[{selector:"h2.a-carousel-heading",add_text:!0},h]}]}]},{match:"/fmc/ssd-category",match_method:"url",selector:"html",match_with_ref:!0,children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,{selector:'div[class*="store-subnav-desktop_style_subnav-content-container"]',name:"sub_stores",children:[{selector:'a[class*="store-subnav-desktop_style"]',add_text:!0,clickable:!0,name:"from_text",text_js:e=>e.innerText||"Same Day Store"}]},{selector:"div.dcl-container",name:"categories",children:[{selector:"h2.dcl-header-title",add_text:!0},{selector:"li.a-carousel-card.dcl-carousel-element a",text_selector:"div.dcl-card-footer",add_text:!0,clickable:!0,name:"from_text"}]},{selector:'div[id^="CardInstance"]',text_selector:"h2.seeMoreTitleHeader",name:"from_text",children:[{selector:"h2.a-carousel-heading",add_text:!0},h]}]}]},{match:"/gp/bestsellers",match_method:"url",selector:"html",match_with_ref:!0,children:m},{match:"/gp/new-releases/*",match_method:"url",selector:"html",match_with_ref:!0,match_with_wildcard:!0,children:m},{match:"/gp/movers-and-shakers/*",match_method:"url",selector:"html",match_with_ref:!0,match_with_wildcard:!0,children:m},{match:"/gp/most-wished-for/*",match_method:"url",selector:"html",match_with_ref:!0,match_with_wildcard:!0,children:m},{match:"/gp/most-gifted/*",match_method:"url",selector:"html",match_with_ref:!0,match_with_wildcard:!0,children:m},{match:"/Best-Sellers*/zgbs/*",match_method:"url",selector:"html",match_with_ref:!0,match_with_wildcard:!0,children:m},{match:"/*/b",match_method:"url",selector:"html",match_with_wildcard:!0,children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,{selector:"#nav-subnav",name:"sub_stores",children:[{selector:"a",direct_child:!0,clickable:!0,name:"from_text",add_text:!0},{selector:"li.generic-subnav-flyout-item",clickable:!0,use_root:!0,name:"from_text",add_text:!0}]},{selector:'div[class^="DesktopRefinements-module__root"]',name:"refinements",children:[{selector:"div",direct_child:!0,name:"from_text",text_selector:"span.a-size-base.a-color-base.a-text-bold",children:[{selector:"span.a-size-base.a-color-base.a-text-bold",add_text:!0},{selector:'ul[class^="Breadcrumbs-module"] li:has(a)',add_text:!0,clickable:!0,name:"from_text"},{selector:'ul[class^="Breadcrumbs-module"] li:not(:has(a))',add_text:!0},{selector:'div[role="radiogroup"] > span, div[role="group"] > span',clickable:!0,add_text:!0,name:"from_text",text_js:e=>{var t;return(null===(t=e.querySelector("div[aria-label]"))||void 0===t?void 0:t.getAttribute("aria-label"))||e.innerText},generate_metadata:e=>{var t,r,n,i;const s=null===(r=null===(t=e.parentElement)||void 0===t?void 0:t.parentElement)||void 0===r?void 0:r.firstElementChild,a=null===(n=null==s?void 0:s.innerText)||void 0===n?void 0:n.trim().replace(/[ ]/g,"_").toLowerCase().trim().replace(/^_+|_+$/g,""),o=(null===(i=e.querySelector("div[aria-label]"))||void 0===i?void 0:i.getAttribute("aria-label"))||e.innerText,l=e.querySelector('input[type="radio"], input[type="checkbox"]');return null==l||l.getAttribute("data-processed-input-checked"),{name:"refinements."+a,data:{title:(null==o?void 0:o.trim())||"",selected:!1}}}},{selector:'button[class*="SeeMoreButton-module"]',clickable:!0,add_text:!0,name:"from_text"}]}]},{selector:'div[class^="ProductCard-module__card"]',name:"from_text",text_selector:'p[id^="title"] span.a-truncate-full',children:[{selector:'div[class*="imageWrapper"] a',clickable:!0,text_format:"Product Image",add_text:!0,name:"from_text"},{selector:'a[class*="cardContainingLink"]',clickable:!0,add_text:!0,name:"product_detail"},{selector:'div[data-testid="color-swatch"] ul',name:"colors",children:[{selector:"li",clickable:!0,add_text:!0,name:"from_text",text_js:e=>{var t;return(null===(t=e.querySelector("a"))||void 0===t?void 0:t.getAttribute("aria-label"))||""}}]}],generate_metadata:e=>{var t;return{name:"promotion_items",data:{asin:e.getAttribute("data-asin"),title:null===(t=e.querySelector('p[id^="title"] span.a-truncate-full'))||void 0===t?void 0:t.innerText}}}}]}]},{match:"/ap/signin",match_method:"url",terminate:function(){return!!arguments[0]},terminate_callback:function(){return arguments[0]},selector:"html"},{match:"/gp/buy/spc/handlers/display.html",match_method:"url",terminate:function(){return!!arguments[0]},terminate_callback:function(){return arguments[0]},selector:"html"},{match:"/gp/buyagain",match_method:"url",match_with_ref:!0,selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[n,i,{selector:"div.a-section:has(div.filter-container)",name:"filters",children:[{selector:"div.filter-container",text_selector:"span#filter-container-header",name:"from_text",children:[{selector:"span#filter-container-header",add_text:!0},{selector:"label",add_text:!0,clickable:!0,name:"from_text",generate_metadata:e=>{var t,r;const n=e.innerText,i=null===(t=e.closest("div.filter-container"))||void 0===t?void 0:t.querySelector("#filter-container-header"),s=null===(r=null==i?void 0:i.innerText)||void 0===r?void 0:r.replace(/[ ]/g,"_").toLowerCase().trim(),a=e.querySelector("input");return a&&a.checked?{name:"filters."+s,data:{title:(null==n?void 0:n.trim())||"",selected:!0}}:{name:"filters."+s,data:{title:(null==n?void 0:n.trim())||"",selected:!1}}}}]}]},{selector:"div.alm-grid-desktop-grid-container",name:"product_list",children:[{selector:'div[id^="gridCell"]',name:"from_text",text_selector:"div[id^='closedCard'] a[id^='title'] span.a-truncate-full",children:[{selector:"div[id^='gridElement']",name:"product_card",children:[{selector:"div[id^='closedCard']",name:"closed_product_card",children:[{selector:"div[id^='info']",name:"open_product_card",clickable:!0,text_format:"Open Product Card"},{selector:"form span.a-button-inner",name:"add_to_cart",clickable:!0,add_text:!0},{selector:'div[id^="seeBuyingOptionsWrapper"] a',name:"see_buying_options",clickable:!0,add_text:!0}]},{selector:'div[name="ax-qs"]',children:[{selector:"button[aria-label='Decrease quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div[role='spinbutton']",add_text:!0,text_format:"Current Quantity: {}"},{selector:"button[aria-label='Increase quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]},{selector:"div[id^='expandedImage']",name:"close_product_card",clickable:!0,add_text:!0,text_format:"Close Product Card"}]}],generate_metadata:e=>{var t;const r=e.querySelector("div[id^='closedCard'] div[id^='info']"),n=null==r?void 0:r.getAttribute("data-asin"),i=e.querySelector('div[id^="closedCard"] div[id^="info"] span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)'),s=null===(t=null==i?void 0:i.innerText)||void 0===t?void 0:t.replace(/[\n]/g,""),a=e.querySelector("div[id^='closedCard'] a[id^='title'] span.a-truncate-full"),o=null==a?void 0:a.innerText,l=e.querySelector('div[id^="closedCard"] div[id^="info"] #udmDeliveryMessageComponent');return{name:"active_items_closed",data:{title:o,asin:n,price:s,delivery:null==l?void 0:l.innerText.replace(/[\n]/g," ")}}}},{selector:'div[id^="featured"]',name:"from_text",text_selector:"a[id^='title'] span.a-truncate-full",children:[{selector:'div[id^="detailContentWrapper"] div[id^="detailContent"]',name:"detailed_content",children:[{selector:"div:has(> img)",clickable:!0,name:"product_image",add_text:!0,text_format:"Product Image"},{selector:"a[id^='title']",clickable:!0,name:"product_title",add_text:!0,text_selector:"span.a-truncate-full"},{selector:"div[class*='multiOfferPillContainer'] a",clickable:!0,name:"from_text",add_text:!0},{selector:"div[data-buyingoptiontype='NEW'], div[class*='asinDetailInfoColumns']:has(input[name='submit.addToCart']",name:"one_time_purchase",children:[{selector:'span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)',add_text:!0,name:"price"},{selector:"#udmDeliveryMessageComponent",add_text:!0,name:"delivery"},{selector:'div[class*="actionButtonsRow"], div[class*="asinDetailActionsRow"]',name:"buttons",children:[{selector:'input[name="submit.addToCart"]',add_text:!0,name:"add_to_cart",clickable:!0},{selector:'input[id^="buy-now"]',add_text:!0,name:"buy_now",clickable:!0},{selector:'div[id^="feedbackButtonSection"] input',add_text:!0,name:"remove_item",clickable:!0},{selector:'div[name="ax-qs"]',children:[{selector:"button[aria-label='Decrease quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div[role='spinbutton']",add_text:!0,text_format:"Current Quantity: {}"},{selector:"button[aria-label='Increase quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]}]}],generate_metadata:e=>{var t,r,n,i,s;const a=e.closest("div[data-asin]"),o=null==a?void 0:a.getAttribute("data-asin"),l=e.querySelector('span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)'),c=null===(t=null==l?void 0:l.innerText)||void 0===t?void 0:t.replace(/[\n]/g,""),u=null===(n=null===(r=e.parentElement)||void 0===r?void 0:r.parentElement)||void 0===n?void 0:n.querySelector("a[id^='title'] span.a-truncate-full"),d=null==u?void 0:u.innerText,h=null===(s=null===(i=e.parentElement)||void 0===i?void 0:i.parentElement)||void 0===s?void 0:s.querySelector("a[id^='title']"),p=null==h?void 0:h.getAttribute("href"),f=e.querySelector("#udmDeliveryMessageComponent"),m=null==f?void 0:f.innerText.replace(/[\n]/g," "),g=e.querySelector('div[name="ax-qs"] div[role="spinbutton"]');return{name:"active_items_opened_purchase",data:{title:d,asin:o,price:c,url:p,delivery:m,quantity:(null==g?void 0:g.innerText)||"1"}}}},{selector:"div[data-buyingoptiontype='SNS'], div[class*='snsUpsellBlockContainer']",name:"subscribe_and_save",children:[{selector:'span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)',add_text:!0,name:"price"},{selector:"#udmDeliveryMessageComponent",add_text:!0,name:"delivery"},{selector:'div[class*="actionButtonsRow"]',name:"buttons",children:[{selector:'input[name="submit.addToCart"]',add_text:!0,name:"add_to_cart",clickable:!0},{selector:'span[class*="snsButton"] input',add_text:!0,name:"subscribe_and_save",clickable:!0},{selector:'div[id^="feedbackButtonSection"] input',add_text:!0,name:"remove_item",clickable:!0}]},{selector:'span[class*="subscriptionButton"] input',add_text:!0,name:"set_up_subscription",clickable:!0}],generate_metadata:e=>{var t,r,n,i,s;const a=e.closest("div[data-asin]"),o=null==a?void 0:a.getAttribute("data-asin"),l=e.querySelector('span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)'),c=null===(t=null==l?void 0:l.innerText)||void 0===t?void 0:t.replace(/[\n]/g,""),u=null===(n=null===(r=e.parentElement)||void 0===r?void 0:r.parentElement)||void 0===n?void 0:n.querySelector("a[id^='title'] span.a-truncate-full"),d=null==u?void 0:u.innerText,h=null===(s=null===(i=e.parentElement)||void 0===i?void 0:i.parentElement)||void 0===s?void 0:s.querySelector("a[id^='title']"),p=null==h?void 0:h.getAttribute("href"),f=e.querySelector("#udmDeliveryMessageComponent");return{name:"active_items_opened_sns",data:{title:d,asin:o,price:c,url:p,delivery:null==f?void 0:f.innerText.replace(/[\n]/g," ")}}}}]},{selector:"div[id^='detail-view-similar-items']",name:"similar_items",children:[{selector:"li.a-carousel-card",name:"from_text",text_selector:"a[id^='title'] span.a-truncate-full",children:[{selector:"div.a-image-container:has(> img)",clickable:!0,name:"product_image",add_text:!0,text_format:"Product Image"},{selector:"a[id^='title']",clickable:!0,name:"product_title",add_text:!0,text_selector:"span.a-truncate-full"},{selector:'span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)',add_text:!0,name:"price"},{selector:"#udmDeliveryMessageComponent",add_text:!0,name:"delivery"},{selector:'input[name="submit.addToCart"], input[name^="atfcShim"], button[aria-label="Add to Cart. Click to change quantity"]',add_text:!0,name:"add_to_cart",clickable:!0},{selector:'div[id^="seeBuyingOptionsWrapper"] a',name:"see_buying_options",clickable:!0,add_text:!0},{selector:'div[name="ax-qs"]',children:[{selector:"button[aria-label='Decrease quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div[role='spinbutton']",add_text:!0,text_format:"Current Quantity: {}"},{selector:"button[aria-label='Increase quantity by one']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]},{selector:"div.qs-widget-container",children:[{selector:"input[aria-label='Remove']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"decrease_quantity_by_one"},{selector:"div.qs-widget-dropdown-flex-wrapper button",add_text:!0,clickable:!0,name:"drop_down_list",text_format:"Current Quantity: {}"},{selector:'div.qs-widget-dropdown-wrapper span[data-action="qs-widget-dropdown-decl"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text",text_format:"Drop Down Option {}"},{selector:'div[id^="qs-widget-quantity-container-atfc"] span[data-action="qs-widget-quantity-changelink-decl"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text"},{selector:'div[id^="qs-widget-summary-container-atfc"] span[id^="qs-widget-summary-atc-atfc"]',add_text:!0,clickable:!0,use_root:!0,name:"from_text"},{selector:"input[aria-label='Add']",add_text:!0,text_js:function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):""},clickable:!0,name:"increase_quantity_by_one"}]}],generate_metadata:e=>{var t,r,n;const i=null===(t=e.closest('div[id^="featured"]'))||void 0===t?void 0:t.querySelector('div[id^="detailContentWrapper"] a[id^="title"] span.a-truncate-full'),s=null===(r=null==i?void 0:i.innerText)||void 0===r?void 0:r.toLowerCase().replace(/[^\w]+/g,"_"),a=e.querySelector('div[class*="delightFaceout"]'),o=null==a?void 0:a.getAttribute("data-asin"),l=e.querySelector('span[class*="priceBlockWithMarginRight"] span.a-price > span:not(.a-offscreen)'),c=null===(n=null==l?void 0:l.innerText)||void 0===n?void 0:n.replace(/[\n]/g,""),u=e.querySelector("a[id^='title'] span.a-truncate-full"),d=null==u?void 0:u.innerText,h=e.querySelector("a[id^='title']"),p=null==h?void 0:h.getAttribute("href"),f=e.querySelector("#udmDeliveryMessageComponent");return{name:s+".similar_items",data:{title:d,asin:o,price:c,url:p,delivery:null==f?void 0:f.innerText.replace(/[\n]/g," ")}}}}]}]}]},{selector:"#snsUpsellModal",name:"subscribe_and_save_popover",children:[{selector:'div[class*="modalHeader"]',children:[{selector:'span[class*="modalHeaderText"]',add_text:!0},{selector:'span[data-action="a-popover-close"]',add_text:!0,clickable:!0,text_format:"Close",name:"from_text"}]},{selector:'div[class*="modalContent"]',direct_child:!0,children:[{selector:'div:not([class*="buttonContainer"]):not(:has(select))',add_text:!0},{selector:"select",name:"drop_down_list"},{selector:'div[class*="buttonContainer"]',children:[{selector:'div[class*="cancelButtonContainer"] input',add_text:!0,text_format:"Cancel",clickable:!0,name:"from_text"},{selector:'div[class*="subscriptionButtonContainer"] input[name="submit.addToCart"]',add_text:!0,text_format:"Add Subscription to Cart",clickable:!0,name:"from_text"}]}]}],generate_metadata:e=>{var t,r;const n=e.querySelector('div[class*="modalContent"]');return{name:"popover_item",data:{asin:null===(r=null===(t=null==n?void 0:n.id)||void 0===t?void 0:t.split("-")[1])||void 0===r?void 0:r.trim()}}}}]}]}]},7588:(e,t,r)=>{"use strict";r.d(t,{q:()=>i});var n=function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function a(e){try{l(n.next(e))}catch(e){s(e)}}function o(e){try{l(n.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,o)}l((n=n.apply(e,t||[])).next())}))};function i(e,t,r="",s=0,a=globalThis.document,o=globalThis.window){var l;let c=t.tag_name||e.tagName.toLowerCase();c.endsWith("_")&&(c=c.slice(0,-1));const u=a.createElement(c);let d="";if(t.text_selector){const r=e.querySelector(t.text_selector);r&&(d=r.innerText||r.textContent||"")}else t.text_js?d=t.text_js(e):t.add_text&&(d=e.innerText||e.textContent||"");null==d&&(console.log(e),console.log(d)),d=d.replace(/\s+/g," ").trim(),t.text_format?d=t.text_format.replace("{}",d):t.text_format&&(d=t.text_format),d&&t.add_text&&(u.textContent=d);let h="";if(t.name&&("from_text"===t.name?(h=r?r+".":"",d?h+=d.toLowerCase().replace(/[^\w]+/g,"_").replace(/^_+|_+$/g,""):h=""):"from_nth_child"===t.name?(h=r?r+".":"",h+=s.toString()):(h=r?r+".":"",h+=t.name),u.setAttribute("name",h),r=h),t.generate_metadata){const r=t.generate_metadata(e),n=JSON.stringify(r.data),i=r.name;e.setAttribute("data-element-meta-name",i),e.setAttribute("data-element-meta-data",n)}if(t.clickable){if(!t.name)throw new Error("clickable element must have a name");let r;r=t.click_selector?e.querySelector(t.click_selector):e,r&&r.setAttribute("data-clickable-id",h),o.clickable_recipes||(o.clickable_recipes={}),o.clickable_recipes[h]=t}if(t.fetch_url&&e.setAttribute("data-fetch-url",t.fetch_url),"input"===c){const r=e.getAttribute("type");["text","number"].includes(r)?(u.setAttribute("value",e.value),e.setAttribute("data-input-id",h)):"checkbox"===r?u.setAttribute("checked",e.checked.toString()):"radio"===r&&(u.setAttribute("checked",e.checked.toString()),e.setAttribute("data-clickable-id",h)),o.input_recipes||(o.input_recipes={}),o.input_recipes[h]=t}if("select"===c){e.setAttribute("data-select-id",h);const t=e.getAttribute("id"),r=(e.getAttribute("name"),null===(l=e.parentElement)||void 0===l?void 0:l.querySelector("span.a-button-dropdown span.a-button-text")),i=a.createElement("span");i.textContent=r.textContent;const s=h+".open_drop_down_list";i.setAttribute("name",s),r.setAttribute("data-clickable-id",s),u.appendChild(i),a.querySelectorAll('a[id^="'+t+'"]').forEach((e=>n(this,void 0,void 0,(function*(){const t=e.textContent.trim()||e.querySelector("input").value,r=h+"."+t,n=a.createElement("a");n.textContent=e.textContent,n.setAttribute("value",t),n.setAttribute("name",r),n.setAttribute("selected",e.getAttribute("aria-selected")),e.setAttribute("data-clickable-id",r),u.appendChild(n)}))))}if(["alt","title","type","value","role","aria-label","aria-hidden","aria-selected"].forEach((t=>{const r=e.getAttribute(t);r&&u.setAttribute(t,r)})),t.keep_attr)for(const r of t.keep_attr){const t=e.getAttribute(r);t&&u.setAttribute(r,t)}if(t.class&&u.setAttribute("class",t.class),t.id&&u.setAttribute("id",t.id),t.override_attr)for(const r in t.override_attr)u.setAttribute(r,t.override_attr[r](e));if(t.children&&t.children.length>0)for(const n of t.children){const t=n.direct_child?`:scope > ${n.selector}`:n.selector;let s;s=n.use_root?a.querySelectorAll(t):e.querySelectorAll(t),s.forEach(((e,t)=>{const s=i(e,n,r,t,a,o);if(u.appendChild(s),n.insert_split_marker&&t%(n.insert_split_marker_every||1)==0){const e=a.createElement("split-marker");u.appendChild(e)}if(n.insert_split_marker){const e=a.createElement("split-marker");u.appendChild(e)}}))}if(t.empty_message&&0===u.children.length){const e=a.createTextNode(t.empty_message);u.appendChild(e)}return u}},7137:(e,t,r)=>{"use strict";r.d(t,{Ez:()=>o,Ip:()=>c,c5:()=>u,ii:()=>d,sZ:()=>l});var n=r(1129),i=r(4828),s=r(7588),a=function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function a(e){try{l(n.next(e))}catch(e){s(e)}}function o(e){try{l(n.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,o)}l((n=n.apply(e,t||[])).next())}))};function o(e){return a(this,void 0,void 0,(function*(){console.log("update_icon",e),(yield c(e))?(console.log("inactive icon"),chrome.action.setIcon({path:"../inactive_icon.png"})):(console.log("active icon"),chrome.action.setIcon({path:"../icon.png"}))}))}function l(e=null,t=globalThis.document){let r;r=e?e.querySelectorAll("[data-element-meta-name]"):t.querySelectorAll("[data-element-meta-name]");const n={};return r.forEach((e=>{const t=e.getAttribute("data-element-meta-name"),r=e.getAttribute("data-element-meta-data");n[t]||(n[t]=[]),n[t].push(JSON.parse(r))})),n}function c(e,t=!1){return a(this,void 0,void 0,(function*(){if(!t)if(chrome.storage){if(!(yield chrome.storage.local.get("userId")).userId)return console.log("no user id"),!0}else if(!(yield new Promise((e=>{const t=r=>{"GET_USER_ID_RESPONSE"===r.data.type&&(window.removeEventListener("message",t),e(r.data.userId))};window.addEventListener("message",t),window.postMessage({type:"GET_USER_ID"},"*")}))))return!0;return!e||!n.Wd.some((t=>e.includes(t)))||n.x2.some((t=>e.includes(t)))}))}function u(e=null,t=null,r=globalThis.document,n=globalThis.window){console.log("start process recipe");try{const a=function(e=null,t=globalThis.document,r=globalThis.window){var n,s;let a;a=e?new URL(e):new URL(r.location.href);let o=a.pathname;o="/"!==o?o.replace(/\/+/g,"/").replace(/\/$/,""):o;for(const e of i._e){const r=e.match_method||"text";if("text"===r)try{const r=t.querySelector(e.match);if(r&&(!e.match_text||null!==(s=null===(n=r.textContent)||void 0===n?void 0:n.toLowerCase().includes(e.match_text.toLowerCase()))&&void 0!==s&&s))return console.log("matched with recipe ",e.match),e}catch(e){console.error("Error checking text match:",e)}else if("url"===r){const t="/"==e.match?e.match:e.match.replace(/\*/g,"").replace(/\/+/g,"/").replace(/\/$/,""),r="^"+e.match.replace(/\*/g,"[^/]*")+"$",n="^"+e.match.replace(/\*/g,"[^/]+")+"(/ref=.+)$";if(t===o)return console.log("matched with recipe ",e.match),e;if(e.match_with_ref&&(o.startsWith(t+"/ref=")||o.startsWith(t+"ref=")))return console.log("matched with recipe ",e.match),e;if(e.match_with_wildcard){const t=new RegExp(r),i=new RegExp(n);if(t.test(o))return console.log("matched with recipe ",e.match),e;if(e.match_with_ref&&i.test(o))return console.log("matched with recipe ",e.match),e}}}throw new Error(`No matching recipe found for path: ${o}`)}(t,r,n);let o;if(o=e||r.querySelector(a.selector),o){return(0,s.q)(o,a,"",0,r,n).outerHTML}}catch(e){console.error("Error processing recipe:",e)}}function d(e,t){var r,n,i,s,a,o,l,c,u,d;let h="",p="Enter your reason here...";switch(e){case"click_a":case"click_b":case"click_c":"buybox.delivery.subscribe_save_.purchase_form.set_up_now"===t["data-semantic-id"]||"Set Up Now"===t.target.innerText?(h='You <span class="highlight-question">clicked</span> on the set up now button. What makes you choose to subscribe to this product?',p="I choose to subscribe because..."):"buybox.delivery.one_time_purchase_.purchase_form.buy_now"===t["data-semantic-id"]||"buybox.delivery.purchase_form.buy"===t["data-semantic-id"]||"buy-now-button"===t.target.id?(h='You <span class="highlight-question">clicked</span> on the buy now button. What do you like about this particular product?',p="I am buying this product because..."):(null===(r=t["data-semantic-id"])||void 0===r?void 0:r.endsWith("add_to_cart"))||"add-to-cart-button"===t.target.id||"submit.addToCart"===t.target.name||"Add to Cart"===t.target.innerText?(h='You <span class="highlight-question">clicked</span> on the add to cart button. What makes you decide to add this item to your cart?',p="I add this item to my cart because..."):"nav_bar.search_button"===t["data-semantic-id"]?(h='You <span class="highlight-question">clicked</span> on the search button. What are you searching for?',p="I want to find ..."):(null===(n=t["data-semantic-id"])||void 0===n?void 0:n.startsWith("refinements."))||(null===(i=t["data-semantic-id"])||void 0===i?void 0:i.startsWith("filters."))?(h='You <span class="highlight-question">clicked</span> on this filter. What are you hoping to find with this filter?',p="I want to find ..."):(null===(s=t["data-semantic-id"])||void 0===s?void 0:s.startsWith("product_options."))?(h='You <span class="highlight-question">clicked</span> on this product option. What do you like about this product option?',p="I like this product option because..."):(null===(a=t["data-semantic-id"])||void 0===a?void 0:a.endsWith("check_out"))?(h='You <span class="highlight-question">clicked</span> checkout button. What makes you choose to checkout?',p="I choose to checkout because..."):(null===(o=t["data-semantic-id"])||void 0===o?void 0:o.startsWith("search_results."))||(null===(l=t["data-semantic-id"])||void 0===l?void 0:l.startsWith("product_list."))||(null===(c=t["data-semantic-id"])||void 0===c?void 0:c.startsWith("active_item_list."))&&(null===(u=t["data-semantic-id"])||void 0===u?void 0:u.endsWith(".product_detail"))||(null===(d=t.target.className)||void 0===d?void 0:d.includes("sc-product-link"))?(h='You <span class="highlight-question">clicked</span> on this product. What caught your attention compared to the other options you saw?',p="I like this product because..."):(h='You <span class="highlight-question">clicked</span> on this element. Could you share what you were trying to do or find?',p="Enter your reason here...");break;case"scroll":h='You <span class="highlight-question">scrolled</span> on this page. What information are you looking for?',p="I want to find ...";break;case"input":h='You <span class="highlight-question">typed</span> in this input field. What are you searching for?',p="I want to find ...";break;case"navigation":"back"===t.navigationType?(h='Why did you decide to <span class="highlight-question">go back</span> to the previous page?',p="I'm back because..."):"forward"===t.navigationType&&(h='Why did you decide to <span class="highlight-question">return</span> to this page ?',p="I want to find ..."),h=`What is the reason for this <span class="highlight-question">${t.navigationType} navigation</span>?`,p="Enter your reason here...";break;case"tabActivate":h='Why did you <span class="highlight-question">switch to this tab</span>?',p="I switched to this tab because...";break;default:h=`What is the reason for the ${e} action?`,p="Enter your reason here..."}return{question:h,placeholder:p}}},8044:e=>{"use strict";e.exports=require("canvas")},1860:e=>{"use strict";e.exports=require("perf_hooks")},7173:e=>{class t{constructor(e,t){this.width=e,this.height=t}getContext(){return null}toDataURL(){return""}}e.exports={createCanvas:(e,r)=>new t(e,r)}},5873:(e,t,r)=>{try{e.exports=r(8044)}catch(t){e.exports=r(7173)}},273:(e,t,r)=>{try{const{performance:e}=r(1860);t.F=e}catch(e){t.F={now:()=>+new Date}}},1083:(e,t,r)=>{"use strict";r.d(t,{A:()=>yt});var n={};function i(e,t){return function(){return e.apply(t,arguments)}}r.r(n),r.d(n,{hasBrowserEnv:()=>pe,hasStandardBrowserEnv:()=>me,hasStandardBrowserWebWorkerEnv:()=>ge,navigator:()=>fe,origin:()=>be});const{toString:s}=Object.prototype,{getPrototypeOf:a}=Object,o=(l=Object.create(null),e=>{const t=s.call(e);return l[t]||(l[t]=t.slice(8,-1).toLowerCase())});var l;const c=e=>(e=e.toLowerCase(),t=>o(t)===e),u=e=>t=>typeof t===e,{isArray:d}=Array,h=u("undefined"),p=c("ArrayBuffer"),f=u("string"),m=u("function"),g=u("number"),b=e=>null!==e&&"object"==typeof e,v=e=>{if("object"!==o(e))return!1;const t=a(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},y=c("Date"),_=c("File"),x=c("Blob"),w=c("FileList"),S=c("URLSearchParams"),[k,E,A,C]=["ReadableStream","Request","Response","Headers"].map(c);function T(e,t,{allOwnKeys:r=!1}={}){if(null==e)return;let n,i;if("object"!=typeof e&&(e=[e]),d(e))for(n=0,i=e.length;n<i;n++)t.call(null,e[n],n,e);else{const i=r?Object.getOwnPropertyNames(e):Object.keys(e),s=i.length;let a;for(n=0;n<s;n++)a=i[n],t.call(null,e[a],a,e)}}function R(e,t){t=t.toLowerCase();const r=Object.keys(e);let n,i=r.length;for(;i-- >0;)if(n=r[i],t===n.toLowerCase())return n;return null}const N="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,q=e=>!h(e)&&e!==N,I=(D="undefined"!=typeof Uint8Array&&a(Uint8Array),e=>D&&e instanceof D);var D;const L=c("HTMLFormElement"),O=(({hasOwnProperty:e})=>(t,r)=>e.call(t,r))(Object.prototype),P=c("RegExp"),B=(e,t)=>{const r=Object.getOwnPropertyDescriptors(e),n={};T(r,((r,i)=>{let s;!1!==(s=t(r,i,e))&&(n[i]=s||r)})),Object.defineProperties(e,n)},M="abcdefghijklmnopqrstuvwxyz",U="0123456789",z={DIGIT:U,ALPHA:M,ALPHA_DIGIT:M+M.toUpperCase()+U},F=c("AsyncFunction"),j=(H="function"==typeof setImmediate,V=m(N.postMessage),H?setImmediate:V?(W=`axios@${Math.random()}`,G=[],N.addEventListener("message",(({source:e,data:t})=>{e===N&&t===W&&G.length&&G.shift()()}),!1),e=>{G.push(e),N.postMessage(W,"*")}):e=>setTimeout(e));var H,V,W,G;const $="undefined"!=typeof queueMicrotask?queueMicrotask.bind(N):"undefined"!=typeof process&&process.nextTick||j,Z={isArray:d,isArrayBuffer:p,isBuffer:function(e){return null!==e&&!h(e)&&null!==e.constructor&&!h(e.constructor)&&m(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||m(e.append)&&("formdata"===(t=o(e))||"object"===t&&m(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&p(e.buffer),t},isString:f,isNumber:g,isBoolean:e=>!0===e||!1===e,isObject:b,isPlainObject:v,isReadableStream:k,isRequest:E,isResponse:A,isHeaders:C,isUndefined:h,isDate:y,isFile:_,isBlob:x,isRegExp:P,isFunction:m,isStream:e=>b(e)&&m(e.pipe),isURLSearchParams:S,isTypedArray:I,isFileList:w,forEach:T,merge:function e(){const{caseless:t}=q(this)&&this||{},r={},n=(n,i)=>{const s=t&&R(r,i)||i;v(r[s])&&v(n)?r[s]=e(r[s],n):v(n)?r[s]=e({},n):d(n)?r[s]=n.slice():r[s]=n};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&T(arguments[e],n);return r},extend:(e,t,r,{allOwnKeys:n}={})=>(T(t,((t,n)=>{r&&m(t)?e[n]=i(t,r):e[n]=t}),{allOwnKeys:n}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,r,n)=>{e.prototype=Object.create(t.prototype,n),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),r&&Object.assign(e.prototype,r)},toFlatObject:(e,t,r,n)=>{let i,s,o;const l={};if(t=t||{},null==e)return t;do{for(i=Object.getOwnPropertyNames(e),s=i.length;s-- >0;)o=i[s],n&&!n(o,e,t)||l[o]||(t[o]=e[o],l[o]=!0);e=!1!==r&&a(e)}while(e&&(!r||r(e,t))&&e!==Object.prototype);return t},kindOf:o,kindOfTest:c,endsWith:(e,t,r)=>{e=String(e),(void 0===r||r>e.length)&&(r=e.length),r-=t.length;const n=e.indexOf(t,r);return-1!==n&&n===r},toArray:e=>{if(!e)return null;if(d(e))return e;let t=e.length;if(!g(t))return null;const r=new Array(t);for(;t-- >0;)r[t]=e[t];return r},forEachEntry:(e,t)=>{const r=(e&&e[Symbol.iterator]).call(e);let n;for(;(n=r.next())&&!n.done;){const r=n.value;t.call(e,r[0],r[1])}},matchAll:(e,t)=>{let r;const n=[];for(;null!==(r=e.exec(t));)n.push(r);return n},isHTMLForm:L,hasOwnProperty:O,hasOwnProp:O,reduceDescriptors:B,freezeMethods:e=>{B(e,((t,r)=>{if(m(e)&&-1!==["arguments","caller","callee"].indexOf(r))return!1;const n=e[r];m(n)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+r+"'")}))}))},toObjectSet:(e,t)=>{const r={},n=e=>{e.forEach((e=>{r[e]=!0}))};return d(e)?n(e):n(String(e).split(t)),r},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,r){return t.toUpperCase()+r})),noop:()=>{},toFiniteNumber:(e,t)=>null!=e&&Number.isFinite(e=+e)?e:t,findKey:R,global:N,isContextDefined:q,ALPHABET:z,generateString:(e=16,t=z.ALPHA_DIGIT)=>{let r="";const{length:n}=t;for(;e--;)r+=t[Math.random()*n|0];return r},isSpecCompliantForm:function(e){return!!(e&&m(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),r=(e,n)=>{if(b(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[n]=e;const i=d(e)?[]:{};return T(e,((e,t)=>{const s=r(e,n+1);!h(s)&&(i[t]=s)})),t[n]=void 0,i}}return e};return r(e,0)},isAsyncFn:F,isThenable:e=>e&&(b(e)||m(e))&&m(e.then)&&m(e.catch),setImmediate:j,asap:$};function J(e,t,r,n,i){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),r&&(this.config=r),n&&(this.request=n),i&&(this.response=i,this.status=i.status?i.status:null)}Z.inherits(J,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:Z.toJSONObject(this.config),code:this.code,status:this.status}}});const K=J.prototype,Y={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{Y[e]={value:e}})),Object.defineProperties(J,Y),Object.defineProperty(K,"isAxiosError",{value:!0}),J.from=(e,t,r,n,i,s)=>{const a=Object.create(K);return Z.toFlatObject(e,a,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),J.call(a,e.message,t,r,n,i),a.cause=e,a.name=e.name,s&&Object.assign(a,s),a};const X=J;function Q(e){return Z.isPlainObject(e)||Z.isArray(e)}function ee(e){return Z.endsWith(e,"[]")?e.slice(0,-2):e}function te(e,t,r){return e?e.concat(t).map((function(e,t){return e=ee(e),!r&&t?"["+e+"]":e})).join(r?".":""):t}const re=Z.toFlatObject(Z,{},null,(function(e){return/^is[A-Z]/.test(e)})),ne=function(e,t,r){if(!Z.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const n=(r=Z.toFlatObject(r,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!Z.isUndefined(t[e])}))).metaTokens,i=r.visitor||c,s=r.dots,a=r.indexes,o=(r.Blob||"undefined"!=typeof Blob&&Blob)&&Z.isSpecCompliantForm(t);if(!Z.isFunction(i))throw new TypeError("visitor must be a function");function l(e){if(null===e)return"";if(Z.isDate(e))return e.toISOString();if(!o&&Z.isBlob(e))throw new X("Blob is not supported. Use a Buffer instead.");return Z.isArrayBuffer(e)||Z.isTypedArray(e)?o&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function c(e,r,i){let o=e;if(e&&!i&&"object"==typeof e)if(Z.endsWith(r,"{}"))r=n?r:r.slice(0,-2),e=JSON.stringify(e);else if(Z.isArray(e)&&function(e){return Z.isArray(e)&&!e.some(Q)}(e)||(Z.isFileList(e)||Z.endsWith(r,"[]"))&&(o=Z.toArray(e)))return r=ee(r),o.forEach((function(e,n){!Z.isUndefined(e)&&null!==e&&t.append(!0===a?te([r],n,s):null===a?r:r+"[]",l(e))})),!1;return!!Q(e)||(t.append(te(i,r,s),l(e)),!1)}const u=[],d=Object.assign(re,{defaultVisitor:c,convertValue:l,isVisitable:Q});if(!Z.isObject(e))throw new TypeError("data must be an object");return function e(r,n){if(!Z.isUndefined(r)){if(-1!==u.indexOf(r))throw Error("Circular reference detected in "+n.join("."));u.push(r),Z.forEach(r,(function(r,s){!0===(!(Z.isUndefined(r)||null===r)&&i.call(t,r,Z.isString(s)?s.trim():s,n,d))&&e(r,n?n.concat(s):[s])})),u.pop()}}(e),t};function ie(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function se(e,t){this._pairs=[],e&&ne(e,this,t)}const ae=se.prototype;ae.append=function(e,t){this._pairs.push([e,t])},ae.toString=function(e){const t=e?function(t){return e.call(this,t,ie)}:ie;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const oe=se;function le(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function ce(e,t,r){if(!t)return e;const n=r&&r.encode||le;Z.isFunction(r)&&(r={serialize:r});const i=r&&r.serialize;let s;if(s=i?i(t,r):Z.isURLSearchParams(t)?t.toString():new oe(t,r).toString(n),s){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+s}return e}const ue=class{constructor(){this.handlers=[]}use(e,t,r){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!r&&r.synchronous,runWhen:r?r.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){Z.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},de={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},he={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:oe,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},pe="undefined"!=typeof window&&"undefined"!=typeof document,fe="object"==typeof navigator&&navigator||void 0,me=pe&&(!fe||["ReactNative","NativeScript","NS"].indexOf(fe.product)<0),ge="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,be=pe&&window.location.href||"http://localhost",ve={...n,...he},ye=function(e){function t(e,r,n,i){let s=e[i++];if("__proto__"===s)return!0;const a=Number.isFinite(+s),o=i>=e.length;return s=!s&&Z.isArray(n)?n.length:s,o?(Z.hasOwnProp(n,s)?n[s]=[n[s],r]:n[s]=r,!a):(n[s]&&Z.isObject(n[s])||(n[s]=[]),t(e,r,n[s],i)&&Z.isArray(n[s])&&(n[s]=function(e){const t={},r=Object.keys(e);let n;const i=r.length;let s;for(n=0;n<i;n++)s=r[n],t[s]=e[s];return t}(n[s])),!a)}if(Z.isFormData(e)&&Z.isFunction(e.entries)){const r={};return Z.forEachEntry(e,((e,n)=>{t(function(e){return Z.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),n,r,0)})),r}return null},_e={transitional:de,adapter:["xhr","http","fetch"],transformRequest:[function(e,t){const r=t.getContentType()||"",n=r.indexOf("application/json")>-1,i=Z.isObject(e);if(i&&Z.isHTMLForm(e)&&(e=new FormData(e)),Z.isFormData(e))return n?JSON.stringify(ye(e)):e;if(Z.isArrayBuffer(e)||Z.isBuffer(e)||Z.isStream(e)||Z.isFile(e)||Z.isBlob(e)||Z.isReadableStream(e))return e;if(Z.isArrayBufferView(e))return e.buffer;if(Z.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let s;if(i){if(r.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return ne(e,new ve.classes.URLSearchParams,Object.assign({visitor:function(e,t,r,n){return ve.isNode&&Z.isBuffer(e)?(this.append(t,e.toString("base64")),!1):n.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((s=Z.isFileList(e))||r.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return ne(s?{"files[]":e}:e,t&&new t,this.formSerializer)}}return i||n?(t.setContentType("application/json",!1),function(e){if(Z.isString(e))try{return(0,JSON.parse)(e),Z.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||_e.transitional,r=t&&t.forcedJSONParsing,n="json"===this.responseType;if(Z.isResponse(e)||Z.isReadableStream(e))return e;if(e&&Z.isString(e)&&(r&&!this.responseType||n)){const r=!(t&&t.silentJSONParsing)&&n;try{return JSON.parse(e)}catch(e){if(r){if("SyntaxError"===e.name)throw X.from(e,X.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:ve.classes.FormData,Blob:ve.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};Z.forEach(["delete","get","head","post","put","patch"],(e=>{_e.headers[e]={}}));const xe=_e,we=Z.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Se=Symbol("internals");function ke(e){return e&&String(e).trim().toLowerCase()}function Ee(e){return!1===e||null==e?e:Z.isArray(e)?e.map(Ee):String(e)}function Ae(e,t,r,n,i){return Z.isFunction(n)?n.call(this,t,r):(i&&(t=r),Z.isString(t)?Z.isString(n)?-1!==t.indexOf(n):Z.isRegExp(n)?n.test(t):void 0:void 0)}class Ce{constructor(e){e&&this.set(e)}set(e,t,r){const n=this;function i(e,t,r){const i=ke(t);if(!i)throw new Error("header name must be a non-empty string");const s=Z.findKey(n,i);(!s||void 0===n[s]||!0===r||void 0===r&&!1!==n[s])&&(n[s||t]=Ee(e))}const s=(e,t)=>Z.forEach(e,((e,r)=>i(e,r,t)));if(Z.isPlainObject(e)||e instanceof this.constructor)s(e,t);else if(Z.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim()))s((e=>{const t={};let r,n,i;return e&&e.split("\n").forEach((function(e){i=e.indexOf(":"),r=e.substring(0,i).trim().toLowerCase(),n=e.substring(i+1).trim(),!r||t[r]&&we[r]||("set-cookie"===r?t[r]?t[r].push(n):t[r]=[n]:t[r]=t[r]?t[r]+", "+n:n)})),t})(e),t);else if(Z.isHeaders(e))for(const[t,n]of e.entries())i(n,t,r);else null!=e&&i(t,e,r);return this}get(e,t){if(e=ke(e)){const r=Z.findKey(this,e);if(r){const e=this[r];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),r=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let n;for(;n=r.exec(e);)t[n[1]]=n[2];return t}(e);if(Z.isFunction(t))return t.call(this,e,r);if(Z.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=ke(e)){const r=Z.findKey(this,e);return!(!r||void 0===this[r]||t&&!Ae(0,this[r],r,t))}return!1}delete(e,t){const r=this;let n=!1;function i(e){if(e=ke(e)){const i=Z.findKey(r,e);!i||t&&!Ae(0,r[i],i,t)||(delete r[i],n=!0)}}return Z.isArray(e)?e.forEach(i):i(e),n}clear(e){const t=Object.keys(this);let r=t.length,n=!1;for(;r--;){const i=t[r];e&&!Ae(0,this[i],i,e,!0)||(delete this[i],n=!0)}return n}normalize(e){const t=this,r={};return Z.forEach(this,((n,i)=>{const s=Z.findKey(r,i);if(s)return t[s]=Ee(n),void delete t[i];const a=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,r)=>t.toUpperCase()+r))}(i):String(i).trim();a!==i&&delete t[i],t[a]=Ee(n),r[a]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return Z.forEach(this,((r,n)=>{null!=r&&!1!==r&&(t[n]=e&&Z.isArray(r)?r.join(", "):r)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const r=new this(e);return t.forEach((e=>r.set(e))),r}static accessor(e){const t=(this[Se]=this[Se]={accessors:{}}).accessors,r=this.prototype;function n(e){const n=ke(e);t[n]||(function(e,t){const r=Z.toCamelCase(" "+t);["get","set","has"].forEach((n=>{Object.defineProperty(e,n+r,{value:function(e,r,i){return this[n].call(this,t,e,r,i)},configurable:!0})}))}(r,e),t[n]=!0)}return Z.isArray(e)?e.forEach(n):n(e),this}}Ce.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),Z.reduceDescriptors(Ce.prototype,(({value:e},t)=>{let r=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[r]=e}}})),Z.freezeMethods(Ce);const Te=Ce;function Re(e,t){const r=this||xe,n=t||r,i=Te.from(n.headers);let s=n.data;return Z.forEach(e,(function(e){s=e.call(r,s,i.normalize(),t?t.status:void 0)})),i.normalize(),s}function Ne(e){return!(!e||!e.__CANCEL__)}function qe(e,t,r){X.call(this,null==e?"canceled":e,X.ERR_CANCELED,t,r),this.name="CanceledError"}Z.inherits(qe,X,{__CANCEL__:!0});const Ie=qe;function De(e,t,r){const n=r.config.validateStatus;r.status&&n&&!n(r.status)?t(new X("Request failed with status code "+r.status,[X.ERR_BAD_REQUEST,X.ERR_BAD_RESPONSE][Math.floor(r.status/100)-4],r.config,r.request,r)):e(r)}const Le=(e,t,r=3)=>{let n=0;const i=function(e,t){e=e||10;const r=new Array(e),n=new Array(e);let i,s=0,a=0;return t=void 0!==t?t:1e3,function(o){const l=Date.now(),c=n[a];i||(i=l),r[s]=o,n[s]=l;let u=a,d=0;for(;u!==s;)d+=r[u++],u%=e;if(s=(s+1)%e,s===a&&(a=(a+1)%e),l-i<t)return;const h=c&&l-c;return h?Math.round(1e3*d/h):void 0}}(50,250);return function(e,t){let r,n,i=0,s=1e3/t;const a=(t,s=Date.now())=>{i=s,r=null,n&&(clearTimeout(n),n=null),e.apply(null,t)};return[(...e)=>{const t=Date.now(),o=t-i;o>=s?a(e,t):(r=e,n||(n=setTimeout((()=>{n=null,a(r)}),s-o)))},()=>r&&a(r)]}((r=>{const s=r.loaded,a=r.lengthComputable?r.total:void 0,o=s-n,l=i(o);n=s,e({loaded:s,total:a,progress:a?s/a:void 0,bytes:o,rate:l||void 0,estimated:l&&a&&s<=a?(a-s)/l:void 0,event:r,lengthComputable:null!=a,[t?"download":"upload"]:!0})}),r)},Oe=(e,t)=>{const r=null!=e;return[n=>t[0]({lengthComputable:r,total:e,loaded:n}),t[1]]},Pe=e=>(...t)=>Z.asap((()=>e(...t))),Be=ve.hasStandardBrowserEnv?((e,t)=>r=>(r=new URL(r,ve.origin),e.protocol===r.protocol&&e.host===r.host&&(t||e.port===r.port)))(new URL(ve.origin),ve.navigator&&/(msie|trident)/i.test(ve.navigator.userAgent)):()=>!0,Me=ve.hasStandardBrowserEnv?{write(e,t,r,n,i,s){const a=[e+"="+encodeURIComponent(t)];Z.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),Z.isString(n)&&a.push("path="+n),Z.isString(i)&&a.push("domain="+i),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function Ue(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const ze=e=>e instanceof Te?{...e}:e;function Fe(e,t){t=t||{};const r={};function n(e,t,r,n){return Z.isPlainObject(e)&&Z.isPlainObject(t)?Z.merge.call({caseless:n},e,t):Z.isPlainObject(t)?Z.merge({},t):Z.isArray(t)?t.slice():t}function i(e,t,r,i){return Z.isUndefined(t)?Z.isUndefined(e)?void 0:n(void 0,e,0,i):n(e,t,0,i)}function s(e,t){if(!Z.isUndefined(t))return n(void 0,t)}function a(e,t){return Z.isUndefined(t)?Z.isUndefined(e)?void 0:n(void 0,e):n(void 0,t)}function o(r,i,s){return s in t?n(r,i):s in e?n(void 0,r):void 0}const l={url:s,method:s,data:s,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,withXSRFToken:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:o,headers:(e,t,r)=>i(ze(e),ze(t),0,!0)};return Z.forEach(Object.keys(Object.assign({},e,t)),(function(n){const s=l[n]||i,a=s(e[n],t[n],n);Z.isUndefined(a)&&s!==o||(r[n]=a)})),r}const je=e=>{const t=Fe({},e);let r,{data:n,withXSRFToken:i,xsrfHeaderName:s,xsrfCookieName:a,headers:o,auth:l}=t;if(t.headers=o=Te.from(o),t.url=ce(Ue(t.baseURL,t.url),e.params,e.paramsSerializer),l&&o.set("Authorization","Basic "+btoa((l.username||"")+":"+(l.password?unescape(encodeURIComponent(l.password)):""))),Z.isFormData(n))if(ve.hasStandardBrowserEnv||ve.hasStandardBrowserWebWorkerEnv)o.setContentType(void 0);else if(!1!==(r=o.getContentType())){const[e,...t]=r?r.split(";").map((e=>e.trim())).filter(Boolean):[];o.setContentType([e||"multipart/form-data",...t].join("; "))}if(ve.hasStandardBrowserEnv&&(i&&Z.isFunction(i)&&(i=i(t)),i||!1!==i&&Be(t.url))){const e=s&&a&&Me.read(a);e&&o.set(s,e)}return t},He="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,r){const n=je(e);let i=n.data;const s=Te.from(n.headers).normalize();let a,o,l,c,u,{responseType:d,onUploadProgress:h,onDownloadProgress:p}=n;function f(){c&&c(),u&&u(),n.cancelToken&&n.cancelToken.unsubscribe(a),n.signal&&n.signal.removeEventListener("abort",a)}let m=new XMLHttpRequest;function g(){if(!m)return;const n=Te.from("getAllResponseHeaders"in m&&m.getAllResponseHeaders());De((function(e){t(e),f()}),(function(e){r(e),f()}),{data:d&&"text"!==d&&"json"!==d?m.response:m.responseText,status:m.status,statusText:m.statusText,headers:n,config:e,request:m}),m=null}m.open(n.method.toUpperCase(),n.url,!0),m.timeout=n.timeout,"onloadend"in m?m.onloadend=g:m.onreadystatechange=function(){m&&4===m.readyState&&(0!==m.status||m.responseURL&&0===m.responseURL.indexOf("file:"))&&setTimeout(g)},m.onabort=function(){m&&(r(new X("Request aborted",X.ECONNABORTED,e,m)),m=null)},m.onerror=function(){r(new X("Network Error",X.ERR_NETWORK,e,m)),m=null},m.ontimeout=function(){let t=n.timeout?"timeout of "+n.timeout+"ms exceeded":"timeout exceeded";const i=n.transitional||de;n.timeoutErrorMessage&&(t=n.timeoutErrorMessage),r(new X(t,i.clarifyTimeoutError?X.ETIMEDOUT:X.ECONNABORTED,e,m)),m=null},void 0===i&&s.setContentType(null),"setRequestHeader"in m&&Z.forEach(s.toJSON(),(function(e,t){m.setRequestHeader(t,e)})),Z.isUndefined(n.withCredentials)||(m.withCredentials=!!n.withCredentials),d&&"json"!==d&&(m.responseType=n.responseType),p&&([l,u]=Le(p,!0),m.addEventListener("progress",l)),h&&m.upload&&([o,c]=Le(h),m.upload.addEventListener("progress",o),m.upload.addEventListener("loadend",c)),(n.cancelToken||n.signal)&&(a=t=>{m&&(r(!t||t.type?new Ie(null,e,m):t),m.abort(),m=null)},n.cancelToken&&n.cancelToken.subscribe(a),n.signal&&(n.signal.aborted?a():n.signal.addEventListener("abort",a)));const b=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(n.url);b&&-1===ve.protocols.indexOf(b)?r(new X("Unsupported protocol "+b+":",X.ERR_BAD_REQUEST,e)):m.send(i||null)}))},Ve=(e,t)=>{const{length:r}=e=e?e.filter(Boolean):[];if(t||r){let r,n=new AbortController;const i=function(e){if(!r){r=!0,a();const t=e instanceof Error?e:this.reason;n.abort(t instanceof X?t:new Ie(t instanceof Error?t.message:t))}};let s=t&&setTimeout((()=>{s=null,i(new X(`timeout ${t} of ms exceeded`,X.ETIMEDOUT))}),t);const a=()=>{e&&(s&&clearTimeout(s),s=null,e.forEach((e=>{e.unsubscribe?e.unsubscribe(i):e.removeEventListener("abort",i)})),e=null)};e.forEach((e=>e.addEventListener("abort",i)));const{signal:o}=n;return o.unsubscribe=()=>Z.asap(a),o}},We=function*(e,t){let r=e.byteLength;if(!t||r<t)return void(yield e);let n,i=0;for(;i<r;)n=i+t,yield e.slice(i,n),i=n},Ge=(e,t,r,n)=>{const i=async function*(e,t){for await(const r of async function*(e){if(e[Symbol.asyncIterator])return void(yield*e);const t=e.getReader();try{for(;;){const{done:e,value:r}=await t.read();if(e)break;yield r}}finally{await t.cancel()}}(e))yield*We(r,t)}(e,t);let s,a=0,o=e=>{s||(s=!0,n&&n(e))};return new ReadableStream({async pull(e){try{const{done:t,value:n}=await i.next();if(t)return o(),void e.close();let s=n.byteLength;if(r){let e=a+=s;r(e)}e.enqueue(new Uint8Array(n))}catch(e){throw o(e),e}},cancel:e=>(o(e),i.return())},{highWaterMark:2})},$e="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,Ze=$e&&"function"==typeof ReadableStream,Je=$e&&("function"==typeof TextEncoder?(Ke=new TextEncoder,e=>Ke.encode(e)):async e=>new Uint8Array(await new Response(e).arrayBuffer()));var Ke;const Ye=(e,...t)=>{try{return!!e(...t)}catch(e){return!1}},Xe=Ze&&Ye((()=>{let e=!1;const t=new Request(ve.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t})),Qe=Ze&&Ye((()=>Z.isReadableStream(new Response("").body))),et={stream:Qe&&(e=>e.body)};var tt;$e&&(tt=new Response,["text","arrayBuffer","blob","formData","stream"].forEach((e=>{!et[e]&&(et[e]=Z.isFunction(tt[e])?t=>t[e]():(t,r)=>{throw new X(`Response type '${e}' is not supported`,X.ERR_NOT_SUPPORT,r)})})));const rt={http:null,xhr:He,fetch:$e&&(async e=>{let{url:t,method:r,data:n,signal:i,cancelToken:s,timeout:a,onDownloadProgress:o,onUploadProgress:l,responseType:c,headers:u,withCredentials:d="same-origin",fetchOptions:h}=je(e);c=c?(c+"").toLowerCase():"text";let p,f=Ve([i,s&&s.toAbortSignal()],a);const m=f&&f.unsubscribe&&(()=>{f.unsubscribe()});let g;try{if(l&&Xe&&"get"!==r&&"head"!==r&&0!==(g=await(async(e,t)=>{const r=Z.toFiniteNumber(e.getContentLength());return null==r?(async e=>{if(null==e)return 0;if(Z.isBlob(e))return e.size;if(Z.isSpecCompliantForm(e)){const t=new Request(ve.origin,{method:"POST",body:e});return(await t.arrayBuffer()).byteLength}return Z.isArrayBufferView(e)||Z.isArrayBuffer(e)?e.byteLength:(Z.isURLSearchParams(e)&&(e+=""),Z.isString(e)?(await Je(e)).byteLength:void 0)})(t):r})(u,n))){let e,r=new Request(t,{method:"POST",body:n,duplex:"half"});if(Z.isFormData(n)&&(e=r.headers.get("content-type"))&&u.setContentType(e),r.body){const[e,t]=Oe(g,Le(Pe(l)));n=Ge(r.body,65536,e,t)}}Z.isString(d)||(d=d?"include":"omit");const i="credentials"in Request.prototype;p=new Request(t,{...h,signal:f,method:r.toUpperCase(),headers:u.normalize().toJSON(),body:n,duplex:"half",credentials:i?d:void 0});let s=await fetch(p);const a=Qe&&("stream"===c||"response"===c);if(Qe&&(o||a&&m)){const e={};["status","statusText","headers"].forEach((t=>{e[t]=s[t]}));const t=Z.toFiniteNumber(s.headers.get("content-length")),[r,n]=o&&Oe(t,Le(Pe(o),!0))||[];s=new Response(Ge(s.body,65536,r,(()=>{n&&n(),m&&m()})),e)}c=c||"text";let b=await et[Z.findKey(et,c)||"text"](s,e);return!a&&m&&m(),await new Promise(((t,r)=>{De(t,r,{data:b,headers:Te.from(s.headers),status:s.status,statusText:s.statusText,config:e,request:p})}))}catch(t){if(m&&m(),t&&"TypeError"===t.name&&/fetch/i.test(t.message))throw Object.assign(new X("Network Error",X.ERR_NETWORK,e,p),{cause:t.cause||t});throw X.from(t,t&&t.code,e,p)}})};Z.forEach(rt,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const nt=e=>`- ${e}`,it=e=>Z.isFunction(e)||null===e||!1===e,st=e=>{e=Z.isArray(e)?e:[e];const{length:t}=e;let r,n;const i={};for(let s=0;s<t;s++){let t;if(r=e[s],n=r,!it(r)&&(n=rt[(t=String(r)).toLowerCase()],void 0===n))throw new X(`Unknown adapter '${t}'`);if(n)break;i[t||"#"+s]=n}if(!n){const e=Object.entries(i).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let r=t?e.length>1?"since :\n"+e.map(nt).join("\n"):" "+nt(e[0]):"as no adapter specified";throw new X("There is no suitable adapter to dispatch the request "+r,"ERR_NOT_SUPPORT")}return n};function at(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Ie(null,e)}function ot(e){return at(e),e.headers=Te.from(e.headers),e.data=Re.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),st(e.adapter||xe.adapter)(e).then((function(t){return at(e),t.data=Re.call(e,e.transformResponse,t),t.headers=Te.from(t.headers),t}),(function(t){return Ne(t)||(at(e),t&&t.response&&(t.response.data=Re.call(e,e.transformResponse,t.response),t.response.headers=Te.from(t.response.headers))),Promise.reject(t)}))}const lt={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{lt[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}}));const ct={};lt.transitional=function(e,t,r){function n(e,t){return"[Axios v1.7.9] Transitional option '"+e+"'"+t+(r?". "+r:"")}return(r,i,s)=>{if(!1===e)throw new X(n(i," has been removed"+(t?" in "+t:"")),X.ERR_DEPRECATED);return t&&!ct[i]&&(ct[i]=!0,console.warn(n(i," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(r,i,s)}},lt.spelling=function(e){return(t,r)=>(console.warn(`${r} is likely a misspelling of ${e}`),!0)};const ut={assertOptions:function(e,t,r){if("object"!=typeof e)throw new X("options must be an object",X.ERR_BAD_OPTION_VALUE);const n=Object.keys(e);let i=n.length;for(;i-- >0;){const s=n[i],a=t[s];if(a){const t=e[s],r=void 0===t||a(t,s,e);if(!0!==r)throw new X("option "+s+" must be "+r,X.ERR_BAD_OPTION_VALUE)}else if(!0!==r)throw new X("Unknown option "+s,X.ERR_BAD_OPTION)}},validators:lt},dt=ut.validators;class ht{constructor(e){this.defaults=e,this.interceptors={request:new ue,response:new ue}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t={};Error.captureStackTrace?Error.captureStackTrace(t):t=new Error;const r=t.stack?t.stack.replace(/^.+\n/,""):"";try{e.stack?r&&!String(e.stack).endsWith(r.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+r):e.stack=r}catch(e){}}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=Fe(this.defaults,t);const{transitional:r,paramsSerializer:n,headers:i}=t;void 0!==r&&ut.assertOptions(r,{silentJSONParsing:dt.transitional(dt.boolean),forcedJSONParsing:dt.transitional(dt.boolean),clarifyTimeoutError:dt.transitional(dt.boolean)},!1),null!=n&&(Z.isFunction(n)?t.paramsSerializer={serialize:n}:ut.assertOptions(n,{encode:dt.function,serialize:dt.function},!0)),ut.assertOptions(t,{baseUrl:dt.spelling("baseURL"),withXsrfToken:dt.spelling("withXSRFToken")},!0),t.method=(t.method||this.defaults.method||"get").toLowerCase();let s=i&&Z.merge(i.common,i[t.method]);i&&Z.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete i[e]})),t.headers=Te.concat(s,i);const a=[];let o=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(o=o&&e.synchronous,a.unshift(e.fulfilled,e.rejected))}));const l=[];let c;this.interceptors.response.forEach((function(e){l.push(e.fulfilled,e.rejected)}));let u,d=0;if(!o){const e=[ot.bind(this),void 0];for(e.unshift.apply(e,a),e.push.apply(e,l),u=e.length,c=Promise.resolve(t);d<u;)c=c.then(e[d++],e[d++]);return c}u=a.length;let h=t;for(d=0;d<u;){const e=a[d++],t=a[d++];try{h=e(h)}catch(e){t.call(this,e);break}}try{c=ot.call(this,h)}catch(e){return Promise.reject(e)}for(d=0,u=l.length;d<u;)c=c.then(l[d++],l[d++]);return c}getUri(e){return ce(Ue((e=Fe(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}Z.forEach(["delete","get","head","options"],(function(e){ht.prototype[e]=function(t,r){return this.request(Fe(r||{},{method:e,url:t,data:(r||{}).data}))}})),Z.forEach(["post","put","patch"],(function(e){function t(t){return function(r,n,i){return this.request(Fe(i||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:r,data:n}))}}ht.prototype[e]=t(),ht.prototype[e+"Form"]=t(!0)}));const pt=ht;class ft{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const r=this;this.promise.then((e=>{if(!r._listeners)return;let t=r._listeners.length;for(;t-- >0;)r._listeners[t](e);r._listeners=null})),this.promise.then=e=>{let t;const n=new Promise((e=>{r.subscribe(e),t=e})).then(e);return n.cancel=function(){r.unsubscribe(t)},n},e((function(e,n,i){r.reason||(r.reason=new Ie(e,n,i),t(r.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}toAbortSignal(){const e=new AbortController,t=t=>{e.abort(t)};return this.subscribe(t),e.signal.unsubscribe=()=>this.unsubscribe(t),e.signal}static source(){let e;return{token:new ft((function(t){e=t})),cancel:e}}}const mt=ft,gt={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(gt).forEach((([e,t])=>{gt[t]=e}));const bt=gt,vt=function e(t){const r=new pt(t),n=i(pt.prototype.request,r);return Z.extend(n,pt.prototype,r,{allOwnKeys:!0}),Z.extend(n,r,null,{allOwnKeys:!0}),n.create=function(r){return e(Fe(t,r))},n}(xe);vt.Axios=pt,vt.CanceledError=Ie,vt.CancelToken=mt,vt.isCancel=Ne,vt.VERSION="1.7.9",vt.toFormData=ne,vt.AxiosError=X,vt.Cancel=vt.CanceledError,vt.all=function(e){return Promise.all(e)},vt.spread=function(e){return function(t){return e.apply(null,t)}},vt.isAxiosError=function(e){return Z.isObject(e)&&!0===e.isAxiosError},vt.mergeConfig=Fe,vt.AxiosHeaders=Te,vt.formToJSON=e=>ye(Z.isHTMLForm(e)?new FormData(e):e),vt.getAdapter=st,vt.HttpStatusCode=bt,vt.default=vt;const yt=vt},602:(e,t,r)=>{"use strict";r.d(t,{P2:()=>f});const n=(e,t)=>t.some((t=>e instanceof t));let i,s;const a=new WeakMap,o=new WeakMap,l=new WeakMap;let c={get(e,t,r){if(e instanceof IDBTransaction){if("done"===t)return a.get(e);if("store"===t)return r.objectStoreNames[1]?void 0:r.objectStore(r.objectStoreNames[0])}return h(e[t])},set:(e,t,r)=>(e[t]=r,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function u(e){c=e(c)}function d(e){return"function"==typeof e?(t=e,(s||(s=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(p(this),e),h(this.request)}:function(...e){return h(t.apply(p(this),e))}):(e instanceof IDBTransaction&&function(e){if(a.has(e))return;const t=new Promise(((t,r)=>{const n=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",s),e.removeEventListener("abort",s)},i=()=>{t(),n()},s=()=>{r(e.error||new DOMException("AbortError","AbortError")),n()};e.addEventListener("complete",i),e.addEventListener("error",s),e.addEventListener("abort",s)}));a.set(e,t)}(e),n(e,i||(i=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,c):e);var t}function h(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,r)=>{const n=()=>{e.removeEventListener("success",i),e.removeEventListener("error",s)},i=()=>{t(h(e.result)),n()},s=()=>{r(e.error),n()};e.addEventListener("success",i),e.addEventListener("error",s)}));return l.set(t,e),t}(e);if(o.has(e))return o.get(e);const t=d(e);return t!==e&&(o.set(e,t),l.set(t,e)),t}const p=e=>l.get(e);function f(e,t,{blocked:r,upgrade:n,blocking:i,terminated:s}={}){const a=indexedDB.open(e,t),o=h(a);return n&&a.addEventListener("upgradeneeded",(e=>{n(h(a.result),e.oldVersion,e.newVersion,h(a.transaction),e)})),r&&a.addEventListener("blocked",(e=>r(e.oldVersion,e.newVersion,e))),o.then((e=>{s&&e.addEventListener("close",(()=>s())),i&&e.addEventListener("versionchange",(e=>i(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),o}const m=["get","getKey","getAll","getAllKeys","count"],g=["put","add","delete","clear"],b=new Map;function v(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(b.get(t))return b.get(t);const r=t.replace(/FromIndex$/,""),n=t!==r,i=g.includes(r);if(!(r in(n?IDBIndex:IDBObjectStore).prototype)||!i&&!m.includes(r))return;const s=async function(e,...t){const s=this.transaction(e,i?"readwrite":"readonly");let a=s.store;return n&&(a=a.index(t.shift())),(await Promise.all([a[r](...t),i&&s.done]))[0]};return b.set(t,s),s}u((e=>({...e,get:(t,r,n)=>v(t,r)||e.get(t,r,n),has:(t,r)=>!!v(t,r)||e.has(t,r)})));const y=["continue","continuePrimaryKey","advance"],_={},x=new WeakMap,w=new WeakMap,S={get(e,t){if(!y.includes(t))return e[t];let r=_[t];return r||(r=_[t]=function(...e){x.set(this,w.get(this)[t](...e))}),r}};async function*k(...e){let t=this;if(t instanceof IDBCursor||(t=await t.openCursor(...e)),!t)return;const r=new Proxy(t,S);for(w.set(r,t),l.set(r,p(t));t;)yield r,t=await(x.get(r)||t.continue()),x.delete(r)}function E(e,t){return t===Symbol.asyncIterator&&n(e,[IDBIndex,IDBObjectStore,IDBCursor])||"iterate"===t&&n(e,[IDBIndex,IDBObjectStore])}u((e=>({...e,get:(t,r,n)=>E(t,r)?k:e.get(t,r,n),has:(t,r)=>E(t,r)||e.has(t,r)})))},5776:(e,t,r)=>{"use strict";r.d(t,{S4:()=>Da});var n={};r.r(n),r.d(n,{DocumentPosition:()=>Pt,append:()=>gt,appendChild:()=>mt,compareDocumentPosition:()=>Bt,existsOne:()=>St,filter:()=>yt,find:()=>_t,findAll:()=>kt,findOne:()=>wt,findOneChild:()=>xt,getAttributeValue:()=>lt,getChildren:()=>st,getElementById:()=>qt,getElements:()=>Nt,getElementsByClassName:()=>Dt,getElementsByTagName:()=>It,getElementsByTagType:()=>Lt,getFeed:()=>Ut,getInnerHTML:()=>tt,getName:()=>ut,getOuterHTML:()=>et,getParent:()=>at,getSiblings:()=>ot,getText:()=>rt,hasAttrib:()=>ct,hasChildren:()=>_e,innerText:()=>it,isCDATA:()=>ge,isComment:()=>ve,isDocument:()=>ye,isTag:()=>me,isText:()=>be,nextElementSibling:()=>dt,prepend:()=>vt,prependChild:()=>bt,prevElementSibling:()=>ht,removeElement:()=>pt,removeSubsets:()=>Ot,replaceElement:()=>ft,testElement:()=>Rt,textContent:()=>nt,uniqueSort:()=>Mt});var i={};r.r(i),r.d(i,{iX:()=>ne});const s=Symbol("changed"),a=Symbol("classList"),o=Symbol("CustomElements"),l=Symbol("content"),c=Symbol("dataset"),u=Symbol("doctype"),d=Symbol("DOMParser"),h=Symbol("end"),p=Symbol("EventTarget"),f=Symbol("globals"),m=Symbol("image"),g=Symbol("mime"),b=Symbol("MutationObserver"),v=Symbol("next"),y=Symbol("ownerElement"),_=Symbol("prev"),x=Symbol("private"),w=Symbol("sheet"),S=Symbol("start"),k=Symbol("style"),E=Symbol("upgrade"),A=Symbol("value"),C=new Uint16Array('ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map((e=>e.charCodeAt(0)))),T=new Uint16Array("Ȁaglq\tɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map((e=>e.charCodeAt(0))));var R;const N=new Map([[0,65533],[128,8364],[130,8218],[131,402],[132,8222],[133,8230],[134,8224],[135,8225],[136,710],[137,8240],[138,352],[139,8249],[140,338],[142,381],[145,8216],[146,8217],[147,8220],[148,8221],[149,8226],[150,8211],[151,8212],[152,732],[153,8482],[154,353],[155,8250],[156,339],[158,382],[159,376]]),q=null!==(R=String.fromCodePoint)&&void 0!==R?R:function(e){let t="";return e>65535&&(e-=65536,t+=String.fromCharCode(e>>>10&1023|55296),e=56320|1023&e),t+=String.fromCharCode(e),t};var I,D,L,O,P,B,M,U;function z(e){return e>=I.ZERO&&e<=I.NINE}!function(e){e[e.NUM=35]="NUM",e[e.SEMI=59]="SEMI",e[e.EQUALS=61]="EQUALS",e[e.ZERO=48]="ZERO",e[e.NINE=57]="NINE",e[e.LOWER_A=97]="LOWER_A",e[e.LOWER_F=102]="LOWER_F",e[e.LOWER_X=120]="LOWER_X",e[e.LOWER_Z=122]="LOWER_Z",e[e.UPPER_A=65]="UPPER_A",e[e.UPPER_F=70]="UPPER_F",e[e.UPPER_Z=90]="UPPER_Z"}(I||(I={})),function(e){e[e.VALUE_LENGTH=49152]="VALUE_LENGTH",e[e.BRANCH_LENGTH=16256]="BRANCH_LENGTH",e[e.JUMP_TABLE=127]="JUMP_TABLE"}(D||(D={})),function(e){e[e.EntityStart=0]="EntityStart",e[e.NumericStart=1]="NumericStart",e[e.NumericDecimal=2]="NumericDecimal",e[e.NumericHex=3]="NumericHex",e[e.NamedEntity=4]="NamedEntity"}(L||(L={})),(P=O||(O={}))[P.Legacy=0]="Legacy",P[P.Strict=1]="Strict",P[P.Attribute=2]="Attribute";class F{constructor(e,t,r){this.decodeTree=e,this.emitCodePoint=t,this.errors=r,this.state=L.EntityStart,this.consumed=1,this.result=0,this.treeIndex=0,this.excess=1,this.decodeMode=O.Strict}startEntity(e){this.decodeMode=e,this.state=L.EntityStart,this.result=0,this.treeIndex=0,this.excess=1,this.consumed=1}write(e,t){switch(this.state){case L.EntityStart:return e.charCodeAt(t)===I.NUM?(this.state=L.NumericStart,this.consumed+=1,this.stateNumericStart(e,t+1)):(this.state=L.NamedEntity,this.stateNamedEntity(e,t));case L.NumericStart:return this.stateNumericStart(e,t);case L.NumericDecimal:return this.stateNumericDecimal(e,t);case L.NumericHex:return this.stateNumericHex(e,t);case L.NamedEntity:return this.stateNamedEntity(e,t)}}stateNumericStart(e,t){return t>=e.length?-1:(32|e.charCodeAt(t))===I.LOWER_X?(this.state=L.NumericHex,this.consumed+=1,this.stateNumericHex(e,t+1)):(this.state=L.NumericDecimal,this.stateNumericDecimal(e,t))}addToNumericResult(e,t,r,n){if(t!==r){const i=r-t;this.result=this.result*Math.pow(n,i)+Number.parseInt(e.substr(t,i),n),this.consumed+=i}}stateNumericHex(e,t){const r=t;for(;t<e.length;){const i=e.charCodeAt(t);if(!(z(i)||(n=i,n>=I.UPPER_A&&n<=I.UPPER_F||n>=I.LOWER_A&&n<=I.LOWER_F)))return this.addToNumericResult(e,r,t,16),this.emitNumericEntity(i,3);t+=1}var n;return this.addToNumericResult(e,r,t,16),-1}stateNumericDecimal(e,t){const r=t;for(;t<e.length;){const n=e.charCodeAt(t);if(!z(n))return this.addToNumericResult(e,r,t,10),this.emitNumericEntity(n,2);t+=1}return this.addToNumericResult(e,r,t,10),-1}emitNumericEntity(e,t){var r;if(this.consumed<=t)return null===(r=this.errors)||void 0===r||r.absenceOfDigitsInNumericCharacterReference(this.consumed),0;if(e===I.SEMI)this.consumed+=1;else if(this.decodeMode===O.Strict)return 0;return this.emitCodePoint(function(e){var t;return e>=55296&&e<=57343||e>1114111?65533:null!==(t=N.get(e))&&void 0!==t?t:e}(this.result),this.consumed),this.errors&&(e!==I.SEMI&&this.errors.missingSemicolonAfterCharacterReference(),this.errors.validateNumericCharacterReference(this.result)),this.consumed}stateNamedEntity(e,t){const{decodeTree:r}=this;let n=r[this.treeIndex],i=(n&D.VALUE_LENGTH)>>14;for(;t<e.length;t++,this.excess++){const a=e.charCodeAt(t);if(this.treeIndex=j(r,n,this.treeIndex+Math.max(1,i),a),this.treeIndex<0)return 0===this.result||this.decodeMode===O.Attribute&&(0===i||((s=a)===I.EQUALS||function(e){return e>=I.UPPER_A&&e<=I.UPPER_Z||e>=I.LOWER_A&&e<=I.LOWER_Z||z(e)}(s)))?0:this.emitNotTerminatedNamedEntity();if(n=r[this.treeIndex],i=(n&D.VALUE_LENGTH)>>14,0!==i){if(a===I.SEMI)return this.emitNamedEntityData(this.treeIndex,i,this.consumed+this.excess);this.decodeMode!==O.Strict&&(this.result=this.treeIndex,this.consumed+=this.excess,this.excess=0)}}var s;return-1}emitNotTerminatedNamedEntity(){var e;const{result:t,decodeTree:r}=this,n=(r[t]&D.VALUE_LENGTH)>>14;return this.emitNamedEntityData(t,n,this.consumed),null===(e=this.errors)||void 0===e||e.missingSemicolonAfterCharacterReference(),this.consumed}emitNamedEntityData(e,t,r){const{decodeTree:n}=this;return this.emitCodePoint(1===t?n[e]&~D.VALUE_LENGTH:n[e+1],r),3===t&&this.emitCodePoint(n[e+2],r),r}end(){var e;switch(this.state){case L.NamedEntity:return 0===this.result||this.decodeMode===O.Attribute&&this.result!==this.treeIndex?0:this.emitNotTerminatedNamedEntity();case L.NumericDecimal:return this.emitNumericEntity(0,2);case L.NumericHex:return this.emitNumericEntity(0,3);case L.NumericStart:return null===(e=this.errors)||void 0===e||e.absenceOfDigitsInNumericCharacterReference(this.consumed),0;case L.EntityStart:return 0}}}function j(e,t,r,n){const i=(t&D.BRANCH_LENGTH)>>7,s=t&D.JUMP_TABLE;if(0===i)return 0!==s&&n===s?r:-1;if(s){const t=n-s;return t<0||t>=i?-1:e[r+t]-1}let a=r,o=a+i-1;for(;a<=o;){const t=a+o>>>1,r=e[t];if(r<n)a=t+1;else{if(!(r>n))return e[t+i];o=t-1}}return-1}function H(e){return e===B.Space||e===B.NewLine||e===B.Tab||e===B.FormFeed||e===B.CarriageReturn}function V(e){return e===B.Slash||e===B.Gt||H(e)}!function(e){e[e.Tab=9]="Tab",e[e.NewLine=10]="NewLine",e[e.FormFeed=12]="FormFeed",e[e.CarriageReturn=13]="CarriageReturn",e[e.Space=32]="Space",e[e.ExclamationMark=33]="ExclamationMark",e[e.Number=35]="Number",e[e.Amp=38]="Amp",e[e.SingleQuote=39]="SingleQuote",e[e.DoubleQuote=34]="DoubleQuote",e[e.Dash=45]="Dash",e[e.Slash=47]="Slash",e[e.Zero=48]="Zero",e[e.Nine=57]="Nine",e[e.Semi=59]="Semi",e[e.Lt=60]="Lt",e[e.Eq=61]="Eq",e[e.Gt=62]="Gt",e[e.Questionmark=63]="Questionmark",e[e.UpperA=65]="UpperA",e[e.LowerA=97]="LowerA",e[e.UpperF=70]="UpperF",e[e.LowerF=102]="LowerF",e[e.UpperZ=90]="UpperZ",e[e.LowerZ=122]="LowerZ",e[e.LowerX=120]="LowerX",e[e.OpeningSquareBracket=91]="OpeningSquareBracket"}(B||(B={})),function(e){e[e.Text=1]="Text",e[e.BeforeTagName=2]="BeforeTagName",e[e.InTagName=3]="InTagName",e[e.InSelfClosingTag=4]="InSelfClosingTag",e[e.BeforeClosingTagName=5]="BeforeClosingTagName",e[e.InClosingTagName=6]="InClosingTagName",e[e.AfterClosingTagName=7]="AfterClosingTagName",e[e.BeforeAttributeName=8]="BeforeAttributeName",e[e.InAttributeName=9]="InAttributeName",e[e.AfterAttributeName=10]="AfterAttributeName",e[e.BeforeAttributeValue=11]="BeforeAttributeValue",e[e.InAttributeValueDq=12]="InAttributeValueDq",e[e.InAttributeValueSq=13]="InAttributeValueSq",e[e.InAttributeValueNq=14]="InAttributeValueNq",e[e.BeforeDeclaration=15]="BeforeDeclaration",e[e.InDeclaration=16]="InDeclaration",e[e.InProcessingInstruction=17]="InProcessingInstruction",e[e.BeforeComment=18]="BeforeComment",e[e.CDATASequence=19]="CDATASequence",e[e.InSpecialComment=20]="InSpecialComment",e[e.InCommentLike=21]="InCommentLike",e[e.BeforeSpecialS=22]="BeforeSpecialS",e[e.BeforeSpecialT=23]="BeforeSpecialT",e[e.SpecialStartSequence=24]="SpecialStartSequence",e[e.InSpecialTag=25]="InSpecialTag",e[e.InEntity=26]="InEntity"}(M||(M={})),function(e){e[e.NoValue=0]="NoValue",e[e.Unquoted=1]="Unquoted",e[e.Single=2]="Single",e[e.Double=3]="Double"}(U||(U={}));const W={Cdata:new Uint8Array([67,68,65,84,65,91]),CdataEnd:new Uint8Array([93,93,62]),CommentEnd:new Uint8Array([45,45,62]),ScriptEnd:new Uint8Array([60,47,115,99,114,105,112,116]),StyleEnd:new Uint8Array([60,47,115,116,121,108,101]),TitleEnd:new Uint8Array([60,47,116,105,116,108,101]),TextareaEnd:new Uint8Array([60,47,116,101,120,116,97,114,101,97]),XmpEnd:new Uint8Array([60,47,120,109,112])};class G{constructor({xmlMode:e=!1,decodeEntities:t=!0},r){this.cbs=r,this.state=M.Text,this.buffer="",this.sectionStart=0,this.index=0,this.entityStart=0,this.baseState=M.Text,this.isSpecial=!1,this.running=!0,this.offset=0,this.currentSequence=void 0,this.sequenceIndex=0,this.xmlMode=e,this.decodeEntities=t,this.entityDecoder=new F(e?T:C,((e,t)=>this.emitCodePoint(e,t)))}reset(){this.state=M.Text,this.buffer="",this.sectionStart=0,this.index=0,this.baseState=M.Text,this.currentSequence=void 0,this.running=!0,this.offset=0}write(e){this.offset+=this.buffer.length,this.buffer=e,this.parse()}end(){this.running&&this.finish()}pause(){this.running=!1}resume(){this.running=!0,this.index<this.buffer.length+this.offset&&this.parse()}stateText(e){e===B.Lt||!this.decodeEntities&&this.fastForwardTo(B.Lt)?(this.index>this.sectionStart&&this.cbs.ontext(this.sectionStart,this.index),this.state=M.BeforeTagName,this.sectionStart=this.index):this.decodeEntities&&e===B.Amp&&this.startEntity()}stateSpecialStartSequence(e){const t=this.sequenceIndex===this.currentSequence.length;if(t?V(e):(32|e)===this.currentSequence[this.sequenceIndex]){if(!t)return void this.sequenceIndex++}else this.isSpecial=!1;this.sequenceIndex=0,this.state=M.InTagName,this.stateInTagName(e)}stateInSpecialTag(e){if(this.sequenceIndex===this.currentSequence.length){if(e===B.Gt||H(e)){const t=this.index-this.currentSequence.length;if(this.sectionStart<t){const e=this.index;this.index=t,this.cbs.ontext(this.sectionStart,t),this.index=e}return this.isSpecial=!1,this.sectionStart=t+2,void this.stateInClosingTagName(e)}this.sequenceIndex=0}(32|e)===this.currentSequence[this.sequenceIndex]?this.sequenceIndex+=1:0===this.sequenceIndex?this.currentSequence===W.TitleEnd?this.decodeEntities&&e===B.Amp&&this.startEntity():this.fastForwardTo(B.Lt)&&(this.sequenceIndex=1):this.sequenceIndex=Number(e===B.Lt)}stateCDATASequence(e){e===W.Cdata[this.sequenceIndex]?++this.sequenceIndex===W.Cdata.length&&(this.state=M.InCommentLike,this.currentSequence=W.CdataEnd,this.sequenceIndex=0,this.sectionStart=this.index+1):(this.sequenceIndex=0,this.state=M.InDeclaration,this.stateInDeclaration(e))}fastForwardTo(e){for(;++this.index<this.buffer.length+this.offset;)if(this.buffer.charCodeAt(this.index-this.offset)===e)return!0;return this.index=this.buffer.length+this.offset-1,!1}stateInCommentLike(e){e===this.currentSequence[this.sequenceIndex]?++this.sequenceIndex===this.currentSequence.length&&(this.currentSequence===W.CdataEnd?this.cbs.oncdata(this.sectionStart,this.index,2):this.cbs.oncomment(this.sectionStart,this.index,2),this.sequenceIndex=0,this.sectionStart=this.index+1,this.state=M.Text):0===this.sequenceIndex?this.fastForwardTo(this.currentSequence[0])&&(this.sequenceIndex=1):e!==this.currentSequence[this.sequenceIndex-1]&&(this.sequenceIndex=0)}isTagStartChar(e){return this.xmlMode?!V(e):function(e){return e>=B.LowerA&&e<=B.LowerZ||e>=B.UpperA&&e<=B.UpperZ}(e)}startSpecial(e,t){this.isSpecial=!0,this.currentSequence=e,this.sequenceIndex=t,this.state=M.SpecialStartSequence}stateBeforeTagName(e){if(e===B.ExclamationMark)this.state=M.BeforeDeclaration,this.sectionStart=this.index+1;else if(e===B.Questionmark)this.state=M.InProcessingInstruction,this.sectionStart=this.index+1;else if(this.isTagStartChar(e)){const t=32|e;this.sectionStart=this.index,this.xmlMode?this.state=M.InTagName:t===W.ScriptEnd[2]?this.state=M.BeforeSpecialS:t===W.TitleEnd[2]||t===W.XmpEnd[2]?this.state=M.BeforeSpecialT:this.state=M.InTagName}else e===B.Slash?this.state=M.BeforeClosingTagName:(this.state=M.Text,this.stateText(e))}stateInTagName(e){V(e)&&(this.cbs.onopentagname(this.sectionStart,this.index),this.sectionStart=-1,this.state=M.BeforeAttributeName,this.stateBeforeAttributeName(e))}stateBeforeClosingTagName(e){H(e)||(e===B.Gt?this.state=M.Text:(this.state=this.isTagStartChar(e)?M.InClosingTagName:M.InSpecialComment,this.sectionStart=this.index))}stateInClosingTagName(e){(e===B.Gt||H(e))&&(this.cbs.onclosetag(this.sectionStart,this.index),this.sectionStart=-1,this.state=M.AfterClosingTagName,this.stateAfterClosingTagName(e))}stateAfterClosingTagName(e){(e===B.Gt||this.fastForwardTo(B.Gt))&&(this.state=M.Text,this.sectionStart=this.index+1)}stateBeforeAttributeName(e){e===B.Gt?(this.cbs.onopentagend(this.index),this.isSpecial?(this.state=M.InSpecialTag,this.sequenceIndex=0):this.state=M.Text,this.sectionStart=this.index+1):e===B.Slash?this.state=M.InSelfClosingTag:H(e)||(this.state=M.InAttributeName,this.sectionStart=this.index)}stateInSelfClosingTag(e){e===B.Gt?(this.cbs.onselfclosingtag(this.index),this.state=M.Text,this.sectionStart=this.index+1,this.isSpecial=!1):H(e)||(this.state=M.BeforeAttributeName,this.stateBeforeAttributeName(e))}stateInAttributeName(e){(e===B.Eq||V(e))&&(this.cbs.onattribname(this.sectionStart,this.index),this.sectionStart=this.index,this.state=M.AfterAttributeName,this.stateAfterAttributeName(e))}stateAfterAttributeName(e){e===B.Eq?this.state=M.BeforeAttributeValue:e===B.Slash||e===B.Gt?(this.cbs.onattribend(U.NoValue,this.sectionStart),this.sectionStart=-1,this.state=M.BeforeAttributeName,this.stateBeforeAttributeName(e)):H(e)||(this.cbs.onattribend(U.NoValue,this.sectionStart),this.state=M.InAttributeName,this.sectionStart=this.index)}stateBeforeAttributeValue(e){e===B.DoubleQuote?(this.state=M.InAttributeValueDq,this.sectionStart=this.index+1):e===B.SingleQuote?(this.state=M.InAttributeValueSq,this.sectionStart=this.index+1):H(e)||(this.sectionStart=this.index,this.state=M.InAttributeValueNq,this.stateInAttributeValueNoQuotes(e))}handleInAttributeValue(e,t){e===t||!this.decodeEntities&&this.fastForwardTo(t)?(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(t===B.DoubleQuote?U.Double:U.Single,this.index+1),this.state=M.BeforeAttributeName):this.decodeEntities&&e===B.Amp&&this.startEntity()}stateInAttributeValueDoubleQuotes(e){this.handleInAttributeValue(e,B.DoubleQuote)}stateInAttributeValueSingleQuotes(e){this.handleInAttributeValue(e,B.SingleQuote)}stateInAttributeValueNoQuotes(e){H(e)||e===B.Gt?(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(U.Unquoted,this.index),this.state=M.BeforeAttributeName,this.stateBeforeAttributeName(e)):this.decodeEntities&&e===B.Amp&&this.startEntity()}stateBeforeDeclaration(e){e===B.OpeningSquareBracket?(this.state=M.CDATASequence,this.sequenceIndex=0):this.state=e===B.Dash?M.BeforeComment:M.InDeclaration}stateInDeclaration(e){(e===B.Gt||this.fastForwardTo(B.Gt))&&(this.cbs.ondeclaration(this.sectionStart,this.index),this.state=M.Text,this.sectionStart=this.index+1)}stateInProcessingInstruction(e){(e===B.Gt||this.fastForwardTo(B.Gt))&&(this.cbs.onprocessinginstruction(this.sectionStart,this.index),this.state=M.Text,this.sectionStart=this.index+1)}stateBeforeComment(e){e===B.Dash?(this.state=M.InCommentLike,this.currentSequence=W.CommentEnd,this.sequenceIndex=2,this.sectionStart=this.index+1):this.state=M.InDeclaration}stateInSpecialComment(e){(e===B.Gt||this.fastForwardTo(B.Gt))&&(this.cbs.oncomment(this.sectionStart,this.index,0),this.state=M.Text,this.sectionStart=this.index+1)}stateBeforeSpecialS(e){const t=32|e;t===W.ScriptEnd[3]?this.startSpecial(W.ScriptEnd,4):t===W.StyleEnd[3]?this.startSpecial(W.StyleEnd,4):(this.state=M.InTagName,this.stateInTagName(e))}stateBeforeSpecialT(e){switch(32|e){case W.TitleEnd[3]:this.startSpecial(W.TitleEnd,4);break;case W.TextareaEnd[3]:this.startSpecial(W.TextareaEnd,4);break;case W.XmpEnd[3]:this.startSpecial(W.XmpEnd,4);break;default:this.state=M.InTagName,this.stateInTagName(e)}}startEntity(){this.baseState=this.state,this.state=M.InEntity,this.entityStart=this.index,this.entityDecoder.startEntity(this.xmlMode?O.Strict:this.baseState===M.Text||this.baseState===M.InSpecialTag?O.Legacy:O.Attribute)}stateInEntity(){const e=this.entityDecoder.write(this.buffer,this.index-this.offset);e>=0?(this.state=this.baseState,0===e&&(this.index=this.entityStart)):this.index=this.offset+this.buffer.length-1}cleanup(){this.running&&this.sectionStart!==this.index&&(this.state===M.Text||this.state===M.InSpecialTag&&0===this.sequenceIndex?(this.cbs.ontext(this.sectionStart,this.index),this.sectionStart=this.index):this.state!==M.InAttributeValueDq&&this.state!==M.InAttributeValueSq&&this.state!==M.InAttributeValueNq||(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=this.index))}shouldContinue(){return this.index<this.buffer.length+this.offset&&this.running}parse(){for(;this.shouldContinue();){const e=this.buffer.charCodeAt(this.index-this.offset);switch(this.state){case M.Text:this.stateText(e);break;case M.SpecialStartSequence:this.stateSpecialStartSequence(e);break;case M.InSpecialTag:this.stateInSpecialTag(e);break;case M.CDATASequence:this.stateCDATASequence(e);break;case M.InAttributeValueDq:this.stateInAttributeValueDoubleQuotes(e);break;case M.InAttributeName:this.stateInAttributeName(e);break;case M.InCommentLike:this.stateInCommentLike(e);break;case M.InSpecialComment:this.stateInSpecialComment(e);break;case M.BeforeAttributeName:this.stateBeforeAttributeName(e);break;case M.InTagName:this.stateInTagName(e);break;case M.InClosingTagName:this.stateInClosingTagName(e);break;case M.BeforeTagName:this.stateBeforeTagName(e);break;case M.AfterAttributeName:this.stateAfterAttributeName(e);break;case M.InAttributeValueSq:this.stateInAttributeValueSingleQuotes(e);break;case M.BeforeAttributeValue:this.stateBeforeAttributeValue(e);break;case M.BeforeClosingTagName:this.stateBeforeClosingTagName(e);break;case M.AfterClosingTagName:this.stateAfterClosingTagName(e);break;case M.BeforeSpecialS:this.stateBeforeSpecialS(e);break;case M.BeforeSpecialT:this.stateBeforeSpecialT(e);break;case M.InAttributeValueNq:this.stateInAttributeValueNoQuotes(e);break;case M.InSelfClosingTag:this.stateInSelfClosingTag(e);break;case M.InDeclaration:this.stateInDeclaration(e);break;case M.BeforeDeclaration:this.stateBeforeDeclaration(e);break;case M.BeforeComment:this.stateBeforeComment(e);break;case M.InProcessingInstruction:this.stateInProcessingInstruction(e);break;case M.InEntity:this.stateInEntity()}this.index++}this.cleanup()}finish(){this.state===M.InEntity&&(this.entityDecoder.end(),this.state=this.baseState),this.handleTrailingData(),this.cbs.onend()}handleTrailingData(){const e=this.buffer.length+this.offset;this.sectionStart>=e||(this.state===M.InCommentLike?this.currentSequence===W.CdataEnd?this.cbs.oncdata(this.sectionStart,e,0):this.cbs.oncomment(this.sectionStart,e,0):this.state===M.InTagName||this.state===M.BeforeAttributeName||this.state===M.BeforeAttributeValue||this.state===M.AfterAttributeName||this.state===M.InAttributeName||this.state===M.InAttributeValueSq||this.state===M.InAttributeValueDq||this.state===M.InAttributeValueNq||this.state===M.InClosingTagName||this.cbs.ontext(this.sectionStart,e))}emitCodePoint(e,t){this.baseState!==M.Text&&this.baseState!==M.InSpecialTag?(this.sectionStart<this.entityStart&&this.cbs.onattribdata(this.sectionStart,this.entityStart),this.sectionStart=this.entityStart+t,this.index=this.sectionStart-1,this.cbs.onattribentity(e)):(this.sectionStart<this.entityStart&&this.cbs.ontext(this.sectionStart,this.entityStart),this.sectionStart=this.entityStart+t,this.index=this.sectionStart-1,this.cbs.ontextentity(e,this.sectionStart))}}const $=new Set(["input","option","optgroup","select","button","datalist","textarea"]),Z=new Set(["p"]),J=new Set(["thead","tbody"]),K=new Set(["dd","dt"]),Y=new Set(["rt","rp"]),X=new Map([["tr",new Set(["tr","th","td"])],["th",new Set(["th"])],["td",new Set(["thead","th","td"])],["body",new Set(["head","link","script"])],["li",new Set(["li"])],["p",Z],["h1",Z],["h2",Z],["h3",Z],["h4",Z],["h5",Z],["h6",Z],["select",$],["input",$],["output",$],["button",$],["datalist",$],["textarea",$],["option",new Set(["option"])],["optgroup",new Set(["optgroup","option"])],["dd",K],["dt",K],["address",Z],["article",Z],["aside",Z],["blockquote",Z],["details",Z],["div",Z],["dl",Z],["fieldset",Z],["figcaption",Z],["figure",Z],["footer",Z],["form",Z],["header",Z],["hr",Z],["main",Z],["nav",Z],["ol",Z],["pre",Z],["section",Z],["table",Z],["ul",Z],["rt",Y],["rp",Y],["tbody",J],["tfoot",J]]),Q=new Set(["area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr"]),ee=new Set(["math","svg"]),te=new Set(["mi","mo","mn","ms","mtext","annotation-xml","foreignobject","desc","title"]),re=/\s|\//;class ne{constructor(e,t={}){var r,n,i,s,a,o;this.options=t,this.startIndex=0,this.endIndex=0,this.openTagStart=0,this.tagname="",this.attribname="",this.attribvalue="",this.attribs=null,this.stack=[],this.buffers=[],this.bufferOffset=0,this.writeIndex=0,this.ended=!1,this.cbs=null!=e?e:{},this.htmlMode=!this.options.xmlMode,this.lowerCaseTagNames=null!==(r=t.lowerCaseTags)&&void 0!==r?r:this.htmlMode,this.lowerCaseAttributeNames=null!==(n=t.lowerCaseAttributeNames)&&void 0!==n?n:this.htmlMode,this.recognizeSelfClosing=null!==(i=t.recognizeSelfClosing)&&void 0!==i?i:!this.htmlMode,this.tokenizer=new(null!==(s=t.Tokenizer)&&void 0!==s?s:G)(this.options,this),this.foreignContext=[!this.htmlMode],null===(o=(a=this.cbs).onparserinit)||void 0===o||o.call(a,this)}ontext(e,t){var r,n;const i=this.getSlice(e,t);this.endIndex=t-1,null===(n=(r=this.cbs).ontext)||void 0===n||n.call(r,i),this.startIndex=t}ontextentity(e,t){var r,n;this.endIndex=t-1,null===(n=(r=this.cbs).ontext)||void 0===n||n.call(r,q(e)),this.startIndex=t}isVoidElement(e){return this.htmlMode&&Q.has(e)}onopentagname(e,t){this.endIndex=t;let r=this.getSlice(e,t);this.lowerCaseTagNames&&(r=r.toLowerCase()),this.emitOpenTag(r)}emitOpenTag(e){var t,r,n,i;this.openTagStart=this.startIndex,this.tagname=e;const s=this.htmlMode&&X.get(e);if(s)for(;this.stack.length>0&&s.has(this.stack[0]);){const e=this.stack.shift();null===(r=(t=this.cbs).onclosetag)||void 0===r||r.call(t,e,!0)}this.isVoidElement(e)||(this.stack.unshift(e),this.htmlMode&&(ee.has(e)?this.foreignContext.unshift(!0):te.has(e)&&this.foreignContext.unshift(!1))),null===(i=(n=this.cbs).onopentagname)||void 0===i||i.call(n,e),this.cbs.onopentag&&(this.attribs={})}endOpenTag(e){var t,r;this.startIndex=this.openTagStart,this.attribs&&(null===(r=(t=this.cbs).onopentag)||void 0===r||r.call(t,this.tagname,this.attribs,e),this.attribs=null),this.cbs.onclosetag&&this.isVoidElement(this.tagname)&&this.cbs.onclosetag(this.tagname,!0),this.tagname=""}onopentagend(e){this.endIndex=e,this.endOpenTag(!1),this.startIndex=e+1}onclosetag(e,t){var r,n,i,s,a,o,l,c;this.endIndex=t;let u=this.getSlice(e,t);if(this.lowerCaseTagNames&&(u=u.toLowerCase()),this.htmlMode&&(ee.has(u)||te.has(u))&&this.foreignContext.shift(),this.isVoidElement(u))this.htmlMode&&"br"===u&&(null===(s=(i=this.cbs).onopentagname)||void 0===s||s.call(i,"br"),null===(o=(a=this.cbs).onopentag)||void 0===o||o.call(a,"br",{},!0),null===(c=(l=this.cbs).onclosetag)||void 0===c||c.call(l,"br",!1));else{const e=this.stack.indexOf(u);if(-1!==e)for(let t=0;t<=e;t++){const i=this.stack.shift();null===(n=(r=this.cbs).onclosetag)||void 0===n||n.call(r,i,t!==e)}else this.htmlMode&&"p"===u&&(this.emitOpenTag("p"),this.closeCurrentTag(!0))}this.startIndex=t+1}onselfclosingtag(e){this.endIndex=e,this.recognizeSelfClosing||this.foreignContext[0]?(this.closeCurrentTag(!1),this.startIndex=e+1):this.onopentagend(e)}closeCurrentTag(e){var t,r;const n=this.tagname;this.endOpenTag(e),this.stack[0]===n&&(null===(r=(t=this.cbs).onclosetag)||void 0===r||r.call(t,n,!e),this.stack.shift())}onattribname(e,t){this.startIndex=e;const r=this.getSlice(e,t);this.attribname=this.lowerCaseAttributeNames?r.toLowerCase():r}onattribdata(e,t){this.attribvalue+=this.getSlice(e,t)}onattribentity(e){this.attribvalue+=q(e)}onattribend(e,t){var r,n;this.endIndex=t,null===(n=(r=this.cbs).onattribute)||void 0===n||n.call(r,this.attribname,this.attribvalue,e===U.Double?'"':e===U.Single?"'":e===U.NoValue?void 0:null),this.attribs&&!Object.prototype.hasOwnProperty.call(this.attribs,this.attribname)&&(this.attribs[this.attribname]=this.attribvalue),this.attribvalue=""}getInstructionName(e){const t=e.search(re);let r=t<0?e:e.substr(0,t);return this.lowerCaseTagNames&&(r=r.toLowerCase()),r}ondeclaration(e,t){this.endIndex=t;const r=this.getSlice(e,t);if(this.cbs.onprocessinginstruction){const e=this.getInstructionName(r);this.cbs.onprocessinginstruction(`!${e}`,`!${r}`)}this.startIndex=t+1}onprocessinginstruction(e,t){this.endIndex=t;const r=this.getSlice(e,t);if(this.cbs.onprocessinginstruction){const e=this.getInstructionName(r);this.cbs.onprocessinginstruction(`?${e}`,`?${r}`)}this.startIndex=t+1}oncomment(e,t,r){var n,i,s,a;this.endIndex=t,null===(i=(n=this.cbs).oncomment)||void 0===i||i.call(n,this.getSlice(e,t-r)),null===(a=(s=this.cbs).oncommentend)||void 0===a||a.call(s),this.startIndex=t+1}oncdata(e,t,r){var n,i,s,a,o,l,c,u,d,h;this.endIndex=t;const p=this.getSlice(e,t-r);!this.htmlMode||this.options.recognizeCDATA?(null===(i=(n=this.cbs).oncdatastart)||void 0===i||i.call(n),null===(a=(s=this.cbs).ontext)||void 0===a||a.call(s,p),null===(l=(o=this.cbs).oncdataend)||void 0===l||l.call(o)):(null===(u=(c=this.cbs).oncomment)||void 0===u||u.call(c,`[CDATA[${p}]]`),null===(h=(d=this.cbs).oncommentend)||void 0===h||h.call(d)),this.startIndex=t+1}onend(){var e,t;if(this.cbs.onclosetag){this.endIndex=this.startIndex;for(let e=0;e<this.stack.length;e++)this.cbs.onclosetag(this.stack[e],!0)}null===(t=(e=this.cbs).onend)||void 0===t||t.call(e)}reset(){var e,t,r,n;null===(t=(e=this.cbs).onreset)||void 0===t||t.call(e),this.tokenizer.reset(),this.tagname="",this.attribname="",this.attribs=null,this.stack.length=0,this.startIndex=0,this.endIndex=0,null===(n=(r=this.cbs).onparserinit)||void 0===n||n.call(r,this),this.buffers.length=0,this.foreignContext.length=0,this.foreignContext.unshift(!this.htmlMode),this.bufferOffset=0,this.writeIndex=0,this.ended=!1}parseComplete(e){this.reset(),this.end(e)}getSlice(e,t){for(;e-this.bufferOffset>=this.buffers[0].length;)this.shiftBuffer();let r=this.buffers[0].slice(e-this.bufferOffset,t-this.bufferOffset);for(;t-this.bufferOffset>this.buffers[0].length;)this.shiftBuffer(),r+=this.buffers[0].slice(0,t-this.bufferOffset);return r}shiftBuffer(){this.bufferOffset+=this.buffers[0].length,this.writeIndex--,this.buffers.shift()}write(e){var t,r;this.ended?null===(r=(t=this.cbs).onerror)||void 0===r||r.call(t,new Error(".write() after done!")):(this.buffers.push(e),this.tokenizer.running&&(this.tokenizer.write(e),this.writeIndex++))}end(e){var t,r;this.ended?null===(r=(t=this.cbs).onerror)||void 0===r||r.call(t,new Error(".end() after done!")):(e&&this.write(e),this.ended=!0,this.tokenizer.end())}pause(){this.tokenizer.pause()}resume(){for(this.tokenizer.resume();this.tokenizer.running&&this.writeIndex<this.buffers.length;)this.tokenizer.write(this.buffers[this.writeIndex++]);this.ended&&this.tokenizer.end()}parseChunk(e){this.write(e)}done(e){this.end(e)}}var ie,se;(se=ie||(ie={})).Root="root",se.Text="text",se.Directive="directive",se.Comment="comment",se.Script="script",se.Style="style",se.Tag="tag",se.CDATA="cdata",se.Doctype="doctype";const ae=ie.Root,oe=ie.Text,le=ie.Directive,ce=ie.Comment,ue=ie.Script,de=ie.Style,he=ie.Tag,pe=ie.CDATA,fe=ie.Doctype;function me(e){return(t=e).type===ie.Tag||t.type===ie.Script||t.type===ie.Style;var t}function ge(e){return e.type===ie.CDATA}function be(e){return e.type===ie.Text}function ve(e){return e.type===ie.Comment}function ye(e){return e.type===ie.Root}function _e(e){return Object.prototype.hasOwnProperty.call(e,"children")}const xe=new Uint16Array('ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map((e=>e.charCodeAt(0)))),we=new Uint16Array("Ȁaglq\tɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map((e=>e.charCodeAt(0))));var Se;const ke=new Map([[0,65533],[128,8364],[130,8218],[131,402],[132,8222],[133,8230],[134,8224],[135,8225],[136,710],[137,8240],[138,352],[139,8249],[140,338],[142,381],[145,8216],[146,8217],[147,8220],[148,8221],[149,8226],[150,8211],[151,8212],[152,732],[153,8482],[154,353],[155,8250],[156,339],[158,382],[159,376]]),Ee=null!==(Se=String.fromCodePoint)&&void 0!==Se?Se:function(e){let t="";return e>65535&&(e-=65536,t+=String.fromCharCode(e>>>10&1023|55296),e=56320|1023&e),t+=String.fromCharCode(e),t};var Ae,Ce,Te,Re;function Ne(e){return e>=Ae.ZERO&&e<=Ae.NINE}!function(e){e[e.NUM=35]="NUM",e[e.SEMI=59]="SEMI",e[e.EQUALS=61]="EQUALS",e[e.ZERO=48]="ZERO",e[e.NINE=57]="NINE",e[e.LOWER_A=97]="LOWER_A",e[e.LOWER_F=102]="LOWER_F",e[e.LOWER_X=120]="LOWER_X",e[e.LOWER_Z=122]="LOWER_Z",e[e.UPPER_A=65]="UPPER_A",e[e.UPPER_F=70]="UPPER_F",e[e.UPPER_Z=90]="UPPER_Z"}(Ae||(Ae={})),function(e){e[e.VALUE_LENGTH=49152]="VALUE_LENGTH",e[e.BRANCH_LENGTH=16256]="BRANCH_LENGTH",e[e.JUMP_TABLE=127]="JUMP_TABLE"}(Ce||(Ce={})),function(e){e[e.EntityStart=0]="EntityStart",e[e.NumericStart=1]="NumericStart",e[e.NumericDecimal=2]="NumericDecimal",e[e.NumericHex=3]="NumericHex",e[e.NamedEntity=4]="NamedEntity"}(Te||(Te={})),function(e){e[e.Legacy=0]="Legacy",e[e.Strict=1]="Strict",e[e.Attribute=2]="Attribute"}(Re||(Re={}));class qe{constructor(e,t,r){this.decodeTree=e,this.emitCodePoint=t,this.errors=r,this.state=Te.EntityStart,this.consumed=1,this.result=0,this.treeIndex=0,this.excess=1,this.decodeMode=Re.Strict}startEntity(e){this.decodeMode=e,this.state=Te.EntityStart,this.result=0,this.treeIndex=0,this.excess=1,this.consumed=1}write(e,t){switch(this.state){case Te.EntityStart:return e.charCodeAt(t)===Ae.NUM?(this.state=Te.NumericStart,this.consumed+=1,this.stateNumericStart(e,t+1)):(this.state=Te.NamedEntity,this.stateNamedEntity(e,t));case Te.NumericStart:return this.stateNumericStart(e,t);case Te.NumericDecimal:return this.stateNumericDecimal(e,t);case Te.NumericHex:return this.stateNumericHex(e,t);case Te.NamedEntity:return this.stateNamedEntity(e,t)}}stateNumericStart(e,t){return t>=e.length?-1:(32|e.charCodeAt(t))===Ae.LOWER_X?(this.state=Te.NumericHex,this.consumed+=1,this.stateNumericHex(e,t+1)):(this.state=Te.NumericDecimal,this.stateNumericDecimal(e,t))}addToNumericResult(e,t,r,n){if(t!==r){const i=r-t;this.result=this.result*Math.pow(n,i)+parseInt(e.substr(t,i),n),this.consumed+=i}}stateNumericHex(e,t){const r=t;for(;t<e.length;){const i=e.charCodeAt(t);if(!(Ne(i)||(n=i,n>=Ae.UPPER_A&&n<=Ae.UPPER_F||n>=Ae.LOWER_A&&n<=Ae.LOWER_F)))return this.addToNumericResult(e,r,t,16),this.emitNumericEntity(i,3);t+=1}var n;return this.addToNumericResult(e,r,t,16),-1}stateNumericDecimal(e,t){const r=t;for(;t<e.length;){const n=e.charCodeAt(t);if(!Ne(n))return this.addToNumericResult(e,r,t,10),this.emitNumericEntity(n,2);t+=1}return this.addToNumericResult(e,r,t,10),-1}emitNumericEntity(e,t){var r;if(this.consumed<=t)return null===(r=this.errors)||void 0===r||r.absenceOfDigitsInNumericCharacterReference(this.consumed),0;if(e===Ae.SEMI)this.consumed+=1;else if(this.decodeMode===Re.Strict)return 0;return this.emitCodePoint(function(e){var t;return e>=55296&&e<=57343||e>1114111?65533:null!==(t=ke.get(e))&&void 0!==t?t:e}(this.result),this.consumed),this.errors&&(e!==Ae.SEMI&&this.errors.missingSemicolonAfterCharacterReference(),this.errors.validateNumericCharacterReference(this.result)),this.consumed}stateNamedEntity(e,t){const{decodeTree:r}=this;let n=r[this.treeIndex],i=(n&Ce.VALUE_LENGTH)>>14;for(;t<e.length;t++,this.excess++){const a=e.charCodeAt(t);if(this.treeIndex=De(r,n,this.treeIndex+Math.max(1,i),a),this.treeIndex<0)return 0===this.result||this.decodeMode===Re.Attribute&&(0===i||((s=a)===Ae.EQUALS||function(e){return e>=Ae.UPPER_A&&e<=Ae.UPPER_Z||e>=Ae.LOWER_A&&e<=Ae.LOWER_Z||Ne(e)}(s)))?0:this.emitNotTerminatedNamedEntity();if(n=r[this.treeIndex],i=(n&Ce.VALUE_LENGTH)>>14,0!==i){if(a===Ae.SEMI)return this.emitNamedEntityData(this.treeIndex,i,this.consumed+this.excess);this.decodeMode!==Re.Strict&&(this.result=this.treeIndex,this.consumed+=this.excess,this.excess=0)}}var s;return-1}emitNotTerminatedNamedEntity(){var e;const{result:t,decodeTree:r}=this,n=(r[t]&Ce.VALUE_LENGTH)>>14;return this.emitNamedEntityData(t,n,this.consumed),null===(e=this.errors)||void 0===e||e.missingSemicolonAfterCharacterReference(),this.consumed}emitNamedEntityData(e,t,r){const{decodeTree:n}=this;return this.emitCodePoint(1===t?n[e]&~Ce.VALUE_LENGTH:n[e+1],r),3===t&&this.emitCodePoint(n[e+2],r),r}end(){var e;switch(this.state){case Te.NamedEntity:return 0===this.result||this.decodeMode===Re.Attribute&&this.result!==this.treeIndex?0:this.emitNotTerminatedNamedEntity();case Te.NumericDecimal:return this.emitNumericEntity(0,2);case Te.NumericHex:return this.emitNumericEntity(0,3);case Te.NumericStart:return null===(e=this.errors)||void 0===e||e.absenceOfDigitsInNumericCharacterReference(this.consumed),0;case Te.EntityStart:return 0}}}function Ie(e){let t="";const r=new qe(e,(e=>t+=Ee(e)));return function(e,n){let i=0,s=0;for(;(s=e.indexOf("&",s))>=0;){t+=e.slice(i,s),r.startEntity(n);const a=r.write(e,s+1);if(a<0){i=s+r.end();break}i=s+a,s=0===a?i+1:i}const a=t+e.slice(i);return t="",a}}function De(e,t,r,n){const i=(t&Ce.BRANCH_LENGTH)>>7,s=t&Ce.JUMP_TABLE;if(0===i)return 0!==s&&n===s?r:-1;if(s){const t=n-s;return t<0||t>=i?-1:e[r+t]-1}let a=r,o=a+i-1;for(;a<=o;){const t=a+o>>>1,r=e[t];if(r<n)a=t+1;else{if(!(r>n))return e[t+i];o=t-1}}return-1}function Le(e){for(let t=1;t<e.length;t++)e[t][0]+=e[t-1][0]+1;return e}Ie(xe),Ie(we),new Map(Le([[9,"&Tab;"],[0,"&NewLine;"],[22,"&excl;"],[0,"&quot;"],[0,"&num;"],[0,"&dollar;"],[0,"&percnt;"],[0,"&amp;"],[0,"&apos;"],[0,"&lpar;"],[0,"&rpar;"],[0,"&ast;"],[0,"&plus;"],[0,"&comma;"],[1,"&period;"],[0,"&sol;"],[10,"&colon;"],[0,"&semi;"],[0,{v:"&lt;",n:8402,o:"&nvlt;"}],[0,{v:"&equals;",n:8421,o:"&bne;"}],[0,{v:"&gt;",n:8402,o:"&nvgt;"}],[0,"&quest;"],[0,"&commat;"],[26,"&lbrack;"],[0,"&bsol;"],[0,"&rbrack;"],[0,"&Hat;"],[0,"&lowbar;"],[0,"&DiacriticalGrave;"],[5,{n:106,o:"&fjlig;"}],[20,"&lbrace;"],[0,"&verbar;"],[0,"&rbrace;"],[34,"&nbsp;"],[0,"&iexcl;"],[0,"&cent;"],[0,"&pound;"],[0,"&curren;"],[0,"&yen;"],[0,"&brvbar;"],[0,"&sect;"],[0,"&die;"],[0,"&copy;"],[0,"&ordf;"],[0,"&laquo;"],[0,"&not;"],[0,"&shy;"],[0,"&circledR;"],[0,"&macr;"],[0,"&deg;"],[0,"&PlusMinus;"],[0,"&sup2;"],[0,"&sup3;"],[0,"&acute;"],[0,"&micro;"],[0,"&para;"],[0,"&centerdot;"],[0,"&cedil;"],[0,"&sup1;"],[0,"&ordm;"],[0,"&raquo;"],[0,"&frac14;"],[0,"&frac12;"],[0,"&frac34;"],[0,"&iquest;"],[0,"&Agrave;"],[0,"&Aacute;"],[0,"&Acirc;"],[0,"&Atilde;"],[0,"&Auml;"],[0,"&angst;"],[0,"&AElig;"],[0,"&Ccedil;"],[0,"&Egrave;"],[0,"&Eacute;"],[0,"&Ecirc;"],[0,"&Euml;"],[0,"&Igrave;"],[0,"&Iacute;"],[0,"&Icirc;"],[0,"&Iuml;"],[0,"&ETH;"],[0,"&Ntilde;"],[0,"&Ograve;"],[0,"&Oacute;"],[0,"&Ocirc;"],[0,"&Otilde;"],[0,"&Ouml;"],[0,"&times;"],[0,"&Oslash;"],[0,"&Ugrave;"],[0,"&Uacute;"],[0,"&Ucirc;"],[0,"&Uuml;"],[0,"&Yacute;"],[0,"&THORN;"],[0,"&szlig;"],[0,"&agrave;"],[0,"&aacute;"],[0,"&acirc;"],[0,"&atilde;"],[0,"&auml;"],[0,"&aring;"],[0,"&aelig;"],[0,"&ccedil;"],[0,"&egrave;"],[0,"&eacute;"],[0,"&ecirc;"],[0,"&euml;"],[0,"&igrave;"],[0,"&iacute;"],[0,"&icirc;"],[0,"&iuml;"],[0,"&eth;"],[0,"&ntilde;"],[0,"&ograve;"],[0,"&oacute;"],[0,"&ocirc;"],[0,"&otilde;"],[0,"&ouml;"],[0,"&div;"],[0,"&oslash;"],[0,"&ugrave;"],[0,"&uacute;"],[0,"&ucirc;"],[0,"&uuml;"],[0,"&yacute;"],[0,"&thorn;"],[0,"&yuml;"],[0,"&Amacr;"],[0,"&amacr;"],[0,"&Abreve;"],[0,"&abreve;"],[0,"&Aogon;"],[0,"&aogon;"],[0,"&Cacute;"],[0,"&cacute;"],[0,"&Ccirc;"],[0,"&ccirc;"],[0,"&Cdot;"],[0,"&cdot;"],[0,"&Ccaron;"],[0,"&ccaron;"],[0,"&Dcaron;"],[0,"&dcaron;"],[0,"&Dstrok;"],[0,"&dstrok;"],[0,"&Emacr;"],[0,"&emacr;"],[2,"&Edot;"],[0,"&edot;"],[0,"&Eogon;"],[0,"&eogon;"],[0,"&Ecaron;"],[0,"&ecaron;"],[0,"&Gcirc;"],[0,"&gcirc;"],[0,"&Gbreve;"],[0,"&gbreve;"],[0,"&Gdot;"],[0,"&gdot;"],[0,"&Gcedil;"],[1,"&Hcirc;"],[0,"&hcirc;"],[0,"&Hstrok;"],[0,"&hstrok;"],[0,"&Itilde;"],[0,"&itilde;"],[0,"&Imacr;"],[0,"&imacr;"],[2,"&Iogon;"],[0,"&iogon;"],[0,"&Idot;"],[0,"&imath;"],[0,"&IJlig;"],[0,"&ijlig;"],[0,"&Jcirc;"],[0,"&jcirc;"],[0,"&Kcedil;"],[0,"&kcedil;"],[0,"&kgreen;"],[0,"&Lacute;"],[0,"&lacute;"],[0,"&Lcedil;"],[0,"&lcedil;"],[0,"&Lcaron;"],[0,"&lcaron;"],[0,"&Lmidot;"],[0,"&lmidot;"],[0,"&Lstrok;"],[0,"&lstrok;"],[0,"&Nacute;"],[0,"&nacute;"],[0,"&Ncedil;"],[0,"&ncedil;"],[0,"&Ncaron;"],[0,"&ncaron;"],[0,"&napos;"],[0,"&ENG;"],[0,"&eng;"],[0,"&Omacr;"],[0,"&omacr;"],[2,"&Odblac;"],[0,"&odblac;"],[0,"&OElig;"],[0,"&oelig;"],[0,"&Racute;"],[0,"&racute;"],[0,"&Rcedil;"],[0,"&rcedil;"],[0,"&Rcaron;"],[0,"&rcaron;"],[0,"&Sacute;"],[0,"&sacute;"],[0,"&Scirc;"],[0,"&scirc;"],[0,"&Scedil;"],[0,"&scedil;"],[0,"&Scaron;"],[0,"&scaron;"],[0,"&Tcedil;"],[0,"&tcedil;"],[0,"&Tcaron;"],[0,"&tcaron;"],[0,"&Tstrok;"],[0,"&tstrok;"],[0,"&Utilde;"],[0,"&utilde;"],[0,"&Umacr;"],[0,"&umacr;"],[0,"&Ubreve;"],[0,"&ubreve;"],[0,"&Uring;"],[0,"&uring;"],[0,"&Udblac;"],[0,"&udblac;"],[0,"&Uogon;"],[0,"&uogon;"],[0,"&Wcirc;"],[0,"&wcirc;"],[0,"&Ycirc;"],[0,"&ycirc;"],[0,"&Yuml;"],[0,"&Zacute;"],[0,"&zacute;"],[0,"&Zdot;"],[0,"&zdot;"],[0,"&Zcaron;"],[0,"&zcaron;"],[19,"&fnof;"],[34,"&imped;"],[63,"&gacute;"],[65,"&jmath;"],[142,"&circ;"],[0,"&caron;"],[16,"&breve;"],[0,"&DiacriticalDot;"],[0,"&ring;"],[0,"&ogon;"],[0,"&DiacriticalTilde;"],[0,"&dblac;"],[51,"&DownBreve;"],[127,"&Alpha;"],[0,"&Beta;"],[0,"&Gamma;"],[0,"&Delta;"],[0,"&Epsilon;"],[0,"&Zeta;"],[0,"&Eta;"],[0,"&Theta;"],[0,"&Iota;"],[0,"&Kappa;"],[0,"&Lambda;"],[0,"&Mu;"],[0,"&Nu;"],[0,"&Xi;"],[0,"&Omicron;"],[0,"&Pi;"],[0,"&Rho;"],[1,"&Sigma;"],[0,"&Tau;"],[0,"&Upsilon;"],[0,"&Phi;"],[0,"&Chi;"],[0,"&Psi;"],[0,"&ohm;"],[7,"&alpha;"],[0,"&beta;"],[0,"&gamma;"],[0,"&delta;"],[0,"&epsi;"],[0,"&zeta;"],[0,"&eta;"],[0,"&theta;"],[0,"&iota;"],[0,"&kappa;"],[0,"&lambda;"],[0,"&mu;"],[0,"&nu;"],[0,"&xi;"],[0,"&omicron;"],[0,"&pi;"],[0,"&rho;"],[0,"&sigmaf;"],[0,"&sigma;"],[0,"&tau;"],[0,"&upsi;"],[0,"&phi;"],[0,"&chi;"],[0,"&psi;"],[0,"&omega;"],[7,"&thetasym;"],[0,"&Upsi;"],[2,"&phiv;"],[0,"&piv;"],[5,"&Gammad;"],[0,"&digamma;"],[18,"&kappav;"],[0,"&rhov;"],[3,"&epsiv;"],[0,"&backepsilon;"],[10,"&IOcy;"],[0,"&DJcy;"],[0,"&GJcy;"],[0,"&Jukcy;"],[0,"&DScy;"],[0,"&Iukcy;"],[0,"&YIcy;"],[0,"&Jsercy;"],[0,"&LJcy;"],[0,"&NJcy;"],[0,"&TSHcy;"],[0,"&KJcy;"],[1,"&Ubrcy;"],[0,"&DZcy;"],[0,"&Acy;"],[0,"&Bcy;"],[0,"&Vcy;"],[0,"&Gcy;"],[0,"&Dcy;"],[0,"&IEcy;"],[0,"&ZHcy;"],[0,"&Zcy;"],[0,"&Icy;"],[0,"&Jcy;"],[0,"&Kcy;"],[0,"&Lcy;"],[0,"&Mcy;"],[0,"&Ncy;"],[0,"&Ocy;"],[0,"&Pcy;"],[0,"&Rcy;"],[0,"&Scy;"],[0,"&Tcy;"],[0,"&Ucy;"],[0,"&Fcy;"],[0,"&KHcy;"],[0,"&TScy;"],[0,"&CHcy;"],[0,"&SHcy;"],[0,"&SHCHcy;"],[0,"&HARDcy;"],[0,"&Ycy;"],[0,"&SOFTcy;"],[0,"&Ecy;"],[0,"&YUcy;"],[0,"&YAcy;"],[0,"&acy;"],[0,"&bcy;"],[0,"&vcy;"],[0,"&gcy;"],[0,"&dcy;"],[0,"&iecy;"],[0,"&zhcy;"],[0,"&zcy;"],[0,"&icy;"],[0,"&jcy;"],[0,"&kcy;"],[0,"&lcy;"],[0,"&mcy;"],[0,"&ncy;"],[0,"&ocy;"],[0,"&pcy;"],[0,"&rcy;"],[0,"&scy;"],[0,"&tcy;"],[0,"&ucy;"],[0,"&fcy;"],[0,"&khcy;"],[0,"&tscy;"],[0,"&chcy;"],[0,"&shcy;"],[0,"&shchcy;"],[0,"&hardcy;"],[0,"&ycy;"],[0,"&softcy;"],[0,"&ecy;"],[0,"&yucy;"],[0,"&yacy;"],[1,"&iocy;"],[0,"&djcy;"],[0,"&gjcy;"],[0,"&jukcy;"],[0,"&dscy;"],[0,"&iukcy;"],[0,"&yicy;"],[0,"&jsercy;"],[0,"&ljcy;"],[0,"&njcy;"],[0,"&tshcy;"],[0,"&kjcy;"],[1,"&ubrcy;"],[0,"&dzcy;"],[7074,"&ensp;"],[0,"&emsp;"],[0,"&emsp13;"],[0,"&emsp14;"],[1,"&numsp;"],[0,"&puncsp;"],[0,"&ThinSpace;"],[0,"&hairsp;"],[0,"&NegativeMediumSpace;"],[0,"&zwnj;"],[0,"&zwj;"],[0,"&lrm;"],[0,"&rlm;"],[0,"&dash;"],[2,"&ndash;"],[0,"&mdash;"],[0,"&horbar;"],[0,"&Verbar;"],[1,"&lsquo;"],[0,"&CloseCurlyQuote;"],[0,"&lsquor;"],[1,"&ldquo;"],[0,"&CloseCurlyDoubleQuote;"],[0,"&bdquo;"],[1,"&dagger;"],[0,"&Dagger;"],[0,"&bull;"],[2,"&nldr;"],[0,"&hellip;"],[9,"&permil;"],[0,"&pertenk;"],[0,"&prime;"],[0,"&Prime;"],[0,"&tprime;"],[0,"&backprime;"],[3,"&lsaquo;"],[0,"&rsaquo;"],[3,"&oline;"],[2,"&caret;"],[1,"&hybull;"],[0,"&frasl;"],[10,"&bsemi;"],[7,"&qprime;"],[7,{v:"&MediumSpace;",n:8202,o:"&ThickSpace;"}],[0,"&NoBreak;"],[0,"&af;"],[0,"&InvisibleTimes;"],[0,"&ic;"],[72,"&euro;"],[46,"&tdot;"],[0,"&DotDot;"],[37,"&complexes;"],[2,"&incare;"],[4,"&gscr;"],[0,"&hamilt;"],[0,"&Hfr;"],[0,"&Hopf;"],[0,"&planckh;"],[0,"&hbar;"],[0,"&imagline;"],[0,"&Ifr;"],[0,"&lagran;"],[0,"&ell;"],[1,"&naturals;"],[0,"&numero;"],[0,"&copysr;"],[0,"&weierp;"],[0,"&Popf;"],[0,"&Qopf;"],[0,"&realine;"],[0,"&real;"],[0,"&reals;"],[0,"&rx;"],[3,"&trade;"],[1,"&integers;"],[2,"&mho;"],[0,"&zeetrf;"],[0,"&iiota;"],[2,"&bernou;"],[0,"&Cayleys;"],[1,"&escr;"],[0,"&Escr;"],[0,"&Fouriertrf;"],[1,"&Mellintrf;"],[0,"&order;"],[0,"&alefsym;"],[0,"&beth;"],[0,"&gimel;"],[0,"&daleth;"],[12,"&CapitalDifferentialD;"],[0,"&dd;"],[0,"&ee;"],[0,"&ii;"],[10,"&frac13;"],[0,"&frac23;"],[0,"&frac15;"],[0,"&frac25;"],[0,"&frac35;"],[0,"&frac45;"],[0,"&frac16;"],[0,"&frac56;"],[0,"&frac18;"],[0,"&frac38;"],[0,"&frac58;"],[0,"&frac78;"],[49,"&larr;"],[0,"&ShortUpArrow;"],[0,"&rarr;"],[0,"&darr;"],[0,"&harr;"],[0,"&updownarrow;"],[0,"&nwarr;"],[0,"&nearr;"],[0,"&LowerRightArrow;"],[0,"&LowerLeftArrow;"],[0,"&nlarr;"],[0,"&nrarr;"],[1,{v:"&rarrw;",n:824,o:"&nrarrw;"}],[0,"&Larr;"],[0,"&Uarr;"],[0,"&Rarr;"],[0,"&Darr;"],[0,"&larrtl;"],[0,"&rarrtl;"],[0,"&LeftTeeArrow;"],[0,"&mapstoup;"],[0,"&map;"],[0,"&DownTeeArrow;"],[1,"&hookleftarrow;"],[0,"&hookrightarrow;"],[0,"&larrlp;"],[0,"&looparrowright;"],[0,"&harrw;"],[0,"&nharr;"],[1,"&lsh;"],[0,"&rsh;"],[0,"&ldsh;"],[0,"&rdsh;"],[1,"&crarr;"],[0,"&cularr;"],[0,"&curarr;"],[2,"&circlearrowleft;"],[0,"&circlearrowright;"],[0,"&leftharpoonup;"],[0,"&DownLeftVector;"],[0,"&RightUpVector;"],[0,"&LeftUpVector;"],[0,"&rharu;"],[0,"&DownRightVector;"],[0,"&dharr;"],[0,"&dharl;"],[0,"&RightArrowLeftArrow;"],[0,"&udarr;"],[0,"&LeftArrowRightArrow;"],[0,"&leftleftarrows;"],[0,"&upuparrows;"],[0,"&rightrightarrows;"],[0,"&ddarr;"],[0,"&leftrightharpoons;"],[0,"&Equilibrium;"],[0,"&nlArr;"],[0,"&nhArr;"],[0,"&nrArr;"],[0,"&DoubleLeftArrow;"],[0,"&DoubleUpArrow;"],[0,"&DoubleRightArrow;"],[0,"&dArr;"],[0,"&DoubleLeftRightArrow;"],[0,"&DoubleUpDownArrow;"],[0,"&nwArr;"],[0,"&neArr;"],[0,"&seArr;"],[0,"&swArr;"],[0,"&lAarr;"],[0,"&rAarr;"],[1,"&zigrarr;"],[6,"&larrb;"],[0,"&rarrb;"],[15,"&DownArrowUpArrow;"],[7,"&loarr;"],[0,"&roarr;"],[0,"&hoarr;"],[0,"&forall;"],[0,"&comp;"],[0,{v:"&part;",n:824,o:"&npart;"}],[0,"&exist;"],[0,"&nexist;"],[0,"&empty;"],[1,"&Del;"],[0,"&Element;"],[0,"&NotElement;"],[1,"&ni;"],[0,"&notni;"],[2,"&prod;"],[0,"&coprod;"],[0,"&sum;"],[0,"&minus;"],[0,"&MinusPlus;"],[0,"&dotplus;"],[1,"&Backslash;"],[0,"&lowast;"],[0,"&compfn;"],[1,"&radic;"],[2,"&prop;"],[0,"&infin;"],[0,"&angrt;"],[0,{v:"&ang;",n:8402,o:"&nang;"}],[0,"&angmsd;"],[0,"&angsph;"],[0,"&mid;"],[0,"&nmid;"],[0,"&DoubleVerticalBar;"],[0,"&NotDoubleVerticalBar;"],[0,"&and;"],[0,"&or;"],[0,{v:"&cap;",n:65024,o:"&caps;"}],[0,{v:"&cup;",n:65024,o:"&cups;"}],[0,"&int;"],[0,"&Int;"],[0,"&iiint;"],[0,"&conint;"],[0,"&Conint;"],[0,"&Cconint;"],[0,"&cwint;"],[0,"&ClockwiseContourIntegral;"],[0,"&awconint;"],[0,"&there4;"],[0,"&becaus;"],[0,"&ratio;"],[0,"&Colon;"],[0,"&dotminus;"],[1,"&mDDot;"],[0,"&homtht;"],[0,{v:"&sim;",n:8402,o:"&nvsim;"}],[0,{v:"&backsim;",n:817,o:"&race;"}],[0,{v:"&ac;",n:819,o:"&acE;"}],[0,"&acd;"],[0,"&VerticalTilde;"],[0,"&NotTilde;"],[0,{v:"&eqsim;",n:824,o:"&nesim;"}],[0,"&sime;"],[0,"&NotTildeEqual;"],[0,"&cong;"],[0,"&simne;"],[0,"&ncong;"],[0,"&ap;"],[0,"&nap;"],[0,"&ape;"],[0,{v:"&apid;",n:824,o:"&napid;"}],[0,"&backcong;"],[0,{v:"&asympeq;",n:8402,o:"&nvap;"}],[0,{v:"&bump;",n:824,o:"&nbump;"}],[0,{v:"&bumpe;",n:824,o:"&nbumpe;"}],[0,{v:"&doteq;",n:824,o:"&nedot;"}],[0,"&doteqdot;"],[0,"&efDot;"],[0,"&erDot;"],[0,"&Assign;"],[0,"&ecolon;"],[0,"&ecir;"],[0,"&circeq;"],[1,"&wedgeq;"],[0,"&veeeq;"],[1,"&triangleq;"],[2,"&equest;"],[0,"&ne;"],[0,{v:"&Congruent;",n:8421,o:"&bnequiv;"}],[0,"&nequiv;"],[1,{v:"&le;",n:8402,o:"&nvle;"}],[0,{v:"&ge;",n:8402,o:"&nvge;"}],[0,{v:"&lE;",n:824,o:"&nlE;"}],[0,{v:"&gE;",n:824,o:"&ngE;"}],[0,{v:"&lnE;",n:65024,o:"&lvertneqq;"}],[0,{v:"&gnE;",n:65024,o:"&gvertneqq;"}],[0,{v:"&ll;",n:new Map(Le([[824,"&nLtv;"],[7577,"&nLt;"]]))}],[0,{v:"&gg;",n:new Map(Le([[824,"&nGtv;"],[7577,"&nGt;"]]))}],[0,"&between;"],[0,"&NotCupCap;"],[0,"&nless;"],[0,"&ngt;"],[0,"&nle;"],[0,"&nge;"],[0,"&lesssim;"],[0,"&GreaterTilde;"],[0,"&nlsim;"],[0,"&ngsim;"],[0,"&LessGreater;"],[0,"&gl;"],[0,"&NotLessGreater;"],[0,"&NotGreaterLess;"],[0,"&pr;"],[0,"&sc;"],[0,"&prcue;"],[0,"&sccue;"],[0,"&PrecedesTilde;"],[0,{v:"&scsim;",n:824,o:"&NotSucceedsTilde;"}],[0,"&NotPrecedes;"],[0,"&NotSucceeds;"],[0,{v:"&sub;",n:8402,o:"&NotSubset;"}],[0,{v:"&sup;",n:8402,o:"&NotSuperset;"}],[0,"&nsub;"],[0,"&nsup;"],[0,"&sube;"],[0,"&supe;"],[0,"&NotSubsetEqual;"],[0,"&NotSupersetEqual;"],[0,{v:"&subne;",n:65024,o:"&varsubsetneq;"}],[0,{v:"&supne;",n:65024,o:"&varsupsetneq;"}],[1,"&cupdot;"],[0,"&UnionPlus;"],[0,{v:"&sqsub;",n:824,o:"&NotSquareSubset;"}],[0,{v:"&sqsup;",n:824,o:"&NotSquareSuperset;"}],[0,"&sqsube;"],[0,"&sqsupe;"],[0,{v:"&sqcap;",n:65024,o:"&sqcaps;"}],[0,{v:"&sqcup;",n:65024,o:"&sqcups;"}],[0,"&CirclePlus;"],[0,"&CircleMinus;"],[0,"&CircleTimes;"],[0,"&osol;"],[0,"&CircleDot;"],[0,"&circledcirc;"],[0,"&circledast;"],[1,"&circleddash;"],[0,"&boxplus;"],[0,"&boxminus;"],[0,"&boxtimes;"],[0,"&dotsquare;"],[0,"&RightTee;"],[0,"&dashv;"],[0,"&DownTee;"],[0,"&bot;"],[1,"&models;"],[0,"&DoubleRightTee;"],[0,"&Vdash;"],[0,"&Vvdash;"],[0,"&VDash;"],[0,"&nvdash;"],[0,"&nvDash;"],[0,"&nVdash;"],[0,"&nVDash;"],[0,"&prurel;"],[1,"&LeftTriangle;"],[0,"&RightTriangle;"],[0,{v:"&LeftTriangleEqual;",n:8402,o:"&nvltrie;"}],[0,{v:"&RightTriangleEqual;",n:8402,o:"&nvrtrie;"}],[0,"&origof;"],[0,"&imof;"],[0,"&multimap;"],[0,"&hercon;"],[0,"&intcal;"],[0,"&veebar;"],[1,"&barvee;"],[0,"&angrtvb;"],[0,"&lrtri;"],[0,"&bigwedge;"],[0,"&bigvee;"],[0,"&bigcap;"],[0,"&bigcup;"],[0,"&diam;"],[0,"&sdot;"],[0,"&sstarf;"],[0,"&divideontimes;"],[0,"&bowtie;"],[0,"&ltimes;"],[0,"&rtimes;"],[0,"&leftthreetimes;"],[0,"&rightthreetimes;"],[0,"&backsimeq;"],[0,"&curlyvee;"],[0,"&curlywedge;"],[0,"&Sub;"],[0,"&Sup;"],[0,"&Cap;"],[0,"&Cup;"],[0,"&fork;"],[0,"&epar;"],[0,"&lessdot;"],[0,"&gtdot;"],[0,{v:"&Ll;",n:824,o:"&nLl;"}],[0,{v:"&Gg;",n:824,o:"&nGg;"}],[0,{v:"&leg;",n:65024,o:"&lesg;"}],[0,{v:"&gel;",n:65024,o:"&gesl;"}],[2,"&cuepr;"],[0,"&cuesc;"],[0,"&NotPrecedesSlantEqual;"],[0,"&NotSucceedsSlantEqual;"],[0,"&NotSquareSubsetEqual;"],[0,"&NotSquareSupersetEqual;"],[2,"&lnsim;"],[0,"&gnsim;"],[0,"&precnsim;"],[0,"&scnsim;"],[0,"&nltri;"],[0,"&NotRightTriangle;"],[0,"&nltrie;"],[0,"&NotRightTriangleEqual;"],[0,"&vellip;"],[0,"&ctdot;"],[0,"&utdot;"],[0,"&dtdot;"],[0,"&disin;"],[0,"&isinsv;"],[0,"&isins;"],[0,{v:"&isindot;",n:824,o:"&notindot;"}],[0,"&notinvc;"],[0,"&notinvb;"],[1,{v:"&isinE;",n:824,o:"&notinE;"}],[0,"&nisd;"],[0,"&xnis;"],[0,"&nis;"],[0,"&notnivc;"],[0,"&notnivb;"],[6,"&barwed;"],[0,"&Barwed;"],[1,"&lceil;"],[0,"&rceil;"],[0,"&LeftFloor;"],[0,"&rfloor;"],[0,"&drcrop;"],[0,"&dlcrop;"],[0,"&urcrop;"],[0,"&ulcrop;"],[0,"&bnot;"],[1,"&profline;"],[0,"&profsurf;"],[1,"&telrec;"],[0,"&target;"],[5,"&ulcorn;"],[0,"&urcorn;"],[0,"&dlcorn;"],[0,"&drcorn;"],[2,"&frown;"],[0,"&smile;"],[9,"&cylcty;"],[0,"&profalar;"],[7,"&topbot;"],[6,"&ovbar;"],[1,"&solbar;"],[60,"&angzarr;"],[51,"&lmoustache;"],[0,"&rmoustache;"],[2,"&OverBracket;"],[0,"&bbrk;"],[0,"&bbrktbrk;"],[37,"&OverParenthesis;"],[0,"&UnderParenthesis;"],[0,"&OverBrace;"],[0,"&UnderBrace;"],[2,"&trpezium;"],[4,"&elinters;"],[59,"&blank;"],[164,"&circledS;"],[55,"&boxh;"],[1,"&boxv;"],[9,"&boxdr;"],[3,"&boxdl;"],[3,"&boxur;"],[3,"&boxul;"],[3,"&boxvr;"],[7,"&boxvl;"],[7,"&boxhd;"],[7,"&boxhu;"],[7,"&boxvh;"],[19,"&boxH;"],[0,"&boxV;"],[0,"&boxdR;"],[0,"&boxDr;"],[0,"&boxDR;"],[0,"&boxdL;"],[0,"&boxDl;"],[0,"&boxDL;"],[0,"&boxuR;"],[0,"&boxUr;"],[0,"&boxUR;"],[0,"&boxuL;"],[0,"&boxUl;"],[0,"&boxUL;"],[0,"&boxvR;"],[0,"&boxVr;"],[0,"&boxVR;"],[0,"&boxvL;"],[0,"&boxVl;"],[0,"&boxVL;"],[0,"&boxHd;"],[0,"&boxhD;"],[0,"&boxHD;"],[0,"&boxHu;"],[0,"&boxhU;"],[0,"&boxHU;"],[0,"&boxvH;"],[0,"&boxVh;"],[0,"&boxVH;"],[19,"&uhblk;"],[3,"&lhblk;"],[3,"&block;"],[8,"&blk14;"],[0,"&blk12;"],[0,"&blk34;"],[13,"&square;"],[8,"&blacksquare;"],[0,"&EmptyVerySmallSquare;"],[1,"&rect;"],[0,"&marker;"],[2,"&fltns;"],[1,"&bigtriangleup;"],[0,"&blacktriangle;"],[0,"&triangle;"],[2,"&blacktriangleright;"],[0,"&rtri;"],[3,"&bigtriangledown;"],[0,"&blacktriangledown;"],[0,"&dtri;"],[2,"&blacktriangleleft;"],[0,"&ltri;"],[6,"&loz;"],[0,"&cir;"],[32,"&tridot;"],[2,"&bigcirc;"],[8,"&ultri;"],[0,"&urtri;"],[0,"&lltri;"],[0,"&EmptySmallSquare;"],[0,"&FilledSmallSquare;"],[8,"&bigstar;"],[0,"&star;"],[7,"&phone;"],[49,"&female;"],[1,"&male;"],[29,"&spades;"],[2,"&clubs;"],[1,"&hearts;"],[0,"&diamondsuit;"],[3,"&sung;"],[2,"&flat;"],[0,"&natural;"],[0,"&sharp;"],[163,"&check;"],[3,"&cross;"],[8,"&malt;"],[21,"&sext;"],[33,"&VerticalSeparator;"],[25,"&lbbrk;"],[0,"&rbbrk;"],[84,"&bsolhsub;"],[0,"&suphsol;"],[28,"&LeftDoubleBracket;"],[0,"&RightDoubleBracket;"],[0,"&lang;"],[0,"&rang;"],[0,"&Lang;"],[0,"&Rang;"],[0,"&loang;"],[0,"&roang;"],[7,"&longleftarrow;"],[0,"&longrightarrow;"],[0,"&longleftrightarrow;"],[0,"&DoubleLongLeftArrow;"],[0,"&DoubleLongRightArrow;"],[0,"&DoubleLongLeftRightArrow;"],[1,"&longmapsto;"],[2,"&dzigrarr;"],[258,"&nvlArr;"],[0,"&nvrArr;"],[0,"&nvHarr;"],[0,"&Map;"],[6,"&lbarr;"],[0,"&bkarow;"],[0,"&lBarr;"],[0,"&dbkarow;"],[0,"&drbkarow;"],[0,"&DDotrahd;"],[0,"&UpArrowBar;"],[0,"&DownArrowBar;"],[2,"&Rarrtl;"],[2,"&latail;"],[0,"&ratail;"],[0,"&lAtail;"],[0,"&rAtail;"],[0,"&larrfs;"],[0,"&rarrfs;"],[0,"&larrbfs;"],[0,"&rarrbfs;"],[2,"&nwarhk;"],[0,"&nearhk;"],[0,"&hksearow;"],[0,"&hkswarow;"],[0,"&nwnear;"],[0,"&nesear;"],[0,"&seswar;"],[0,"&swnwar;"],[8,{v:"&rarrc;",n:824,o:"&nrarrc;"}],[1,"&cudarrr;"],[0,"&ldca;"],[0,"&rdca;"],[0,"&cudarrl;"],[0,"&larrpl;"],[2,"&curarrm;"],[0,"&cularrp;"],[7,"&rarrpl;"],[2,"&harrcir;"],[0,"&Uarrocir;"],[0,"&lurdshar;"],[0,"&ldrushar;"],[2,"&LeftRightVector;"],[0,"&RightUpDownVector;"],[0,"&DownLeftRightVector;"],[0,"&LeftUpDownVector;"],[0,"&LeftVectorBar;"],[0,"&RightVectorBar;"],[0,"&RightUpVectorBar;"],[0,"&RightDownVectorBar;"],[0,"&DownLeftVectorBar;"],[0,"&DownRightVectorBar;"],[0,"&LeftUpVectorBar;"],[0,"&LeftDownVectorBar;"],[0,"&LeftTeeVector;"],[0,"&RightTeeVector;"],[0,"&RightUpTeeVector;"],[0,"&RightDownTeeVector;"],[0,"&DownLeftTeeVector;"],[0,"&DownRightTeeVector;"],[0,"&LeftUpTeeVector;"],[0,"&LeftDownTeeVector;"],[0,"&lHar;"],[0,"&uHar;"],[0,"&rHar;"],[0,"&dHar;"],[0,"&luruhar;"],[0,"&ldrdhar;"],[0,"&ruluhar;"],[0,"&rdldhar;"],[0,"&lharul;"],[0,"&llhard;"],[0,"&rharul;"],[0,"&lrhard;"],[0,"&udhar;"],[0,"&duhar;"],[0,"&RoundImplies;"],[0,"&erarr;"],[0,"&simrarr;"],[0,"&larrsim;"],[0,"&rarrsim;"],[0,"&rarrap;"],[0,"&ltlarr;"],[1,"&gtrarr;"],[0,"&subrarr;"],[1,"&suplarr;"],[0,"&lfisht;"],[0,"&rfisht;"],[0,"&ufisht;"],[0,"&dfisht;"],[5,"&lopar;"],[0,"&ropar;"],[4,"&lbrke;"],[0,"&rbrke;"],[0,"&lbrkslu;"],[0,"&rbrksld;"],[0,"&lbrksld;"],[0,"&rbrkslu;"],[0,"&langd;"],[0,"&rangd;"],[0,"&lparlt;"],[0,"&rpargt;"],[0,"&gtlPar;"],[0,"&ltrPar;"],[3,"&vzigzag;"],[1,"&vangrt;"],[0,"&angrtvbd;"],[6,"&ange;"],[0,"&range;"],[0,"&dwangle;"],[0,"&uwangle;"],[0,"&angmsdaa;"],[0,"&angmsdab;"],[0,"&angmsdac;"],[0,"&angmsdad;"],[0,"&angmsdae;"],[0,"&angmsdaf;"],[0,"&angmsdag;"],[0,"&angmsdah;"],[0,"&bemptyv;"],[0,"&demptyv;"],[0,"&cemptyv;"],[0,"&raemptyv;"],[0,"&laemptyv;"],[0,"&ohbar;"],[0,"&omid;"],[0,"&opar;"],[1,"&operp;"],[1,"&olcross;"],[0,"&odsold;"],[1,"&olcir;"],[0,"&ofcir;"],[0,"&olt;"],[0,"&ogt;"],[0,"&cirscir;"],[0,"&cirE;"],[0,"&solb;"],[0,"&bsolb;"],[3,"&boxbox;"],[3,"&trisb;"],[0,"&rtriltri;"],[0,{v:"&LeftTriangleBar;",n:824,o:"&NotLeftTriangleBar;"}],[0,{v:"&RightTriangleBar;",n:824,o:"&NotRightTriangleBar;"}],[11,"&iinfin;"],[0,"&infintie;"],[0,"&nvinfin;"],[4,"&eparsl;"],[0,"&smeparsl;"],[0,"&eqvparsl;"],[5,"&blacklozenge;"],[8,"&RuleDelayed;"],[1,"&dsol;"],[9,"&bigodot;"],[0,"&bigoplus;"],[0,"&bigotimes;"],[1,"&biguplus;"],[1,"&bigsqcup;"],[5,"&iiiint;"],[0,"&fpartint;"],[2,"&cirfnint;"],[0,"&awint;"],[0,"&rppolint;"],[0,"&scpolint;"],[0,"&npolint;"],[0,"&pointint;"],[0,"&quatint;"],[0,"&intlarhk;"],[10,"&pluscir;"],[0,"&plusacir;"],[0,"&simplus;"],[0,"&plusdu;"],[0,"&plussim;"],[0,"&plustwo;"],[1,"&mcomma;"],[0,"&minusdu;"],[2,"&loplus;"],[0,"&roplus;"],[0,"&Cross;"],[0,"&timesd;"],[0,"&timesbar;"],[1,"&smashp;"],[0,"&lotimes;"],[0,"&rotimes;"],[0,"&otimesas;"],[0,"&Otimes;"],[0,"&odiv;"],[0,"&triplus;"],[0,"&triminus;"],[0,"&tritime;"],[0,"&intprod;"],[2,"&amalg;"],[0,"&capdot;"],[1,"&ncup;"],[0,"&ncap;"],[0,"&capand;"],[0,"&cupor;"],[0,"&cupcap;"],[0,"&capcup;"],[0,"&cupbrcap;"],[0,"&capbrcup;"],[0,"&cupcup;"],[0,"&capcap;"],[0,"&ccups;"],[0,"&ccaps;"],[2,"&ccupssm;"],[2,"&And;"],[0,"&Or;"],[0,"&andand;"],[0,"&oror;"],[0,"&orslope;"],[0,"&andslope;"],[1,"&andv;"],[0,"&orv;"],[0,"&andd;"],[0,"&ord;"],[1,"&wedbar;"],[6,"&sdote;"],[3,"&simdot;"],[2,{v:"&congdot;",n:824,o:"&ncongdot;"}],[0,"&easter;"],[0,"&apacir;"],[0,{v:"&apE;",n:824,o:"&napE;"}],[0,"&eplus;"],[0,"&pluse;"],[0,"&Esim;"],[0,"&Colone;"],[0,"&Equal;"],[1,"&ddotseq;"],[0,"&equivDD;"],[0,"&ltcir;"],[0,"&gtcir;"],[0,"&ltquest;"],[0,"&gtquest;"],[0,{v:"&leqslant;",n:824,o:"&nleqslant;"}],[0,{v:"&geqslant;",n:824,o:"&ngeqslant;"}],[0,"&lesdot;"],[0,"&gesdot;"],[0,"&lesdoto;"],[0,"&gesdoto;"],[0,"&lesdotor;"],[0,"&gesdotol;"],[0,"&lap;"],[0,"&gap;"],[0,"&lne;"],[0,"&gne;"],[0,"&lnap;"],[0,"&gnap;"],[0,"&lEg;"],[0,"&gEl;"],[0,"&lsime;"],[0,"&gsime;"],[0,"&lsimg;"],[0,"&gsiml;"],[0,"&lgE;"],[0,"&glE;"],[0,"&lesges;"],[0,"&gesles;"],[0,"&els;"],[0,"&egs;"],[0,"&elsdot;"],[0,"&egsdot;"],[0,"&el;"],[0,"&eg;"],[2,"&siml;"],[0,"&simg;"],[0,"&simlE;"],[0,"&simgE;"],[0,{v:"&LessLess;",n:824,o:"&NotNestedLessLess;"}],[0,{v:"&GreaterGreater;",n:824,o:"&NotNestedGreaterGreater;"}],[1,"&glj;"],[0,"&gla;"],[0,"&ltcc;"],[0,"&gtcc;"],[0,"&lescc;"],[0,"&gescc;"],[0,"&smt;"],[0,"&lat;"],[0,{v:"&smte;",n:65024,o:"&smtes;"}],[0,{v:"&late;",n:65024,o:"&lates;"}],[0,"&bumpE;"],[0,{v:"&PrecedesEqual;",n:824,o:"&NotPrecedesEqual;"}],[0,{v:"&sce;",n:824,o:"&NotSucceedsEqual;"}],[2,"&prE;"],[0,"&scE;"],[0,"&precneqq;"],[0,"&scnE;"],[0,"&prap;"],[0,"&scap;"],[0,"&precnapprox;"],[0,"&scnap;"],[0,"&Pr;"],[0,"&Sc;"],[0,"&subdot;"],[0,"&supdot;"],[0,"&subplus;"],[0,"&supplus;"],[0,"&submult;"],[0,"&supmult;"],[0,"&subedot;"],[0,"&supedot;"],[0,{v:"&subE;",n:824,o:"&nsubE;"}],[0,{v:"&supE;",n:824,o:"&nsupE;"}],[0,"&subsim;"],[0,"&supsim;"],[2,{v:"&subnE;",n:65024,o:"&varsubsetneqq;"}],[0,{v:"&supnE;",n:65024,o:"&varsupsetneqq;"}],[2,"&csub;"],[0,"&csup;"],[0,"&csube;"],[0,"&csupe;"],[0,"&subsup;"],[0,"&supsub;"],[0,"&subsub;"],[0,"&supsup;"],[0,"&suphsub;"],[0,"&supdsub;"],[0,"&forkv;"],[0,"&topfork;"],[0,"&mlcp;"],[8,"&Dashv;"],[1,"&Vdashl;"],[0,"&Barv;"],[0,"&vBar;"],[0,"&vBarv;"],[1,"&Vbar;"],[0,"&Not;"],[0,"&bNot;"],[0,"&rnmid;"],[0,"&cirmid;"],[0,"&midcir;"],[0,"&topcir;"],[0,"&nhpar;"],[0,"&parsim;"],[9,{v:"&parsl;",n:8421,o:"&nparsl;"}],[44343,{n:new Map(Le([[56476,"&Ascr;"],[1,"&Cscr;"],[0,"&Dscr;"],[2,"&Gscr;"],[2,"&Jscr;"],[0,"&Kscr;"],[2,"&Nscr;"],[0,"&Oscr;"],[0,"&Pscr;"],[0,"&Qscr;"],[1,"&Sscr;"],[0,"&Tscr;"],[0,"&Uscr;"],[0,"&Vscr;"],[0,"&Wscr;"],[0,"&Xscr;"],[0,"&Yscr;"],[0,"&Zscr;"],[0,"&ascr;"],[0,"&bscr;"],[0,"&cscr;"],[0,"&dscr;"],[1,"&fscr;"],[1,"&hscr;"],[0,"&iscr;"],[0,"&jscr;"],[0,"&kscr;"],[0,"&lscr;"],[0,"&mscr;"],[0,"&nscr;"],[1,"&pscr;"],[0,"&qscr;"],[0,"&rscr;"],[0,"&sscr;"],[0,"&tscr;"],[0,"&uscr;"],[0,"&vscr;"],[0,"&wscr;"],[0,"&xscr;"],[0,"&yscr;"],[0,"&zscr;"],[52,"&Afr;"],[0,"&Bfr;"],[1,"&Dfr;"],[0,"&Efr;"],[0,"&Ffr;"],[0,"&Gfr;"],[2,"&Jfr;"],[0,"&Kfr;"],[0,"&Lfr;"],[0,"&Mfr;"],[0,"&Nfr;"],[0,"&Ofr;"],[0,"&Pfr;"],[0,"&Qfr;"],[1,"&Sfr;"],[0,"&Tfr;"],[0,"&Ufr;"],[0,"&Vfr;"],[0,"&Wfr;"],[0,"&Xfr;"],[0,"&Yfr;"],[1,"&afr;"],[0,"&bfr;"],[0,"&cfr;"],[0,"&dfr;"],[0,"&efr;"],[0,"&ffr;"],[0,"&gfr;"],[0,"&hfr;"],[0,"&ifr;"],[0,"&jfr;"],[0,"&kfr;"],[0,"&lfr;"],[0,"&mfr;"],[0,"&nfr;"],[0,"&ofr;"],[0,"&pfr;"],[0,"&qfr;"],[0,"&rfr;"],[0,"&sfr;"],[0,"&tfr;"],[0,"&ufr;"],[0,"&vfr;"],[0,"&wfr;"],[0,"&xfr;"],[0,"&yfr;"],[0,"&zfr;"],[0,"&Aopf;"],[0,"&Bopf;"],[1,"&Dopf;"],[0,"&Eopf;"],[0,"&Fopf;"],[0,"&Gopf;"],[1,"&Iopf;"],[0,"&Jopf;"],[0,"&Kopf;"],[0,"&Lopf;"],[0,"&Mopf;"],[1,"&Oopf;"],[3,"&Sopf;"],[0,"&Topf;"],[0,"&Uopf;"],[0,"&Vopf;"],[0,"&Wopf;"],[0,"&Xopf;"],[0,"&Yopf;"],[1,"&aopf;"],[0,"&bopf;"],[0,"&copf;"],[0,"&dopf;"],[0,"&eopf;"],[0,"&fopf;"],[0,"&gopf;"],[0,"&hopf;"],[0,"&iopf;"],[0,"&jopf;"],[0,"&kopf;"],[0,"&lopf;"],[0,"&mopf;"],[0,"&nopf;"],[0,"&oopf;"],[0,"&popf;"],[0,"&qopf;"],[0,"&ropf;"],[0,"&sopf;"],[0,"&topf;"],[0,"&uopf;"],[0,"&vopf;"],[0,"&wopf;"],[0,"&xopf;"],[0,"&yopf;"],[0,"&zopf;"]]))}],[8906,"&fflig;"],[0,"&filig;"],[0,"&fllig;"],[0,"&ffilig;"],[0,"&ffllig;"]]));const Oe=/["&'<>$\x80-\uFFFF]/g,Pe=new Map([[34,"&quot;"],[38,"&amp;"],[39,"&apos;"],[60,"&lt;"],[62,"&gt;"]]),Be=null!=String.prototype.codePointAt?(e,t)=>e.codePointAt(t):(e,t)=>55296==(64512&e.charCodeAt(t))?1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536:e.charCodeAt(t);function Me(e){let t,r="",n=0;for(;null!==(t=Oe.exec(e));){const i=t.index,s=e.charCodeAt(i),a=Pe.get(s);void 0!==a?(r+=e.substring(n,i)+a,n=i+1):(r+=`${e.substring(n,i)}&#x${Be(e,i).toString(16)};`,n=Oe.lastIndex+=Number(55296==(64512&s)))}return r+e.substr(n)}function Ue(e,t){return function(r){let n,i=0,s="";for(;n=e.exec(r);)i!==n.index&&(s+=r.substring(i,n.index)),s+=t.get(n[0].charCodeAt(0)),i=n.index+1;return s+r.substring(i)}}Ue(/[&<>'"]/g,Pe);const ze=Ue(/["&\u00A0]/g,new Map([[34,"&quot;"],[38,"&amp;"],[160,"&nbsp;"]])),Fe=Ue(/[&<>\u00A0]/g,new Map([[38,"&amp;"],[60,"&lt;"],[62,"&gt;"],[160,"&nbsp;"]]));var je,He;!function(e){e[e.XML=0]="XML",e[e.HTML=1]="HTML"}(je||(je={})),function(e){e[e.UTF8=0]="UTF8",e[e.ASCII=1]="ASCII",e[e.Extensive=2]="Extensive",e[e.Attribute=3]="Attribute",e[e.Text=4]="Text"}(He||(He={}));const Ve=new Map(["altGlyph","altGlyphDef","altGlyphItem","animateColor","animateMotion","animateTransform","clipPath","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","foreignObject","glyphRef","linearGradient","radialGradient","textPath"].map((e=>[e.toLowerCase(),e]))),We=new Map(["definitionURL","attributeName","attributeType","baseFrequency","baseProfile","calcMode","clipPathUnits","diffuseConstant","edgeMode","filterUnits","glyphRef","gradientTransform","gradientUnits","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","lengthAdjust","limitingConeAngle","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","numOctaves","pathLength","patternContentUnits","patternTransform","patternUnits","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","specularConstant","specularExponent","spreadMethod","startOffset","stdDeviation","stitchTiles","surfaceScale","systemLanguage","tableValues","targetX","targetY","textLength","viewBox","viewTarget","xChannelSelector","yChannelSelector","zoomAndPan"].map((e=>[e.toLowerCase(),e]))),Ge=new Set(["style","script","xmp","iframe","noembed","noframes","plaintext","noscript"]);function $e(e){return e.replace(/"/g,"&quot;")}const Ze=new Set(["area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr"]);function Je(e,t={}){const r="length"in e?e:[e];let n="";for(let e=0;e<r.length;e++)n+=Ye(r[e],t);return n}const Ke=Je;function Ye(e,t){switch(e.type){case ae:return Je(e.children,t);case fe:case le:return`<${e.data}>`;case ce:return`\x3c!--${e.data}--\x3e`;case pe:return function(e){return`<![CDATA[${e.children[0].data}]]>`}(e);case ue:case de:case he:return function(e,t){var r;"foreign"===t.xmlMode&&(e.name=null!==(r=Ve.get(e.name))&&void 0!==r?r:e.name,e.parent&&Xe.has(e.parent.name)&&(t={...t,xmlMode:!1})),!t.xmlMode&&Qe.has(e.name)&&(t={...t,xmlMode:"foreign"});let n=`<${e.name}`;const i=function(e,t){var r;if(!e)return;const n=!1===(null!==(r=t.encodeEntities)&&void 0!==r?r:t.decodeEntities)?$e:t.xmlMode||"utf8"!==t.encodeEntities?Me:ze;return Object.keys(e).map((r=>{var i,s;const a=null!==(i=e[r])&&void 0!==i?i:"";return"foreign"===t.xmlMode&&(r=null!==(s=We.get(r))&&void 0!==s?s:r),t.emptyAttrs||t.xmlMode||""!==a?`${r}="${n(a)}"`:r})).join(" ")}(e.attribs,t);return i&&(n+=` ${i}`),0===e.children.length&&(t.xmlMode?!1!==t.selfClosingTags:t.selfClosingTags&&Ze.has(e.name))?(t.xmlMode||(n+=" "),n+="/>"):(n+=">",e.children.length>0&&(n+=Je(e.children,t)),!t.xmlMode&&Ze.has(e.name)||(n+=`</${e.name}>`)),n}(e,t);case oe:return function(e,t){var r;let n=e.data||"";return!1===(null!==(r=t.encodeEntities)&&void 0!==r?r:t.decodeEntities)||!t.xmlMode&&e.parent&&Ge.has(e.parent.name)||(n=t.xmlMode||"utf8"!==t.encodeEntities?Me(n):Fe(n)),n}(e,t)}}const Xe=new Set(["mi","mo","mn","ms","mtext","annotation-xml","foreignObject","desc","title"]),Qe=new Set(["svg","math"]);function et(e,t){return Ke(e,t)}function tt(e,t){return _e(e)?e.children.map((e=>et(e,t))).join(""):""}function rt(e){return Array.isArray(e)?e.map(rt).join(""):me(e)?"br"===e.name?"\n":rt(e.children):ge(e)?rt(e.children):be(e)?e.data:""}function nt(e){return Array.isArray(e)?e.map(nt).join(""):_e(e)&&!ve(e)?nt(e.children):be(e)?e.data:""}function it(e){return Array.isArray(e)?e.map(it).join(""):_e(e)&&(e.type===ie.Tag||ge(e))?it(e.children):be(e)?e.data:""}function st(e){return _e(e)?e.children:[]}function at(e){return e.parent||null}function ot(e){const t=at(e);if(null!=t)return st(t);const r=[e];let{prev:n,next:i}=e;for(;null!=n;)r.unshift(n),({prev:n}=n);for(;null!=i;)r.push(i),({next:i}=i);return r}function lt(e,t){var r;return null===(r=e.attribs)||void 0===r?void 0:r[t]}function ct(e,t){return null!=e.attribs&&Object.prototype.hasOwnProperty.call(e.attribs,t)&&null!=e.attribs[t]}function ut(e){return e.name}function dt(e){let{next:t}=e;for(;null!==t&&!me(t);)({next:t}=t);return t}function ht(e){let{prev:t}=e;for(;null!==t&&!me(t);)({prev:t}=t);return t}function pt(e){if(e.prev&&(e.prev.next=e.next),e.next&&(e.next.prev=e.prev),e.parent){const t=e.parent.children,r=t.lastIndexOf(e);r>=0&&t.splice(r,1)}e.next=null,e.prev=null,e.parent=null}function ft(e,t){const r=t.prev=e.prev;r&&(r.next=t);const n=t.next=e.next;n&&(n.prev=t);const i=t.parent=e.parent;if(i){const r=i.children;r[r.lastIndexOf(e)]=t,e.parent=null}}function mt(e,t){if(pt(t),t.next=null,t.parent=e,e.children.push(t)>1){const r=e.children[e.children.length-2];r.next=t,t.prev=r}else t.prev=null}function gt(e,t){pt(t);const{parent:r}=e,n=e.next;if(t.next=n,t.prev=e,e.next=t,t.parent=r,n){if(n.prev=t,r){const e=r.children;e.splice(e.lastIndexOf(n),0,t)}}else r&&r.children.push(t)}function bt(e,t){if(pt(t),t.parent=e,t.prev=null,1!==e.children.unshift(t)){const r=e.children[1];r.prev=t,t.next=r}else t.next=null}function vt(e,t){pt(t);const{parent:r}=e;if(r){const n=r.children;n.splice(n.indexOf(e),0,t)}e.prev&&(e.prev.next=t),t.parent=r,t.prev=e.prev,t.next=e,e.prev=t}function yt(e,t,r=!0,n=1/0){return _t(e,Array.isArray(t)?t:[t],r,n)}function _t(e,t,r,n){const i=[],s=[Array.isArray(t)?t:[t]],a=[0];for(;;){if(a[0]>=s[0].length){if(1===a.length)return i;s.shift(),a.shift();continue}const t=s[0][a[0]++];if(e(t)&&(i.push(t),--n<=0))return i;r&&_e(t)&&t.children.length>0&&(a.unshift(0),s.unshift(t.children))}}function xt(e,t){return t.find(e)}function wt(e,t,r=!0){const n=Array.isArray(t)?t:[t];for(let t=0;t<n.length;t++){const i=n[t];if(me(i)&&e(i))return i;if(r&&_e(i)&&i.children.length>0){const t=wt(e,i.children,!0);if(t)return t}}return null}function St(e,t){return(Array.isArray(t)?t:[t]).some((t=>me(t)&&e(t)||_e(t)&&St(e,t.children)))}function kt(e,t){const r=[],n=[Array.isArray(t)?t:[t]],i=[0];for(;;){if(i[0]>=n[0].length){if(1===n.length)return r;n.shift(),i.shift();continue}const t=n[0][i[0]++];me(t)&&e(t)&&r.push(t),_e(t)&&t.children.length>0&&(i.unshift(0),n.unshift(t.children))}}const Et={tag_name:e=>"function"==typeof e?t=>me(t)&&e(t.name):"*"===e?me:t=>me(t)&&t.name===e,tag_type:e=>"function"==typeof e?t=>e(t.type):t=>t.type===e,tag_contains:e=>"function"==typeof e?t=>be(t)&&e(t.data):t=>be(t)&&t.data===e};function At(e,t){return"function"==typeof t?r=>me(r)&&t(r.attribs[e]):r=>me(r)&&r.attribs[e]===t}function Ct(e,t){return r=>e(r)||t(r)}function Tt(e){const t=Object.keys(e).map((t=>{const r=e[t];return Object.prototype.hasOwnProperty.call(Et,t)?Et[t](r):At(t,r)}));return 0===t.length?null:t.reduce(Ct)}function Rt(e,t){const r=Tt(e);return!r||r(t)}function Nt(e,t,r,n=1/0){const i=Tt(e);return i?yt(i,t,r,n):[]}function qt(e,t,r=!0){return Array.isArray(t)||(t=[t]),wt(At("id",e),t,r)}function It(e,t,r=!0,n=1/0){return yt(Et.tag_name(e),t,r,n)}function Dt(e,t,r=!0,n=1/0){return yt(At("class",e),t,r,n)}function Lt(e,t,r=!0,n=1/0){return yt(Et.tag_type(e),t,r,n)}function Ot(e){let t=e.length;for(;--t>=0;){const r=e[t];if(t>0&&e.lastIndexOf(r,t-1)>=0)e.splice(t,1);else for(let n=r.parent;n;n=n.parent)if(e.includes(n)){e.splice(t,1);break}}return e}var Pt;function Bt(e,t){const r=[],n=[];if(e===t)return 0;let i=_e(e)?e:e.parent;for(;i;)r.unshift(i),i=i.parent;for(i=_e(t)?t:t.parent;i;)n.unshift(i),i=i.parent;const s=Math.min(r.length,n.length);let a=0;for(;a<s&&r[a]===n[a];)a++;if(0===a)return Pt.DISCONNECTED;const o=r[a-1],l=o.children,c=r[a],u=n[a];return l.indexOf(c)>l.indexOf(u)?o===t?Pt.FOLLOWING|Pt.CONTAINED_BY:Pt.FOLLOWING:o===e?Pt.PRECEDING|Pt.CONTAINS:Pt.PRECEDING}function Mt(e){return(e=e.filter(((e,t,r)=>!r.includes(e,t+1)))).sort(((e,t)=>{const r=Bt(e,t);return r&Pt.PRECEDING?-1:r&Pt.FOLLOWING?1:0})),e}function Ut(e){const t=Ht(Gt,e);return t?"feed"===t.name?function(e){var t;const r=e.children,n={type:"atom",items:It("entry",r).map((e=>{var t;const{children:r}=e,n={media:jt(r)};Wt(n,"id","id",r),Wt(n,"title","title",r);const i=null===(t=Ht("link",r))||void 0===t?void 0:t.attribs.href;i&&(n.link=i);const s=Vt("summary",r)||Vt("content",r);s&&(n.description=s);const a=Vt("updated",r);return a&&(n.pubDate=new Date(a)),n}))};Wt(n,"id","id",r),Wt(n,"title","title",r);const i=null===(t=Ht("link",r))||void 0===t?void 0:t.attribs.href;i&&(n.link=i),Wt(n,"description","subtitle",r);const s=Vt("updated",r);return s&&(n.updated=new Date(s)),Wt(n,"author","email",r,!0),n}(t):function(e){var t,r;const n=null!==(r=null===(t=Ht("channel",e.children))||void 0===t?void 0:t.children)&&void 0!==r?r:[],i={type:e.name.substr(0,3),id:"",items:It("item",e.children).map((e=>{const{children:t}=e,r={media:jt(t)};Wt(r,"id","guid",t),Wt(r,"title","title",t),Wt(r,"link","link",t),Wt(r,"description","description",t);const n=Vt("pubDate",t)||Vt("dc:date",t);return n&&(r.pubDate=new Date(n)),r}))};Wt(i,"title","title",n),Wt(i,"link","link",n),Wt(i,"description","description",n);const s=Vt("lastBuildDate",n);return s&&(i.updated=new Date(s)),Wt(i,"author","managingEditor",n,!0),i}(t):null}!function(e){e[e.DISCONNECTED=1]="DISCONNECTED",e[e.PRECEDING=2]="PRECEDING",e[e.FOLLOWING=4]="FOLLOWING",e[e.CONTAINS=8]="CONTAINS",e[e.CONTAINED_BY=16]="CONTAINED_BY"}(Pt||(Pt={}));const zt=["url","type","lang"],Ft=["fileSize","bitrate","framerate","samplingrate","channels","duration","height","width"];function jt(e){return It("media:content",e).map((e=>{const{attribs:t}=e,r={medium:t.medium,isDefault:!!t.isDefault};for(const e of zt)t[e]&&(r[e]=t[e]);for(const e of Ft)t[e]&&(r[e]=parseInt(t[e],10));return t.expression&&(r.expression=t.expression),r}))}function Ht(e,t){return It(e,t,!0,1)[0]}function Vt(e,t,r=!1){return nt(It(e,t,r,1)).trim()}function Wt(e,t,r,n,i=!1){const s=Vt(r,n,i);s&&(e[t]=s)}function Gt(e){return"rss"===e||"feed"===e||"rdf:RDF"===e}const $t=-1,Zt=10,Jt=11,Kt=new Set(["ARTICLE","ASIDE","BLOCKQUOTE","BODY","BR","BUTTON","CANVAS","CAPTION","COL","COLGROUP","DD","DIV","DL","DT","EMBED","FIELDSET","FIGCAPTION","FIGURE","FOOTER","FORM","H1","H2","H3","H4","H5","H6","LI","UL","OL","P"]),Yt="http://www.w3.org/2000/svg",{assign:Xt,create:Qt,defineProperties:er,entries:tr,getOwnPropertyDescriptors:rr,keys:nr,setPrototypeOf:ir}=Object,sr=String,ar=e=>1===e.nodeType?e[h]:e,or=({ownerDocument:e})=>e[g].ignoreCase,lr=(e,t)=>{e[v]=t,t[_]=e},cr=(e,t,r)=>{lr(e,t),lr(ar(t),r)},ur=(e,t,r)=>{lr(e,t),lr(t,r)},dr=({localName:e,ownerDocument:t})=>t[g].ignoreCase?e.toUpperCase():e,hr=(e,t)=>{e&&(e[v]=t),t&&(t[_]=e)},pr=new WeakMap;let fr=!1;const mr=new WeakMap,gr=new WeakMap,br=(e,t,r,n)=>{fr&&gr.has(e)&&e.attributeChangedCallback&&e.constructor.observedAttributes.includes(t)&&e.attributeChangedCallback(t,r,n)},vr=(e,t)=>r=>{if(gr.has(r)){const n=gr.get(r);n.connected!==t&&r.isConnected===t&&(n.connected=t,e in r&&r[e]())}},yr=vr("connectedCallback",!0),_r=e=>{if(fr){yr(e),pr.has(e)&&(e=pr.get(e).shadowRoot);let{[v]:t,[h]:r}=e;for(;t!==r;)1===t.nodeType&&yr(t),t=t[v]}},xr=vr("disconnectedCallback",!1);class wr{constructor(e){this.ownerDocument=e,this.registry=new Map,this.waiting=new Map,this.active=!1}define(e,t,r={}){const{ownerDocument:n,registry:i,waiting:s}=this;if(i.has(e))throw new Error("unable to redefine "+e);if(mr.has(t))throw new Error("unable to redefine the same class: "+t);this.active=fr=!0;const{extends:a}=r;mr.set(t,{ownerDocument:n,options:{is:a?e:""},localName:a||e});const o=a?t=>t.localName===a&&t.getAttribute("is")===e:t=>t.localName===e;if(i.set(e,{Class:t,check:o}),s.has(e)){for(const r of s.get(e))r(t);s.delete(e)}n.querySelectorAll(a?`${a}[is="${e}"]`:e).forEach(this.upgrade,this)}upgrade(e){if(gr.has(e))return;const{ownerDocument:t,registry:r}=this,n=e.getAttribute("is")||e.localName;if(r.has(n)){const{Class:i,check:s}=r.get(n);if(s(e)){const{attributes:r,isConnected:s}=e;for(const t of r)e.removeAttributeNode(t);const a=tr(e);for(const[t]of a)delete e[t];ir(e,i.prototype),t[E]={element:e,values:a},new i(t,n),gr.set(e,{connected:s});for(const t of r)e.setAttributeNode(t);s&&e.connectedCallback&&e.connectedCallback()}}}whenDefined(e){const{registry:t,waiting:r}=this;return new Promise((n=>{t.has(e)?n(t.get(e).Class):(r.has(e)||r.set(e,[]),r.get(e).push(n))}))}get(e){const t=this.registry.get(e);return t&&t.Class}getName(e){if(mr.has(e)){const{localName:t}=mr.get(e);return t}return null}}const{iX:Sr}=i;let kr=!0;const Er=(e,t,r)=>{const n=e[h];return t.parentNode=e,cr(n[_],t,n),r&&1===t.nodeType&&_r(t),t},Ar=(e,t,r,n,i)=>{r[A]=n,r.ownerElement=e,ur(t[_],r,t),"class"===r.name&&(e.className=n),i&&br(e,r.name,null,n)},Cr=(e,t,r)=>{const{active:n,registry:i}=e[o];let s=e,a=null,l=!1;kr=!1;const c=new Sr({onprocessinginstruction(t,r){"!doctype"===t.toLowerCase()&&(e.doctype=r.slice(t.length).trim())},onopentag(r,o){let l=!0;if(t)if(a)s=Er(s,e.createElementNS(Yt,r),n),s.ownerSVGElement=a,l=!1;else if("svg"===r||"SVG"===r)a=e.createElementNS(Yt,r),s=Er(s,a,n),l=!1;else if(n){const e=r.includes("-")?r:o.is||"";if(e&&i.has(e)){const{Class:t}=i.get(e);s=Er(s,new t,n),delete o.is,l=!1}}l&&(s=Er(s,e.createElement(r),!1));let c=s[h];for(const t of nr(o))Ar(s,c,e.createAttribute(t),o[t],n)},oncomment(t){Er(s,e.createComment(t),n)},ontext(t){Er(s,l?e.createCDATASection(t):e.createTextNode(t),n)},oncdatastart(){l=!0},oncdataend(){l=!1},onclosetag(){t&&s===a&&(a=null),s=s.parentNode}},{lowerCaseAttributeNames:!1,decodeEntities:!0,xmlMode:!t});return c.write(r),c.end(),kr=!0,e},Tr=new Map,Rr=(e,t)=>{for(const r of[].concat(e))Tr.set(r,t),Tr.set(r.toUpperCase(),t)};var Nr=r(273);const qr=({[v]:e,[h]:t},r)=>{for(;e!==t;){switch(e.nodeType){case 2:Ir(e,r);break;case 3:case 8:case 4:Dr(e,r);break;case 1:Or(e,r),e=ar(e);break;case Zt:Lr(e,r)}e=e[v]}const n=r.length-1,i=r[n];"number"==typeof i&&i<0?r[n]+=$t:r.push($t)},Ir=(e,t)=>{t.push(2,e.name);const r=e[A].trim();r&&t.push(r)},Dr=(e,t)=>{const r=e[A];r.trim()&&t.push(e.nodeType,r)},Lr=({name:e,publicId:t,systemId:r},n)=>{n.push(Zt,e),t&&n.push(t),r&&n.push(r)},Or=(e,t)=>{t.push(1,e.localName),qr(e,t)},Pr=(e,t,r,n,i,s,a)=>({type:e,target:t,addedNodes:n,removedNodes:i,attributeName:s,oldValue:a,previousSibling:r?.previousSibling||null,nextSibling:r?.nextSibling||null}),Br=(e,t,r,n,i,s)=>{if(!n||n.includes(r)){const{callback:n,records:a,scheduled:o}=e;a.push(Pr("attributes",t,null,[],[],r,i?s:void 0)),o||(e.scheduled=!0,Promise.resolve().then((()=>{e.scheduled=!1,n(a.splice(0),e)})))}},Mr=(e,t,r)=>{const{ownerDocument:n}=e,{active:i,observers:s}=n[b];if(i)for(const i of s)for(const[s,{childList:a,subtree:o,attributes:l,attributeFilter:c,attributeOldValue:u}]of i.nodes)if(a){if(o&&(s===n||s.contains(e))||!o&&s.children.includes(e)){Br(i,e,t,c,u,r);break}}else if(l&&s===e){Br(i,e,t,c,u,r);break}},Ur=(e,t)=>{const{ownerDocument:r}=e,{active:n,observers:i}=r[b];if(n)for(const n of i)for(const[i,{subtree:s,childList:a,characterData:o}]of n.nodes)if(a&&(t&&(i===t||s&&i.contains(t))||!t&&(s&&(i===r||i.contains(e))||!s&&i[o?"childNodes":"children"].includes(e)))){const{callback:r,records:s,scheduled:a}=n;s.push(Pr("childList",i,e,t?[]:[e],t?[e]:[])),a||(n.scheduled=!0,Promise.resolve().then((()=>{n.scheduled=!1,r(s.splice(0),n)})));break}};class zr{constructor(e){const t=new Set;this.observers=t,this.active=!1,this.class=class{constructor(e){this.callback=e,this.nodes=new Map,this.records=[],this.scheduled=!1}disconnect(){this.records.splice(0),this.nodes.clear(),t.delete(this),e[b].active=!!t.size}observe(r,n={subtree:!1,childList:!1,attributes:!1,attributeFilter:null,attributeOldValue:!1,characterData:!1}){("attributeOldValue"in n||"attributeFilter"in n)&&(n.attributes=!0),n.childList=!!n.childList,n.subtree=!!n.subtree,this.nodes.set(r,n),t.add(this),e[b].active=!0}takeRecords(){return this.records.splice(0)}}}}const Fr=new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","class","contenteditable","controls","default","defer","disabled","draggable","formnovalidate","hidden","id","ismap","itemscope","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected","style","truespeed"]),jr=(e,t)=>{const{[A]:r,name:n}=t;t.ownerElement=e,ur(e,t,e[v]),"class"===n&&(e.className=r),Mr(e,n,null),br(e,n,null,r)},Hr=(e,t)=>{const{[A]:r,name:n}=t;lr(t[_],t[v]),t.ownerElement=t[_]=t[v]=null,"class"===n&&(e[a]=null),Mr(e,n,r),br(e,n,r,null)},Vr={get:(e,t)=>e.hasAttribute(t),set(e,t,r){r?e.setAttribute(t,""):e.removeAttribute(t)}},Wr={get:(e,t)=>parseFloat(e.getAttribute(t)||0),set(e,t,r){e.setAttribute(t,r)}},Gr={get:(e,t)=>e.getAttribute(t)||"",set(e,t,r){e.setAttribute(t,r)}},$r=new WeakMap;function Zr(e,t){return"function"==typeof t?t.call(e.target,e):t.handleEvent(e),e._stopImmediatePropagationFlag}function Jr({currentTarget:e,target:t}){const r=$r.get(e);if(r&&r.has(this.type)){const n=r.get(this.type);this.eventPhase=e===t?this.AT_TARGET:this.BUBBLING_PHASE,this.currentTarget=e,this.target=t;for(const[e,t]of n)if(t&&t.once&&n.delete(e),Zr(this,e))break;return delete this.currentTarget,delete this.target,this.cancelBubble}}class Kr{constructor(){$r.set(this,new Map)}_getParent(){return null}addEventListener(e,t,r){const n=$r.get(this);n.has(e)||n.set(e,new Map),n.get(e).set(t,r)}removeEventListener(e,t){const r=$r.get(this);if(r.has(e)){const n=r.get(e);n.delete(t)&&!n.size&&r.delete(e)}}dispatchEvent(e){let t=this;for(e.eventPhase=e.CAPTURING_PHASE;t;)t.dispatchEvent&&e._path.push({currentTarget:t,target:this}),t=e.bubbles&&t._getParent&&t._getParent();return e._path.some(Jr,e),e._path=[],e.eventPhase=e.NONE,!e.defaultPrevented}}class Yr extends Array{item(e){return e<this.length?this[e]:null}}const Xr=({parentNode:e})=>{let t=0;for(;e;)t++,e=e.parentNode;return t};class Qr extends Kr{static get ELEMENT_NODE(){return 1}static get ATTRIBUTE_NODE(){return 2}static get TEXT_NODE(){return 3}static get CDATA_SECTION_NODE(){return 4}static get COMMENT_NODE(){return 8}static get DOCUMENT_NODE(){return 9}static get DOCUMENT_FRAGMENT_NODE(){return Jt}static get DOCUMENT_TYPE_NODE(){return Zt}constructor(e,t,r){super(),this.ownerDocument=e,this.localName=t,this.nodeType=r,this.parentNode=null,this[v]=null,this[_]=null}get ELEMENT_NODE(){return 1}get ATTRIBUTE_NODE(){return 2}get TEXT_NODE(){return 3}get CDATA_SECTION_NODE(){return 4}get COMMENT_NODE(){return 8}get DOCUMENT_NODE(){return 9}get DOCUMENT_FRAGMENT_NODE(){return Jt}get DOCUMENT_TYPE_NODE(){return Zt}get baseURI(){const e=9===this.nodeType?this:this.ownerDocument;if(e){const t=e.querySelector("base");if(t)return t.getAttribute("href");const{location:r}=e.defaultView;if(r)return r.href}return null}get isConnected(){return!1}get nodeName(){return this.localName}get parentElement(){return null}get previousSibling(){return null}get previousElementSibling(){return null}get nextSibling(){return null}get nextElementSibling(){return null}get childNodes(){return new Yr}get firstChild(){return null}get lastChild(){return null}get nodeValue(){return null}set nodeValue(e){}get textContent(){return null}set textContent(e){}normalize(){}cloneNode(){return null}contains(){return!1}insertBefore(e,t){return e}appendChild(e){return e}replaceChild(e,t){return t}removeChild(e){return e}toString(){return""}hasChildNodes(){return!!this.lastChild}isSameNode(e){return this===e}compareDocumentPosition(e){let t=0;if(this!==e){let r=Xr(this),n=Xr(e);if(r<n)t+=4,this.contains(e)&&(t+=16);else if(n<r)t+=2,e.contains(this)&&(t+=8);else if(r&&n){const{childNodes:r}=this.parentNode;r.indexOf(this)<r.indexOf(e)?t+=4:t+=2}r&&n||(t+=32,t+=1)}return t}isEqualNode(e){if(this===e)return!0;if(this.nodeType===e.nodeType){switch(this.nodeType){case 9:case Jt:{const t=this.childNodes,r=e.childNodes;return t.length===r.length&&t.every(((e,t)=>e.isEqualNode(r[t])))}}return this.toString()===e.toString()}return!1}_getParent(){return this.parentNode}getRootNode(){let e=this;for(;e.parentNode;)e=e.parentNode;return e}}const{replace:en}="",tn=/[<>&\xA0]/g,rn={" ":"&#160;","&":"&amp;","<":"&lt;",">":"&gt;"},nn=e=>rn[e],sn=e=>en.call(e,tn,nn),an=/"/g;class on extends Qr{constructor(e,t,r=""){super(e,t,2),this.ownerElement=null,this.name=sr(t),this[A]=sr(r),this[s]=!1}get value(){return this[A]}set value(e){const{[A]:t,name:r,ownerElement:n}=this;this[A]=sr(e),this[s]=!0,n&&(Mr(n,r,t),br(n,r,t,this[A]))}cloneNode(){const{ownerDocument:e,name:t,[A]:r}=this;return new on(e,t,r)}toString(){const{name:e,[A]:t}=this;return Fr.has(e)&&!t?or(this)?e:`${e}=""`:`${e}="${(or(this)?t:sn(t)).replace(an,"&quot;")}"`}toJSON(){const e=[];return Ir(this,e),e}}const ln=({ownerDocument:e,parentNode:t})=>{for(;t;){if(t===e)return!0;t=t.parentNode||t.host}return!1},cn=({parentNode:e})=>{if(e)switch(e.nodeType){case 9:case Jt:return null}return e},un=({[_]:e})=>{switch(e?e.nodeType:0){case $t:return e[S];case 3:case 8:case 4:return e}return null},dn=e=>{const t=ar(e)[v];return t&&(t.nodeType===$t?null:t)},hn=e=>{let t=dn(e);for(;t&&1!==t.nodeType;)t=dn(t);return t},pn=e=>{let t=un(e);for(;t&&1!==t.nodeType;)t=un(t);return t},fn=(e,t)=>{const r=e.createDocumentFragment();return r.append(...t),r},mn=(e,t)=>{const{ownerDocument:r,parentNode:n}=e;n&&n.insertBefore(fn(r,t),e)},gn=(e,t)=>{const{ownerDocument:r,parentNode:n}=e;n&&n.insertBefore(fn(r,t),ar(e)[v])},bn=(e,t)=>{const{ownerDocument:r,parentNode:n}=e;n&&(t.includes(e)&&bn(e,[e=e.cloneNode()]),n.insertBefore(fn(r,t),e),e.remove())},vn=(e,t,r)=>{const{parentNode:n,nodeType:i}=t;(e||r)&&(hr(e,r),t[_]=null,ar(t)[v]=null),n&&(t.parentNode=null,Ur(t,n),1===i&&(e=>{if(fr){xr(e),pr.has(e)&&(e=pr.get(e).shadowRoot);let{[v]:t,[h]:r}=e;for(;t!==r;)1===t.nodeType&&xr(t),t=t[v]}})(t))};class yn extends Qr{constructor(e,t,r,n){super(e,t,r),this[A]=sr(n)}get isConnected(){return ln(this)}get parentElement(){return cn(this)}get previousSibling(){return un(this)}get nextSibling(){return dn(this)}get previousElementSibling(){return pn(this)}get nextElementSibling(){return hn(this)}before(...e){mn(this,e)}after(...e){gn(this,e)}replaceWith(...e){bn(this,e)}remove(){vn(this[_],this,this[v])}get data(){return this[A]}set data(e){this[A]=sr(e),Ur(this,this.parentNode)}get nodeValue(){return this.data}set nodeValue(e){this.data=e}get textContent(){return this.data}set textContent(e){this.data=e}get length(){return this.data.length}substringData(e,t){return this.data.substr(e,t)}appendData(e){this.data+=e}insertData(e,t){const{data:r}=this;this.data=r.slice(0,e)+t+r.slice(e)}deleteData(e,t){const{data:r}=this;this.data=r.slice(0,e)+r.slice(e+t)}replaceData(e,t,r){const{data:n}=this;this.data=n.slice(0,e)+r+n.slice(e+t)}toJSON(){const e=[];return Dr(this,e),e}}class _n extends yn{constructor(e,t=""){super(e,"#cdatasection",4,t)}cloneNode(){const{ownerDocument:e,[A]:t}=this;return new _n(e,t)}toString(){return`<![CDATA[${this[A]}]]>`}}class xn extends yn{constructor(e,t=""){super(e,"#comment",8,t)}cloneNode(){const{ownerDocument:e,[A]:t}=this;return new xn(e,t)}toString(){return`\x3c!--${this[A]}--\x3e`}}var wn,Sn,kn=r(1264);!function(e){e.Attribute="attribute",e.Pseudo="pseudo",e.PseudoElement="pseudo-element",e.Tag="tag",e.Universal="universal",e.Adjacent="adjacent",e.Child="child",e.Descendant="descendant",e.Parent="parent",e.Sibling="sibling",e.ColumnCombinator="column-combinator"}(wn||(wn={})),function(e){e.Any="any",e.Element="element",e.End="end",e.Equals="equals",e.Exists="exists",e.Hyphen="hyphen",e.Not="not",e.Start="start"}(Sn||(Sn={}));const En=/^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/,An=/\\([\da-f]{1,6}\s?|(\s)|.)/gi,Cn=new Map([[126,Sn.Element],[94,Sn.Start],[36,Sn.End],[42,Sn.Any],[33,Sn.Not],[124,Sn.Hyphen]]),Tn=new Set(["has","not","matches","is","where","host","host-context"]),Rn=new Set(["contains","icontains"]);function Nn(e,t,r){const n=parseInt(t,16)-65536;return n!=n||r?t:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)}function qn(e){return e.replace(An,Nn)}function In(e){return 39===e||34===e}function Dn(e){return 32===e||9===e||10===e||12===e||13===e}function Ln(e){const t=[],r=On(t,`${e}`,0);if(r<e.length)throw new Error(`Unmatched selector: ${e.slice(r)}`);return t}function On(e,t,r){let n=[];function i(e){const n=t.slice(r+e).match(En);if(!n)throw new Error(`Expected name, found ${t.slice(r)}`);const[i]=n;return r+=e+i.length,qn(i)}function s(e){for(r+=e;r<t.length&&Dn(t.charCodeAt(r));)r++}function a(){const e=r+=1;let n=1;for(;n>0&&r<t.length;r++)40!==t.charCodeAt(r)||o(r)?41!==t.charCodeAt(r)||o(r)||n--:n++;if(n)throw new Error("Parenthesis not matched");return qn(t.slice(e,r-1))}function o(e){let r=0;for(;92===t.charCodeAt(--e);)r++;return!(1&~r)}function l(){if(n.length>0&&function(e){switch(e.type){case wn.Adjacent:case wn.Child:case wn.Descendant:case wn.Parent:case wn.Sibling:case wn.ColumnCombinator:return!0;default:return!1}}(n[n.length-1]))throw new Error("Did not expect successive traversals.")}function c(e){n.length>0&&n[n.length-1].type===wn.Descendant?n[n.length-1].type=e:(l(),n.push({type:e}))}function u(e,t){n.push({type:wn.Attribute,name:e,action:t,value:i(1),namespace:null,ignoreCase:"quirks"})}function d(){if(n.length&&n[n.length-1].type===wn.Descendant&&n.pop(),0===n.length)throw new Error("Empty sub-selector");e.push(n)}if(s(0),t.length===r)return r;e:for(;r<t.length;){const e=t.charCodeAt(r);switch(e){case 32:case 9:case 10:case 12:case 13:0!==n.length&&n[0].type===wn.Descendant||(l(),n.push({type:wn.Descendant})),s(1);break;case 62:c(wn.Child),s(1);break;case 60:c(wn.Parent),s(1);break;case 126:c(wn.Sibling),s(1);break;case 43:c(wn.Adjacent),s(1);break;case 46:u("class",Sn.Element);break;case 35:u("id",Sn.Equals);break;case 91:{let e;s(1);let a=null;124===t.charCodeAt(r)?e=i(1):t.startsWith("*|",r)?(a="*",e=i(2)):(e=i(0),124===t.charCodeAt(r)&&61!==t.charCodeAt(r+1)&&(a=e,e=i(1))),s(0);let l=Sn.Exists;const c=Cn.get(t.charCodeAt(r));if(c){if(l=c,61!==t.charCodeAt(r+1))throw new Error("Expected `=`");s(2)}else 61===t.charCodeAt(r)&&(l=Sn.Equals,s(1));let u="",d=null;if("exists"!==l){if(In(t.charCodeAt(r))){const e=t.charCodeAt(r);let n=r+1;for(;n<t.length&&(t.charCodeAt(n)!==e||o(n));)n+=1;if(t.charCodeAt(n)!==e)throw new Error("Attribute value didn't end");u=qn(t.slice(r+1,n)),r=n+1}else{const e=r;for(;r<t.length&&(!Dn(t.charCodeAt(r))&&93!==t.charCodeAt(r)||o(r));)r+=1;u=qn(t.slice(e,r))}s(0);const e=32|t.charCodeAt(r);115===e?(d=!1,s(1)):105===e&&(d=!0,s(1))}if(93!==t.charCodeAt(r))throw new Error("Attribute selector didn't terminate");r+=1;const h={type:wn.Attribute,name:e,action:l,value:u,namespace:a,ignoreCase:d};n.push(h);break}case 58:{if(58===t.charCodeAt(r+1)){n.push({type:wn.PseudoElement,name:i(2).toLowerCase(),data:40===t.charCodeAt(r)?a():null});continue}const e=i(1).toLowerCase();let s=null;if(40===t.charCodeAt(r))if(Tn.has(e)){if(In(t.charCodeAt(r+1)))throw new Error(`Pseudo-selector ${e} cannot be quoted`);if(s=[],r=On(s,t,r+1),41!==t.charCodeAt(r))throw new Error(`Missing closing parenthesis in :${e} (${t})`);r+=1}else{if(s=a(),Rn.has(e)){const e=s.charCodeAt(0);e===s.charCodeAt(s.length-1)&&In(e)&&(s=s.slice(1,-1))}s=qn(s)}n.push({type:wn.Pseudo,name:e,data:s});break}case 44:d(),n=[],s(1);break;default:{if(t.startsWith("/*",r)){const e=t.indexOf("*/",r+2);if(e<0)throw new Error("Comment was not terminated");r=e+2,0===n.length&&s(0);break}let a,o=null;if(42===e)r+=1,a="*";else if(124===e){if(a="",124===t.charCodeAt(r+1)){c(wn.ColumnCombinator),s(2);break}}else{if(!En.test(t.slice(r)))break e;a=i(0)}124===t.charCodeAt(r)&&124!==t.charCodeAt(r+1)&&(o=a,42===t.charCodeAt(r+1)?(a="*",r+=2):a=i(1)),n.push("*"===a?{type:wn.Universal,namespace:o}:{type:wn.Tag,name:a,namespace:o})}}}return d(),r}const Pn=new Map([[wn.Universal,50],[wn.Tag,30],[wn.Attribute,1],[wn.Pseudo,0]]);function Bn(e){return!Pn.has(e.type)}const Mn=new Map([[Sn.Exists,10],[Sn.Equals,8],[Sn.Not,7],[Sn.Start,6],[Sn.End,6],[Sn.Any,5]]);function Un(e){const t=e.map(zn);for(let r=1;r<e.length;r++){const n=t[r];if(!(n<0))for(let i=r-1;i>=0&&n<t[i];i--){const r=e[i+1];e[i+1]=e[i],e[i]=r,t[i+1]=t[i],t[i]=n}}}function zn(e){var t,r;let n=null!==(t=Pn.get(e.type))&&void 0!==t?t:-1;return e.type===wn.Attribute?(n=null!==(r=Mn.get(e.action))&&void 0!==r?r:4,e.action===Sn.Equals&&"id"===e.name&&(n=9),e.ignoreCase&&(n>>=1)):e.type===wn.Pseudo&&(e.data?"has"===e.name||"contains"===e.name?n=0:Array.isArray(e.data)?(n=Math.min(...e.data.map((e=>Math.min(...e.map(zn))))),n<0&&(n=0)):n=2:n=3),n}const Fn=/[-[\]{}()*+?.,\\^$|#\s]/g;function jn(e){return e.replace(Fn,"\\$&")}const Hn=new Set(["accept","accept-charset","align","alink","axis","bgcolor","charset","checked","clear","codetype","color","compact","declare","defer","dir","direction","disabled","enctype","face","frame","hreflang","http-equiv","lang","language","link","media","method","multiple","nohref","noresize","noshade","nowrap","readonly","rel","rev","rules","scope","scrolling","selected","shape","target","text","type","valign","valuetype","vlink"]);function Vn(e,t){return"boolean"==typeof e.ignoreCase?e.ignoreCase:"quirks"===e.ignoreCase?!!t.quirksMode:!t.xmlMode&&Hn.has(e.name)}const Wn={equals(e,t,r){const{adapter:n}=r,{name:i}=t;let{value:s}=t;return Vn(t,r)?(s=s.toLowerCase(),t=>{const r=n.getAttributeValue(t,i);return null!=r&&r.length===s.length&&r.toLowerCase()===s&&e(t)}):t=>n.getAttributeValue(t,i)===s&&e(t)},hyphen(e,t,r){const{adapter:n}=r,{name:i}=t;let{value:s}=t;const a=s.length;return Vn(t,r)?(s=s.toLowerCase(),function(t){const r=n.getAttributeValue(t,i);return null!=r&&(r.length===a||"-"===r.charAt(a))&&r.substr(0,a).toLowerCase()===s&&e(t)}):function(t){const r=n.getAttributeValue(t,i);return null!=r&&(r.length===a||"-"===r.charAt(a))&&r.substr(0,a)===s&&e(t)}},element(e,t,r){const{adapter:n}=r,{name:i,value:s}=t;if(/\s/.test(s))return kn.falseFunc;const a=new RegExp(`(?:^|\\s)${jn(s)}(?:$|\\s)`,Vn(t,r)?"i":"");return function(t){const r=n.getAttributeValue(t,i);return null!=r&&r.length>=s.length&&a.test(r)&&e(t)}},exists:(e,{name:t},{adapter:r})=>n=>r.hasAttrib(n,t)&&e(n),start(e,t,r){const{adapter:n}=r,{name:i}=t;let{value:s}=t;const a=s.length;return 0===a?kn.falseFunc:Vn(t,r)?(s=s.toLowerCase(),t=>{const r=n.getAttributeValue(t,i);return null!=r&&r.length>=a&&r.substr(0,a).toLowerCase()===s&&e(t)}):t=>{var r;return!!(null===(r=n.getAttributeValue(t,i))||void 0===r?void 0:r.startsWith(s))&&e(t)}},end(e,t,r){const{adapter:n}=r,{name:i}=t;let{value:s}=t;const a=-s.length;return 0===a?kn.falseFunc:Vn(t,r)?(s=s.toLowerCase(),t=>{var r;return(null===(r=n.getAttributeValue(t,i))||void 0===r?void 0:r.substr(a).toLowerCase())===s&&e(t)}):t=>{var r;return!!(null===(r=n.getAttributeValue(t,i))||void 0===r?void 0:r.endsWith(s))&&e(t)}},any(e,t,r){const{adapter:n}=r,{name:i,value:s}=t;if(""===s)return kn.falseFunc;if(Vn(t,r)){const t=new RegExp(jn(s),"i");return function(r){const a=n.getAttributeValue(r,i);return null!=a&&a.length>=s.length&&t.test(a)&&e(r)}}return t=>{var r;return!!(null===(r=n.getAttributeValue(t,i))||void 0===r?void 0:r.includes(s))&&e(t)}},not(e,t,r){const{adapter:n}=r,{name:i}=t;let{value:s}=t;return""===s?t=>!!n.getAttributeValue(t,i)&&e(t):Vn(t,r)?(s=s.toLowerCase(),t=>{const r=n.getAttributeValue(t,i);return(null==r||r.length!==s.length||r.toLowerCase()!==s)&&e(t)}):t=>n.getAttributeValue(t,i)!==s&&e(t)}},Gn=new Set([9,10,12,13,32]),$n="0".charCodeAt(0),Zn="9".charCodeAt(0);function Jn(e){return function(e){const t=e[0],r=e[1]-1;if(r<0&&t<=0)return kn.falseFunc;if(-1===t)return e=>e<=r;if(0===t)return e=>e===r;if(1===t)return r<0?kn.trueFunc:e=>e>=r;const n=Math.abs(t),i=(r%n+n)%n;return t>1?e=>e>=r&&e%n===i:e=>e<=r&&e%n===i}(function(e){if("even"===(e=e.trim().toLowerCase()))return[2,0];if("odd"===e)return[2,1];let t=0,r=0,n=s(),i=a();if(t<e.length&&"n"===e.charAt(t)&&(t++,r=n*(null!=i?i:1),o(),t<e.length?(n=s(),o(),i=a()):n=i=0),null===i||t<e.length)throw new Error(`n-th rule couldn't be parsed ('${e}')`);return[r,n*i];function s(){return"-"===e.charAt(t)?(t++,-1):("+"===e.charAt(t)&&t++,1)}function a(){const r=t;let n=0;for(;t<e.length&&e.charCodeAt(t)>=$n&&e.charCodeAt(t)<=Zn;)n=10*n+(e.charCodeAt(t)-$n),t++;return t===r?null:n}function o(){for(;t<e.length&&Gn.has(e.charCodeAt(t));)t++}}(e))}function Kn(e,t){return r=>{const n=t.getParent(r);return null!=n&&t.isTag(n)&&e(r)}}const Yn={contains:(e,t,{adapter:r})=>function(n){return e(n)&&r.getText(n).includes(t)},icontains(e,t,{adapter:r}){const n=t.toLowerCase();return function(t){return e(t)&&r.getText(t).toLowerCase().includes(n)}},"nth-child"(e,t,{adapter:r,equals:n}){const i=Jn(t);return i===kn.falseFunc?kn.falseFunc:i===kn.trueFunc?Kn(e,r):function(t){const s=r.getSiblings(t);let a=0;for(let e=0;e<s.length&&!n(t,s[e]);e++)r.isTag(s[e])&&a++;return i(a)&&e(t)}},"nth-last-child"(e,t,{adapter:r,equals:n}){const i=Jn(t);return i===kn.falseFunc?kn.falseFunc:i===kn.trueFunc?Kn(e,r):function(t){const s=r.getSiblings(t);let a=0;for(let e=s.length-1;e>=0&&!n(t,s[e]);e--)r.isTag(s[e])&&a++;return i(a)&&e(t)}},"nth-of-type"(e,t,{adapter:r,equals:n}){const i=Jn(t);return i===kn.falseFunc?kn.falseFunc:i===kn.trueFunc?Kn(e,r):function(t){const s=r.getSiblings(t);let a=0;for(let e=0;e<s.length;e++){const i=s[e];if(n(t,i))break;r.isTag(i)&&r.getName(i)===r.getName(t)&&a++}return i(a)&&e(t)}},"nth-last-of-type"(e,t,{adapter:r,equals:n}){const i=Jn(t);return i===kn.falseFunc?kn.falseFunc:i===kn.trueFunc?Kn(e,r):function(t){const s=r.getSiblings(t);let a=0;for(let e=s.length-1;e>=0;e--){const i=s[e];if(n(t,i))break;r.isTag(i)&&r.getName(i)===r.getName(t)&&a++}return i(a)&&e(t)}},root:(e,t,{adapter:r})=>t=>{const n=r.getParent(t);return(null==n||!r.isTag(n))&&e(t)},scope(e,t,r,n){const{equals:i}=r;return n&&0!==n.length?1===n.length?t=>i(n[0],t)&&e(t):t=>n.includes(t)&&e(t):Yn.root(e,t,r)},hover:Xn("isHovered"),visited:Xn("isVisited"),active:Xn("isActive")};function Xn(e){return function(t,r,{adapter:n}){const i=n[e];return"function"!=typeof i?kn.falseFunc:function(e){return i(e)&&t(e)}}}const Qn={empty:(e,{adapter:t})=>!t.getChildren(e).some((e=>t.isTag(e)||""!==t.getText(e))),"first-child"(e,{adapter:t,equals:r}){if(t.prevElementSibling)return null==t.prevElementSibling(e);const n=t.getSiblings(e).find((e=>t.isTag(e)));return null!=n&&r(e,n)},"last-child"(e,{adapter:t,equals:r}){const n=t.getSiblings(e);for(let i=n.length-1;i>=0;i--){if(r(e,n[i]))return!0;if(t.isTag(n[i]))break}return!1},"first-of-type"(e,{adapter:t,equals:r}){const n=t.getSiblings(e),i=t.getName(e);for(let s=0;s<n.length;s++){const a=n[s];if(r(e,a))return!0;if(t.isTag(a)&&t.getName(a)===i)break}return!1},"last-of-type"(e,{adapter:t,equals:r}){const n=t.getSiblings(e),i=t.getName(e);for(let s=n.length-1;s>=0;s--){const a=n[s];if(r(e,a))return!0;if(t.isTag(a)&&t.getName(a)===i)break}return!1},"only-of-type"(e,{adapter:t,equals:r}){const n=t.getName(e);return t.getSiblings(e).every((i=>r(e,i)||!t.isTag(i)||t.getName(i)!==n))},"only-child":(e,{adapter:t,equals:r})=>t.getSiblings(e).every((n=>r(e,n)||!t.isTag(n)))};function ei(e,t,r,n){if(null===r){if(e.length>n)throw new Error(`Pseudo-class :${t} requires an argument`)}else if(e.length===n)throw new Error(`Pseudo-class :${t} doesn't have any arguments`)}const ti={"any-link":":is(a, area, link)[href]",link:":any-link:not(:visited)",disabled:":is(\n        :is(button, input, select, textarea, optgroup, option)[disabled],\n        optgroup[disabled] > option,\n        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)\n    )",enabled:":not(:disabled)",checked:":is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)",required:":is(input, select, textarea)[required]",optional:":is(input, select, textarea):not([required])",selected:"option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)",checkbox:"[type=checkbox]",file:"[type=file]",password:"[type=password]",radio:"[type=radio]",reset:"[type=reset]",image:"[type=image]",submit:"[type=submit]",parent:":not(:empty)",header:":is(h1, h2, h3, h4, h5, h6)",button:":is(button, input[type=button])",input:":is(input, textarea, select, button)",text:"input:is(:not([type!='']), [type=text])"},ri={};function ni(e,t){return e===kn.falseFunc?kn.falseFunc:r=>t.isTag(r)&&e(r)}function ii(e,t){const r=t.getSiblings(e);if(r.length<=1)return[];const n=r.indexOf(e);return n<0||n===r.length-1?[]:r.slice(n+1).filter(t.isTag)}function si(e){return{xmlMode:!!e.xmlMode,lowerCaseAttributeNames:!!e.lowerCaseAttributeNames,lowerCaseTags:!!e.lowerCaseTags,quirksMode:!!e.quirksMode,cacheResults:!!e.cacheResults,pseudos:e.pseudos,adapter:e.adapter,equals:e.equals}}const ai=(e,t,r,n,i)=>{const s=i(t,si(r),n);return s===kn.trueFunc?e:s===kn.falseFunc?kn.falseFunc:t=>s(t)&&e(t)},oi={is:ai,matches:ai,where:ai,not(e,t,r,n,i){const s=i(t,si(r),n);return s===kn.falseFunc?e:s===kn.trueFunc?kn.falseFunc:t=>!s(t)&&e(t)},has(e,t,r,n,i){const{adapter:s}=r,a=si(r);a.relativeSelector=!0;const o=t.some((e=>e.some(Bn)))?[ri]:void 0,l=i(t,a,o);if(l===kn.falseFunc)return kn.falseFunc;const c=ni(l,s);if(o&&l!==kn.trueFunc){const{shouldTestNextSiblings:t=!1}=l;return r=>{if(!e(r))return!1;o[0]=r;const n=s.getChildren(r),i=t?[...n,...ii(r,s)]:n;return s.existsOne(c,i)}}return t=>e(t)&&s.existsOne(c,s.getChildren(t))}};function li(e,t){const r=t.getParent(e);return r&&t.isTag(r)?r:null}function ci(e,t,r){return ni(ui(e,t,r),t.adapter)}function ui(e,t,r){return mi("string"==typeof e?Ln(e):e,t,r)}function di(e){return e.type===wn.Pseudo&&("scope"===e.name||Array.isArray(e.data)&&e.data.some((e=>e.some(di))))}const hi={type:wn.Descendant},pi={type:"_flexibleDescendant"},fi={type:wn.Pseudo,name:"scope",data:null};function mi(e,t,r){var n;e.forEach(Un),r=null!==(n=t.context)&&void 0!==n?n:r;const i=Array.isArray(r),s=r&&(Array.isArray(r)?r:[r]);if(!1!==t.relativeSelector)!function(e,{adapter:t},r){const n=!!(null==r?void 0:r.every((e=>{const r=t.isTag(e)&&t.getParent(e);return e===ri||r&&t.isTag(r)})));for(const t of e){if(t.length>0&&Bn(t[0])&&t[0].type!==wn.Descendant);else{if(!n||t.some(di))continue;t.unshift(hi)}t.unshift(fi)}}(e,t,s);else if(e.some((e=>e.length>0&&Bn(e[0]))))throw new Error("Relative selectors are not allowed when the `relativeSelector` option is disabled");let a=!1;const o=e.map((e=>{if(e.length>=2){const[t,r]=e;t.type!==wn.Pseudo||"scope"!==t.name||(i&&r.type===wn.Descendant?e[1]=pi:r.type!==wn.Adjacent&&r.type!==wn.Sibling||(a=!0))}return function(e,t,r){var n;return e.reduce(((e,n)=>e===kn.falseFunc?kn.falseFunc:function(e,t,r,n,i){const{adapter:s,equals:a}=r;switch(t.type){case wn.PseudoElement:throw new Error("Pseudo-elements are not supported by css-select");case wn.ColumnCombinator:throw new Error("Column combinators are not yet supported by css-select");case wn.Attribute:if(null!=t.namespace)throw new Error("Namespaced attributes are not yet supported by css-select");return r.xmlMode&&!r.lowerCaseAttributeNames||(t.name=t.name.toLowerCase()),Wn[t.action](e,t,r);case wn.Pseudo:return function(e,t,r,n,i){var s;const{name:a,data:o}=t;if(Array.isArray(o)){if(!(a in oi))throw new Error(`Unknown pseudo-class :${a}(${o})`);return oi[a](e,o,r,n,i)}const l=null===(s=r.pseudos)||void 0===s?void 0:s[a],c="string"==typeof l?l:ti[a];if("string"==typeof c){if(null!=o)throw new Error(`Pseudo ${a} doesn't have any arguments`);const t=Ln(c);return oi.is(e,t,r,n,i)}if("function"==typeof l)return ei(l,a,o,1),t=>l(t,o)&&e(t);if(a in Yn)return Yn[a](e,o,r,n);if(a in Qn){const t=Qn[a];return ei(t,a,o,2),n=>t(n,r,o)&&e(n)}throw new Error(`Unknown pseudo-class :${a}`)}(e,t,r,n,i);case wn.Tag:{if(null!=t.namespace)throw new Error("Namespaced tag names are not yet supported by css-select");let{name:n}=t;return r.xmlMode&&!r.lowerCaseTags||(n=n.toLowerCase()),function(t){return s.getName(t)===n&&e(t)}}case wn.Descendant:{if(!1===r.cacheResults||"undefined"==typeof WeakSet)return function(t){let r=t;for(;r=li(r,s);)if(e(r))return!0;return!1};const t=new WeakSet;return function(r){let n=r;for(;n=li(n,s);)if(!t.has(n)){if(s.isTag(n)&&e(n))return!0;t.add(n)}return!1}}case"_flexibleDescendant":return function(t){let r=t;do{if(e(r))return!0}while(r=li(r,s));return!1};case wn.Parent:return function(t){return s.getChildren(t).some((t=>s.isTag(t)&&e(t)))};case wn.Child:return function(t){const r=s.getParent(t);return null!=r&&s.isTag(r)&&e(r)};case wn.Sibling:return function(t){const r=s.getSiblings(t);for(let n=0;n<r.length;n++){const i=r[n];if(a(t,i))break;if(s.isTag(i)&&e(i))return!0}return!1};case wn.Adjacent:return s.prevElementSibling?function(t){const r=s.prevElementSibling(t);return null!=r&&e(r)}:function(t){const r=s.getSiblings(t);let n;for(let e=0;e<r.length;e++){const i=r[e];if(a(t,i))break;s.isTag(i)&&(n=i)}return!!n&&e(n)};case wn.Universal:if(null!=t.namespace&&"*"!==t.namespace)throw new Error("Namespaced universal selectors are not yet supported by css-select");return e}}(e,n,t,r,mi)),null!==(n=t.rootFunc)&&void 0!==n?n:kn.trueFunc)}(e,t,s)})).reduce(gi,kn.falseFunc);return o.shouldTestNextSiblings=a,o}function gi(e,t){return t===kn.falseFunc||e===kn.trueFunc?e:e===kn.falseFunc||t===kn.trueFunc?t:function(r){return e(r)||t(r)}}const bi=(e,t)=>e===t,vi={adapter:n,equals:bi};function yi(e){var t,r,i,s;const a=null!=e?e:vi;return null!==(t=a.adapter)&&void 0!==t||(a.adapter=n),null!==(r=a.equals)&&void 0!==r||(a.equals=null!==(s=null===(i=a.adapter)||void 0===i?void 0:i.equals)&&void 0!==s?s:bi),a}function _i(e){return function(t,r,n){const i=yi(r);return e(t,i,n)}}const xi=_i(ci);function wi(e){return function(t,r,n){const i=yi(n);"function"!=typeof t&&(t=ui(t,i,r));const s=function(e,t,r=!1){return r&&(e=function(e,t){const r=Array.isArray(e)?e.slice(0):[e],n=r.length;for(let e=0;e<n;e++){const n=ii(r[e],t);r.push(...n)}return r}(e,t)),Array.isArray(e)?t.removeSubsets(e):t.getChildren(e)}(r,i.adapter,t.shouldTestNextSiblings);return e(t,s,i)}}_i(ui),_i(mi),wi(((e,t,r)=>e!==kn.falseFunc&&t&&0!==t.length?r.adapter.findAll(e,t):[])),wi(((e,t,r)=>e!==kn.falseFunc&&t&&0!==t.length?r.adapter.findOne(e,t):null));const{isArray:Si}=Array,ki=({nodeType:e})=>1===e,Ei=(e,t)=>t.some((t=>ki(t)&&(e(t)||Ei(e,Ai(t))))),Ai=({childNodes:e})=>e,Ci=e=>Si(e)?e.map(Ci).join(""):ki(e)?Ci(Ai(e)):3===e.nodeType?e.data:"",Ti=(e,t)=>{const r=[];for(const n of t)ki(n)&&(e(n)&&r.push(n),r.push(...Ti(e,Ai(n))));return r},Ri=(e,t)=>{for(let r of t)if(e(r)||(r=Ri(e,Ai(r))))return r;return null},Ni={isTag:ki,existsOne:Ei,getAttributeValue:(e,t)=>"class"===t?e.classList.value:e.getAttribute(t),getChildren:Ai,getName:e=>{const{localName:t}=e;return or(e)?t.toLowerCase():t},getParent:({parentNode:e})=>e,getSiblings:e=>{const{parentNode:t}=e;return t?Ai(t):e},getText:Ci,hasAttrib:(e,t)=>e.hasAttribute(t),removeSubsets:e=>{let{length:t}=e;for(;t--;){const r=e[t];if(t&&-1<e.lastIndexOf(r,t-1))e.splice(t,1);else for(let{parentNode:n}=r;n;n=n.parentNode)if(e.includes(n)){e.splice(t,1);break}}return e},findAll:Ti,findOne:Ri},qi=(e,t)=>xi(t,{context:t.includes(":scope")?e:void 0,xmlMode:!or(e),adapter:Ni});class Ii extends yn{constructor(e,t=""){super(e,"#text",3,t)}get wholeText(){const e=[];let{previousSibling:t,nextSibling:r}=this;for(;t&&3===t.nodeType;)e.unshift(t[A]),t=t.previousSibling;for(e.push(this[A]);r&&3===r.nodeType;)e.push(r[A]),r=r.nextSibling;return e.join("")}cloneNode(){const{ownerDocument:e,[A]:t}=this;return new Ii(e,t)}toString(){return sn(this[A])}}const Di=e=>e instanceof Qr,Li=(e,t,r)=>{const{ownerDocument:n}=e;for(const i of r)e.insertBefore(Di(i)?i:new Ii(n,i),t)};class Oi extends Qr{constructor(e,t,r){super(e,t,r),this[x]=null,this[v]=this[h]={[v]:null,[_]:this,[S]:this,nodeType:$t,ownerDocument:this.ownerDocument,parentNode:null}}get childNodes(){const e=new Yr;let{firstChild:t}=this;for(;t;)e.push(t),t=dn(t);return e}get children(){const e=new Yr;let{firstElementChild:t}=this;for(;t;)e.push(t),t=hn(t);return e}get firstChild(){let{[v]:e,[h]:t}=this;for(;2===e.nodeType;)e=e[v];return e===t?null:e}get firstElementChild(){let{firstChild:e}=this;for(;e;){if(1===e.nodeType)return e;e=dn(e)}return null}get lastChild(){const e=this[h][_];switch(e.nodeType){case $t:return e[S];case 2:return null}return e===this?null:e}get lastElementChild(){let{lastChild:e}=this;for(;e;){if(1===e.nodeType)return e;e=un(e)}return null}get childElementCount(){return this.children.length}prepend(...e){Li(this,this.firstChild,e)}append(...e){Li(this,this[h],e)}replaceChildren(...e){let{[v]:t,[h]:r}=this;for(;t!==r&&2===t.nodeType;)t=t[v];for(;t!==r;){const e=ar(t)[v];t.remove(),t=e}e.length&&Li(this,r,e)}getElementsByClassName(e){const t=new Yr;let{[v]:r,[h]:n}=this;for(;r!==n;)1===r.nodeType&&r.hasAttribute("class")&&r.classList.has(e)&&t.push(r),r=r[v];return t}getElementsByTagName(e){const t=new Yr;let{[v]:r,[h]:n}=this;for(;r!==n;)1!==r.nodeType||r.localName!==e&&dr(r)!==e||t.push(r),r=r[v];return t}querySelector(e){const t=qi(this,e);let{[v]:r,[h]:n}=this;for(;r!==n;){if(1===r.nodeType&&t(r))return r;r=1===r.nodeType&&"template"===r.localName?r[h]:r[v]}return null}querySelectorAll(e){const t=qi(this,e),r=new Yr;let{[v]:n,[h]:i}=this;for(;n!==i;)1===n.nodeType&&t(n)&&r.push(n),n=1===n.nodeType&&"template"===n.localName?n[h]:n[v];return r}appendChild(e){return this.insertBefore(e,this[h])}contains(e){let t=e;for(;t&&t!==this;)t=t.parentNode;return t===this}insertBefore(e,t=null){if(e===t)return e;if(e===this)throw new Error("unable to append a node to itself");const r=t||this[h];switch(e.nodeType){case 1:e.remove(),e.parentNode=this,cr(r[_],e,r),Ur(e,null),_r(e);break;case Jt:{let{[x]:t,firstChild:n,lastChild:i}=e;if(n){((e,t,r,n)=>{lr(e,t),lr(ar(r),n)})(r[_],n,i,r),lr(e,e[h]),t&&t.replaceChildren();do{n.parentNode=this,Ur(n,null),1===n.nodeType&&_r(n)}while(n!==i&&(n=dn(n)))}break}case 3:case 8:case 4:e.remove();default:e.parentNode=this,ur(r[_],e,r),Ur(e,null)}return e}normalize(){let{[v]:e,[h]:t}=this;for(;e!==t;){const{[v]:t,[_]:r,nodeType:n}=e;3===n&&(e[A]?r&&3===r.nodeType&&(r.textContent+=e.textContent,e.remove()):e.remove()),e=t}}removeChild(e){if(e.parentNode!==this)throw new Error("node is not a child");return e.remove(),e}replaceChild(e,t){const r=ar(t)[v];return t.remove(),this.insertBefore(e,r),t}}class Pi extends Oi{getElementById(e){let{[v]:t,[h]:r}=this;for(;t!==r;){if(1===t.nodeType&&t.id===e)return t;t=t[v]}return null}cloneNode(e){const{ownerDocument:t,constructor:r}=this,n=new r(t);if(e){const{[h]:t}=n;for(const r of this.childNodes)n.insertBefore(r.cloneNode(e),t)}return n}toString(){const{childNodes:e,localName:t}=this;return`<${t}>${e.join("")}</${t}>`}toJSON(){const e=[];return((e,t)=>{t.push(e.nodeType),qr(e,t)})(this,e),e}}class Bi extends Pi{constructor(e){super(e,"#document-fragment",Jt)}}class Mi extends Qr{constructor(e,t,r="",n=""){super(e,"#document-type",Zt),this.name=t,this.publicId=r,this.systemId=n}cloneNode(){const{ownerDocument:e,name:t,publicId:r,systemId:n}=this;return new Mi(e,t,r,n)}toString(){const{name:e,publicId:t,systemId:r}=this,n=0<t.length,i=[e];return n&&i.push("PUBLIC",`"${t}"`),r.length&&(n||i.push("SYSTEM"),i.push(`"${r}"`)),`<!DOCTYPE ${i.join(" ")}>`}toJSON(){const e=[];return Lr(this,e),e}}const Ui=e=>e.childNodes.join(""),zi=(e,t)=>{const{ownerDocument:r}=e,{constructor:n}=r,i=new n;i[o]=r[o];const{childNodes:s}=Cr(i,or(e),t);e.replaceChildren(...s.map(Fi,r))};function Fi(e){switch(e.ownerDocument=this,e.nodeType){case 1:case Jt:e.childNodes.forEach(Fi,this)}return e}const ji=e=>e.replace(/(([A-Z0-9])([A-Z0-9][a-z]))|(([a-z0-9]+)([A-Z]))/g,"$2$5-$3$6").toLowerCase(),Hi=new WeakMap,Vi=e=>`data-${ji(e)}`,Wi=e=>e.slice(5).replace(/-([a-z])/g,((e,t)=>t.toUpperCase())),Gi={get(e,t){if(t in e)return Hi.get(e).getAttribute(Vi(t))},set:(e,t,r)=>(e[t]=r,Hi.get(e).setAttribute(Vi(t),r),!0),deleteProperty:(e,t)=>(t in e&&Hi.get(e).removeAttribute(Vi(t)),delete e[t])};class $i{constructor(e){for(const{name:t,value:r}of e.attributes)/^data-/.test(t)&&(this[Wi(t)]=r);return Hi.set(this,e),new Proxy(this,Gi)}}ir($i.prototype,null);const{add:Zi}=Set.prototype,Ji=(e,t)=>{for(const r of t)r&&Zi.call(e,r)},Ki=({[y]:e,value:t})=>{const r=e.getAttributeNode("class");r?r.value=t:jr(e,new on(e.ownerDocument,"class",t))};class Yi extends Set{constructor(e){super(),this[y]=e;const t=e.getAttributeNode("class");t&&Ji(this,t.value.split(/\s+/))}get length(){return this.size}get value(){return[...this].join(" ")}add(...e){Ji(this,e),Ki(this)}contains(e){return this.has(e)}remove(...e){for(const t of e)this.delete(t);Ki(this)}toggle(e,t){if(this.has(e)){if(t)return!0;this.delete(e),Ki(this)}else if(t||1===arguments.length)return super.add(e),Ki(this),!0;return!1}replace(e,t){return!!this.has(e)&&(this.delete(e),super.add(t),Ki(this),!0)}supports(){return!0}}const Xi=new WeakMap,Qi=e=>[...e.keys()].filter((e=>e!==x)),es=e=>{const t=Xi.get(e).getAttributeNode("style");if((!t||t[s]||e.get(x)!==t)&&(e.clear(),t)){e.set(x,t);for(const r of t[A].split(/\s*;\s*/)){let[t,...n]=r.split(":");if(n.length>0){t=t.trim();const r=n.join(":").trim();t&&r&&e.set(t,r)}}}return t},ts={get:(e,t)=>t in ns?e[t]:(es(e),"length"===t?Qi(e).length:/^\d+$/.test(t)?Qi(e)[t]:e.get(ji(t))),set(e,t,r){if("cssText"===t)e[t]=r;else{let n=es(e);if(null==r?e.delete(ji(t)):e.set(ji(t),r),!n){const t=Xi.get(e);n=t.ownerDocument.createAttribute("style"),t.setAttributeNode(n),e.set(x,n)}n[s]=!1,n[A]=e.toString()}return!0}};class rs extends Map{constructor(e){return super(),Xi.set(this,e),new Proxy(this,ts)}get cssText(){return this.toString()}set cssText(e){Xi.get(this).setAttribute("style",e)}getPropertyValue(e){const t=this[x];return ts.get(t,e)}setProperty(e,t){const r=this[x];ts.set(r,e,t)}removeProperty(e){const t=this[x];ts.set(t,e,null)}[Symbol.iterator](){const e=this[x];es(e);const t=Qi(e),{length:r}=t;let n=0;return{next(){const e=n===r;return{done:e,value:e?null:t[n++]}}}}get[x](){return this}toString(){const e=this[x];es(e);const t=[];return e.forEach(is,t),t.join(";")}}const{prototype:ns}=rs;function is(e,t){t!==x&&this.push(`${t}:${e}`)}function ss(e){return e.currentTarget}class as{static get BUBBLING_PHASE(){return 3}static get AT_TARGET(){return 2}static get CAPTURING_PHASE(){return 1}static get NONE(){return 0}constructor(e,t={}){this.type=e,this.bubbles=!!t.bubbles,this.cancelBubble=!1,this._stopImmediatePropagationFlag=!1,this.cancelable=!!t.cancelable,this.eventPhase=this.NONE,this.timeStamp=Date.now(),this.defaultPrevented=!1,this.originalTarget=null,this.returnValue=null,this.srcElement=null,this.target=null,this._path=[]}get BUBBLING_PHASE(){return 3}get AT_TARGET(){return 2}get CAPTURING_PHASE(){return 1}get NONE(){return 0}preventDefault(){this.defaultPrevented=!0}composedPath(){return this._path.map(ss)}stopPropagation(){this.cancelBubble=!0}stopImmediatePropagation(){this.stopPropagation(),this._stopImmediatePropagationFlag=!0}}class os extends Array{constructor(e){super(),this.ownerElement=e}getNamedItem(e){return this.ownerElement.getAttributeNode(e)}setNamedItem(e){this.ownerElement.setAttributeNode(e),this.unshift(e)}removeNamedItem(e){const t=this.getNamedItem(e);this.ownerElement.removeAttribute(e),this.splice(this.indexOf(t),1)}item(e){return e<this.length?this[e]:null}getNamedItemNS(e,t){return this.getNamedItem(t)}setNamedItemNS(e,t){return this.setNamedItem(t)}removeNamedItemNS(e,t){return this.removeNamedItem(t)}}class ls extends Pi{constructor(e){super(e.ownerDocument,"#shadow-root",Jt),this.host=e}get innerHTML(){return Ui(this)}set innerHTML(e){zi(this,e)}}const cs={get:(e,t)=>t in e?e[t]:e.find((({name:e})=>e===t))},us=(e,t,r)=>{if("ownerSVGElement"in t){const n=e.createElementNS(Yt,r);return n.ownerSVGElement=t.ownerSVGElement,n}return e.createElement(r)},ds=({localName:e,ownerDocument:t})=>t[g].voidElements.test(e);class hs extends Oi{constructor(e,t){super(e,t,1),this[a]=null,this[c]=null,this[k]=null}get isConnected(){return ln(this)}get parentElement(){return cn(this)}get previousSibling(){return un(this)}get nextSibling(){return dn(this)}get namespaceURI(){return"http://www.w3.org/1999/xhtml"}get previousElementSibling(){return pn(this)}get nextElementSibling(){return hn(this)}before(...e){mn(this,e)}after(...e){gn(this,e)}replaceWith(...e){bn(this,e)}remove(){vn(this[_],this,this[h][v])}get id(){return Gr.get(this,"id")}set id(e){Gr.set(this,"id",e)}get className(){return this.classList.value}set className(e){const{classList:t}=this;t.clear(),t.add(...sr(e).split(/\s+/))}get nodeName(){return dr(this)}get tagName(){return dr(this)}get classList(){return this[a]||(this[a]=new Yi(this))}get dataset(){return this[c]||(this[c]=new $i(this))}getBoundingClientRect(){return{x:0,y:0,bottom:0,height:0,left:0,right:0,top:0,width:0}}get nonce(){return Gr.get(this,"nonce")}set nonce(e){Gr.set(this,"nonce",e)}get style(){return this[k]||(this[k]=new rs(this))}get tabIndex(){return Wr.get(this,"tabindex")||-1}set tabIndex(e){Wr.set(this,"tabindex",e)}get slot(){return Gr.get(this,"slot")}set slot(e){Gr.set(this,"slot",e)}get innerText(){const e=[];let{[v]:t,[h]:r}=this;for(;t!==r;)3===t.nodeType?e.push(t.textContent.replace(/\s+/g," ")):e.length&&t[v]!=r&&Kt.has(t.tagName)&&e.push("\n"),t=t[v];return e.join("")}get textContent(){const e=[];let{[v]:t,[h]:r}=this;for(;t!==r;){const r=t.nodeType;3!==r&&4!==r||e.push(t.textContent),t=t[v]}return e.join("")}set textContent(e){this.replaceChildren(),null!=e&&""!==e&&this.appendChild(new Ii(this.ownerDocument,e))}get innerHTML(){return Ui(this)}set innerHTML(e){zi(this,e)}get outerHTML(){return this.toString()}set outerHTML(e){const t=this.ownerDocument.createElement("");t.innerHTML=e,this.replaceWith(...t.childNodes)}get attributes(){const e=new os(this);let t=this[v];for(;2===t.nodeType;)e.push(t),t=t[v];return new Proxy(e,cs)}focus(){this.dispatchEvent(new as("focus"))}getAttribute(e){if("class"===e)return this.className;const t=this.getAttributeNode(e);return t&&(or(this)?t.value:sn(t.value))}getAttributeNode(e){let t=this[v];for(;2===t.nodeType;){if(t.name===e)return t;t=t[v]}return null}getAttributeNames(){const e=new Yr;let t=this[v];for(;2===t.nodeType;)e.push(t.name),t=t[v];return e}hasAttribute(e){return!!this.getAttributeNode(e)}hasAttributes(){return 2===this[v].nodeType}removeAttribute(e){"class"===e&&this[a]&&this[a].clear();let t=this[v];for(;2===t.nodeType;){if(t.name===e)return void Hr(this,t);t=t[v]}}removeAttributeNode(e){let t=this[v];for(;2===t.nodeType;){if(t===e)return void Hr(this,t);t=t[v]}}setAttribute(e,t){if("class"===e)this.className=t;else{const r=this.getAttributeNode(e);r?r.value=t:jr(this,new on(this.ownerDocument,e,t))}}setAttributeNode(e){const{name:t}=e,r=this.getAttributeNode(t);if(r!==e){r&&this.removeAttributeNode(r);const{ownerElement:t}=e;t&&t.removeAttributeNode(e),jr(this,e)}return r}toggleAttribute(e,t){return this.hasAttribute(e)?!!t||(this.removeAttribute(e),!1):!(!t&&1!==arguments.length||(this.setAttribute(e,""),0))}get shadowRoot(){if(pr.has(this)){const{mode:e,shadowRoot:t}=pr.get(this);if("open"===e)return t}return null}attachShadow(e){if(pr.has(this))throw new Error("operation not supported");const t=new ls(this);return pr.set(this,{mode:e.mode,shadowRoot:t}),t}matches(e){return((e,t)=>function(e,t,r){const n=yi(r);return("function"==typeof t?t:ci(t,n))(e)}(e,t,{strict:!0,context:t.includes(":scope")?e:void 0,xmlMode:!or(e),adapter:Ni}))(this,e)}closest(e){let t=this;const r=qi(t,e);for(;t&&!r(t);)t=t.parentElement;return t}insertAdjacentElement(e,t){const{parentElement:r}=this;switch(e){case"beforebegin":if(r){r.insertBefore(t,this);break}return null;case"afterbegin":this.insertBefore(t,this.firstChild);break;case"beforeend":this.insertBefore(t,null);break;case"afterend":if(r){r.insertBefore(t,this.nextSibling);break}return null}return t}insertAdjacentHTML(e,t){const r=this.ownerDocument.createElement("template");r.innerHTML=t,this.insertAdjacentElement(e,r.content)}insertAdjacentText(e,t){const r=this.ownerDocument.createTextNode(t);this.insertAdjacentElement(e,r)}cloneNode(e=!1){const{ownerDocument:t,localName:r}=this,n=e=>{e.parentNode=s,lr(a,e),a=e},i=us(t,this,r);let s=i,a=i,{[v]:o,[h]:l}=this;for(;o!==l&&(e||2===o.nodeType);){switch(o.nodeType){case $t:lr(a,s[h]),a=s[h],s=s.parentNode;break;case 1:{const e=us(t,o,o.localName);n(e),s=e;break}case 2:{const t=o.cloneNode(e);t.ownerElement=s,n(t);break}case 3:case 8:case 4:n(o.cloneNode(e))}o=o[v]}return lr(a,i[h]),i}toString(){const e=[],{[h]:t}=this;let r={[v]:this},n=!1;do{switch(r=r[v],r.nodeType){case 2:{const t=" "+r;switch(t){case" id":case" class":case" style":break;default:e.push(t)}break}case $t:{const t=r[S];n?("ownerSVGElement"in t?e.push(" />"):ds(t)?e.push(or(t)?">":" />"):e.push(`></${t.localName}>`),n=!1):e.push(`</${t.localName}>`);break}case 1:n&&e.push(">"),r.toString!==this.toString?(e.push(r.toString()),r=r[h],n=!1):(e.push(`<${r.localName}`),n=!0);break;case 3:case 8:case 4:e.push((n?">":"")+r),n=!1}}while(r!==t);return e.join("")}toJSON(){const e=[];return Or(this,e),e}getAttributeNS(e,t){return this.getAttribute(t)}getElementsByTagNameNS(e,t){return this.getElementsByTagName(t)}hasAttributeNS(e,t){return this.hasAttribute(t)}removeAttributeNS(e,t){this.removeAttribute(t)}setAttributeNS(e,t,r){this.setAttribute(t,r)}setAttributeNodeNS(e){return this.setAttributeNode(e)}}const ps=new WeakMap,fs={get:(e,t)=>e[t],set:(e,t,r)=>(e[t]=r,!0)};class ms extends hs{constructor(e,t,r=null){super(e,t),this.ownerSVGElement=r}get className(){return ps.has(this)||ps.set(this,new Proxy({baseVal:"",animVal:""},fs)),ps.get(this)}set className(e){const{classList:t}=this;t.clear(),t.add(...sr(e).split(/\s+/))}get namespaceURI(){return"http://www.w3.org/2000/svg"}getAttribute(e){return"class"===e?[...this.classList].join(" "):super.getAttribute(e)}setAttribute(e,t){if("class"===e)this.className=t;else if("style"===e){const{className:e}=this;e.baseVal=e.animVal=t}super.setAttribute(e,t)}}const gs=()=>{throw new TypeError("Illegal constructor")};function bs(){gs()}function vs(){gs()}function ys(){gs()}function _s(){gs()}function xs(){gs()}function ws(){gs()}function Ss(){gs()}function ks(){gs()}function Es(){gs()}function As(){gs()}function Cs(){gs()}ir(bs,on),bs.prototype=on.prototype,ir(vs,_n),vs.prototype=_n.prototype,ir(ys,yn),ys.prototype=yn.prototype,ir(_s,xn),_s.prototype=xn.prototype,ir(xs,Bi),xs.prototype=Bi.prototype,ir(ws,Mi),ws.prototype=Mi.prototype,ir(Ss,hs),Ss.prototype=hs.prototype,ir(ks,Qr),ks.prototype=Qr.prototype,ir(Es,ls),Es.prototype=ls.prototype,ir(As,Ii),As.prototype=Ii.prototype,ir(Cs,ms),Cs.prototype=ms.prototype;const Ts={Attr:bs,CDATASection:vs,CharacterData:ys,Comment:_s,DocumentFragment:xs,DocumentType:ws,Element:Ss,Node:ks,ShadowRoot:Es,Text:As,SVGElement:Cs},Rs=new WeakMap,Ns={get:(e,t)=>Rs.has(e)&&Rs.get(e)[t]||null,set(e,t,r){Rs.has(e)||Rs.set(e,{});const n=Rs.get(e),i=t.slice(2);n[t]&&e.removeEventListener(i,n[t],!1),(n[t]=r)&&e.addEventListener(i,r,!1)}};class qs extends hs{static get observedAttributes(){return[]}constructor(e=null,t=""){super(e,t);const r=!e;let n;if(r){const{constructor:r}=this;if(!mr.has(r))throw new Error("unable to initialize this Custom Element");({ownerDocument:e,localName:t,options:n}=mr.get(r))}if(e[E]){const{element:t,values:r}=e[E];e[E]=null;for(const[e,n]of r)t[e]=n;return t}r&&(this.ownerDocument=this[h].ownerDocument=e,this.localName=t,gr.set(this,{connected:!1}),n.is&&this.setAttribute("is",n.is))}blur(){this.dispatchEvent(new as("blur"))}click(){const e=new as("click",{bubbles:!0,cancelable:!0});e.button=0,this.dispatchEvent(e)}get accessKeyLabel(){const{accessKey:e}=this;return e&&`Alt+Shift+${e}`}get isContentEditable(){return this.hasAttribute("contenteditable")}get contentEditable(){return Vr.get(this,"contenteditable")}set contentEditable(e){Vr.set(this,"contenteditable",e)}get draggable(){return Vr.get(this,"draggable")}set draggable(e){Vr.set(this,"draggable",e)}get hidden(){return Vr.get(this,"hidden")}set hidden(e){Vr.set(this,"hidden",e)}get spellcheck(){return Vr.get(this,"spellcheck")}set spellcheck(e){Vr.set(this,"spellcheck",e)}get accessKey(){return Gr.get(this,"accesskey")}set accessKey(e){Gr.set(this,"accesskey",e)}get dir(){return Gr.get(this,"dir")}set dir(e){Gr.set(this,"dir",e)}get lang(){return Gr.get(this,"lang")}set lang(e){Gr.set(this,"lang",e)}get title(){return Gr.get(this,"title")}set title(e){Gr.set(this,"title",e)}get onabort(){return Ns.get(this,"onabort")}set onabort(e){Ns.set(this,"onabort",e)}get onblur(){return Ns.get(this,"onblur")}set onblur(e){Ns.set(this,"onblur",e)}get oncancel(){return Ns.get(this,"oncancel")}set oncancel(e){Ns.set(this,"oncancel",e)}get oncanplay(){return Ns.get(this,"oncanplay")}set oncanplay(e){Ns.set(this,"oncanplay",e)}get oncanplaythrough(){return Ns.get(this,"oncanplaythrough")}set oncanplaythrough(e){Ns.set(this,"oncanplaythrough",e)}get onchange(){return Ns.get(this,"onchange")}set onchange(e){Ns.set(this,"onchange",e)}get onclick(){return Ns.get(this,"onclick")}set onclick(e){Ns.set(this,"onclick",e)}get onclose(){return Ns.get(this,"onclose")}set onclose(e){Ns.set(this,"onclose",e)}get oncontextmenu(){return Ns.get(this,"oncontextmenu")}set oncontextmenu(e){Ns.set(this,"oncontextmenu",e)}get oncuechange(){return Ns.get(this,"oncuechange")}set oncuechange(e){Ns.set(this,"oncuechange",e)}get ondblclick(){return Ns.get(this,"ondblclick")}set ondblclick(e){Ns.set(this,"ondblclick",e)}get ondrag(){return Ns.get(this,"ondrag")}set ondrag(e){Ns.set(this,"ondrag",e)}get ondragend(){return Ns.get(this,"ondragend")}set ondragend(e){Ns.set(this,"ondragend",e)}get ondragenter(){return Ns.get(this,"ondragenter")}set ondragenter(e){Ns.set(this,"ondragenter",e)}get ondragleave(){return Ns.get(this,"ondragleave")}set ondragleave(e){Ns.set(this,"ondragleave",e)}get ondragover(){return Ns.get(this,"ondragover")}set ondragover(e){Ns.set(this,"ondragover",e)}get ondragstart(){return Ns.get(this,"ondragstart")}set ondragstart(e){Ns.set(this,"ondragstart",e)}get ondrop(){return Ns.get(this,"ondrop")}set ondrop(e){Ns.set(this,"ondrop",e)}get ondurationchange(){return Ns.get(this,"ondurationchange")}set ondurationchange(e){Ns.set(this,"ondurationchange",e)}get onemptied(){return Ns.get(this,"onemptied")}set onemptied(e){Ns.set(this,"onemptied",e)}get onended(){return Ns.get(this,"onended")}set onended(e){Ns.set(this,"onended",e)}get onerror(){return Ns.get(this,"onerror")}set onerror(e){Ns.set(this,"onerror",e)}get onfocus(){return Ns.get(this,"onfocus")}set onfocus(e){Ns.set(this,"onfocus",e)}get oninput(){return Ns.get(this,"oninput")}set oninput(e){Ns.set(this,"oninput",e)}get oninvalid(){return Ns.get(this,"oninvalid")}set oninvalid(e){Ns.set(this,"oninvalid",e)}get onkeydown(){return Ns.get(this,"onkeydown")}set onkeydown(e){Ns.set(this,"onkeydown",e)}get onkeypress(){return Ns.get(this,"onkeypress")}set onkeypress(e){Ns.set(this,"onkeypress",e)}get onkeyup(){return Ns.get(this,"onkeyup")}set onkeyup(e){Ns.set(this,"onkeyup",e)}get onload(){return Ns.get(this,"onload")}set onload(e){Ns.set(this,"onload",e)}get onloadeddata(){return Ns.get(this,"onloadeddata")}set onloadeddata(e){Ns.set(this,"onloadeddata",e)}get onloadedmetadata(){return Ns.get(this,"onloadedmetadata")}set onloadedmetadata(e){Ns.set(this,"onloadedmetadata",e)}get onloadstart(){return Ns.get(this,"onloadstart")}set onloadstart(e){Ns.set(this,"onloadstart",e)}get onmousedown(){return Ns.get(this,"onmousedown")}set onmousedown(e){Ns.set(this,"onmousedown",e)}get onmouseenter(){return Ns.get(this,"onmouseenter")}set onmouseenter(e){Ns.set(this,"onmouseenter",e)}get onmouseleave(){return Ns.get(this,"onmouseleave")}set onmouseleave(e){Ns.set(this,"onmouseleave",e)}get onmousemove(){return Ns.get(this,"onmousemove")}set onmousemove(e){Ns.set(this,"onmousemove",e)}get onmouseout(){return Ns.get(this,"onmouseout")}set onmouseout(e){Ns.set(this,"onmouseout",e)}get onmouseover(){return Ns.get(this,"onmouseover")}set onmouseover(e){Ns.set(this,"onmouseover",e)}get onmouseup(){return Ns.get(this,"onmouseup")}set onmouseup(e){Ns.set(this,"onmouseup",e)}get onmousewheel(){return Ns.get(this,"onmousewheel")}set onmousewheel(e){Ns.set(this,"onmousewheel",e)}get onpause(){return Ns.get(this,"onpause")}set onpause(e){Ns.set(this,"onpause",e)}get onplay(){return Ns.get(this,"onplay")}set onplay(e){Ns.set(this,"onplay",e)}get onplaying(){return Ns.get(this,"onplaying")}set onplaying(e){Ns.set(this,"onplaying",e)}get onprogress(){return Ns.get(this,"onprogress")}set onprogress(e){Ns.set(this,"onprogress",e)}get onratechange(){return Ns.get(this,"onratechange")}set onratechange(e){Ns.set(this,"onratechange",e)}get onreset(){return Ns.get(this,"onreset")}set onreset(e){Ns.set(this,"onreset",e)}get onresize(){return Ns.get(this,"onresize")}set onresize(e){Ns.set(this,"onresize",e)}get onscroll(){return Ns.get(this,"onscroll")}set onscroll(e){Ns.set(this,"onscroll",e)}get onseeked(){return Ns.get(this,"onseeked")}set onseeked(e){Ns.set(this,"onseeked",e)}get onseeking(){return Ns.get(this,"onseeking")}set onseeking(e){Ns.set(this,"onseeking",e)}get onselect(){return Ns.get(this,"onselect")}set onselect(e){Ns.set(this,"onselect",e)}get onshow(){return Ns.get(this,"onshow")}set onshow(e){Ns.set(this,"onshow",e)}get onstalled(){return Ns.get(this,"onstalled")}set onstalled(e){Ns.set(this,"onstalled",e)}get onsubmit(){return Ns.get(this,"onsubmit")}set onsubmit(e){Ns.set(this,"onsubmit",e)}get onsuspend(){return Ns.get(this,"onsuspend")}set onsuspend(e){Ns.set(this,"onsuspend",e)}get ontimeupdate(){return Ns.get(this,"ontimeupdate")}set ontimeupdate(e){Ns.set(this,"ontimeupdate",e)}get ontoggle(){return Ns.get(this,"ontoggle")}set ontoggle(e){Ns.set(this,"ontoggle",e)}get onvolumechange(){return Ns.get(this,"onvolumechange")}set onvolumechange(e){Ns.set(this,"onvolumechange",e)}get onwaiting(){return Ns.get(this,"onwaiting")}set onwaiting(e){Ns.set(this,"onwaiting",e)}get onauxclick(){return Ns.get(this,"onauxclick")}set onauxclick(e){Ns.set(this,"onauxclick",e)}get ongotpointercapture(){return Ns.get(this,"ongotpointercapture")}set ongotpointercapture(e){Ns.set(this,"ongotpointercapture",e)}get onlostpointercapture(){return Ns.get(this,"onlostpointercapture")}set onlostpointercapture(e){Ns.set(this,"onlostpointercapture",e)}get onpointercancel(){return Ns.get(this,"onpointercancel")}set onpointercancel(e){Ns.set(this,"onpointercancel",e)}get onpointerdown(){return Ns.get(this,"onpointerdown")}set onpointerdown(e){Ns.set(this,"onpointerdown",e)}get onpointerenter(){return Ns.get(this,"onpointerenter")}set onpointerenter(e){Ns.set(this,"onpointerenter",e)}get onpointerleave(){return Ns.get(this,"onpointerleave")}set onpointerleave(e){Ns.set(this,"onpointerleave",e)}get onpointermove(){return Ns.get(this,"onpointermove")}set onpointermove(e){Ns.set(this,"onpointermove",e)}get onpointerout(){return Ns.get(this,"onpointerout")}set onpointerout(e){Ns.set(this,"onpointerout",e)}get onpointerover(){return Ns.get(this,"onpointerover")}set onpointerover(e){Ns.set(this,"onpointerover",e)}get onpointerup(){return Ns.get(this,"onpointerup")}set onpointerup(e){Ns.set(this,"onpointerup",e)}}const Is="template";class Ds extends qs{constructor(e){super(e,Is);const t=this.ownerDocument.createDocumentFragment();(this[l]=t)[x]=this}get content(){if(this.hasChildNodes()&&!this[l].hasChildNodes())for(const e of this.childNodes)this[l].appendChild(e.cloneNode(!0));return this[l]}}Rr(Is,Ds);const{toString:Ls}=qs.prototype;class Os extends qs{get innerHTML(){return this.textContent}set innerHTML(e){this.textContent=e}toString(){return Ls.call(this.cloneNode()).replace("><",(()=>`>${this.textContent}<`))}}const Ps="script";class Bs extends Os{constructor(e,t=Ps){super(e,t)}get type(){return Gr.get(this,"type")}set type(e){Gr.set(this,"type",e)}get src(){return Gr.get(this,"src")}set src(e){Gr.set(this,"src",e)}get defer(){return Vr.get(this,"defer")}set defer(e){Vr.set(this,"defer",e)}get crossOrigin(){return Gr.get(this,"crossorigin")}set crossOrigin(e){Gr.set(this,"crossorigin",e)}get nomodule(){return Vr.get(this,"nomodule")}set nomodule(e){Vr.set(this,"nomodule",e)}get referrerPolicy(){return Gr.get(this,"referrerpolicy")}set referrerPolicy(e){Gr.set(this,"referrerpolicy",e)}get nonce(){return Gr.get(this,"nonce")}set nonce(e){Gr.set(this,"nonce",e)}get async(){return Vr.get(this,"async")}set async(e){Vr.set(this,"async",e)}get text(){return this.textContent}set text(e){this.textContent=e}}Rr(Ps,Bs);const Ms="iframe";class Us extends qs{constructor(e,t=Ms){super(e,t)}get src(){return Gr.get(this,"src")}set src(e){Gr.set(this,"src",e)}get srcdoc(){return Gr.get(this,"srcdoc")}set srcdoc(e){Gr.set(this,"srcdoc",e)}get name(){return Gr.get(this,"name")}set name(e){Gr.set(this,"name",e)}get allow(){return Gr.get(this,"allow")}set allow(e){Gr.set(this,"allow",e)}get allowFullscreen(){return Vr.get(this,"allowfullscreen")}set allowFullscreen(e){Vr.set(this,"allowfullscreen",e)}get referrerPolicy(){return Gr.get(this,"referrerpolicy")}set referrerPolicy(e){Gr.set(this,"referrerpolicy",e)}get loading(){return Gr.get(this,"loading")}set loading(e){Gr.set(this,"loading",e)}}Rr(Ms,Us);var zs=r(7908);const Fs="style";class js extends Os{constructor(e,t=Fs){super(e,t),this[w]=null}get sheet(){const e=this[w];return null!==e?e:this[w]=(0,zs.parse)(this.textContent)}get innerHTML(){return super.innerHTML||""}set innerHTML(e){super.textContent=e,this[w]=null}get innerText(){return super.innerText||""}set innerText(e){super.textContent=e,this[w]=null}get textContent(){return super.textContent||""}set textContent(e){super.textContent=e,this[w]=null}}Rr(Fs,js);class Hs extends qs{constructor(e,t="time"){super(e,t)}get dateTime(){return Gr.get(this,"datetime")}set dateTime(e){Gr.set(this,"datetime",e)}}Rr("time",Hs);const Vs="input";class Ws extends qs{constructor(e,t=Vs){super(e,t)}get autofocus(){return Vr.get(this,"autofocus")||-1}set autofocus(e){Vr.set(this,"autofocus",e)}get disabled(){return Vr.get(this,"disabled")}set disabled(e){Vr.set(this,"disabled",e)}get name(){return this.getAttribute("name")}set name(e){this.setAttribute("name",e)}get placeholder(){return this.getAttribute("placeholder")}set placeholder(e){this.setAttribute("placeholder",e)}get type(){return this.getAttribute("type")}set type(e){this.setAttribute("type",e)}get value(){return Gr.get(this,"value")}set value(e){Gr.set(this,"value",e)}}Rr(Vs,Ws);class Gs extends qs{constructor(e,t="h1"){super(e,t)}}Rr(["h1","h2","h3","h4","h5","h6"],Gs);var $s=r(5873);const{createCanvas:Zs}=$s,Js="canvas";class Ks extends qs{constructor(e,t=Js){super(e,t),this[m]=Zs(300,150)}get width(){return this[m].width}set width(e){Wr.set(this,"width",e),this[m].width=e}get height(){return this[m].height}set height(e){Wr.set(this,"height",e),this[m].height=e}getContext(e){return this[m].getContext(e)}toDataURL(...e){return this[m].toDataURL(...e)}}Rr(Js,Ks);const Ys="option";class Xs extends qs{constructor(e,t=Ys){super(e,t)}get value(){return Gr.get(this,"value")}set value(e){Gr.set(this,"value",e)}get selected(){return Vr.get(this,"selected")}set selected(e){const t=this.parentElement?.querySelector("option[selected]");t&&t!==this&&(t.selected=!1),Vr.set(this,"selected",e)}}Rr(Ys,Xs);const Qs="title";class ea extends Os{constructor(e,t=Qs){super(e,t)}}Rr(Qs,ea);const ta="select";class ra extends qs{constructor(e,t=ta){super(e,t)}get options(){let e=new Yr,{firstElementChild:t}=this;for(;t;)"OPTGROUP"===t.tagName?e.push(...t.children):e.push(t),t=t.nextElementSibling;return e}get disabled(){return Vr.get(this,"disabled")}set disabled(e){Vr.set(this,"disabled",e)}get name(){return this.getAttribute("name")}set name(e){this.setAttribute("name",e)}get value(){return this.querySelector("option[selected]")?.value}}Rr(ta,ra);const na="button";class ia extends qs{constructor(e,t=na){super(e,t)}get disabled(){return Vr.get(this,"disabled")}set disabled(e){Vr.set(this,"disabled",e)}get name(){return this.getAttribute("name")}set name(e){this.setAttribute("name",e)}get type(){return this.getAttribute("type")}set type(e){this.setAttribute("type",e)}}Rr(na,ia);const sa="textarea";class aa extends Os{constructor(e,t=sa){super(e,t)}get disabled(){return Vr.get(this,"disabled")}set disabled(e){Vr.set(this,"disabled",e)}get name(){return this.getAttribute("name")}set name(e){this.setAttribute("name",e)}get placeholder(){return this.getAttribute("placeholder")}set placeholder(e){this.setAttribute("placeholder",e)}get type(){return this.getAttribute("type")}set type(e){this.setAttribute("type",e)}get value(){return this.textContent}set value(e){this.textContent=e}}Rr(sa,aa);const oa="link";class la extends qs{constructor(e,t=oa){super(e,t)}get disabled(){return Vr.get(this,"disabled")}set disabled(e){Vr.set(this,"disabled",e)}get href(){return Gr.get(this,"href")}set href(e){Gr.set(this,"href",e)}get hreflang(){return Gr.get(this,"hreflang")}set hreflang(e){Gr.set(this,"hreflang",e)}get media(){return Gr.get(this,"media")}set media(e){Gr.set(this,"media",e)}get rel(){return Gr.get(this,"rel")}set rel(e){Gr.set(this,"rel",e)}get type(){return Gr.get(this,"type")}set type(e){Gr.set(this,"type",e)}}Rr(oa,la);const ca="slot";class ua extends qs{constructor(e,t=ca){super(e,t)}get name(){return this.getAttribute("name")}set name(e){this.setAttribute("name",e)}assign(){}assignedNodes(e){const t=!!this.name,r=this.getRootNode().host?.childNodes??[];let n;if(n=t?[...r].filter((e=>e.slot===this.name)):[...r].filter((e=>!e.slot)),e?.flatten){const e=[];for(let t of n)"slot"===t.localName?e.push(...t.assignedNodes({flatten:!0})):e.push(t);n=e}return n.length?n:[...this.childNodes]}assignedElements(e){const t=this.assignedNodes(e).filter((e=>1===e.nodeType));return t.length?t:[...this.children]}}Rr(ca,ua);class da extends qs{constructor(e,t="img"){super(e,t)}get alt(){return Gr.get(this,"alt")}set alt(e){Gr.set(this,"alt",e)}get sizes(){return Gr.get(this,"sizes")}set sizes(e){Gr.set(this,"sizes",e)}get src(){return Gr.get(this,"src")}set src(e){Gr.set(this,"src",e)}get srcset(){return Gr.get(this,"srcset")}set srcset(e){Gr.set(this,"srcset",e)}get title(){return Gr.get(this,"title")}set title(e){Gr.set(this,"title",e)}get width(){return Wr.get(this,"width")}set width(e){Wr.set(this,"width",e)}get height(){return Wr.get(this,"height")}set height(e){Wr.set(this,"height",e)}}Rr("img",da);const ha="meta";class pa extends qs{constructor(e,t=ha){super(e,t)}get name(){return Gr.get(this,"name")}set name(e){Gr.set(this,"name",e)}get httpEquiv(){return Gr.get(this,"http-equiv")}set httpEquiv(e){Gr.set(this,"http-equiv",e)}get content(){return Gr.get(this,"content")}set content(e){Gr.set(this,"content",e)}get charset(){return Gr.get(this,"charset")}set charset(e){Gr.set(this,"charset",e)}get media(){return Gr.get(this,"media")}set media(e){Gr.set(this,"media",e)}}Rr(ha,pa);class fa extends qs{constructor(e,t="a"){super(e,t)}get href(){return encodeURI(decodeURI(Gr.get(this,"href")))}set href(e){Gr.set(this,"href",decodeURI(e))}get download(){return encodeURI(decodeURI(Gr.get(this,"download")))}set download(e){Gr.set(this,"download",decodeURI(e))}get target(){return Gr.get(this,"target")}set target(e){Gr.set(this,"target",e)}get type(){return Gr.get(this,"type")}set type(e){Gr.set(this,"type",e)}get rel(){return Gr.get(this,"rel")}set rel(e){Gr.set(this,"rel",e)}}Rr("a",fa);const ma="source";class ga extends qs{constructor(e,t=ma){super(e,t)}get src(){return Gr.get(this,"src")}set src(e){Gr.set(this,"src",e)}get srcset(){return Gr.get(this,"srcset")}set srcset(e){Gr.set(this,"srcset",e)}get sizes(){return Gr.get(this,"sizes")}set sizes(e){Gr.set(this,"sizes",e)}get type(){return Gr.get(this,"type")}set type(e){Gr.set(this,"type",e)}}Rr(ma,ga);const ba={HTMLElement:qs,HTMLTemplateElement:Ds,HTMLHtmlElement:class extends qs{constructor(e,t="html"){super(e,t)}},HTMLScriptElement:Bs,HTMLFrameElement:class extends qs{constructor(e,t="frame"){super(e,t)}},HTMLIFrameElement:Us,HTMLObjectElement:class extends qs{constructor(e,t="object"){super(e,t)}},HTMLHeadElement:class extends qs{constructor(e,t="head"){super(e,t)}},HTMLBodyElement:class extends qs{constructor(e,t="body"){super(e,t)}},HTMLStyleElement:js,HTMLTimeElement:Hs,HTMLFieldSetElement:class extends qs{constructor(e,t="fieldset"){super(e,t)}},HTMLEmbedElement:class extends qs{constructor(e,t="embed"){super(e,t)}},HTMLHRElement:class extends qs{constructor(e,t="hr"){super(e,t)}},HTMLProgressElement:class extends qs{constructor(e,t="progress"){super(e,t)}},HTMLParagraphElement:class extends qs{constructor(e,t="p"){super(e,t)}},HTMLTableElement:class extends qs{constructor(e,t="table"){super(e,t)}},HTMLFrameSetElement:class extends qs{constructor(e,t="frameset"){super(e,t)}},HTMLLIElement:class extends qs{constructor(e,t="li"){super(e,t)}},HTMLBaseElement:class extends qs{constructor(e,t="base"){super(e,t)}},HTMLDataListElement:class extends qs{constructor(e,t="datalist"){super(e,t)}},HTMLInputElement:Ws,HTMLParamElement:class extends qs{constructor(e,t="param"){super(e,t)}},HTMLMediaElement:class extends qs{constructor(e,t="media"){super(e,t)}},HTMLAudioElement:class extends qs{constructor(e,t="audio"){super(e,t)}},HTMLHeadingElement:Gs,HTMLDirectoryElement:class extends qs{constructor(e,t="dir"){super(e,t)}},HTMLQuoteElement:class extends qs{constructor(e,t="quote"){super(e,t)}},HTMLCanvasElement:Ks,HTMLLegendElement:class extends qs{constructor(e,t="legend"){super(e,t)}},HTMLOptionElement:Xs,HTMLSpanElement:class extends qs{constructor(e,t="span"){super(e,t)}},HTMLMeterElement:class extends qs{constructor(e,t="meter"){super(e,t)}},HTMLVideoElement:class extends qs{constructor(e,t="video"){super(e,t)}},HTMLTableCellElement:class extends qs{constructor(e,t="td"){super(e,t)}},HTMLTitleElement:ea,HTMLOutputElement:class extends qs{constructor(e,t="output"){super(e,t)}},HTMLTableRowElement:class extends qs{constructor(e,t="tr"){super(e,t)}},HTMLDataElement:class extends qs{constructor(e,t="data"){super(e,t)}},HTMLMenuElement:class extends qs{constructor(e,t="menu"){super(e,t)}},HTMLSelectElement:ra,HTMLBRElement:class extends qs{constructor(e,t="br"){super(e,t)}},HTMLButtonElement:ia,HTMLMapElement:class extends qs{constructor(e,t="map"){super(e,t)}},HTMLOptGroupElement:class extends qs{constructor(e,t="optgroup"){super(e,t)}},HTMLDListElement:class extends qs{constructor(e,t="dl"){super(e,t)}},HTMLTextAreaElement:aa,HTMLFontElement:class extends qs{constructor(e,t="font"){super(e,t)}},HTMLDivElement:class extends qs{constructor(e,t="div"){super(e,t)}},HTMLLinkElement:la,HTMLSlotElement:ua,HTMLFormElement:class extends qs{constructor(e,t="form"){super(e,t)}},HTMLImageElement:da,HTMLPreElement:class extends qs{constructor(e,t="pre"){super(e,t)}},HTMLUListElement:class extends qs{constructor(e,t="ul"){super(e,t)}},HTMLMetaElement:pa,HTMLPictureElement:class extends qs{constructor(e,t="picture"){super(e,t)}},HTMLAreaElement:class extends qs{constructor(e,t="area"){super(e,t)}},HTMLOListElement:class extends qs{constructor(e,t="ol"){super(e,t)}},HTMLTableCaptionElement:class extends qs{constructor(e,t="caption"){super(e,t)}},HTMLAnchorElement:fa,HTMLLabelElement:class extends qs{constructor(e,t="label"){super(e,t)}},HTMLUnknownElement:class extends qs{constructor(e,t="unknown"){super(e,t)}},HTMLModElement:class extends qs{constructor(e,t="mod"){super(e,t)}},HTMLDetailsElement:class extends qs{constructor(e,t="details"){super(e,t)}},HTMLSourceElement:ga,HTMLTrackElement:class extends qs{constructor(e,t="track"){super(e,t)}},HTMLMarqueeElement:class extends qs{constructor(e,t="marquee"){super(e,t)}}},va={test:()=>!0},ya={"text/html":{docType:"<!DOCTYPE html>",ignoreCase:!0,voidElements:/^(?:area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)$/i},"image/svg+xml":{docType:'<?xml version="1.0" encoding="utf-8"?>',ignoreCase:!1,voidElements:va},"text/xml":{docType:'<?xml version="1.0" encoding="utf-8"?>',ignoreCase:!1,voidElements:va},"application/xml":{docType:'<?xml version="1.0" encoding="utf-8"?>',ignoreCase:!1,voidElements:va},"application/xhtml+xml":{docType:'<?xml version="1.0" encoding="utf-8"?>',ignoreCase:!1,voidElements:va}};class _a extends as{constructor(e,t={}){super(e,t),this.detail=t.detail}}const xa=e=>class extends da{constructor(t,r){switch(super(e),arguments.length){case 1:this.height=t,this.width=t;break;case 2:this.height=r,this.width=t}}},wa=({[S]:e,[h]:t},r=null)=>{hr(e[_],t[v]);do{const n=ar(e),i=n===t?n:n[v];r?r.insertBefore(e,r[h]):e.remove(),e=i}while(e!==t)};class Sa{constructor(){this[S]=null,this[h]=null,this.commonAncestorContainer=null}insertNode(e){this[h].parentNode.insertBefore(e,this[S])}selectNode(e){this[S]=e,this[h]=ar(e)}selectNodeContents(e){this.selectNode(e),this.commonAncestorContainer=e}surroundContents(e){e.replaceChildren(this.extractContents())}setStartBefore(e){this[S]=e}setStartAfter(e){this[S]=e.nextSibling}setEndBefore(e){this[h]=ar(e.previousSibling)}setEndAfter(e){this[h]=ar(e)}cloneContents(){let{[S]:e,[h]:t}=this;const r=e.ownerDocument.createDocumentFragment();for(;e!==t;)r.insertBefore(e.cloneNode(!0),r[h]),e=ar(e),e!==t&&(e=e[v]);return r}deleteContents(){wa(this)}extractContents(){const e=this[S].ownerDocument.createDocumentFragment();return wa(this,e),e}createContextualFragment(e){const{commonAncestorContainer:t}=this,r="ownerSVGElement"in t,n=r?t.ownerDocument:t,i=n.createElement("template");i.innerHTML=e;let{content:s}=i;if(r){const e=[...s.childNodes];s=n.createDocumentFragment(),Object.setPrototypeOf(s,ms.prototype),s.ownerSVGElement=n;for(const t of e)Object.setPrototypeOf(t,ms.prototype),t.ownerSVGElement=n,s.appendChild(t)}else this.selectNode(s);return s}cloneRange(){const e=new Sa;return e[S]=this[S],e[h]=this[h],e}}const ka=({nodeType:e},t)=>{switch(e){case 1:return 1&t;case 3:return 4&t;case 8:return 128&t;case 4:return 8&t}return 0};class Ea{constructor(e,t=-1){this.root=e,this.currentNode=e,this.whatToShow=t;let{[v]:r,[h]:n}=e;if(9===e.nodeType){const{documentElement:t}=e;r=t,n=t[h]}const i=[];for(;r&&r!==n;)ka(r,t)&&i.push(r),r=r[v];this[x]={i:0,nodes:i}}nextNode(){const e=this[x];return this.currentNode=e.i<e.nodes.length?e.nodes[e.i++]:null,this.currentNode}}const Aa=(e,t,r)=>{let{[v]:n,[h]:i}=t;return e.call({ownerDocument:t,[v]:n,[h]:i},r)},Ca=Xt({},Ts,ba,{CustomEvent:_a,Event:as,EventTarget:Kr,InputEvent:class extends as{constructor(e,t={}){super(e,t),this.inputType=t.inputType,this.data=t.data,this.dataTransfer=t.dataTransfer,this.isComposing=t.isComposing||!1,this.ranges=t.ranges}},NamedNodeMap:os,NodeList:Yr}),Ta=new WeakMap;class Ra extends Pi{constructor(e){super(null,"#document",9),this[o]={active:!1,registry:null},this[b]={active:!1,class:null},this[g]=ya[e],this[u]=null,this[d]=null,this[f]=null,this[m]=null,this[E]=null}get defaultView(){return Ta.has(this)||Ta.set(this,new Proxy(globalThis,{set:(e,t,r)=>{switch(t){case"addEventListener":case"removeEventListener":case"dispatchEvent":this[p][t]=r;break;default:e[t]=r}return!0},get:(e,t)=>{switch(t){case"addEventListener":case"removeEventListener":case"dispatchEvent":if(!this[p]){const e=this[p]=new Kr;e.dispatchEvent=e.dispatchEvent.bind(e),e.addEventListener=e.addEventListener.bind(e),e.removeEventListener=e.removeEventListener.bind(e)}return this[p][t];case"document":return this;case"navigator":return{userAgent:"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36"};case"window":return Ta.get(this);case"customElements":return this[o].registry||(this[o]=new wr(this)),this[o];case"performance":return Nr.F;case"DOMParser":return this[d];case"Image":return this[m]||(this[m]=xa(this)),this[m];case"MutationObserver":return this[b].class||(this[b]=new zr(this)),this[b].class}return this[f]&&this[f][t]||Ca[t]||e[t]}})),Ta.get(this)}get doctype(){const e=this[u];if(e)return e;const{firstChild:t}=this;return t&&t.nodeType===Zt?this[u]=t:null}set doctype(e){if(/^([a-z:]+)(\s+system|\s+public(\s+"([^"]+)")?)?(\s+"([^"]+)")?/i.test(e)){const{$1:e,$4:t,$6:r}=RegExp;this[u]=new Mi(this,e,t,r),ur(this,this[u],this[v])}}get documentElement(){return this.firstElementChild}get isConnected(){return!0}_getParent(){return this[p]}createAttribute(e){return new on(this,e)}createCDATASection(e){return new _n(this,e)}createComment(e){return new xn(this,e)}createDocumentFragment(){return new Bi(this)}createDocumentType(e,t,r){return new Mi(this,e,t,r)}createElement(e){return new hs(this,e)}createRange(){const e=new Sa;return e.commonAncestorContainer=this,e}createTextNode(e){return new Ii(this,e)}createTreeWalker(e,t=-1){return new Ea(e,t)}createNodeIterator(e,t=-1){return this.createTreeWalker(e,t)}createEvent(e){const t=Qt("Event"===e?new as(""):new _a(""));return t.initEvent=t.initCustomEvent=(e,r=!1,n=!1,i)=>{t.bubbles=!!r,er(t,{type:{value:e},canBubble:{value:r},cancelable:{value:n},detail:{value:i}})},t}cloneNode(e=!1){const{constructor:t,[o]:r,[u]:n}=this,i=new t;if(i[o]=r,e){const e=i[h],{childNodes:t}=this;for(let{length:r}=t,n=0;n<r;n++)i.insertBefore(t[n].cloneNode(!0),e);n&&(i[u]=t[0])}return i}importNode(e){const t=1<arguments.length&&!!arguments[1],r=e.cloneNode(t),{[o]:n}=this,{active:i}=n,s=e=>{const{ownerDocument:t,nodeType:r}=e;e.ownerDocument=this,i&&t!==this&&1===r&&n.upgrade(e)};if(s(r),t)switch(r.nodeType){case 1:case Jt:{let{[v]:e,[h]:t}=r;for(;e!==t;)1===e.nodeType&&s(e),e=e[v];break}}return r}toString(){return this.childNodes.join("")}querySelector(e){return Aa(super.querySelector,this,e)}querySelectorAll(e){return Aa(super.querySelectorAll,this,e)}getElementsByTagNameNS(e,t){return this.getElementsByTagName(t)}createAttributeNS(e,t){return this.createAttribute(t)}createElementNS(e,t,r){return e===Yt?new ms(this,t,null):this.createElement(t,r)}}ir(Ca.Document=function(){gs()},Ra).prototype=Ra.prototype;class Na extends Ra{constructor(){super("text/html")}get all(){const e=new Yr;let{[v]:t,[h]:r}=this;for(;t!==r;)1===t.nodeType&&e.push(t),t=t[v];return e}get head(){const{documentElement:e}=this;let{firstElementChild:t}=e;return t&&"HEAD"===t.tagName||(t=this.createElement("head"),e.prepend(t)),t}get body(){const{head:e}=this;let{nextElementSibling:t}=e;return t&&"BODY"===t.tagName||(t=this.createElement("body"),e.after(t)),t}get title(){const{head:e}=this;return e.getElementsByTagName("title").at(0)?.textContent||""}set title(e){const{head:t}=this;let r=t.getElementsByTagName("title").at(0);r?r.textContent=e:t.insertBefore(this.createElement("title"),t.firstChild).textContent=e}createElement(e,t){const r=!(!t||!t.is),n=((e,t,r,n)=>{if(!t&&Tr.has(r))return new(Tr.get(r))(e,r);const{[o]:{active:i,registry:s}}=e;if(i){const i=t?n.is:r;if(s.has(i)){const{Class:t}=s.get(i),n=new t(e,r);return gr.set(n,{connected:!1}),n}}return new qs(e,r)})(this,r,e,t);return r&&n.setAttribute("is",t.is),n}}class qa extends Ra{constructor(){super("image/svg+xml")}toString(){return this[g].docType+super.toString()}}class Ia extends Ra{constructor(){super("text/xml")}toString(){return this[g].docType+super.toString()}}class Da{parseFromString(e,t,r=null){let n,i=!1;return"text/html"===t?(i=!0,n=new Na):n="image/svg+xml"===t?new qa:new Ia,n[d]=Da,r&&(n[f]=r),i&&"..."===e&&(e="<!doctype html><html><head></head><body></body></html>"),e?Cr(n,i,e):n}}const{parse:La}=JSON;ir((function(){gs()}),Ra).prototype=Ra.prototype},4210:(e,t,r)=>{"use strict";r.d(t,{A:()=>n});const n={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)}},6984:(e,t,r)=>{"use strict";let n;r.d(t,{A:()=>s});const i=new Uint8Array(16);function s(){if(!n){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");n=crypto.getRandomValues.bind(crypto)}return n(i)}},1060:(e,t,r)=>{"use strict";r.d(t,{k:()=>i});const n=[];for(let e=0;e<256;++e)n.push((e+256).toString(16).slice(1));function i(e,t=0){return(n[e[t+0]]+n[e[t+1]]+n[e[t+2]]+n[e[t+3]]+"-"+n[e[t+4]]+n[e[t+5]]+"-"+n[e[t+6]]+n[e[t+7]]+"-"+n[e[t+8]]+n[e[t+9]]+"-"+n[e[t+10]]+n[e[t+11]]+n[e[t+12]]+n[e[t+13]]+n[e[t+14]]+n[e[t+15]]).toLowerCase()}},6235:(e,t,r)=>{"use strict";r.d(t,{A:()=>a});var n=r(4210),i=r(6984),s=r(1060);const a=function(e,t,r){if(n.A.randomUUID&&!t&&!e)return n.A.randomUUID();const a=(e=e||{}).random||(e.rng||i.A)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,t){r=r||0;for(let e=0;e<16;++e)t[r+e]=a[e];return t}return(0,s.k)(a)}}},s={};function a(e){var t=s[e];if(void 0!==t)return t.exports;var r=s[e]={exports:{}};return i[e](r,r.exports,a),r.exports}e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",r="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",n=e=>{e&&e.d<1&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},a.a=(i,s,a)=>{var o;a&&((o=[]).d=-1);var l,c,u,d=new Set,h=i.exports,p=new Promise(((e,t)=>{u=t,c=e}));p[t]=h,p[e]=e=>(o&&e(o),d.forEach(e),p.catch((e=>{}))),i.exports=p,s((i=>{var s;l=(i=>i.map((i=>{if(null!==i&&"object"==typeof i){if(i[e])return i;if(i.then){var s=[];s.d=0,i.then((e=>{a[t]=e,n(s)}),(e=>{a[r]=e,n(s)}));var a={};return a[e]=e=>e(s),a}}var o={};return o[e]=e=>{},o[t]=i,o})))(i);var a=()=>l.map((e=>{if(e[r])throw e[r];return e[t]})),c=new Promise((t=>{(s=()=>t(a)).r=0;var r=e=>e!==o&&!d.has(e)&&(d.add(e),e&&!e.d&&(s.r++,e.push(s)));l.map((t=>t[e](r)))}));return s.r?c:a()}),(e=>(e?u(p[r]=e):c(h),n(o)))),o&&o.d<0&&(o.d=0)},a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},a.d=(e,t)=>{for(var r in t)a.o(t,r)&&!a.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a(9199)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,